cscope 15 C:\work\workspace\EmbeddedTddWorkshop"               0002125352
	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

25 
	~"wúög.h
"

26 
	~"wúög_¥iv©e.h
"

28 
	~"H¨dw¨eSîül.h
"

34 
	#RX_BUFFER_SIZE
 128

	)

36 
	srög_buf„r
 {

37 
	mbuf„r
[
RX_BUFFER_SIZE
];

38 
	mhód
;

39 
	mèû
;

42 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

44 #i‡
deföed
(
__AVR_ATmega1280__
)

45 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

46 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

47 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

50 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
rx_buf„r
)

52 
i
 = (
rx_buf„r
->
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

58 i‡(
i
 !
rx_buf„r
->
èû
) {

59 
rx_buf„r
->
buf„r
[rx_buf„r->
hód
] = 
c
;

60 
rx_buf„r
->
hód
 = 
i
;

62 
	}
}

64 #i‡
deföed
(
__AVR_ATmega1280__
)

66 
	$SIGNAL
(
SIG_USART0_RECV
)

68 
c
 = 
UDR0
;

69 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

70 
	}
}

72 
	$SIGNAL
(
SIG_USART1_RECV
)

74 
c
 = 
UDR1
;

75 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

76 
	}
}

78 
	$SIGNAL
(
SIG_USART2_RECV
)

80 
c
 = 
UDR2
;

81 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

82 
	}
}

84 
	$SIGNAL
(
SIG_USART3_RECV
)

86 
c
 = 
UDR3
;

87 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

88 
	}
}

92 #i‡
deföed
(
__AVR_ATmega8__
)

93 
	$SIGNAL
(
SIG_UART_RECV
)

95 
	$SIGNAL
(
USART_RX_ve˘
)

98 #i‡
	`deföed
(
__AVR_ATmega8__
)

99 
c
 = 
UDR
;

101 
c
 = 
UDR0
;

103 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

104 
	}
}

110 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

111 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

112 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

113 vﬁ©ûê
uöt8_t
 *
udr
,

114 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
)

116 
_rx_buf„r
 = 
rx_buf„r
;

117 
_ubºh
 = 
ubºh
;

118 
_ubºl
 = 
ubºl
;

119 
_uc§a
 = 
uc§a
;

120 
_uc§b
 = 
uc§b
;

121 
_udr
 = 
udr
;

122 
_rxí
 = 
rxí
;

123 
_txí
 = 
txí
;

124 
_rxcõ
 = 
rxcõ
;

125 
_udª
 = 
udª
;

126 
_u2x
 = 
u2x
;

127 
	}
}

131 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

133 
uöt16_t
 
baud_£âög
;

134 
boﬁ
 
u£_u2x
;

137 i‡(
baud
 > 
F_CPU
 / 16) {

138 
u£_u2x
 = 
åue
;

144 
uöt8_t
 
n⁄u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(16*(((F_CPU/8/
baud
-1)/2)+1))*255)/baud)));

145 
uöt8_t
 
u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(8*(((F_CPU/4/
baud
-1)/2)+1))*255)/baud)));

148 
u£_u2x
 = (
n⁄u2x_baud_îr‹
 > 
u2x_baud_îr‹
);

151 i‡(
u£_u2x
) {

152 *
_uc§a
 = 1 << 
_u2x
;

153 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

155 *
_uc§a
 = 0;

156 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

160 *
_ubºh
 = 
baud_£âög
 >> 8;

161 *
_ubºl
 = 
baud_£âög
;

163 
	`sbi
(*
_uc§b
, 
_rxí
);

164 
	`sbi
(*
_uc§b
, 
_txí
);

165 
	`sbi
(*
_uc§b
, 
_rxcõ
);

166 
	}
}

168 
uöt8_t
 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

170  (
RX_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % RX_BUFFER_SIZE;

171 
	}
}

173 
	gH¨dw¨eSîül
::
	$ªad
()

176 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

179 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

180 
_rx_buf„r
->
èû
 = (_rx_buf„r->èû + 1Ë% 
RX_BUFFER_SIZE
;

181  
c
;

183 
	}
}

185 
	gH¨dw¨eSîül
::
	$Êush
()

196 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

197 
	}
}

199 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

201 !((*
_uc§a
Ë& (1 << 
_udª
)))

204 *
_udr
 = 
c
;

205 
	}
}

209 #i‡
deföed
(
__AVR_ATmega8__
)

210 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRE
, 
U2X
);

212 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRE0
, 
U2X0
);

215 #i‡
deföed
(
__AVR_ATmega1280__
)

216 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRE1
, 
U2X1
);

217 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRE2
, 
U2X2
);

218 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRE3
, 
U2X3
);

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.h

20 #i‚de‡
H¨dw¨eSîül_h


21 
	#H¨dw¨eSîül_h


	)

23 
	~<öây≥s.h
>

25 
	~"Pröt.h
"

27 
	grög_buf„r
;

29 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Pröt


31 
¥iv©e
:

32 
rög_buf„r
 *
_rx_buf„r
;

33 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

34 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

35 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

36 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

37 vﬁ©ûê
uöt8_t
 *
	m_udr
;

38 
uöt8_t
 
	m_rxí
;

39 
uöt8_t
 
	m_txí
;

40 
uöt8_t
 
	m_rxcõ
;

41 
uöt8_t
 
	m_udª
;

42 
uöt8_t
 
	m_u2x
;

43 
	mpublic
:

44 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

45 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

46 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

47 vﬁ©ûê
uöt8_t
 *
udr
,

48 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
);

49 
begö
();

50 
uöt8_t
 
avaûabÀ
();

51 
ªad
();

52 
Êush
();

53 
vútuÆ
 
wrôe
(
uöt8_t
);

54 
usög
 
	mPröt
::
wrôe
;

57 
H¨dw¨eSîül
 
Sîül
;

59 #i‡
deföed
(
__AVR_ATmega1280__
)

60 
H¨dw¨eSîül
 
Sîül1
;

61 
H¨dw¨eSîül
 
Sîül2
;

62 
H¨dw¨eSîül
 
Sîül3
;

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

25 
	~"wúög.h
"

27 
	~"Pröt.h
"

32 
	gPröt
::
	$wrôe
(c⁄° *
°r
)

34 *
°r
)

35 
	`wrôe
(*
°r
++);

36 
	}
}

39 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

41 
size
--)

42 
	`wrôe
(*
buf„r
++);

43 
	}
}

45 
	gPröt
::
	$¥öt
(
uöt8_t
 
b
)

47 
this
->
	`wrôe
(
b
);

48 
	}
}

50 
	gPröt
::
	$¥öt
(
c
)

52 
	`¥öt
((
byã
Ë
c
);

53 
	}
}

55 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

57 
	`wrôe
(
°r
);

58 
	}
}

60 
	gPröt
::
	$¥öt
(
n
)

62 
	`¥öt
((Ë
n
);

63 
	}
}

65 
	gPröt
::
	$¥öt
(
n
)

67 
	`¥öt
((Ë
n
);

68 
	}
}

70 
	gPröt
::
	$¥öt
(
n
)

72 i‡(
n
 < 0) {

73 
	`¥öt
('-');

74 
n
 = -n;

76 
	`¥ötNumbî
(
n
, 10);

77 
	}
}

79 
	gPröt
::
	$¥öt
(
n
)

81 
	`¥ötNumbî
(
n
, 10);

82 
	}
}

84 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

86 i‡(
ba£
 == 0)

87 
	`¥öt
((Ë
n
);

88 i‡(
ba£
 == 10)

89 
	`¥öt
(
n
);

91 
	`¥ötNumbî
(
n
, 
ba£
);

92 
	}
}

94 
	gPröt
::
	$¥öt
(
n
)

96 
	`¥ötFlﬂt
(
n
, 2);

97 
	}
}

99 
	gPröt
::
	$¥öén
()

101 
	`¥öt
('\r');

102 
	`¥öt
('\n');

103 
	}
}

105 
	gPröt
::
	$¥öén
(
c
)

107 
	`¥öt
(
c
);

108 
	`¥öén
();

109 
	}
}

111 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

113 
	`¥öt
(
c
);

114 
	`¥öén
();

115 
	}
}

117 
	gPröt
::
	$¥öén
(
uöt8_t
 
b
)

119 
	`¥öt
(
b
);

120 
	`¥öén
();

121 
	}
}

123 
	gPröt
::
	$¥öén
(
n
)

125 
	`¥öt
(
n
);

126 
	`¥öén
();

127 
	}
}

129 
	gPröt
::
	$¥öén
(
n
)

131 
	`¥öt
(
n
);

132 
	`¥öén
();

133 
	}
}

135 
	gPröt
::
	$¥öén
(
n
)

137 
	`¥öt
(
n
);

138 
	`¥öén
();

139 
	}
}

141 
	gPröt
::
	$¥öén
(
n
)

143 
	`¥öt
(
n
);

144 
	`¥öén
();

145 
	}
}

147 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

149 
	`¥öt
(
n
, 
ba£
);

150 
	`¥öén
();

151 
	}
}

153 
	gPröt
::
	$¥öén
(
n
)

155 
	`¥öt
(
n
);

156 
	`¥öén
();

157 
	}
}

161 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

163 
buf
[8 * ()];

164 
i
 = 0;

166 i‡(
n
 == 0) {

167 
	`¥öt
('0');

171 
n
 > 0) {

172 
buf
[
i
++] = 
n
 % 
ba£
;

173 
n
 /
ba£
;

176 ; 
i
 > 0; i--)

177 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

178 '0' + 
buf
[
i
 - 1] :

179 'A' + 
buf
[
i
 - 1] - 10));

180 
	}
}

182 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

185 i‡(
numbî
 < 0.0)

187 
	`¥öt
('-');

188 
numbî
 = -number;

192 
roundög
 = 0.5;

193 
uöt8_t
 
i
=0; i<
digôs
; ++i)

194 
roundög
 /= 10.0;

196 
numbî
 +
roundög
;

199 
öt_∑π
 = ()
numbî
;

200 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

201 
	`¥öt
(
öt_∑π
);

204 i‡(
digôs
 > 0)

205 
	`¥öt
(".");

208 
digôs
-- > 0)

210 
ªmaödî
 *= 10.0;

211 
toPröt
 = (
ªmaödî
);

212 
	`¥öt
(
toPröt
);

213 
ªmaödî
 -
toPröt
;

215 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	#DEC
 10

	)

27 
	#HEX
 16

	)

28 
	#OCT
 8

	)

29 
	#BIN
 2

	)

30 
	#BYTE
 0

	)

32 ˛as†
	cPröt


34 
	m¥iv©e
:

35 
¥ötNumbî
(, 
uöt8_t
);

36 
¥ötFlﬂt
(, 
uöt8_t
);

37 
	mpublic
:

38 
vútuÆ
 
wrôe
(
uöt8_t
) = 0;

39 
vútuÆ
 
wrôe
(c⁄° *
°r
);

40 
vútuÆ
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
);

41 
¥öt
();

42 
¥öt
(const []);

43 
¥öt
(
uöt8_t
);

44 
¥öt
();

45 
¥öt
();

46 
¥öt
();

47 
¥öt
();

48 
¥öt
(, );

49 
¥öt
();

50 
¥öén
();

51 
¥öén
();

52 
¥öén
(const []);

53 
¥öén
(
uöt8_t
);

54 
¥öén
();

55 
¥öén
();

56 
¥öén
();

57 
¥öén
();

58 
¥öén
(, );

59 
¥öén
();

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WConstants.h

1 
	~"wúög.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WInterrupts.c

26 
	~<öây≥s.h
>

27 
	~<avr/io.h
>

28 
	~<avr/öãºu±.h
>

29 
	~<avr/pgm•a˚.h
>

30 
	~<°dio.h
>

32 
	~"WC⁄°™ts.h
"

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 #i‡
deföed
(
__AVR_ATmega8__
)

39 
	#EICRA
 
MCUCR


	)

40 
	#EIMSK
 
GICR


	)

43 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

44 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

45 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

54 
öãºu±Num
) {

55 #i‡
	`deföed
(
__AVR_ATmega1280__
)

57 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

58 
EIMSK
 |(1 << 
INT0
);

61 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

62 
EIMSK
 |(1 << 
INT1
);

65 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

66 
EIMSK
 |(1 << 
INT2
);

69 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

70 
EIMSK
 |(1 << 
INT3
);

73 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

74 
EIMSK
 |(1 << 
INT4
);

77 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

78 
EIMSK
 |(1 << 
INT5
);

81 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

82 
EIMSK
 |(1 << 
INT6
);

85 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

86 
EIMSK
 |(1 << 
INT7
);

90 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

91 
EIMSK
 |(1 << 
INT0
);

94 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

95 
EIMSK
 |(1 << 
INT1
);

100 
	}
}

102 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

103 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

107 
öãºu±Num
) {

108 #i‡
	`deföed
(
__AVR_ATmega1280__
)

110 
EIMSK
 &~(1 << 
INT0
);

113 
EIMSK
 &~(1 << 
INT1
);

116 
EIMSK
 &~(1 << 
INT2
);

119 
EIMSK
 &~(1 << 
INT3
);

122 
EIMSK
 &~(1 << 
INT4
);

125 
EIMSK
 &~(1 << 
INT5
);

128 
EIMSK
 &~(1 << 
INT6
);

131 
EIMSK
 &~(1 << 
INT7
);

135 
EIMSK
 &~(1 << 
INT0
);

138 
EIMSK
 &~(1 << 
INT1
);

143 
ötFunc
[
öãºu±Num
] = 0;

145 
	}
}

153 #i‡
deföed
(
__AVR_ATmega1280__
)

155 
	$SIGNAL
(
INT0_ve˘
) {

156 if(
ötFunc
[
EXTERNAL_INT_2
])

157 
ötFunc
[
EXTERNAL_INT_2
]();

158 
	}
}

160 
	$SIGNAL
(
INT1_ve˘
) {

161 if(
ötFunc
[
EXTERNAL_INT_3
])

162 
ötFunc
[
EXTERNAL_INT_3
]();

163 
	}
}

165 
	$SIGNAL
(
INT2_ve˘
) {

166 if(
ötFunc
[
EXTERNAL_INT_4
])

167 
ötFunc
[
EXTERNAL_INT_4
]();

168 
	}
}

170 
	$SIGNAL
(
INT3_ve˘
) {

171 if(
ötFunc
[
EXTERNAL_INT_5
])

172 
ötFunc
[
EXTERNAL_INT_5
]();

173 
	}
}

175 
	$SIGNAL
(
INT4_ve˘
) {

176 if(
ötFunc
[
EXTERNAL_INT_0
])

177 
ötFunc
[
EXTERNAL_INT_0
]();

178 
	}
}

180 
	$SIGNAL
(
INT5_ve˘
) {

181 if(
ötFunc
[
EXTERNAL_INT_1
])

182 
ötFunc
[
EXTERNAL_INT_1
]();

183 
	}
}

185 
	$SIGNAL
(
INT6_ve˘
) {

186 if(
ötFunc
[
EXTERNAL_INT_6
])

187 
ötFunc
[
EXTERNAL_INT_6
]();

188 
	}
}

190 
	$SIGNAL
(
INT7_ve˘
) {

191 if(
ötFunc
[
EXTERNAL_INT_7
])

192 
ötFunc
[
EXTERNAL_INT_7
]();

193 
	}
}

197 
	$SIGNAL
(
INT0_ve˘
) {

198 if(
ötFunc
[
EXTERNAL_INT_0
])

199 
ötFunc
[
EXTERNAL_INT_0
]();

200 
	}
}

202 
	$SIGNAL
(
INT1_ve˘
) {

203 if(
ötFunc
[
EXTERNAL_INT_1
])

204 
ötFunc
[
EXTERNAL_INT_1
]();

205 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WProgram.h

1 #i‚de‡
WProgøm_h


2 
	#WProgøm_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/öãºu±.h
>

10 
	~"wúög.h
"

12 #ifde‡
__˝lu•lus


13 
	~"H¨dw¨eSîül.h
"

15 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

16 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

18 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

20 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

23 
øndom
();

24 
øndom
(, );

25 
øndomSìd
();

26 
m≠
(, , , , );

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.c

25 
	~<avr/io.h
>

26 
	~"wúög_¥iv©e.h
"

27 
	~"pös_¨duöo.h
"

68 
	#PA
 1

	)

69 
	#PB
 2

	)

70 
	#PC
 3

	)

71 
	#PD
 4

	)

72 
	#PE
 5

	)

73 
	#PF
 6

	)

74 
	#PG
 7

	)

75 
	#PH
 8

	)

76 
	#PJ
 10

	)

77 
	#PK
 11

	)

78 
	#PL
 12

	)

80 
	#REPEAT8
(
x
Ëx, x, x, x, x, x, x, 
	)
x

81 
	#BV0TO7
 
	`_BV
(0), _BV(1), _BV(2), _BV(3), _BV(4), _BV(5), _BV(6), _BV(7)

	)

82 
	#BV7TO0
 
	`_BV
(7), _BV(6), _BV(5), _BV(4), _BV(3), _BV(2), _BV(1), _BV(0)

	)

85 #i‡
deföed
(
__AVR_ATmega1280__
)

86 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

87 
NOT_A_PORT
,

88 &
DDRA
,

89 &
DDRB
,

90 &
DDRC
,

91 &
DDRD
,

92 &
DDRE
,

93 &
DDRF
,

94 &
DDRG
,

95 &
DDRH
,

96 
NOT_A_PORT
,

97 &
DDRJ
,

98 &
DDRK
,

99 &
DDRL
,

102 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

103 
NOT_A_PORT
,

104 &
PORTA
,

105 &
PORTB
,

106 &
PORTC
,

107 &
PORTD
,

108 &
PORTE
,

109 &
PORTF
,

110 &
PORTG
,

111 &
PORTH
,

112 
NOT_A_PORT
,

113 &
PORTJ
,

114 &
PORTK
,

115 &
PORTL
,

118 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

119 
NOT_A_PIN
,

120 &
PINA
,

121 &
PINB
,

122 &
PINC
,

123 &
PIND
,

124 &
PINE
,

125 &
PINF
,

126 &
PING
,

127 &
PINH
,

128 
NOT_A_PIN
,

129 &
PINJ
,

130 &
PINK
,

131 &
PINL
,

134 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

137 
PE
 ,

138 
PE
 ,

139 
PE
 ,

140 
PE
 ,

141 
PG
 ,

142 
PE
 ,

143 
PH
 ,

144 
PH
 ,

145 
PH
 ,

146 
PH
 ,

147 
PB
 ,

148 
PB
 ,

149 
PB
 ,

150 
PB
 ,

151 
PJ
 ,

152 
PJ
 ,

153 
PH
 ,

154 
PH
 ,

155 
PD
 ,

156 
PD
 ,

157 
PD
 ,

158 
PD
 ,

159 
PA
 ,

160 
PA
 ,

161 
PA
 ,

162 
PA
 ,

163 
PA
 ,

164 
PA
 ,

165 
PA
 ,

166 
PA
 ,

167 
PC
 ,

168 
PC
 ,

169 
PC
 ,

170 
PC
 ,

171 
PC
 ,

172 
PC
 ,

173 
PC
 ,

174 
PC
 ,

175 
PD
 ,

176 
PG
 ,

177 
PG
 ,

178 
PG
 ,

179 
PL
 ,

180 
PL
 ,

181 
PL
 ,

182 
PL
 ,

183 
PL
 ,

184 
PL
 ,

185 
PL
 ,

186 
PL
 ,

187 
PB
 ,

188 
PB
 ,

189 
PB
 ,

190 
PB
 ,

191 
PF
 ,

192 
PF
 ,

193 
PF
 ,

194 
PF
 ,

195 
PF
 ,

196 
PF
 ,

197 
PF
 ,

198 
PF
 ,

199 
PK
 ,

200 
PK
 ,

201 
PK
 ,

202 
PK
 ,

203 
PK
 ,

204 
PK
 ,

205 
PK
 ,

206 
PK
 ,

209 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

212 
_BV
( 0 ) ,

213 
_BV
( 1 ) ,

214 
_BV
( 4 ) ,

215 
_BV
( 5 ) ,

216 
_BV
( 5 ) ,

217 
_BV
( 3 ) ,

218 
_BV
( 3 ) ,

219 
_BV
( 4 ) ,

220 
_BV
( 5 ) ,

221 
_BV
( 6 ) ,

222 
_BV
( 4 ) ,

223 
_BV
( 5 ) ,

224 
_BV
( 6 ) ,

225 
_BV
( 7 ) ,

226 
_BV
( 1 ) ,

227 
_BV
( 0 ) ,

228 
_BV
( 1 ) ,

229 
_BV
( 0 ) ,

230 
_BV
( 3 ) ,

231 
_BV
( 2 ) ,

232 
_BV
( 1 ) ,

233 
_BV
( 0 ) ,

234 
_BV
( 0 ) ,

235 
_BV
( 1 ) ,

236 
_BV
( 2 ) ,

237 
_BV
( 3 ) ,

238 
_BV
( 4 ) ,

239 
_BV
( 5 ) ,

240 
_BV
( 6 ) ,

241 
_BV
( 7 ) ,

242 
_BV
( 7 ) ,

243 
_BV
( 6 ) ,

244 
_BV
( 5 ) ,

245 
_BV
( 4 ) ,

246 
_BV
( 3 ) ,

247 
_BV
( 2 ) ,

248 
_BV
( 1 ) ,

249 
_BV
( 0 ) ,

250 
_BV
( 7 ) ,

251 
_BV
( 2 ) ,

252 
_BV
( 1 ) ,

253 
_BV
( 0 ) ,

254 
_BV
( 7 ) ,

255 
_BV
( 6 ) ,

256 
_BV
( 5 ) ,

257 
_BV
( 4 ) ,

258 
_BV
( 3 ) ,

259 
_BV
( 2 ) ,

260 
_BV
( 1 ) ,

261 
_BV
( 0 ) ,

262 
_BV
( 3 ) ,

263 
_BV
( 2 ) ,

264 
_BV
( 1 ) ,

265 
_BV
( 0 ) ,

266 
_BV
( 0 ) ,

267 
_BV
( 1 ) ,

268 
_BV
( 2 ) ,

269 
_BV
( 3 ) ,

270 
_BV
( 4 ) ,

271 
_BV
( 5 ) ,

272 
_BV
( 6 ) ,

273 
_BV
( 7 ) ,

274 
_BV
( 0 ) ,

275 
_BV
( 1 ) ,

276 
_BV
( 2 ) ,

277 
_BV
( 3 ) ,

278 
_BV
( 4 ) ,

279 
_BV
( 5 ) ,

280 
_BV
( 6 ) ,

281 
_BV
( 7 ) ,

284 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

287 
NOT_ON_TIMER
 ,

288 
NOT_ON_TIMER
 ,

289 
TIMER3B
 ,

290 
TIMER3C
 ,

291 
TIMER0B
 ,

292 
TIMER3A
 ,

293 
TIMER4A
 ,

294 
TIMER4B
 ,

295 
TIMER4C
 ,

296 
TIMER2B
 ,

297 
TIMER2A
 ,

298 
TIMER1A
 ,

299 
TIMER1B
 ,

300 
TIMER0A
 ,

301 
NOT_ON_TIMER
 ,

302 
NOT_ON_TIMER
 ,

303 
NOT_ON_TIMER
 ,

304 
NOT_ON_TIMER
 ,

305 
NOT_ON_TIMER
 ,

306 
NOT_ON_TIMER
 ,

307 
NOT_ON_TIMER
 ,

308 
NOT_ON_TIMER
 ,

309 
NOT_ON_TIMER
 ,

310 
NOT_ON_TIMER
 ,

311 
NOT_ON_TIMER
 ,

312 
NOT_ON_TIMER
 ,

313 
NOT_ON_TIMER
 ,

314 
NOT_ON_TIMER
 ,

315 
NOT_ON_TIMER
 ,

316 
NOT_ON_TIMER
 ,

317 
NOT_ON_TIMER
 ,

318 
NOT_ON_TIMER
 ,

319 
NOT_ON_TIMER
 ,

320 
NOT_ON_TIMER
 ,

321 
NOT_ON_TIMER
 ,

322 
NOT_ON_TIMER
 ,

323 
NOT_ON_TIMER
 ,

324 
NOT_ON_TIMER
 ,

325 
NOT_ON_TIMER
 ,

326 
NOT_ON_TIMER
 ,

327 
NOT_ON_TIMER
 ,

328 
NOT_ON_TIMER
 ,

329 
NOT_ON_TIMER
 ,

330 
NOT_ON_TIMER
 ,

331 
TIMER5C
 ,

332 
TIMER5B
 ,

333 
TIMER5A
 ,

334 
NOT_ON_TIMER
 ,

335 
NOT_ON_TIMER
 ,

336 
NOT_ON_TIMER
 ,

337 
NOT_ON_TIMER
 ,

338 
NOT_ON_TIMER
 ,

339 
NOT_ON_TIMER
 ,

340 
NOT_ON_TIMER
 ,

341 
NOT_ON_TIMER
 ,

342 
NOT_ON_TIMER
 ,

343 
NOT_ON_TIMER
 ,

344 
NOT_ON_TIMER
 ,

345 
NOT_ON_TIMER
 ,

346 
NOT_ON_TIMER
 ,

347 
NOT_ON_TIMER
 ,

348 
NOT_ON_TIMER
 ,

349 
NOT_ON_TIMER
 ,

350 
NOT_ON_TIMER
 ,

351 
NOT_ON_TIMER
 ,

352 
NOT_ON_TIMER
 ,

353 
NOT_ON_TIMER
 ,

354 
NOT_ON_TIMER
 ,

355 
NOT_ON_TIMER
 ,

356 
NOT_ON_TIMER
 ,

362 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

363 
NOT_A_PORT
,

364 
NOT_A_PORT
,

365 &
DDRB
,

366 &
DDRC
,

367 &
DDRD
,

370 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

371 
NOT_A_PORT
,

372 
NOT_A_PORT
,

373 &
PORTB
,

374 &
PORTC
,

375 &
PORTD
,

378 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

379 
NOT_A_PORT
,

380 
NOT_A_PORT
,

381 &
PINB
,

382 &
PINC
,

383 &
PIND
,

386 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

387 
PD
,

388 
PD
,

389 
PD
,

390 
PD
,

391 
PD
,

392 
PD
,

393 
PD
,

394 
PD
,

395 
PB
,

396 
PB
,

397 
PB
,

398 
PB
,

399 
PB
,

400 
PB
,

401 
PC
,

402 
PC
,

403 
PC
,

404 
PC
,

405 
PC
,

406 
PC
,

409 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

410 
_BV
(0),

411 
_BV
(1),

412 
_BV
(2),

413 
_BV
(3),

414 
_BV
(4),

415 
_BV
(5),

416 
_BV
(6),

417 
_BV
(7),

418 
_BV
(0),

419 
_BV
(1),

420 
_BV
(2),

421 
_BV
(3),

422 
_BV
(4),

423 
_BV
(5),

424 
_BV
(0),

425 
_BV
(1),

426 
_BV
(2),

427 
_BV
(3),

428 
_BV
(4),

429 
_BV
(5),

432 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

433 
NOT_ON_TIMER
,

434 
NOT_ON_TIMER
,

435 
NOT_ON_TIMER
,

437 #i‡
deföed
(
__AVR_ATmega8__
)

438 
NOT_ON_TIMER
,

440 
TIMER2B
,

442 
NOT_ON_TIMER
,

444 #i‡
deföed
(
__AVR_ATmega8__
)

445 
NOT_ON_TIMER
,

446 
NOT_ON_TIMER
,

448 
TIMER0B
,

449 
TIMER0A
,

451 
NOT_ON_TIMER
,

452 
NOT_ON_TIMER
,

453 
TIMER1A
,

454 
TIMER1B
,

455 #i‡
deföed
(
__AVR_ATmega8__
)

456 
TIMER2
,

458 
TIMER2A
,

460 
NOT_ON_TIMER
,

461 
NOT_ON_TIMER
,

462 
NOT_ON_TIMER
,

463 
NOT_ON_TIMER
,

464 
NOT_ON_TIMER
,

465 
NOT_ON_TIMER
,

466 
NOT_ON_TIMER
,

467 
NOT_ON_TIMER
,

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NOT_A_PIN
 0

	)

31 
	#NOT_A_PORT
 0

	)

33 
	#NOT_ON_TIMER
 0

	)

34 
	#TIMER0A
 1

	)

35 
	#TIMER0B
 2

	)

36 
	#TIMER1A
 3

	)

37 
	#TIMER1B
 4

	)

38 
	#TIMER2
 5

	)

39 
	#TIMER2A
 6

	)

40 
	#TIMER2B
 7

	)

42 
	#TIMER3A
 8

	)

43 
	#TIMER3B
 9

	)

44 
	#TIMER3C
 10

	)

45 
	#TIMER4A
 11

	)

46 
	#TIMER4B
 12

	)

47 
	#TIMER4C
 13

	)

48 
	#TIMER5A
 14

	)

49 
	#TIMER5B
 15

	)

50 
	#TIMER5C
 16

	)

54 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

55 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

56 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

58 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

60 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

61 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

68 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

69 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

70 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

71 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

72 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

73 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

74 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

48 
m
 = 
timî0_mûlis
;

49 
f
 = 
timî0_‰a˘
;

51 
m
 +
MILLIS_INC
;

52 
f
 +
FRACT_INC
;

53 i‡(
f
 >
FRACT_MAX
) {

54 
f
 -
FRACT_MAX
;

55 
m
 += 1;

58 
timî0_‰a˘
 = 
f
;

59 
timî0_mûlis
 = 
m
;

60 
timî0_ovîÊow_cou¡
++;

61 
	}
}

63 
	$mûlis
()

65 
m
;

66 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

70 
	`˛i
();

71 
m
 = 
timî0_mûlis
;

72 
SREG
 = 
ﬁdSREG
;

74  
m
;

75 
	}
}

77 
	$mi¸os
() {

78 
m
, 
t
;

79 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

81 
	`˛i
();

82 
t
 = 
TCNT0
;

84 #ifde‡
TIFR0


85 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

86 
t
 = 256;

88 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

89 
t
 = 256;

92 
m
 = 
timî0_ovîÊow_cou¡
;

93 
SREG
 = 
ﬁdSREG
;

95  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

96 
	}
}

98 
	$dñay
(
ms
)

100 
°¨t
 = 
	`mûlis
();

102 
	`mûlis
(Ë- 
°¨t
 <
ms
)

104 
	}
}

109 
	$dñayMi¸o£c⁄ds
(
us
)

111 
uöt8_t
 
ﬁdSREG
;

117 #i‡
F_CPU
 >= 16000000L

122 i‡(--
us
 == 0)

128 
us
 <<= 2;

131 
us
 -= 2;

138 i‡(--
us
 == 0)

140 i‡(--
us
 == 0)

146 
us
 <<= 1;

150 
us
--;

155 
ﬁdSREG
 = 
SREG
;

156 
	`˛i
();

159 
__asm__
 
	`__vﬁ©ûe__
 (

161 "b∫ê1b" : "=w" (
us
) : "0" (us)

165 
SREG
 = 
ﬁdSREG
;

166 
	}
}

168 
	$öô
()

172 
	`£i
();

177 #i‡!
	`deföed
(
__AVR_ATmega8__
)

178 
	`sbi
(
TCCR0A
, 
WGM01
);

179 
	`sbi
(
TCCR0A
, 
WGM00
);

182 #i‡
	`deföed
(
__AVR_ATmega8__
)

183 
	`sbi
(
TCCR0
, 
CS01
);

184 
	`sbi
(
TCCR0
, 
CS00
);

186 
	`sbi
(
TCCR0B
, 
CS01
);

187 
	`sbi
(
TCCR0B
, 
CS00
);

190 #i‡
	`deföed
(
__AVR_ATmega8__
)

191 
	`sbi
(
TIMSK
, 
TOIE0
);

193 
	`sbi
(
TIMSK0
, 
TOIE0
);

202 
	`sbi
(
TCCR1B
, 
CS11
);

203 
	`sbi
(
TCCR1B
, 
CS10
);

205 
	`sbi
(
TCCR1A
, 
WGM10
);

208 #i‡
	`deföed
(
__AVR_ATmega8__
)

209 
	`sbi
(
TCCR2
, 
CS22
);

211 
	`sbi
(
TCCR2B
, 
CS22
);

214 #i‡
	`deföed
(
__AVR_ATmega8__
)

215 
	`sbi
(
TCCR2
, 
WGM20
);

217 
	`sbi
(
TCCR2A
, 
WGM20
);

220 #i‡
	`deföed
(
__AVR_ATmega1280__
)

222 
	`sbi
(
TCCR3B
, 
CS31
); sbi(TCCR3B, 
CS30
);

223 
	`sbi
(
TCCR4B
, 
CS41
); sbi(TCCR4B, 
CS40
);

224 
	`sbi
(
TCCR5B
, 
CS51
); sbi(TCCR5B, 
CS50
);

226 
	`sbi
(
TCCR3A
, 
WGM30
);

227 
	`sbi
(
TCCR4A
, 
WGM40
);

228 
	`sbi
(
TCCR5A
, 
WGM50
);

235 
	`sbi
(
ADCSRA
, 
ADPS2
);

236 
	`sbi
(
ADCSRA
, 
ADPS1
);

237 
	`sbi
(
ADCSRA
, 
ADPS0
);

240 
	`sbi
(
ADCSRA
, 
ADEN
);

245 #i‡
	`deföed
(
__AVR_ATmega8__
)

246 
UCSRB
 = 0;

248 
UCSR0B
 = 0;

250 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.h

25 #i‚de‡
Wúög_h


26 
	#Wúög_h


	)

28 
	~<avr/io.h
>

29 
	~"bö¨y.h
"

31 #ifde‡
__˝lu•lus


35 #i‚de‡
ARDUINO


36 
	#ARDUINO
 16

	)

39 
	#HIGH
 0x1

	)

40 
	#LOW
 0x0

	)

42 
	#INPUT
 0x0

	)

43 
	#OUTPUT
 0x1

	)

45 
	#åue
 0x1

	)

46 
	#Ál£
 0x0

	)

48 
	#PI
 3.1415926535897932384626433832795

	)

49 
	#HALF_PI
 1.5707963267948966192313216916398

	)

50 
	#TWO_PI
 6.283185307179586476925286766559

	)

51 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

52 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

54 
	#SERIAL
 0x0

	)

55 
	#DISPLAY
 0x1

	)

57 
	#LSBFIRST
 0

	)

58 
	#MSBFIRST
 1

	)

60 
	#CHANGE
 1

	)

61 
	#FALLING
 2

	)

62 
	#RISING
 3

	)

64 
	#INTERNAL
 3

	)

65 
	#DEFAULT
 1

	)

66 
	#EXTERNAL
 0

	)

69 #ifde‡
abs


70 #unde‡
abs


73 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

74 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

75 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

76 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

77 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

78 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

79 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

80 
	#sq
(
x
Ë((x)*(x))

	)

82 
	#öãºu±s
(Ë
	`£i
()

	)

83 
	#noI¡îru±s
(Ë
	`˛i
()

	)

85 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

86 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

87 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

89 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

90 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

92 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

93 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

94 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

95 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

97 
	tw‹d
;

99 
	#bô
(
b
Ë(1UL << (b))

	)

101 
uöt8_t
 
	tboﬁón
;

102 
uöt8_t
 
	tbyã
;

104 
öô
();

106 
pöMode
(
uöt8_t
, uint8_t);

107 
digôÆWrôe
(
uöt8_t
, uint8_t);

108 
digôÆRód
(
uöt8_t
);

109 
™ÆogRód
(
uöt8_t
);

110 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

111 
™ÆogWrôe
(
uöt8_t
, );

113 
begöSîül
();

114 
£rülWrôe
();

115 
£rülAvaûabÀ
();

116 
£rülRód
();

117 
£rülFlush
();

119 
mûlis
();

120 
mi¸os
();

121 
dñay
();

122 
dñayMi¸o£c⁄ds
(
us
);

123 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

125 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
);

127 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

128 
dëachI¡îru±
(
uöt8_t
);

130 
£tup
();

131 
lo›
();

133 #ifde‡
__˝lu•lus


	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_analog.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

30 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

35 
™Æog_ª„ªn˚
 = 
mode
;

36 
	}
}

38 
	$™ÆogRód
(
uöt8_t
 
pö
)

40 
uöt8_t
 
low
, 
high
;

45 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x0f);

47 #i‡
	`deföed
(
__AVR_ATmega1280__
)

50 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 
	`sbi
(
ADCSRA
, 
ADSC
);

60 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

66 
low
 = 
ADCL
;

67 
high
 = 
ADCH
;

70  (
high
 << 8Ë| 
low
;

71 
	}
}

77 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

84 
	`pöMode
(
pö
, 
OUTPUT
);

86 i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1A
) {

88 
	`sbi
(
TCCR1A
, 
COM1A1
);

90 
OCR1A
 = 
vÆ
;

91 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1B
) {

93 
	`sbi
(
TCCR1A
, 
COM1B1
);

95 
OCR1B
 = 
vÆ
;

96 #i‡
	`deföed
(
__AVR_ATmega8__
)

97 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2
) {

99 
	`sbi
(
TCCR2
, 
COM21
);

101 
OCR2
 = 
vÆ
;

103 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0A
) {

104 i‡(
vÆ
 == 0) {

105 
	`digôÆWrôe
(
pö
, 
LOW
);

108 
	`sbi
(
TCCR0A
, 
COM0A1
);

110 
OCR0A
 = 
vÆ
;

112 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0B
) {

113 i‡(
vÆ
 == 0) {

114 
	`digôÆWrôe
(
pö
, 
LOW
);

117 
	`sbi
(
TCCR0A
, 
COM0B1
);

119 
OCR0B
 = 
vÆ
;

121 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2A
) {

123 
	`sbi
(
TCCR2A
, 
COM2A1
);

125 
OCR2A
 = 
vÆ
;

126 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2B
) {

128 
	`sbi
(
TCCR2A
, 
COM2B1
);

130 
OCR2B
 = 
vÆ
;

132 #i‡
	`deföed
(
__AVR_ATmega1280__
)

134 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3A
) {

136 
	`sbi
(
TCCR3A
, 
COM3A1
);

138 
OCR3A
 = 
vÆ
;

139 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3B
) {

141 
	`sbi
(
TCCR3A
, 
COM3B1
);

143 
OCR3B
 = 
vÆ
;

144 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3C
) {

146 
	`sbi
(
TCCR3A
, 
COM3C1
);

148 
OCR3C
 = 
vÆ
;

149 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4A
) {

151 
	`sbi
(
TCCR4A
, 
COM4A1
);

153 
OCR4A
 = 
vÆ
;

154 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4B
) {

156 
	`sbi
(
TCCR4A
, 
COM4B1
);

158 
OCR4B
 = 
vÆ
;

159 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4C
) {

161 
	`sbi
(
TCCR4A
, 
COM4C1
);

163 
OCR4C
 = 
vÆ
;

164 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER5A
) {

166 
	`sbi
(
TCCR5A
, 
COM5A1
);

168 
OCR5A
 = 
vÆ
;

169 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER5B
) {

171 
	`sbi
(
TCCR5A
, 
COM5B1
);

173 
OCR5B
 = 
vÆ
;

175 } i‡(
vÆ
 < 128)

176 
	`digôÆWrôe
(
pö
, 
LOW
);

178 
	`digôÆWrôe
(
pö
, 
HIGH
);

179 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_digital.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

30 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

31 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

32 vﬁ©ûê
uöt8_t
 *
ªg
;

34 i‡(
p‹t
 =
NOT_A_PIN
) ;

37 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

39 i‡(
mode
 =
INPUT
Ë*
ªg
 &~
bô
;

40 *
ªg
 |
bô
;

41 
	}
}

50 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

51 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

53 i‡(
timî
 =
TIMER1A
Ë
	`cbi
(
TCCR1A
, 
COM1A1
);

54 i‡(
timî
 =
TIMER1B
Ë
	`cbi
(
TCCR1A
, 
COM1B1
);

56 #i‡
	`deföed
(
__AVR_ATmega8__
)

57 i‡(
timî
 =
TIMER2
Ë
	`cbi
(
TCCR2
, 
COM21
);

59 i‡(
timî
 =
TIMER0A
Ë
	`cbi
(
TCCR0A
, 
COM0A1
);

60 i‡(
timî
 =
TIMER0B
Ë
	`cbi
(
TCCR0A
, 
COM0B1
);

61 i‡(
timî
 =
TIMER2A
Ë
	`cbi
(
TCCR2A
, 
COM2A1
);

62 i‡(
timî
 =
TIMER2B
Ë
	`cbi
(
TCCR2A
, 
COM2B1
);

65 #i‡
	`deföed
(
__AVR_ATmega1280__
)

66 i‡(
timî
 =
TIMER3A
Ë
	`cbi
(
TCCR3A
, 
COM3A1
);

67 i‡(
timî
 =
TIMER3B
Ë
	`cbi
(
TCCR3A
, 
COM3B1
);

68 i‡(
timî
 =
TIMER3C
Ë
	`cbi
(
TCCR3A
, 
COM3C1
);

69 i‡(
timî
 =
TIMER4A
Ë
	`cbi
(
TCCR4A
, 
COM4A1
);

70 i‡(
timî
 =
TIMER4B
Ë
	`cbi
(
TCCR4A
, 
COM4B1
);

71 i‡(
timî
 =
TIMER4C
Ë
	`cbi
(
TCCR4A
, 
COM4C1
);

72 i‡(
timî
 =
TIMER5A
Ë
	`cbi
(
TCCR5A
, 
COM5A1
);

73 i‡(
timî
 =
TIMER5B
Ë
	`cbi
(
TCCR5A
, 
COM5B1
);

74 i‡(
timî
 =
TIMER5C
Ë
	`cbi
(
TCCR5A
, 
COM5C1
);

76 
	}
}

78 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

80 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

81 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

82 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

83 vﬁ©ûê
uöt8_t
 *
out
;

85 i‡(
p‹t
 =
NOT_A_PIN
) ;

89 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

91 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

93 i‡(
vÆ
 =
LOW
Ë*
out
 &~
bô
;

94 *
out
 |
bô
;

95 
	}
}

97 
	$digôÆRód
(
uöt8_t
 
pö
)

99 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

100 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

101 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

103 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

107 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

109 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

110  
LOW
;

111 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/dñay.h
>

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

34 
	~"wúög.h
"

36 #ifde‡
__˝lu•lus


40 #i‚de‡
cbi


41 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

43 #i‚de‡
sbi


44 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

47 
	#EXTERNAL_INT_0
 0

	)

48 
	#EXTERNAL_INT_1
 1

	)

49 
	#EXTERNAL_INT_2
 2

	)

50 
	#EXTERNAL_INT_3
 3

	)

51 
	#EXTERNAL_INT_4
 4

	)

52 
	#EXTERNAL_INT_5
 5

	)

53 
	#EXTERNAL_INT_6
 6

	)

54 
	#EXTERNAL_INT_7
 7

	)

56 #i‡
deföed
(
__AVR_ATmega1280__
)

57 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

59 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

62 (*
voidFuncPå
)();

64 #ifde‡
__˝lu•lus


	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

59 
width
++;

65  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 10 + 16);

66 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
)

29 
i
;

31 
i
 = 0; i < 8; i++) {

32 i‡(
bôOrdî
 =
LSBFIRST
)

33 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

35 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

37 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

38 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Bounce.h

27 #i‚de‡
Boun˚_h


28 
	#Boun˚_h


	)

30 
	~<öây≥s.h
>

32 ˛as†
	cBoun˚


35 
	mpublic
:

37 
Boun˚
(
uöt8_t
 
pö
, 
öãrvÆ_mûlis
 );

39 
öãrvÆ
(
öãrvÆ_mûlis
);

43 
upd©e
();

47 
ªboun˚
(
öãrvÆ
);

49 
ªad
();

51 
wrôe
(
√w_°©e
);

53 
duøti⁄
();

55 
	m¥Ÿe˘ed
:

56 
deboun˚
();

57 
	m¥evious_mûlis
, 
	möãrvÆ_mûlis
, 
	mªboun˚_mûlis
;

58 
uöt8_t
 
	m°©e
;

59 
uöt8_t
 
	mpö
;

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\main.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
ÀdPö
 = 13;

10 
boﬁón
 
	gA
;

11 
	gevít
;

12 
byã
 
	gfú°A
;

13 
byã
 
	g£c⁄dA
;

14 
	ga
;

17 
	$£tup
() {

19 
	`pöMode
(5, 
INPUT
);

20 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

21 
Sîül
.
	`begö
(9600);

22 
	`£t_un˚πaö_cou¡
(100);

23 
	}
}

25 
	$maö
() {

27 
	`öô
();

28 
	`£tup
();

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
A
 = 
	`digôÆRód
(5);

32 i‡(
A
 =
LOW
) {

33 
	`key_°ï
(
ON
);

36 
	`key_°ï
(
OFF
);

38 
evít
 = 
	`gë_evít
();

39 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

41 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\testpoint.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	gÀdPö
 = 13;

7 
	gaPö
 = 3;

8 
	gbPö
 = 5;

9 
	gcPö
 = 6;

10 
	gdPö
 = 7;

11 
	gePö
 = 8;

13 
boﬁón
 
	gA
,
	gB
,
	gC
,
	gD
,
	gE
;

16 
	$£tup
() {

18 
	`pöMode
(
aPö
, 
INPUT
);

19 
	`pöMode
(
bPö
, 
INPUT
);

20 
	`pöMode
(
cPö
, 
INPUT
);

21 
	`pöMode
(
dPö
, 
INPUT
);

22 
	`pöMode
(
ePö
, 
INPUT
);

24 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

25 
Sîül
.
	`begö
(9600);

27 
	}
}

29 
	$bUpd©e
() {

31 
	}
}

33 
boﬁón
 
	$bRód
(
pö
) {

34 
boﬁón
 
vÆue
;

35 
vÆue
 = 
	`digôÆRód
(
pö
);

36  
vÆue
;

37 
	}
}

39 
	$maö
() {

41 
	`öô
();

42 
	`£tup
();

44 
	`bUpd©e
();

45 
A
 = 
	`bRód
(
aPö
);

46 
	`digôÆWrôe
(
ÀdPö
, !
A
);

48 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce1.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	gÀdPö
 = 13;

7 
	gaPö
 = 3;

8 
	gbPö
 = 5;

9 
	gcPö
 = 6;

10 
	gdPö
 = 7;

11 
	gePö
 = 8;

13 
boﬁón
 
	gA
,
	gB
,
	gC
,
	gD
,
	gE
;

18 
	$£tup
() {

20 
	`pöMode
(
aPö
, 
INPUT
);

21 
	`pöMode
(
bPö
, 
INPUT
);

22 
	`pöMode
(
cPö
, 
INPUT
);

23 
	`pöMode
(
dPö
, 
INPUT
);

24 
	`pöMode
(
ePö
, 
INPUT
);

25 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

27 
	}
}

30 
	$maö
() {

32 
	`öô
();

33 
	`£tup
();

35 
A

	`digôÆRód
(
ÀdPö
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\main.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
ÀdPö
 = 13;

10 
boﬁón
 
	gA
;

11 
	gevít
;

12 
byã
 
	gfú°A
;

13 
byã
 
	g£c⁄dA
;

14 
	ga
;

17 
	$£tup
() {

19 
	`pöMode
(5, 
INPUT
);

20 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

21 
Sîül
.
	`begö
(9600);

22 
	`£t_un˚πaö_cou¡
(200);

23 
	}
}

25 
	$maö
() {

27 
	`öô
();

28 
	`£tup
();

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
A
 = 
	`digôÆRód
(5);

33 i‡(
A
 =
LOW
) {

34 
	`key_°ï
(
ON
);

37 
	`key_°ï
(
OFF
);

39 
evít
 = 
	`gë_evít
();

40 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

42 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp~

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
	#BUF_SIZE
 700

	)

10 
ÀdPö
 = 13;

12 
boﬁón
 
	gA
;

13 
	gevít
;

14 
	gevít_ˇŒs
;

16 
byã
 
	gfú°A
;

17 
byã
 
	g£c⁄dA
;

18 
	gi
=0;

21 
	gbuf„r
[
BUF_SIZE
];

24 
	$£tup
() {

26 
	`pöMode
(5, 
INPUT
);

27 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

28 
Sîül
.
	`begö
(1200);

29 
	`£t_un˚πaö_cou¡
(200);

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
	}
}

33 
	$¥ötBuf„r
(){

34 
i
=0; i< 
BUF_SIZE
 ;i++) {

36 
Sîül
.
	`¥öt
(
buf„r
[
i
], 
DEC
);

38 
	}
}

40 
	$maö
() {

41 
˘ime
=0;

42 
k
=0;

44 
	`öô
();

45 
	`£tup
();

52 ;;
k
++) {

53 
A
 = 
	`digôÆRód
(5);

63 i‡(
A
 =
LOW
) {

64 
	`key_°ï
(
ON
);

67 
	`key_°ï
(
OFF
);

69 
evít
 = 
	`gë_evít
();

70 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

99 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp~

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
	#BUF_SIZE
 500

	)

10 
ÀdPö
 = 13;

12 
boﬁón
 
	gA
;

13 
	gevít
;

14 
byã
 
	gfú°A
;

15 
byã
 
	g£c⁄dA
;

16 
	gi
=0;

18 
	gbuf„r
[
BUF_SIZE
];

21 
	$£tup
() {

23 
	`pöMode
(5, 
INPUT
);

24 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

25 
Sîül
.
	`begö
(9600);

26 
	`£t_un˚πaö_cou¡
(100);

27 
	}
}

29 
	$¥ötBuf„r
(){

30 
i
=0; i< 
BUF_SIZE
 ;i++) {

31 
Sîül
.
	`¥öt
(1,
DEC
);

34 
	}
}

36 
	$maö
() {

38 
	`öô
();

39 
	`£tup
();

41 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

42 
A
 = 
	`digôÆRód
(5);

43 i‡(
A
 =
LOW
) {

44 
	`key_°ï
(
ON
);

47 
	`key_°ï
(
OFF
);

49 
evít
 = 
	`gë_evít
();

52 
buf„r
[
i
] = 
A
;

53 
i
++;

55 i‡(
evít
 =
RELEASED
) {

56 
	`¥ötBuf„r
();

59 i‡(
i
 >
BUF_SIZE
) {

60 
i
=0;

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\ChordedKeyboard\tests\test_press_button.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°Ext/MockSuµ‹t.h
"

4 
	$TEST_GROUP
(
PªssBuâ⁄
)

6 
	}
};

9 
	$¥odu˘i⁄Code
()

11 
	`mock
().
	`a˘uÆCÆl
("productionCode");

12 
	}
}

14 
	$TEST
(
PªssBuâ⁄
, 
Sim∂eS˚«rio
)

16 
	`mock
().
	`ex≥˘O√CÆl
("productionCode");

17 
	`¥odu˘i⁄Code
();

18 
	`mock
().
	`checkEx≥˘©i⁄s
();

19 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\AllTests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

33 ˛as†
	cMyDummyCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


35 
public
:

36 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

38  
obje˘1
 =
obje˘2
;

41 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

43  
	`SåögFrom
(
obje˘
);

44 
	}
}

47 
	$maö
(
ac
, ** 
av
)

49 
MyDummyCom∑øt‹
 
dummyCom∑øt‹
;

50 
MockSuµ‹tPlugö
 
mockPlugö
;

52 
mockPlugö
.
	`ö°ÆlCom∑øt‹
("MyDummyTy≥", 
dummyCom∑øt‹
);

53 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
mockPlugö
);

54  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

55 
	}
}

57 
	~"Aµliˇti⁄Lib/AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\AllTests.h

28 
IMPORT_TEST_GROUP
–
Pröãr
);

29 
IMPORT_TEST_GROUP
–
CúcuœrBuf„r
);

30 
IMPORT_TEST_GROUP
–
HñloW‹ld
);

31 
IMPORT_TEST_GROUP
–
EvítDi•©chî
);

32 
IMPORT_TEST_GROUP
–
MockDocumíèti⁄
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBuffer.cpp

28 
	~"CúcuœrBuf„r.h
"

29 
	~"Pröãr.h
"

31 
	gCúcuœrBuf„r
::
	$CúcuœrBuf„r
(
_ˇ∑côy
) :

32 
	`ödex
(0), 
	`outdex
(0), 
	`ˇ∑côy
(
_ˇ∑côy
), 
	`em±y
(
åue
), 
	$fuŒ
(
Ál£
)

34 
buf„r
 = 
√w
 [
this
->
ˇ∑côy
];

35 
	}
}

37 
	gCúcuœrBuf„r
::~
	$CúcuœrBuf„r
()

39 
dñëe
[] 
buf„r
;

40 
	}
}

42 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsEm±y
()

44  
em±y
;

45 
	}
}

47 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsFuŒ
()

49  
fuŒ
;

50 
	}
}

52 
	gCúcuœrBuf„r
::
	$Put
(
i
)

54 
em±y
 = 
Ál£
;

55 
buf„r
[
ödex
] = 
i
;

56 
ödex
 = 
	`Next
(index);

57 i‡(
fuŒ
Ë
outdex
 = 
	`Next
(outdex);

58 i‡(
ödex
 =
outdex
Ë
fuŒ
 = 
åue
;

59 
	}
}

61 
	gCúcuœrBuf„r
::
	$Gë
()

63 
ªsu…
 = -1;

64 
fuŒ
 = 
Ál£
;

66 i‡(!
em±y
) {

67 
ªsu…
 = 
buf„r
[
outdex
];

68 
outdex
 = 
	`Next
(outdex);

69 i‡(
outdex
 =
ödex
Ë
em±y
 = 
åue
;

71  
ªsu…
;

72 
	}
}

74 
	gCúcuœrBuf„r
::
	$C≠acôy
()

76  
ˇ∑côy
;

77 
	}
}

79 
	gCúcuœrBuf„r
::
	$Next
(
i
)

81 i‡(++
i
 >
ˇ∑côy
) i = 0;

82  
i
;

83 
	}
}

85 
	gCúcuœrBuf„r
::
	$Pröt
(
Pröãr
* 
p
)

87 
p
->
	`Pröt
("Circular buffer content:\n<");

89 
¥ötIndex
 = 
outdex
;

90 
cou¡
 = 
ödex
 - 
outdex
;

92 i‡(!
em±y
 && (
ödex
 <
outdex
)Ë
cou¡
 = 
ˇ∑côy
 - (outdex - index);

94 
i
 = 0; i < 
cou¡
; i++) {

95 
p
->
	`Pröt
(
buf„r
[
¥ötIndex
]);

96 
¥ötIndex
 = 
	`Next
(printIndex);

97 i‡(
i
 + 1 !
cou¡
Ë
p
->
	`Pröt
(", ");

99 
p
->
	`Pröt
(">\n");

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBuffer.h

28 #i‚de‡
D_CúcuœrBuf„r_H


29 
	#D_CúcuœrBuf„r_H


	)

38 
˛ass
 
	gPröãr
;

40 ˛as†
	cCúcuœrBuf„r


42 
	mpublic
:

43 
ex∂icô
 
CúcuœrBuf„r
(
ˇ∑côy
 = 
CAPACITY
);

44 
	mvútuÆ
 ~
CúcuœrBuf„r
();

46 
Put
();

47 
Gë
();

48 
boﬁ
 
IsEm±y
();

49 
boﬁ
 
IsFuŒ
();

50 
C≠acôy
();

51 
Next
(
i
);

52 
Pröt
(
Pröãr
*);

54 
	m¥iv©e
:

56 
ödex
;

57 
	moutdex
;

58 * 
	mbuf„r
;

59 
	mˇ∑côy
;

62 
	mCAPACITY
 = 5

64 
boﬁ
 
	gem±y
;

65 
boﬁ
 
	gfuŒ
;

67 
CúcuœrBuf„r
(const CircularBuffer&);

68 
	gCúcuœrBuf„r
& 
	g›î©‹
=(c⁄° 
CúcuœrBuf„r
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"MockPröãr.h
"

30 
	~"CúcuœrBuf„r.h
"

32 
	$TEST_GROUP
(
CúcuœrBuf„r
)

33 { 
CúcuœrBuf„r
* 
buf„r
;

35 
	`£tup
()

37 
buf„r
 = 
√w
 
	`CúcuœrBuf„r
();

39 
	`ã¨down
()

41 
dñëe
 
buf„r
;

44 
	`fûlTheQueue
(
£ed
, 
howM™y
)

46 
i
 = 0; i < 
howM™y
; i++)

47 
buf„r
->
	`Put
(
£ed
 + 
i
);

49 
	`ªmoveFromQueue
(
howM™y
)

51 
i
 = 0; i < 
howM™y
; i++)

52 
buf„r
->
	`Gë
();

54 
	}
};

56 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

58 
	`CHECK
(
buf„r
->
	`IsEm±y
());

59 
	}
}

61 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

63 
buf„r
->
	`Put
(10046);

64 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

65 
	}
}

67 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

69 
buf„r
->
	`Put
(4567);

70 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

71 
buf„r
->
	`Gë
();

72 
	`CHECK
(
buf„r
->
	`IsEm±y
());

73 
	}
}

75 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

77 
buf„r
->
	`Put
(4567);

78 
	`LONGS_EQUAL
(4567, 
buf„r
->
	`Gë
());

79 
	}
}

81 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

83 
buf„r
->
	`Put
(1);

84 
buf„r
->
	`Put
(2);

85 
buf„r
->
	`Put
(3);

86 
	`LONGS_EQUAL
(1, 
buf„r
->
	`Gë
());

87 
	`LONGS_EQUAL
(2, 
buf„r
->
	`Gë
());

88 
	`LONGS_EQUAL
(3, 
buf„r
->
	`Gë
());

89 
	}
}

91 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

93 
CúcuœrBuf„r
 
	`b
(2);

94 
	`LONGS_EQUAL
(2, 
b
.
	`C≠acôy
());

95 
	}
}

97 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

99 
	`fûlTheQueue
(0, 
buf„r
->
	`C≠acôy
());

100 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

101 
	}
}

103 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

105 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

107 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

109 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

111 
	`CHECK
(
buf„r
->
	`IsEm±y
());

112 
	}
}

114 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

116 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

118 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

119 
	`LONGS_EQUAL
(100, 
buf„r
->
	`Gë
());

120 
	`CHECK
(!
buf„r
->
	`IsFuŒ
());

121 
buf„r
->
	`Put
(1000);

122 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

124 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 1);

126 
	`LONGS_EQUAL
(1000, 
buf„r
->
	`Gë
());

127 
	`CHECK
(
buf„r
->
	`IsEm±y
());

128 
	}
}

130 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒ
)

132 
ˇ∑côy
 = 
buf„r
->
	`C≠acôy
();

133 
	`fûlTheQueue
(900, 
ˇ∑côy
);

134 
buf„r
->
	`Put
(9999);

136 
i
 = 0; i < 
buf„r
->
	`C≠acôy
() - 1; i++)

137 
	`LONGS_EQUAL
(
i
+900+1, 
buf„r
->
	`Gë
());

139 
	`LONGS_EQUAL
(9999, 
buf„r
->
	`Gë
());

140 
	`CHECK
(
buf„r
->
	`IsEm±y
());

141 
	}
}

147 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±y
)

149 
	`LONGS_EQUAL
(-1, 
buf„r
->
	`Gë
());

150 
	`CHECK
(
buf„r
->
	`IsEm±y
());

151 
	}
}

159 
	$TEST
(
CúcuœrBuf„r
, 
PrötEm±y
)

161 
MockPröãr
 
mock
;

162 
Pröãr
* 
p
 = &
mock
;

164 
buf„r
->
	`Pröt
(
p
);

165 
	`CHECK_EQUAL
("Circular buffer content:\n<>\n",

166 
mock
.
	`gëOuçut
());

167 
	}
}

169 
	$TEST
(
CúcuœrBuf„r
, 
PrötA·îO√Put
)

171 
MockPröãr
 
mock
;

173 
buf„r
->
	`Put
(1);

174 
buf„r
->
	`Pröt
(&
mock
);

175 
	`CHECK_EQUAL
("Circular buffer content:\n<1>\n",

176 
mock
.
	`gëOuçut
());

177 
	}
}

179 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedOrFuŒ
)

181 
MockPröãr
 
mock
;

183 
buf„r
->
	`Put
(1);

184 
buf„r
->
	`Put
(2);

185 
buf„r
->
	`Put
(3);

186 
buf„r
->
	`Pröt
(&
mock
);

187 
	`CHECK_EQUAL
("Circular buffer content:\n<1, 2, 3>\n",

188 
mock
.
	`gëOuçut
());

189 
	}
}

191 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedAndIsFuŒ
)

193 
MockPröãr
 
mock
;

195 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

197 
buf„r
->
	`Pröt
(&
mock
);

198 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

201 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

202 
	}
}

204 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

206 
MockPröãr
 
mock
;

208 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

209 
buf„r
->
	`Gë
();

210 
buf„r
->
	`Put
(999);

212 
buf„r
->
	`Pröt
(&
mock
);

213 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

216 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

217 
	}
}

219 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndFuŒOvîwrôeOlde°
)

221 
MockPröãr
 
mock
;

223 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

224 
buf„r
->
	`Put
(9999);

226 
buf„r
->
	`Pröt
(&
mock
);

227 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

230 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

231 
	}
}

233 
	$TEST
(
CúcuœrBuf„r
, 
PrötBound¨y
)

235 
MockPröãr
 
mock
;

237 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

238 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 2);

239 
buf„r
->
	`Put
(888);

240 
	`fûlTheQueue
(300, 
buf„r
->
	`C≠acôy
() - 1);

242 
buf„r
->
	`Pröt
(&
mock
);

243 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

246 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

247 
	}
}

249 
	$TEST
(
CúcuœrBuf„r
, 
FûlEm±yThíPröt
)

251 
MockPröãr
 
mock
;

253 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

254 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

255 
buf„r
->
	`Pröt
(&
mock
);

256 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

259 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

260 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcher.cpp

28 
	~"EvítDi•©chî.h
"

30 
	gEvítDi•©chî
::
	$EvítDi•©chî
()

32 
	}
}

34 
EvítDi•©chî
::
	$ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
)

36 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

37 
i
->
£c⁄d
->
	`nŸifyRegi°øti⁄
(
ob£rvî
);

39 
ob£rvîLi°_
.
	`push_back
(
	`make_∑ú
(
ty≥
, 
ob£rvî
));

40 
	}
}

42 
	gEvítDi•©chî
::
	$di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
)

44 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

46 i‡(
i
->
fú°
 =
evít
.
ty≥
)

47 
i
->
£c⁄d
->
	`nŸify
(
evít
, 
timeoutSec⁄ds
);

49 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcher.h

28 #i‚de‡
EVENTDISPATCHER__H


29 
	#EVENTDISPATCHER__H


	)

31 
	~<li°
>

32 
usög
 
«me•a˚
 
	g°d
;

34 
	eEvítTy≥


36 
	mIMPORTANT_EVENT
,

37 
	mLESS_IMPORTANT_EVENT


40 ˛as†
	cEvít


42 
	mpublic
:

43 
EvítTy≥
 
ty≥
;

46 ˛as†
	cEvítOb£rvî


48 
	mpublic
:

49 
vútuÆ
 
nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)=0;

50 
vútuÆ
 
nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)=0;

53 ˛as†
	cEvítDi•©chî


55 
	mli°
<
	m∑ú
<
	mEvítTy≥
, 
	mEvítOb£rvî
*> > 
	mob£rvîLi°_
;

56 
	mpublic
:

57 
EvítDi•©chî
();

59 
ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
);

60 
di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"EvítDi•©chî.h
"

32 ˛as†
	cOb£rvîMock
 : 
public
 
EvítOb£rvî


34 
public
:

35 
vútuÆ
 
	$nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)

37 
	`mock
().
	`a˘uÆCÆl
("nŸify").
	`⁄Obje˘
(
this
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", (*Ë&
evít
).
	`wôhP¨amëî
("timeOutInSec⁄ds", 
timeOutInSec⁄ds
);

39 
vútuÆ
 
	$nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)

41 
	`mock
().
	`a˘uÆCÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("√wOb£rvî", 
√wOb£rvî
);

42 
	}
}

45 ˛as†
	cEvítCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

50  ((
Evít
*)
obje˘1
)->
ty≥
 =((Evít*)
obje˘2
)->type;

52 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

54  
	`SåögFrom
(((
Evít
*)
obje˘
)->
ty≥
);

55 
	}
}

59 
	$TEST_GROUP
(
EvítDi•©chî
)

61 
Evít
 
evít
;

62 
EvítDi•©chî
* 
di•©chî
;

63 
Ob£rvîMock
 
ob£rvî
;

64 
Ob£rvîMock
 
ob£rvî2
;

65 
EvítCom∑øt‹
 
evítCom∑øt‹
;

67 
	`£tup
()

69 
di•©chî
 = 
√w
 
EvítDi•©chî
;

70 
	`mock
().
	`ö°ÆlCom∑øt‹
("Evít", 
evítCom∑øt‹
);

72 
	`ã¨down
()

74 
dñëe
 
di•©chî
;

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

77 
	}
};

80 
	$TEST
(
EvítDi•©chî
, 
EvítWôhoutRegi°øti⁄sResu…sI¡oNoCÆls
)

82 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

83 
	}
}

85 
	$TEST
(
EvítDi•©chî
, 
EvítWôhRegi°øti⁄F‹EvítResu…sI¡oCÆlback
)

87 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

88 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

90 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

91 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

92 
	}
}

94 
	$TEST
(
EvítDi•©chî
, 
Dif„ª¡EvítWôhRegi°øti⁄D€sNŸResu…I¡oCÆlback
)

96 
evít
.
ty≥
 = 
LESS_IMPORTANT_EVENT
;

97 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

98 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

99 
	}
}

101 
	$TEST
(
EvítDi•©chî
, 
Regi°îTwoOb£rvîsResu…I¡oTwoCÆlsAndARegi°øti⁄NŸifiˇti⁄
)

103 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

104 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî2
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

105 
	`mock
().
	`ex≥˘O√CÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëî
("√wOb£rvî", &
ob£rvî2
);

107 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

108 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

109 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî2
);

110 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

111 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h

28 
	~<li°
>

29 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\HelloTest.cpp

30 
	~"hñlo.h
"

33 
	~<°dio.h
>

34 
	~<°d¨g.h
>

35 
	~"CµUTe°/Te°H¨√ss.h
"

37 
Sim∂eSåög
* 
buf„r
;

39 
	$TEST_GROUP
(
HñloW‹ld
)

40 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

42 
va_li°
 
¨gumíts
;

43 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

44 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

45 
	`va_íd
(
¨gumíts
);

48 
	`£tup
()

50 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

51 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

53 
	`ã¨down
()

55 
dñëe
 
buf„r
;

57 
	}
};

59 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

61 
	`¥ötHñloW‹ld
();

62 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\MockDocumentationTest.cpp

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

36 
	$TEST_GROUP
(
Fú°Te°Group
)

38 
	}
};

40 
	$TEST
(
Fú°Te°Group
, 
FúsTe°
)

43 
	}
}

45 
	$TEST
(
Fú°Te°Group
, 
Sec⁄dTe°
)

48 
	}
}

51 
	$TEST_GROUP
(
MockDocumíèti⁄
)

53 
	}
};

55 
	$¥odu˘i⁄Code
()

57 
	`mock
().
	`a˘uÆCÆl
("productionCode");

58 
	}
}

60 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rio
)

62 
	`mock
().
	`ex≥˘O√CÆl
("productionCode");

63 
	`¥odu˘i⁄Code
();

64 
	`mock
().
	`checkEx≥˘©i⁄s
();

65 
	}
}

67 ˛as†
	cCœssFromProdu˘i⁄Code


69 
	mpublic
:

70 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
(){}

71 
	}
};

73 ˛as†
	cCœssFromProdu˘i⁄CodeMock
 : 
public
 
CœssFromProdu˘i⁄Code


75 
public
:

76 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
()

78 
	`mock
().
	`a˘uÆCÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
this
);

80 
	}
};

82 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rioObje˘
)

84 
CœssFromProdu˘i⁄Code
* 
obje˘
 = 
√w
 
CœssFromProdu˘i⁄CodeMock
;

86 
	`mock
().
	`ex≥˘O√CÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
obje˘
);

87 
obje˘
->
	`imp‹è¡Fun˘i⁄
();

88 
	`mock
().
	`checkEx≥˘©i⁄s
();

90 
dñëe
 
obje˘
;

91 
	}
}

93 
	$∑ømëîs_fun˘i⁄
(
p1
, c⁄° * 
p2
)

95 * 
obje˘
 = (*) 1;

96 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 
p1
).wôhP¨amëî("p2", 
p2
);

97 
	}
}

99 
	$TEST
(
MockDocumíèti⁄
, 
∑ømëîs
)

101 * 
obje˘
 = (*) 1;

102 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 2).withParameter("p2", "hah");

103 
	`∑ømëîs_fun˘i⁄
(2, "hah");

104 
	}
}

106 ˛as†
	cMyTy≥Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


108 
public
:

109 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

111  
obje˘1
 =
obje˘2
;

113 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

115  
	`SåögFrom
(
obje˘
);

116 
	}
}

119 
	$TEST
(
MockDocumíèti⁄
, 
Obje˘P¨amëîs
)

121 * 
obje˘
 = (*) 1;

122 
MyTy≥Com∑øt‹
 
com∑øt‹
;

123 
	`mock
().
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

124 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("myTy≥", "∑ømëîName", 
obje˘
);

125 
	`mock
().
	`˛ór
();

126 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

127 
	}
}

129 
	$TEST
(
MockDocumíèti⁄
, 
ªtu∫VÆue
)

131 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`™dRëu∫VÆue
(10);

132 
vÆue
 = 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

133 
vÆue
 = 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

134 
	}
}

136 
	$TEST
(
MockDocumíèti⁄
, 
£tD©a
)

138 
CœssFromProdu˘i⁄Code
 
obje˘
;

139 
	`mock
().
	`£tD©a
("importantValue", 10);

140 
	`mock
().
	`£tD©aObje˘
("imp‹è¡Obje˘", "CœssFromProdu˘i⁄Code", &
obje˘
);

142 
CœssFromProdu˘i⁄Code
 * 
pobje˘
;

143 
vÆue
 = 
	`mock
().
	`gëD©a
("imp‹è¡VÆue").
	`gëI¡VÆue
();

144 
pobje˘
 = (
CœssFromProdu˘i⁄Code
*Ë
	`mock
().
	`gëD©a
("imp‹è¡Obje˘").
	`gëObje˘Poöãr
();

146 
	`LONGS_EQUAL
(10, 
vÆue
);

147 
	`POINTERS_EQUAL
(
pobje˘
, &
obje˘
);

148 
	}
}

150 
	$doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
()

152 
	}
}

154 
	$TEST
(
MockDocumíèti⁄
, 
ŸhîMockSuµ‹t
)

156 
	`mock
().
	`¸ashOnFaûuª
();

159 
	`mock
().
	`ex≥˘O√CÆl
("foo");

160 
	`mock
().
	`ign‹eOthîCÆls
();

162 
	`mock
().
	`dißbÀ
();

163 
	`doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
();

164 
	`mock
().
	`íabÀ
();

166 
	`mock
().
	`˛ór
();

168 
	}
}

170 
	$TEST
(
MockDocumíèti⁄
, 
sc›e
)

172 
	`mock
("xmÕ¨£r").
	`ex≥˘O√CÆl
("open");

173 
	`mock
("fûesy°em").
	`ign‹eOthîCÆls
();

175 
	`mock
("xmÕ¨£r").
	`a˘uÆCÆl
("open");

176 
	}
}

178 
	$equÆMëhod
(* 
obje˘1
, * 
obje˘2
)

180  
obje˘1
 =
obje˘2
;

181 
	}
}

183 * 
	$toSåögMëhod
(*)

186 
	}
}

188 
	$TEST
(
MockDocumíèti⁄
, 
CI¡îÁ˚
)

190 * 
obje˘
 = (*) 0x1;

192 
	`mock_c
()->
	`ex≥˘O√CÆl
("foo")->
	`wôhI¡P¨am©îs
("öãgî", 10)->
	`™dRëu∫DoubÀVÆue
(1.11);

193 
	`mock_c
()->
	`a˘uÆCÆl
("foo")->
	`wôhI¡P¨am©îs
("öãgî", 10)->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
;

195 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥", 
equÆMëhod
, 
toSåögMëhod
);

196 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

197 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

198 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

200 
	`mock_c
()->
	`£tI¡D©a
("important", 10);

201 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

202 
	`mock_c
()->
	`˛ór
();

203 
	}
}

205 
	$TEST_GROUP
(
FooTe°Group
)

207 
	`£tup
()

212 
	`ã¨down
()

216 
	}
};

218 
	$TEST
(
FooTe°Group
, 
Foo
)

221 
	}
}

223 
	$TEST
(
FooTe°Group
, 
M‹eFoo
)

226 
	}
}

228 
	$TEST_GROUP
(
B¨Te°Group
)

230 
	`£tup
()

234 
	}
};

236 
	$TEST
(
B¨Te°Group
, 
B¨
)

239 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\MockPrinter.h

28 #i‚de‡
D_MockPröãr_H


29 
	#D_MockPröãr_H


	)

38 
	~"Pröãr.h
"

39 
	~"CµUTe°/Sim∂eSåög.h
"

40 
	~<°dlib.h
>

41 
	~<°rög
>

43 ˛as†
	cMockPröãr
: 
public
 
Pröãr


45 
public
:

46 
ex∂icô
 
	$MockPröãr
()

49 
vútuÆ
 ~
	$MockPröãr
()

51 
	}
}

53 
vútuÆ
 
	$Pröt
(c⁄° * 
s
)

55 
ßvedOuçut
.
	`≠≥nd
(
s
);

56 
	}
}

58 
vútuÆ
 
	$Pröt
(
vÆue
)

60 
Sim∂eSåög
 
buf„r
;

61 
buf„r
 = 
	`SåögFromF‹m©
("%ld", 
vÆue
);

62 
ßvedOuçut
.
	`≠≥nd
(
buf„r
.
	`asCh¨Såög
());

63 
	}
}

65 
	g°d
::
°rög
 
	$gëOuçut
() const

67  
ßvedOuçut
;

68 
	}
}

70 
	g¥iv©e
:

72 
°d
::
°rög
 
ßvedOuçut
;

74 
MockPröãr
(const MockPrinter&);

75 
	gMockPröãr
& 
	g›î©‹
=(c⁄° 
MockPröãr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\Printer.cpp

28 
	~"Pröãr.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Sim∂eSåög.h
"

31 
	~<°dio.h
>

33 
	gPröãr
::
	$Pröãr
()

35 
	}
}

37 
Pröãr
::~
	$Pröãr
()

39 
	}
}

41 
Pröãr
::
	$Pröt
(c⁄° * 
s
)

43 c⁄° * 
p
 = 
s
; *p;Ö++)

44 
	`putch¨
(*
p
);

45 
	}
}

47 
	gPröãr
::
	$Pröt
(
n
)

49 
	`Pröt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

50 
	}
}

52 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, c⁄° * 
	gs
)

54 
	gp
.
Pröt
(
s
);

55  
	gp
;

58 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, 
	gi
)

60 
	gp
.
Pröt
(
i
);

61  
	gp
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\Printer.h

28 #i‚de‡
D_Pröãr_H


29 
	#D_Pröãr_H


	)

37 ˛as†
	cPröãr


39 
	mpublic
:

40 
ex∂icô
 
Pröãr
();

41 
	mvútuÆ
 ~
Pröãr
();

43 
vútuÆ
 
Pröt
(const *);

44 
vútuÆ
 
Pröt
();

46 
	m¥iv©e
:

48 
Pröãr
(const Printer&);

49 
	mPröãr
& 
	m›î©‹
=(c⁄° 
Pröãr
&);

53 
	gPröãr
& 
	g›î©‹
<<(Printer&, const *);

54 
	gPröãr
& 
	g›î©‹
<<(Printer&, );

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\PrinterTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"Pröãr.h
"

30 
	~"MockPröãr.h
"

32 
	$TEST_GROUP
(
Pröãr
)

33 { 
Pröãr
* 
¥öãr
;

34 
MockPröãr
* 
mockPröãr
;

36 
	`£tup
()

38 
mockPröãr
 = 
√w
 
	`MockPröãr
();

39 
¥öãr
 = 
mockPröãr
;

41 
	`ã¨down
()

43 
dñëe
 
¥öãr
;

45 
	}
};

47 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

49 
¥öãr
->
	`Pröt
("hello");

50 
¥öãr
->
	`Pröt
("hello\n");

51 
	`CHECK_EQUAL
("hñlohñlo\n", 
mockPröãr
->
	`gëOuçut
());

52 
	}
}

54 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

56 
¥öãr
->
	`Pröt
(1234);

57 
	`CHECK_EQUAL
("1234", 
mockPröãr
->
	`gëOuçut
());

58 
	}
}

60 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

62 *
¥öãr
 << "n=" << 1234;

63 
	`CHECK_EQUAL
("n=1234", 
mockPröãr
->
	`gëOuçut
());

64 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\hello.c

28 
	~<°dio.h
>

29 
	~"hñlo.h
"

31 
	$¥ötHñloW‹ld
()

33 
	`PrötF‹m©ed
("Hello World!\n");

34 
	}
}

36 (*
PrötF‹m©ed
)(c⁄° *, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\hello.h

28 #i‚de‡
HELLO_H_


29 
	#HELLO_H_


	)

31 
¥ötHñloW‹ld
();

33 (*
PrötF‹m©ed
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h

28 #i‚de‡
D_CodeMem‹yRï‹tF‹m©ãr_h


29 
	#D_CodeMem‹yRï‹tF‹m©ãr_h


	)

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
˛ass
 
	gCodeRï‹tögAŒoˇti⁄Node
;

34 ˛as†
	cCodeMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


36 
¥iv©e
:

37 
CodeRï‹tögAŒoˇti⁄Node
* 
codeRï‹tögLi°_
;

38 
Mem‹yLókAŒoˇt‹
* 
	möã∫ÆAŒoˇt‹_
;

40 
	mpublic
:

41 
CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
);

42 
	mvútuÆ
 ~
CodeMem‹yRï‹tF‹m©ãr
();

44 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

45 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

47 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

48 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

50 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

51 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

53 
¥iv©e
:

55 
	`addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
);

56 
CodeRï‹tögAŒoˇti⁄Node
* 
	`födNode
(* 
mem‹y
);

57 
boﬁ
 
	`v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
);

58 
	`˛órRï‹tög
();

60 
boﬁ
 
	`isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

61 
Sim∂eSåög
 
	`¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
);

63 
Sim∂eSåög
 
	`gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, 
size_t
 
size
);

64 
Sim∂eSåög
 
	`gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
);

65 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReportAllocator.h

28 #i‚de‡
D_Mem‹yRï‹tAŒoˇt‹_h


29 
	#D_Mem‹yRï‹tAŒoˇt‹_h


	)

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

33 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

35 ˛as†
	cMem‹yRï‹tAŒoˇt‹
 : 
public
 
Mem‹yLókAŒoˇt‹


37 
¥Ÿe˘ed
:

38 
Te°Resu…
* 
ªsu…_
;

39 
Mem‹yLókAŒoˇt‹
* 
	mªÆAŒoˇt‹_
;

40 
Mem‹yRï‹tF‹m©ãr
* 
	mf‹m©ãr_
;

41 
	mpublic
:

42 
Mem‹yRï‹tAŒoˇt‹
();

43 
	mvútuÆ
 ~
Mem‹yRï‹tAŒoˇt‹
();

45 
vútuÆ
 
£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

46 
vútuÆ
 
£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

47 
vútuÆ
 
£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

49 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

50 
vútuÆ
 
Mem‹yLókAŒoˇt‹
* 
gëRólAŒoˇt‹
();

52 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

53 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

55 
vútuÆ
 c⁄° * 
«me
();

56 
vútuÆ
 c⁄° * 
Æloc_«me
();

57 
vútuÆ
 c⁄° * 
‰ì_«me
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReportFormatter.h

28 #i‚de‡
D_Mem‹yRï‹tF‹m©ãr_h


29 
	#D_Mem‹yRï‹tF‹m©ãr_h


	)

31 
˛ass
 
	gTe°Ouçut
;

32 
˛ass
 
	gUã°
;

34 ˛as†
	cMem‹yRï‹tF‹m©ãr


36 
	mpublic
:

37 
vútuÆ
 ~
	$Mem‹yRï‹tF‹m©ãr
(){}

39 
vútuÆ
 
	`ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

40 
vútuÆ
 
	`ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

42 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

43 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

45 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

46 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

47 
	}
};

49 ˛as†
	cN‹mÆMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


51 
public
:

52 
N‹mÆMem‹yRï‹tF‹m©ãr
();

53 
	mvútuÆ
 ~
N‹mÆMem‹yRï‹tF‹m©ãr
();

55 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* , 
Uã°
& );

56 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

58 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

59 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

61 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

63 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h

28 #i‚de‡
D_Mem‹yRï‹ãrPlugö_h


29 
	#D_Mem‹yRï‹ãrPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

34 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

36 ˛as†
	cMem‹yRï‹ãrPlugö
 : 
public
 
Te°Plugö


38 
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr_
;

40 
Mem‹yRï‹tAŒoˇt‹
 
	mmÆlocAŒoˇt‹
;

41 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAŒoˇt‹
;

42 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAºayAŒoˇt‹
;

44 
Sim∂eSåög
 
	mcuºítTe°Group_
;

45 
	mpublic
:

46 
Mem‹yRï‹ãrPlugö
();

47 
	mvútuÆ
 ~
Mem‹yRï‹ãrPlugö
();

49 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

50 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

51 
vútuÆ
 
boﬁ
 
∑r£Argumíts
(, const **, );

53 
	m¥Ÿe˘ed
:

54 
vútuÆ
 
Mem‹yRï‹tF‹m©ãr
* 
¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
);

56 
	m¥iv©e
:

57 
de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

59 
£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

60 
ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

62 
öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockActualFunctionCall.h

28 #i‚de‡
D_MockA˘uÆFun˘i⁄CÆl_h


29 
	#D_MockA˘uÆFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

34 
˛ass
 
	gMockFaûuªRï‹ãr
;

35 
˛ass
 
	gMockFaûuª
;

36 
˛ass
 
	gMockNamedVÆue
;

38 ˛as†
	cMockA˘uÆFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


40 
public
:

41 
MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

42 
	mvútuÆ
 ~
MockA˘uÆFun˘i⁄CÆl
();

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
boﬁ
 
	$isFulfûÀd
() const;

61 
vútuÆ
 
boﬁ
 
	$hasFaûed
() const;

63 
vútuÆ
 
	`checkEx≥˘©i⁄s
();

65 
vútuÆ
 
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

66 
¥Ÿe˘ed
:

67 
vútuÆ
 
Uã°
* 
	$gëTe°
() const;

68 
vútuÆ
 
	`ˇŒHasSuc˚eded
();

69 
vútuÆ
 
	`ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

70 
vútuÆ
 
	`checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
);

72 
	eA˘uÆCÆlSèã
 {

73 
CALL_IN_PROGESS
,

74 
CALL_FAILED
,

75 
CALL_SUCCEED


77 
vútuÆ
 c⁄° * 
	`°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
);

78 
vútuÆ
 
	`£tSèã
(
A˘uÆCÆlSèã
 
°©e
);

79 
vútuÆ
 
	`checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
);

81 
¥iv©e
:

82 
MockFaûuªRï‹ãr
* 
ªp‹ãr_
;

84 
A˘uÆCÆlSèã
 
°©e_
;

86 
MockEx≥˘edFun˘i⁄sLi°
 
unfulfûÀdEx≥˘©i⁄s_
;

87 c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s_
;

88 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄CÆl_h


29 
	#D_MockEx≥˘edFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 
Sim∂eSåög
 
SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

36 ˛as†
	cMockEx≥˘edFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


39 
public
:

40 
MockEx≥˘edFun˘i⁄CÆl
();

41 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄CÆl
();

43 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

49 
vútuÆ
 
ign‹eOthîP¨amëîs
();

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
MockNamedVÆue
 
gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

61 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîTy≥
(c⁄° Sim∂eSåög& 
«me
);

62 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîVÆueSåög
(c⁄° Sim∂eSåög& 
«me
);

64 
vútuÆ
 
boﬁ
 
hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

65 
vútuÆ
 
boﬁ
 
hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

66 
vútuÆ
 
boﬁ
 
ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

67 
vútuÆ
 
boﬁ
 
	$ªœãsToObje˘
(*
obje˘På
) const;

69 
vútuÆ
 
boﬁ
 
	`isFulfûÀd
();

70 
vútuÆ
 
boﬁ
 
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
();

71 
vútuÆ
 
boﬁ
 
	`¨eP¨amëîsFulfûÀd
();

72 
vútuÆ
 
boﬁ
 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

74 
vútuÆ
 
	`ˇŒWasMade
();

75 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
);

76 
vútuÆ
 
	`∑ømëîsWîeIgn‹ed
();

77 
vútuÆ
 
	`wasPas£dToObje˘
();

78 
vútuÆ
 
	`ª£tEx≥˘©i⁄
();

80 
vútuÆ
 
Sim∂eSåög
 
	`ˇŒToSåög
();

81 
vútuÆ
 
Sim∂eSåög
 
	`missögP¨amëîsToSåög
();

83 
¥iv©e
:

85 ˛as†
	cMockEx≥˘edFun˘i⁄P¨amëî
 : 
public
 
MockNamedVÆue


87 
public
:

88 
	`MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

89 
	`£tFulfûÀd
(
boﬁ
 
b
);

90 
boﬁ
 
	`isFulfûÀd
() const;

92 
¥iv©e
:

93 
boﬁ
 
fulfûÀd_
;

96 
MockEx≥˘edFun˘i⁄P¨amëî
* 
	`ôem
(
MockNamedVÆueLi°Node
* 
node
);

98 
boﬁ
 
ign‹eOthîP¨amëîs_
;

99 
boﬁ
 
∑ømëîsWîeIgn‹ed_
;

100 
boﬁ
 
wasCÆlMade_
;

101 
MockNamedVÆueLi°
* 
∑ømëîs_
;

102 
MockNamedVÆue
 
ªtu∫VÆue_
;

103 * 
obje˘På_
;

104 
boﬁ
 
wasPas£dToObje˘_
;

105 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄sLi°_h


29 
	#D_MockEx≥˘edFun˘i⁄sLi°_h


	)

31 
˛ass
 
	gMockEx≥˘edFun˘i⁄CÆl
;

32 
˛ass
 
	gMockNamedVÆue
;

34 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°


37 
	mpublic
:

38 
MockEx≥˘edFun˘i⁄sLi°
();

39 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄sLi°
();

40 
vútuÆ
 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

42 
vútuÆ
 
	$size
() const;

43 
vútuÆ
 
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const;

44 
vútuÆ
 
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const;

45 
vútuÆ
 
boﬁ
 
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const;

46 
vútuÆ
 
boﬁ
 
	$hasFulfûÀdEx≥˘©i⁄s
() const;

47 
vútuÆ
 
boﬁ
 
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const;

48 
vútuÆ
 
boﬁ
 
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const;

49 
vútuÆ
 
boﬁ
 
	$isEm±y
() const;

51 
vútuÆ
 
	`addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
);

52 
vútuÆ
 
	`addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

53 
vútuÆ
 
	`addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

54 
vútuÆ
 
	`addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

56 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

57 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

58 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

60 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

61 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

63 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

65 
vútuÆ
 
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

66 
vútuÆ
 
boﬁ
 
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
();

68 
vútuÆ
 
	`ª£tEx≥˘©i⁄s
();

69 
vútuÆ
 
	`ˇŒWasMade
();

70 
vútuÆ
 
	`wasPas£dToObje˘
();

71 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
);

73 
vútuÆ
 
boﬁ
 
	$hasDu∂iˇãRëu∫VÆueF‹
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const;

74 
vútuÆ
 
MockNamedVÆue
 
	$ªtu∫VÆueF‹Fun˘i⁄
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const;

75 
vútuÆ
 
Sim∂eSåög
 
	`unfulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

76 
vútuÆ
 
Sim∂eSåög
 
	`fulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

77 
vútuÆ
 
Sim∂eSåög
 
	$missögP¨amëîsToSåög
() const;

79 
¥Ÿe˘ed
:

80 
vútuÆ
 
	`¥u√Em±yNodeFromLi°
();

81 
vútuÆ
 
Sim∂eSåög
 
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const;

83 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°Node


85 
public
:

86 
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl_
;

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt_
;

89 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl
)

90 : 
	`ex≥˘edCÆl_
(
ex≥˘edCÆl
), 
	`√xt_
(
NULL
) {};

92 
¥iv©e
:

93 
MockEx≥˘edFun˘i⁄sLi°Node
* 
hód_
;

95 
	`MockEx≥˘edFun˘i⁄sLi°
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
&);

96 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockFailure.h

29 #i‚de‡
D_MockFaûuª_h


30 
	#D_MockFaûuª_h


	)

32 
	~"CµUTe°/Te°Faûuª.h
"

34 
˛ass
 
	gMockEx≥˘edFun˘i⁄sLi°
;

35 
˛ass
 
	gMockA˘uÆFun˘i⁄CÆl
;

36 
˛ass
 
	gMockNamedVÆue
;

37 
˛ass
 
	gMockFaûuª
;

39 ˛as†
	cMockFaûuªRï‹ãr


41 
	m¥Ÿe˘ed
:

42 
boﬁ
 
¸ashOnFaûuª_
;

43 
	mpublic
:

44 
	$MockFaûuªRï‹ãr
(Ë: 
	$¸ashOnFaûuª_
(
Ál£
){};

45 
vútuÆ
 ~
	$MockFaûuªRï‹ãr
(Ë{
	}
};

47 
vútuÆ
 
ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

48 
vútuÆ
 
Uã°
* 
gëTe°ToFaû
();

50 
vútuÆ
 
	$¸ashOnFaûuª
(Ë{
¸ashOnFaûuª_
 = 
åue
; 
	}
}

53 ˛as†
	cMockFaûuª
 : 
public
 
Te°Faûuª


55 
public
:

56 
MockFaûuª
(
Uã°
* 
ã°
);

57 
	mvútuÆ
 ~
	$MockFaûuª
(){};

58 
¥Ÿe˘ed
:

59 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

60 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

61 
	}
};

63 ˛as†
	cMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


65 
public
:

66 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

67 
	mvútuÆ
 ~
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(){};

68 
	}
};

70 ˛as†
	cMockU√x≥˘edCÆlH≠≥√dFaûuª
 : 
public
 
MockFaûuª


72 
public
:

73 
MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

74 
	mvútuÆ
 ~
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(){};

75 
	}
};

77 ˛as†
	cMockU√x≥˘edP¨amëîFaûuª
 : 
public
 
MockFaûuª


79 
public
:

80 
MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

81 
	mvútuÆ
 ~
	$MockU√x≥˘edP¨amëîFaûuª
(){};

82 
	}
};

84 ˛as†
	cMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


86 
public
:

87 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

88 
	mvútuÆ
 ~
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(){};

89 
	}
};

91 ˛as†
	cMockNoWayToCom∑ªCu°omTy≥Faûuª
 : 
public
 
MockFaûuª


93 
public
:

94 
MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
);

95 
	mvútuÆ
 ~
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(){};

96 
	}
};

98 ˛as†
	cMockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 : 
public
 
MockFaûuª


100 
public
:

101 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

102 
	mvútuÆ
 ~
	$MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(){}

103 
	}
};

105 ˛as†
	cMockU√x≥˘edObje˘Faûuª
 : 
public
 
MockFaûuª


107 
public
:

108 
MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
ex≥˘ed
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

109 
	mvútuÆ
 ~
	$MockU√x≥˘edObje˘Faûuª
(){}

110 
	}
};

112 ˛as†
	cMockEx≥˘edObje˘Did¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


114 
public
:

115 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

116 
	mvútuÆ
 ~
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(){}

117 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockFunctionCall.h

28 #i‚de‡
D_MockFun˘i⁄CÆl_h


29 
	#D_MockFun˘i⁄CÆl_h


	)

35 
˛ass
 
	gMockNamedVÆueCom∑øt‹
;

36 
˛ass
 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
;

38 
	~"CµUTe°Ext/MockNamedVÆue.h
"

40 ˛as†
	cMockFun˘i⁄CÆl


42 
	mpublic
:

43 
MockFun˘i⁄CÆl
();

44 
	mvútuÆ
 ~
MockFun˘i⁄CÆl
();

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)=0;

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)=0;

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)=0;

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)=0;

52 
vútuÆ
 
	$ign‹eOthîP¨amëîs
() {};

54 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

55 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

56 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(c⁄° * 
vÆue
)=0;

57 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(* 
vÆue
)=0;

58 
vútuÆ
 
boﬁ
 
	`hasRëu∫VÆue
()=0;

59 
vútuÆ
 
MockNamedVÆue
 
	`ªtu∫VÆue
()=0;

61 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`⁄Obje˘
(* 
obje˘På
)=0;

63 
vútuÆ
 
	`£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
);

65 
¥Ÿe˘ed
:

66 
	`£tName
(c⁄° 
Sim∂eSåög
& 
«me
);

67 
Sim∂eSåög
 
	$gëName
() const;

68 
MockNamedVÆueCom∑øt‹
* 
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const;

69 
¥iv©e
:

70 
Sim∂eSåög
 
fun˘i⁄Name_
;

71 
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
com∑øt‹Rïosô‹y_
;

72 
	}
};

74 
	gMockFun˘i⁄CÆlComposôeNode
;

75 ˛as†
	cMockFun˘i⁄CÆlComposôe
 : 
public
 
MockFun˘i⁄CÆl


77 
public
:

78 
MockFun˘i⁄CÆlComposôe
();

79 
	mvútuÆ
 ~
MockFun˘i⁄CÆlComposôe
();

81 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
&);

82 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

83 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

84 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, const *);

85 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *);

86 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, const SimpleString&, *);

87 
vútuÆ
 
ign‹eOthîP¨amëîs
();

89 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

90 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

91 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(const *);

92 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(*);

93 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

94 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

96 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* );

98 
vútuÆ
 
add
(
MockFun˘i⁄CÆl
& 
ˇŒ
);

99 
vútuÆ
 
˛ór
();

100 
	m¥iv©e
:

101 
MockFun˘i⁄CÆlComposôeNode
* 
hód_
;

104 ˛as†
	cMockIgn‹edCÆl
 : 
public
 
MockFun˘i⁄CÆl


106 
public
:

107 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhName
(c⁄° 
Sim∂eSåög
&Ë{  *
this
;}

108 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

109 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

110 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, c⁄° *Ë{  *
this
; 
	}
}

111 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *Ë{  *
this
; 
	}
}

112 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, c⁄° Sim∂eSåög&, *Ë{  *
this
; 
	}
}

114 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
; 
	}
}

115 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
;
	}
}

116 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(c⁄° *Ë{  *
this
; 
	}
}

117 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(*Ë{  *
this
; 
	}
}

118 
vútuÆ
 
boﬁ
 
	$hasRëu∫VÆue
(Ë{  
Ál£
; 
	}
}

119 
vútuÆ
 
MockNamedVÆue
 
	$ªtu∫VÆue
(Ë{  
	`MockNamedVÆue
(""); 
	}
}

121 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$⁄Obje˘
(* ) {  *
this
; 
	}
}

123 
	gMockFun˘i⁄CÆl
& 
	$ö°™˚
(Ë{ 
MockIgn‹edCÆl
 
ˇŒ
;  cÆl; 
	}
};

126 ˛as†
	cMockFun˘i⁄CÆlTø˚
 : 
public
 
MockFun˘i⁄CÆl


128 
public
:

129 
MockFun˘i⁄CÆlTø˚
();

130 
	mvútuÆ
 ~
MockFun˘i⁄CÆlTø˚
();

132 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

133 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

134 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

135 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

136 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

137 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

138 
vútuÆ
 
ign‹eOthîP¨amëîs
();

140 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

141 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

142 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

143 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

144 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

145 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

147 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

149 c⁄° * 
gëTø˚Ouçut
();

150 
˛ór
();

151 
	mMockFun˘i⁄CÆlTø˚
& 
ö°™˚
();

153 
	m¥iv©e
:

154 
Sim∂eSåög
 
åa˚Buf„r_
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockNamedValue.h

28 #i‚de‡
D_MockNamedVÆue_h


29 
	#D_MockNamedVÆue_h


	)

35 ˛as†
	cMockNamedVÆueCom∑øt‹


37 
	mpublic
:

38 
	$MockNamedVÆueCom∑øt‹
() {};

39 
vútuÆ
 ~
	$MockNamedVÆueCom∑øt‹
(Ë{
	}
};

41 
vútuÆ
 
boﬁ
 
isEquÆ
(* 
obje˘1
, * 
obje˘2
)=0;

42 
vútuÆ
 
Sim∂eSåög
 
vÆueToSåög
(* 
obje˘
)=0;

45 ˛as†
	cMockFun˘i⁄Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
	$boﬁ
 (*
	tisEquÆFun˘i⁄
)(*, *);

49 
	$Sim∂eSåög
 (*
	tvÆueToSåögFun˘i⁄
)(*);

51 
	$MockFun˘i⁄Com∑øt‹
(
isEquÆFun˘i⁄
 
equÆ
, 
vÆueToSåögFun˘i⁄
 
vÆToSåög
)

52 : 
	`equÆ_
(
equÆ
), 
	$vÆueToSåög_
(
vÆToSåög
) {}

53 
vútuÆ
 ~
	$MockFun˘i⁄Com∑øt‹
(){
	}
};

55 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
){  
	`equÆ_
(obje˘1, obje˘2); 
	}
}

56 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
Ë{  
	`vÆueToSåög_
(obje˘); 
	}
}

57 
	g¥iv©e
:

58 
isEquÆFun˘i⁄
 
equÆ_
;

59 
vÆueToSåögFun˘i⁄
 
	gvÆueToSåög_
;

69 ˛as†
	cMockNamedVÆue


71 
	mpublic
:

72 
MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
);

73 
	mvútuÆ
 ~
MockNamedVÆue
();

75 
vútuÆ
 
£tVÆue
(
vÆue
);

76 
vútuÆ
 
£tVÆue
(
vÆue
);

77 
vútuÆ
 
£tVÆue
(* 
vÆue
);

78 
vútuÆ
 
£tVÆue
(c⁄° * 
vÆue
);

79 
vútuÆ
 
£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
);

81 
vútuÆ
 
£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
);

82 
vútuÆ
 
£tName
(c⁄° * 
«me
);

84 
vútuÆ
 
boﬁ
 
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const;

86 
vútuÆ
 
Sim∂eSåög
 
	$toSåög
() const;

88 
vútuÆ
 
Sim∂eSåög
 
	$gëName
() const;

89 
vútuÆ
 
Sim∂eSåög
 
	$gëTy≥
() const;

91 
vútuÆ
 
	$gëI¡VÆue
() const;

92 
vútuÆ
 
	$gëDoubÀVÆue
() const;

93 
vútuÆ
 c⁄° * 
	$gëSåögVÆue
() const;

94 
vútuÆ
 * 
	$gëPoöãrVÆue
() const;

95 
vútuÆ
 * 
	$gëObje˘Poöãr
() const;

96 
¥iv©e
:

97 
Sim∂eSåög
 
«me_
;

98 
Sim∂eSåög
 
ty≥_
;

100 
ötVÆue_
;

101 
doubÀVÆue_
;

102 c⁄° * 
°rögVÆue_
;

103 * 
poöãrVÆue_
;

104 * 
obje˘PoöãrVÆue_
;

105 } 
vÆue_
;

106 
MockNamedVÆueCom∑øt‹
* 
com∑øt‹_
;

107 
	}
};

109 ˛as†
	cMockNamedVÆueLi°Node


111 
	mpublic
:

112 
MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
);

114 
Sim∂eSåög
 
	$gëName
() const;

115 
Sim∂eSåög
 
	$gëTy≥
() const;

117 
MockNamedVÆueLi°Node
* 
	`√xt
();

118 
MockNamedVÆue
* 
	`ôem
();

120 
	`de°roy
();

121 
	`£tNext
(
MockNamedVÆueLi°Node
* 
node
);

122 
¥iv©e
:

123 
MockNamedVÆue
* 
d©a_
;

124 
MockNamedVÆueLi°Node
* 
√xt_
;

127 ˛as†
	cMockNamedVÆueLi°


129 
public
:

130 
	`MockNamedVÆueLi°
();

132 
MockNamedVÆueLi°Node
* 
	`begö
();

134 
	`add
(
MockNamedVÆue
* 
√wVÆue
);

135 
	`˛ór
();

137 
MockNamedVÆue
* 
	`gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
);

139 
¥iv©e
:

140 
MockNamedVÆueLi°Node
* 
hód_
;

148 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
;

149 ˛as†
	cMockNamedVÆueCom∑øt‹Rïosô‹y


151 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
hód_
;

152 
public
:

153 
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

154 
vútuÆ
 ~
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

156 
vútuÆ
 
	`ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

157 
vútuÆ
 
	`ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

158 
vútuÆ
 
MockNamedVÆueCom∑øt‹
* 
	`gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
);

160 
	`˛ór
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupport.h

28 #i‚de‡
D_MockSuµ‹t_h


29 
	#D_MockSuµ‹t_h


	)

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

33 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

34 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

36 
˛ass
 
	gUã°
;

37 
˛ass
 
	gMockSuµ‹t
;

40 
	gMockSuµ‹t
& 
mock
(c⁄° 
Sim∂eSåög
& 
mockName
 = "");

42 ˛as†
	cMockSuµ‹t


44 
	mpublic
:

45 
MockSuµ‹t
();

46 
	mvútuÆ
 ~
MockSuµ‹t
();

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

51 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

52 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

53 
vútuÆ
 
ötRëu∫VÆue
();

54 
vútuÆ
 c⁄° * 
°rögRëu∫VÆue
();

55 
vútuÆ
 
doubÀRëu∫VÆue
();

56 
vútuÆ
 * 
poöãrRëu∫VÆue
();

58 
boﬁ
 
hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

60 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

61 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

62 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

63 
£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
);

64 
MockNamedVÆue
 
gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

66 
MockSuµ‹t
* 
gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
);

68 c⁄° * 
gëTø˚Ouçut
();

74 
vútuÆ
 
dißbÀ
();

75 
vútuÆ
 
íabÀ
();

76 
vútuÆ
 
åacög
(
boﬁ
 
íabÀd
);

77 
vútuÆ
 
ign‹eOthîCÆls
();

79 
vútuÆ
 
checkEx≥˘©i⁄s
();

80 
vútuÆ
 
boﬁ
 
ex≥˘edCÆlsLe·
();

82 
vútuÆ
 
˛ór
();

83 
vútuÆ
 
£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

84 
vútuÆ
 
¸ashOnFaûuª
();

86 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

87 
vútuÆ
 
ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

88 
vútuÆ
 
ªmoveAŒCom∑øt‹s
();

90 
	m¥Ÿe˘ed
:

91 
vútuÆ
 
MockA˘uÆFun˘i⁄CÆl
 *
¸óãA˘uÆFun˘i⁄CÆl
();

92 
	m¥iv©e
:

94 
MockFaûuªRï‹ãr
 *
ªp‹ãr_
;

95 
MockFaûuªRï‹ãr
 
	mdeÁu…Rï‹ãr_
;

96 
MockEx≥˘edFun˘i⁄sLi°
 
	mex≥˘©i⁄s_
;

97 
boﬁ
 
	mign‹eOthîCÆls_
;

98 
boﬁ
 
	míabÀd_
;

99 
MockA˘uÆFun˘i⁄CÆl
 *
	mœ°A˘uÆFun˘i⁄CÆl_
;

100 
MockFun˘i⁄CÆlComposôe
 
	mcomposôeCÆls_
;

101 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
	mcom∑øt‹Rïosô‹y_
;

102 
MockNamedVÆueLi°
 
	md©a_
;

104 
boﬁ
 
	måacög_
;

106 
checkEx≥˘©i⁄sOfLa°CÆl
();

107 
boﬁ
 
wasLa°CÆlFulfûÀd
();

108 
ÁûTe°WôhF‹U√x≥˘edCÆls
();

110 
MockNamedVÆue
* 
¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

112 
MockSuµ‹t
* 
gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupportPlugin.h

28 #i‚de‡
D_MockSuµ‹tPlugö_h


29 
	#D_MockSuµ‹tPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 ˛as†
	cMockSuµ‹tPlugö
 : 
public
 
Te°Plugö


36 
public
:

37 
MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
 = "MockSupportPLugin");

38 
	mvútuÆ
 ~
MockSuµ‹tPlugö
();

40 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

41 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

43 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

44 
	m¥iv©e
:

45 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y_
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupport_c.h

28 #i‚de‡
D_MockSuµ‹t_c_h


29 
	#D_MockSuµ‹t_c_h


	)

32 
	mMOCKVALUETYPE_INTEGER
,

33 
	mMOCKVALUETYPE_DOUBLE
,

34 
	mMOCKVALUETYPE_STRING
,

35 
	mMOCKVALUETYPE_POINTER
,

36 
	mMOCKVALUETYPE_OBJECT


37 } 
	tMockVÆueTy≥_c
;

39 
	sSMockVÆue_c


41 
MockVÆueTy≥_c
 
	mty≥
;

43 
	mötVÆue
;

44 
	mdoubÀVÆue
;

45 c⁄° * 
	m°rögVÆue
;

46 * 
	mpoöãrVÆue
;

47 * 
	mobje˘VÆue
;

48 } 
	mvÆue
;

49 } 
	tMockVÆue_c
;

51 
SMockFun˘i⁄CÆl_c
 
	tMockFun˘i⁄CÆl_c
;

52 
	sSMockFun˘i⁄CÆl_c


54 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhI¡P¨am©îs
)(c⁄° * 
	m«me
, 
	mvÆue
);

55 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhDoubÀP¨amëîs
)(c⁄° * 
	m«me
, 
	mvÆue
);

56 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhSåögP¨amëîs
)(c⁄° * 
	m«me
, c⁄° * 
	mvÆue
);

57 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhPoöãrP¨amëîs
)(c⁄° * 
	m«me
, * 
	mvÆue
);

58 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhP¨amëîOfTy≥
)(c⁄° * 
	mty≥
, c⁄° * 
	m«me
, * 
	mvÆue
);

60 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫I¡VÆue
)(
	mvÆue
);

61 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫DoubÀVÆue
)(
	mvÆue
);

62 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫SåögVÆue
)(c⁄° * 
	mvÆue
);

63 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫PoöãrVÆue
)(* 
	mvÆue
);

65 
MockVÆue_c
 (*
ªtu∫VÆue
)();

69 (*
	tMockTy≥EquÆFun˘i⁄_c
)(* 
	tobje˘1
, * 
	tobje˘2
);

70 * (*
	tMockTy≥VÆueToSåögFun˘i⁄_c
)(* 
	tobje˘1
);

72 
SMockSuµ‹t_c
 
	tMockSuµ‹t_c
;

73 
	sSMockSuµ‹t_c


75 
MockFun˘i⁄CÆl_c
* (*
ex≥˘O√CÆl
)(c⁄° * 
«me
);

76 
MockFun˘i⁄CÆl_c
* (*
a˘uÆCÆl
)(c⁄° * 
«me
);

77 
	`MockVÆue_c
 (*
ªtu∫VÆue
)();

79 (*
£tI¡D©a
Ë(c⁄° * 
«me
, 
vÆue
);

80 (*
£tDoubÀD©a
Ë(c⁄° * 
«me
, 
vÆue
);

81 (*
£tSåögD©a
Ë(c⁄° * 
«me
, c⁄° * 
vÆue
);

82 (*
£tPoöãrD©a
Ë(c⁄° * 
«me
, * 
vÆue
);

83 (*
£tD©aObje˘
Ë(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

84 
	`MockVÆue_c
 (*
gëD©a
)(c⁄° * 
«me
);

86 (*
checkEx≥˘©i⁄s
)();

87 (*
ex≥˘edCÆlsLe·
)();

89 (*
˛ór
)();

91 (*
ö°ÆlCom∑øt‹
Ë(c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
);

92 (*
ªmoveAŒCom∑øt‹s
)();

96 
MockSuµ‹t_c
* 
	`mock_c
();

97 
MockSuµ‹t_c
* 
	`mock_sc›e_c
(c⁄° * 
sc›e
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\OrderedTest.h

28 #i‚de‡
D_OrdîedTe°_h


29 
	#D_OrdîedTe°_h


	)

31 ˛as†
	cOrdîedTe°
 : 
public
 
Uã°


33 
public
:

34 
OrdîedTe°
();

35 
	mvútuÆ
 ~
OrdîedTe°
();

37 
vútuÆ
 
OrdîedTe°
* 
addOrdîedTe°
(OrdîedTe°* 
ã°
);

38 
vútuÆ
 
OrdîedTe°
* 
gëNextOrdîedTe°
();

40 
gëLevñ
();

41 
£tLevñ
(
Àvñ
);

43 
addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
);

44 
OrdîedTe°
* 
gëOrdîedTe°Hód
();

45 
boﬁ
 
fú°OrdîedTe°
();

47 
£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
);

48 
	m¥iv©e
:

49 
OrdîedTe°
* 
_‹dîedTe°sHód
;

50 
OrdîedTe°
* 
	m_√xtOrdîedTe°
;

52 
	m_Àvñ
;

56 ˛as†
	cOrdîedTe°In°ÆÀr


58 
	mpublic
:

59 
ex∂icô
 
OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Àvñ
);

60 
	mvútuÆ
 ~
OrdîedTe°In°ÆÀr
();

62 
	m¥iv©e
:

63 
addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
);

64 
addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
OrdîedTe°
* 
ã°
);

68 
	#TEST_ORDERED
(
ã°Group
, 
ã°Name
, 
ã°Levñ
) \

69 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

70 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

71 
	`ã°Body
(); } \

72 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

73 
OrdîedTe°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
, 
ã°Levñ
); \

74 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\CommandLineArguments.h

1 #i‚de‡
D_Comm™dLöeArgumíts_H


2 
	#D_Comm™dLöeArgumíts_H


	)

9 
	~"Sim∂eSåög.h
"

10 
	~"Te°Ouçut.h
"

12 
˛ass
 
	gTe°Plugö
;

14 ˛as†
	cComm™dLöeArgumíts


16 
	mpublic
:

17 
ex∂icô
 
Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
);

18 
	mvútuÆ
 ~
Comm™dLöeArgumíts
();

20 
boﬁ
 
∑r£
(
Te°Plugö
* 
∂ugö
);

21 
boﬁ
 
	$isVîbo£
() const;

22 
	$gëRïótCou¡
() const;

23 
Sim∂eSåög
 
	$gëGroupFûãr
() const;

24 
Sim∂eSåög
 
	$gëNameFûãr
() const;

25 
boﬁ
 
	$isJUnôOuçut
() const;

26 
boﬁ
 
	$isE˛ù£Ouçut
() const;

27 c⁄° * 
	$ußge
() const;

29 
¥iv©e
:

31 
	eOuçutTy≥


33 
OUTPUT_ECLIPSE
, 
OUTPUT_JUNIT


35 
ac_
;

36 c⁄° ** 
av_
;

38 
boﬁ
 
vîbo£_
;

39 
ª≥©_
;

40 
Sim∂eSåög
 
groupFûãr_
;

41 
Sim∂eSåög
 
«meFûãr_
;

42 
OuçutTy≥
 
ouçutTy≥_
;

44 
Sim∂eSåög
 
	`gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
);

45 
	`SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
ödex
);

46 
	`SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

47 
	`SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

48 
boﬁ
 
	`SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
ödex
);

50 
	`Comm™dLöeArgumíts
(c⁄° 
Comm™dLöeArgumíts
&);

51 
Comm™dLöeArgumíts
& 
›î©‹
=(const CommandLineArguments&);

53 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\CommandLineTestRunner.h

28 #i‚de‡
D_Comm™dLöeTe°Ru¬î_H


29 
	#D_Comm™dLöeTe°Ru¬î_H


	)

31 
	~"Te°H¨√ss.h
"

32 
	~"Te°Ouçut.h
"

33 
	~"Comm™dLöeArgumíts.h
"

41 
˛ass
 
	gJUnôTe°Ouçut
;

43 
	#DEF_PLUGIN_MEM_LEAK
 "Mem‹yLókPlugö"

	)

44 
	#DEF_PLUGIN_SET_POINTER
 "SëPoöãrPlugö"

	)

46 ˛as†
	cComm™dLöeTe°Ru¬î


48 
	mpublic
:

49 
	eOuçutTy≥


51 
OUTPUT_NORMAL
, 
	mOUTPUT_JUNIT


54 
RunAŒTe°s
(
ac
, c⁄° ** 
av
);

55 
RunAŒTe°s
(
ac
, ** 
av
);

56 
Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
*);

58 
	gvútuÆ
 ~
Comm™dLöeTe°Ru¬î
();

59 
runAŒTe°sMaö
();

61 
	g¥iv©e
:

62 
Te°Ouçut
* 
ouçut_
;

63 
JUnôTe°Ouçut
* 
	gjUnôOuçut_
;

64 
Comm™dLöeArgumíts
* 
	g¨gumíts_
;

66 
boﬁ
 
∑r£Argumíts
(
Te°Plugö
*);

67 
runAŒTe°s
();

68 
öôülizeTe°Run
();

69 
boﬁ
 
isVîbo£
();

70 
gëRïótCou¡
();

71 
Sim∂eSåög
 
gëGroupFûãr
();

72 
Sim∂eSåög
 
gëNameFûãr
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\JUnitTestOutput.h

28 #i‚de‡
D_JUnôTe°Ouçut_h


29 
	#D_JUnôTe°Ouçut_h


	)

31 
	~"Te°Ouçut.h
"

32 
	~"Sim∂eSåög.h
"

34 
	gJUnôTe°OuçutIm∂
;

35 
	gJUnôTe°Ca£Resu…Node
;

37 ˛as†
	cJUnôTe°Ouçut
: 
public
 
Te°Ouçut


39 
public
:

40 
JUnôTe°Ouçut
();

41 
	mvútuÆ
 ~
JUnôTe°Ouçut
();

43 
vútuÆ
 
¥ötTe°sSèπed
();

44 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

45 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

46 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

47 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

48 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

50 
vútuÆ
 
vîbo£
();

51 
vútuÆ
 
¥öt
(const *);

52 
vútuÆ
 
¥öt
();

53 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

54 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

56 
vútuÆ
 
Êush
();

58 
	m¥Ÿe˘ed
:

60 
JUnôTe°OuçutIm∂
* 
im∂_
;

61 
ª£tTe°GroupResu…
();

63 
vútuÆ
 
›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
);

64 
vútuÆ
 
wrôeTe°GroupToFûe
();

65 
vútuÆ
 
wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
);

66 
vútuÆ
 
˛o£Fûe
();

68 
vútuÆ
 
wrôeXmlHódî
();

69 
vútuÆ
 
wrôeTe°SuôeSummîy
();

70 
vútuÆ
 
wrôePr›îtõs
();

71 
vútuÆ
 
wrôeTe°Ca£s
();

72 
vútuÆ
 
wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
);

73 
vútuÆ
 
wrôeFûeEndög
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakAllocator.h

1 #i‚de‡
D_Mem‹yLókAŒoˇt‹_h


2 
	#D_Mem‹yLókAŒoˇt‹_h


	)

4 
	gMem‹yLókNode
;

6 ˛as†
	cMem‹yLókAŒoˇt‹


8 
	mpublic
:

9 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)=0;

10 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

12 
vútuÆ
 c⁄° * 
«me
()=0;

13 
vútuÆ
 c⁄° * 
Æloc_«me
()=0;

14 
vútuÆ
 c⁄° * 
‰ì_«me
()=0;

16 
vútuÆ
 
boﬁ
 
isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

17 
	mvútuÆ
 ~
	$Mem‹yLókAŒoˇt‹
()

21 
vútuÆ
 
boﬁ
 
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

22 
vútuÆ
 * 
	`ÆlocMem‹yLókNode
(
size_t
 
size
);

23 
vútuÆ
 
	`‰ìMem‹yLókNode
(* 
mem‹y
);

25 
	`£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

26 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAŒoˇt‹
();

27 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

29 
	`£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

30 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAºayAŒoˇt‹
();

31 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

33 
	`£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

34 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítMÆlocAŒoˇt‹
();

35 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

37 
¥iv©e
:

38 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAºayAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
cuºítMÆlocAŒoˇt‹
;

41 
	}
};

43 ˛as†
	cSènd¨dMÆlocAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


45 
public
:

46 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

47 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

49 c⁄° * 
«me
();

50 c⁄° * 
Æloc_«me
();

51 c⁄° * 
‰ì_«me
();

53 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

55 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

58 ˛as†
	cSènd¨dNewAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


60 
public
:

61 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

64 c⁄° * 
«me
();

65 c⁄° * 
Æloc_«me
();

66 c⁄° * 
‰ì_«me
();

68 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

71 ˛as†
	cSènd¨dNewAºayAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


73 
public
:

74 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

75 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

77 c⁄° * 
«me
();

78 c⁄° * 
Æloc_«me
();

79 c⁄° * 
‰ì_«me
();

81 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

84 ˛as†
	cNuŒUnknownAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


86 
public
:

87 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

88 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

90 c⁄° * 
«me
();

91 c⁄° * 
Æloc_«me
();

92 c⁄° * 
‰ì_«me
();

94 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetector.h

1 #i‚de‡
D_Mem‹yLókDëe˘‹_h


2 
	#D_Mem‹yLókDëe˘‹_h


	)

4 
	#MEM_LEAK_NONE
 "Nÿmem‹yÜók†wîêdëe˘ed."

	)

5 
	#MEM_LEAK_HEADER
 "Mem‹yÜók(sËfound.\n"

	)

6 
	#MEM_LEAK_LEAK
 "Lók size: %d AŒoˇãdát: %†™dÜöe: %d. Ty≥: \"%s\" C⁄ã¡: \"%.15s\"\n"

	)

7 
	#MEM_LEAK_TOO_MUCH
 "\√t¯ë¯ë¯ëc. !!!! Toÿmuch mem‹yÜók†tÿªp‹t. Baûög out\n"

	)

8 
	#MEM_LEAK_FOOTER
 "TŸÆÇumbî o‡Àaks: "

	)

9 
	#MEM_LEAK_ADDITION_MALLOC_WARNING
 "NOTE:\n" \

12 "\tI‡thi†i†thêˇ£, check whëhî you∏mÆloc/‰ìÑïœ˚mít†¨êw‹kög (#deföêmÆlo¯˝puã°_mÆlo¯ëc).\n"

	)

14 
	#MEM_LEAK_NORMAL_FOOTER_SIZE
 ((
MEM_LEAK_FOOTER
Ë+ 10 + (
MEM_LEAK_TOO_MUCH
)Ë

	)

15 
	#MEM_LEAK_NORMAL_MALLOC_FOOTER_SIZE
 (
MEM_LEAK_NORMAL_FOOTER_SIZE
 + (
MEM_LEAK_ADDITION_MALLOC_WARNING
))

	)

18 
	#MEM_LEAK_ALLOC_DEALLOC_MISMATCH
 "AŒoˇti⁄/dóŒoˇti⁄Åy≥ mism©ch\n"

	)

19 
	#MEM_LEAK_MEMORY_CORRUPTION
 "Mem‹y c‹ru±i⁄ (wrôã¿ouào‡bounds?)\n"

	)

20 
	#MEM_LEAK_ALLOC_LOCATION
 "áŒoˇãdáàfûe: %†löe: %d size: %dÅy≥: %s\n"

	)

21 
	#MEM_LEAK_DEALLOC_LOCATION
 " dóŒoˇãdáàfûe: %†löe: %dÅy≥: %s\n"

	)

22 
	#MEM_LEAK_DEALLOC_NON_ALLOCATED
 "DóŒoˇtögÇ⁄-Æloˇãd mem‹y\n"

	)

24 
	eMemLókPîiod


26 
	mmem_Àak_≥riod_Æl
,

27 
	mmem_Àak_≥riod_dißbÀd
,

28 
	mmem_Àak_≥riod_íabÀd
,

29 
	mmem_Àak_≥riod_checkög


32 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

34 
	~<°dlib.h
>

36 ˛as†
	cMem‹yLókFaûuª


38 
	mpublic
:

39 
vútuÆ
 ~
	$Mem‹yLókFaûuª
()

43 
vútuÆ
 
	`Áû
(* 
Áû_°rög
)=0;

44 
	}
};

46 
	sSim∂eSåögBuf„r


50 
	mSIMPLE_STRING_BUFFER_LEN
 = 4096

53 
Sim∂eSåögBuf„r
();

54 
˛ór
();

55 
add
(c⁄° * 
f‹m©
, ...);

56 * 
toSåög
();

58 
£tWrôeLimô
(
wrôe_limô
);

59 
ª£tWrôeLimô
();

60 
boﬁ
 
ªachedItsC≠acôy
();

61 
	m¥iv©e
:

62 
buf„r_
[
SIMPLE_STRING_BUFFER_LEN
];

63 
	mposôi⁄s_fûÀd_
;

64 
	mwrôe_limô_
;

67 
	sMem‹yLókDëe˘‹Node


69 
Mem‹yLókDëe˘‹Node
() :

70 
size_
(0), 
√xt_
(0)

74 
öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
);

76 
size_t
 
	msize_
;

77 * 
	mmem‹y_
;

78 c⁄° * 
	mfûe_
;

79 
	mlöe_
;

80 
Mem‹yLókAŒoˇt‹
* 
	mÆloˇt‹_
;

81 
MemLókPîiod
 
	m≥riod_
;

83 
	m¥iv©e
:

84 
‰õnd
 
Mem‹yLókDëe˘‹Li°
;

85 
Mem‹yLókDëe˘‹Node
* 
	m√xt_
;

88 
	sMem‹yLókDëe˘‹Li°


90 
Mem‹yLókDëe˘‹Li°
() :

91 
hód_
(0)

94 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

95 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

97 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

98 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
node
,

99 
MemLókPîiod
 
≥riod
);

100 
Mem‹yLókDëe˘‹Node
* 
gëLókFrom
(Mem‹yLókDëe˘‹Node* 
node
,

101 
MemLókPîiod
 
≥riod
);

103 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

104 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

105 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

107 
boﬁ
 
isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
);

109 
	m¥iv©e
:

110 
Mem‹yLókDëe˘‹Node
* 
hód_
;

113 
	sMem‹yLókDëe˘‹TabÀ


115 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

117 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

118 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

120 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

121 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

123 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

124 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
Àak
,

125 
MemLókPîiod
 
≥riod
);

127 
	m¥iv©e
:

128 
hash
(* 
mem‹y
);

132 
	mhash_¥ime
 = 
MEMORY_LEAK_HASH_TABLE_SIZE


134 
Mem‹yLókDëe˘‹Li°
 
	mèbÀ_
[
hash_¥ime
];

137 ˛as†
	cMem‹yLókDëe˘‹


139 
	mpublic
:

140 
Mem‹yLókDëe˘‹
();

141 ~
	$Mem‹yLókDëe˘‹
()

145 
	`öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
);

147 
	`íabÀ
();

148 
	`dißbÀ
();

150 
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

151 
	`íabÀAŒoˇti⁄Ty≥Checkög
();

153 
	`°¨tCheckög
();

154 
	`°›Checkög
();

156 c⁄° * 
	`ªp‹t
(
MemLókPîiod
 
≥riod
);

157 
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

158 
	`tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
);

159 
	`˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

161 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
);

162 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
,

163 c⁄° * 
fûe
, 
löe
);

164 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
);

165 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

166 * 
	`ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

168 
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
);

171 
mem‹y_c‹ru±i⁄_buf„r_size
 = 3

172 
	}
};

173 
	g¥iv©e
:

174 
Mem‹yLókFaûuª
* 
ªp‹ãr_
;

175 
MemLókPîiod
 
	gcuºít_≥riod_
;

176 
Sim∂eSåögBuf„r
 
	gouçut_buf„r_
;

177 
Mem‹yLókDëe˘‹TabÀ
 
	gmem‹yTabÀ_
;

178 
boﬁ
 
	gdoAŒoˇti⁄Ty≥Checkög_
;

180 
boﬁ
 
vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

181 
boﬁ
 
m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
);

183 
°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
);

184 
C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
);

185 
ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
,

186 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

187 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

188 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
);

190 
size_t
 
sizeOfMem‹yWôhC‹ru±i⁄Info
(size_à
size
);

191 
Mem‹yLókDëe˘‹Node
* 
gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
size
);

193 * 
ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

195 
addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

196 
checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h

18 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


19 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


20 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

22 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

26 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


29 #i‚de‡
CPPUTEST_USE_MALLOC_MACROS


31 
	~<°dlib.h
>

33 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

34 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

51 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

52 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

53 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

54 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

56 
	#CPPUTEST_USE_MALLOC_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h

28 
	~<°dlib.h
>

30 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


31 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


32 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

34 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

38 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


40 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


41 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


42 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

44 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

49 #i‚de‡
CPPUTEST_USE_NEW_MACROS


51 #i‡
CPPUTEST_USE_STD_CPP_LIB


52 
	~<√w
>

54 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

55 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

61 * 
›î©‹
 
	`√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

69 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

71 #i‚de‡
CPPUTEST_USE_NEW_MACROS


74 
	~"Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

75 #i‚de‡
CPPUTEST_USE_NEW_MACROS


76 
	}
}

80 
	#CPPUTEST_USE_NEW_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h

28 #i‚de‡
D_Mem‹yLókW¨nögPlugö_h


29 
	#D_Mem‹yLókW¨nögPlugö_h


	)

31 
	~"Te°Plugö.h
"

42 
	#IGNORE_ALL_LEAKS_IN_TEST
(Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ign‹eAŒLóksInTe°
();

	)

43 
	#EXPECT_N_LEAKS
(
n
Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ex≥˘LóksInTe°
“);

	)

46 
	~"Te°H¨√ss_c.h
"

49 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


51 #unde‡
√w


53 #i‡
CPPUTEST_USE_STD_CPP_LIB


55 
	~<√w
>

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

58 
›î©‹
 
	$dñëe
(* 
mem
Ë
	`throw
();

59 
›î©‹
 
dñëe
[](* 
mem
Ë
	`throw
();

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

65 
›î©‹
 
	`dñëe
(* 
mem
);

66 
›î©‹
 
dñëe
[](* 
mem
);

70 #i‡
CPPUTEST_USE_NEW_MACROS


71 
	~"Mem‹yLókDëe˘‹NewMa¸os.h
"

76 
˛ass
 
Mem‹yLókDëe˘‹
;

78 ˛as†
	cMem‹yLókW¨nögPlugö
: 
public
 
Te°Plugö


80 
public
:

81 
	`Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

82 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
 = 0);

83 
vútuÆ
 ~
	`Mem‹yLókW¨nögPlugö
();

85 
vútuÆ
 
	`¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

86 
vútuÆ
 
	`po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

88 
vútuÆ
 c⁄° * 
	`FöÆRï‹t
(
toBeDñëedLóks
 = 0);

90 
	`ign‹eAŒLóksInTe°
();

91 
	`ex≥˘LóksInTe°
(
n
);

93 
Mem‹yLókDëe˘‹
* 
	`gëMem‹yLókDëe˘‹
();

94 
Mem‹yLókW¨nögPlugö
* 
	`gëFú°Plugö
();

96 
Mem‹yLókDëe˘‹
* 
	`gëGlobÆDëe˘‹
();

97 
¥iv©e
:

98 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹_
;

99 
boﬁ
 
ign‹eAŒW¨nögs_
;

100 
ex≥˘edLóks_
;

101 
ÁûuªCou¡_
;

103 
Mem‹yLókW¨nögPlugö
* 
fú°Plugö_
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\PlatformSpecificFunctions.h

28 #i‚de‡
PLATFORMSPECIFICFUNCTIONS_H_


29 
	#PLATFORMSPECIFICFUNCTIONS_H_


	)

46 
GëPœtf‹mS≥cificTimeInMûlis
();

47 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
)());

49 c⁄° * 
GëPœtf‹mS≥cificTimeSåög
();

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
)());

53 
Pœtf‹mS≥cificAtoI
(c⁄° *
°r
);

54 
size_t
 
Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
);

55 * 
Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
);

56 * 
Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
);

57 * 
Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

58 
Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
);

59 
Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

60 * 
Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
);

61 
Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
,

62 
va_li°
 
va_¨gs_li°
);

63 
Pœtf‹mS≥cificToLowî
(
c
);

66 
Pœtf‹mS≥cificFabs
(
d
);

67 
Pœtf‹mS≥cificIsN™
(
d
);

68 
Pœtf‹mS≥cificAtExô
((*
func
)());

71 * 
	tPœtf‹mS≥cificFûe
;

73 
Pœtf‹mS≥cificFûe
 
Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
,

74 c⁄° * 
Êag
);

75 
Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
);

76 
Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
);

78 
Pœtf‹mS≥cificPutch¨
(
c
);

79 
Pœtf‹mS≥cificFlush
();

82 * 
Pœtf‹mS≥cificMÆloc
(
size_t
 
size
);

83 * 
Pœtf‹mS≥cificRóŒoc
(* 
mem‹y
, 
size_t
 
size
);

84 
Pœtf‹mS≥cificFªe
(* 
mem‹y
);

85 * 
Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

86 * 
Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\SimpleString.h

38 #i‚de‡
D_Sim∂eSåög_h


39 
	#D_Sim∂eSåög_h


	)

41 
	~<°d¨g.h
>

42 
	~<°ddef.h
>

44 
˛ass
 
	gSim∂eSåögCﬁÀ˘i⁄
;

45 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

47 ˛as†
	cSim∂eSåög


49 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

50 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

52 
	mpublic
:

53 
Sim∂eSåög
(c⁄° *
vÆue
 = "");

54 
Sim∂eSåög
(c⁄° *
vÆue
, 
size_t
 
ª≥©Cou¡
);

55 
Sim∂eSåög
(c⁄° Sim∂eSåög& 
Ÿhî
);

56 ~
Sim∂eSåög
();

58 
	mSim∂eSåög
& 
	m›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
);

59 
Sim∂eSåög
 
	m›î©‹
+(c⁄° 
	mSim∂eSåög
&);

60 
	mSim∂eSåög
& 
	m›î©‹
+=(c⁄° 
Sim∂eSåög
&);

61 
	mSim∂eSåög
& 
	m›î©‹
+=(const *);

63 
boﬁ
 
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

64 
boﬁ
 
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

65 
boﬁ
 
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

66 
boﬁ
 
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

67 
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
,

68 
Sim∂eSåögCﬁÀ˘i⁄
& 
outCﬁÀ˘i⁄
) const;

69 
boﬁ
 
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const;

71 
size_t
 
	$cou¡
(c⁄° 
Sim∂eSåög
& 
°r
) const;

73 
	`ª∂a˚
(
to
, 
wôh
);

74 
	`ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
);

76 
Sim∂eSåög
 
	$toLowî
() const;

77 
Sim∂eSåög
 
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const;

78 
	$c›yToBuf„r
(* 
buf„r
, 
size_t
 
buf„rSize
) const;

80 c⁄° *
	$asCh¨Såög
() const;

81 
size_t
 
	$size
() const;

82 
boﬁ
 
	$isEm±y
() const;

84 
	`∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
ch
);

86 
Mem‹yLókAŒoˇt‹
* 
	`gëSåögAŒoˇt‹
();

87 
	`£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

89 * 
	`ÆlocSåögBuf„r
(
size_t
 
size
);

90 
	`dóŒocSåögBuf„r
(* 
°r
);

91 
¥iv©e
:

92 *
buf„r_
;

94 
Mem‹yLókAŒoˇt‹
* 
°rögAŒoˇt‹_
;

96 * 
	$gëEm±ySåög
() const;

99 ˛as†
	cSim∂eSåögCﬁÀ˘i⁄


101 
public
:

102 
	`Sim∂eSåögCﬁÀ˘i⁄
();

103 ~
	`Sim∂eSåögCﬁÀ˘i⁄
();

105 
	`Æloˇã
(
size_t
 
size
);

107 
size_t
 
	$size
() const;

108 
Sim∂eSåög
& 
›î©‹
[](
size_t
 
ödex
);

110 
¥iv©e
:

111 
Sim∂eSåög
* 
cﬁÀ˘i⁄_
;

112 
Sim∂eSåög
 
em±y_
;

113 
size_t
 
size_
;

115 
›î©‹
 =(
Sim∂eSåögCﬁÀ˘i⁄
&);

116 
	`Sim∂eSåögCﬁÀ˘i⁄
(
Sim∂eSåögCﬁÀ˘i⁄
&);

119 
Sim∂eSåög
 
	`SåögFrom
(
boﬁ
 
vÆue
);

120 
Sim∂eSåög
 
	`SåögFrom
(c⁄° * 
vÆue
);

121 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

122 
Sim∂eSåög
 
	`SåögFrom
(c⁄° *
vÆue
);

123 
Sim∂eSåög
 
	`SåögFromOrNuŒ
(c⁄° * 
vÆue
);

124 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

125 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

126 
Sim∂eSåög
 
	`HexSåögFrom
(
vÆue
);

127 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
, 
¥ecisi⁄
 = 6);

128 
Sim∂eSåög
 
	`SåögFrom
(c⁄° Sim∂eSåög& 
Ÿhî
);

129 
Sim∂eSåög
 
	`SåögFromF‹m©
(c⁄° * 
f‹m©
, ...);

130 
Sim∂eSåög
 
	`VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
);

132 #i‡
CPPUTEST_USE_STD_CPP_LIB


134 #unde‡
√w


135 
	~<°rög
>

136 #i‡
CPPUTEST_USE_NEW_MACROS


137 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

140 
	~<°döt.h
>

142 
Sim∂eSåög
 
	`SåögFrom
(c⁄° 
°d
::
°rög
& 
Ÿhî
);

143 
Sim∂eSåög
 
	`SåögFrom
(
uöt32_t
);

144 
Sim∂eSåög
 
	`SåögFrom
(
uöt16_t
);

145 
Sim∂eSåög
 
	`SåögFrom
(
uöt8_t
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestFailure.h

38 #i‚de‡
D_Te°Faûuª_H


39 
	#D_Te°Faûuª_H


	)

41 
	~"Sim∂eSåög.h
"

43 
˛ass
 
	gUã°
;

44 
˛ass
 
	gTe°Ouçut
;

46 ˛as†
	cTe°Faûuª


49 
	mpublic
:

50 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

51 c⁄° 
Sim∂eSåög
& 
theMesßge
);

52 
Te°Faûuª
(
Uã°
*, c⁄° 
Sim∂eSåög
& 
theMesßge
);

53 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
);

54 
Te°Faûuª
(const TestFailure&);

55 
	mvútuÆ
 ~
Te°Faûuª
();

57 
vútuÆ
 
Sim∂eSåög
 
	$gëFûeName
() const;

58 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°Name
() const;

59 
vútuÆ
 
	$gëFaûuªLöeNumbî
() const;

60 
vútuÆ
 
Sim∂eSåög
 
	$gëMesßge
() const;

61 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°FûeName
() const;

62 
vútuÆ
 
	$gëTe°LöeNumbî
() const;

63 
boﬁ
 
	$isOutsideTe°Fûe
() const;

64 
boﬁ
 
	$isInHñ≥rFun˘i⁄
() const;

67 
¥Ÿe˘ed
:

69 
Sim∂eSåög
 
	`¸óãButWasSåög
(c⁄° Sim∂eSåög& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

70 
Sim∂eSåög
 
	`¸óãDif„ªn˚AtPosSåög
(c⁄° Sim∂eSåög& 
a˘uÆ
, 
posôi⁄
);

72 
Sim∂eSåög
 
ã°Name_
;

73 
Sim∂eSåög
 
fûeName_
;

74 
löeNumbî_
;

75 
Sim∂eSåög
 
ã°FûeName_
;

76 
ã°LöeNumbî_
;

77 
Sim∂eSåög
 
mesßge_
;

79 
Te°Faûuª
& 
›î©‹
=(const TestFailure&);

83 ˛as†
	cEquÆsFaûuª
: 
public
 
Te°Faûuª


85 
public
:

86 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

87 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

90 ˛as†
	cDoubÀsEquÆFaûuª
: 
public
 
Te°Faûuª


92 
public
:

93 
	`DoubÀsEquÆFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
);

96 ˛as†
	cCheckEquÆFaûuª
 : 
public
 
Te°Faûuª


98 
public
:

99 
	`CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

102 ˛as†
	cC⁄èösFaûuª
: 
public
 
Te°Faûuª


104 
public
:

105 
	`C⁄èösFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

109 ˛as†
	cCheckFaûuª
 : 
public
 
Te°Faûuª


111 
public
:

112 
	`CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
);

115 ˛as†
	cFaûFaûuª
 : 
public
 
Te°Faûuª


117 
public
:

118 
	`FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
);

121 ˛as†
	cL⁄gsEquÆFaûuª
 : 
public
 
Te°Faûuª


123 
public
:

124 
	`L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

127 ˛as†
	cSåögEquÆFaûuª
 : 
public
 
Te°Faûuª


129 
public
:

130 
	`SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

133 ˛as†
	cSåögEquÆNoCa£Faûuª
 : 
public
 
Te°Faûuª


135 
public
:

136 
	`SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestHarness.h

28 #i‚de‡
D_Te°H¨√ss_h


29 
	#D_Te°H¨√ss_h


	)

37 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


38 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


39 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

41 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

45 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


46 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


47 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

49 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

57 
	#MEMORY_LEAK_HASH_TABLE_SIZE
 73

	)

71 
	~"Uã°.h
"

72 
	~"Uã°Ma¸os.h
"

73 
	~"Sim∂eSåög.h
"

74 
	~"Te°Resu….h
"

75 
	~"Te°Faûuª.h
"

76 
	~"Te°Plugö.h
"

77 
	~"Mem‹yLókW¨nögPlugö.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestHarness_c.h

38 #i‚de‡
D_Te°H¨√ss_c_h


39 
	#D_Te°H¨√ss_c_h


	)

41 
	#CHECK_EQUAL_C_INT
(
ex≥˘ed
,
a˘uÆ
) \

42 
	`CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

44 
	#CHECK_EQUAL_C_REAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
) \

45 
	`CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

47 
	#CHECK_EQUAL_C_CHAR
(
ex≥˘ed
,
a˘uÆ
) \

48 
	`CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

50 
	#CHECK_EQUAL_C_STRING
(
ex≥˘ed
,
a˘uÆ
) \

51 
	`CHECK_EQUAL_C_STRING_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

53 
	#FAIL_TEXT_C
(
ãxt
) \

54 
	`FAIL_TEXT_C_LOCATION
(
ãxt
,
__FILE__
,
__LINE__
)

	)

56 
	#FAIL_C
() \

57 
	`FAIL_C_LOCATION
(
__FILE__
,
__LINE__
)

	)

59 
	#CHECK_C
(
c⁄dôi⁄
) \

60 
	`CHECK_C_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
,
__LINE__
)

	)

63 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

64 c⁄° * 
fûeName
, 
löeNumbî
);

65 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

66 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

67 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

68 c⁄° * 
fûeName
, 
löeNumbî
);

69 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
,

70 c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
);

71 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

72 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

75 c⁄° * 
fûeName
, 
löeNumbî
);

77 
	~<°ddef.h
>

79 * 
˝puã°_mÆloc
(
size_t
 
size
);

80 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
);

81 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
);

82 
˝puã°_‰ì
(* 
buf„r
);

84 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

85 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
,

86 c⁄° * 
fûe
, 
löe
);

87 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
,

88 c⁄° * 
fûe
, 
löe
);

89 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

91 
˝puã°_mÆloc_£t_out_of_mem‹y
();

92 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

99 #i‚de‡
PUNUSED


100 #i‡
deföed
(
__GNUC__
)

101 
	#PUNUSED
(
x
Ë
PUNUSED_
 ##x 
	`__©åibuã__
((
unu£d
))

	)

103 
	#PUNUSED
(
x
Ë
	)
x

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestOutput.h

28 #i‚de‡
D_Te°Ouçut_h


29 
	#D_Te°Ouçut_h


	)

42 
˛ass
 
	gUã°
;

43 
˛ass
 
	gTe°Faûuª
;

44 
˛ass
 
	gTe°Resu…
;

46 ˛as†
	cTe°Ouçut


48 
	mpublic
:

49 
ex∂icô
 
Te°Ouçut
();

50 
	mvútuÆ
 ~
Te°Ouçut
();

52 
vútuÆ
 
¥ötTe°sSèπed
();

53 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

54 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

55 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

56 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

57 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

59 
vútuÆ
 
vîbo£
();

60 
vútuÆ
 
¥öt
(const *)=0;

61 
vútuÆ
 
¥öt
();

62 
vútuÆ
 
¥ötDoubÀ
();

63 
vútuÆ
 
¥ötHex
();

64 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

65 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

66 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

68 
vútuÆ
 
Êush
();

70 
	m¥iv©e
:

72 
vútuÆ
 
¥ötProgªssIndiˇt‹
();

73 
¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

74 
¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

75 
¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
);

76 
¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
);

77 
¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
ã°Fûe
, 
löeNumbî
);

79 
Te°Ouçut
(const TestOutput&);

80 
	mTe°Ouçut
& 
	m›î©‹
=(c⁄° 
Te°Ouçut
&);

82 
	mdŸCou¡_
;

83 
boﬁ
 
	mvîbo£_
;

84 c⁄° * 
	m¥ogªssIndiˇti⁄_
;

87 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, const *);

88 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, );

98 ˛as†
	cC⁄sﬁeTe°Ouçut
: 
public
 
Te°Ouçut


100 
public
:

101 
ex∂icô
 
	$C⁄sﬁeTe°Ouçut
()

105 
vútuÆ
 ~
	$C⁄sﬁeTe°Ouçut
()

107 
	}
}

110 
vútuÆ
 
¥öt
(c⁄° * 
s
);

111 
vútuÆ
 
Êush
();

113 
	g¥iv©e
:

114 
C⁄sﬁeTe°Ouçut
(const ConsoleTestOutput&);

115 
	gC⁄sﬁeTe°Ouçut
& 
	g›î©‹
=(c⁄° 
C⁄sﬁeTe°Ouçut
&);

127 ˛as†
	cSåögBuf„rTe°Ouçut
: 
public
 
Te°Ouçut


129 
public
:

130 
ex∂icô
 
	$SåögBuf„rTe°Ouçut
()

134 
vútuÆ
 ~
	$SåögBuf„rTe°Ouçut
()

136 
	}
}

139 
	$¥öt
(c⁄° * 
s
)

141 
ouçut
 +
s
;

142 
	}
}

144 
	$Êush
()

146 
ouçut
 = "";

147 
	}
}

149 c⁄° 
	gSim∂eSåög
& 
	$gëOuçut
()

151  
ouçut
;

152 
	}
}

154 
	g¥iv©e
:

155 
Sim∂eSåög
 
ouçut
;

157 
SåögBuf„rTe°Ouçut
(const StringBufferTestOutput&);

158 
	gSåögBuf„rTe°Ouçut
& 
	g›î©‹
=(c⁄° 
SåögBuf„rTe°Ouçut
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestPlugin.h

36 #i‚de‡
D_Te°Plugö_h


37 
	#D_Te°Plugö_h


	)

39 
˛ass
 
	gUã°
;

40 
˛ass
 
	gTe°Resu…
;

42 ˛as†
	cTe°Plugö


44 
	mpublic
:

46 
Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
);

47 
	mvútuÆ
 ~
Te°Plugö
();

49 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

55 
	}
}

57 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

59  
Ál£
;

60 
	}
}

62 
vútuÆ
 
runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

63 
vútuÆ
 
runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

64 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
);

65 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
);

67 
vútuÆ
 
Te°Plugö
* 
addPlugö
(TestPlugin*);

68 
vútuÆ
 
Te°Plugö
* 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

69 
vútuÆ
 
Te°Plugö
* 
gëNext
();

71 
vútuÆ
 
dißbÀ
();

72 
vútuÆ
 
íabÀ
();

73 
vútuÆ
 
boﬁ
 
isE«bÀd
();

75 c⁄° 
	gSim∂eSåög
& 
gëName
();

76 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

78 
	g¥Ÿe˘ed
:

79 
Te°Plugö
(Te°Plugö* 
√xt_
);

81 
	g¥iv©e
:

82 
Te°Plugö
* 
√xt_
;

83 
Sim∂eSåög
 
	g«me_
;

84 
boﬁ
 
	gíabÀd_
;

95 
CµUTe°St‹e
(**
loˇti⁄
, *
vÆue
);

97 ˛as†
	cSëPoöãrPlugö
: 
public
 
Te°Plugö


99 
public
:

100 
SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
);

101 
	mvútuÆ
 ~
SëPoöãrPlugö
();

102 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

106 
	mMAX_SET
 = 1024

111 
	#UT_PTR_SET
(
a
, 
b
Ë{ 
	`CµUTe°St‹e
–(**)&a, *((**Ë&a));á = b; }

	)

115 ˛as†
	cNuŒTe°Plugö
: 
public
 
Te°Plugö


117 
public
:

119 
NuŒTe°Plugö
();

120 
	mvútuÆ
 ~
	$NuŒTe°Plugö
()

124 
vútuÆ
 
	`runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

125 
vútuÆ
 
	`runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

127 
NuŒTe°Plugö
* 
	`ö°™˚
();

128 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestRegistry.h

36 #i‚de‡
D_Te°Regi°ry_h


37 
	#D_Te°Regi°ry_h


	)

39 
	~"Sim∂eSåög.h
"

41 
˛ass
 
	gUã°
;

42 
˛ass
 
	gTe°Resu…
;

43 
˛ass
 
	gTe°Plugö
;

45 ˛as†
	cTe°Regi°ry


47 
	mpublic
:

48 
Te°Regi°ry
();

49 
	mvútuÆ
 ~
Te°Regi°ry
();

51 
vútuÆ
 
addTe°
(
Uã°
 *
ã°
);

52 
vútuÆ
 
unDoLa°AddTe°
();

53 
vútuÆ
 
cou¡Te°s
();

54 
vútuÆ
 
runAŒTe°s
(
Te°Resu…
& 
ªsu…
);

55 
vútuÆ
 
«meFûãr
(
Sim∂eSåög
);

56 
vútuÆ
 
groupFûãr
(
Sim∂eSåög
);

58 
vútuÆ
 
ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
);

59 
vútuÆ
 
ª£tPlugös
();

60 
vútuÆ
 
Te°Plugö
* 
gëFú°Plugö
();

61 
vútuÆ
 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

64 
Sim∂eSåög
 
gëGroupFûãr
();

65 
Sim∂eSåög
 
gëNameFûãr
();

67 
vútuÆ
 
Uã°
* 
gëFú°Te°
();

68 
vútuÆ
 
Uã°
* 
gëLa°Te°
();

69 
vútuÆ
 
Uã°
* 
gëTe°WôhNext
(Uã°* 
ã°
);

71 
Te°Regi°ry
* 
gëCuºítRegi°ry
();

72 
vútuÆ
 
£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
);

73 
˛ónup
();

74 
	m¥iv©e
:

76 
boﬁ
 
ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
);

77 
boﬁ
 
ídOfGroup
(
Uã°
* 
ã°
);

79 
Uã°
 * 
	mã°s_
;

80 
Sim∂eSåög
* 
	m«meFûãr_
;

81 
Sim∂eSåög
* 
	mgroupFûãr_
;

82 
Te°Plugö
* 
	mfú°Plugö_
;

83 
Te°Regi°ry
* 
	mcuºítRegi°ry_
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestResult.h

38 #i‚de‡
D_Te°Resu…_h


39 
	#D_Te°Resu…_h


	)

41 
˛ass
 
	gTe°Faûuª
;

42 
˛ass
 
	gTe°Ouçut
;

43 
˛ass
 
	gUã°
;

45 ˛as†
	cTe°Resu…


47 
	mpublic
:

48 
Te°Resu…
(
Te°Ouçut
&);

49 
	mvútuÆ
 ~
Te°Resu…
();

51 
vútuÆ
 
ã°sSèπed
();

52 
vútuÆ
 
ã°sEnded
();

53 
vútuÆ
 
cuºítGroupSèπed
(
Uã°
* 
ã°
);

54 
vútuÆ
 
cuºítGroupEnded
(
Uã°
* 
ã°
);

55 
vútuÆ
 
cuºítTe°Sèπed
(
Uã°
* 
ã°
);

56 
vútuÆ
 
cuºítTe°Ended
(
Uã°
* 
ã°
);

58 
vútuÆ
 
cou¡Te°
();

59 
vútuÆ
 
cou¡Run
();

60 
vútuÆ
 
cou¡Check
();

61 
vútuÆ
 
cou¡FûãªdOut
();

62 
vútuÆ
 
cou¡Ign‹ed
();

63 
vútuÆ
 
addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

64 
vútuÆ
 
¥öt
(c⁄° * 
ãxt
);

65 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

67 
	$gëTe°Cou¡
() const

69  
ã°Cou¡_
;

71 
	$gëRunCou¡
() const

73  
runCou¡_
;

74 
	}
}

75 
	$gëCheckCou¡
() const

77  
checkCou¡_
;

78 
	}
}

79 
	$gëFûãªdOutCou¡
() const

81  
fûãªdOutCou¡_
;

82 
	}
}

83 
	$gëIgn‹edCou¡
() const

85  
ign‹edCou¡_
;

86 
	}
}

87 
	$gëFaûuªCou¡
() const

89  
ÁûuªCou¡_
;

90 
	}
}

92 
	$gëTŸÆExecuti⁄Time
() const;

93 
	`£tTŸÆExecuti⁄Time
(
exTime
);

95 
	$gëCuºítTe°TŸÆExecuti⁄Time
() const;

96 
	$gëCuºítGroupTŸÆExecuti⁄Time
() const;

97 
¥iv©e
:

99 
Te°Ouçut
& 
ouçut_
;

100 
ã°Cou¡_
;

101 
runCou¡_
;

102 
checkCou¡_
;

103 
ÁûuªCou¡_
;

104 
fûãªdOutCou¡_
;

105 
ign‹edCou¡_
;

106 
tŸÆExecuti⁄Time_
;

107 
timeSèπed_
;

108 
cuºítTe°TimeSèπed_
;

109 
cuºítTe°TŸÆExecuti⁄Time_
;

110 
cuºítGroupTimeSèπed_
;

111 
cuºítGroupTŸÆExecuti⁄Time_
;

112 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestTestingFixture.h

28 #i‚de‡
D_Te°Te°ögFixtuª_H


29 
	#D_Te°Te°ögFixtuª_H


	)

31 ˛as†
	cTe°Te°ögFixtuª


33 
	mpublic
:

35 
	$Te°Te°ögFixtuª
()

37 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

38 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

39 
gíTe°_
 = 
√w
 
	`ExecFun˘i⁄Te°
();

40 
ªgi°ry_
 = 
√w
 
	`Te°Regi°ry
();

42 
ªgi°ry_
->
	`£tCuºítRegi°ry
(registry_);

43 
ªgi°ry_
->
	`addTe°
(
gíTe°_
);

47 
vútuÆ
 ~
	$Te°Te°ögFixtuª
()

49 
ªgi°ry_
->
	`£tCuºítRegi°ry
(0);

50 
dñëe
 
ªgi°ry_
;

51 
dñëe
 
ªsu…_
;

52 
dñëe
 
ouçut_
;

53 
dñëe
 
gíTe°_
;

54 
	}
}

56 
£tTe°Fun˘i⁄
((*
ã°Fun˘i⁄
)())

58 
gíTe°_
->
ã°Fun˘i⁄_
 = 
ã°Fun˘i⁄
;

59 
	}
}

61 
£tSëup
((*
£tupFun˘i⁄
)())

63 
gíTe°_
->
£tup_
 = 
£tupFun˘i⁄
;

64 
	}
}

66 
£tTórdown
((*
ã¨downFun˘i⁄
)())

68 
gíTe°_
->
ã¨down_
 = 
ã¨downFun˘i⁄
;

69 
	}
}

71 
	$runAŒTe°s
()

73 
ªgi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

74 
	}
}

76 
	$gëFaûuªCou¡
()

78  
ªsu…_
->
	`gëFaûuªCou¡
();

79 
	}
}

81 
	$as£πPrötC⁄èös
(c⁄° 
Sim∂eSåög
& 
c⁄èös
)

83 
	`as£πPrötC⁄èös
(
ouçut_
, 
c⁄èös
);

84 
	}
}

86 
	$as£πPrötC⁄èös
(
SåögBuf„rTe°Ouçut
* 
ouçut
,

87 c⁄° 
Sim∂eSåög
& 
c⁄èös
)

89 i‡(
ouçut
->
	`gëOuçut
().
	`c⁄èös
(
c⁄èös
)) ;

90 
Sim∂eSåög
 
	`mesßge
("\tActual <");

91 
mesßge
 +
ouçut
->
	`gëOuçut
().
	`asCh¨Såög
();

92 
mesßge
 += ">\n";

93 
mesßge
 += "\tdidÇot contain <";

94 
mesßge
 +
c⁄èös
.
	`asCh¨Såög
();

95 
mesßge
 += ">\n";

96 
	`FAIL
(
mesßge
.
	`asCh¨Såög
());

98 
	}
}

100 
Te°Regi°ry
* 
	gªgi°ry_
;

101 
ExecFun˘i⁄Te°
* 
	ggíTe°_
;

102 
SåögBuf„rTe°Ouçut
* 
	gouçut_
;

103 
Te°Resu…
 * 
	gªsu…_
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\Utest.h

31 #i‚de‡
D_UTe°_h


32 
	#D_UTe°_h


	)

34 
	~"Sim∂eSåög.h
"

45 
˛ass
 
	gTe°Resu…
;

46 
˛ass
 
	gTe°Plugö
;

47 
˛ass
 
	gTe°Faûuª
;

49 
boﬁ
 
doubÀs_equÆ
(
d1
, 
d2
, 
thªshﬁd
);

51 ˛as†
	cUã°


53 
	mpublic
:

54 
Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

55 
löeNumbî
);

56 
	mvútuÆ
 ~
Uã°
();

58 
vútuÆ
 
run
(
Te°Resu…
& 
ªsu…
);

59 
vútuÆ
 
runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

60 
vútuÆ
 
Sim∂eSåög
 
	$gëF‹m©ãdName
() const;

62 
vútuÆ
 
Uã°
* 
	`addTe°
(Uã°* 
ã°
);

63 
vútuÆ
 
Uã°
 *
	$gëNext
() const;

64 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

65 
vútuÆ
 
	`cou¡Te°s
();

67 
boﬁ
 
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const;

68 c⁄° 
Sim∂eSåög
 
	$gëName
() const;

69 c⁄° 
Sim∂eSåög
 
	$gëGroup
() const;

70 c⁄° 
Sim∂eSåög
 
	$gëFûe
() const;

71 
	$gëLöeNumbî
() const;

72 c⁄° 
vútuÆ
 *
	$gëProgªssIndiˇt‹
() const;

74 
vútuÆ
 
	`£tup
();

75 
vútuÆ
 
	`ã¨down
();

76 
vútuÆ
 
	`ã°Body
();

78 
Te°Resu…
 *
	`gëTe°Resu…
();

79 
Uã°
 *
	`gëCuºít
();

81 
vútuÆ
 
	`as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄Såög
, c⁄° *
fûeName
, 
löeNumbî
);

82 
vútuÆ
 
	`as£πC°rEquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

83 
vútuÆ
 
	`as£πC°rNoCa£EquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

84 
vútuÆ
 
	`as£πC°rC⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

85 
vútuÆ
 
	`as£πC°rNoCa£C⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

86 
vútuÆ
 
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

87 
vútuÆ
 
	`as£πPoöãrsEquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

88 
vútuÆ
 
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° *
fûeName
, 
löeNumbî
);

89 
vútuÆ
 
	`Áû
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

91 
vútuÆ
 
	`¥öt
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

92 
vútuÆ
 
	`¥öt
(c⁄° 
Sim∂eSåög
 & 
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

94 
	`£tFûeName
(c⁄° *
fûeName
);

95 
	`£tLöeNumbî
(
löeNumbî
);

96 
	`£tGroupName
(c⁄° *
groupName
);

97 
	`£tTe°Name
(c⁄° *
ã°Name
);

99 
vútuÆ
 
	`exôCuºítTe°
();

100 
¥Ÿe˘ed
:

101 
vútuÆ
 
	`runO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

102 
vútuÆ
 
	`execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

103 
vútuÆ
 
boﬁ
 
	`execuãPœtf‹mS≥cificSëup
();

104 
vútuÆ
 
	`execuãPœtf‹mS≥cificTe°Body
();

105 
vútuÆ
 
	`execuãPœtf‹mS≥cificTórdown
();

106 
vútuÆ
 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

108 
	`Uã°
();

109 
	`Uã°
(c⁄° *
groupName
, c⁄° *
ã°Name
, c⁄° *
fûeName
, 
löeNumbî
, 
Uã°
 *
√xtTe°
);

111 
vútuÆ
 
Sim∂eSåög
 
	$gëMa¸oName
() const;

112 
¥iv©e
:

113 c⁄° *
group_
;

114 c⁄° *
«me_
;

115 c⁄° *
fûe_
;

116 
löeNumbî_
;

117 
Uã°
 *
√xt_
;

119 
	`£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

120 
	`£tCuºítTe°
(
Uã°
* 
ã°
);

122 
Uã°
* 
cuºítTe°_
;

123 
Te°Resu…
* 
ã°Resu…_
;

125 
	`ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
);

130 ˛as†
	cNuŒTe°
: 
public
 
Uã°


132 
public
:

133 
ex∂icô
 
	`NuŒTe°
();

134 
ex∂icô
 
	`NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
);

135 
vútuÆ
 ~
	`NuŒTe°
();

137 
	$ã°Body
()

141 
NuŒTe°
& 
	`ö°™˚
();

143 
vútuÆ
 
	`cou¡Te°s
();

144 
vútuÆ
 
Uã°
*
	$gëNext
() const;

145 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

146 
¥iv©e
:

148 
	`NuŒTe°
(c⁄° 
NuŒTe°
&);

149 
NuŒTe°
& 
›î©‹
=(const NullTest&);

151 
	}
};

155 ˛as†
	cExecFun˘i⁄Te°
: 
public
 
Uã°


157 
public
:

158 (*
£tup_
)();

159 (*
	mã¨down_
)();

160 (*
	mã°Fun˘i⁄_
)();

161 
ExecFun˘i⁄Te°
((*
£t
)(Ë0, (*
ã¨
)() = 0) :

162 
Uã°
("Gíîic", "Gíîic", "Gíîic", 1), 
£tup_
(
£t
), 
ã¨down_
(

163 
ã¨
), 
	$ã°Fun˘i⁄_
(0)

166 
	$ã°Body
()

168 i‡(
ã°Fun˘i⁄_
Ë
	`ã°Fun˘i⁄_
();

169 
	}
}

170 
vútuÆ
 
	$£tup
()

172 i‡(
£tup_
Ë
	`£tup_
();

173 
	}
}

174 
vútuÆ
 
	$ã¨down
()

176 i‡(
ã¨down_
Ë
	`ã¨down_
();

177 
	}
}

182 ˛as†
	cTe°In°ÆÀr


184 
	mpublic
:

185 
ex∂icô
 
Te°In°ÆÀr
(
Uã°
*, c⁄° * 
groupName
, c⁄° * 
ã°Name
,

186 c⁄° * 
fûeName
, 
löeNumbî
);

187 
	mvútuÆ
 ~
Te°In°ÆÀr
();

189 
unDo
();

191 
	m¥iv©e
:

193 
Te°In°ÆÀr
(const TestInstaller&);

194 
	mTe°In°ÆÀr
& 
	m›î©‹
=(c⁄° 
Te°In°ÆÀr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\UtestMacros.h

28 #i‚de‡
D_UTe°Ma¸os_h


29 
	#D_UTe°Ma¸os_h


	)

40 
	#TEST_GROUP_BASE
(
ã°Group
, 
ba£˛ass
) \

41 
exã∫Te°Group
##
ã°Group
 = 0; \

42 
TEST_GROUP_
##
CµUTe°Group
##
ã°Group
 : 
public
 
ba£˛ass


	)

44 
	#TEST_BASE
(
ã°Ba£Cœss
) \

45 
ã°Ba£Cœss
 : 
public
 
Uã°


	)

47 
	#TEST_GROUP
(
ã°Group
) \

48 
	`TEST_GROUP_BASE
(
ã°Group
, 
Uã°
)

	)

50 
	#TEST_SETUP
() \

51 
vútuÆ
 
	`£tup
()

	)

53 
	#TEST_TEARDOWN
() \

54 
vútuÆ
 
	`ã¨down
()

	)

56 
	#TEST
(
ã°Group
, 
ã°Name
) \

57 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

58 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

59 
	`ã°Body
(); } \

60 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

61 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

62 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

64 
	#IGNORE_TEST
(
ã°Group
, 
ã°Name
)\

65 
˛ass
 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

66 { 
public
: 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

67 
vútuÆ
 
	`run
 (
Te°Resu…
& 
ªsu…_∑ømëî
) { \

68 
ªsu…_∑ømëî
.
	`cou¡Ign‹ed
(); } \

69 
vútuÆ
 c⁄° * 
	`gëProgªssIndiˇt‹
() const { "!";} \

70 
¥Ÿe˘ed
: 
vútuÆ
 
Sim∂eSåög
 
	`gëMa¸oName
() const \

72 
public
: 
	`ã°BodyTh©NevîRuns
 (); } \

73 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

74 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##
_
##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

75 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°BodyTh©NevîRuns
 ()

	)

77 
	#IMPORT_TEST_GROUP
(
ã°Group
) \

78 
exã∫Te°Group
##
ã°Group
;\

79 * 
p
##
ã°Group
 = &
exã∫Te°Group
##
	)
testGroup

83 
	#CHECK
(
c⁄dôi⁄
)\

84 
	`CHECK_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
, 
__LINE__
)

	)

86 
	#CHECK_LOCATION
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)\

87 { 
Uã°
::
	`gëCuºít
()->
	`as£πTrue
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
); }

	)

90 
	#CHECK_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

91 
	`CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

93 
	#CHECK_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

94 i‡((
ex≥˘ed
Ë!(
a˘uÆ
))\

97 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();\

98 
CheckEquÆFaûuª
 
	`_f
(
Uã°
::
	`gëCuºít
(), 
fûe
, 
löe
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)); \

99 
Uã°
::
	`gëTe°Resu…
()->
	`addFaûuª
(
_f
);\

101 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
(); \

104 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();

	)

108 
	#STRCMP_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

109 
	`STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

111 
	#STRCMP_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

112 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

114 
	#STRCMP_NOCASE_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

115 
	`STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

117 
	#STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

118 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£EquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

120 
	#STRCMP_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

121 
	`STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

123 
	#STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

124 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rC⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

126 
	#STRCMP_NOCASE_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

127 
	`STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

129 
	#STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

130 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£C⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

133 
	#LONGS_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

134 
	`LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
, 
__LINE__
)

	)

136 
	#LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

137 { 
Uã°
::
	`gëCuºít
()->
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

139 
	#BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

140 
	`LONGS_EQUAL
((
ex≥˘ed
Ë& 0xff,(
a˘uÆ
Ë& 0xff)

	)

142 
	#POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

143 
	`POINTERS_EQUAL_LOCATION
((
ex≥˘ed
),(
a˘uÆ
), 
__FILE__
, 
__LINE__
)

	)

145 
	#POINTERS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

146 { 
Uã°
::
	`gëCuºít
()->
	`as£πPoöãrsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

149 
	#DOUBLES_EQUAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
)\

150 
	`DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

152 
	#DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
fûe
,
löe
)\

153 { 
Uã°
::
	`gëCuºít
()->
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûe
, 
löe
); }

	)

157 #i‚de‡
FAIL


158 
	#FAIL
(
ãxt
)\

159 
	`FAIL_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

161 
	#FAIL_LOCATION
(
ãxt
, 
fûe
, 
löe
)\

162 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

165 #i‚de‡
SUCCESS


166 
	#SUCCESS
(Ë
	`CHECK
(1)

	)

169 
	#FAIL_TEST
(
ãxt
)\

170 
	`FAIL_TEST_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

172 
	#FAIL_TEST_LOCATION
(
ãxt
, 
fûe
,
löe
)\

173 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

175 
	#UT_PRINT_LOCATION
(
ãxt
, 
fûe
, 
löe
) \

176 { 
Uã°
::
	`gëCuºít
()->
	`¥öt
(
ãxt
, 
fûe
, 
löe
); }

	)

178 
	#UT_PRINT
(
ãxt
) \

179 
	`UT_PRINT_LOCATION
(
ãxt
, 
__FILE__
, 
__LINE__
)

	)

181 
	#UT_CRASH
(Ë{ 
	`UT_PRINT
("GoögÅÿ¸ash hîe\n"); 
Uã°
* 
±r
 = (Uã°*Ë0x0;Öå->
	`cou¡Te°s
(); }

	)

182 
	#RUN_ALL_TESTS
(
ac
, 
av
Ë
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
◊c,áv)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\VirtualCall.h

1 #i‚de‡
D_VútuÆCÆl_H


2 
	#D_VútuÆCÆl_H


	)

4 
	#£nd
(
obj
,
msg
)\

5 ((
obj
)->
	`msg
(obj))

	)

7 
	#£nd1
(
obj
,
msg
,
¨g0
)\

8 ((
obj
)->
	`msg
((obj),(
¨g0
)))

	)

10 
	#£nd2
(
obj
,
msg
,
¨g0
,
¨g1
)\

11 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
)))

	)

13 
	#£nd3
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
)\

14 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
)))

	)

16 
	#£nd4
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
,
¨g3
)\

17 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
),(
¨g3
)))

	)

19 
	#vBöd
(
obj
,
msg
,
√wMëhod
)\

20 (
obj
->
msg
=&
√wMëhod
)

	)

22 
	#ˇ°ToDe°royî
(
Cœss
Ë(Cœss* (*)(Cœss*))

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\Gcc\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\StarterKit\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\Symbian\Platform.h

2 #i‚de‡
PLATFORM_H_


3 
	#PLATFORM_H_


	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\VisualCpp\Platform.h

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4786)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\VisualCpp\stdint.h

20 #i‚de‡
_STDINT_H


21 
	#_STDINT_H


	)

22 
	#__√ed_wöt_t


	)

23 
	#__√ed_wch¨_t


	)

24 
	~<°ddef.h
>

27 sig√d 
	töt8_t
;

28 
	tuöt8_t
;

29 
	töt16_t
;

30 
	tuöt16_t
;

31 
	töt32_t
;

32 
	tuöt32_t
;

37 sig√d 
	töt_Àa°8_t
;

38 
	tuöt_Àa°8_t
;

39 
	töt_Àa°16_t
;

40 
	tuöt_Àa°16_t
;

41 
	töt_Àa°32_t
;

42 
	tuöt_Àa°32_t
;

50 sig√d 
	töt_Á°8_t
;

51 
	tuöt_Á°8_t
;

52 
	töt_Á°16_t
;

53 
	tuöt_Á°16_t
;

54 
	töt_Á°32_t
;

55 
	tuöt_Á°32_t
;

61 #i‚de‡
_INTPTR_T_DEFINED


62 
	#_INTPTR_T_DEFINED


	)

63 #ifde‡
_WIN64


64 
__öt64
 
	töçå_t
;

66 
	töçå_t
;

70 #i‚de‡
_UINTPTR_T_DEFINED


71 
	#_UINTPTR_T_DEFINED


	)

72 #ifde‡
_WIN64


73 
	t__öt64
 
	tuöçå_t
;

75 
	tuöçå_t
;

84 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_LIMIT_MACROS
)

87 
	#INT8_MIN
 (-128)

	)

88 
	#INT16_MIN
 (-32768)

	)

89 
	#INT32_MIN
 (-2147483647 - 1)

	)

90 
	#INT64_MIN
 (-9223372036854775807LL - 1)

	)

92 
	#INT8_MAX
 127

	)

93 
	#INT16_MAX
 32767

	)

94 
	#INT32_MAX
 2147483647

	)

95 
	#INT64_MAX
 9223372036854775807LL

	)

97 
	#UINT8_MAX
 0xf‡

	)

98 
	#UINT16_MAX
 0xfff‡

	)

99 
	#UINT32_MAX
 0xfffffff‡

	)

100 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

108 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

109 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

110 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

111 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

113 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

114 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

115 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

116 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

119 
	#INT_FAST8_MIN
 
INT8_MIN


	)

120 
	#INT_FAST16_MIN
 
INT16_MIN


	)

121 
	#INT_FAST32_MIN
 
INT32_MIN


	)

122 
	#INT_FAST64_MIN
 
INT64_MIN


	)

124 
	#INT_FAST8_MAX
 
INT8_MAX


	)

125 
	#INT_FAST16_MAX
 
INT16_MAX


	)

126 
	#INT_FAST32_MAX
 
INT32_MAX


	)

127 
	#INT_FAST64_MAX
 
INT64_MAX


	)

129 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

130 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

131 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

132 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

136 #ifde‡
_WIN64


137 
	#INTPTR_MIN
 
INT64_MIN


	)

138 
	#INTPTR_MAX
 
INT64_MAX


	)

139 
	#UINTPTR_MAX
 
UINT64_MAX


	)

141 
	#INTPTR_MIN
 
INT32_MIN


	)

142 
	#INTPTR_MAX
 
INT32_MAX


	)

143 
	#UINTPTR_MAX
 
UINT32_MAX


	)

147 
	#INTMAX_MIN
 
INT64_MIN


	)

148 
	#INTMAX_MAX
 
INT64_MAX


	)

149 
	#UINTMAX_MAX
 
UINT64_MAX


	)

152 
	#PTRDIFF_MIN
 
INTPTR_MIN


	)

153 
	#PTRDIFF_MAX
 
INTPTR_MAX


	)

155 
	#SIG_ATOMIC_MIN
 
INTPTR_MIN


	)

156 
	#SIG_ATOMIC_MAX
 
INTPTR_MAX


	)

158 
	#SIZE_MAX
 
UINTPTR_MAX


	)

160 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 0

	)

162 
	#WCHAR_MAX
 0xfff‡

	)

168 
	#WINT_MIN
 0

	)

169 
	#WINT_MAX
 0xfff‡

	)

175 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_CONSTANT_MACROS
)

190 
	#INT8_C
(
vÆ
Ë
	)
val

191 
	#UINT8_C
(
vÆ
Ë
	)
val

192 
	#INT16_C
(
vÆ
Ë
	)
val

193 
	#UINT16_C
(
vÆ
Ë
	)
val

195 
	#INT32_C
(
vÆ
Ë
	)
val

196 
	#UINT32_C
(
vÆ
ËvÆ##
U


	)

197 
	#INT64_C
(
vÆ
ËvÆ##
LL


	)

198 
	#UINT64_C
(
vÆ
ËvÆ##
ULL


	)

201 
	#INTMAX_C
(
vÆ
Ë
	`INT64_C
(vÆ)

	)

202 
	#UINTMAX_C
(
vÆ
Ë
	`UINT64_C
(vÆ)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢ame
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

14 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	gÁkeR™
 = 0;

7 
	~"CœssName.h
"

8 
vútuÆFun˘i⁄_ª«meThis_Áke
(
CœssName
*)

10 
ÁkeR™
 = 1;

14 
	$TEST_GROUP
(
CœssName
)

16 
CœssName
* 
aCœssName
;

18 
	`£tup
()

20 
aCœssName
 = 
	`CœssName_Cª©e
();

21 
ÁkeR™
 = 0;

22 
aCœssName
->
vútuÆFun˘i⁄_ª«meThis
 = 
vútuÆFun˘i⁄_ª«meThis_Áke
;

25 
	`ã¨down
()

27 
	`CœssName_De°roy
(
aCœssName
);

29 
	}
};

31 
	$TEST
(
CœssName
, 
Fake
)

33 
aCœssName
->
	`vútuÆFun˘i⁄_ª«meThis
(aClassName);

34 
	`LONGS_EQUAL
(1, 
ÁkeR™
);

35 
	}
}

37 
	$TEST
(
CœssName
, 
Cª©e
)

39 
	`FAIL
("Start here");

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢amePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"CœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

5 ˛as†
	cCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


7 
CPPUNIT_TEST_SUITE
(
CœssNameTe°
);

8 
CPPUNIT_TEST
(
ã°Cª©e
);

9 
CPPUNIT_TEST_SUITE_END
();

11 
CœssName
* 
	maCœssName
;

13 
	mpublic
:

15 
	$£tUp
()

17 
aCœssName
 = 
√w
 
	`CœssName
();

20 
	$ã¨Down
()

22 
dñëe
 
aCœssName
;

23 
	}
}

25 
	$ã°Cª©e
()

27 
	`CPPUNIT_FAIL
("Start here");

28 
	}
}

31 
CPPUNIT_TEST_SUITE_REGISTRATION
(
CœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeCœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

4 
	~"MockCœssName.h
"

6 ˛as†
	cMockCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


8 
CPPUNIT_TEST_SUITE
(
MockCœssNameTe°
);

9 
CPPUNIT_TEST
(
ã°Cª©e
);

10 
CPPUNIT_TEST_SUITE_END
();

12 
CœssName
* 
	maCœssName
;

13 
MockCœssName
* 
	mmockCœssName
;

15 
	mpublic
:

17 
	$£tUp
()

19 
mockCœssName
 = 
√w
 
	`MockCœssName
();

20 
aCœssName
 = 
mockCœssName
;

23 
	$ã¨Down
()

25 
dñëe
 
aCœssName
;

26 
	}
}

28 
	$ã°Cª©e
()

30 
	`CPPUNIT_FAIL
("Start here");

31 
	}
}

34 
CPPUNIT_TEST_SUITE_REGISTRATION
(
MockCœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriver.c

1 
	~"CœssName.h
"

2 
	~"IO.h
"

6 
	$CœssName_Cª©e
()

8 
	}
}

10 
	$CœssName_De°roy
()

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriver.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
	~<°döt.h
>

11 
CœssName_Cª©e
();

12 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssName
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssNamePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameTest.cpp

1 
	~"CœssName.h
"

4 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	$TEST_GROUP
(
CœssName
)

8 
CœssName
* 
aCœssName
;

10 
	`£tup
()

12 
aCœssName
 = 
√w
 
	`CœssName
();

14 
	`ã¨down
()

16 
dñëe
 
aCœssName
;

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameC.c

1 
	~"CœssName.h
"

4 
	$CœssName
()

6 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\InterfaceTest.cpp

1 
	~"CœssName.h
"

2 
	~"MockCœssName.h
"

5 
	~"CµUTe°/Te°H¨√ss.h
"

7 
	$TEST_GROUP
(
CœssName
)

9 
CœssName
* 
aCœssName
;

10 
MockCœssName
* 
mockCœssName
;

12 
	`£tup
()

14 
mockCœssName
 = 
√w
 
	`MockCœssName
();

15 
aCœssName
 = 
mockCœssName
;

17 
	`ã¨down
()

19 
dñëe
 
aCœssName
;

21 
	}
};

23 
	$TEST
(
CœssName
, 
Cª©e
)

25 
	`FAIL
("Start here");

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	#MAX_VARIABLE_NAME_LINE_PART
 10

	)

35 
	#MAX_VARIABLE_NAME_FILE_PART
 53

	)

36 
	#MAX_VARIABLE_NAME_SEPERATOR_PART
 1

	)

37 
	#MAX_VARIABLE_NAME_LENGTH
 
MAX_VARIABLE_NAME_FILE_PART
 + 
MAX_VARIABLE_NAME_SEPERATOR_PART
 + 
MAX_VARIABLE_NAME_LINE_PART


	)

39 
	sCodeRï‹tögAŒoˇti⁄Node


41 
	mv¨übÀName_
[
MAX_VARIABLE_NAME_LENGTH
 + 1];

42 * 
	mmem‹y_
;

43 
CodeRï‹tögAŒoˇti⁄Node
* 
	m√xt_
;

46 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
)

47 : 
	`codeRï‹tögLi°_
(
NULL
), 
	$öã∫ÆAŒoˇt‹_
(
öã∫ÆAŒoˇt‹
)

49 
	}
}

51 
	gCodeMem‹yRï‹tF‹m©ãr
::~
	$CodeMem‹yRï‹tF‹m©ãr
()

53 
	`˛órRï‹tög
();

54 
	}
}

56 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$˛órRï‹tög
()

58 
codeRï‹tögLi°_
) {

59 
CodeRï‹tögAŒoˇti⁄Node
* 
ﬁdNode
 = 
codeRï‹tögLi°_
;

60 
codeRï‹tögLi°_
 = codeRï‹tögLi°_->
√xt_
;

61 
öã∫ÆAŒoˇt‹_
->
	`‰ì_mem‹y
((*Ë
ﬁdNode
, 
__FILE__
, 
__LINE__
);

63 
	}
}

65 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
)

67 
CodeRï‹tögAŒoˇti⁄Node
* 
√wNode
 = (CodeRï‹tögAŒoˇti⁄Node*Ë
öã∫ÆAŒoˇt‹_
->
	`Æloc_mem‹y
((CodeRï‹tögAŒoˇti⁄Node), 
__FILE__
, 
__LINE__
);

68 
√wNode
->
mem‹y_
 = 
mem‹y
;

69 
√wNode
->
√xt_
 = 
√xt
;

70 
	`Pœtf‹mS≥cificSåNCpy
(
√wNode
->
v¨übÀName_
, 
v¨übÀName
, 
MAX_VARIABLE_NAME_LENGTH
);

71 
codeRï‹tögLi°_
 = 
√wNode
;

72 
	}
}

74 
CodeRï‹tögAŒoˇti⁄Node
* 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$födNode
(* 
mem‹y
)

77 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

78 
cuºít
 && cuºít->
mem‹y_
 !
mem‹y
) {

79 
cuºít
 = cuºít->
√xt_
;

81  
cuºít
;

82 
	}
}

84 
Sim∂eSåög
 
	$exåa˘FûeNameFromP©h
(c⁄° * 
fûe
)

86 c⁄° * 
fûeNameO∆y
 = 
fûe
 + 
	`Pœtf‹mS≥cificSåLí
(file);

87 
fûeNameO∆y
 !
fûe
 && *fileNameOnly != '/')

88 
fûeNameO∆y
--;

89 i‡(*
fûeNameO∆y
 == '/') fileNameOnly++;

90  
fûeNameO∆y
;

91 
	}
}

93 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
)

95 
Sim∂eSåög
 
fûeNameO∆y
 = 
	`exåa˘FûeNameFromP©h
(
fûe
);

96 
fûeNameO∆y
.
	`ª∂a˚
(".", "_");

98 
i
 = 1; i < 100000; i++) {

99 
Sim∂eSåög
 
v¨übÀName
 = 
	`SåögFromF‹m©
("%s_%d_%d", 
fûeNameO∆y
.
	`asCh¨Såög
(), 
löe
, 
i
);

100 i‡(!
	`v¨übÀExi°s
(
v¨übÀName
))

101  
v¨übÀName
;

104 
	}
}

106 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

108  
	`Pœtf‹mS≥cificSåCmp
(
Æloˇt‹
->
	`Æloc_«me
(), 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
()->Æloc_«me()Ë=0 || Pœtf‹mS≥cificSåCmp◊Œoˇt‹->Æloc_«me(), 
Sènd¨dNewAºayAŒoˇt‹
::defaultAllocator()->alloc_name()) == 0;

109 
	}
}

111 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
)

113 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

114 
cuºít
) {

115 i‡(
v¨übÀName
 =
cuºít
->
v¨übÀName_
)

116  
åue
;

117 
cuºít
 = cuºít->
√xt_
;

119  
Ál£
;

120 
	}
}

122 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, 
size_t
 
size
)

124 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

125  
	`SåögFromF‹m©
("ch¨* %†√w ch¨[%d]; /* usög %†*/", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
, 
Æloˇt‹
->
	`Æloc_«me
());

127  
	`SåögFromF‹m©
("void* %†mÆloc(%d);", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
);

128 
	}
}

130 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
)

132 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

133  
	`SåögFromF‹m©
("dñëê[] %s; /* usög %†© %s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
Æloˇt‹
->
	`‰ì_«me
(), 
fûe
, 
löe
);

135  
	`SåögFromF‹m©
("‰ì(%s); /*áà%s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

136 
	}
}

138 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

140 
	`˛órRï‹tög
();

141 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/\nTEST(%s_memoryReport, %s)\n{ /*át %s:%d */\n",

142 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCh¨Såög(),Åe°.
	`gëFûe
().asCh¨Såög(),Åe°.
	`gëLöeNumbî
()).asCharString());

143 
	}
}

145 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
&)

147 
ªsu…
->
	`¥öt
("}/*");

148 
	}
}

150 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

152 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/TEST_GROUP(%s_memoryReport)\n{\n};\n/*",

153 
ã°
.
	`gëGroup
().
	`asCh¨Såög
()).asCharString());

154 
	}
}

156 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

158 
Sim∂eSåög
 
v¨übÀName
 = 
	`¸óãV¨übÀNameFromFûeLöeInfo
(
fûe
, 
löe
);

159 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëAŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
size
).
	`asCh¨Såög
()).asCharString());

160 
	`addNodeToLi°
(
v¨übÀName
.
	`asCh¨Såög
(), 
mem‹y
, 
codeRï‹tögLi°_
);

161 
	}
}

163 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

165 
Sim∂eSåög
 
v¨übÀName
;

166 
CodeRï‹tögAŒoˇti⁄Node
* 
node
 = 
	`födNode
(
mem‹y
);

168 i‡(
mem‹y
 =
NULL
Ë
v¨übÀName
 = "NULL";

169 
v¨übÀName
 = 
node
->
v¨übÀName_
;

171 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëDóŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
fûe
, 
löe
).
	`asCh¨Såög
()).asCharString());

172 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gMem‹yRï‹tAŒoˇt‹
::
	$Mem‹yRï‹tAŒoˇt‹
(Ë: 
	`ªsu…_
(
NULL
), 
	`ªÆAŒoˇt‹_
(NULL), 
	$f‹m©ãr_
(
NULL
)

34 
	}
}

36 
	gMem‹yRï‹tAŒoˇt‹
::~
	$Mem‹yRï‹tAŒoˇt‹
()

38 
	}
}

40 c⁄° * 
Mem‹yRï‹tAŒoˇt‹
::
	$«me
()

42  
ªÆAŒoˇt‹_
->
	`«me
();

43 
	}
}

45 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_«me
()

47  
ªÆAŒoˇt‹_
->
	`Æloc_«me
();

48 
	}
}

50 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_«me
()

52  
ªÆAŒoˇt‹_
->
	`‰ì_«me
();

53 
	}
}

55 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

57 
ªÆAŒoˇt‹_
 = 
Æloˇt‹
;

58 
	}
}

60 
boﬁ
 
	gMem‹yRï‹tAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

62  
ªÆAŒoˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

63 
	}
}

65 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yRï‹tAŒoˇt‹
::
	$gëRólAŒoˇt‹
()

67  
ªÆAŒoˇt‹_
;

68 
	}
}

70 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

72 
ªsu…_
 = 
ªsu…
;

73 
	}
}

75 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

77 
f‹m©ãr_
 = 
f‹m©ãr
;

78 
	}
}

80 * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

82 * 
mem‹y
 = 
ªÆAŒoˇt‹_
->
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

83 i‡(
ªsu…_
 && 
f‹m©ãr_
)

84 
f‹m©ãr_
->
	`ªp‹t_Æloc_mem‹y
(
ªsu…_
, 
this
, 
size
, 
mem‹y
, 
fûe
, 
löe
);

85  
mem‹y
;

86 
	}
}

88 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

90 
ªÆAŒoˇt‹_
->
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 i‡(
ªsu…_
 && 
f‹m©ãr_
)

92 
f‹m©ãr_
->
	`ªp‹t_‰ì_mem‹y
(
ªsu…_
, 
this
, 
mem‹y
, 
fûe
, 
löe
);

93 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

34 
	}
}

36 
N‹mÆMem‹yRï‹tF‹m©ãr
::~
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

38 
	}
}

40 
N‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

42 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("TEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

43 
	}
}

45 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

47 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("ENDTEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

48 
	}
}

50 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

52 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög %†o‡size: %dÖoöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`Æloc_«me
(), 
size
, 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

53 
	}
}

55 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

57 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög %†o‡poöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`‰ì_«me
(), 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

58 
	}
}

60 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

62 c⁄° 
size_t
 
löe_size
 = 80;

64 
Sim∂eSåög
 
groupName
 = 
	`SåögFromF‹m©
("TEST GROUP(%s)", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
());

65 
size_t
 
begöPos
 = (
löe_size
/2Ë- (
groupName
.
	`size
()/2);

67 
Sim∂eSåög
 
	`löe
("-", 
begöPos
);

68 
löe
 +
groupName
;

69 
löe
 +
	`Sim∂eSåög
("-", 
löe_size
 -Üöe.
	`size
());

70 
löe
 += "\n";

71 
ªsu…
->
	`¥öt
(
löe
.
	`asCh¨Såög
());

72 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	gMem‹yRï‹ãrPlugö
::
	$Mem‹yRï‹ãrPlugö
()

34 : 
	`Te°Plugö
("Mem‹yRï‹ãrPlugö"), 
	$f‹m©ãr_
(
NULL
)

36 
	}
}

38 
	gMem‹yRï‹ãrPlugö
::~
	$Mem‹yRï‹ãrPlugö
()

40 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

41 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

42 
	}
}

44 
boﬁ
 
	gMem‹yRï‹ãrPlugö
::
	$∑r£Argumíts
(, c⁄° ** 
av
, 
ödex
)

46 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

47 i‡(
¨gumít
.
	`c⁄èös
("-pmemoryreport=")) {

48 
¨gumít
.
	`ª∂a˚
("-pmemoryreport=", "");

50 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

51 
f‹m©ãr_
 = 
	`¸óãMem‹yF‹m©ãr
(
¨gumít
);

52  
åue
;

54  
Ál£
;

55 
	}
}

57 
Mem‹yRï‹tF‹m©ãr
* 
	gMem‹yRï‹ãrPlugö
::
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

59 i‡(
ty≥
 == "normal") {

60  
√w
 
N‹mÆMem‹yRï‹tF‹m©ãr
;

62 i‡(
ty≥
 == "code") {

63  
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

65  
NULL
;

66 
	}
}

68 
	gMem‹yRï‹ãrPlugö
::
	$de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

70 
dñëe
 
f‹m©ãr
;

71 
	}
}

74 
	gMem‹yRï‹ãrPlugö
::
	$£tGlobÆMem‹yRï‹tAŒoˇt‹s
()

76 
mÆlocAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

77 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(&
mÆlocAŒoˇt‹
);

79 
√wAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

80 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(&
√wAŒoˇt‹
);

82 
√wAºayAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

83 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(&
√wAºayAŒoˇt‹
);

84 
	}
}

86 
	gMem‹yRï‹ãrPlugö
::
	$ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
()

88 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(Ë=&
√wAŒoˇt‹
)

89 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

91 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(Ë=&
√wAºayAŒoˇt‹
)

92 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
√wAºayAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

94 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
(Ë=&
mÆlocAŒoˇt‹
)

95 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
mÆlocAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

96 
	}
}

99 
	gMem‹yRï‹ãrPlugö
::
	$öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
)

101 
Æloˇt‹
->
	`£tF‹m©ãr
(
f‹m©ãr_
);

102 
Æloˇt‹
->
	`£tTe°Resu…
((&
ªsu…
));

103 
	}
}

105 
	gMem‹yRï‹ãrPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

107 i‡(
f‹m©ãr_
 =
NULL
) ;

109 
	`öôülizeAŒoˇt‹
(&
mÆlocAŒoˇt‹
, 
ªsu…
);

110 
	`öôülizeAŒoˇt‹
(&
√wAŒoˇt‹
, 
ªsu…
);

111 
	`öôülizeAŒoˇt‹
(&
√wAºayAŒoˇt‹
, 
ªsu…
);

113 
	`£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

115 i‡(
ã°
.
	`gëGroup
(Ë!
cuºítTe°Group_
) {

116 
f‹m©ãr_
->
	`ªp‹t_ã°group_°¨t
(&
ªsu…
, 
ã°
);

117 
cuºítTe°Group_
 = 
ã°
.
	`gëGroup
();

120 
f‹m©ãr_
->
	`ªp‹t_ã°_°¨t
(&
ªsu…
, 
ã°
);

121 
	}
}

123 
	gMem‹yRï‹ãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

125 i‡(
f‹m©ãr_
 =
NULL
) ;

127 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

128 
f‹m©ãr_
->
	`ªp‹t_ã°_íd
(&
ªsu…
, 
ã°
);

130 i‡(
ã°
.
	`gëNext
()->
	`gëGroup
(Ë!
cuºítTe°Group_
)

131 
f‹m©ãr_
->
	`ªp‹t_ã°group_íd
(&
ªsu…
, 
ã°
);

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	gMockA˘uÆFun˘i⁄CÆl
::
	$MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s
)

35 : 
	`ªp‹ãr_
(
ªp‹ãr
), 
	`°©e_
(
CALL_SUCCEED
), 
	$ÆlEx≥˘©i⁄s_
(
ÆlEx≥˘©i⁄s
)

37 
unfulfûÀdEx≥˘©i⁄s_
.
	`addUnfûfûÀdEx≥˘©i⁄s
(
ÆlEx≥˘©i⁄s
);

38 
	}
}

40 
	gMockA˘uÆFun˘i⁄CÆl
::~
	$MockA˘uÆFun˘i⁄CÆl
()

42 
	}
}

44 
MockA˘uÆFun˘i⁄CÆl
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

46 
ªp‹ãr_
 = 
ªp‹ãr
;

47 
	}
}

50 
Uã°
* 
	gMockA˘uÆFun˘i⁄CÆl
::
	$gëTe°
() const

52  
ªp‹ãr_
->
	`gëTe°ToFaû
();

53 
	}
}

55 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

57 
	`£tSèã
(
CALL_FAILED
);

58 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

59 
	}
}

61 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ˇŒHasSuc˚eded
()

63 
	`£tSèã
(
CALL_SUCCEED
);

64 
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

65 
unfulfûÀdEx≥˘©i⁄s_
.
	`ª£tEx≥˘©i⁄s
();

66 
	}
}

68 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

70 
	`£tName
(
«me
);

71 
	`£tSèã
(
CALL_IN_PROGESS
);

73 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(
«me
);

74 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

75 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
«me
, 
ÆlEx≥˘©i⁄s_
);

76 
	`ÁûTe°
(
Áûuª
);

77  *
this
;

80 
unfulfûÀdEx≥˘©i⁄s_
.
	`ˇŒWasMade
();

82 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

83 
	`ˇŒHasSuc˚eded
();

85  *
this
;

86 
	}
}

88 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
)

90 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
a˘uÆP¨amëî
);

92 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

93 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
a˘uÆP¨amëî
, 
ÆlEx≥˘©i⁄s_
);

94 
	`ÁûTe°
(
Áûuª
);

98 
unfulfûÀdEx≥˘©i⁄s_
.
	`∑ømëîWasPas£d
(
a˘uÆP¨amëî
.
	`gëName
());

99 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

100 
	`ˇŒHasSuc˚eded
();

101 
	}
}

103 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

105 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

106 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

107 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

108  *
this
;

109 
	}
}

111 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

113 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

114 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

115 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

116  *
this
;

117 
	}
}

119 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

121 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

122 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

123 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

124  *
this
;

125 
	}
}

127 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

129 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

130 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

131 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

132  *
this
;

133 
	}
}

135 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

137 i‡(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
Ë=
NULL
) {

138 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
ty≥
);

139 
	`ÁûTe°
(
Áûuª
);

140  *
this
;

142 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

143 
a˘uÆP¨amëî
.
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

144 
a˘uÆP¨amëî
.
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

145 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

146  *
this
;

147 
	}
}

149 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$isFulfûÀd
() const

151  
°©e_
 =
CALL_SUCCEED
;

152 
	}
}

154 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasFaûed
() const

156  
°©e_
 =
CALL_FAILED
;

157 
	}
}

159 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkEx≥˘©i⁄s
()

161 i‡(
°©e_
 !
CALL_IN_PROGESS
) ;

163 i‡(! 
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
())

164 
	`FAIL
("Actual call is inÖrogress. CheckingÉxpectations. ButÇo unfulfilledÉxpectations. Cannot happen.")

166 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
()) {

167 
	`ˇŒHasSuc˚eded
();

171 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
()) {

172 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

173 
	`ÁûTe°
(
Áûuª
);

176 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

177 
	`ÁûTe°
(
Áûuª
);

179 
	}
}

181 c⁄° * 
	gMockA˘uÆFun˘i⁄CÆl
::
	$°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
)

183 
°©e
) {

184 
CALL_IN_PROGESS
:  "InÖrogress";

185 
CALL_FAILED
:  "Failed";

186 
CALL_SUCCEED
:  "Succeed";

190 
	}
}

192 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
)

194 i‡(
ﬁdSèã
 =
√wSèã
)

195 
	`FAIL
(
	`SåögFromF‹m©
("Sèã ch™gêtÿthêßmê°©e: %s.", 
	`°rögFromSèã
(
√wSèã
)).
	`asCh¨Såög
());

196 i‡(
ﬁdSèã
 =
CALL_FAILED
)

197 
	`FAIL
("State wasálready failed. Cannot change stateágain.");

198 
	}
}

200 
	gMockA˘uÆFun˘i⁄CÆl
::
	$£tSèã
(
A˘uÆCÆlSèã
 
°©e
)

202 
	`checkSèãC⁄si°ícy
(
°©e_
, 
°©e
);

203 
°©e_
 = 
°©e
;

204 
	}
}

206 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

208 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

209  *
this
;

210 
	}
}

212 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(const *)

214 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

215  *
this
;

216 
	}
}

218 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

220 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

221  *
this
;

222 
	}
}

224 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(*)

226 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

227  *
this
;

228 
	}
}

230 
MockNamedVÆue
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

232 i‡(
ÆlEx≥˘©i⁄s_
.
	`hasDu∂iˇãRëu∫VÆueF‹
(
	`gëName
())) {

233 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
());

234 
	`ÁûTe°
(
Áûuª
);

235  
	`MockNamedVÆue
("");

237  
ÆlEx≥˘©i⁄s_
.
	`ªtu∫VÆueF‹Fun˘i⁄
(
	`gëName
());

238 
	}
}

240 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

242  ! 
	`ªtu∫VÆue
().
	`gëName
().
	`isEm±y
();

243 
	}
}

245 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

247 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(
obje˘På
);

249 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

250 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
obje˘På
, 
ÆlEx≥˘©i⁄s_
);

251 
	`ÁûTe°
(
Áûuª
);

252  *
this
;

255 
unfulfûÀdEx≥˘©i⁄s_
.
	`wasPas£dToObje˘
();

257 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

258 
	`ˇŒHasSuc˚eded
();

259  *
this
;

260 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

33  
∑ømëî
.
	`toSåög
();

34 
	}
}

36 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$MockEx≥˘edFun˘i⁄CÆl
()

37 : 
	`ign‹eOthîP¨amëîs_
(
Ál£
), 
	`∑ømëîsWîeIgn‹ed_
(Ál£), 
	`wasCÆlMade_
(
åue
), 
	`ªtu∫VÆue_
(""), 
	`obje˘På_
(
NULL
), 
	$wasPas£dToObje˘_
(
åue
)

39 
∑ømëîs_
 = 
√w
 
	`MockNamedVÆueLi°
();

40 
	}
}

42 
	gMockEx≥˘edFun˘i⁄CÆl
::~
	$MockEx≥˘edFun˘i⁄CÆl
()

44 
∑ømëîs_
->
	`˛ór
();

45 
dñëe
 
∑ømëîs_
;

46 
	}
}

48 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

50 
	`£tName
(
«me
);

51 
wasCÆlMade_
 = 
Ál£
;

52  *
this
;

53 
	}
}

55 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

57 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

58 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

59 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

60  *
this
;

61 
	}
}

63 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

65 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

66 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

67 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

68  *
this
;

69 
	}
}

71 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

73 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

74 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

75 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

76  *
this
;

77 
	}
}

79 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

81 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

82 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

83 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

84  *
this
;

85 
	}
}

87 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

89 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

90 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

91 
√wP¨amëî
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

92 
√wP¨amëî
->
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

93  *
this
;

94 
	}
}

96 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîTy≥
(c⁄° 
Sim∂eSåög
& 
«me
)

98 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

99  (
p
Ë?Ö->
	`gëTy≥
() : "";

100 
	}
}

102 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

104 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

105  
p
 !
NULL
;

106 
	}
}

108 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

110 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

111  (
p
Ë? *∞: 
	`MockNamedVÆue
("");

112 
	}
}

114 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eP¨amëîsFulfûÀd
()

116 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

117 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
())

118  
Ál£
;

119  
åue
;

120 
	}
}

122 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eIgn‹edP¨amëîsFulfûÀd
()

124 i‡(
ign‹eOthîP¨amëîs_
)

125  
∑ømëîsWîeIgn‹ed_
;

126  
åue
;

127 
	}
}

129 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ign‹eOthîP¨amëîs
()

131 
ign‹eOthîP¨amëîs_
 = 
åue
;

132 
	}
}

134 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀd
()

136  
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
(Ë&& 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

137 
	}
}

139 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀdWôhoutIgn‹edP¨amëîs
()

141  
wasCÆlMade_
 && 
	`¨eP¨amëîsFulfûÀd
(Ë&& 
wasPas£dToObje˘_
;

142 
	}
}

145 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒWasMade
()

147 
wasCÆlMade_
 = 
åue
;

148 
	}
}

150 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîsWîeIgn‹ed
()

152 
∑ømëîsWîeIgn‹ed_
 = 
åue
;

153 
	}
}

156 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wasPas£dToObje˘
()

158 
wasPas£dToObje˘_
 = 
åue
;

159 
	}
}

161 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ª£tEx≥˘©i⁄
()

163 
wasCÆlMade_
 = 
Ál£
;

164 
wasPas£dToObje˘_
 = (
obje˘På_
 =
NULL
);

165 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

166 
	`ôem
(
p
)->
	`£tFulfûÀd
(
Ál£
);

167 
	}
}

169 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
)

171 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

172 i‡(
p
->
	`gëName
(Ë=
«me
)

173 
	`ôem
(
p
)->
	`£tFulfûÀd
(
åue
);

175 
	}
}

177 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîVÆueSåög
(c⁄° 
Sim∂eSåög
& 
«me
)

179 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

180  (
p
Ë? 
	`SåögFrom
(*p) : "failed";

181 
	}
}

183 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

185 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
∑ømëî
.
	`gëName
());

186  (
p
Ë?Ö->
	`equÆs
(
∑ømëî
Ë: 
ign‹eOthîP¨amëîs_
;

187 
	}
}

189 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒToSåög
()

191 
Sim∂eSåög
 
°r
;

192 i‡(
obje˘På_
)

193 
°r
 = 
	`SåögFromF‹m©
("(obje˘áddªss: %p)::", 
obje˘På_
);

195 
°r
 +
	`gëName
();

196 
°r
 += " -> ";

197 i‡(
∑ømëîs_
->
	`begö
(Ë=
NULL
) {

198 
°r
 +(
ign‹eOthîP¨amëîs_
) ? "allÖarameters ignored" : "noÖarameters";

199  
°r
;

202 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

203 
°r
 +
	`SåögFromF‹m©
("%†%s: <%s>", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCh¨Såög(), 
	`gëP¨amëîVÆueSåög
(p->getName()).asCharString());

204 i‡(
p
->
	`√xt
()Ë
°r
 += ", ";

206 i‡(
ign‹eOthîP¨amëîs_
)

207 
°r
 += ", otherÖarametersáre ignored";

208  
°r
;

209 
	}
}

211 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$missögP¨amëîsToSåög
()

213 
Sim∂eSåög
 
°r
;

214 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

215 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
()) {

216 i‡(
°r
 != "") str += ", ";

217 
°r
 +
	`SåögFromF‹m©
("%†%s", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCharString());

220  
°r
;

221 
	}
}

223 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

225  
fun˘i⁄Name
 =
	`gëName
();

226 
	}
}

228 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsToObje˘
(*
obje˘På
) const

230  
obje˘På_
 =
obje˘På
;

231 
	}
}

233 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
* 
MockEx≥˘edFun˘i⁄CÆl
::
	$ôem
(
MockNamedVÆueLi°Node
* 
node
)

235  (
MockEx≥˘edFun˘i⁄P¨amëî
*Ë
node
->
	`ôem
();

236 
	}
}

238 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

239 : 
	`MockNamedVÆue
(
«me
), 
	$fulfûÀd_
(
Ál£
)

241 
	}
}

243 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$£tFulfûÀd
(
boﬁ
 
b
)

245 
fulfûÀd_
 = 
b
;

246 
	}
}

248 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$isFulfûÀd
() const

250  
fulfûÀd_
;

251 
	}
}

253 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

255 
ªtu∫VÆue_
.
	`£tName
("returnValue");

256 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

257  *
this
;

258 
	}
}

260 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

262 
ªtu∫VÆue_
.
	`£tName
("returnValue");

263 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

264  *
this
;

265 
	}
}

267 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

269 
ªtu∫VÆue_
.
	`£tName
("returnValue");

270 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

271  *
this
;

272 
	}
}

274 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(* 
vÆue
)

276 
ªtu∫VÆue_
.
	`£tName
("returnValue");

277 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

278  *
this
;

279 
	}
}

281 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

283 
wasPas£dToObje˘_
 = 
Ál£
;

284 
obje˘På_
 = 
obje˘På
;

285  *
this
;

286 
	}
}

288 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

290  ! 
ªtu∫VÆue_
.
	`gëName
().
	`isEm±y
();

291 
	}
}

293 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

295  
ªtu∫VÆue_
;

296 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$MockEx≥˘edFun˘i⁄sLi°
(Ë: 
	$hód_
(
NULL
)

34 
	}
}

36 
MockEx≥˘edFun˘i⁄sLi°
::~
	$MockEx≥˘edFun˘i⁄sLi°
()

38 
hód_
) {

39 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

40 
dñëe
 
hód_
;

41 
hód_
 = 
√xt
;

43 
	}
}

45 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$size
() const

47 
cou¡
 = 0;

48 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

49 
cou¡
++;

50  
cou¡
;

51 
	}
}

53 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$isEm±y
() const

55  
	`size
() == 0;

56 
	}
}

59 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const

61 
cou¡
 = 0;

62 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

63 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
)Ë
cou¡
++;

64  
cou¡
;

66 
	}
}

68 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const

70 
cou¡
 = 0;

71 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

72 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()Ë
cou¡
++;

73  
cou¡
;

74 
	}
}

76 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasFulfûÀdEx≥˘©i⁄s
() const

78  (
	`size
(Ë- 
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
()) != 0;

79 
	}
}

81 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const

83  
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
() != 0;

84 
	}
}

86 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

89 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

90  
åue
;

91  
Ál£
;

92 
	}
}

94 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
)

96 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√wCÆl
 = 
√w
 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
ˇŒ
);

98 i‡(
hód_
 =
NULL
)

99 
hód_
 = 
√wCÆl
;

101 
MockEx≥˘edFun˘i⁄sLi°Node
* 
œ°CÆl
 = 
hód_
;

102 
œ°CÆl
->
√xt_
)ÜastCall =ÜastCall->next_;

103 
œ°CÆl
->
√xt_
 = 
√wCÆl
;

105 
	}
}

107 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

109 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

110 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

111 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

112 
	}
}

114 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

116 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

117 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

118 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

119 
	}
}

121 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

123 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

124 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

125 
	}
}

127 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

129 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

130 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

131 
p
->
ex≥˘edCÆl_
 = 
NULL
;

133 
	`¥u√Em±yNodeFromLi°
();

134 
	}
}

136 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
()

138 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

139 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

140 
p
->
ex≥˘edCÆl_
 = 
NULL
;

142 
	`¥u√Em±yNodeFromLi°
();

143 
	}
}

145 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

147 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

148 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(
«me
);

149 
	}
}

151 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
)

153 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

154 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëîWôhName
(
«me
))

155 
p
->
ex≥˘edCÆl_
 = 
NULL
;

156 
	`¥u√Em±yNodeFromLi°
();

157 
	}
}

159 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

161 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

162 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëî
(
∑ømëî
))

163 
p
->
ex≥˘edCÆl_
 = 
NULL
;

164 
	`¥u√Em±yNodeFromLi°
();

165 
	}
}

167 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

169 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

170 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsToObje˘
(
obje˘På
))

171 
p
->
ex≥˘edCÆl_
 = 
NULL
;

172 
	`¥u√Em±yNodeFromLi°
();

173 
	}
}

176 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

178 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

179 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

180 
	}
}

182 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

184 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

185 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(
obje˘På
);

186 
	}
}

188 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄
()

190 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

191 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

192 
p
->
ex≥˘edCÆl_
 = 
NULL
;

196 
	`¥u√Em±yNodeFromLi°
();

197 
	}
}

199 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
()

201 
boﬁ
 
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
 = 
Ál£
;

202 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

203 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
()) {

204 
p
->
ex≥˘edCÆl_
->
	`∑ømëîsWîeIgn‹ed
();

205 
p
->
ex≥˘edCÆl_
 = 
NULL
;

206 
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
 = 
åue
;

210 
	`¥u√Em±yNodeFromLi°
();

211  
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
;

212 
	}
}

215 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$¥u√Em±yNodeFromLi°
()

217 
MockEx≥˘edFun˘i⁄sLi°Node
* 
cuºít
 = 
hód_
;

218 
MockEx≥˘edFun˘i⁄sLi°Node
* 
¥evious
 = 
NULL
;

219 
MockEx≥˘edFun˘i⁄sLi°Node
* 
toBeDñëed
 = 
NULL
;

221 
cuºít
) {

222 i‡(
cuºít
->
ex≥˘edCÆl_
 =
NULL
) {

223 
toBeDñëed
 = 
cuºít
;

224 i‡(
¥evious
 =
NULL
)

225 
hód_
 = 
cuºít
 = cuºít->
√xt_
;

227 
cuºít
 = 
¥evious
->
√xt_
 = current->next_;

228 
dñëe
 
toBeDñëed
;

231 
¥evious
 = 
cuºít
;

232 
cuºít
 = cuºít->
√xt_
;

235 
	}
}

237 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
()

239 
hód_
) {

240 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

241 
dñëe
 
hód_
->
ex≥˘edCÆl_
;

242 
dñëe
 
hód_
;

243 
hód_
 = 
√xt
;

245 
	}
}

247 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ª£tEx≥˘©i⁄s
()

249 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

250 
p
->
ex≥˘edCÆl_
->
	`ª£tEx≥˘©i⁄
();

251 
	}
}

253 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ˇŒWasMade
()

255 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

256 
p
->
ex≥˘edCÆl_
->
	`ˇŒWasMade
();

257 
	}
}

259 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$wasPas£dToObje˘
()

261 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

262 
p
->
ex≥˘edCÆl_
->
	`wasPas£dToObje˘
();

263 
	}
}

266 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
)

268 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

269 
p
->
ex≥˘edCÆl_
->
	`∑ømëîWasPas£d
(
∑ømëîName
);

270 
	}
}

272 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const

274 
Sim∂eSåög
 
°r
;

275 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

276 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
(Ë=
wasFulfûÀd
) {

277 i‡(
°r
 != "") str += "\n";

278 
°r
 +
löePªfix
;

279 
°r
 +
p
->
ex≥˘edCÆl_
->
	`ˇŒToSåög
();

282 i‡(
°r
 == "") {

283 
°r
 +
löePªfix
;

284 
°r
 += "<none>";

286  
°r
;

288 
	}
}

290 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$unfulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

292  
	`fun˘i⁄sToSåög
(
löePªfix
, 
Ál£
);

293 
	}
}

295 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

297  
	`fun˘i⁄sToSåög
(
löePªfix
, 
åue
);

298 
	}
}

300 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$missögP¨amëîsToSåög
() const

302 
Sim∂eSåög
 
°r
;

303 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

304 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

305 i‡(
°r
 != "") str += "\n";

306 
°r
 +
p
->
ex≥˘edCÆl_
->
	`missögP¨amëîsToSåög
();

310 i‡(
°r
 == "")

311 
°r
 = "<none>";

312  
°r
;

313 
	}
}

315 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasDu∂iˇãRëu∫VÆueF‹
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const

317 
MockEx≥˘edFun˘i⁄CÆl
* 
fun˘i⁄WôhRëu∫VÆue
 = 
NULL
;

319 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

320 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
fun˘i⁄Name
)) {

321 i‡(
fun˘i⁄WôhRëu∫VÆue
 && !
p
->
ex≥˘edCÆl_
->
	`ªtu∫VÆue
().
	`equÆs
(functionWithReturnValue->returnValue()))

322  
åue
;

324 
fun˘i⁄WôhRëu∫VÆue
 = 
p
->
ex≥˘edCÆl_
;

327  
Ál£
;

328 
	}
}

330 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const

332 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

333 i‡(! 
p
->
ex≥˘edCÆl_
->
	`¨eP¨amëîsFulfûÀd
())

334  
åue
;

335  
Ál£
;

336 
	}
}

338 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªtu∫VÆueF‹Fun˘i⁄
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const

340 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

341 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
fun˘i⁄Name
))

342  
p
->
ex≥˘edCÆl_
->
	`ªtu∫VÆue
();

343  
	`MockNamedVÆue
("");

344 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

33 
	gMockFaûuªRï‹ãr
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

35 
	`gëTe°ToFaû
()->
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

36 i‡(
¸ashOnFaûuª_
)

37 
	`UT_CRASH
();

39 
	`gëTe°ToFaû
()->
	`exôCuºítTe°
();

40 
	}
}

42 
Uã°
* 
	gMockFaûuªRï‹ãr
::
	$gëTe°ToFaû
()

44  
Uã°
::
	`gëCuºít
();

45 
	}
}

47 
	gMockFaûuª
::
	$MockFaûuª
(
Uã°
* 
ã°
Ë: 
	`Te°Faûuª
(test, "Test failed with MockFailure withoutánÉrror! Something went seriously wrong.")

49 
	}
}

51 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

53 
mesßge_
 += "\tEXPECTED callsÅhat did NOT happen:\n";

54 
mesßge_
 +
ex≥˘©i⁄s
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

55 
mesßge_
 += "\n\tACTUAL callsÅhat did happen:\n";

56 
mesßge_
 +
ex≥˘©i⁄s
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

57 
	}
}

59 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

61 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

62 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
«me
, 
ex≥˘©i⁄s
);

64 
mesßge_
 += "\tEXPECTED callsÅhat DID NOT happenÑelatedÅo function: ";

65 
mesßge_
 +
«me
;

66 
mesßge_
 += "\n";

68 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

70 
mesßge_
 += "\n\tACTUAL callsÅhat DID happenÑelatedÅo function: ";

71 
mesßge_
 +
«me
;

72 
mesßge_
 += "\n";

74 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

75 
	}
}

78 
	gMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
::
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

80 
mesßge_
 = "Mock Failure: Expected call didÇot happen.\n";

81 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

82 
	}
}

84 
	gMockU√x≥˘edCÆlH≠≥√dFaûuª
::
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

86 
amou¡OfEx≥˘©i⁄s
 = 
ex≥˘©i⁄s
.
	`amou¡OfEx≥˘©i⁄sF‹
(
«me
);

87 i‡(
amou¡OfEx≥˘©i⁄s
)

88 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (%dthËˇŒÅÿfun˘i⁄: ", 
amou¡OfEx≥˘©i⁄s
+1);

90 
mesßge_
 = "Mock Failure: Unexpected callÅo function: ";

91 
mesßge_
 +
«me
;

92 
mesßge_
 += "\n";

93 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

94 
	}
}

96 
	gMockU√x≥˘edP¨amëîFaûuª
::
	$MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

98 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
;

99 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

100 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(
∑ømëî
.
	`gëName
());

102 i‡(
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`isEm±y
()) {

103 
mesßge_
 = "Mock Failure: UnexpectedÖarameterÇameÅo function \"";

104 
mesßge_
 +
fun˘i⁄Name
;

105 
mesßge_
 += "\": ";

106 
mesßge_
 +
∑ømëî
.
	`gëName
();

109 
mesßge_
 = "Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"";

110 
mesßge_
 +
∑ømëî
.
	`gëName
();

111 
mesßge_
 += "\"Åo function \"";

112 
mesßge_
 +
fun˘i⁄Name
;

113 
mesßge_
 += "\": <";

114 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

115 
mesßge_
 += ">";

118 
mesßge_
 += "\n";

119 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

121 
mesßge_
 += "\n\tACTUAL unexpectedÖarameterÖassedÅo function: ";

122 
mesßge_
 +
fun˘i⁄Name
;

123 
mesßge_
 += "\n";

125 
mesßge_
 += "\t\t";

126 
mesßge_
 +
∑ømëî
.
	`gëTy≥
();

127 
mesßge_
 += " ";

128 
mesßge_
 +
∑ømëî
.
	`gëName
();

129 
mesßge_
 += ": <";

130 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

131 
mesßge_
 += ">";

132 
	}
}

134 
	gMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
::
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

136 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

137 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

139 
mesßge_
 = "Mock Failure: ExpectedÖarameter for function \"";

140 
mesßge_
 +
fun˘i⁄Name
;

141 
mesßge_
 += "\" didÇot happen.\n";

143 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

145 
mesßge_
 += "\n\tMISSINGÖarametersÅhat didn't happen:\n";

146 
mesßge_
 += "\t\t";

147 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`missögP¨amëîsToSåög
();

148 
	}
}

150 
	gMockNoWayToCom∑ªCu°omTy≥Faûuª
::
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
Ë: 
	$MockFaûuª
(
ã°
)

152 
mesßge_
 = 
	`SåögFromF‹m©
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <%s>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
ty≥Name
.
	`asCh¨Såög
());

153 
	}
}

155 
	gMockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
::
	$MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
Ë: 
	$MockFaûuª
(
ã°
)

157 
mesßge_
 = 
	`SåögFromF‹m©
("MockFailure: Cannot set differentÑeturn valuesÅoÅhe same function: %s\n"

159 "\tYou c™Örobablyáchõvêthêßmêthög usög MockSuµ‹t::£tD©a", 
fun˘i⁄Name
.
	`asCh¨Såög
());

160 
	}
}

162 
	gMockU√x≥˘edObje˘Faûuª
::
	$MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
a˘uÆ
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

164 
mesßge_
 = 
	`SåögFromF‹m©
 ("MockFailure: Function called oná unexpected object: %s\n"

165 "\tA˘uÆ obje˘ f‹ cÆ»ha†addªss: <%p>\n", 
fun˘i⁄Name
.
	`asCh¨Såög
(),
a˘uÆ
);

166 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

167 
	}
}

169 
	gMockEx≥˘edObje˘Did¡H≠≥nFaûuª
::
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

171 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: Ex≥˘ed cÆ»⁄ obje˘ f‹ fun˘i⁄ \"%s\" buàô didÇŸ h≠≥n.\n", 
fun˘i⁄Name
.
	`asCh¨Såög
());

172 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockNamedVÆue.h
"

32 
	gMockFun˘i⁄CÆl
::
	$MockFun˘i⁄CÆl
(Ë: 
	$com∑øt‹Rïosô‹y_
(
NULL
)

34 
	}
}

36 
MockFun˘i⁄CÆl
::~
	$MockFun˘i⁄CÆl
()

38 
	}
}

40 
MockFun˘i⁄CÆl
::
	$£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
)

42 
com∑øt‹Rïosô‹y_
 = 
ªposô‹y
;

43 
	}
}

45 
	gMockFun˘i⁄CÆl
::
	$£tName
(c⁄° 
Sim∂eSåög
& 
«me
)

47 
fun˘i⁄Name_
 = 
«me
;

48 
	}
}

50 
Sim∂eSåög
 
	gMockFun˘i⁄CÆl
::
	$gëName
() const

52  
fun˘i⁄Name_
;

53 
	}
}

55 
MockNamedVÆueCom∑øt‹
* 
	gMockFun˘i⁄CÆl
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const

57 i‡(
com∑øt‹Rïosô‹y_
)

58  
com∑øt‹Rïosô‹y_
->
	`gëCom∑øt‹F‹Ty≥
(
ty≥
);

59  
NULL
;

60 
	}
}

62 
	sMockFun˘i⁄CÆlComposôeNode


64 
MockFun˘i⁄CÆlComposôeNode
(
MockFun˘i⁄CÆl
& 
fun˘i⁄CÆl
, MockFun˘i⁄CÆlComposôeNode* 
√xt
Ë: 
√xt_
“ext), 
ˇŒ_
(functionCall){}

66 
MockFun˘i⁄CÆlComposôeNode
* 
	m√xt_
;

67 
	mMockFun˘i⁄CÆl
& 
	mˇŒ_
;

70 
	gMockFun˘i⁄CÆlComposôe
::
	$MockFun˘i⁄CÆlComposôe
(Ë: 
	$hód_
(
NULL
)

72 
	}
}

74 
MockFun˘i⁄CÆlComposôe
::~
	$MockFun˘i⁄CÆlComposôe
()

77 
	}
}

79 
MockFun˘i⁄CÆlComposôe
::
	$add
(
MockFun˘i⁄CÆl
& 
ˇŒ
)

81 
hód_
 = 
√w
 
	`MockFun˘i⁄CÆlComposôeNode
(
ˇŒ
, head_);

82 
	}
}

84 
	gMockFun˘i⁄CÆlComposôe
::
	$˛ór
()

86 
hód_
) {

87 
MockFun˘i⁄CÆlComposôeNode
* 
√xt
 = 
hód_
->
√xt_
;

88 
dñëe
 
hód_
;

89 
hód_
 = 
√xt
;

91 
	}
}

93 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

95 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

96 
node
->
ˇŒ_
.
	`wôhName
(
«me
);

97  *
this
;

98 
	}
}

100 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

102 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

103 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

104  *
this
;

105 
	}
}

107 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

109 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

110 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

111  *
this
;

113 
	}
}

115 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

117 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

118 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

119  *
this
;

120 
	}
}

122 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

124 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

125 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

126  *
this
;

127 
	}
}

129 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

131 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

132 
node
->
ˇŒ_
.
	`wôhP¨amëîOfTy≥
(
ty≥Name
, 
«me
, 
vÆue
);

133  *
this
;

135 
	}
}

137 
	gMockFun˘i⁄CÆlComposôe
::
	$ign‹eOthîP¨amëîs
()

139 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

140 
node
->
ˇŒ_
.
	`ign‹eOthîP¨amëîs
();

141 
	}
}

143 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

145 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

146 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

147  *
this
;

148 
	}
}

150 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
MockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

152 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

153 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

154  *
this
;

155 
	}
}

157 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

159 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

160 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

161  *
this
;

162 
	}
}

164 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(* 
vÆue
)

166 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

167 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

168  *
this
;

169 
	}
}

171 
boﬁ
 
	gMockFun˘i⁄CÆlComposôe
::
	$hasRëu∫VÆue
()

173  
hód_
->
ˇŒ_
.
	`hasRëu∫VÆue
();

174 
	}
}

176 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlComposôe
::
	$ªtu∫VÆue
()

178  
hód_
->
ˇŒ_
.
	`ªtu∫VÆue
();

179 
	}
}

181 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$⁄Obje˘
(* 
obje˘
)

183 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

184 
node
->
ˇŒ_
.
	`⁄Obje˘
(
obje˘
);

185  *
this
;

186 
	}
}

189 
	gMockFun˘i⁄CÆlTø˚
::
	$MockFun˘i⁄CÆlTø˚
()

191 
	}
}

193 
MockFun˘i⁄CÆlTø˚
::~
	$MockFun˘i⁄CÆlTø˚
()

195 
	}
}

197 
MockFun˘i⁄CÆl
& 
MockFun˘i⁄CÆlTø˚
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

199 
åa˚Buf„r_
 += "\nFunctionÇame: ";

200 
åa˚Buf„r_
 +
«me
;

201  *
this
;

202 
	}
}

204 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

206 
åa˚Buf„r_
 += " ";

207 
åa˚Buf„r_
 +
«me
;

208 
åa˚Buf„r_
 += ":";

209 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

210  *
this
;

211 
	}
}

213 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

215 
åa˚Buf„r_
 += " ";

216 
åa˚Buf„r_
 +
«me
;

217 
åa˚Buf„r_
 += ":";

218 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

219  *
this
;

220 
	}
}

222 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

224 
åa˚Buf„r_
 += " ";

225 
åa˚Buf„r_
 +
«me
;

226 
åa˚Buf„r_
 += ":";

227 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

228  *
this
;

229 
	}
}

231 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

233 
åa˚Buf„r_
 += " ";

234 
åa˚Buf„r_
 +
«me
;

235 
åa˚Buf„r_
 += ":";

236 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

237  *
this
;

238 
	}
}

240 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

242 
åa˚Buf„r_
 += " ";

243 
åa˚Buf„r_
 +
ty≥Name
;

244 
åa˚Buf„r_
 += " ";

245 
åa˚Buf„r_
 +
«me
;

246 
åa˚Buf„r_
 += ":";

247 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

248  *
this
;

249 
	}
}

251 
	gMockFun˘i⁄CÆlTø˚
::
	$ign‹eOthîP¨amëîs
()

253 
	}
}

255 
MockFun˘i⁄CÆl
& 
MockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

257  *
this
;

258 
	}
}

260 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

262  *
this
;

263 
	}
}

265 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(const *)

267  *
this
;

268 
	}
}

270 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(*)

272  *
this
;

273 
	}
}

275 
boﬁ
 
	gMockFun˘i⁄CÆlTø˚
::
	$hasRëu∫VÆue
()

277  
Ál£
;

278 
	}
}

280 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlTø˚
::
	$ªtu∫VÆue
()

282  
	`MockNamedVÆue
("");

283 
	}
}

285 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$⁄Obje˘
(* 
obje˘På
)

287 
åa˚Buf„r_
 +
	`SåögFrom
(
obje˘På
);

288  *
this
;

289 
	}
}

291 
	gMockFun˘i⁄CÆlTø˚
::
	$˛ór
()

293 
åa˚Buf„r_
 = "";

294 
	}
}

296 c⁄° * 
	gMockFun˘i⁄CÆlTø˚
::
	$gëTø˚Ouçut
()

298  
åa˚Buf„r_
.
	`asCh¨Såög
();

299 
	}
}

301 
	gMockFun˘i⁄CÆlTø˚
& MockFun˘i⁄CÆlTø˚::
	$ö°™˚
()

303 
MockFun˘i⁄CÆlTø˚
 
ˇŒ
;

304  
ˇŒ
;

305 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockNamedValue.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockNamedVÆue.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gMockNamedVÆue
::
	$MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
Ë: 
	`«me_
“ame), 
	`ty≥_
("öt"), 
	$com∑øt‹_
(
NULL
)

35 
vÆue_
.
ötVÆue_
 = 0;

36 
	}
}

38 
	gMockNamedVÆue
::~
	$MockNamedVÆue
()

40 
	}
}

42 
MockNamedVÆue
::
	$£tVÆue
(
vÆue
)

44 
ty≥_
 = "int";

45 
vÆue_
.
ötVÆue_
 = 
vÆue
;

46 
	}
}

48 
	gMockNamedVÆue
::
	$£tVÆue
(
vÆue
)

50 
ty≥_
 = "double";

51 
vÆue_
.
doubÀVÆue_
 = 
vÆue
;

52 
	}
}

54 
	gMockNamedVÆue
::
	$£tVÆue
(* 
vÆue
)

56 
ty≥_
 = "void*";

57 
vÆue_
.
poöãrVÆue_
 = 
vÆue
;

58 
	}
}

60 
	gMockNamedVÆue
::
	$£tVÆue
(c⁄° * 
vÆue
)

62 
ty≥_
 = "char*";

63 
vÆue_
.
°rögVÆue_
 = 
vÆue
;

64 
	}
}

66 
	gMockNamedVÆue
::
	$£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
)

68 
ty≥_
 = 
ty≥
;

69 
vÆue_
.
obje˘PoöãrVÆue_
 = 
obje˘På
;

70 
	}
}

72 
	gMockNamedVÆue
::
	$£tName
(c⁄° * 
«me
)

74 
«me_
 = 
«me
;

75 
	}
}

77 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëName
() const

79  
«me_
;

80 
	}
}

82 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëTy≥
() const

84  
ty≥_
;

85 
	}
}

87 
	gMockNamedVÆue
::
	$gëI¡VÆue
() const

89 
	`STRCMP_EQUAL
("öt", 
ty≥_
.
	`asCh¨Såög
());

90  
vÆue_
.
ötVÆue_
;

91 
	}
}

93 
	gMockNamedVÆue
::
	$gëDoubÀVÆue
() const

95 
	`STRCMP_EQUAL
("doubÀ", 
ty≥_
.
	`asCh¨Såög
());

96  
vÆue_
.
doubÀVÆue_
;

97 
	}
}

99 c⁄° * 
	gMockNamedVÆue
::
	$gëSåögVÆue
() const

101 
	`STRCMP_EQUAL
("ch¨*", 
ty≥_
.
	`asCh¨Såög
());

102  
vÆue_
.
°rögVÆue_
;

103 
	}
}

105 * 
	gMockNamedVÆue
::
	$gëPoöãrVÆue
() const

107 
	`STRCMP_EQUAL
("void*", 
ty≥_
.
	`asCh¨Såög
());

108  
vÆue_
.
poöãrVÆue_
;

109 
	}
}

111 * 
	gMockNamedVÆue
::
	$gëObje˘Poöãr
() const

113  
vÆue_
.
obje˘PoöãrVÆue_
;

114 
	}
}

116 
	gMockNamedVÆue
::
	$£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
)

118 
com∑øt‹_
 = 
com∑øt‹
;

119 
	}
}

121 
boﬁ
 
	gMockNamedVÆue
::
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const

123 i‡(
ty≥_
 !
p
.ty≥_Ë 
Ál£
;

125 i‡(
ty≥_
 == "int")

126  
vÆue_
.
ötVÆue_
 =
p
.value_.intValue_;

127 i‡(
ty≥_
 == "char*")

128  
	`Sim∂eSåög
(
vÆue_
.
°rögVÆue_
Ë=Sim∂eSåög(
p
.value_.stringValue_);

129 i‡(
ty≥_
 == "void*")

130  
vÆue_
.
poöãrVÆue_
 =
p
.value_.pointerValue_;

131 i‡(
ty≥_
 == "double")

132  (
	`doubÀs_equÆ
(
vÆue_
.
doubÀVÆue_
, 
p
.value_.doubleValue_, 0.005));

134 i‡(
com∑øt‹_
)

135  
com∑øt‹_
->
	`isEquÆ
(
vÆue_
.
obje˘PoöãrVÆue_
, 
p
.value_.objectPointerValue_);

137  
Ál£
;

138 
	}
}

140 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$toSåög
() const

142 i‡(
ty≥_
 == "int")

143  
	`SåögFrom
(
vÆue_
.
ötVÆue_
);

144 i‡(
ty≥_
 == "char*")

145  
vÆue_
.
°rögVÆue_
;

146 i‡(
ty≥_
 == "void*")

147  
	`SåögFrom
(
vÆue_
.
poöãrVÆue_
);

148 i‡(
ty≥_
 == "double")

149  
	`SåögFrom
(
vÆue_
.
doubÀVÆue_
);

151 i‡(
com∑øt‹_
)

152  
com∑øt‹_
->
	`vÆueToSåög
(
vÆue_
.
obje˘PoöãrVÆue_
);

154  
	`SåögFromF‹m©
("Nÿcom∑øt‹ found f‹Åy≥: \"%s\"", 
ty≥_
.
	`asCh¨Såög
());

156 
	}
}

158 
	gMockNamedVÆueLi°Node
::
	$£tNext
(
MockNamedVÆueLi°Node
* 
node
)

160 
√xt_
 = 
node
;

161 
	}
}

163 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°Node
::
	$√xt
()

165  
√xt_
;

166 
	}
}

168 
MockNamedVÆue
* 
	gMockNamedVÆueLi°Node
::
	$ôem
()

170  
d©a_
;

171 
	}
}

173 
	gMockNamedVÆueLi°Node
::
	$de°roy
()

175 
dñëe
 
d©a_
;

176 
	}
}

178 
	gMockNamedVÆueLi°Node
::
	$MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
)

179 : 
	`d©a_
(
√wVÆue
), 
	$√xt_
(
NULL
)

181 
	}
}

183 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëName
() const

185  
d©a_
->
	`gëName
();

186 
	}
}

188 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëTy≥
() const

190  
d©a_
->
	`gëTy≥
();

191 
	}
}

193 
	gMockNamedVÆueLi°
::
	$MockNamedVÆueLi°
(Ë: 
	$hód_
(
NULL
)

195 
	}
}

197 
MockNamedVÆueLi°
::
	$˛ór
()

199 
hód_
) {

200 
MockNamedVÆueLi°Node
* 
n
 = 
hód_
->
	`√xt
();

201 
hód_
->
	`de°roy
();

202 
dñëe
 
hód_
;

203 
hód_
 = 
n
;

205 
	}
}

207 
	gMockNamedVÆueLi°
::
	$add
(
MockNamedVÆue
* 
√wVÆue
)

209 
MockNamedVÆueLi°Node
* 
√wNode
 = 
√w
 
	`MockNamedVÆueLi°Node
(
√wVÆue
);

210 i‡(
hód_
 =
NULL
)

211 
hód_
 = 
√wNode
;

213 
MockNamedVÆueLi°Node
* 
œ°Node
 = 
hód_
;

214 
œ°Node
->
	`√xt
())ÜastNode =ÜastNode->next();

215 
œ°Node
->
	`£tNext
(
√wNode
);

217 
	}
}

219 
MockNamedVÆue
* 
	gMockNamedVÆueLi°
::
	$gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
)

221 
MockNamedVÆueLi°Node
 * 
p
 = 
hód_
;Ö;Ö =Ö->
	`√xt
())

222 i‡(
p
->
	`gëName
(Ë=
«me
)

223  
p
->
	`ôem
();

224  
NULL
;

225 
	}
}

227 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°
::
	$begö
()

229  
hód_
;

230 
	}
}

232 
	sMockNamedVÆueCom∑øt‹Rïosô‹yNode


234 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
, MockNamedVÆueCom∑øt‹Rïosô‹yNode* 
√xt
)

235 : 
«me_
(
«me
), 
com∑øt‹_
(
com∑øt‹
), 
√xt_
(
√xt
) {};

236 
Sim∂eSåög
 
	m«me_
;

237 
	mMockNamedVÆueCom∑øt‹
& 
	mcom∑øt‹_
;

238 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
	m√xt_
;

241 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$MockNamedVÆueCom∑øt‹Rïosô‹y
(Ë: 
	$hód_
(
NULL
)

244 
	}
}

246 
MockNamedVÆueCom∑øt‹Rïosô‹y
::~
	$MockNamedVÆueCom∑øt‹Rïosô‹y
()

248 
	`˛ór
();

249 
	}
}

251 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$˛ór
()

253 
hód_
) {

254 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
√xt
 = 
hód_
->
√xt_
;

255 
dñëe
 
hód_
;

256 
hód_
 = 
√xt
;

258 
	}
}

260 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

262 
hód_
 = 
√w
 
	`MockNamedVÆueCom∑øt‹Rïosô‹yNode
(
«me
, 
com∑øt‹
, head_);

263 
	}
}

265 
MockNamedVÆueCom∑øt‹
* 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
)

267 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

268 i‡(
p
->
«me_
 =
«me
Ë &p->
com∑øt‹_
;

269  
NULL
;;

270 
	}
}

272 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

274 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
ªposô‹y
.
hód_
;Ö;Ö =Ö->
√xt_
)

275 
	`ö°ÆlCom∑øt‹
(
p
->
«me_
,Ö->
com∑øt‹_
);

276 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	#MOCK_SUPPORT_SCOPE_PREFIX
 "!!!$$$MockögSuµ‹tSc›e$$$!!!"

	)

36 
MockSuµ‹t
 
	gglobÆ_mock
;

38 
	gMockSuµ‹t
& 
	$mock
(c⁄° 
Sim∂eSåög
& 
mockName
)

40 i‡(
mockName
 != "")

41  *
globÆ_mock
.
	`gëMockSuµ‹tSc›e
(
mockName
);

42  
globÆ_mock
;

43 
	}
}

45 
	gMockSuµ‹t
::
	$MockSuµ‹t
()

46 : 
	`ªp‹ãr_
(&
deÁu…Rï‹ãr_
), 
	`ign‹eOthîCÆls_
(
Ál£
), 
	`íabÀd_
(
åue
), 
	`œ°A˘uÆFun˘i⁄CÆl_
(
NULL
), 
	$åacög_
(
Ál£
)

48 
	}
}

50 
	gMockSuµ‹t
::~
	$MockSuµ‹t
()

52 
	}
}

54 
MockSuµ‹t
::
	$¸ashOnFaûuª
()

56 
ªp‹ãr_
->
	`¸ashOnFaûuª
();

57 
	}
}

59 
	gMockSuµ‹t
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

61 
ªp‹ãr_
 = (
ªp‹ãr
 !
NULL
Ë?Ñï‹ã∏: &
deÁu…Rï‹ãr_
;

63 i‡(
œ°A˘uÆFun˘i⁄CÆl_
)

64 
œ°A˘uÆFun˘i⁄CÆl_
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

66 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

67 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

68 
	}
}

70 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

72 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

74 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

75 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

76 
	}
}

78 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

80 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

82 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

83 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

84 
	}
}

86 
	gMockSuµ‹t
::
	$ªmoveAŒCom∑øt‹s
()

88 
com∑øt‹Rïosô‹y_
.
	`˛ór
();

89 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

90 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ªmoveAŒCom∑øt‹s
();

91 
	}
}

93 
	gMockSuµ‹t
::
	$˛ór
()

95 
dñëe
 
œ°A˘uÆFun˘i⁄CÆl_
;

96 
œ°A˘uÆFun˘i⁄CÆl_
 = 
NULL
;

98 
åacög_
 = 
Ál£
;

99 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`˛ór
();

101 
ex≥˘©i⁄s_
.
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

102 
composôeCÆls_
.
	`˛ór
();

103 
ign‹eOthîCÆls_
 = 
Ál£
;

104 
íabÀd_
 = 
åue
;

106 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

107 
MockSuµ‹t
* 
suµ‹t
 = 
	`gëMockSuµ‹t
(
p
);

108 i‡(
suµ‹t
) {

109 
suµ‹t
->
	`˛ór
();

110 
dñëe
 
suµ‹t
;

113 
d©a_
.
	`˛ór
();

114 
	}
}

116 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

118 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

120 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
 = 
√w
 MockExpectedFunctionCall;

121 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

122 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

123 
ex≥˘©i⁄s_
.
	`addEx≥˘edCÆl
(
ˇŒ
);

124  *
ˇŒ
;

125 
	}
}

127 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

129 
composôeCÆls_
.
	`˛ór
();

131 
i
 = 0; i < 
amou¡
; i++)

132 
composôeCÆls_
.
	`add
(
	`ex≥˘O√CÆl
(
fun˘i⁄Name
));

133  
composôeCÆls_
;

134 
	}
}

137 
MockA˘uÆFun˘i⁄CÆl
* 
	gMockSuµ‹t
::
	$¸óãA˘uÆFun˘i⁄CÆl
()

139 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ë
dñëe
ÜastActualFunctionCall_;

141 
œ°A˘uÆFun˘i⁄CÆl_
 = 
√w
 
	`MockA˘uÆFun˘i⁄CÆl
(
ªp‹ãr_
, 
ex≥˘©i⁄s_
);

142  
œ°A˘uÆFun˘i⁄CÆl_
;

143 
	}
}

145 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

147 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

148 i‡(
åacög_
Ë 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`wôhName
(
fun˘i⁄Name
);

150 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ëœ°A˘uÆFun˘i⁄CÆl_->
	`checkEx≥˘©i⁄s
();

152 i‡(!
ex≥˘©i⁄s_
.
	`hasEx≥˘©i⁄WôhName
(
fun˘i⁄Name
Ë&& 
ign‹eOthîCÆls_
) {

153  
MockIgn‹edCÆl
::
	`ö°™˚
();

156 
MockA˘uÆFun˘i⁄CÆl
* 
ˇŒ
 = 
	`¸óãA˘uÆFun˘i⁄CÆl
();

157 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

158 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

159  *
ˇŒ
;

160 
	}
}

162 
	gMockSuµ‹t
::
	$ign‹eOthîCÆls
()

164 
ign‹eOthîCÆls_
 = 
åue
;

166 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

167 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ign‹eOthîCÆls
();

168 
	}
}

170 
	gMockSuµ‹t
::
	$dißbÀ
()

172 
íabÀd_
 = 
Ál£
;

174 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

175 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`dißbÀ
();

176 
	}
}

178 
	gMockSuµ‹t
::
	$íabÀ
()

180 
íabÀd_
 = 
åue
;

182 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

183 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`íabÀ
();

184 
	}
}

186 
	gMockSuµ‹t
::
	$åacög
(
boﬁ
 
íabÀd
)

188 
åacög_
 = 
íabÀd
;

190 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

191 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`åacög
(
íabÀd
);

192 
	}
}

194 c⁄° * 
	gMockSuµ‹t
::
	$gëTø˚Ouçut
()

196  
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`gëTø˚Ouçut
();

197 
	}
}

199 
boﬁ
 
	gMockSuµ‹t
::
	$ex≥˘edCÆlsLe·
()

201 
ˇŒsLe·
 = 
ex≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
();

203 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

204 i‡(
	`gëMockSuµ‹t
(
p
)Ë
ˇŒsLe·
 +gëMockSuµ‹t’)->
	`ex≥˘edCÆlsLe·
();

206  
ˇŒsLe·
;

207 
	}
}

209 
boﬁ
 
	gMockSuµ‹t
::
	$wasLa°CÆlFulfûÀd
()

211 i‡(
œ°A˘uÆFun˘i⁄CÆl_
 && !œ°A˘uÆFun˘i⁄CÆl_->
	`isFulfûÀd
())

212  
Ál£
;

214 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

215 i‡(
	`gëMockSuµ‹t
(
p
Ë&& !gëMockSuµ‹t’)->
	`wasLa°CÆlFulfûÀd
())

216  
Ál£
;

218  
åue
;

219 
	}
}

221 
	gMockSuµ‹t
::
	$ÁûTe°WôhF‹U√x≥˘edCÆls
()

223 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sLi°
;

224 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
ex≥˘©i⁄s_
);

226 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

227 if(
	`gëMockSuµ‹t
(
p
))

228 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
	`gëMockSuµ‹t
(
p
)->
ex≥˘©i⁄s_
);

230 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
ªp‹ãr_
->
	`gëTe°ToFaû
(), 
ex≥˘©i⁄sLi°
);

231 
	`˛ór
();

232 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

233 
	}
}

235 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄sOfLa°CÆl
()

237 if(
œ°A˘uÆFun˘i⁄CÆl_
)

238 
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

240 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

241 if(
	`gëMockSuµ‹t
(
p
Ë&& gëMockSuµ‹t’)->
œ°A˘uÆFun˘i⁄CÆl_
)

242 
	`gëMockSuµ‹t
(
p
)->
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

243 
	}
}

245 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄s
()

247 i‡(!
	`wasLa°CÆlFulfûÀd
())

248 
	`checkEx≥˘©i⁄sOfLa°CÆl
();

249 i‡(
	`ex≥˘edCÆlsLe·
())

250 
	`ÁûTe°WôhF‹U√x≥˘edCÆls
();

251 
	}
}

253 
boﬁ
 
	gMockSuµ‹t
::
	$hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

255  
d©a_
.
	`gëVÆueByName
(
«me
Ë!
NULL
;

256 
	}
}

258 
MockNamedVÆue
* 
	gMockSuµ‹t
::
	$¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

260 
MockNamedVÆue
* 
√wD©a
 = 
√w
 
	`MockNamedVÆue
(
«me
);

261 
d©a_
.
	`add
(
√wD©a
);

262  
√wD©a
;

263 
	}
}

265 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

267 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

268 
√wD©a
->
	`£tVÆue
(
vÆue
);

269 
	}
}

271 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

273 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

274 
√wD©a
->
	`£tVÆue
(
vÆue
);

275 
	}
}

277 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

279 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

280 
√wD©a
->
	`£tVÆue
(
vÆue
);

281 
	}
}

283 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

285 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

286 
√wD©a
->
	`£tVÆue
(
vÆue
);

287 
	}
}

289 
	gMockSuµ‹t
::
	$£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
)

291 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

292 
√wD©a
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

293 
	}
}

295 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

297 
MockNamedVÆue
* 
vÆue
 = 
d©a_
.
	`gëVÆueByName
(
«me
);

298 i‡(
vÆue
 =
NULL
)

299  
	`MockNamedVÆue
("");

300  *
vÆue
;

301 
	}
}

303 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
)

305 
Sim∂eSåög
 
mockögSuµ‹tName
 = 
MOCK_SUPPORT_SCOPE_PREFIX
;

306 
mockögSuµ‹tName
 +
«me
;

308 i‡(
	`hasD©a
(
mockögSuµ‹tName
)) {

309 
	`STRCMP_EQUAL
("MockSuµ‹t", 
	`gëD©a
(
mockögSuµ‹tName
).
	`gëTy≥
().
	`asCh¨Såög
());

310  (
MockSuµ‹t
*Ë
	`gëD©a
(
mockögSuµ‹tName
).
	`gëObje˘Poöãr
();

313 
MockSuµ‹t
 *
√wMock
 = 
√w
 MockSupport;

315 
√wMock
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

316 i‡(
ign‹eOthîCÆls_
Ë
√wMock
->
	`ign‹eOthîCÆls
();

317 i‡(!
íabÀd_
Ë
√wMock
->
	`dißbÀ
();

318 
√wMock
->
	`åacög
(
åacög_
);

319 
√wMock
->
	`ö°ÆlCom∑øt‹s
(
com∑øt‹Rïosô‹y_
);

321 
	`£tD©aObje˘
(
mockögSuµ‹tName
, "MockSuµ‹t", 
√wMock
);

322  
√wMock
;

323 
	}
}

325 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
)

327 i‡(
node
->
	`gëTy≥
(Ë="MockSuµ‹t" &&Çode->
	`gëName
().
	`c⁄èös
(
MOCK_SUPPORT_SCOPE_PREFIX
))

328  (
MockSuµ‹t
*Ë
node
->
	`ôem
()->
	`gëObje˘Poöãr
();

329  
NULL
;

330 
	}
}

332 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$ªtu∫VÆue
()

334 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`ªtu∫VÆue
();

335  
	`MockNamedVÆue
("");

336 
	}
}

338 
	gMockSuµ‹t
::
	$ötRëu∫VÆue
()

340  
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

341 
	}
}

343 c⁄° * 
	gMockSuµ‹t
::
	$°rögRëu∫VÆue
()

345  
	`ªtu∫VÆue
().
	`gëSåögVÆue
();

346 
	}
}

348 
	gMockSuµ‹t
::
	$doubÀRëu∫VÆue
()

350  
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
();

351 
	}
}

353 * 
	gMockSuµ‹t
::
	$poöãrRëu∫VÆue
()

355  
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
();

356 
	}
}

358 
boﬁ
 
	gMockSuµ‹t
::
	$hasRëu∫VÆue
()

360 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`hasRëu∫VÆue
();

361  
Ál£
;

362 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupportPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

32 ˛as†
	cMockSuµ‹tPlugöRï‹ãr
 : 
public
 
MockFaûuªRï‹ãr


34 
Uã°
& 
ã°_
;

35 
	mTe°Resu…
& 
	mªsu…_
;

36 
	mpublic
:

37 
	$MockSuµ‹tPlugöRï‹ãr
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

38 : 
	`ã°_
(
ã°
), 
	$ªsu…_
(
ªsu…
)

42 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

44 
ªsu…_
.
	`addFaûuª
(
Áûuª
);

45 
	}
}

47 
vútuÆ
 
Uã°
* 
	$gëTe°ToFaû
()

49  &
ã°_
;

50 
	}
}

53 
	gMockSuµ‹tPlugö
::
	$MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
)

54 : 
	$Te°Plugö
(
«me
)

56 
	}
}

58 
MockSuµ‹tPlugö
::~
	$MockSuµ‹tPlugö
()

60 
ªposô‹y_
.
	`˛ór
();

61 
	}
}

63 
	gMockSuµ‹tPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

65 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªposô‹y_
);

66 
	}
}

68 
	gMockSuµ‹tPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

70 
MockSuµ‹tPlugöRï‹ãr
 
	`ªp‹ãr
(
ã°
, 
ªsu…
);

71 
	`mock
().
	`£tMockFaûuªRï‹ãr
(&
ªp‹ãr
);

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	`mock
().
	`˛ór
();

74 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

76 
	}
}

78 
	gMockSuµ‹tPlugö
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

80 
ªposô‹y_
.
	`ö°ÆlCom∑øt‹
(
«me
, 
com∑øt‹
);

81 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupport_c.cpp

28 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

32 
	~<°rög.h
>

34 
MockSuµ‹t
* 
cuºítMockSuµ‹t
 = 
NULL
;

35 
MockFun˘i⁄CÆl
* 
	gcuºítCÆl
 = 
NULL
;

37 ˛as†
	cMockCFun˘i⁄Com∑øt‹Node
 : 
public
 
MockNamedVÆueCom∑øt‹


39 
public
:

40 
	$MockCFun˘i⁄Com∑øt‹Node
(
MockCFun˘i⁄Com∑øt‹Node
* 
√xt
, 
MockTy≥EquÆFun˘i⁄_c
 
equÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
toSåög
)

41 : 
	`√xt_
(
√xt
), 
	`equÆ_
(
equÆ
), 
	$toSåög_
(
toSåög
) {}

42 
vútuÆ
 ~
	$MockCFun˘i⁄Com∑øt‹Node
(Ë{
	}
};

44 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

46  (
boﬁ
Ë
	`equÆ_
(
obje˘1
, 
obje˘2
);

47 
	}
}

48 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

50  
	`Sim∂eSåög
(
	`toSåög_
(
obje˘
));

51 
	}
}

53 
MockCFun˘i⁄Com∑øt‹Node
* 
	g√xt_
;

54 
MockTy≥EquÆFun˘i⁄_c
 
	gequÆ_
;

55 
MockTy≥VÆueToSåögFun˘i⁄_c
 
	gtoSåög_
;

58 
MockCFun˘i⁄Com∑øt‹Node
* 
	gcom∑øt‹Li°_
 = 
NULL
;

62 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
);

63 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
);

64 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
);

65 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
);

66 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

67 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
);

68 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

69 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
);

71 
checkEx≥˘©i⁄s_c
();

72 
ex≥˘edCÆlsLe·_c
();

73 
˛ór_c
();

75 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨am©îs_c
(c⁄° * 
«me
, 
vÆue
);

76 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
);

77 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

78 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
);

79 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
);

80 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
);

81 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
);

82 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
);

83 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
);

84 
MockVÆue_c
 
ªtu∫VÆue_c
();

87 
ö°ÆlCom∑øt‹_c
 (c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
)

89 
com∑øt‹Li°_
 = 
√w
 
MockCFun˘i⁄Com∑øt‹Node
(com∑øt‹Li°_, 
isEquÆ
, 
vÆueToSåög
);

90 
cuºítMockSuµ‹t
->
ö°ÆlCom∑øt‹
(
ty≥Name
, *
com∑øt‹Li°_
);

93 
ªmoveAŒCom∑øt‹s_c
()

95 
com∑øt‹Li°_
) {

96 
MockCFun˘i⁄Com∑øt‹Node
 *
√xt
 = 
com∑øt‹Li°_
->
√xt_
;

97 
dñëe
 
com∑øt‹Li°_
;

98 
com∑øt‹Li°_
 = 
√xt
;

100 
cuºítMockSuµ‹t
->
ªmoveAŒCom∑øt‹s
();

103 
MockFun˘i⁄CÆl_c
 
gFun˘i⁄CÆl
 = {

104 
wôhI¡P¨am©îs_c
,

105 
wôhDoubÀP¨amëîs_c
,

106 
wôhSåögP¨amëîs_c
,

107 
wôhPoöãrP¨amëîs_c
,

108 
wôhP¨amëîOfTy≥_c
,

109 
™dRëu∫I¡VÆue_c
,

110 
™dRëu∫DoubÀVÆue_c
,

111 
™dRëu∫SåögVÆue_c
,

112 
™dRëu∫PoöãrVÆue_c
,

113 
ªtu∫VÆue_c


116 
MockSuµ‹t_c
 
gMockSuµ‹t
 = {

117 
ex≥˘O√CÆl_c
,

118 
a˘uÆCÆl_c
,

119 
ªtu∫VÆue_c
,

120 
£tI¡D©a_c
,

121 
£tDoubÀD©a_c
,

122 
£tSåögD©a_c
,

123 
£tPoöãrD©a_c
,

124 
£tD©aObje˘_c
,

125 
gëD©a_c
,

126 
checkEx≥˘©i⁄s_c
,

127 
ex≥˘edCÆlsLe·_c
,

128 
˛ór_c
,

129 
ö°ÆlCom∑øt‹_c
,

130 
ªmoveAŒCom∑øt‹s_c


133 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨am©îs_c
(c⁄° * 
«me
, 
vÆue
)

135 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

136  &
gFun˘i⁄CÆl
;

139 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
)

141 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

142  &
gFun˘i⁄CÆl
;

145 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

147 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

148  &
gFun˘i⁄CÆl
;

151 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
)

153 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

154  &
gFun˘i⁄CÆl
;

157 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
)

159 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëîOfTy≥
(
ty≥
, 
«me
, 
vÆue
);

160  &
gFun˘i⁄CÆl
;

163 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
)

165 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

166  &
gFun˘i⁄CÆl
;

169 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
)

171 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

172  &
gFun˘i⁄CÆl
;

175 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
)

177 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

178  &
gFun˘i⁄CÆl
;

181 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
)

183 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

184  &
gFun˘i⁄CÆl
;

187 
MockVÆue_c
 
gëMockVÆueCFromNamedVÆue
(c⁄° 
MockNamedVÆue
& 
«medVÆue
)

189 
MockVÆue_c
 
ªtu∫VÆue
;

190 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "int") == 0) {

191 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_INTEGER
;

192 
ªtu∫VÆue
.
vÆue
.
ötVÆue
 = 
«medVÆue
.
gëI¡VÆue
();

194 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "double") == 0) {

195 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_DOUBLE
;

196 
ªtu∫VÆue
.
vÆue
.
doubÀVÆue
 = 
«medVÆue
.
gëDoubÀVÆue
();

198 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "char*") == 0) {

199 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_STRING
;

200 
ªtu∫VÆue
.
vÆue
.
°rögVÆue
 = 
«medVÆue
.
gëSåögVÆue
();

202 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "void*") == 0) {

203 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_POINTER
;

204 
ªtu∫VÆue
.
vÆue
.
poöãrVÆue
 = 
«medVÆue
.
gëPoöãrVÆue
();

207 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_OBJECT
;

208 
ªtu∫VÆue
.
vÆue
.
obje˘VÆue
 = 
«medVÆue
.
gëObje˘Poöãr
();

210  
ªtu∫VÆue
;

213 
MockVÆue_c
 
ªtu∫VÆue_c
()

215  
gëMockVÆueCFromNamedVÆue
(
cuºítCÆl
->
ªtu∫VÆue
());

218 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
)

220 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
ex≥˘O√CÆl
(
«me
);

221  &
gFun˘i⁄CÆl
;

224 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
)

226 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
a˘uÆCÆl
(
«me
);

227  &
gFun˘i⁄CÆl
;

230 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
)

232  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

235 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
)

237  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

240 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

242  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

245 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
)

247  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

250 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
)

252  
cuºítMockSuµ‹t
->
£tD©aObje˘
(
«me
, 
ty≥
, 
vÆue
);

255 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
)

257  
gëMockVÆueCFromNamedVÆue
(
cuºítMockSuµ‹t
->
gëD©a
(
«me
));

260 
checkEx≥˘©i⁄s_c
()

262 
cuºítMockSuµ‹t
->
checkEx≥˘©i⁄s
();

265 
ex≥˘edCÆlsLe·_c
()

267  
cuºítMockSuµ‹t
->
ex≥˘edCÆlsLe·
();

270 
˛ór_c
()

272 
cuºítMockSuµ‹t
->
˛ór
();

275 
MockSuµ‹t_c
* 
mock_c
()

277 
cuºítMockSuµ‹t
 = &
mock
();

278  &
gMockSuµ‹t
;

281 
MockSuµ‹t_c
* 
mock_sc›e_c
(c⁄° * 
sc›e
)

283 
cuºítMockSuµ‹t
 = &
mock
(
sc›e
);

284  &
gMockSuµ‹t
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\OrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/OrdîedTe°.h
"

32 
OrdîedTe°
* 
	gOrdîedTe°
::
_‹dîedTe°sHód
 = 0;

34 
	gOrdîedTe°
::
	$OrdîedTe°
() :

35 
	$_√xtOrdîedTe°
(0)

37 
	}
}

39 
OrdîedTe°
::~
	$OrdîedTe°
()

41 
	}
}

43 
OrdîedTe°
::
	$gëLevñ
()

45  
_Àvñ
;

46 
	}
}

48 
	gOrdîedTe°
::
	$£tLevñ
(
Àvñ
)

50 
_Àvñ
 = 
Àvñ
;

51 
	}
}

53 
	gOrdîedTe°
::
	$£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
)

55 
_‹dîedTe°sHód
 = 
ã°
;

56 
	}
}

58 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëOrdîedTe°Hód
()

60  
_‹dîedTe°sHód
;

61 
	}
}

63 
boﬁ
 
	gOrdîedTe°
::
	$fú°OrdîedTe°
()

65  (
	`gëOrdîedTe°Hód
() == 0);

66 
	}
}

68 
OrdîedTe°
* 
	gOrdîedTe°
::
	$addOrdîedTe°
(
OrdîedTe°
* 
ã°
)

70 
Uã°
::
	`addTe°
(
ã°
);

71 
_√xtOrdîedTe°
 = 
ã°
;

72  
this
;

73 
	}
}

75 
	gOrdîedTe°
::
	$addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
)

77 
Te°Regi°ry
 *
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

79 i‡(
ªg
->
	`gëFú°Te°
()->
	`isNuŒ
(Ë|| 
	`gëOrdîedTe°Hód
()

80 =
ªg
->
	`gëFú°Te°
()Ëªg->
	`addTe°
(
ã°
);

81 
ªg
->
	`gëTe°WôhNext
(
	`gëOrdîedTe°Hód
())->
	`addTe°
(
ã°
);

83 
ã°
->
_√xtOrdîedTe°
 = 
	`gëOrdîedTe°Hód
();

84 
	`£tOrdîedTe°Hód
(
ã°
);

85 
	}
}

87 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëNextOrdîedTe°
()

89  
_√xtOrdîedTe°
;

90 
	}
}

92 
	gOrdîedTe°In°ÆÀr
::
	$OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
,

93 c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

94 
löeNumbî
, 
Àvñ
)

96 
ã°
->
	`£tTe°Name
(
ã°Name
);

97 
ã°
->
	`£tGroupName
(
groupName
);

98 
ã°
->
	`£tFûeName
(
fûeName
);

99 
ã°
->
	`£tLöeNumbî
(
löeNumbî
);

100 
ã°
->
	`£tLevñ
(
Àvñ
);

102 i‡(
OrdîedTe°
::
	`fú°OrdîedTe°
()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(
ã°
);

103 
	`addOrdîedTe°InOrdî
(
ã°
);

104 
	}
}

106 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
)

108 i‡(
ã°
->
	`gëLevñ
(Ë< 
OrdîedTe°
::
	`gëOrdîedTe°Hód
()->gëLevñ()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(

109 
ã°
);

110 
	`addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
ã°
);

111 
	}
}

113 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(

114 
OrdîedTe°
* 
ã°
)

116 
OrdîedTe°
* 
cuºít
 = OrdîedTe°::
	`gëOrdîedTe°Hód
();

117 
cuºít
->
	`gëNextOrdîedTe°
()) {

119 i‡(
cuºít
->
	`gëNextOrdîedTe°
()->
	`gëLevñ
(Ë> 
ã°
->getLevel()) {

120 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

121 
cuºít
->
	`addOrdîedTe°
(
ã°
);

124 
cuºít
 = cuºít->
	`gëNextOrdîedTe°
();

126 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

127 
cuºít
->
	`addOrdîedTe°
(
ã°
);

128 
	}
}

130 
	gOrdîedTe°In°ÆÀr
::~
	$OrdîedTe°In°ÆÀr
()

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\CommandLineArguments.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gComm™dLöeArgumíts
::
	$Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
) :

33 
	`ac_
(
ac
), 
	`av_
(
av
), 
	`vîbo£_
(
Ál£
), 
	`ª≥©_
(1), 
	`groupFûãr_
(""), 
	`«meFûãr_
(""), 
	$ouçutTy≥_
(
OUTPUT_ECLIPSE
)

35 
	}
}

37 
	gComm™dLöeArgumíts
::~
	$Comm™dLöeArgumíts
()

39 
	}
}

41 
boﬁ
 
Comm™dLöeArgumíts
::
	$∑r£
(
Te°Plugö
* 
∂ugö
)

43 
boﬁ
 
c‹ª˘P¨amëîs
 = 
åue
;

44 
i
 = 1; i < 
ac_
; i++) {

45 
Sim∂eSåög
 
¨gumít
 = 
av_
[
i
];

46 i‡(
¨gumít
 ="-v"Ë
vîbo£_
 = 
åue
;

47 i‡(
¨gumít
.
	`°¨tsWôh
("-r")Ë
	`SëRïótCou¡
(
ac_
, 
av_
, 
i
);

48 i‡(
¨gumít
.
	`°¨tsWôh
("-g")Ë
	`SëGroupFûãr
(
ac_
, 
av_
, 
i
);

49 i‡(
¨gumít
.
	`°¨tsWôh
("-n")Ë
	`SëNameFûãr
(
ac_
, 
av_
, 
i
);

50 i‡(
¨gumít
.
	`°¨tsWôh
("-o")Ë
c‹ª˘P¨amëîs
 = 
	`SëOuçutTy≥
(
ac_
, 
av_
, 
i
);

51 i‡(
¨gumít
.
	`°¨tsWôh
("-p")Ë
c‹ª˘P¨amëîs
 = 
∂ugö
->
	`∑r£AŒArgumíts
(
ac_
, 
av_
, 
i
);

52 
c‹ª˘P¨amëîs
 = 
Ál£
;

54 i‡(
c‹ª˘P¨amëîs
 =
Ál£
) {

55  
Ál£
;

58  
åue
;

59 
	}
}

61 c⁄° * 
	gComm™dLöeArgumíts
::
	$ußge
() const

64 
	}
}

66 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isVîbo£
() const

68  
vîbo£_
;

69 
	}
}

71 
	gComm™dLöeArgumíts
::
	$gëRïótCou¡
() const

73  
ª≥©_
;

74 
	}
}

76 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëGroupFûãr
() const

78  
groupFûãr_
;

79 
	}
}

81 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëNameFûãr
() const

83  
«meFûãr_
;

84 
	}
}

86 
	gComm™dLöeArgumíts
::
	$SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
i
)

88 
ª≥©_
 = 0;

90 
Sim∂eSåög
 
	`ª≥©P¨amëî
(
av
[
i
]);

91 i‡(
ª≥©P¨amëî
.
	`size
(Ë> 2Ë
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
] + 2);

92 i‡(
i
 + 1 < 
ac
) {

93 
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
 + 1]);

94 i‡(
ª≥©_
 !0Ë
i
++;

97 i‡(0 =
ª≥©_
)Ñepeat_ = 2;

99 
	}
}

101 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
)

103 
Sim∂eSåög
 
	`∑ømëî
(
av
[
i
]);

104 i‡(
∑ømëî
.
	`size
(Ë> 2Ë 
av
[
i
] + 2;

105 i‡(
i
 + 1 < 
ac
Ë 
av
[++i];

107 
	}
}

109 
	gComm™dLöeArgumíts
::
	$SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

111 
Sim∂eSåög
 
gf
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

112 
groupFûãr_
 = 
gf
;

113 
	}
}

115 
	gComm™dLöeArgumíts
::
	$SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

117 
«meFûãr_
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

118 
	}
}

120 
boﬁ
 
	gComm™dLöeArgumíts
::
	$SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
i
)

122 
Sim∂eSåög
 
ouçutTy≥
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

123 i‡(
ouçutTy≥
.
	`size
(Ë=0Ë 
Ál£
;

125 i‡(
ouçutTy≥
 == "normal" || outputType == "eclipse") {

126 
ouçutTy≥_
 = 
OUTPUT_ECLIPSE
;

127  
åue
;

129 i‡(
ouçutTy≥
 == "junit") {

130 
ouçutTy≥_
 = 
OUTPUT_JUNIT
;

131  
åue
;

133  
Ál£
;

134 
	}
}

136 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isE˛ù£Ouçut
() const

138  
ouçutTy≥_
 =
OUTPUT_ECLIPSE
;

139 
	}
}

141 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isJUnôOuçut
() const

143  
ouçutTy≥_
 =
OUTPUT_JUNIT
;

144 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\CommandLineTestRunner.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/JUnôTe°Ouçut.h
"

32 
	~"CµUTe°/Te°Regi°ry.h
"

34 
	gComm™dLöeTe°Ru¬î
::
	$Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
* 
ouçut
) :

35 
	`ouçut_
(
ouçut
), 
	$jUnôOuçut_
(
√w
 
JUnôTe°Ouçut
)

37 
¨gumíts_
 = 
√w
 
	`Comm™dLöeArgumíts
(
ac
, 
av
);

38 
	}
}

40 
	gComm™dLöeTe°Ru¬î
::~
	$Comm™dLöeTe°Ru¬î
()

42 
dñëe
 
¨gumíts_
;

43 
dñëe
 
jUnôOuçut_
;

44 
	}
}

46 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, ** 
av
)

48  
	`RunAŒTe°s
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
));

49 
	}
}

51 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, c⁄° ** 
av
)

53 
ªsu…
 = 0;

54 
C⁄sﬁeTe°Ouçut
 
ouçut
;

56 
Mem‹yLókW¨nögPlugö
 
	`memLókW¨n
(
DEF_PLUGIN_MEM_LEAK
);

57 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
memLókW¨n
);

60 
Comm™dLöeTe°Ru¬î
 
	`ru¬î
(
ac
, 
av
, &
ouçut
);

61 
ªsu…
 = 
ru¬î
.
	`runAŒTe°sMaö
();

64 i‡(
ªsu…
 == 0) {

65 
ouçut
 << 
memLókW¨n
.
	`FöÆRï‹t
(0);

67  
ªsu…
;

68 
	}
}

70 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°sMaö
()

72 
ã°Resu…
 = 0;

74 
SëPoöãrPlugö
 
	`pPlugö
(
DEF_PLUGIN_SET_POINTER
);

75 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
pPlugö
);

77 i‡(!
	`∑r£Argumíts
(
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`gëFú°Plugö
()))  1;

79 
ã°Resu…
 = 
	`runAŒTe°s
();

81 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`˛ónup
();

82  
ã°Resu…
;

83 
	}
}

85 
	gComm™dLöeTe°Ru¬î
::
	$öôülizeTe°Run
()

87 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`groupFûãr
(
¨gumíts_
->
	`gëGroupFûãr
());

88 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`«meFûãr
(
¨gumíts_
->
	`gëNameFûãr
());

89 i‡(
¨gumíts_
->
	`isVîbo£
()Ë
ouçut_
->
	`vîbo£
();

90 
	}
}

92 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°s
()

94 
	`öôülizeTe°Run
();

95 
lo›Cou¡
 = 0;

96 
ÁûuªCou¡
 = 0;

97 
ª≥©_
 = 
¨gumíts_
->
	`gëRïótCou¡
();

99 
lo›Cou¡
++ < 
ª≥©_
) {

100 
ouçut_
->
	`¥ötTe°Run
(
lo›Cou¡
, 
ª≥©_
);

101 
Te°Resu…
 
	`å
(*
ouçut_
);

102 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`runAŒTe°s
(
å
);

103 
ÁûuªCou¡
 +
å
.
	`gëFaûuªCou¡
();

106  
ÁûuªCou¡
;

107 
	}
}

109 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$∑r£Argumíts
(
Te°Plugö
* 
∂ugö
)

111 i‡(
¨gumíts_
->
	`∑r£
(
∂ugö
)) {

112 i‡(
¨gumíts_
->
	`isJUnôOuçut
()) {

113 
ouçut_
 = 
jUnôOuçut_
;

115  
åue
;

118 
ouçut_
->
	`¥öt
(
¨gumíts_
->
	`ußge
());

119  
Ál£
;

121 
	}
}

123 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$isVîbo£
()

125  
¨gumíts_
->
	`isVîbo£
();

126 
	}
}

128 
	gComm™dLöeTe°Ru¬î
::
	$gëRïótCou¡
()

130  
¨gumíts_
->
	`gëRïótCou¡
();

131 
	}
}

133 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëGroupFûãr
()

135  
¨gumíts_
->
	`gëGroupFûãr
();

136 
	}
}

138 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëNameFûãr
()

140  
¨gumíts_
->
	`gëNameFûãr
();

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\JUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Te°Faûuª.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	sJUnôTe°Ca£Resu…Node


36 
JUnôTe°Ca£Resu…Node
() :

37 
execTime_
(0), 
Áûuª_
(0), 
√xt_
(0)

41 
Sim∂eSåög
 
	m«me_
;

42 
	mexecTime_
;

43 
Te°Faûuª
* 
	mÁûuª_
;

44 
JUnôTe°Ca£Resu…Node
* 
	m√xt_
;

47 
	sJUnôTe°GroupResu…


49 
JUnôTe°GroupResu…
() :

50 
ã°Cou¡_
(0), 
ÁûuªCou¡_
(0), 
groupExecTime_
(0), 
hód_
(0), 
èû_
(0)

54 
	mã°Cou¡_
;

55 
	mÁûuªCou¡_
;

56 
	m°¨tTime_
;

57 
	mgroupExecTime_
;

58 
Sim∂eSåög
 
	mgroup_
;

59 
JUnôTe°Ca£Resu…Node
* 
	mhód_
;

60 
JUnôTe°Ca£Resu…Node
* 
	mèû_
;

63 
	sJUnôTe°OuçutIm∂


65 
JUnôTe°GroupResu…
 
	mªsu…s_
;

66 
Pœtf‹mS≥cificFûe
 
	mfûe_
;

69 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

70 
	$im∂_
(
√w
 
JUnôTe°OuçutIm∂
)

72 
	}
}

74 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

76 
	`ª£tTe°GroupResu…
();

77 
dñëe
 
im∂_
;

78 
	}
}

80 
	gJUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

82 
im∂_
->
ªsu…s_
.
ã°Cou¡_
 = 0;

83 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
 = 0;

84 
im∂_
->
ªsu…s_
.
group_
 = "";

85 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

86 
cur
) {

87 
JUnôTe°Ca£Resu…Node
* 
tmp
 = 
cur
->
√xt_
;

89 i‡(
cur
->
Áûuª_
Ë
dñëe
 cur->failure_;

90 
dñëe
 
cur
;

91 
cur
 = 
tmp
;

93 
im∂_
->
ªsu…s_
.
hód_
 = 0;

94 
im∂_
->
ªsu…s_
.
èû_
 = 0;

95 
	}
}

97 
	gJUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

99 
	}
}

101 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

103 
	}
}

105 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

107 
im∂_
->
ªsu…s_
.
èû_
->
execTime_


108 
ªsu…
.
	`gëCuºítTe°TŸÆExecuti⁄Time
();

109 
	}
}

111 
	gJUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& )

113 
	}
}

115 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

117 
im∂_
->
ªsu…s_
.
groupExecTime_
 = 
ªsu…
.
	`gëCuºítGroupTŸÆExecuti⁄Time
();

118 
	`wrôeTe°GroupToFûe
();

119 
	`ª£tTe°GroupResu…
();

120 
	}
}

122 
	gJUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

124 
im∂_
->
ªsu…s_
.
ã°Cou¡_
++;

125 
im∂_
->
ªsu…s_
.
group_
 = 
ã°
.
	`gëGroup
();

126 
im∂_
->
ªsu…s_
.
°¨tTime_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

128 i‡(
im∂_
->
ªsu…s_
.
èû_
 == 0) {

129 
im∂_
->
ªsu…s_
.
hód_
 = im∂_->ªsu…s_.
èû_


130 
√w
 
JUnôTe°Ca£Resu…Node
;

133 
im∂_
->
ªsu…s_
.
èû_
->
√xt_
 = 
√w
 
JUnôTe°Ca£Resu…Node
;

134 
im∂_
->
ªsu…s_
.
èû_
 = im∂_->ªsu…s_.èû_->
√xt_
;

136 
im∂_
->
ªsu…s_
.
èû_
->
«me_
 = 
ã°
.
	`gëName
();

137 
	}
}

139 
Sim∂eSåög
 
	$¸óãFûeName
(c⁄° 
Sim∂eSåög
& 
group
)

141 
Sim∂eSåög
 
fûeName
 = "cpputest_";

142 
fûeName
 +
group
;

143 
fûeName
 += ".xml";

144  
fûeName
;

145 
	}
}

147 
	gJUnôTe°Ouçut
::
	$wrôeXmlHódî
()

149 
	`wrôeToFûe
("<?xml version=\"1.0\"Éncoding=\"UTF-8\" ?>\n");

150 
	}
}

152 
	gJUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

154 
Sim∂eSåög


155 
buf
 =

156 
	`SåögFromF‹m©
(

158 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
,

159 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

160 
im∂_
->
ªsu…s_
.
ã°Cou¡_
,

161 (Ë(
im∂_
->
ªsu…s_
.
groupExecTime_
 / 1000), () (impl_->results_.groupExecTime_ % 1000),

162 
	`GëPœtf‹mS≥cificTimeSåög
());

163 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

164 
	}
}

166 
	gJUnôTe°Ouçut
::
	$wrôePr›îtõs
()

168 
	`wrôeToFûe
("<properties>\n");

169 
	`wrôeToFûe
("</properties>\n");

170 
	}
}

172 
	gJUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

174 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

175 
cur
) {

176 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

178 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

179 
cur
->
«me_
.
	`asCh¨Såög
(), (Ë(cur->
execTime_
 / 1000), ()(cur->execTime_ % 1000));

180 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

182 i‡(
cur
->
Áûuª_
) {

183 
	`wrôeFaûuª
(
cur
);

185 
	`wrôeToFûe
("</testcase>\n");

186 
cur
 = cur->
√xt_
;

188 
	}
}

190 
	gJUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

192 
Sim∂eSåög
 
mesßge
 = 
node
->
Áûuª_
->
	`gëMesßge
().
	`asCh¨Såög
();

193 
mesßge
.
	`ª∂a˚
('"', '\'');

194 
mesßge
.
	`ª∂a˚
('<', '[');

195 
mesßge
.
	`ª∂a˚
('>', ']');

196 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

197 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

199 
node
->
Áûuª_
->
	`gëFûeName
().
	`asCh¨Såög
(),

200 
node
->
Áûuª_
->
	`gëFaûuªLöeNumbî
(), 
mesßge
.
	`asCh¨Såög
());

201 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

202 
	`wrôeToFûe
("</failure>\n");

203 
	}
}

205 
	gJUnôTe°Ouçut
::
	$wrôeFûeEndög
()

207 
	`wrôeToFûe
("<system-out></system-out>\n");

208 
	`wrôeToFûe
("<system-err></system-err>\n");

209 
	`wrôeToFûe
("</testsuite>");

210 
	}
}

212 
	gJUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

214 
	`›íFûeF‹Wrôe
(
	`¸óãFûeName
(
im∂_
->
ªsu…s_
.
group_
));

215 
	`wrôeXmlHódî
();

216 
	`wrôeTe°SuôeSummîy
();

217 
	`wrôePr›îtõs
();

218 
	`wrôeTe°Ca£s
();

219 
	`wrôeFûeEndög
();

220 
	`˛o£Fûe
();

221 
	}
}

223 
	gJUnôTe°Ouçut
::
	$vîbo£
()

225 
	}
}

227 
JUnôTe°Ouçut
::
	$¥öt
(const *)

229 
	}
}

231 
JUnôTe°Ouçut
::
	$¥öt
()

233 
	}
}

235 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

237 i‡(
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 == 0) {

238 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
++;

239 
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 = 
√w
 
	`Te°Faûuª
(
Áûuª
);

241 
	}
}

243 
	gJUnôTe°Ouçut
::
	$¥ötTe°Run
(, )

245 
	}
}

247 
	gJUnôTe°Ouçut
::
	$Êush
()

249 
	}
}

251 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

253 
im∂_
->
fûe_
 = 
	`Pœtf‹mS≥cificFO≥n
(
fûeName
.
	`asCh¨Såög
(), "w");

254 
	}
}

256 
	gJUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

258 
	`Pœtf‹mS≥cificFPuts
(
buf„r
.
	`asCh¨Såög
(), 
im∂_
->
fûe_
);

259 
	}
}

261 
	gJUnôTe°Ouçut
::
	$˛o£Fûe
()

263 
	`Pœtf‹mS≥cificFClo£
(
im∂_
->
fûe_
);

264 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$checkedMÆloc
(
size_t
 
size
)

34 * 
mem
 = (*Ë
	`Pœtf‹mS≥cificMÆloc
(
size
);

35 i‡(
mem
 == 0)

36 
	`FAIL
("mallocÑeturnedÇulÖointer");

37  
mem
;

38 
	}
}

40 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAŒoˇt‹
 = 0;

41 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAºayAŒoˇt‹
 = 0;

42 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítMÆlocAŒoˇt‹
 = 0;

44 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

46  
	`Pœtf‹mS≥cificSåCmp
(
this
->
	`«me
(), 
Æloˇt‹
->name()) == 0;

47 
	}
}

49 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

51 
cuºítNewAŒoˇt‹
 = 
Æloˇt‹
;

52 
	}
}

54 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAŒoˇt‹
()

56 i‡(
cuºítNewAŒoˇt‹
 =0Ë
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

57  
cuºítNewAŒoˇt‹
;

58 
	}
}

60 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹ToDeÁu…
()

62 
cuºítNewAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

63 
	}
}

65 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

67 
cuºítNewAºayAŒoˇt‹
 = 
Æloˇt‹
;

68 
	}
}

70 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAºayAŒoˇt‹
()

72 i‡(
cuºítNewAºayAŒoˇt‹
 =0Ë
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

73  
cuºítNewAºayAŒoˇt‹
;

74 
	}
}

76 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹ToDeÁu…
()

78 
cuºítNewAºayAŒoˇt‹
 = 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

79 
	}
}

81 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

83 
cuºítMÆlocAŒoˇt‹
 = 
Æloˇt‹
;

84 
	}
}

86 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítMÆlocAŒoˇt‹
()

88 i‡(
cuºítMÆlocAŒoˇt‹
 =0Ë
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89  
cuºítMÆlocAŒoˇt‹
;

90 
	}
}

92 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹ToDeÁu…
()

94 
cuºítMÆlocAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

95 
	}
}

97 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

99  
Ál£
;

100 
	}
}

102 * 
	gMem‹yLókAŒoˇt‹
::
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

104  
	`Æloc_mem‹y
(
size
, "MemoryLeakNode", 1);

105 
	}
}

107 
	gMem‹yLókAŒoˇt‹
::
	$‰ìMem‹yLókNode
(* 
mem‹y
)

109 
	`‰ì_mem‹y
(
mem‹y
, "MemoryLeakNode", 1);

110 
	}
}

112 * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

114  
	`checkedMÆloc
(
size
);

115 
	}
}

117 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

119 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

120 
	}
}

122 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$«me
()

125 
	}
}

127 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_«me
()

130 
	}
}

132 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_«me
()

135 
	}
}

137 
boﬁ
 
	gSènd¨dMÆlocAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

139  
åue
;

140 
	}
}

142 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dMÆlocAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

144 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

145  &
Æloˇt‹
;

146 
	}
}

148 * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

150  
	`checkedMÆloc
(
size
);

151 
	}
}

153 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

155 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

156 
	}
}

158 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$«me
()

161 
	}
}

163 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_«me
()

166 
	}
}

168 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_«me
()

171 
	}
}

173 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

175 
Sènd¨dNewAŒoˇt‹
 
Æloˇt‹
;

176  &
Æloˇt‹
;

177 
	}
}

179 * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

181  
	`checkedMÆloc
(
size
);

182 
	}
}

184 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

186 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

187 
	}
}

189 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$«me
()

192 
	}
}

194 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_«me
()

197 
	}
}

199 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_«me
()

202 
	}
}

204 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAºayAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

206 
Sènd¨dNewAºayAŒoˇt‹
 
Æloˇt‹
;

207  &
Æloˇt‹
;

208 
	}
}

209 * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 , const *, )

212 
	}
}

214 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_mem‹y
(* , const *, )

216 
	}
}

218 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$«me
()

221 
	}
}

223 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_«me
()

226 
	}
}

228 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_«me
()

231 
	}
}

233 
Mem‹yLókAŒoˇt‹
* 
	gNuŒUnknownAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

235 
NuŒUnknownAŒoˇt‹
 
Æloˇt‹
;

236  &
Æloˇt‹
;

237 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakDetector.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	#UNKNOWN
 ((*)("<unknown>"))

	)

34 
	gSim∂eSåögBuf„r
::
	$Sim∂eSåögBuf„r
() :

35 
	`posôi⁄s_fûÀd_
(0), 
	`wrôe_limô_
(
SIMPLE_STRING_BUFFER_LEN
-1)

37 
	}
}

39 
	gSim∂eSåögBuf„r
::
	$˛ór
()

41 
posôi⁄s_fûÀd_
 = 0;

42 
buf„r_
[0] = '\0';

43 
	}
}

45 
	gSim∂eSåögBuf„r
::
	$add
(c⁄° * 
f‹m©
, ...)

47 
cou¡
 = 0;

48 
posôi⁄s_À·
 = 
wrôe_limô_
 - 
posôi⁄s_fûÀd_
;

49 i‡(
posôi⁄s_À·
 <= 0) ;

51 
va_li°
 
¨gumíts
;

52 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

53 
cou¡
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf„r_
 + 
posôi⁄s_fûÀd_
, 
posôi⁄s_À·
+1, 
f‹m©
, 
¨gumíts
);

54 i‡(
cou¡
 > 0Ë
posôi⁄s_fûÀd_
 += count;

55 i‡(
posôi⁄s_fûÀd_
 > 
wrôe_limô_
)Öositions_filled_ = write_limit_;

56 
	`va_íd
(
¨gumíts
);

57 
	}
}

59 * 
	gSim∂eSåögBuf„r
::
	$toSåög
()

61  
buf„r_
;

62 
	}
}

64 
	gSim∂eSåögBuf„r
::
	$£tWrôeLimô
(
wrôe_limô
)

66 
wrôe_limô_
 = 
wrôe_limô
;

67 i‡(
wrôe_limô_
 > 
SIMPLE_STRING_BUFFER_LEN
-1)

68 
wrôe_limô_
 = 
SIMPLE_STRING_BUFFER_LEN
-1;

69 
	}
}

70 
	gSim∂eSåögBuf„r
::
	$ª£tWrôeLimô
()

72 
wrôe_limô_
 = 
SIMPLE_STRING_BUFFER_LEN
-1;

73 
	}
}

75 
boﬁ
 
	gSim∂eSåögBuf„r
::
	$ªachedItsC≠acôy
()

77  
posôi⁄s_fûÀd_
 >
wrôe_limô_
;

78 
	}
}

81 
	gMem‹yLókDëe˘‹Node
::
	$öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
)

83 
mem‹y_
 = 
mem‹y
;

84 
size_
 = 
size
;

85 
Æloˇt‹_
 = 
Æloˇt‹
;

86 
≥riod_
 = 
≥riod
;

87 
fûe_
 = 
fûe
;

88 
löe_
 = 
löe
;

89 
	}
}

93 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

95  
≥riod
 =
mem_Àak_≥riod_Æl
 || 
node
->
≥riod_
 =≥riod || (node->≥riod_ !
mem_Àak_≥riod_dißbÀd
 &&Öîiod =
mem_Àak_≥riod_íabÀd
);

96 
	}
}

98 
	gMem‹yLókDëe˘‹Li°
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

100 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

101 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

103 
cur
) {

104 i‡(
	`isInPîiod
(
cur
, 
≥riod
)) {

105 i‡(
¥ev
) {

106 
¥ev
->
√xt_
 = 
cur
->next_;

107 
cur
 = 
¥ev
;

110 
hód_
 = 
cur
->
√xt_
;

111 
cur
 = 
hód_
;

115 
¥ev
 = 
cur
;

116 
cur
 = cur->
√xt_
;

118 
	}
}

120 
	gMem‹yLókDëe˘‹Li°
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

122 
node
->
√xt_
 = 
hód_
;

123 
hód_
 = 
node
;

124 
	}
}

126 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$ªmoveNode
(* 
mem‹y
)

128 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

129 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

130 
cur
) {

131 i‡(
cur
->
mem‹y_
 =
mem‹y
) {

132 i‡(
¥ev
) {

133 
¥ev
->
√xt_
 = 
cur
->next_;

134  
cur
;

137 
hód_
 = 
cur
->
√xt_
;

138  
cur
;

141 
¥ev
 = 
cur
;

142 
cur
 = cur->
√xt_
;

145 
	}
}

147 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëLókFrom
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

149 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
node
; cur; cu∏cur->
√xt_
)

150 i‡(
	`isInPîiod
(
cur
, 
≥riod
))  cur;

152 
	}
}

154 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

156  
	`gëLókFrom
(
hód_
, 
≥riod
);

157 
	}
}

159 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

161  
	`gëLókFrom
(
node
->
√xt_
, 
≥riod
);

162 
	}
}

164 
	gMem‹yLókDëe˘‹Li°
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

166 
tŸÆ_Àaks
 = 0;

167 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
) {

168 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë
tŸÆ_Àaks
++;

170  
tŸÆ_Àaks
;

171 
	}
}

173 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

175 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
)

176 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë 
åue
;

177  
Ál£
;

178 
	}
}

182 
	gMem‹yLókDëe˘‹TabÀ
::
	$hash
(* 
mem‹y
)

184  ((Ë
mem‹y
Ë% 
hash_¥ime
;

185 
	}
}

187 
	gMem‹yLókDëe˘‹TabÀ
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

189 
i
 = 0; i < 
hash_¥ime
; i++)

190 
èbÀ_
[
i
].
	`˛órAŒAccou¡ög
(
≥riod
);

191 
	}
}

193 
	gMem‹yLókDëe˘‹TabÀ
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

195 
èbÀ_
[
	`hash
(
node
->
mem‹y_
)].
	`addNewNode
(node);

196 
	}
}

198 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$ªmoveNode
(* 
mem‹y
)

200  
èbÀ_
[
	`hash
(
mem‹y
)].
	`ªmoveNode
(memory);

201 
	}
}

203 
boﬁ
 
	gMem‹yLókDëe˘‹TabÀ
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

205 
i
 = 0; i < 
hash_¥ime
; i++)

206 i‡(
èbÀ_
[
i
].
	`hasLóks
(
≥riod
)Ë 
åue
;

207  
Ál£
;

208 
	}
}

210 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

212 
tŸÆ_Àaks
 = 0;

213 
i
 = 0; i < 
hash_¥ime
; i++)

214 
tŸÆ_Àaks
 +
èbÀ_
[
i
].
	`gëTŸÆLóks
(
≥riod
);

215  
tŸÆ_Àaks
;

216 
	}
}

218 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

220 
i
 = 0; i < 
hash_¥ime
; i++) {

221 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

222 i‡(
node
) Çode;

225 
	}
}

227 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
Àak
, 
MemLókPîiod
 
≥riod
)

229 
i
 = 
	`hash
(
Àak
->
mem‹y_
);

230 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëNextLók
(
Àak
, 
≥riod
);

231 i‡(
node
) Çode;

233 ++
i
; i < 
hash_¥ime
; i++) {

234 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

235 i‡(
node
) Çode;

238 
	}
}

242 
	gMem‹yLókDëe˘‹
::
	$Mem‹yLókDëe˘‹
()

244 
	}
}

246 
Mem‹yLókDëe˘‹
::
	$öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
)

248 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

249 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

250 
ªp‹ãr_
 = 
ªp‹ãr
;

251 
ouçut_buf„r_
 = 
	`Sim∂eSåögBuf„r
();

252 
mem‹yTabÀ_
 = 
	`Mem‹yLókDëe˘‹TabÀ
();

253 
	}
}

255 
	gMem‹yLókDëe˘‹
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

257 
mem‹yTabÀ_
.
	`˛órAŒAccou¡ög
(
≥riod
);

258 
	}
}

260 
	gMem‹yLókDëe˘‹
::
	$°¨tCheckög
()

262 
ouçut_buf„r_
.
	`˛ór
();

263 
cuºít_≥riod_
 = 
mem_Àak_≥riod_checkög
;

264 
	}
}

266 
	gMem‹yLókDëe˘‹
::
	$°›Checkög
()

268 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

269 
	}
}

271 
	gMem‹yLókDëe˘‹
::
	$íabÀ
()

273 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

274 
	}
}

276 
	gMem‹yLókDëe˘‹
::
	$dißbÀ
()

278 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

279 
	}
}

281 
	gMem‹yLókDëe˘‹
::
	$dißbÀAŒoˇti⁄Ty≥Checkög
()

283 
doAŒoˇti⁄Ty≥Checkög_
 = 
Ál£
;

284 
	}
}

286 
	gMem‹yLókDëe˘‹
::
	$íabÀAŒoˇti⁄Ty≥Checkög
()

288 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

289 
	}
}

291 
	gMem‹yLókDëe˘‹
::
	$ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
, 
ÆlocLöe
, 
size_t
 
ÆlocSize
, 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
, 
‰ìLöe
,

292 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
)

294 
ouçut_buf„r_
.
	`add
(
mesßge
);

295 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_ALLOC_LOCATION
, 
ÆlocFûe
, 
ÆlocLöe
, 
ÆlocSize
, 
ÆlocAŒoˇt‹
->
	`Æloc_«me
());

296 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_DEALLOC_LOCATION
, 
‰ìFûe
, 
‰ìLöe
, 
‰ìAŒoˇt‹
->
	`‰ì_«me
());

297 
ªp‹ãr_
->
	`Áû
(
ouçut_buf„r_
.
	`toSåög
());

298 
	}
}

300 
size_t
 
	$ˇlcuœãI¡Alig√dSize
(
size_t
 
size
)

302  ((Ë- (
size
 % ())) + size;

303 
	}
}

305 
size_t
 
	gMem‹yLókDëe˘‹
::
	$sizeOfMem‹yWôhC‹ru±i⁄Info
(
size_t
 
size
)

307  
	`ˇlcuœãI¡Alig√dSize
(
size
 + 
mem‹y_c‹ru±i⁄_buf„r_size
);

308 
	}
}

310 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹
::
	$gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
mem‹y_size
)

312  (
Mem‹yLókDëe˘‹Node
*Ë(
mem‹y
 + 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
mem‹y_size
));

313 
	}
}

315 
	gMem‹yLókDëe˘‹
::
	$°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
)

317 
node
->
	`öô
(
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
cuºít_≥riod_
, 
fûe
, 
löe
);

318 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
);

319 
mem‹yTabÀ_
.
	`addNewNode
(
node
);

320 
	}
}

322 * 
	gMem‹yLókDëe˘‹
::
	$ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

324 * 
√w_mem‹y
 = (*Ë(
	`Pœtf‹mS≥cificRóŒoc
(
mem‹y
, 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
)));

325 i‡(
√w_mem‹y
 =
NULL
)  NULL;

326 
Mem‹yLókDëe˘‹Node
 *
node
 = (Mem‹yLókDëe˘‹Node*Ë(
Æloˇt‹
->
	`ÆlocMem‹yLókNode
((MemoryLeakDetectorNode)));

327 
	`°‹eLókInf‹m©i⁄
(
node
, 
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

328  
node
->
mem‹y_
;

329 
	}
}

331 
	gMem‹yLókDëe˘‹
::
	$addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

333 
mem‹y
[0] = 'B';

334 
mem‹y
[1] = 'A';

335 
mem‹y
[2] = 'S';

336 
	}
}

338 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

340  
mem‹y
[0] == 'B' && memory[1] == 'A' && memory[2] == 'S';

341 
	}
}

343 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
)

345 i‡(
Æloc_Æloˇt‹
 =
‰ì_Æloˇt‹
Ë 
åue
;

346 i‡(!
doAŒoˇti⁄Ty≥Checkög_
Ë 
åue
;

347  
‰ì_Æloˇt‹
->
	`isOfEquÆTy≥
(
Æloc_Æloˇt‹
);

348 
	}
}

350 
	gMem‹yLókDëe˘‹
::
	$checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

352 i‡(!
	`m©chögAŒoˇti⁄
(
node
->
Æloˇt‹_
, 
Æloˇt‹
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
,Çode->
fûe_
,Çode->
löe_
,Çode->
size_
,Çode->Æloˇt‹_, 
fûe
, 
löe
,állocator);

353 i‡(!
	`vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_MEMORY_CORRUPTION
,Çode->
fûe_
,Çode->
löe_
,Çode->size_,Çode->
Æloˇt‹_
, 
fûe
, 
löe
, 
Æloˇt‹
);

354 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()ËÆloˇt‹->
	`‰ìMem‹yLókNode
((*Ë
node
);

355 
	}
}

357 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
)

359  
	`ÆlocMem‹y
(
Æloˇt‹
, 
size
, 
UNKNOWN
, 0);

360 
	}
}

362 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

370 * 
mem‹y
;

371 
Mem‹yLókDëe˘‹Node
* 
node
;

372 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()) {

373 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
), 
fûe
, 
löe
);

374 i‡(
mem‹y
 =
NULL
)  NULL;

375 
node
 = (
Mem‹yLókDëe˘‹Node
*Ë
Æloˇt‹
->
	`ÆlocMem‹yLókNode
((MemoryLeakDetectorNode));

378 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
Ë+ (
Mem‹yLókDëe˘‹Node
), 
fûe
, 
löe
);

379 i‡(
mem‹y
 =
NULL
)  NULL;

380 
node
 = 
	`gëNodeFromMem‹yPoöãr
(
mem‹y
, 
size
);

383 
	`°‹eLókInf‹m©i⁄
(
node
, 
mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

384  
node
->
mem‹y_
;

385 
	}
}

387 
	gMem‹yLókDëe˘‹
::
	$ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
)

389 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

390 
	}
}

392 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

394 i‡(
mem‹y
 == 0) ;

396 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

397 i‡(
node
 =
NULL
) {

398 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

401 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

402 
Æloˇt‹
->
	`‰ì_mem‹y
((*Ë
mem‹y
, 
fûe
, 
löe
);

403 
	}
}

405 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
)

407 
	`dóŒocMem‹y
(
Æloˇt‹
, (*Ë
mem‹y
, 
UNKNOWN
, 0);

408 
	}
}

410 * 
	gMem‹yLókDëe˘‹
::
	$ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

412 i‡(
mem‹y
) {

413 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
(
mem‹y
);

414 i‡(
node
 =
NULL
) {

415 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

416  
NULL
;

418 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

420  
	`ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Æloˇt‹
, 
mem‹y
, 
size
, 
fûe
, 
löe
);

421 
	}
}

423 
	gMem‹yLókDëe˘‹
::
	$C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
)

425 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
≥riod
);

426 
tŸÆ_Àaks
 = 0;

427 
boﬁ
 
giveW¨nögOnUsögMÆloc
 = 
Ál£
;

428 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_HEADER
);

429 
ouçut_buf„r_
.
	`£tWrôeLimô
(
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 - 
MEM_LEAK_NORMAL_MALLOC_FOOTER_SIZE
);

431 
Àak
) {

432 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_LEAK
, 
Àak
->
size_
,Üók->
fûe_
,Üók->
löe_
,Üók->
Æloˇt‹_
->
	`Æloc_«me
(),Üók->
mem‹y_
);

433 i‡(
Àak
->
Æloˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
())

434 
giveW¨nögOnUsögMÆloc
 = 
åue
;

435 
tŸÆ_Àaks
++;

436 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
≥riod
);

438 
boﬁ
 
buf„r_ªached_ôs_ˇ∑côy
 = 
ouçut_buf„r_
.
	`ªachedItsC≠acôy
();

439 
ouçut_buf„r_
.
	`ª£tWrôeLimô
();

440 i‡(
buf„r_ªached_ôs_ˇ∑côy
)

441 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_TOO_MUCH
);

442 
ouçut_buf„r_
.
	`add
("%†%d\n", 
MEM_LEAK_FOOTER
, 
tŸÆ_Àaks
);

443 i‡(
giveW¨nögOnUsögMÆloc
)

444 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_ADDITION_MALLOC_WARNING
);

445 
	}
}

447 c⁄° * 
	gMem‹yLókDëe˘‹
::
	$ªp‹t
(
MemLókPîiod
 
≥riod
)

449 i‡(!
mem‹yTabÀ_
.
	`hasLóks
(
≥riod
)Ë 
MEM_LEAK_NONE
;

451 
ouçut_buf„r_
.
	`˛ór
();

452 
	`C⁄°ru˘Mem‹yLókRï‹t
(
≥riod
);

454  
ouçut_buf„r_
.
	`toSåög
();

455 
	}
}

457 
	gMem‹yLókDëe˘‹
::
	$m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
()

459 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
mem_Àak_≥riod_checkög
);

460 
Àak
) {

461 i‡(
Àak
->
≥riod_
 =
mem_Àak_≥riod_checkög
ËÀak->≥riod_ = 
mem_Àak_≥riod_íabÀd
;

462 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
mem_Àak_≥riod_checkög
);

464 
	}
}

466 
	gMem‹yLókDëe˘‹
::
	$tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
)

468  
mem‹yTabÀ_
.
	`gëTŸÆLóks
(
≥riod
);

469 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

30 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 ˛as†
	cMem‹yLókW¨nögRï‹ãr
: 
public
 
Mem‹yLókFaûuª


36 
public
:

37 
vútuÆ
 ~
	$Mem‹yLókW¨nögRï‹ãr
()

41 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

43 
	`FAIL
(
Áû_°rög
);

44 
	}
}

47 
Mem‹yLókW¨nögRï‹ãr
* 
	gglobÆRï‹ãr
 = 0;

48 
Mem‹yLókDëe˘‹
* 
	gglobÆDëe˘‹
 = 0;

50 
	$de°royDëe˘‹
()

52 
	`Pœtf‹mS≥cificFªe
(
globÆDëe˘‹
);

53 
globÆRï‹ãr
->~
	`Mem‹yLókW¨nögRï‹ãr
();

54 
	`Pœtf‹mS≥cificFªe
(
globÆRï‹ãr
);

55 
globÆRï‹ãr
 = 0;

56 
globÆDëe˘‹
 = 0;

57 
	}
}

59 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëGlobÆDëe˘‹
()

61 i‡(
globÆDëe˘‹
 == 0) {

66 
Mem‹yLókW¨nögRï‹ãr
 
ªp‹ãr
;

67 
globÆRï‹ãr
 = (
Mem‹yLókW¨nögRï‹ãr
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakWarningReporter));

68 
	`Pœtf‹mS≥cificMemCpy
(
globÆRï‹ãr
, &
ªp‹ãr
, (
Mem‹yLókW¨nögRï‹ãr
));

70 
globÆDëe˘‹
 = (
Mem‹yLókDëe˘‹
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakDetector));

71 i‡(
globÆDëe˘‹
 == 0)

72 
	`FAIL
("operatorÇew(size, bool)ÇotÉnough memory");

73 
globÆDëe˘‹
->
	`öô
(
globÆRï‹ãr
);

75  
globÆDëe˘‹
;

76 
	}
}

78 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
fú°Plugö_
 = 0;

80 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
	$gëFú°Plugö
()

82  
fú°Plugö_
;

83 
	}
}

85 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëMem‹yLókDëe˘‹
()

87  
memLókDëe˘‹_
;

88 
	}
}

90 
	gMem‹yLókW¨nögPlugö
::
	$ign‹eAŒLóksInTe°
()

92 
ign‹eAŒW¨nögs_
 = 
åue
;

93 
	}
}

95 
	gMem‹yLókW¨nögPlugö
::
	$ex≥˘LóksInTe°
(
n
)

97 
ex≥˘edLóks_
 = 
n
;

98 
	}
}

100 
	gMem‹yLókW¨nögPlugö
::
	$Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
, 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
) :

101 
	`Te°Plugö
(
«me
), 
	`ign‹eAŒW¨nögs_
(
Ál£
), 
	$ex≥˘edLóks_
(0)

103 i‡(
fú°Plugö_
 =0Ëfú°Plugö_ = 
this
;

105 i‡(
loˇlDëe˘‹
Ë
memLókDëe˘‹_
 =ÜocalDetector;

106 
memLókDëe˘‹_
 = 
	`gëGlobÆDëe˘‹
();

108 
memLókDëe˘‹_
->
	`íabÀ
();

109 
	}
}

111 
	gMem‹yLókW¨nögPlugö
::~
	$Mem‹yLókW¨nögPlugö
()

113 i‡(
this
 =
fú°Plugö_
) firstPlugin_ = 0;

114 
	}
}

116 
	gMem‹yLókW¨nögPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& , 
Te°Resu…
& 
ªsu…
)

118 
memLókDëe˘‹_
->
	`°¨tCheckög
();

119 
ÁûuªCou¡_
 = 
ªsu…
.
	`gëFaûuªCou¡
();

120 
	}
}

122 
	gMem‹yLókW¨nögPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

124 
memLókDëe˘‹_
->
	`°›Checkög
();

125 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

127 i‡(!
ign‹eAŒW¨nögs_
 && 
ex≥˘edLóks_
 !
Àaks
 && 
ÁûuªCou¡_
 =
ªsu…
.
	`gëFaûuªCou¡
()) {

128 
Te°Faûuª
 
	`f
(&
ã°
, 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

129 
ªsu…
.
	`addFaûuª
(
f
);

131 
memLókDëe˘‹_
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

132 
ign‹eAŒW¨nögs_
 = 
Ál£
;

133 
ex≥˘edLóks_
 = 0;

134 
	}
}

136 c⁄° * 
	gMem‹yLókW¨nögPlugö
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

138 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
);

139 i‡(
Àaks
 !
toBeDñëedLóks
Ë 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_íabÀd
);

141 
	}
}

143 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


144 #unde‡
√w


146 #i‡
CPPUTEST_USE_STD_CPP_LIB


147 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
Ëi‡(mem‹y =
NULL
Ë
throw
 
°d
::
	`bad_Æloc
();

	)

148 
	#UT_THROW
(
ex˚±
Ë
	`throw
 (ex˚±)

	)

149 
	#UT_THROW_EMPTY
(Ë
	`throw
 ()

	)

151 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
)

	)

152 
	#UT_THROW
(
ex˚±
)

	)

153 
	#UT_THROW_EMPTY
()

	)

156 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

158 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
);

159 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

160  
mem‹y
;

161 
	}
}

163 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

165 *
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

166 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

167  
mem‹y
;

168 
	}
}

170 
›î©‹
 
	$dñëe
(* 
mem
Ë
	$UT_THROW_EMPTY
()

172 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

173 
	}
}

175 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
Ë
UT_THROW
(
°d
::
bad_Æloc
)

177 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
);

178 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

179  
	gmem‹y
;

182 * 
›î©‹
 
	g√w
 [](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
Ë
UT_THROW
(
°d
::
bad_Æloc
)

184 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

185 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

186  
	gmem‹y
;

189 
›î©‹
 
	gdñëe
[](* 
	gmem
Ë
	$UT_THROW_EMPTY
()

191 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

39 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

40 
	$im∂_
(0)

42 
	}
}

44 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

46 
	}
}

48 
JUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

50 
	}
}

52 
JUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

54 
	}
}

56 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

58 
	}
}

60 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

62 
	}
}

64 
JUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

66 
	}
}

68 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

70 
	}
}

72 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

74 
	}
}

76 
JUnôTe°Ouçut
::
	$wrôeXmlHódî
()

78 
	}
}

80 
JUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

82 
	}
}

84 
JUnôTe°Ouçut
::
	$wrôePr›îtõs
()

86 
	}
}

88 
JUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

90 
	}
}

92 
JUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

94 
	}
}

96 
JUnôTe°Ouçut
::
	$wrôeFûeEndög
()

98 
	}
}

100 
JUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

102 
	}
}

104 
JUnôTe°Ouçut
::
	$vîbo£
()

106 
	}
}

108 
JUnôTe°Ouçut
::
	$¥öt
(const *)

110 
	}
}

112 
JUnôTe°Ouçut
::
	$¥öt
()

114 
	}
}

116 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

118 
	}
}

120 
JUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

122 
	}
}

124 
	gJUnôTe°Ouçut
::
	$Êush
()

126 
	}
}

128 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

130 
	}
}

132 
JUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

134 
	}
}

136 
JUnôTe°Ouçut
::
	$˛o£Fûe
()

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\SimpleString.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
°rögAŒoˇt‹_
 = 
NULL
;

36 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
	$gëSåögAŒoˇt‹
()

38 i‡(
°rögAŒoˇt‹_
 =
NULL
)

39  
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

40  
°rögAŒoˇt‹_
;

41 
	}
}

43 
	gSim∂eSåög
::
	$£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

45 
°rögAŒoˇt‹_
 = 
Æloˇt‹
;

46 
	}
}

49 * 
	gSim∂eSåög
::
	$ÆlocSåögBuf„r
(
size_t
 
_size
)

51  
	`gëSåögAŒoˇt‹
()->
	`Æloc_mem‹y
(
_size
, 
__FILE__
, 
__LINE__
);

52 
	}
}

54 
	gSim∂eSåög
::
	$dóŒocSåögBuf„r
(* 
°r
)

56 
	`gëSåögAŒoˇt‹
()->
	`‰ì_mem‹y
(
°r
, 
__FILE__
, 
__LINE__
);

57 
	}
}

59 * 
	gSim∂eSåög
::
	$gëEm±ySåög
() const

61 * 
em±y
 = 
	`ÆlocSåögBuf„r
(1);

62 
em±y
[0] = '\0';

63  
em±y
;

64 
	}
}

65 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
ŸhîBuf„r
)

67 i‡(
ŸhîBuf„r
 == 0) {

68 
buf„r_
 = 
	`gëEm±ySåög
();

71 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
ŸhîBuf„r
) + 1;

72 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

73 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
ŸhîBuf„r
);

75 
	}
}

77 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
Ÿhî
, 
size_t
 
ª≥©Cou¡
)

79 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
Ë* 
ª≥©Cou¡
 + 1;

80 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

81 * 
√xt
 = 
buf„r_
;

82 
size_t
 
i
 = 0; i < 
ª≥©Cou¡
; i++) {

83 
	`Pœtf‹mS≥cificSåCpy
(
√xt
, 
Ÿhî
);

84 
√xt
 +
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
);

86 *
√xt
 = 0;

88 
	}
}

89 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

91 
size_t
 
Àn
 = 
Ÿhî
.
	`size
() + 1;

92 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

93 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

94 
	}
}

96 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

98 i‡(
this
 !&
Ÿhî
) {

99 
dóŒocSåögBuf„r
(
buf„r_
);

100 
size_t
 
	gÀn
 = 
Ÿhî
.
size
() + 1;

101 
	gbuf„r_
 = 
ÆlocSåögBuf„r
(
Àn
);

102 
Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

104  *
	gthis
;

107 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

111 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

112 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

113  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) != 0;

114 
	}
}

116 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

118  
	`toLowî
().
	`c⁄èös
(
Ÿhî
.toLower());

119 
	}
}

122 
boﬁ
 
	gSim∂eSåög
::
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

124 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

125 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

126  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) == buffer_;

127 
	}
}

129 
boﬁ
 
	gSim∂eSåög
::
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

131 
size_t
 
buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

132 
size_t
 
Ÿhî_buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
);

133 i‡(
Ÿhî_buf„r_Àngth
 =0Ë 
åue
;

134 i‡(
buf„r_Àngth
 =0Ë 
Ál£
;

135 i‡(
buf„r_Àngth
 < 
Ÿhî_buf„r_Àngth
Ë 
Ál£
;

136  
	`Pœtf‹mS≥cificSåCmp
(
buf„r_
 + 
buf„r_Àngth
 - 
Ÿhî_buf„r_Àngth
, 
Ÿhî
.buffer_) == 0;

137 
	}
}

139 
size_t
 
	gSim∂eSåög
::
	$cou¡
(c⁄° 
Sim∂eSåög
& 
sub°r
) const

141 
size_t
 
num
 = 0;

142 * 
°r
 = 
buf„r_
;

143 (
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
sub°r
.
buf„r_
))) {

144 
num
++;

145 
°r
++;

147  
num
;

148 
	}
}

150 
	gSim∂eSåög
::
	$•lô
(c⁄° 
Sim∂eSåög
& 
dñimôî
, 
Sim∂eSåögCﬁÀ˘i⁄
& 
cﬁ
) const

152 
size_t
 
num
 = 
	`cou¡
(
dñimôî
);

153 
size_t
 
exåaEndTokí
 = (
	`ídsWôh
(
dñimôî
)) ? 0 : 1;

154 
cﬁ
.
	`Æloˇã
(
num
 + 
exåaEndTokí
);

156 * 
°r
 = 
buf„r_
;

157 * 
¥ev
;

158 
size_t
 
i
 = 0; i < 
num
; ++i) {

159 
¥ev
 = 
°r
;

160 
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
dñimôî
.
buf„r_
) + 1;

161 
size_t
 
Àn
 = 
°r
 - 
¥ev
;

162 * 
sub
 = 
	`ÆlocSåögBuf„r
(
Àn
 + 1);

163 
	`Pœtf‹mS≥cificSåNCpy
(
sub
, 
¥ev
, 
Àn
);

164 
sub
[
Àn
] = '\0';

165 
cﬁ
[
i
] = 
sub
;

166 
	`dóŒocSåögBuf„r
(
sub
);

168 i‡(
exåaEndTokí
) {

169 
cﬁ
[
num
] = 
°r
;

171 
	}
}

173 
	gSim∂eSåög
::
	$ª∂a˚
(
to
, 
wôh
)

175 
size_t
 
s
 = 
	`size
();

176 
size_t
 
i
 = 0; i < 
s
; i++) {

177 i‡(
buf„r_
[
i
] =
to
Ëbuf„r_[i] = 
wôh
;

179 
	}
}

181 
	gSim∂eSåög
::
	$ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
)

183 
size_t
 
c
 = 
	`cou¡
(
to
);

184 
size_t
 
Àn
 = 
	`size
();

185 
size_t
 
tﬁí
 = 
	`Pœtf‹mS≥cificSåLí
(
to
);

186 
size_t
 
wôhÀn
 = 
	`Pœtf‹mS≥cificSåLí
(
wôh
);

188 
size_t
 
√wsize
 = 
Àn
 + (
wôhÀn
 * 
c
Ë- (
tﬁí
 * c) + 1;

190 i‡(
√wsize
) {

191 * 
√wbuf
 = 
	`ÆlocSåögBuf„r
(
√wsize
);

192 
size_t
 
i
 = 0, 
j
 = 0; i < 
Àn
;) {

193 i‡(
	`Pœtf‹mS≥cificSåNCmp
(&
buf„r_
[
i
], 
to
, 
tﬁí
) == 0) {

194 
	`Pœtf‹mS≥cificSåNCpy
(&
√wbuf
[
j
], 
wôh
, 
wôhÀn
);

195 
j
 +
wôhÀn
;

196 
i
 +
tﬁí
;

199 
√wbuf
[
j
] = 
buf„r_
[
i
];

200 
j
++;

201 
i
++;

204 
	`dóŒocSåögBuf„r
(
buf„r_
);

205 
buf„r_
 = 
√wbuf
;

206 
buf„r_
[
√wsize
 - 1] = '\0';

209 
buf„r_
 = 
	`gëEm±ySåög
();

210 
buf„r_
[0] = '\0';

212 
	}
}

214 
Sim∂eSåög
 
	gSim∂eSåög
::
	$toLowî
() const

216 
Sim∂eSåög
 
	`°r
(*
this
);

218 
size_t
 
°r_size
 = 
°r
.
	`size
();

219 
size_t
 
i
 = 0; i < 
°r_size
; i++)

220 
°r
.
buf„r_
[
i
] = 
	`Pœtf‹mS≥cificToLowî
(str.buffer_[i]);

222  
°r
;

223 
	}
}

225 c⁄° *
	gSim∂eSåög
::
	$asCh¨Såög
() const

227  
buf„r_
;

228 
	}
}

230 
size_t
 
	gSim∂eSåög
::
	$size
() const

232  
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

233 
	}
}

235 
boﬁ
 
	gSim∂eSåög
::
	$isEm±y
() const

237  
	`size
() == 0;

238 
	}
}

242 
	gSim∂eSåög
::~
	$Sim∂eSåög
()

244 
	`dóŒocSåögBuf„r
(
buf„r_
);

245 
	}
}

247 
boﬁ
 
	g›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

249  0 =
Pœtf‹mS≥cificSåCmp
(
À·
.
asCh¨Såög
(), 
right
.asCharString());

252 
boﬁ
 
	gSim∂eSåög
::
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const

254  
	`toLowî
(Ë=
°r
.toLower();

255 
	}
}

258 
boﬁ
 
	g›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

260  !(
	gÀ·
 =
right
);

263 
Sim∂eSåög
 
	gSim∂eSåög
::
›î©‹
+(c⁄° Sim∂eSåög& 
rhs
)

265 
Sim∂eSåög
 
t
(
buf„r_
);

266 
	gt
 +
rhs
.
buf„r_
;

267  
	gt
;

270 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° 
Sim∂eSåög
& 
rhs
)

272  
›î©‹
+=(
rhs
.
buf„r_
);

275 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° * 
rhs
)

277 
size_t
 
Àn
 = 
this
->
size
(Ë+ 
Pœtf‹mS≥cificSåLí
(
rhs
) + 1;

278 * 
	gtbuf„r
 = 
ÆlocSåögBuf„r
(
Àn
);

279 
Pœtf‹mS≥cificSåCpy
(
tbuf„r
, 
this
->
buf„r_
);

280 
Pœtf‹mS≥cificSåC©
(
tbuf„r
, 
rhs
);

281 
dóŒocSåögBuf„r
(
buf„r_
);

282 
	gbuf„r_
 = 
tbuf„r
;

283  *
	gthis
;

286 
	gSim∂eSåög
::
	$∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
∑dCh¨a˘î
)

288 i‡(
°r1
.
	`size
(Ë> 
°r2
.size()) {

289 
	`∑dSåögsToSameLígth
(
°r2
, 
°r1
, 
∑dCh¨a˘î
);

293 
∑d
[2];

294 
∑d
[0] = 
∑dCh¨a˘î
;

295 
∑d
[1] = 0;

296 
°r1
 = 
	`Sim∂eSåög
(
∑d
, 
°r2
.
	`size
() - str1.size()) + str1;

297 
	}
}

299 
Sim∂eSåög
 
	gSim∂eSåög
::
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const

301 i‡(
begöPos
 > 
	`size
()-1)  "";

303 
Sim∂eSåög
 
√wSåög
 = 
buf„r_
 + 
begöPos
;

305 i‡(
√wSåög
.
	`size
(Ë> 
amou¡
)

306 
√wSåög
.
buf„r_
[
amou¡
] = '\0';

308  
√wSåög
;

309 
	}
}

311 
	gSim∂eSåög
::
	$c›yToBuf„r
(* 
buf„rToC›y
, 
size_t
 
buf„rSize
) const

313 i‡(
buf„rToC›y
 =
NULL
 || 
buf„rSize
 == 0) ;

315 
size_t
 
sizeToC›y
 = (
buf„rSize
-1 < 
	`size
()) ? bufferSize-1 : size();

317 
	`Pœtf‹mS≥cificSåNCpy
(
buf„rToC›y
, 
buf„r_
, 
sizeToC›y
);

318 
buf„rToC›y
[
sizeToC›y
] = '\0';

320 
	}
}

322 
Sim∂eSåög
 
	$SåögFrom
(
boﬁ
 
vÆue
)

324  
	`Sim∂eSåög
(
	`SåögFromF‹m©
("%s", 
vÆue
 ? "true" : "false"));

325 
	}
}

327 
Sim∂eSåög
 
	$SåögFrom
(c⁄° *
vÆue
)

329  
	`Sim∂eSåög
(
vÆue
);

330 
	}
}

332 
Sim∂eSåög
 
	$SåögFromOrNuŒ
(c⁄° * 
ex≥˘ed
)

334  (
ex≥˘ed
Ë? 
	`SåögFrom
(expected) : "(null)";

335 
	}
}

337 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

339  
	`SåögFromF‹m©
("%d", 
vÆue
);

340 
	}
}

342 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

344  
	`SåögFromF‹m©
("%ld", 
vÆue
);

345 
	}
}

347 
Sim∂eSåög
 
	$SåögFrom
(c⁄° * 
vÆue
)

349  
	`Sim∂eSåög
("0x"Ë+ 
	`HexSåögFrom
((Ë
vÆue
);

350 
	}
}

352 
Sim∂eSåög
 
	$HexSåögFrom
(
vÆue
)

354  
	`SåögFromF‹m©
("%lx", 
vÆue
);

355 
	}
}

357 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
, 
¥ecisi⁄
)

359 
Sim∂eSåög
 
f‹m©
 = 
	`SåögFromF‹m©
("%%.%df", 
¥ecisi⁄
);

360  
	`SåögFromF‹m©
(
f‹m©
.
	`asCh¨Såög
(), 
vÆue
);

361 
	}
}

363 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

365  
	`SåögFromF‹m©
("%c", 
vÆue
);

366 
	}
}

368 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
Sim∂eSåög
& 
vÆue
)

370  
	`Sim∂eSåög
(
vÆue
);

371 
	}
}

373 
Sim∂eSåög
 
	$SåögFromF‹m©
(c⁄° * 
f‹m©
, ...)

375 
Sim∂eSåög
 
ªsu…Såög
;

376 
va_li°
 
¨gumíts
;

377 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

379 
ªsu…Såög
 = 
	`VSåögFromF‹m©
(
f‹m©
, 
¨gumíts
);

380 
	`va_íd
(
¨gumíts
);

381  
ªsu…Såög
;

382 
	}
}

384 #i‡
CPPUTEST_USE_STD_CPP_LIB


386 
	~<°rög
>

388 
Sim∂eSåög
 
SåögFrom
(c⁄° 
°d
::
°rög
& 
vÆue
)

390  
Sim∂eSåög
(
vÆue
.
c_°r
());

393 
Sim∂eSåög
 
	$SåögFrom
(
uöt32_t
 
i
)

395  
	`SåögFromF‹m©
("%10u (0x%08x)", 
i
, i);

396 
	}
}

398 
Sim∂eSåög
 
	$SåögFrom
(
uöt16_t
 
i
)

400  
	`SåögFromF‹m©
("%5u (0x%04x)", 
i
, i);

401 
	}
}

403 
Sim∂eSåög
 
	$SåögFrom
(
uöt8_t
 
i
)

405  
	`SåögFromF‹m©
("%3u (0x%02x)", 
i
, i);

406 
	}
}

411 #i‚de‡
va_c›y


412 
	#va_c›y
(
c›y
, 
‹igöÆ
Ëc›y = origöÆ;

	)

415 
Sim∂eSåög
 
	$VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

417 
va_li°
 
¨gsC›y
;

418 
	`va_c›y
(
¨gsC›y
, 
¨gs
);

421 
sizeOfdeÁu…Buf„r
 = 100

423 
deÁu…Buf„r
[
sizeOfdeÁu…Buf„r
];

424 
Sim∂eSåög
 
ªsu…Såög
;

426 
size
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
deÁu…Buf„r
, 
sizeOfdeÁu…Buf„r
, 
f‹m©
, 
¨gs
);

427 i‡(
size
 < 
sizeOfdeÁu…Buf„r
) {

428 
ªsu…Såög
 = 
	`Sim∂eSåög
(
deÁu…Buf„r
);

431 * 
√wBuf„r
 = 
Sim∂eSåög
::
	`ÆlocSåögBuf„r
(
size
 + 1);

432 
	`Pœtf‹mS≥cificVSN¥ötf
(
√wBuf„r
, 
size
 + 1, 
f‹m©
, 
¨gsC›y
);

433 
ªsu…Såög
 = 
	`Sim∂eSåög
(
√wBuf„r
);

435 
Sim∂eSåög
::
	`dóŒocSåögBuf„r
(
√wBuf„r
);

437  
ªsu…Såög
;

438 
	}
}

440 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Sim∂eSåögCﬁÀ˘i⁄
()

442 
cﬁÀ˘i⁄_
 = 0;

443 
size_
 = 0;

444 
	}
}

446 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Æloˇã
(
size_t
 
_size
)

448 i‡(
cﬁÀ˘i⁄_
Ë
dñëe
[] collection_;

450 
size_
 = 
_size
;

451 
cﬁÀ˘i⁄_
 = 
√w
 
Sim∂eSåög
[
size_
];

452 
	}
}

454 
	gSim∂eSåögCﬁÀ˘i⁄
::~
	$Sim∂eSåögCﬁÀ˘i⁄
()

456 
dñëe
[] (
cﬁÀ˘i⁄_
);

457 
	}
}

459 
size_t
 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$size
() const

461  
size_
;

462 
	}
}

464 
	gSim∂eSåög
& 
	gSim∂eSåögCﬁÀ˘i⁄
::
›î©‹
[](
size_t
 
ödex
)

466 i‡(
ödex
 >
size_
) {

467 
em±y_
 = "";

468  
	gem±y_
;

471  
	gcﬁÀ˘i⁄_
[
ödex
];

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Faûuª.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	~<°dlib.h
>

34 
Sim∂eSåög
 
	$ªmoveAŒPröèbÀCh¨a˘îsFrom
(c⁄° 
Sim∂eSåög
& 
°r
)

36 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

37 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

38 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

40 
size_t
 
i
 = 0; i < 
buf„rSize
-1; i++)

41 i‡(
buf„r
[
i
] != '\t' && buffer[i] != '\n')

42 
buf„r
[
i
] = ' ';

44 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

45 
	`‰ì
(
buf„r
);

46  
ªsu…
;

47 
	}
}

49 
Sim∂eSåög
 
	$addM¨kîToSåög
(c⁄° 
Sim∂eSåög
& 
°r
, 
m¨kîPos
)

51 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

52 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

53 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

55 
buf„r
[
m¨kîPos
] = '^';

57 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

58 
	`‰ì
(
buf„r
);

59  
ªsu…
;

61 
	}
}

63 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

64 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	$mesßge_
(
theMesßge
)

66 
	}
}

68 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

69 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
—e°->
	`gëFûe
()), 
	`löeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`ã°FûeName_
—e°->gëFûe()), 
	`ã°LöeNumbî_
—e°->gëLöeNumbî()), 
	$mesßge_
(
theMesßge
)

71 
	}
}

73 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNum
) :

74 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNum
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`mesßge_
("no message")

76 
	}
}

78 
	gTe°Faûuª
::
	$Te°Faûuª
(c⁄° 
Te°Faûuª
& 
f
) :

79 
	`ã°Name_
(
f
.
ã°Name_
), 
	`fûeName_
(f.
fûeName_
), 
	`löeNumbî_
(f.
löeNumbî_
), 
	`ã°FûeName_
(f.
ã°FûeName_
), 
	`ã°LöeNumbî_
(f.
ã°LöeNumbî_
), 
	$mesßge_
(
f
.
mesßge_
)

81 
	}
}

84 
	gTe°Faûuª
::~
	$Te°Faûuª
()

86 
	}
}

88 
Sim∂eSåög
 
Te°Faûuª
::
	$gëFûeName
() const

90  
fûeName_
;

91 
	}
}

93 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°FûeName
() const

95  
ã°FûeName_
;

96 
	}
}

98 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°Name
() const

100  
ã°Name_
;

101 
	}
}

103 
	gTe°Faûuª
::
	$gëFaûuªLöeNumbî
() const

105  
löeNumbî_
;

106 
	}
}

108 
	gTe°Faûuª
::
	$gëTe°LöeNumbî
() const

110  
ã°LöeNumbî_
;

111 
	}
}

113 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëMesßge
() const

115  
mesßge_
;

116 
	}
}

118 
boﬁ
 
	gTe°Faûuª
::
	$isOutsideTe°Fûe
() const

120  
ã°FûeName_
 !
fûeName_
;

121 
	}
}

123 
boﬁ
 
	gTe°Faûuª
::
	$isInHñ≥rFun˘i⁄
() const

125  
löeNumbî_
 < 
ã°LöeNumbî_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãButWasSåög
(c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

130 c⁄° * 
f‹m©
 = "expected <%s>\n\tbut was <%s>";

131  
	`SåögFromF‹m©
(
f‹m©
, 
ex≥˘ed
.
	`asCh¨Såög
(), 
a˘uÆ
.asCharString());

132 
	}
}

134 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãDif„ªn˚AtPosSåög
(c⁄° 
Sim∂eSåög
& 
a˘uÆ
, 
posôi⁄
)

136 
Sim∂eSåög
 
ªsu…
;

137 c⁄° 
exåaCh¨a˘îsWödow
 = 20;

138 c⁄° 
hÆfOfExåaCh¨a˘îsWödow
 = 
exåaCh¨a˘îsWödow
 / 2;

140 
Sim∂eSåög
 
	`∑ddögF‹PªvítögOutOfBounds
 (" ", 
hÆfOfExåaCh¨a˘îsWödow
);

141 
Sim∂eSåög
 
a˘uÆSåög
 = 
∑ddögF‹PªvítögOutOfBounds
 + 
a˘uÆ
 +ÖaddingForPreventingOutOfBounds;

142 
Sim∂eSåög
 
dif„ª¡Såög
 = 
	`SåögFromF‹m©
("dif„ªn˚ sèπ†©Öosôi⁄ %dát: <", 
posôi⁄
);

144 
ªsu…
 += "\n";

145 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s>\n", 
dif„ª¡Såög
.
	`asCh¨Såög
(), 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
exåaCh¨a˘îsWödow
).asCharString());

147 
Sim∂eSåög
 
m¨kSåög
 = 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
hÆfOfExåaCh¨a˘îsWödow
+1);

148 
m¨kSåög
 = 
	`ªmoveAŒPröèbÀCh¨a˘îsFrom
(markString);

149 
m¨kSåög
 = 
	`addM¨kîToSåög
(m¨kSåög, 
hÆfOfExåaCh¨a˘îsWödow
);

151 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s", 
	`Sim∂eSåög
(" ", 
dif„ª¡Såög
.
	`size
()).
	`asCh¨Såög
(), 
m¨kSåög
.asCharString());

152  
ªsu…
;

153 
	}
}

155 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
) :

156 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

158 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrNuŒ
(
ex≥˘ed
), SåögFromOrNuŒ(
a˘uÆ
));

159 
	}
}

161 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

162 : 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

164 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

165 
	}
}

167 
Sim∂eSåög
 
	$SåögFromOrN™
(
d
)

169 i‡(
	`Pœtf‹mS≥cificIsN™
(
d
))

171  
	`SåögFrom
(
d
);

172 
	}
}

174 
	gDoubÀsEquÆFaûuª
::
	$DoubÀsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

176 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrN™
(
ex≥˘ed
), SåögFromOrN™(
a˘uÆ
));

177 
mesßge_
 += "Åhreshold used was <";

178 
mesßge_
 +
	`SåögFromOrN™
(
thªshﬁd
);

179 
mesßge_
 += ">";

181 i‡(
	`Pœtf‹mS≥cificIsN™
(
ex≥˘ed
Ë|| Pœtf‹mS≥cificIsN™(
a˘uÆ
Ë|| Pœtf‹mS≥cificIsN™(
thªshﬁd
))

182 
mesßge_
 += "\n\tCannot make comparisons with Nan";

183 
	}
}

185 
	gCheckEquÆFaûuª
::
	$CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

187 
ÁûSèπ
;

188 
ÁûSèπ
 = 0; 
a˘uÆ
.
	`asCh¨Såög
()[ÁûSèπ] =
ex≥˘ed
.asCharString()[failStart]; failStart++)

190 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

191 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

193 
	}
}

195 
	gC⁄èösFaûuª
::
	$C⁄èösFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
) :

196 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

198 c⁄° * 
f‹m©
 = "actual <%s>\n\tdidÇot contain <%s>";

199 
mesßge_
 = 
	`SåögFromF‹m©
(
f‹m©
, 
a˘uÆ
.
	`asCh¨Såög
(), 
ex≥˘ed
.asCharString());

200 
	}
}

202 
	gCheckFaûuª
::
	$CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

204 
mesßge_
 = "CHECK(";

205 
mesßge_
 +
c⁄dôi⁄Såög
;

206 
mesßge_
 += ") failed";

207 
	}
}

209 
	gFaûFaûuª
::
	$FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

211 
mesßge_
 = 
mesßge
;

212 
	}
}

214 
	gL⁄gsEquÆFaûuª
::
	$L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

216 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

217 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

218 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

219 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

221 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

222 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aHex
, 
eHex
, '0');

224 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

225 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

226 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘edRï‹ãd
, 
a˘uÆRï‹ãd
);

227 
	}
}

230 
	gSåögEquÆFaûuª
::
	$SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

232 
ÁûSèπ
;

233 
ÁûSèπ
 = 0; 
a˘uÆ
[ÁûSèπ] =
ex≥˘ed
[failStart]; failStart++)

235 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

236 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

237 
	}
}

239 
	gSåögEquÆNoCa£Faûuª
::
	$SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

241 
ÁûSèπ
;

242 
ÁûSèπ
 = 0; 
	`Pœtf‹mS≥cificToLowî
(
a˘uÆ
[ÁûSèπ]Ë=Pœtf‹mS≥cificToLowî(
ex≥˘ed
[failStart]); failStart++)

244 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

245 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

246 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestHarness_c.cpp

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

36 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

42 
	~"CµUTe°/Te°H¨√ss_c.h
"

44 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

46 
CHECK_EQUAL_LOCATION
(()
ex≥˘ed
, ()
a˘uÆ
, 
fûeName
, 
löeNumbî
);

49 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

51 
DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûeName
, 
löeNumbî
);

54 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

56 
CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

59 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

61 
STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

64 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

66 
FAIL_LOCATION
(
ãxt
, 
fûeName
, 
löeNumbî
);

69 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
)

71 
FAIL_LOCATION
("", 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

76 
CHECK_LOCATION
(((
c⁄dôi⁄
Ë=0 ? 
Ál£
 : 
åue
), 
c⁄dôi⁄Såög
, 
fûeName
, 
löeNumbî
);

79 
˝puã°_mÆloc_£t_out_of_mem‹y
()

81 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹
(
NuŒUnknownAŒoˇt‹
::
deÁu…AŒoˇt‹
());

84 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
()

86 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89 * 
˝puã°_mÆloc
(
size_t
 
size
)

91  
˝puã°_mÆloc_loˇti⁄
(
size
, "<unknown>", 0);

94 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
)

96  
˝puã°_ˇŒoc_loˇti⁄
(
num
, 
size
, "<unknown>", 0);

99 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
)

101  
˝puã°_ªÆloc_loˇti⁄
(
±r
, 
size
, "<unknown>", 0);

104 
˝puã°_‰ì
(* 
buf„r
)

106 
˝puã°_‰ì_loˇti⁄
(
buf„r
, "<unknown>", 0);

109 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

111  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), 
size
, 
fûe
, 
löe
);

114 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
, c⁄° * 
fûe
, 
löe
)

116 * 
mem
 = 
˝puã°_mÆloc_loˇti⁄
(
num
 * 
size
, 
fûe
, 
löe
);

117 
Pœtf‹mS≥cificMem£t
(
mem
, 0, 
num
*
size
);

118  
mem
;

121 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

123  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
mem‹y
, 
size
, 
fûe
, 
löe
);

126 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
)

128 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
buf„r
, 
fûe
, 
löe
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gTe°Ouçut
::
	$Te°Ouçut
() :

33 
	`dŸCou¡_
(0), 
	`vîbo£_
(
Ál£
), 
	`¥ogªssIndiˇti⁄_
(".")

35 
	}
}

37 
	gTe°Ouçut
::~
	$Te°Ouçut
()

39 
	}
}

41 
Te°Ouçut
::
	$vîbo£
()

43 
vîbo£_
 = 
åue
;

44 
	}
}

46 
	gTe°Ouçut
::
	$¥öt
(
n
)

48 
	`¥öt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

49 
	}
}

51 
	gTe°Ouçut
::
	$¥ötDoubÀ
(
d
)

53 
	`¥öt
(
	`SåögFrom
(
d
, 3).
	`asCh¨Såög
());

54 
	}
}

56 
	gTe°Ouçut
::
	$¥ötHex
(
n
)

58 
	`¥öt
(
	`HexSåögFrom
(
n
).
	`asCh¨Såög
());

59 
	}
}

61 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, c⁄° * 
	gs
)

63 
	gp
.
¥öt
(
s
);

64  
	gp
;

67 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, 
	gi
)

69 
	gp
.
¥öt
(
i
);

70  
	gp
;

73 
	gTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

75 i‡(
vîbo£_
Ë
	`¥öt
(
ã°
.
	`gëF‹m©ãdName
().
	`asCh¨Såög
());

76 
	}
}

78 
	gTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
)

80 i‡(
vîbo£_
) {

81 
	`¥öt
(" - ");

82 
	`¥öt
(
ªs
.
	`gëCuºítTe°TŸÆExecuti⁄Time
());

83 
	`¥öt
(" ms\n");

86 
	`¥ötProgªssIndiˇt‹
();

88 
	}
}

90 
	gTe°Ouçut
::
	$¥ötProgªssIndiˇt‹
()

92 
	`¥öt
(
¥ogªssIndiˇti⁄_
);

93 i‡(++
dŸCou¡_
 % 50 =0Ë
	`¥öt
("\n");

94 
	}
}

96 
	gTe°Ouçut
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

98 
¥ogªssIndiˇti⁄_
 = 
ödiˇt‹
;

99 
	}
}

101 
	gTe°Ouçut
::
	$¥ötTe°sSèπed
()

103 
	}
}

105 
Te°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

107 
	}
}

109 
Te°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& )

111 
	}
}

113 
Te°Ouçut
::
	$Êush
()

115 
	}
}

117 
Te°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

119 i‡(
ªsu…
.
	`gëFaûuªCou¡
() > 0) {

120 
	`¥öt
("\nErrors (");

121 
	`¥öt
(
ªsu…
.
	`gëFaûuªCou¡
());

122 
	`¥öt
(" failures, ");

125 
	`¥öt
("\nOK (");

127 
	`¥öt
(
ªsu…
.
	`gëTe°Cou¡
());

128 
	`¥öt
("Åests, ");

129 
	`¥öt
(
ªsu…
.
	`gëRunCou¡
());

130 
	`¥öt
("Ñan, ");

131 
	`¥öt
(
ªsu…
.
	`gëCheckCou¡
());

132 
	`¥öt
(" checks, ");

133 
	`¥öt
(
ªsu…
.
	`gëIgn‹edCou¡
());

134 
	`¥öt
(" ignored, ");

135 
	`¥öt
(
ªsu…
.
	`gëFûãªdOutCou¡
());

136 
	`¥öt
(" filtered out, ");

137 
	`¥öt
(
ªsu…
.
	`gëTŸÆExecuti⁄Time
());

138 
	`¥öt
(" ms)\n\n");

139 
	}
}

141 
	gTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

143 i‡(
tŸÆ
 > 1) {

144 
	`¥öt
("TestÑun ");

145 
	`¥öt
(
numbî
);

146 
	`¥öt
(" of ");

147 
	`¥öt
(
tŸÆ
);

148 
	`¥öt
("\n");

150 
	}
}

152 
	gTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

154 i‡(
Áûuª
.
	`isOutsideTe°Fûe
(Ë|| faûuª.
	`isInHñ≥rFun˘i⁄
())

155 
	`¥ötFûeAndLöeF‹Te°AndFaûuª
(
Áûuª
);

157 
	`¥ötFûeAndLöeF‹Faûuª
(
Áûuª
);

159 
	`¥ötFaûuªMesßge
(
Áûuª
.
	`gëMesßge
());

160 
	}
}

162 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

164 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëTe°FûeName
(), faûuª.
	`gëTe°LöeNumbî
());

165 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

166 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

167 
	}
}

169 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

171 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

172 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

173 
	}
}

175 
	gTe°Ouçut
::
	$¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
)

177 
	`¥öt
(" Failure in ");

178 
	`¥öt
(
ã°Name
.
	`asCh¨Såög
());

179 
	}
}

181 
	gTe°Ouçut
::
	$¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
)

183 
	`¥öt
("\n");

184 
	`¥öt
("\t");

185 
	`¥öt
(
ªas⁄
.
	`asCh¨Såög
());

186 
	`¥öt
("\n\n");

187 
	}
}

189 
	gTe°Ouçut
::
	$¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
fûe
, 
löeNumbî
)

191 
	`¥öt
("\n");

192 
	`¥öt
(
fûe
.
	`asCh¨Såög
());

193 
	`¥öt
(":");

194 
	`¥öt
(
löeNumbî
);

195 
	`¥öt
(":");

196 
	`¥öt
("Érror:");

197 
	}
}

199 
	gC⁄sﬁeTe°Ouçut
::
	$¥öt
(c⁄° * 
s
)

201 *
s
) {

202 i‡('\n' =*
s
Ë
	`Pœtf‹mS≥cificPutch¨
('\r');

203 
	`Pœtf‹mS≥cificPutch¨
(*
s
);

204 
s
++;

206 
	`Êush
();

207 
	}
}

209 
	gC⁄sﬁeTe°Ouçut
::
	$Êush
()

211 
	`Pœtf‹mS≥cificFlush
();

212 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	gTe°Plugö
::
	$Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

32 
	`√xt_
(
NuŒTe°Plugö
::
	`ö°™˚
()), 
	`«me_
(
«me
), 
	$íabÀd_
(
åue
)

34 
	}
}

36 
	gTe°Plugö
::
	$Te°Plugö
(
Te°Plugö
* 
√xt
) :

37 
	`√xt_
(
√xt
), 
	`«me_
("null")

39 
	}
}

41 
	gTe°Plugö
::~
	$Te°Plugö
()

43 
	}
}

45 
Te°Plugö
* Te°Plugö::
	$addPlugö
(
Te°Plugö
* 
∂ugö
)

47 
√xt_
 = 
∂ugö
;

48  
this
;

49 
	}
}

51 
	gTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

53 i‡(
íabÀd_
Ë
	`¥eTe°A˘i⁄
(
ã°
, 
ªsu…
);

54 
√xt_
->
	`runAŒPªTe°A˘i⁄
(
ã°
, 
ªsu…
);

55 
	}
}

57 
	gTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

59 
√xt_
 ->
	`runAŒPo°Te°A˘i⁄
(
ã°
, 
ªsu…
);

60 i‡(
íabÀd_
Ë
	`po°Te°A˘i⁄
(
ã°
, 
ªsu…
);

61 
	}
}

63 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
)

65  
	`∑r£AŒArgumíts
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
), 
ödex
);

66 
	}
}

68 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

70 i‡(
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
)Ë 
åue
;

71 i‡(
√xt_
ËÇext_->
	`∑r£AŒArgumíts
(
ac
, 
av
, 
ödex
);

72  
Ál£
;

73 
	}
}

75 c⁄° 
	gSim∂eSåög
& 
	gTe°Plugö
::
	$gëName
()

77  
«me_
;

78 
	}
}

80 
Te°Plugö
* 
	gTe°Plugö
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

82 i‡(
«me
 =
«me_
Ë 
this
;

83 i‡(
√xt_
ËÇext_->
	`gëPlugöByName
(
«me
);

84  (
√xt_
);

85 
	}
}

87 
Te°Plugö
* 
	gTe°Plugö
::
	$gëNext
()

89  
√xt_
;

90 
	}
}

91 
Te°Plugö
* 
	gTe°Plugö
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

93 
Te°Plugö
* 
ªmoved
 = 0;

94 i‡(
√xt_
 &&Çext_->
	`gëName
(Ë=
«me
) {

95 
ªmoved
 = 
√xt_
;

96 
√xt_
 =Çext_->next_;

98  
ªmoved
;

99 
	}
}

101 
	gTe°Plugö
::
	$dißbÀ
()

103 
íabÀd_
 = 
Ál£
;

104 
	}
}

106 
	gTe°Plugö
::
	$íabÀ
()

108 
íabÀd_
 = 
åue
;

109 
	}
}

111 
boﬁ
 
	gTe°Plugö
::
	$isE«bÀd
()

113  
íabÀd_
;

114 
	}
}

116 
	s˝puã°_∑ú


118 **
	m‹ig
;

119 *
	m‹ig_vÆue
;

124 
	gpoöãrTabÀIndex
;

125 
˝puã°_∑ú
 
	g£éi°
[
SëPoöãrPlugö
::
MAX_SET
];

127 
	gSëPoöãrPlugö
::
	$SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

128 
	$Te°Plugö
(
«me
)

130 
poöãrTabÀIndex
 = 0;

131 
	}
}

133 
	gSëPoöãrPlugö
::~
	$SëPoöãrPlugö
()

135 
	}
}

137 
	$CµUTe°St‹e
(**
fun˘i⁄
, *
vÆue
)

139 i‡(
poöãrTabÀIndex
 >
SëPoöãrPlugö
::
MAX_SET
) {

140 
	`FAIL
("MaximumÇumber of functionÖointers installed!");

142 
£éi°
[
poöãrTabÀIndex
].
‹ig_vÆue
 = 
vÆue
;

143 
£éi°
[
poöãrTabÀIndex
].
‹ig
 = 
fun˘i⁄
;

144 
poöãrTabÀIndex
++;

145 
	}
}

147 
	gSëPoöãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& , 
Te°Resu…
& )

149 
i
 = 
poöãrTabÀIndex
 - 1; i >= 0; i--)

150 *((**Ë
£éi°
[
i
].
‹ig
Ë£éi°[i].
‹ig_vÆue
;

151 
poöãrTabÀIndex
 = 0;

152 
	}
}

156 
	gNuŒTe°Plugö
::
	$NuŒTe°Plugö
() :

157 
	$Te°Plugö
(0)

159 
	}
}

161 
NuŒTe°Plugö
* NuŒTe°Plugö::
	$ö°™˚
()

163 
NuŒTe°Plugö
 
_ö°™˚
;

164  &
_ö°™˚
;

165 
	}
}

167 
	gNuŒTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

169 
	}
}

171 
	gNuŒTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestRegistry.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	gTe°Regi°ry
::
	$Te°Regi°ry
() :

32 
	`ã°s_
(&
NuŒTe°
::
	`ö°™˚
()), 
	`«meFûãr_
(0), 
	`groupFûãr_
(0), 
	`fú°Plugö_
(
NuŒTe°Plugö
::
	$ö°™˚
())

34 
	}
}

36 
Te°Regi°ry
::~
	$Te°Regi°ry
()

38 
	`˛ónup
();

39 
	}
}

41 
	gTe°Regi°ry
::
	$˛ónup
()

43 
dñëe
 
«meFûãr_
;

44 
dñëe
 
groupFûãr_
;

45 
«meFûãr_
 = 0;

46 
groupFûãr_
 = 0;

47 
	}
}

49 
	gTe°Regi°ry
::
	$addTe°
(
Uã°
 *
ã°
)

51 
ã°s_
 = 
ã°
->
	`addTe°
(tests_);

52 
	}
}

54 
	gTe°Regi°ry
::
	$runAŒTe°s
(
Te°Resu…
& 
ªsu…
)

56 
boﬁ
 
groupSèπ
 = 
åue
;

58 
ªsu…
.
	`ã°sSèπed
();

59 
Uã°
 *
ã°
 = 
ã°s_
; !ã°->
	`isNuŒ
();Åe° =Åe°->
	`gëNext
()) {

61 i‡(
groupSèπ
) {

62 
ªsu…
.
	`cuºítGroupSèπed
(
ã°
);

63 
groupSèπ
 = 
Ál£
;

66 
ªsu…
.
	`£tProgªssIndiˇt‹
(
ã°
->
	`gëProgªssIndiˇt‹
());

67 
ªsu…
.
	`cou¡Te°
();

68 i‡(
	`ã°ShouldRun
(
ã°
, 
ªsu…
)) {

69 
ªsu…
.
	`cuºítTe°Sèπed
(
ã°
);

70 
ã°
->
	`runO√Te°WôhPlugös
(
fú°Plugö_
, 
ªsu…
);

71 
ªsu…
.
	`cuºítTe°Ended
(
ã°
);

74 i‡(
	`ídOfGroup
(
ã°
)) {

75 
groupSèπ
 = 
åue
;

76 
ªsu…
.
	`cuºítGroupEnded
(
ã°
);

79 
ªsu…
.
	`ã°sEnded
();

80 
	}
}

82 
boﬁ
 
	gTe°Regi°ry
::
	$ídOfGroup
(
Uã°
* 
ã°
)

84  (
ã°
->
	`isNuŒ
(Ë||Åe°->
	`gëGroup
(Ë!ã°->
	`gëNext
()->getGroup());

85 
	}
}

87 
	gTe°Regi°ry
::
	$cou¡Te°s
()

89  
ã°s_
->
	`cou¡Te°s
();

90 
	}
}

92 
Te°Regi°ry
* 
	gTe°Regi°ry
::
cuºítRegi°ry_
 = 0;

94 
Te°Regi°ry
* 
	gTe°Regi°ry
::
	$gëCuºítRegi°ry
()

96 
Te°Regi°ry
 
ªgi°ry
;

97  (
cuºítRegi°ry_
 =0Ë? &
ªgi°ry
 : currentRegistry_;

98 
	}
}

100 
	gTe°Regi°ry
::
	$£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
)

102 
cuºítRegi°ry_
 = 
ªgi°ry
;

103 
	}
}

105 
	gTe°Regi°ry
::
	$unDoLa°AddTe°
()

107 
ã°s_
 =Åe°s_->
	`gëNext
();

109 
	}
}

111 
	gTe°Regi°ry
::
	$«meFûãr
(
Sim∂eSåög
 
f
)

113 
dñëe
 
«meFûãr_
;

114 
«meFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

115 
	}
}

117 
	gTe°Regi°ry
::
	$groupFûãr
(
Sim∂eSåög
 
f
)

119 
dñëe
 
groupFûãr_
;

120 
groupFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

121 
	}
}

123 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëGroupFûãr
()

125  *
groupFûãr_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëNameFûãr
()

130  *
«meFûãr_
;

131 
	}
}

133 
boﬁ
 
	gTe°Regi°ry
::
	$ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

135 i‡(
groupFûãr_
 =0ËgroupFûãr_ = 
√w
 
	`Sim∂eSåög
();

136 i‡(
«meFûãr_
 =0Ë«meFûãr_ = 
√w
 
	`Sim∂eSåög
();

137 i‡(
ã°
->
	`shouldRun
(*
groupFûãr_
, *
«meFûãr_
)Ë 
åue
;

139 
ªsu…
.
	`cou¡FûãªdOut
();

140  
Ál£
;

142 
	}
}

144 
	gTe°Regi°ry
::
	$ª£tPlugös
()

146 
fú°Plugö_
 = 
NuŒTe°Plugö
::
	`ö°™˚
();

147 
	}
}

149 
	gTe°Regi°ry
::
	$ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
)

151 
fú°Plugö_
 = 
∂ugö
->
	`addPlugö
(firstPlugin_);

152 
	}
}

154 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëFú°Plugö
()

156  
fú°Plugö_
;

157 
	}
}

159 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

161  
fú°Plugö_
->
	`gëPlugöByName
(
«me
);

162 
	}
}

164 
	gTe°Regi°ry
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

166 i‡(
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
Ë=fú°Plugö_Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

167 i‡(
fú°Plugö_
->
	`gëName
(Ë=
«me
Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

168 
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
);

169 
	}
}

171 
Uã°
* 
	gTe°Regi°ry
::
	$gëFú°Te°
()

173  
ã°s_
;

174 
	}
}

176 
Uã°
* 
	gTe°Regi°ry
::
	$gëLa°Te°
()

178 
Uã°
* 
cuºít
 = 
ã°s_
;

179 !
cuºít
->
	`gëNext
()->
	`isNuŒ
())

180 
cuºít
 = cuºít->
	`gëNext
();

181  
cuºít
;

182 
	}
}

184 
Uã°
* 
	gTe°Regi°ry
::
	$gëTe°WôhNext
(
Uã°
* 
ã°
)

186 
Uã°
* 
cuºít
 = 
ã°s_
;

187 !
cuºít
->
	`gëNext
()->
	`isNuŒ
(Ë&& cuºít->gëNext(Ë!
ã°
)

188 
cuºít
 = cuºít->
	`gëNext
();

189  
cuºít
;

190 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestResult.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Resu….h
"

30 
	~"CµUTe°/Te°Faûuª.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	gTe°Resu…
::
	$Te°Resu…
(
Te°Ouçut
& 
p
) :

35 
	`ouçut_
(
p
), 
	`ã°Cou¡_
(0), 
	`runCou¡_
(0), 
	`checkCou¡_
(0), 
	`ÁûuªCou¡_
(0), 
	`fûãªdOutCou¡_
(0), 
	`ign‹edCou¡_
(0), 
	`tŸÆExecuti⁄Time_
(0), 
	`timeSèπed_
(0), 
	`cuºítTe°TimeSèπed_
(0),

36 
	`cuºítTe°TŸÆExecuti⁄Time_
(0), 
	`cuºítGroupTimeSèπed_
(0), 
	$cuºítGroupTŸÆExecuti⁄Time_
(0)

38 
	}
}

40 
	gTe°Resu…
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

42 
ouçut_
.
	`£tProgªssIndiˇt‹
(
ödiˇt‹
);

43 
	}
}

45 
	gTe°Resu…
::~
	$Te°Resu…
()

47 
	}
}

49 
Te°Resu…
::
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

51 
ouçut_
.
	`¥ötCuºítGroupSèπed
(*
ã°
);

52 
cuºítGroupTimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

53 
	}
}

55 
	gTe°Resu…
::
	$cuºítGroupEnded
(
Uã°
* )

57 
cuºítGroupTŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítGroupTimeSèπed_
;

58 
ouçut_
.
	`¥ötCuºítGroupEnded
(*
this
);

59 
	}
}

61 
	gTe°Resu…
::
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

63 
ouçut_
.
	`¥ötCuºítTe°Sèπed
(*
ã°
);

64 
cuºítTe°TimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

65 
	}
}

67 
	gTe°Resu…
::
	$¥öt
(c⁄° * 
ãxt
)

69 
ouçut_
.
	`¥öt
(
ãxt
);

70 
	}
}

72 
	gTe°Resu…
::
	$cuºítTe°Ended
(
Uã°
* )

74 
cuºítTe°TŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítTe°TimeSèπed_
;

75 
ouçut_
.
	`¥ötCuºítTe°Ended
(*
this
);

77 
	}
}

79 
	gTe°Resu…
::
	$addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

81 
ouçut_
.
	`¥öt
(
Áûuª
);

82 
ÁûuªCou¡_
++;

83 
	}
}

85 
	gTe°Resu…
::
	$cou¡Te°
()

87 
ã°Cou¡_
++;

88 
	}
}

90 
	gTe°Resu…
::
	$cou¡Run
()

92 
runCou¡_
++;

93 
	}
}

95 
	gTe°Resu…
::
	$cou¡Check
()

97 
checkCou¡_
++;

98 
	}
}

100 
	gTe°Resu…
::
	$cou¡FûãªdOut
()

102 
fûãªdOutCou¡_
++;

103 
	}
}

105 
	gTe°Resu…
::
	$cou¡Ign‹ed
()

107 
ign‹edCou¡_
++;

108 
	}
}

110 
	gTe°Resu…
::
	$ã°sSèπed
()

112 
timeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

113 
ouçut_
.
	`¥ötTe°sSèπed
();

114 
	}
}

116 
	gTe°Resu…
::
	$ã°sEnded
()

118 
timeEnded
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

119 
tŸÆExecuti⁄Time_
 = 
timeEnded
 - 
timeSèπed_
;

120 
ouçut_
.
	`¥ötTe°sEnded
(*
this
);

121 
	}
}

123 
	gTe°Resu…
::
	$gëTŸÆExecuti⁄Time
() const

125  
tŸÆExecuti⁄Time_
;

126 
	}
}

128 
	gTe°Resu…
::
	$£tTŸÆExecuti⁄Time
(
exTime
)

130 
tŸÆExecuti⁄Time_
 = 
exTime
;

131 
	}
}

133 
	gTe°Resu…
::
	$gëCuºítTe°TŸÆExecuti⁄Time
() const

135  
cuºítTe°TŸÆExecuti⁄Time_
;

136 
	}
}

138 
	gTe°Resu…
::
	$gëCuºítGroupTŸÆExecuti⁄Time
() const

140  
cuºítGroupTŸÆExecuti⁄Time_
;

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\Utest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

33 
boﬁ
 
	$doubÀs_equÆ
(
d1
, 
d2
, 
thªshﬁd
)

35 i‡(
	`Pœtf‹mS≥cificIsN™
(
d1
Ë|| Pœtf‹mS≥cificIsN™(
d2
Ë|| Pœtf‹mS≥cificIsN™(
thªshﬁd
))

36  
Ál£
;

37  
	`Pœtf‹mS≥cificFabs
(
d1
 - 
d2
Ë< 
thªshﬁd
;

38 
	}
}

44 ˛as†
	cOutsideTe°Ru¬îUTe°
: 
public
 
Uã°


46 
public
:

47 
OutsideTe°Ru¬îUTe°
& 
	$ö°™˚
()

49 
OutsideTe°Ru¬îUTe°
 
ö°™˚_
;

50  
ö°™˚_
;

52 
vútuÆ
 
Te°Resu…
& 
	$gëTe°Resu…
()

54  
deÁu…Te°Resu…
;

55 
	}
}

56 
vútuÆ
 
	$exôCuºítTe°
()

58 
	}
}

59 
	gvútuÆ
 ~
	$OutsideTe°Ru¬îUTe°
()

61 
	}
}

62 
	g¥iv©e
:

63 
	$OutsideTe°Ru¬îUTe°
() :

64 
	`Uã°
("\n\t NOTE: Assertion happened without being ináÅestÑun (perhaps in main?)", "\n\t Something is very wrong. CheckÅhisássertionánd fix", "unknown file", 0),

65 
	$deÁu…Te°Resu…
(
deÁu…Ouçut
)

67 
	}
}

68 
C⁄sﬁeTe°Ouçut
 
	gdeÁu…Ouçut
;

69 
Te°Resu…
 
	gdeÁu…Te°Resu…
;

73 
	gUã°
::
	$Uã°
() :

74 
	`group_
("UndeföedTe°Group"), 
	`«me_
("UndeföedTe°"), 
	`fûe_
("UndeföedFûe"), 
	`löeNumbî_
(0), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

76 
	}
}

78 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
) :

79 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

81 
	}
}

83 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Uã°
* 
√xtTe°
) :

84 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	$√xt_
(
√xtTe°
)

86 
	}
}

88 
	gUã°
::~
	$Uã°
()

90 
	}
}

92 
Uã°
::
	$runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

94 
	`execuãPœtf‹mS≥cificRunO√Te°
(
∂ugö
, 
ªsu…
);

95 
	}
}

97 
	gUã°
::
	$runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

99 
∂ugö
->
	`runAŒPªTe°A˘i⁄
(*
this
, 
ªsu…
);

100 
	`run
(
ªsu…
);

101 
∂ugö
->
	`runAŒPo°Te°A˘i⁄
(*
this
, 
ªsu…
);

102 
	}
}

104 
	gUã°
::
	$run
(
Te°Resu…
& 
ªsu…
)

107 
Uã°
* 
ßvedTe°
 = 
	`gëCuºít
();

108 
Te°Resu…
* 
ßvedResu…
 = 
	`gëTe°Resu…
();

110 
ªsu…
.
	`cou¡Run
();

111 
	`£tTe°Resu…
(&
ªsu…
);

112 
	`£tCuºítTe°
(
this
);

114 i‡(
	`execuãPœtf‹mS≥cificSëup
()) {

115 
	`execuãPœtf‹mS≥cificTe°Body
();

117 
	`execuãPœtf‹mS≥cificTórdown
();

119 
	`£tCuºítTe°
(
ßvedTe°
);

120 
	`£tTe°Resu…
(
ßvedResu…
);

121 
	}
}

123 
	gUã°
::
	$exôCuºítTe°
()

125 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

126 
	}
}

128 
Uã°
 *
	gUã°
::
	$gëNext
() const

130  
√xt_
;

131 
	}
}

133 
Uã°
* 
	gUã°
::
	$addTe°
(
Uã°
 *
ã°
)

135 
√xt_
 = 
ã°
;

136  
this
;

137 
	}
}

139 
	gUã°
::
	$cou¡Te°s
()

141  
√xt_
->
	`cou¡Te°s
() + 1;

142 
	}
}

144 
boﬁ
 
	gUã°
::
	$isNuŒ
() const

146  
Ál£
;

147 
	}
}

149 
Sim∂eSåög
 
	gUã°
::
	$gëMa¸oName
() const

152 
	}
}

154 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëName
() const

156  
	`Sim∂eSåög
(
«me_
);

157 
	}
}

159 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëGroup
() const

161  
	`Sim∂eSåög
(
group_
);

162 
	}
}

164 
Sim∂eSåög
 
	gUã°
::
	$gëF‹m©ãdName
() const

166 
Sim∂eSåög
 
	`f‹m©ãdName
(
	`gëMa¸oName
());

167 
f‹m©ãdName
 += "(";

168 
f‹m©ãdName
 +
group_
;

169 
f‹m©ãdName
 += ", ";

170 
f‹m©ãdName
 +
«me_
;

171 
f‹m©ãdName
 += ")";

173  
f‹m©ãdName
;

174 
	}
}

176 c⁄° * 
	gUã°
::
	$gëProgªssIndiˇt‹
() const

179 
	}
}

181 
	gUã°
::
	$£tFûeName
(c⁄° * 
fûeName
)

183 
fûe_
 = 
fûeName
;

184 
	}
}

186 
	gUã°
::
	$£tLöeNumbî
(
löeNumbî
)

188 
löeNumbî_
 = 
löeNumbî
;

189 
	}
}

191 
	gUã°
::
	$£tGroupName
(c⁄° * 
groupName
)

193 
group_
 = 
groupName
;

194 
	}
}

196 
	gUã°
::
	$£tTe°Name
(c⁄° * 
ã°Name
)

198 
«me_
 = 
ã°Name
;

199 
	}
}

201 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëFûe
() const

203  
	`Sim∂eSåög
(
fûe_
);

204 
	}
}

206 
	gUã°
::
	$gëLöeNumbî
() const

208  
löeNumbî_
;

209 
	}
}

211 
	gUã°
::
	$£tup
()

213 
	}
}

215 
Uã°
::
	$ã°Body
()

217 
	}
}

219 
Uã°
::
	$ã¨down
()

221 
	}
}

223 
boﬁ
 
Uã°
::
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const

225 
Sim∂eSåög
 
	`group
(
group_
);

226 
Sim∂eSåög
 
	`«me
(
«me_
);

227 i‡(
group
.
	`c⁄èös
(
groupFûãr
Ë&& 
«me
.c⁄èös(
«meFûãr
)Ë 
åue
;

229  
Ál£
;

230 
	}
}

232 
	gUã°
::
	$ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
)

234 
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

235 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

236 
	}
}

238 
	gUã°
::
	$as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

240 
	`gëTe°Resu…
()->
	`cou¡Check
();

241 i‡(!
c⁄dôi⁄
)

242 
	`ÁûWôh
(
	`CheckFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
c⁄dôi⁄Såög
));

243 
	}
}

245 
	gUã°
::
	$Áû
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

247 
	`ÁûWôh
(
	`FaûFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ãxt
));

248 
	}
}

250 
	gUã°
::
	$as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

252 
	`gëTe°Resu…
()->
	`cou¡Check
();

253 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

254 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

255 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

256 i‡(
	`Pœtf‹mS≥cificSåCmp
(
ex≥˘ed
, 
a˘uÆ
) != 0)

257 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

258 
	}
}

260 
	gUã°
::
	$as£πC°rNoCa£EquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

262 
	`gëTe°Resu…
()->
	`cou¡Check
();

263 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

264 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

265 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

266 i‡(!
	`Sim∂eSåög
(
ex≥˘ed
).
	`equÆsNoCa£
(
a˘uÆ
))

267 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

268 
	}
}

270 
	gUã°
::
	$as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

272 
	`gëTe°Resu…
()->
	`cou¡Check
();

273 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

274 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

275 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

276 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èös
(
ex≥˘ed
))

277 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

278 
	}
}

280 
	gUã°
::
	$as£πC°rNoCa£C⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

282 
	`gëTe°Resu…
()->
	`cou¡Check
();

283 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

284 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

285 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

286 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èösNoCa£
(
ex≥˘ed
))

287 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

288 
	}
}

290 
	gUã°
::
	$as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

292 
	`gëTe°Resu…
()->
	`cou¡Check
();

293 i‡(
ex≥˘ed
 !
a˘uÆ
) {

294 
L⁄gsEquÆFaûuª
 
	`f
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

295 
	`gëTe°Resu…
()->
	`addFaûuª
(
f
);

296 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

298 
	}
}

300 
	gUã°
::
	$as£πPoöãrsEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

302 
	`gëTe°Resu…
()->
	`cou¡Check
();

303 i‡(
ex≥˘ed
 !
a˘uÆ
)

304 
	`ÁûWôh
(
	`EquÆsFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)));

305 
	}
}

307 
	gUã°
::
	$as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

309 
	`gëTe°Resu…
()->
	`cou¡Check
();

310 i‡(!
	`doubÀs_equÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
))

311 
	`ÁûWôh
(
	`DoubÀsEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
));

312 
	}
}

314 
	gUã°
::
	$¥öt
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

316 
Sim∂eSåög
 
°rögToPröt
 = "\n";

317 
°rögToPröt
 +
fûeName
;

318 
°rögToPröt
 += ":";

319 
°rögToPröt
 +
	`SåögFrom
(
löeNumbî
);

320 
°rögToPröt
 += " ";

321 
°rögToPröt
 +
ãxt
;

322 
	`gëTe°Resu…
()->
	`¥öt
(
°rögToPröt
.
	`asCh¨Såög
());

323 
	}
}

325 
	gUã°
::
	$¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

327 
	`¥öt
(
ãxt
.
	`asCh¨Såög
(), 
fûeName
, 
löeNumbî
);

328 
	}
}

330 
Te°Resu…
* 
	gUã°
::
ã°Resu…_
 = 
NULL
;

331 
Uã°
* 
	gUã°
::
cuºítTe°_
 = 
NULL
;

333 
	gUã°
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

335 
ã°Resu…_
 = 
ªsu…
;

336 
	}
}

338 
	gUã°
::
	$£tCuºítTe°
(
Uã°
* 
ã°
)

340 
cuºítTe°_
 = 
ã°
;

341 
	}
}

343 
Te°Resu…
* 
	gUã°
::
	$gëTe°Resu…
()

345 i‡(
ã°Resu…_
 =
NULL
)

346  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
().
	`gëTe°Resu…
();

347  
ã°Resu…_
;

348 
	}
}

350 
Uã°
* 
	gUã°
::
	$gëCuºít
()

352 i‡(
cuºítTe°_
 =
NULL
)

353  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
();

354  
cuºítTe°_
;

355 
	}
}

360 
	gNuŒTe°
::
	$NuŒTe°
() :

361 
	`Uã°
("NullGroup", "NullName", "NullFile", -1, 0)

363 
	}
}

365 
	gNuŒTe°
::
	$NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
) :

366 
	`Uã°
("NuŒGroup", "NuŒName", 
fûeName
, 
löeNumbî
, 0)

368 
	}
}

370 
	gNuŒTe°
::~
	$NuŒTe°
()

372 
	}
}

374 
NuŒTe°
& NuŒTe°::
	$ö°™˚
()

376 
NuŒTe°
 
_ö°™˚
;

377  
_ö°™˚
;

378 
	}
}

380 
	gNuŒTe°
::
	$cou¡Te°s
()

383 
	}
}

385 
Uã°
* 
	gNuŒTe°
::
	$gëNext
() const

387  &
	`ö°™˚
();

388 
	}
}

390 
boﬁ
 
	gNuŒTe°
::
	$isNuŒ
() const

392  
åue
;

393 
	}
}

397 
	gTe°In°ÆÀr
::
	$Te°In°ÆÀr
(
Uã°
* 
t
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
)

399 
t
->
	`£tGroupName
(
groupName
);

400 
t
->
	`£tTe°Name
(
ã°Name
);

401 
t
->
	`£tFûeName
(
fûeName
);

402 
t
->
	`£tLöeNumbî
(
löeNumbî
);

403 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`addTe°
(
t
);

404 
	}
}

406 
	gTe°In°ÆÀr
::~
	$Te°In°ÆÀr
()

408 
	}
}

410 
Te°In°ÆÀr
::
	$unDo
()

412 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`unDoLa°AddTe°
();

413 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp

28 
	~<°dlib.h
>

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 #unde‡
mÆloc


31 #unde‡
‰ì


32 #unde‡
ˇŒoc


33 #unde‡
ªÆloc


35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~<sys/time.h
>

37 
	~<time.h
>

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~<£tjmp.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

43 
	~<˘y≥.h
>

45 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

47 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

48 
	gjmp_buf_ödex
 = 0;

50 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

52 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

53 
jmp_buf_ödex
++;

54 
	`£tup
();

55 
jmp_buf_ödex
--;

56  
åue
;

58  
Ál£
;

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

63 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

64 
jmp_buf_ödex
++;

65 
	`ã°Body
();

66 
jmp_buf_ödex
--;

68 
	}
}

70 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

72 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

73 
jmp_buf_ödex
++;

74 
	`ã¨down
();

75 
jmp_buf_ödex
--;

77 
	}
}

79 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

81 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

82 
jmp_buf_ödex
++;

83 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

84 
jmp_buf_ödex
--;

86 
	}
}

88 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

90 
jmp_buf_ödex
--;

91 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

92 
	}
}

96 
	$TimeInMûlisIm∂emíèti⁄
()

98 
timevÆ
 
tv
;

99 
timez⁄e
 
tz
;

100 
	`gëtimeofday
(&
tv
, &
tz
);

101  (
tv
.
tv_£c
 * 1000Ë+ ()((Èv.
tv_u£c
 * 0.001);

102 
	}
}

104 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

106 
	$GëPœtf‹mS≥cificTimeInMûlis
()

108  
	`timeInMûlisFp
();

109 
	}
}

111 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

113 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

114 
	}
}

118 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

120 
time_t
 
tm
 = 
	`time
(
NULL
);

121  
	`˘ime
(&
tm
);

122 
	}
}

124 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

126 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

128  
	`timeSåögFp
();

129 
	}
}

131 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

133 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

136 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

138  
	`©oi
(
°r
);

139 
	}
}

141 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

143  
	`°æí
(
°r
);

144 
	}
}

146 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

148  
	`°rˇt
(
s1
, 
s2
);

149 
	}
}

151 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

153  
	`°r˝y
(
s1
, 
s2
);

154 
	}
}

156 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

158  
	`°∫˝y
(
s1
, 
s2
, 
size
);

159 
	}
}

161 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

163  
	`°rcmp
(
s1
, 
s2
);

164 
	}
}

166 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

168  
	`°∫cmp
(
s1
, 
s2
, 
size
);

169 
	}
}

170 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

172  (*Ë
	`°r°r
(
s1
, 
s2
);

173 
	}
}

175 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

177  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

178 
	}
}

180 
	$Pœtf‹mS≥cificToLowî
(
c
)

182  (Ë
	`tﬁowî
((Ë
c
);

183 
	}
}

185 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187  
	`f›í
(
fûíame
, 
Êag
);

188 
	}
}

191 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

193 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

194 
	}
}

196 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

198 
	`f˛o£
((
FILE
*)
fûe
);

199 
	}
}

201 
	$Pœtf‹mS≥cificFlush
()

203 
	`fÊush
(
°dout
);

204 
	}
}

206 
	$Pœtf‹mS≥cificPutch¨
(
c
)

208  
	`putch¨
(
c
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

213  
	`mÆloc
(
size
);

214 
	}
}

216 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

218  
	`ªÆloc
(
mem‹y
, 
size
);

219 
	}
}

221 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

223 
	`‰ì
(
mem‹y
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

228  
	`mem˝y
(
s1
, 
s2
, 
size
);

229 
	}
}

231 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

233  
	`mem£t
(
mem
, 
c
, 
size
);

234 
	}
}

237 
	$Pœtf‹mS≥cificFabs
(
d
)

239  
	`Ábs
(
d
);

240 
	}
}

242 
	$Pœtf‹mS≥cificIsN™
(
d
)

244  
	`i¢™
(()
d
);

245 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Iar\UtestPlatform.cpp

29 
	~<time.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<£tjmp.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~"CµUTe°/Te°H¨√ss.h
"

37 #unde‡
mÆloc


38 #unde‡
ˇŒoc


39 #unde‡
ªÆloc


40 #unde‡
‰ì


41 
	~"CµUTe°/Te°Regi°ry.h
"

42 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

44 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

45 
	gjmp_buf_ödex
 = 0;

47 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

49 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

50 
jmp_buf_ödex
++;

51 
	`£tup
();

52 
jmp_buf_ödex
--;

53  
åue
;

55  
Ál£
;

56 
	}
}

58 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

60 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

61 
jmp_buf_ödex
++;

62 
	`ã°Body
();

63 
jmp_buf_ödex
--;

65 
	}
}

67 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

69 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

70 
jmp_buf_ödex
++;

71 
	`ã¨down
();

72 
jmp_buf_ödex
--;

74 
	}
}

76 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

78 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

79 
jmp_buf_ödex
++;

80 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

81 
jmp_buf_ödex
--;

83 
	}
}

85 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

87 
jmp_buf_ödex
--;

88 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

89 
	}
}

93 
	$TimeInMûlisIm∂emíèti⁄
()

95 
˛ock_t
 
t
 = 
	`˛ock
();

97 
t
 =Å * 10;

100 
	}
}

102 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

104 
	$GëPœtf‹mS≥cificTimeInMûlis
()

106  
	`timeInMûlisFp
();

107 
	}
}

109 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

111 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

112 
	}
}

116 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

118 
time_t
 
tm
 = 
	`time
(
NULL
);

119  
	`˘ime
(&
tm
);

120 
	}
}

122 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

124 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

126  
	`timeSåögFp
();

127 
	}
}

129 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

131 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

134 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

136  
	`©oi
(
°r
);

137 
	}
}

139 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

141  
	`°æí
(
°r
);

142 
	}
}

144 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

146  
	`°rˇt
(
s1
, 
s2
);

147 
	}
}

149 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

151  
	`°r˝y
(
s1
, 
s2
);

152 
	}
}

154 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

156  
	`°∫˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

161  
	`°rcmp
(
s1
, 
s2
);

162 
	}
}

164 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

166  
	`°∫cmp
(
s1
, 
s2
, 
size
);

167 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  
	`°r°r
((*)
s1
, (*)
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
	$Pœtf‹mS≥cificToLowî
(
c
)

181  
	`tﬁowî
(
c
);

182 
	}
}

184 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187 
	}
}

189 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

191 
	}
}

193 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

195 
	}
}

197 
	$Pœtf‹mS≥cificFlush
()

199 
	}
}

201 
	$Pœtf‹mS≥cificPutch¨
(
c
)

203  
	`putch¨
(
c
);

204 
	}
}

206 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

208  
	`mÆloc
(
size
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

213  
	`ªÆloc
(
mem‹y
, 
size
);

214 
	}
}

216 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

218 
	`‰ì
(
mem‹y
);

219 
	}
}

221 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

223  
	`mem˝y
(
s1
, 
s2
, 
size
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

228  
	`mem£t
(
mem
, 
c
, 
size
);

229 
	}
}

231 
	$Pœtf‹mS≥cificFabs
(
d
)

233  
	`Ábs
(
d
);

234 
	}
}

236 
	$Pœtf‹mS≥cificIsN™
(
d
)

238  
	`i¢™
(
d
);

239 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp

28 
	~"CµUTe°/Mem‹yLókW¨nög.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

34 
	gÆloˇãdBlocks
 = 0;

35 
	gÆloˇãdAºays
 = 0;

36 
	gfú°InôülBlocks
 = 0;

37 
	gfú°InôülAºays
 = 0;

38 
boﬁ
 
	gªp‹ãrRegi°îed
 = 
Ál£
;

40 ˛as†
	cMem‹yLókW¨nögD©a


42 
	mpublic
:

43 
Mem‹yLókW¨nögD©a
();

45 
	möôülBlocksU£d
;

46 
	möôülAºaysU£d
;

48 
	mblockUßgeCheckPoöt
;

49 
	m¨øyUßgeCheckPoöt
;

50 
	mex≥˘Cou¡
;

51 
	mmesßge
[100];

54 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

56 
_im∂
 = (
Mem‹yLókW¨nögD©a
*Ë
	`mÆloc
((MemoryLeakWarningData));

57 
_im∂
->
öôülBlocksU£d
 = 0;

58 
_im∂
->
öôülAºaysU£d
 = 0;

60 
_im∂
->
blockUßgeCheckPoöt
 = 0;

61 
_im∂
->
¨øyUßgeCheckPoöt
 = 0;

62 
_im∂
->
ex≥˘Cou¡
 = 0;

63 
_im∂
->
mesßge_
[0] = '\0';

64 
	}
}

66 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

68 
	`‰ì
(
_im∂
);

69 
	}
}

72 
ªp‹tMem‹yBÆœn˚
();

75 
	$ªp‹tMem‹yBÆœn˚
()

77 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
fú°InôülBlocks
;

78 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
fú°InôülAºays
;

79 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

81 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

82 
	`¥ötf
("NoÜeaks but someárrays were deleted without []\n");

85 i‡(
blockBÆ™˚
 > 0)

86 
	`¥ötf
("Mem‹yÜók! %d block†nŸ dñëed\n", 
blockBÆ™˚
);

87 i‡(
¨øyBÆ™˚
 > 0)

88 
	`¥ötf
("Mem‹yÜók! %dáºay†nŸ dñëed\n", 
¨øyBÆ™˚
);

89 i‡(
blockBÆ™˚
 < 0)

90 
	`¥ötf
("M‹êblock†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
blockBÆ™˚
);

91 i‡(
¨øyBÆ™˚
 < 0)

92 
	`¥ötf
("M‹ê¨øy†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
¨øyBÆ™˚
);

94 
	`¥ötf
("NOTE - some memoryÜeaksáppearÅo beállocated staticsÅhatáreÇotÑeleased\n"

100 
	}
}

103 
Mem‹yLókW¨nög
* Mem‹yLókW¨nög::
_œã°
 = 
NULL
;

105 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

107 
_œã°
 = 
this
;

108 
	`Cª©eD©a
();

109 
	}
}

111 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

113 
	`De°royD©a
();

114 
	}
}

116 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

118  
_œã°
;

119 
	}
}

121 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

123 
_œã°
 = 
œã°
;

124 
	}
}

126 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

128 
_im∂
->
öôülBlocksU£d
 = 
ÆloˇãdBlocks
;

129 
_im∂
->
öôülAºaysU£d
 = 
ÆloˇãdAºays
;

131 i‡(!
ªp‹ãrRegi°îed
) {

132 
fú°InôülBlocks
 = 
ÆloˇãdBlocks
;

133 
fú°InôülAºays
 = 
ÆloˇãdAºays
;

134 
ªp‹ãrRegi°îed
 = 
åue
;

137 
	}
}

139 c⁄° * 
	gMem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

141 i‡(
_im∂
->
öôülBlocksU£d
 !(
ÆloˇãdBlocks
-
toBeDñëedLóks
)

142 || 
_im∂
->
öôülAºaysU£d
 !
ÆloˇãdAºays
 )

144 
	`¥ötf
("initial blocks=%d,állocated blocks=%d\ninitialárrays=%d,állocatedárrays=%d\n",

145 
_im∂
->
öôülBlocksU£d
, 
ÆloˇãdBlocks
, _im∂->
öôülAºaysU£d
, 
ÆloˇãdAºays
);

151 
	}
}

153 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

155 
_im∂
->
blockUßgeCheckPoöt
 = 
ÆloˇãdBlocks
;

156 
_im∂
->
¨øyUßgeCheckPoöt
 = 
ÆloˇãdAºays
;

157 
	}
}

159 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

161 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
;

162 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
;

164 i‡(
_im∂
->
ex≥˘Cou¡
 !0 && 
blockBÆ™˚
 + 
¨øyBÆ™˚
 == _impl->expectCount)

165  
Ál£
;

166 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

167  
Ál£
;

168 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

169 
	`•rötf
(
_im∂
->
mesßge_
, "NoÜeaks but someárrays were deleted without []\n");

172 
nch¨s
 = 0;

173 i‡(
_im∂
->
blockUßgeCheckPoöt
 !
ÆloˇãdBlocks
)

174 
nch¨s
 = 
	`•rötf
(
_im∂
->
mesßge_
, "thisÅestÜeaks %d blocks",

175 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
);

177 i‡(
_im∂
->
¨øyUßgeCheckPoöt
 !
ÆloˇãdAºays
)

178 
	`•rötf
(
_im∂
->
mesßge_
 + 
nch¨s
, "thisÅestÜeaks %dárrays",

179 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
);

181  
åue
;

182 
	}
}

184 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

186  
_im∂
->
mesßge_
;

187 
	}
}

189 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

191 
_im∂
->
ex≥˘Cou¡
 = 
n
;

192 
	}
}

196 * 
›î©‹
 
	$√w
(
size_t
 
size
)

198 
ÆloˇãdBlocks
++;

199  
	`mÆloc
(
size
);

200 
	}
}

202 
›î©‹
 
	$dñëe
(* 
mem
)

204 
ÆloˇãdBlocks
--;

205 
	`‰ì
(
mem
);

206 
	}
}

208 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

210 
	gÆloˇãdAºays
++;

211  
mÆloc
(
size
);

214 
›î©‹
 
	gdñëe
[](* 
	gmem
)

216 
	gÆloˇãdAºays
--;

217 
‰ì
(
mem
);

220 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

222 
ÆloˇãdBlocks
++;

223  
	`mÆloc
(
size
);

225 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°/Te°Resu….h
"

4 
	~<time.h
>

5 
	~<sys/time.h
>

7 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

9 
	`ã°Body
();

10 
	}
}

15 
	$TimeInMûlisIm∂emíèti⁄
()

17 
timevÆ
 
tv
;

18 
timez⁄e
 
tz
;

19 ::
	`gëtimeofday
(&
tv
, &
tz
);

20  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

21 
	}
}

23 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

25 
	$GëPœtf‹mS≥cificTimeInMûlis
()

27  
	`timeInMûlisFp
();

28 
	}
}

30 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

32 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

33 
	}
}

37 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
()

39 
time_t
 
tm
 = 
	`time
(
NULL
);

40  
	`˘ime
(&
tm
);

41 
	}
}

43 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

45 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
()

47  
	`timeSåögFp
();

48 
	}
}

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ())

52 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

53 
	}
}

56 
	~<£tjmp.h
>

58 
jmp_buf
 
	gã°_exô_jmp_buf
;

60 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
))

63 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

64 
	}
}

66 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

68 
	`l⁄gjmp
(
ã°_exô_jmp_buf
, 1);

69 
	}
}

71 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

73 
	}
}

75 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp

28 
	~"Mem‹yLókW¨nög.h
"

30 
	~<e32ba£.h
>

32 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
_œã°
 = 
NULL
;

35 ˛as†
	cMem‹yLókW¨nögD©a
 : 
public
 
CBa£
 {

36 
public
:

37 
TI¡
 
iInôülAŒocCñls
;

38 
TI¡
 
	miEx≥˘edLóks
;

39 
TI¡
 
	miInôülThªadH™dÀCou¡
;

40 
TI¡
 
	miInôülPro˚ssH™dÀCou¡
;

43 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

45 
_œã°
 = 
this
;

46 
	`Cª©eD©a
();

47 
	}
}

49 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

51 
	`De°royD©a
();

52 
	}
}

54 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

56 
	}
}

58 c⁄° * 
Mem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

60 
TI¡
 
	`˚ŒDif„ªn˚
(
U£r
::
	`Cou¡AŒocCñls
(Ë- 
_im∂
->
iInôülAŒocCñls
);

61 if–
˚ŒDif„ªn˚
 !
toBeDñëedLóks
 ) {

65 
TI¡
 
¥o˚ssH™dÀs
;

66 
TI¡
 
thªadH™dÀs
;

67 
	`RThªad
().
	`H™dÀCou¡
(
¥o˚ssH™dÀs
, 
thªadH™dÀs
);

69 if(
_im∂
->
iInôülPro˚ssH™dÀCou¡
 !
¥o˚ssH™dÀs
 ||

70 
_im∂
->
iInôülThªadH™dÀCou¡
 !
thªadH™dÀs
) {

75 
	}
}

77 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

79 
_im∂
->
iInôülAŒocCñls
 = 
U£r
::
	`Cou¡AŒocCñls
();

80 
	`RThªad
().
	`H™dÀCou¡
(
_im∂
->
iInôülPro˚ssH™dÀCou¡
, _im∂->
iInôülThªadH™dÀCou¡
);

81 
	}
}

83 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

85 
TI¡
 
	`ÆloˇãdCñls
(
U£r
::
	`Cou¡AŒocCñls
());

86 if(
_im∂
->
iEx≥˘edLóks
 != 0) {

87 
TI¡
 
	`dif„ªn˚
(
	`Abs
(
_im∂
->
iInôülAŒocCñls
 - 
ÆloˇãdCñls
));

88  
dif„ªn˚
 !
_im∂
->
iEx≥˘edLóks
;

90  
ÆloˇãdCñls
 !
_im∂
->
iInôülAŒocCñls
;

91 
	}
}

93 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

96 
	}
}

98 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

100 
_im∂
->
iEx≥˘edLóks
 = 
n
;

101 
	}
}

104 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

106 
_im∂
 = 
	`√w
(
ELóve
Ë
	`Mem‹yLókW¨nögD©a
();

107 
	}
}

109 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

111 
dñëe
 
_im∂
;

112 
_im∂
 = 
NULL
;

113 
	}
}

115 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

117  
_œã°
;

118 
	}
}

120 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

122 
_œã°
 = 
œã°
;

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~<e32def.h
>

30 
	~<e32°d.h
>

31 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<°dlib.h
>

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

39 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

41 
TI¡
 
	`îr
(
KEºN⁄e
);

42 
	`TRAP
(
îr
, 
	`ã°Body
());

43 if(
îr
 !
KEºN⁄e
) {

44 
Uã°
::
	`gëCuºít
()->
	`Áû
("Leave inÅest method", "", 0);

46 
	}
}

48 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
() {

49 
U£r
::
	`Lóve
(
KEºN⁄e
);

50 
	}
}

52 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
() {

53 
	`£tup
();

54  
åue
;

55 
	}
}

57 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
) {

58 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
() {

62 
	`ã¨down
();

63 
	}
}

65 
	$TimeInMûlisIm∂emíèti⁄
() {

66 
timevÆ
 
tv
;

67 
timez⁄e
 
tz
;

68 ::
	`gëtimeofday
(&
tv
, &
tz
);

69  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

70 
	}
}

72 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

74 
	$GëPœtf‹mS≥cificTimeInMûlis
() {

75  
	`timeInMûlisFp
();

76 
	}
}

78 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ()) {

79 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

80 
	}
}

84 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
() {

85 
time_t
 
tm
 = 
	`time
(
NULL
);

86  
	`˘ime
(&
tm
);

87 
	}
}

89 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

91 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
() {

92  
	`timeSåögFp
();

93 
	}
}

95 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ()) {

96 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

97 
	}
}

99 
	$Pœtf‹mS≥cificVSN¥ötf
(* 
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
) {

100  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

101 
	}
}

103 
	$Pœtf‹mS≥cificToLowî
(
c
)

105  
	`tﬁowî
(
c
);

106 
	}
}

108 
	$Pœtf‹mS≥cificFlush
() {

109 
	`fÊush
(
°dout
);

110 
	}
}

112 
	$Pœtf‹mS≥cificPutch¨
(
c
) {

113  
	`putch¨
(
c
);

114 
	}
}

116 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
) {

117  
	`°r˝y
(
s1
, 
s2
);

118 
	}
}

120 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
s
) {

121  
	`°æí
(
s
);

122 
	}
}

124 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
) {

125  
	`°r°r
(
s1
, 
s2
);

126 
	}
}

128 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

129  
	`°rcmp
(
s1
, 
s2
);

130 
	}
}

132 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

137  
	`°∫cmp
(
s1
, 
s2
, 
size
);

138 
	}
}

140 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
) {

141  
	`°rˇt
(
s1
, 
s2
);

142 
	}
}

144 
	$Pœtf‹mS≥cificFabs
(
d
) {

145  
	`Ábs
(
d
);

146 
	}
}

148 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
) {

149  
	`mÆloc
(
size
);

150 
	}
}

152 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
) {

153  
	`ªÆloc
(
mem‹y
, 
size
);

154 
	}
}

156 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
) {

157 
	`‰ì
(
mem‹y
);

158 
	}
}

160 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

161  
	`mem˝y
(
s1
, 
s2
, 
size
);

162 
	}
}

164 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

166  
	`mem£t
(
mem
, 
c
, 
size
);

167 
	}
}

169 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
) {

170  
	`f›í
(
fûíame
, 
Êag
);

171 
	}
}

173 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
) {

174 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
) {

178 
	`f˛o£
((
FILE
*)
fûe
);

179 
	}
}

181 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
) {

182  
	`©oi
(
°r
);

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp

1 
	~<°dlib.h
>

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 #unde‡
mÆloc


4 #unde‡
‰ì


5 #unde‡
ˇŒoc


6 #unde‡
ªÆloc


8 
	~"CµUTe°/Te°Regi°ry.h
"

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<£tjmp.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

14 
	~<Êﬂt.h
>

15 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

17 
	~<wödows.h
>

18 
	~<mmsy°em.h
>

22 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

23 
	gjmp_buf_ödex
 = 0;

25 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

27 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

28 
jmp_buf_ödex
++;

29 
	`£tup
();

30 
jmp_buf_ödex
--;

31  
åue
;

33  
Ál£
;

34 
	}
}

36 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

38 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

39 
jmp_buf_ödex
++;

40 
	`ã°Body
();

41 
jmp_buf_ödex
--;

43 
	}
}

45 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

47 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

48 
jmp_buf_ödex
++;

49 
	`ã¨down
();

50 
jmp_buf_ödex
--;

52 
	}
}

54 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö_
, 
Te°Resu…
& 
ªsu…_
)

56 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

57 
jmp_buf_ödex
++;

58 
	`runO√Te°
(
∂ugö_
, 
ªsu…_
);

59 
jmp_buf_ödex
--;

61 
	}
}

63 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

65 
jmp_buf_ödex
--;

66 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

67 
	}
}

73 
	$TimeInMûlisIm∂emíèti⁄
()

75  
	`timeGëTime
()/1000;

76 
	}
}

78 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

80 
	$GëPœtf‹mS≥cificTimeInMûlis
()

82  
	`timeInMûlisFp
();

83 
	}
}

85 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

87 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

88 
	}
}

92 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

95 
	}
}

97 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

99 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

101  
	`timeSåögFp
();

102 
	}
}

104 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

106 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

112 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

114  
	`©oi
(
°r
);

115 
	}
}

117 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

119  
	`°æí
(
°r
);

120 
	}
}

122 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

124  
	`°rˇt
(
s1
, 
s2
);

125 
	}
}

127 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

129  
	`°r˝y
(
s1
, 
s2
);

130 
	}
}

132 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

134  
	`°∫˝y
(
s1
, 
s2
, 
size
);

135 
	}
}

137 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

139  
	`°rcmp
(
s1
, 
s2
);

140 
	}
}

142 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

144  
	`°∫cmp
(
s1
, 
s2
, 
size
);

145 
	}
}

146 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

148  (*Ë
	`°r°r
(
s1
, 
s2
);

149 
	}
}

151 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

153 * 
buf
 = 0;

154 
sizeGuess
 = 
size
;

156 
ªsu…
 = 
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

157 
°r
[
size
-1] = 0;

158 
ªsu…
 == -1)

160 i‡(
buf
 != 0)

161 
	`‰ì
(
buf
);

162 
sizeGuess
 += 10;

163 
buf
 = (*)
	`mÆloc
(
sizeGuess
);

164 
ªsu…
 = 
	`_v¢¥ötf
–
buf
, 
sizeGuess
, 
f‹m©
, 
¨gs
);

167 i‡(
buf
 != 0)

168 
	`‰ì
(
buf
);

169  
ªsu…
;

171 
	}
}

173 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

175  
	`f›í
(
fûíame
, 
Êag
);

176 
	}
}

178 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

180 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

181 
	}
}

183 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

185 
	`f˛o£
((
FILE
*)
fûe
);

186 
	}
}

188 
	$Pœtf‹mS≥cificFlush
()

190 
	`fÊush
(
°dout
);

191 
	}
}

193 
	$Pœtf‹mS≥cificPutch¨
(
c
)

195  
	`putch¨
(
c
);

196 
	}
}

198 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

200  
	`mÆloc
(
size
);

201 
	}
}

203 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

205  
	`ªÆloc
(
mem‹y
, 
size
);

206 
	}
}

208 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

210 
	`‰ì
(
mem‹y
);

211 
	}
}

213 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

215  
	`mem˝y
(
s1
, 
s2
, 
size
);

216 
	}
}

218 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

220  
	`mem£t
(
mem
, 
c
, 
size
);

221 
	}
}

223 
	$Pœtf‹mS≥cificFabs
(
d
)

225  
	`Ábs
(
d
);

226 
	}
}

228 
	$Pœtf‹mS≥cificIsN™
(
d
)

230  
	`_i¢™
(
d
);

231 
	}
}

240 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…_
)

242 
åy
 {

243 
	`runO√Te°
(
ã°
, 
ªsu…_
) ;

245 
	`ˇtch
 () {

249 
	}
}

251 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

253 
	`ã°Body
();

254 
	}
}

256 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

258 
	`throw
(1);

259 
	}
}

263 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, * 
¨gs
)

265  
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, (
va_li°
Ë
¨gs
);

266 
	}
}

268 
	$Pœtf‹mS≥cificToLowî
(
c
)

270  
	`tﬁowî
(
c
);

271 
	}
}

275 
	~<£tjmp.h
>

277 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

278 
	gjmp_buf_ödex
 = 0;

280 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

282 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

283 
jmp_buf_ödex
++;

284 
	`£tup
();

285 
jmp_buf_ödex
--;

286  
åue
;

288  
Ál£
;

289 
	}
}

291 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

293 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

294 
jmp_buf_ödex
++;

295 
	`ã°Body
();

296 
jmp_buf_ödex
--;

298 
	}
}

300 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

302 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

303 
jmp_buf_ödex
++;

304 
	`ã¨down
();

305 
jmp_buf_ödex
--;

307 
	}
}

309 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

311 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

312 
jmp_buf_ödex
++;

313 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

314 
jmp_buf_ödex
--;

316 
	}
}

319 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

321 
jmp_buf_ödex
--;

322 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

323 
	}
}

339 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

341 
åy
 {

342 
	`£tup
();

344 
	`ˇtch
 () {

345  
Ál£
;

347  
åue
;

348 
	}
}

350 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

352 
åy
 {

353 
	`ã°Body
();

355 
	`ˇtch
 () {

358 
	}
}

360 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

362 
åy
 {

363 
	`ã¨down
();

365 
	`ˇtch
 () {

368 
	}
}

370 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

372 
	`throw
(1);

373 
	}
}

376 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

378 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

380 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	$maö
(
ac
, c⁄° ** 
av
)

33 
	`CHECK
(
åue
);

34 
	`LONGS_EQUAL
(1, 1);

36  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllTests.h

29 
IMPORT_TEST_GROUP
–
Uã°
);

30 
IMPORT_TEST_GROUP
–
Faûuª
);

31 
IMPORT_TEST_GROUP
–
Te°Ouçut
);

32 
IMPORT_TEST_GROUP
–
Sim∂eSåög
);

33 
IMPORT_TEST_GROUP
–
Te°In°ÆÀr
);

34 
IMPORT_TEST_GROUP
–
NuŒTe°
);

35 
IMPORT_TEST_GROUP
–
Mem‹yLókW¨nögTe°
);

36 
IMPORT_TEST_GROUP
–
Te°H¨√ss_c
);

37 
IMPORT_TEST_GROUP
–
Comm™dLöeTe°Ru¬î
);

38 
IMPORT_TEST_GROUP
–
JUnôOuçutTe°
);

39 
IMPORT_TEST_GROUP
–
Mem‹yLókDëe˘‹Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCFile.c

1 
	~<°dlib.h
>

2 
	~"AŒoˇti⁄InCFûe.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

7 * 
	$mÆlocAŒoˇti⁄
()

9  
	`mÆloc
(10UL);

10 
	}
}

12 
	$‰ìAŒoˇti⁄
(* 
mem‹y
)

14 
	`‰ì
(
mem‹y
);

15 
	}
}

17 #unde‡
‰ì


19 
	$‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
)

21 
	`‰ì
(
mem‹y
);

22 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCFile.h

1 #i‚de‡
ALLOCATIONINCFILE_H


2 
	#ALLOCATIONINCFILE_H


	)

4 * 
mÆlocAŒoˇti⁄
();

5 
‰ìAŒoˇti⁄
(* 
mem‹y
);

6 
‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCppFile.cpp

4 #unde‡
√w


5 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

7 * 
	$√wAŒoˇti⁄
()

9  
√w
 ;

10 
	}
}

12 * 
	$√wAºayAŒoˇti⁄
()

14  
√w
 [100];

15 
	}
}

17 #unde‡
√w


19 * 
	$√wAŒoˇti⁄WôhoutMa¸o
()

21  
√w
 ;

22 
	}
}

24 * 
	$√wAºayAŒoˇti⁄WôhoutMa¸o
()

26  
√w
 [100];

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCppFile.h

1 #i‚de‡
ALLOCATIONINCPPFILE_H


2 
	#ALLOCATIONINCPPFILE_H


	)

4 * 
√wAŒoˇti⁄
();

5 * 
√wAºayAŒoˇti⁄
();

7 * 
√wAŒoˇti⁄WôhoutMa¸o
();

8 * 
√wAºayAŒoˇti⁄WôhoutMa¸o
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CommandLineArgumentsTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

32 ˛as†
	cO±i⁄sPlugö
: 
public
 
Te°Plugö


34 
public
:

35 
	$O±i⁄sPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

36 
	$Te°Plugö
(
«me
)

39 ~
	$O±i⁄sPlugö
()

41 
	}
}

42 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

44  
åue
;

45 
	}
}

48 
	$TEST_GROUP
(
Comm™dLöeArgumíts
)

50 
Comm™dLöeArgumíts
* 
¨gs
;

51 
O±i⁄sPlugö
* 
∂ugö
;

53 
	`£tup
()

55 
∂ugö
 = 
√w
 
	`O±i⁄sPlugö
("options");

57 
	`ã¨down
()

59 
dñëe
 
¨gs
;

60 
dñëe
 
∂ugö
;

63 
boﬁ
 
	`√wArgumítP¨£r
(
¨gc
, c⁄° ** 
¨gv
)

65 
¨gs
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
);

66  
¨gs
->
	`∑r£
(
∂ugö
);

68 
	}
};

70 
	$TEST
(
Comm™dLöeArgumíts
, 
Cª©e
)

72 
	}
}

74 
	$TEST
(
Comm™dLöeArgumíts
, 
vîbo£SëMu…ùÀP¨amëîs
)

76 c⁄° * 
¨gv
[] = { "tests.exe", "-v" };

77 
	`CHECK
(
	`√wArgumítP¨£r
(2, 
¨gv
));

78 
	`CHECK
(
¨gs
->
	`isVîbo£
());

79 
	}
}

81 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©Së
)

83 
¨gc
 = 2;

84 c⁄° * 
¨gv
[] = { "tests.exe", "-r3" };

85 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

86 
	`LONGS_EQUAL
(3, 
¨gs
->
	`gëRïótCou¡
());

87 
	}
}

89 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDif„ª¡P¨amëî
)

91 
¨gc
 = 3;

92 c⁄° * 
¨gv
[] = { "tests.exe", "-r", "4" };

93 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

94 
	`LONGS_EQUAL
(4, 
¨gs
->
	`gëRïótCou¡
());

95 
	}
}

97 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDeÁu…sToTwo
)

99 
¨gc
 = 2;

100 c⁄° * 
¨gv
[] = { "tests.exe", "-r" };

101 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

102 
	`LONGS_EQUAL
(2, 
¨gs
->
	`gëRïótCou¡
());

103 
	}
}

105 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãr
)

107 
¨gc
 = 3;

108 c⁄° * 
¨gv
[] = { "tests.exe", "-g", "group" };

109 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

110 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

111 
	}
}

113 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãrSameP¨amëî
)

115 
¨gc
 = 2;

116 c⁄° * 
¨gv
[] = { "tests.exe", "-ggroup" };

117 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

118 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

119 
	}
}

121 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãr
)

123 
¨gc
 = 3;

124 c⁄° * 
¨gv
[] = { "tests.exe", "-n", "name" };

125 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

126 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

127 
	}
}

129 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãrSameP¨amëî
)

131 
¨gc
 = 2;

132 c⁄° * 
¨gv
[] = { "tests.exe", "-nname" };

133 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

134 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

135 
	}
}

137 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçut
)

139 
¨gc
 = 2;

140 c⁄° * 
¨gv
[] = { "tests.exe", "-onormal" };

141 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

142 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

143 
	}
}

145 
	$TEST
(
Comm™dLöeArgumíts
, 
£tE˛sùeOuçut
)

147 
¨gc
 = 2;

148 c⁄° * 
¨gv
[] = { "tests.exe", "-oeclipse" };

149 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

150 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

151 
	}
}

153 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçutDif„ª¡P¨amëî
)

155 
¨gc
 = 3;

156 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "normal" };

157 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

158 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

159 
	}
}

161 
	$TEST
(
Comm™dLöeArgumíts
, 
£tJUnôOuçutDif„ª¡P¨amëî
)

163 
¨gc
 = 3;

164 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "junit" };

165 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

166 
	`CHECK
(
¨gs
->
	`isJUnôOuçut
());

167 
	}
}

169 
	$TEST
(
Comm™dLöeArgumíts
, 
£tOuçutToG¨bage
)

171 
¨gc
 = 3;

172 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "garbage" };

173 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

174 
	}
}

176 
	$TEST
(
Comm™dLöeArgumíts
, 
weúdP¨am©îsPrötsUßgeAndRëu∫sFÆ£
)

178 
¨gc
 = 2;

179 c⁄° * 
¨gv
[] = { "tests.exe", "-SomethingWeird" };

180 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

181 
	`STRCMP_EQUAL
("usage [-v] [-r#] [-g groupName] [-nÅestName] [-o{normal, junit}]\n",

182 
¨gs
->
	`ußge
());

183 
	}
}

185 
	$TEST
(
Comm™dLöeArgumíts
, 
∂ugöKnowsO±i⁄
)

187 
¨gc
 = 2;

188 c⁄° * 
¨gv
[] = { "tests.exe", "-pPluginOption" };

189 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(
∂ugö
);

190 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

191 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ªmovePlugöByName
("options");

192 
	}
}

194 
	$TEST
(
Comm™dLöeArgumíts
, 
checkDeÁu…Argumíts
)

196 
¨gc
 = 1;

197 c⁄° * 
¨gv
[] = { "tests.exe" };

198 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

199 
	`CHECK
(!
¨gs
->
	`isVîbo£
());

200 
	`LONGS_EQUAL
(1, 
¨gs
->
	`gëRïótCou¡
());

201 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

202 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

203 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

204 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CommandLineTestRunnerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Te°Plugö.h
"

34 
	$TEST_GROUP
(
Comm™dLöeTe°Ru¬î
)

36 
	`£tup
()

39 
	`ã¨down
()

42 
	}
};

44 
	$IGNORE_TEST
(
Comm™dLöeTe°Ru¬î
, 
HmmmmWh©ToWrôe
)

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

33 
	$maö
(
ac
, c⁄° ** 
av
)

35 
Mem‹yRï‹ãrPlugö
 
∂ugö
;

36 
MockSuµ‹tPlugö
 
mockPlugö
;

37 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
∂ugö
);

38 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
mockPlugö
);

39  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\AllTests.h

29 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
CodeMem‹yRï‹tF‹m©ãr
)

38 
Mem‹yLókAŒoˇt‹
* 
cAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
√wAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

41 * 
mem‹y01
;

42 * 
mem‹y02
;

44 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

45 
Te°Resu…
* 
ã°Resu…
;

46 
CodeMem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
;

48 
	`£tup
()

50 
cAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

51 
√wAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

52 
√wAºayAŒoˇt‹

Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

53 
mem‹y01
 = (*) 0x01;

54 
mem‹y02
 = (*) 0x02;

56 
f‹m©ãr
 = 
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
cAŒoˇt‹
);

57 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

60 
	`ã¨down
()

62 
dñëe
 
ã°Resu…
;

63 
dñëe
 
f‹m©ãr
;

65 
	}
};

68 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

70 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

71 
	`TESTOUPUT_EQUAL
("\tvoid* file_9_1 = malloc(10);\n");

72 
	}
}

74 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

76 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

77 
ã°Ouçut
.
	`Êush
();

78 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "boo", 6);

79 
	`TESTOUPUT_EQUAL
("\tfree(file_9_1); /*át boo:6 */\n");

80 
	}
}

82 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
twoMÆlocAndTwoFªe
)

84 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 2);

85 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "boo", 4);

86 
ã°Ouçut
.
	`Êush
();

87 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "foo", 6);

88 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y02
, "bar", 8);

89 
	`TESTOUPUT_CONTAINS
("\tfree(file_2_1); /*át foo:6 */\n");

90 
	`TESTOUPUT_CONTAINS
("\tfree(boo_4_1); /*át bar:8 */\n");

91 
	}
}

93 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöSœh£s
)

95 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "dir/file", 2);

96 
	`TESTOUPUT_CONTAINS
("\tvoid* file_2");

97 
	}
}

99 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöDŸButU£Undîsc‹e
)

101 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "foo.cpp", 2);

102 
	`TESTOUPUT_CONTAINS
("foo_cpp");

103 
	}
}

105 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayAŒoˇt‹Gíî©esNewAºayCode
)

107 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

108 
	`TESTOUPUT_CONTAINS
("char* file_8_1 =Çew char[10]; /* usingÇew [] */");

109 
	}
}

111 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayGíî©esNewCode
)

113 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 6, 
mem‹y01
, "file", 4);

114 
	`TESTOUPUT_CONTAINS
("new char[6]; /* usingÇew */");

115 
	}
}

117 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAŒoˇt‹Gíî©esDñëeCode
)

119 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

120 
ã°Ouçut
.
	`Êush
();

121 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
mem‹y01
, "boo", 4);

122 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using deleteát boo:4 */");

123 
	}
}

125 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
DñëeNuŒW‹ksFöe
)

127 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
NULL
, "boo", 4);

128 
	`TESTOUPUT_CONTAINS
("delete [] NULL; /* using deleteát boo:4 */");

129 
	}
}

131 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAºayAŒoˇt‹Gíî©esDñëeAºayCode
)

133 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

134 
ã°Ouçut
.
	`Êush
();

135 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 
mem‹y01
, "boo", 4);

136 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using delete []át boo:4 */");

137 
	}
}

139 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögMÆlocOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

141 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

142 
ã°Ouçut
.
	`Êush
();

143 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "file", 8);

144 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

145 
	}
}

147 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

149 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

150 
ã°Ouçut
.
	`Êush
();

151 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

152 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

153 
	}
}

155 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eV¨übÀTwi˚Ex˚±WhíInANewTe°
)

157 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

158 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, *
this
);

159 
ã°Ouçut
.
	`Êush
();

160 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

161 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("char*"));

162 
	}
}

164 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°SèπGíî©esTESTcode
)

166 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

167 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

168 
	`TESTOUPUT_EQUAL
("*/\nTEST(groupName_memoryReport,ÅestName)\n{ /*át fileName:1 */\n");

169 
	}
}

171 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°EndGíî©esTESTcode
)

173 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

174 
f‹m©ãr
->
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

175 
	`TESTOUPUT_EQUAL
("}/*");

176 
	}
}

178 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Te°GroupGíî©esTe°GroupCode
)

180 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

181 
f‹m©ãr
->
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

182 
	`TESTOUPUT_EQUAL
("*/TEST_GROUP(groupName_memoryReport)\n{\n};\n/*");

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	$TEST_GROUP
(
Mem‹yRï‹tAŒoˇt‹
)

35 
	}
};

37 
	$TEST
(
Mem‹yRï‹tAŒoˇt‹
, 
Fun˘i⁄sAªF‹w¨dedF‹MÆlocAŒoˇt‹
)

39 
Mem‹yRï‹tAŒoˇt‹
 
Æloˇt‹
;

40 
Æloˇt‹
.
	`£tRólAŒoˇt‹
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

42 
	`CHECK
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
(Ë=
Æloˇt‹
.allocateMemoryLeakNodeSeparately());

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
N‹mÆMem‹yRï‹tF‹m©ãr
)

38 * 
mem‹y01
;

40 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

41 
Te°Resu…
* 
ã°Resu…
;

42 
N‹mÆMem‹yRï‹tF‹m©ãr
 
f‹m©ãr
;

44 
	`£tup
()

46 
mem‹y01
 = (*) 0x01;

47 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

50 
	`ã¨down
()

52 
dñëe
 
ã°Resu…
;

54 
	}
};

57 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

59 
f‹m©ãr
.
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 10, 
mem‹y01
, "file", 9);

60 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög mÆlo¯o‡size: 10Öoöãr: %∞© fûe:9\n", 
mem‹y01
).
	`asCh¨Såög
());

61 
	}
}

63 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

65 
f‹m©ãr
.
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem‹y01
, "boo", 6);

66 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög fªêo‡poöãr: %∞© boo:6\n", 
mem‹y01
).
	`asCh¨Såög
());

67 
	}
}

69 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Sèπs
)

71 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

72 
f‹m©ãr
.
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

73 
	`TESTOUPUT_EQUAL
("TEST(groupName, TestName)\n");

74 
	}
}

76 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Ends
)

78 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

79 
f‹m©ãr
.
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

80 
	`TESTOUPUT_EQUAL
("ENDTEST(groupName, TestName)\n");

81 
	}
}

83 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°GroupSèπs
)

85 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

86 
f‹m©ãr
.
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

87 
	`TESTOUPUT_EQUAL
("------------------------------TEST GROUP(groupName)-----------------------------\n");

88 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockNamedVÆue.h
"

35 
Mem‹yLókAŒoˇt‹
* 
	g¥eviousNewAŒoˇt‹
;

37 ˛as†
	cTemp‹¨yDeÁu…NewAŒoˇt‹


39 
Mem‹yLókAŒoˇt‹
* 
	m√wAŒoˇt‹
;

40 
	mpublic
:

41 
	$Temp‹¨yDeÁu…NewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
ﬁdAŒoˇt‹
)

43 
√wAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

44 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
ﬁdAŒoˇt‹
);

46 ~
	$Temp‹¨yDeÁu…NewAŒoˇt‹
()

48 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
);

49 
	}
}

52 ˛as†
	cMockMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


54 
public
:

55 
vútuÆ
 
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

57 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

58 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

61 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

63 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

64 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

65 
	}
}

67 
vútuÆ
 
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

69 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

70 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

71 
	}
}

73 
vútuÆ
 
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

75 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

76 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

77 
	}
}

79 
vútuÆ
 
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
, * , const * , )

81 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

82 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

83 
	}
}

85 
vútuÆ
 
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * , const * , )

87 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

88 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

89 
	}
}

92 
MockMem‹yRï‹tF‹m©ãr
 
	gf‹m©ãrF‹PlugöTe°
;

94 ˛as†
	cMem‹yRï‹ãrPlugöUndîTe°
 : 
public
 
Mem‹yRï‹ãrPlugö


96 
public
:

97 
Mem‹yRï‹tF‹m©ãr
* 
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

99 
	`mock
("ªp‹ãr").
	`a˘uÆCÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("ty≥", 
ty≥
.
	`asCh¨Såög
());

100  
√w
 
MockMem‹yRï‹tF‹m©ãr
;

102 
	}
};

104 ˛as†
	cMem‹yLókAŒoˇt‹Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


106 
public
:

107 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

109  ((
Mem‹yLókAŒoˇt‹
*)
obje˘1
)->
	`«me
(Ë=((Mem‹yLókAŒoˇt‹*)
obje˘2
)->name();

111 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

113  ((
Mem‹yLókAŒoˇt‹
*)
obje˘
)->
	`«me
();

114 
	}
}

118 
	$TEST_GROUP
(
Mem‹yRï‹ãrPlugö
)

120 
Mem‹yRï‹ãrPlugöUndîTe°
* 
ªp‹ãr
;

121 
SåögBuf„rTe°Ouçut
 
ouçut
;

122 
Mem‹yLókAŒoˇt‹Com∑øt‹
 
memLókAŒoˇt‹Com∑øt‹
;

124 
Te°Resu…
* 
ªsu…
;

125 
Uã°
* 
ã°
;

127 
	`£tup
()

129 
¥eviousNewAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

130 
ªsu…
 = 
√w
 
	`Te°Resu…
(
ouçut
);

131 
ã°
 = 
√w
 
	`Uã°
("groupname", "testname", "filename", 1);

132 
ªp‹ãr
 = 
√w
 
Mem‹yRï‹ãrPlugöUndîTe°
;

134 
	`mock
("f‹m©ãr").
	`ö°ÆlCom∑øt‹
("Mem‹yLókAŒoˇt‹", 
memLókAŒoˇt‹Com∑øt‹
);

136 
	`mock
("ªp‹ãr").
	`dißbÀ
();

137 c⁄° *
cmd_löe
[] = {"-pmemoryreport=normal"};

138 
ªp‹ãr
->
	`∑r£Argumíts
(1, 
cmd_löe
, 0);

139 
	`mock
("ªp‹ãr").
	`íabÀ
();

143 
	`ã¨down
()

145 
dñëe
 
ªp‹ãr
;

146 
dñëe
 
ã°
;

147 
dñëe
 
ªsu…
;

149 
	}
};

151 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
offRï‹tsNŸhög
)

153 
Mem‹yRï‹ãrPlugöUndîTe°
 
‰eshRï‹ãr
;

154 
‰eshRï‹ãr
.
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

155 * 
mem‹y
 = 
√w
 ;

156 
dñëe
 
mem‹y
;

157 
‰eshRï‹ãr
.
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

158 
	}
}

160 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mónögÀssArgumítsAªIgn‹ed
)

162 c⁄° *
cmd_löe
[] = {"-nothing", "-pnotmemoryreport=normal", "alsomeaningless", "-pmemoryreportnonsensebutnotus"};

163 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1Ë=
Ál£
);

164 
	}
}

166 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
comm™dLöeP¨amëîTu∫sOnN‹mÆLoggög
)

168 
	`mock
("ªp‹ãr").
	`ex≥˘O√CÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
ªp‹ãr
).
	`wôhP¨amëî
("type", "normal");

170 c⁄° *
cmd_löe
[] = {"-nothing", "-pmemoryreport=normal", "alsomeaningless" };

171 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1));

172 
	}
}

174 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eTe°A˘i⁄Rï‹tsTe°
)

176 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

177 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

178 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

179 
	}
}

181 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°Te°A˘i⁄Rï‹tsTe°
)

183 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

184 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

186 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

187 
	}
}

189 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAŒoˇti⁄sAªRï‹ãdTe°
)

191 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

192 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

193 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

195 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

196 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

197 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

198 
	}
}

200 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
whíUsögO∆yMÆlocAŒoˇt‹NoOthîOfTheAŒoˇt‹sAªU£d
)

202 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

203 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

204 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

205 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

207 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

208 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

209 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

210 
	}
}

212 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAºayAŒoˇti⁄sAªRï‹ãdTe°
)

214 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

215 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

216 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

218 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

219 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

220 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

221 
	}
}

223 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mÆlocAŒoˇti⁄sAªRï‹ãdTe°
)

225 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

226 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

227 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

229 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

230 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

231 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

232 
	}
}

234 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
°¨tOfANewTe°WûlRï‹tTheTe°GroupSèπ
)

236 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

237 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

238 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

239 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

240 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

241 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

243 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

244 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

245 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

246 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

247 
	}
}

249 ˛as†
	cUã°F‹Mem‹yRï‹tögPlugögTe°
 : 
public
 
Uã°


251 
public
:

252 
	$Uã°F‹Mem‹yRï‹tögPlugögTe°
(c⁄° * 
grou≤ame
, 
Uã°
* 
ã°
Ë: 
	`Uã°
(groupname, "testname", "filename", 1,Åest)

256 
	}
};

258 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
ídOÁTe°GroupWûlRï‹tSo
)

260 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fouπhTe°
("dif„ª¡GroupName", 
NULL
);

261 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`thúdTe°
("dif„ª¡GroupName", &
fouπhTe°
);

262 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`£c⁄dTe°
("grou≤ame", &
thúdTe°
);

263 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fú°Te°
("grou≤ame", &
£c⁄dTe°
);

265 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
£c⁄dTe°
);

266 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

268 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
fú°Te°
, *
ªsu…
);

269 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
fú°Te°
, *
ªsu…
);

270 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

271 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

272 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
thúdTe°
, *
ªsu…
);

273 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
thúdTe°
, *
ªsu…
);

274 
	}
}

276 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eA˘i⁄Rïœ˚sAŒoˇt‹s
)

278 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

280 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

281 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

282 
	`CHECK
(
Æloˇt‹
 !
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

283 
	}
}

285 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°A˘i⁄Re°‹esAŒoˇt‹s
)

287 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

289 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

290 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

291 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

292 
	`CHECK
(
Æloˇt‹
 =
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

293 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

33 
	~"Te°MockFaûuª.h
"

35 
	$TEST_GROUP
(
MockA˘uÆFun˘i⁄CÆl
)

37 
MockEx≥˘edFun˘i⁄sLi°
* 
em±yLi°
;

38 
MockEx≥˘edFun˘i⁄sLi°
* 
li°
;

39 
MockFaûuªRï‹ãr
* 
ªp‹ãr
;

41 
	`£tup
()

43 
em±yLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

45 
ªp‹ãr
 = 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
();

48 
	`ã¨down
()

50 
	`CHECK_NO_MOCK_FAILURE
();

51 
dñëe
 
em±yLi°
;

52 
dñëe
 
li°
;

54 
	}
};

56 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edCÆl
)

58 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
em±yLi°
);

59 
a˘uÆCÆl
.
	`wôhName
("unexpected");

61 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "u√x≥˘ed", *
li°
);

62 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

63 
	}
}

65 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edP¨amëîName
)

67 
MockEx≥˘edFun˘i⁄CÆl
 
ˇŒ1
;

68 
ˇŒ1
.
	`wôhName
("func");

69 
li°
->
	`addEx≥˘edCÆl
(&
ˇŒ1
);

71 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
li°
);

72 
a˘uÆCÆl
.
	`wôhName
("func").
	`wôhP¨amëî
("integer", 1);

74 
MockNamedVÆue
 
	`∑ømëî
("integer");

75 
∑ømëî
.
	`£tVÆue
(1);

77 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", 
∑ømëî
, *
li°
);

78 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

79 
	}
}

81 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
mu…ùÀSameFun˘i⁄sEx≥˘ögAndH≠≥nGøduÆly
)

83 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

84 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

85 
ˇŒ1
->
	`wôhName
("func");

86 
ˇŒ2
->
	`wôhName
("func");

87 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

88 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

90 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl1
(
ªp‹ãr
, *
li°
);

91 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl2
(
ªp‹ãr
, *
li°
);

93 
	`LONGS_EQUAL
(2, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

94 
a˘uÆCÆl1
.
	`wôhName
("func");

95 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

96 
a˘uÆCÆl2
.
	`wôhName
("func");

97 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

99 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockFaûuª.h
"

31 
	~"Te°MockFaûuª.h
"

33 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆl


35 
	mpublic
:

36 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
(
vÆ
Ë: 
	$vÆue
(
vÆ
) {};

37 
vÆue
;

38 
	}
};

41 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


43 
public
:

44 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
() {}

45 
vútuÆ
 ~
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
(Ë{
	}
};

47 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

49  ((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘1
)->
vÆue
 =((Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl*)
obje˘2
)->value;

50 
	}
}

51 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

53  
	`SåögFrom
(((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘
)->
vÆue
);

54 
	}
}

58 
	$TEST_GROUP
(
MockNamedVÆueCom∑øt‹Rïosô‹y
)

60 
	`ã¨down
()

62 
	`CHECK_NO_MOCK_FAILURE
();

64 
	}
};

66 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
gëCom∑øt‹F‹N⁄Exi°ögName
)

68 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

69 
	`POINTERS_EQUAL
(
NULL
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

70 
	}
}

72 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlCom∑øt‹
)

74 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

75 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

76 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥Name", 
com∑øt‹
);

77 
	`POINTERS_EQUAL
(&
com∑øt‹
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

78 
	}
}

80 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlMu…ùÀCom∑øt‹
)

82 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹1
, 
com∑øt‹2
, 
com∑øt‹3
;

83 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

84 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥1", 
com∑øt‹1
);

85 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥2", 
com∑øt‹2
);

86 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥3", 
com∑øt‹3
);

87 
	`POINTERS_EQUAL
(&
com∑øt‹3
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type3"));

88 
	`POINTERS_EQUAL
(&
com∑øt‹2
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type2"));

89 
	`POINTERS_EQUAL
(&
com∑øt‹1
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type1"));

90 
	}
}

92 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄CÆl
)

94 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
;

95 
	`£tup
 ()

97 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

99 
	`ã¨down
()

101 
dñëe
 
ˇŒ
;

102 
	`CHECK_NO_MOCK_FAILURE
();

104 
	}
};

106 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhoutP¨amëîSëOrNŸFound
)

108 
	`STRCMP_EQUAL
("", 
ˇŒ
->
	`gëP¨amëîTy≥
("n⁄exi°ög").
	`asCh¨Såög
());

109 
	`LONGS_EQUAL
(0, 
ˇŒ
->
	`gëP¨amëî
("n⁄exi°ög").
	`gëI¡VÆue
());

110 
	`CHECK
(!
ˇŒ
->
	`hasP¨amëîWôhName
("nonexisting"));

111 
	}
}

113 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhI¡egîP¨amëî
)

115 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

116 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

117 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

118 
	`CHECK
(
ˇŒ
->
	`hasP¨amëîWôhName
("integer"));

119 
	}
}

121 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhDoubÀP¨amëî
)

123 
ˇŒ
->
	`wôhP¨amëî
("double", 1.2);

124 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

125 
	`DOUBLES_EQUAL
(1.2, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhSåögP¨amëî
)

130 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

131 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

132 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

133 
	}
}

135 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhPoöãrP¨amëî
)

137 * 
±r
 = (*) 0x123;

138 
ˇŒ
->
	`wôhP¨amëî
("poöãr", 
±r
);

139 
	`STRCMP_EQUAL
("void*", 
ˇŒ
->
	`gëP¨amëîTy≥
("poöãr").
	`asCh¨Såög
());

140 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("poöãr").
	`gëPoöãrVÆue
());

141 
	}
}

143 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëî
)

145 * 
±r
 = (*) 0x123;

146 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("˛ass", "obje˘", 
±r
);

147 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("obje˘").
	`gëObje˘Poöãr
());

148 
	`STRCMP_EQUAL
("˛ass", 
ˇŒ
->
	`gëP¨amëîTy≥
("obje˘").
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîU√quÆCom∑ris⁄
)

153 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`u√quÆTy≥
(2);

154 
MockNamedVÆue
 
	`∑ømëî
 ("name");

155 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
u√quÆTy≥
);

156 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

157 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutRïosô‹y
)

162 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

163 
MockNamedVÆue
 
	`∑ømëî
 ("name");

164 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

165 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

166 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

167 
	}
}

169 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutCom∑øt‹
)

171 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

172 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

174 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

175 
MockNamedVÆue
 
	`∑ømëî
 ("name");

176 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

177 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

178 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

179 
	}
}

181 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄
)

183 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

184 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

185 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

187 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

188 
MockNamedVÆue
 
	`∑ømëî
 ("name");

189 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

191 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

192 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

193 
	`CHECK
 (
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥
)

198 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

199 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

200 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

202 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

203 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

204 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

205 
	`POINTERS_EQUAL
(&
ty≥
, 
ˇŒ
->
	`gëP¨amëî
("«me").
	`gëObje˘Poöãr
());

206 
	`STRCMP_EQUAL
("1", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

207 
	}
}

209 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutRïosô‹y
)

211 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

212 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

213 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

214 
	}
}

216 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutCom∑øt‹
)

218 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

219 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

220 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

221 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

222 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

223 
	}
}

226 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhTwoI¡egîP¨amëî
)

228 
ˇŒ
->
	`wôhP¨amëî
("integer1", 1);

229 
ˇŒ
->
	`wôhP¨amëî
("integer2", 2);

230 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî1").
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî2").
	`asCh¨Såög
());

232 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî1").
	`gëI¡VÆue
());

233 
	`LONGS_EQUAL
(2, 
ˇŒ
->
	`gëP¨amëî
("öãgî2").
	`gëI¡VÆue
());

234 
	}
}

236 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhThªeDif„ª¡P¨amëî
)

238 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

239 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

240 
ˇŒ
->
	`wôhP¨amëî
("double", 0.12);

241 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

242 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

243 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

244 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

245 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

246 
	`DOUBLES_EQUAL
(0.12, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

247 
	}
}

249 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhoutANameItsFulfûÀd
)

251 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

252 
	}
}

254 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhANameItsNŸFulfûÀd
)

256 
ˇŒ
->
	`wôhName
("name");

257 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

258 
	}
}

260 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
a·îSëtögCÆlFulfûÀdItsFulFûÀd
)

262 
ˇŒ
->
	`wôhName
("name");

263 
ˇŒ
->
	`ˇŒWasMade
();

264 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

265 
	}
}

267 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸWôhP¨amëîIsNŸFulFûÀd
)

269 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

270 
ˇŒ
->
	`ˇŒWasMade
();

271 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

272 
	}
}

274 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedAndP¨amëîsAªFulfûÀd
)

276 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

277 
ˇŒ
->
	`ˇŒWasMade
();

278 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

279 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

280 
	}
}

282 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸAŒP¨amëîsAªFulfûÀd
)

284 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1).withParameter("two", 2);

285 
ˇŒ
->
	`ˇŒWasMade
();

286 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

287 
	`CHECK
(! 
ˇŒ
->
	`isFulfûÀd
());

288 
	}
}

290 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹NoP¨amëîs
)

292 
ˇŒ
->
	`wôhName
("name");

293 
	`STRCMP_EQUAL
("«mê->Çÿ∑ømëîs", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

294 
	}
}

296 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Ign‹edP¨amëîs
)

298 
ˇŒ
->
	`wôhName
("name");

299 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

300 
	`STRCMP_EQUAL
("«mê->áŒÖ¨amëî†ign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Mu…ùÀP¨amëîs
)

305 
ˇŒ
->
	`wôhName
("name");

306 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

307 
ˇŒ
->
	`wôhP¨amëî
("integer", 10);

308 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, i¡ i¡egî: <10>", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

309 
	}
}

311 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹P¨amëîAndIgn‹ed
)

313 
ˇŒ
->
	`wôhName
("name");

314 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

315 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

316 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, othîÖ¨amëî†¨êign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

317 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄sLi°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 * 
li°
;

37 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

38 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ4
;

41 
	`£tup
()

43 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

45 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

46 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ4
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ1
->
	`wôhName
("foo");

49 
ˇŒ2
->
	`wôhName
("bar");

50 
ˇŒ3
->
	`wôhName
("boo");

52 
	`ã¨down
()

54 
dñëe
 
ˇŒ1
;

55 
dñëe
 
ˇŒ2
;

56 
dñëe
 
ˇŒ3
;

57 
dñëe
 
ˇŒ4
;

58 
dñëe
 
li°
;

59 
	`CHECK_NO_MOCK_FAILURE
();

61 
	}
};

63 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
em±yLi°
)

65 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

66 
	`CHECK
(! 
li°
->
	`hasFulfûÀdEx≥˘©i⁄s
());

67 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

68 
	}
}

70 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addögCÆls
)

72 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

73 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

74 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

75 
	}
}

77 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

79 
ˇŒ1
->
	`ˇŒWasMade
();

80 
ˇŒ2
->
	`ˇŒWasMade
();

81 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

82 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

83 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

84 
	}
}

86 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhUnFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

88 
ˇŒ1
->
	`ˇŒWasMade
();

89 
ˇŒ3
->
	`ˇŒWasMade
();

90 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

91 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

92 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

93 
	`CHECK
(
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

94 
	}
}

96 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
)

98 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

99 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

100 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

101 
	}
}

103 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
)

105 
ˇŒ1
->
	`wôhName
("relate");

106 
ˇŒ2
->
	`wôhName
("unrelate");

107 
ˇŒ3
->
	`wôhName
("relate");

108 
ˇŒ3
->
	`ˇŒWasMade
();

109 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

110 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

111 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

112 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("relate");

113 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

114 
	}
}

116 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToTheWﬁeLi°
)

118 
ˇŒ1
->
	`wôhName
("relate");

119 
ˇŒ2
->
	`wôhName
("relate");

120 
ˇŒ3
->
	`wôhName
("relate");

121 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

122 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

123 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

124 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

125 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToFú°O√
)

130 
ˇŒ1
->
	`wôhName
("relate");

131 
ˇŒ2
->
	`wôhName
("unrelate");

132 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

133 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

134 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

135 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

136 
	}
}

138 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToLa°O√
)

140 
ˇŒ1
->
	`wôhName
("unrelate");

141 
ˇŒ2
->
	`wôhName
("relate");

142 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

143 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

144 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

145 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

146 
	}
}

148 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
)

150 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

151 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

152 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

153 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

154 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

155 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

156 
li°
->
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
("diffname");

157 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
)

162 
MockNamedVÆue
 
	`∑ømëî
("diffname");

163 
∑ømëî
.
	`£tVÆue
(1);

164 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

165 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

166 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

167 
ˇŒ4
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 2);

168 
ˇŒ3
->
	`ˇŒWasMade
();

169 
ˇŒ3
->
	`∑ømëîWasPas£d
("diffname");

170 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

171 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

172 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

173 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ4
);

174 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

175 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

176 
	}
}

178 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sWôhEm±yLi°
)

180 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

181 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

182 
	`LONGS_EQUAL
(0, 
√wLi°
.
	`size
());

183 
	}
}

185 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sMu…ùÀUnfulfûÀdEx≥˘©i⁄s
)

187 
ˇŒ2
->
	`ˇŒWasMade
();

188 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

189 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

190 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

191 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

192 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

193 
	`LONGS_EQUAL
(2, 
√wLi°
.
	`size
());

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹
)

198 
ˇŒ1
->
	`wôhName
("foo");

199 
ˇŒ2
->
	`wôhName
("bar");

200 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

201 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

202 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

203 
	}
}

205 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹HasN⁄e
)

207 
ˇŒ1
->
	`wôhName
("foo");

208 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

209 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

210 
	}
}

212 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ˇŒToSåög
)

214 
ˇŒ1
->
	`wôhName
("foo");

215 
ˇŒ2
->
	`wôhName
("bar");

216 
ˇŒ3
->
	`wôhName
("blah");

217 
ˇŒ3
->
	`ˇŒWasMade
();

219 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

220 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

221 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

223 
Sim∂eSåög
 
ex≥˘edSåög
;

224 
ex≥˘edSåög
 = 
	`SåögFromF‹m©
("%s\n%s", 
ˇŒ1
->
	`ˇŒToSåög
().
	`asCh¨Såög
(), 
ˇŒ2
->callToString().asCharString());

225 
	`STRCMP_EQUAL
(
ex≥˘edSåög
.
	`asCh¨Såög
(), 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().asCharString());

226 
	}
}

228 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
toSåögOnEm±yLi°
)

230 
	`STRCMP_EQUAL
("<n⁄e>", 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().
	`asCh¨Såög
());

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockFaûuªTe°
)

36 
MockFaûuªRï‹ãr
 
ªp‹ãr
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
li°
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

41 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

43 
	`£tup
 ()

45 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

46 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

50 
	`ã¨down
 ()

52 
dñëe
 
li°
;

53 
dñëe
 
ˇŒ1
;

54 
dñëe
 
ˇŒ2
;

55 
dñëe
 
ˇŒ3
;

56 
	`CHECK_NO_MOCK_FAILURE
();

58 
	`addAŒToLi°
()

60 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

61 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

62 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

64 
	}
};

66 
	$TEST
(
MockFaûuªTe°
, 
noEº‹FaûuªSomëhögG⁄eWr⁄g
)

68 
MockFaûuª
 
	`Áûuª
(
this
);

69 
	`STRCMP_EQUAL
("Te° faûed wôh MockFaûuª wôhouà™Éº‹! Somëhög wíà£riou¶y wr⁄g.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

70 
	}
}

72 
	$TEST
(
MockFaûuªTe°
, 
u√x≥˘edCÆlH≠≥√d
)

74 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "foob¨", *
li°
);

75 
	`STRCMP_EQUAL
("Mock Failure: Unexpected callÅo function: foobar\n"

79 "\t\t<n⁄e>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
MockFaûuªTe°
, 
ex≥˘edCÆlDidNŸH≠≥n
)

84 
ˇŒ1
->
	`wôhName
("foobar");

85 
ˇŒ2
->
	`wôhName
("w‹ld").
	`wôhP¨amëî
("boo", 2).withParameter("hello", "world");

86 
ˇŒ3
->
	`wôhName
("haphaphap");

87 
ˇŒ3
->
	`ˇŒWasMade
();

88 
	`addAŒToLi°
();

90 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, *
li°
);

91 
	`STRCMP_EQUAL
("Mock Failure: Expected call didÇot happen.\n"

96 "\t\th≠h≠h≠ ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

97 
	}
}

99 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edAddôi⁄ÆCÆlFaûuª
)

101 
ˇŒ1
->
	`wôhName
("bar");

102 
ˇŒ1
->
	`ˇŒWasMade
();

103 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

105 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "b¨", *
li°
);

106 
	`STRCMP_CONTAINS
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (2thËˇŒÅÿfun˘i⁄: b¨\n\tEXPECTED", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

107 
	}
}

109 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîFaûuª
)

111 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

112 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

113 
ˇŒ3
->
	`wôhName
("unrelated");

114 
	`addAŒToLi°
();

116 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("bar");

117 
a˘uÆP¨amëî
.
	`£tVÆue
(2);

119 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

120 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameterÇameÅo function \"foo\": bar\n"

127 "\t\töàb¨: <2>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

128 
	}
}

130 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîVÆueFaûuª
)

132 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

133 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

134 
ˇŒ3
->
	`wôhName
("unrelated");

135 
	`addAŒToLi°
();

137 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("boo");

138 
a˘uÆP¨amëî
.
	`£tVÆue
(20);

140 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

141 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"boo\"Åo function \"foo\": <20>\n"

148 "\t\töàboo: <20>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
)

153 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 2).withParameter("boo", "str");

154 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 10).withParameter("boo", "bleh");

155 
ˇŒ2
->
	`ˇŒWasMade
();

156 
ˇŒ2
->
	`∑ømëîWasPas£d
("bar");

157 
ˇŒ2
->
	`∑ømëîWasPas£d
("boo");

158 
ˇŒ3
->
	`wôhName
("unrelated");

159 
	`addAŒToLi°
();

161 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

162 
	`STRCMP_EQUAL
("Mock Failure: ExpectedÖarameter for function \"foo\" didÇot happen.\n"

168 "\t\töàb¨, ch¨* boo", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

169 
	}
}

171 
	$TEST
(
MockFaûuªTe°
, 
MockNoWayToCom∑ªCu°omTy≥Faûuª
)

173 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
this
, "myType");

174 
	`STRCMP_EQUAL
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <myTy≥>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

175 
	}
}

177 
	$TEST
(
MockFaûuªTe°
, 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
)

179 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`Áûuª
(
this
, "foo");

180 
	`STRCMP_EQUAL
("MockFailure: Cannot set differentÑeturn valuesÅoÅhe same function: foo\n"

182 "\tYou c™Örobablyáchõvêthêßmêthög usög MockSuµ‹t::£tD©a", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

183 
	}
}

185 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edObje˘Faûuª
)

187 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

188 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

189 
ˇŒ2
->
	`ˇŒWasMade
();

190 
ˇŒ2
->
	`wasPas£dToObje˘
();

191 
ˇŒ3
->
	`wôhName
("unrelated");

192 
	`addAŒToLi°
();

194 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
this
, "foo", (*)0x1, *
li°
);

195 
	`STRCMP_EQUAL
("MockFailure: Function called oná unexpected object: foo\n"

200 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

201 
	}
}

203 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
)

205 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

206 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

207 
ˇŒ2
->
	`ˇŒWasMade
();

208 
ˇŒ2
->
	`wasPas£dToObje˘
();

209 
ˇŒ3
->
	`wôhName
("unrelated");

210 
	`addAŒToLi°
();

212 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

213 
	`STRCMP_EQUAL
("Mock Failure: Expected call on object for function \"foo\" but it didÇot happen.\n"

217 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

218 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockFailure.h

29 #i‚de‡
D_Te°MockFaûuª_h


30 
	#D_Te°MockFaûuª_h


	)

32 
	#CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
Ë
	`CHECK_EXPECTED_MOCK_FAILURE_LOCATION
”x≥˘edFaûuª, 
__FILE__
, 
__LINE__
)

	)

33 
	#CHECK_NO_MOCK_FAILURE
(Ë
	`CHECK_NO_MOCK_FAILURE_LOCATION
(
__FILE__
, 
__LINE__
)

	)

35 ˛as†
	cMockFaûuªRï‹ãrF‹Te°
 : 
public
 
MockFaûuªRï‹ãr


37 
public
:

39 
Sim∂eSåög
 
mockFaûuªSåög
;

40 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

42 
mockFaûuªSåög
 = 
Áûuª
.
	`gëMesßge
();

44 
MockFaûuªRï‹ãrF‹Te°
* 
	$gëRï‹ãr
()

46 
MockFaûuªRï‹ãrF‹Te°
 
ªp‹ãr
;

47  &
ªp‹ãr
;

48 
	}
}

51 
ölöe
 
Uã°
* 
	$mockFaûuªTe°
()

53  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
	`gëTe°ToFaû
();

54 
	}
}

56 
ölöe
 
Sim∂eSåög
 
	$mockFaûuªSåög
()

58  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
;

59 
	}
}

61 
ölöe
 
	$CHECK_EXPECTED_MOCK_FAILURE_LOCATION
(c⁄° 
MockFaûuª
& 
ex≥˘edFaûuª
, c⁄° * 
fûe
, 
löe
)

63 
Sim∂eSåög
 
ex≥˘edFaûuªSåög
 = 
ex≥˘edFaûuª
.
	`gëMesßge
();

64 
Sim∂eSåög
 
a˘uÆFaûuªSåög
 = 
	`mockFaûuªSåög
();

65 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

66 i‡(
ex≥˘edFaûuªSåög
 !
a˘uÆFaûuªSåög
)

68 
Sim∂eSåög
 
îr‹
 = "MockFailuresáre different.\n";

69 
îr‹
 += "Expected MockFailure:\n\t";

70 
îr‹
 +
ex≥˘edFaûuªSåög
;

71 
îr‹
 += "\nActual MockFailure:\n\t";

72 
îr‹
 +
a˘uÆFaûuªSåög
;

73 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

75 
	}
}

77 
ölöe
 
	$CHECK_NO_MOCK_FAILURE_LOCATION
(c⁄° * 
fûe
, 
löe
)

79 i‡(
	`mockFaûuªSåög
() != "") {

80 
Sim∂eSåög
 
îr‹
 = "Unexpected mock failure:\n";

81 
îr‹
 +
	`mockFaûuªSåög
();

82 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

83 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

86 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

87 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockPlugin.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Te°Ouçut.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

31 
	~"Te°MockFaûuª.h
"

33 
	$TEST_GROUP
(
MockPlugö
)

35 
Uã°
 *
ã°
;

36 
SåögBuf„rTe°Ouçut
 *
ouçut
;

37 
Te°Resu…
 *
ªsu…
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

39 
MockEx≥˘edFun˘i⁄CÆl
 *
ˇŒ
;

41 
MockSuµ‹tPlugö
 *
∂ugö
;

43 
	`£tup
()

45 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

47 
ã°
 = 
√w
 
	`Uã°
("group", "name", "file", 1);

48 
ouçut
 = 
√w
 
SåögBuf„rTe°Ouçut
;

49 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

50 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

51 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

52 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
ˇŒ
);

53 
∂ugö
 = 
√w
 
MockSuµ‹tPlugö
;;

56 
	`ã¨down
()

58 
dñëe
 
ã°
;

59 
dñëe
 
ouçut
;

60 
dñëe
 
ªsu…
;

61 
dñëe
 
ex≥˘©i⁄sLi°
;

62 
dñëe
 
ˇŒ
;

63 
dñëe
 
∂ugö
;

65 
	`CHECK_NO_MOCK_FAILURE
();

66 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

68 
	}
};

70 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sAndCÀ¨AtEnd
)

72 
ˇŒ
->
	`wôhName
("foobar");

73 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, *
ex≥˘©i⁄sLi°
);

75 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

77 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

79 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

80 
	`LONGS_EQUAL
(0, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

82 
	}
}

84 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sW‹ksAlsoWôhHõøchiˇlObje˘s
)

86 
ˇŒ
->
	`wôhName
("foob¨").
	`⁄Obje˘
((*) 1);

87 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, "foob¨", *
ex≥˘©i⁄sLi°
);

89 
	`mock
("dif„ª¡Sc›e").
	`ex≥˘O√CÆl
("foob¨").
	`⁄Obje˘
((*) 1);

90 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

92 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

94 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

95 
	}
}

97 ˛as†
	cDummyCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


99 
public
:

100 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

102  
obje˘1
 =
obje˘2
;

104 
Sim∂eSåög
 
	$vÆueToSåög
(*)

107 
	}
}

111 
	$TEST
(
MockPlugö
, 
ö°ÆlCom∑øt‹Rec‹dsTheCom∑øt‹ButNŸIn°ÆlsItYë
)

113 
DummyCom∑øt‹
 
com∑øt‹
;

114 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

115 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

116 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

118 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
ã°
, "myType");

119 
	`CHECK_EXPECTED_MOCK_FAILURE
(
Áûuª
);

120 
	}
}

122 
	$TEST
(
MockPlugö
, 
¥eTe°A˘i⁄WûlE«bÀMu…ùÀCom∑øt‹sToTheGlobÆMockSuµ‹tS∑˚
)

124 
DummyCom∑øt‹
 
com∑øt‹
;

125 
DummyCom∑øt‹
 
com∑øt‹2
;

126 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

127 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myOthîTy≥", 
com∑øt‹2
);

129 
∂ugö
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

130 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

131 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

132 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

133 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

135 
	`CHECK_NO_MOCK_FAILURE
();

136 
	`LONGS_EQUAL
(0, 
ªsu…
->
	`gëFaûuªCou¡
());

137 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockSuµ‹tTe°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

38 
	`£tup
()

40 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

41 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
	`ã¨down
()

46 
	`mock
().
	`checkEx≥˘©i⁄s
();

47 
	`CHECK_NO_MOCK_FAILURE
();

48 
ex≥˘©i⁄sLi°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

49 
dñëe
 
ex≥˘©i⁄sLi°
;

52 
MockEx≥˘edFun˘i⁄CÆl
* 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
(c⁄° 
Sim∂eSåög
& 
«me
)

54 
MockEx≥˘edFun˘i⁄CÆl
* 
√wCÆl
 = 
√w
 MockExpectedFunctionCall;

55 
√wCÆl
->
	`wôhName
(
«me
);

56 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
√wCÆl
);

57  
√wCÆl
;

59 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

61 
	}
};

63 
	$TEST
(
MockSuµ‹tTe°
, 
˛ór
)

65 
	`mock
().
	`ex≥˘O√CÆl
("func");

66 
	`mock
().
	`˛ór
();

67 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

68 
	}
}

70 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sD€¢tFaû
)

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	}
}

75 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sCÀ¨sTheEx≥˘©i⁄s
)

77 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

78 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

80 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

81 
	`mock
().
	`checkEx≥˘©i⁄s
();

83 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

84 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

85 
	}
}

87 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlTh©H≠≥ns
)

89 
	`mock
().
	`ex≥˘O√CÆl
("func");

90 
	`mock
().
	`a˘uÆCÆl
("func");

91 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

92 
	}
}

94 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlIn˚a£sEx≥˘edCÆlsLe·
)

96 
	`mock
().
	`ex≥˘O√CÆl
("func");

97 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

98 
	`mock
().
	`˛ór
();

99 
	}
}

101 
	$TEST
(
MockSuµ‹tTe°
, 
u√x≥˘edCÆlH≠≥√d
)

103 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", *
ex≥˘©i⁄sLi°
);

105 
	`mock
().
	`a˘uÆCÆl
("func");

107 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

108 
	}
}

110 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsEx˚±F‹TheEx≥˘edO√
)

112 
	`mock
().
	`ex≥˘O√CÆl
("foo");

113 
	`mock
().
	`ign‹eOthîCÆls
();

114 
	`mock
().
	`a˘uÆCÆl
("b¨").
	`wôhP¨amëî
("foo", 1);;

116 
	`CHECK_NO_MOCK_FAILURE
();

118 
	`mock
().
	`˛ór
();

119 
	}
}

121 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsD€¢tIgn‹eMu…ùÀCÆlsOfTheSameFun˘i⁄
)

123 
	`mock
().
	`ex≥˘O√CÆl
("foo");

124 
	`mock
().
	`ign‹eOthîCÆls
();

125 
	`mock
().
	`a˘uÆCÆl
("bar");

126 
	`mock
().
	`a˘uÆCÆl
("foo");

127 
	`mock
().
	`a˘uÆCÆl
("foo");

129 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

130 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

131 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

132 
	}
}

134 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîStûlFaûsIfEx≥˘edO√Did¡H≠≥n
)

136 
	`mock
().
	`ex≥˘O√CÆl
("foo");

137 
	`mock
().
	`ign‹eOthîCÆls
();

138 
	`mock
().
	`checkEx≥˘©i⁄s
();

140 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo");

142 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

143 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

144 
	}
}

146 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsTh©H≠≥n
)

148 
	`mock
().
	`ex≥˘O√CÆl
("foo");

149 
	`mock
().
	`ex≥˘O√CÆl
("foo");

150 
	`mock
().
	`a˘uÆCÆl
("foo");

151 
	`mock
().
	`a˘uÆCÆl
("foo");

152 
	`mock
().
	`checkEx≥˘©i⁄s
();

153 
	`CHECK_NO_MOCK_FAILURE
();

154 
	}
}

156 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√CÆlHowevîMu…ùÀH≠≥√d
)

158 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

159 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

160 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

162 
	`mock
().
	`ex≥˘O√CÆl
("foo");

163 
	`mock
().
	`ex≥˘O√CÆl
("foo");

164 
	`mock
().
	`a˘uÆCÆl
("foo");

165 
	`mock
().
	`a˘uÆCÆl
("foo");

166 
	`mock
().
	`a˘uÆCÆl
("foo");

168 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

169 
	}
}

171 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndVÆue
)

173 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

174 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

175 
	`mock
().
	`checkEx≥˘©i⁄s
();

176 
	`CHECK_NO_MOCK_FAILURE
();

177 
	}
}

179 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√DoubÀP¨amëîAndVÆue
)

181 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

182 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

183 
	`mock
().
	`checkEx≥˘©i⁄s
();

184 
	`CHECK_NO_MOCK_FAILURE
();

185 
	}
}

187 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆue
)

189 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

190 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

191 
	`mock
().
	`checkEx≥˘©i⁄s
();

192 
	`CHECK_NO_MOCK_FAILURE
();

193 
	}
}

195 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√PoöãrP¨amëîAndVÆue
)

197 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

198 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

199 
	`mock
().
	`checkEx≥˘©i⁄s
();

200 
	`CHECK_NO_MOCK_FAILURE
();

201 
	}
}

203 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆueFaûs
)

205 
MockNamedVÆue
 
	`∑ømëî
("parameter");

206 
∑ømëî
.
	`£tVÆue
("different");

207 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", "string");

208 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

210 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

211 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "different");

213 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

214 
	}
}

216 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToP¨amëîName
)

218 
MockNamedVÆue
 
	`∑ømëî
("different");

219 
∑ømëî
.
	`£tVÆue
(10);

220 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

221 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

223 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

224 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("different", 10);

226 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

227 
	}
}

229 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToVÆue
)

231 
MockNamedVÆue
 
	`∑ømëî
("parameter");

232 
∑ømëî
.
	`£tVÆue
(8);

233 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

234 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

236 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

237 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 8);

239 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

240 
	}
}

242 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToTy≥s
)

244 
MockNamedVÆue
 
	`∑ømëî
("parameter");

245 
∑ømëî
.
	`£tVÆue
("heh");

246 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

247 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

249 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

250 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "heh");

252 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

253 
	}
}

255 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

257 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

258 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 2);

259 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 2);

260 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

261 
	`mock
().
	`checkEx≥˘©i⁄s
();

262 
	`CHECK_NO_MOCK_FAILURE
();

263 
	}
}

265 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhMu…ùÀDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

267 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

268 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

270 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

271 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

272 
	`mock
().
	`checkEx≥˘©i⁄s
();

273 
	`CHECK_NO_MOCK_FAILURE
();

274 
	}
}

276 
	$TEST
(
MockSuµ‹tTe°
, 
twi˚CÆÀdWôhSameP¨amëîs
)

278 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

279 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

280 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

281 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

282 
	`mock
().
	`checkEx≥˘©i⁄s
();

283 
	`CHECK_NO_MOCK_FAILURE
();

284 
	}
}

286 
	$TEST
(
MockSuµ‹tTe°
, 
ˇŒedWôhoutP¨amëîs
)

288 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

289 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

291 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

292 
	`mock
().
	`a˘uÆCÆl
("foo");

293 
	`mock
().
	`checkEx≥˘©i⁄s
();

295 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

297 
	}
}

299 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîs
)

301 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

302 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

303 
	`mock
().
	`checkEx≥˘©i⁄s
();

304 
	`CHECK_NO_MOCK_FAILURE
();

305 
	}
}

307 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButStûlPassAŒ
)

309 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

310 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

311 
	`mock
().
	`checkEx≥˘©i⁄s
();

312 
	`CHECK_NO_MOCK_FAILURE
();

313 
	}
}

315 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButEx≥˘edP¨amëîDid¡H≠≥n
)

317 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

318 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

320 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

321 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

322 
	`mock
().
	`checkEx≥˘©i⁄s
();

323 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

324 
	}
}

326 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsMu…ùÀCÆls
)

328 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

329 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

330 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

331 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

332 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

334 
	`mock
().
	`checkEx≥˘©i⁄s
();

335 
	`CHECK_NO_MOCK_FAILURE
();

336 
	}
}

338 
	$TEST
(
MockSuµ‹tTe°
, 
√wCÆlSèπsWhûeNŸAŒP¨amëîsWîePas£d
)

340 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

341 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

343 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

344 
	`mock
().
	`a˘uÆCÆl
("foo");

345 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);;

347 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

348 
	}
}

350 
	$TEST
(
MockSuµ‹tTe°
, 
thªeEx≥˘edAndA˘uÆ
)

352 
	`mock
().
	`ex≥˘O√CÆl
("function1");

353 
	`mock
().
	`ex≥˘O√CÆl
("function2");

354 
	`mock
().
	`ex≥˘O√CÆl
("function3");

355 
	`mock
().
	`a˘uÆCÆl
("function1");

356 
	`mock
().
	`a˘uÆCÆl
("function2");

357 
	`mock
().
	`a˘uÆCÆl
("function3");

358 
	`mock
().
	`checkEx≥˘©i⁄s
();

359 
	`CHECK_NO_MOCK_FAILURE
();

360 
	}
}

362 ˛as†
	cMyTy≥F‹Te°ög


364 
	mpublic
:

365 
	$MyTy≥F‹Te°ög
(
vÆ
Ë: 
	$vÆue
(
vÆ
){};

366 
vÆue
;

367 
	}
};

369 ˛as†
	cMyTy≥F‹Te°ögCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


371 
public
:

372 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

374  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

376 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

378  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

379 
	}
}

383 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîFaûsWhíNŸHavögACom∑ris⁄Rïosô‹y
)

385 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

386 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

387 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

389 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

390 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

391 
	}
}

393 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîSuc˚eds
)

395 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

396 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

397 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

398 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

399 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

400 
	`mock
().
	`checkEx≥˘©i⁄s
();

401 
	`CHECK_NO_MOCK_FAILURE
();

402 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

403 
	}
}

405 
boﬁ
 
	$myTy≥IsEquÆ
(* 
obje˘1
, * 
obje˘2
)

407  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

408 
	}
}

410 
Sim∂eSåög
 
	$myTy≥VÆueToSåög
(* 
obje˘
)

412  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

413 
	}
}

415 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘WôhFun˘i⁄Com∑øt‹
)

417 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

418 
MockFun˘i⁄Com∑øt‹
 
	`com∑øt‹
(
myTy≥IsEquÆ
, 
myTy≥VÆueToSåög
);

419 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

420 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

421 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

422 
	`mock
().
	`checkEx≥˘©i⁄s
();

423 
	`CHECK_NO_MOCK_FAILURE
();

424 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

425 
	}
}

427 
	$TEST
(
MockSuµ‹tTe°
, 
dißbÀE«bÀ
)

429 
	`mock
().
	`dißbÀ
();

430 
	`mock
().
	`ex≥˘O√CÆl
("function");

431 
	`mock
().
	`a˘uÆCÆl
("differenFunction");

432 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

433 
	`mock
().
	`íabÀ
();

434 
	`mock
().
	`ex≥˘O√CÆl
("function");

435 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

436 
	`mock
().
	`a˘uÆCÆl
("function");

437 
	`CHECK_NO_MOCK_FAILURE
();

438 
	}
}

440 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aF‹I¡egîVÆues
)

442 
	`mock
().
	`£tD©a
("data", 10);

443 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

444 
	}
}

446 
	$TEST
(
MockSuµ‹tTe°
, 
hasD©aBìnSë
)

448 
	`CHECK
(!
	`mock
().
	`hasD©a
("data"));

449 
	`mock
().
	`£tD©a
("data", 10);

450 
	`CHECK
(
	`mock
().
	`hasD©a
("data"));

451 
	}
}

453 
	$TEST
(
MockSuµ‹tTe°
, 
unöôülizedD©a
)

455 
	`LONGS_EQUAL
(0, 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëI¡VÆue
());

456 
	`STRCMP_EQUAL
("öt", 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëTy≥
().
	`asCh¨Såög
());

457 
	}
}

459 
	$TEST
(
MockSuµ‹tTe°
, 
£tMu…ùÀD©a
)

461 
	`mock
().
	`£tD©a
("data", 1);

462 
	`mock
().
	`£tD©a
("data2", 10);

463 
	`LONGS_EQUAL
(1, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

464 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a2").
	`gëI¡VÆue
());

465 
	}
}

467 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aSåög
)

469 
	`mock
().
	`£tD©a
("data", "string");

470 
	`STRCMP_EQUAL
("°rög", 
	`mock
().
	`gëD©a
("d©a").
	`gëSåögVÆue
());

471 
	}
}

473 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aDoubÀ
)

475 
	`mock
().
	`£tD©a
("data", 1.0);

476 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`gëD©a
("d©a").
	`gëDoubÀVÆue
(), 0.05);

477 
	}
}

479 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aPoöãr
)

481 * 
±r
 = (*) 0x001;

482 
	`mock
().
	`£tD©a
("d©a", 
±r
);

483 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëPoöãrVÆue
());

484 
	}
}

486 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aObje˘
)

488 * 
±r
 = (*) 0x001;

489 
	`mock
().
	`£tD©aObje˘
("d©a", "ty≥", 
±r
);

490 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëObje˘Poöãr
());

491 
	`STRCMP_EQUAL
("ty≥", 
	`mock
().
	`gëD©a
("d©a").
	`gëTy≥
().
	`asCh¨Såög
());

492 
	}
}

494 
	$TEST
(
MockSuµ‹tTe°
, 
gëMockSuµ‹tSc›e
)

496 
MockSuµ‹t
* 
mock1
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("name");

497 
MockSuµ‹t
* 
mock2
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("differentName");

498 
	`CHECK
(!
	`mock
().
	`hasD©a
("name"));

499 
	`CHECK
(
mock1
 !
mock2
);

500 
	`POINTERS_EQUAL
(
mock1
, 
	`mock
().
	`gëMockSuµ‹tSc›e
("name"));

501 
	`CHECK
(
mock1
 !&
	`mock
());

502 
	}
}

504 
	$TEST
(
MockSuµ‹tTe°
, 
usögTwoMockSuµ‹tsByName
)

506 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

507 
	`LONGS_EQUAL
(0, 
	`mock
("Ÿhî").
	`ex≥˘edCÆlsLe·
());

508 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

509 
	`mock
("fú°").
	`˛ór
();

510 
	}
}

512 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒy
)

514 
	`mock
("first");

516 
	`mock
().
	`dißbÀ
();

517 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

518 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

520 
	`mock
().
	`íabÀ
();

521 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

522 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

524 
	`mock
("fú°").
	`˛ór
();

525 
	}
}

527 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒyWhíSuµ‹tIsDy«miˇŒyCª©ed
)

529 
	`mock
().
	`dißbÀ
();

530 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

531 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

533 
	`mock
().
	`íabÀ
();

534 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("boo");

535 
	`LONGS_EQUAL
(1, 
	`mock
("£c⁄d").
	`ex≥˘edCÆlsLe·
());

537 
	`mock
().
	`˛ór
();

538 
	}
}

540 
	$TEST
(
MockSuµ‹tTe°
, 
Ex≥˘edCÆlsLe·W‹ksHõørchiˇŒy
)

542 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

543 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

544 
	`mock
().
	`˛ór
();

545 
	}
}

547 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒy
)

549 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

550 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("helloworld");

552 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

553 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("helloworld");

554 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

556 
	`mock
().
	`checkEx≥˘©i⁄s
();

557 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

558 
	}
}

560 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒy
)

562 
	`mock
("first");

563 
	`mock
().
	`ign‹eOthîCÆls
();

564 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

565 
	`CHECK_NO_MOCK_FAILURE
();

566 
	}
}

568 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒyWhíDy«miˇŒyCª©ed
)

570 
	`mock
().
	`ign‹eOthîCÆls
();

571 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

572 
	`CHECK_NO_MOCK_FAILURE
();

573 
	}
}

575 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒyF‹La°CÆlNŸFöished
)

577 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foob¨").
	`wôhP¨amëî
("boo", 1);

578 
	`mock
("fú°").
	`a˘uÆCÆl
("foobar");

580 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foob¨")->
	`wôhP¨amëî
("boo", 1);

581 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

583 
	`mock
().
	`checkEx≥˘©i⁄s
();

584 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

585 
	}
}

587 
	$TEST
(
MockSuµ‹tTe°
, 
ªp‹ãrIsInhîôedInHõørchiˇlMocks
)

589 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

591 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

592 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

593 
	}
}

595 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹W‹ksHõørchiˇlOnBŸhExi°ögAndDy«miˇŒyCª©edMockSuµ‹ts
)

597 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

598 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

600 
	`mock
("existing");

601 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

602 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

603 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

604 
	`mock
("dy«mic").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

605 
	`mock
("dy«mic").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

607 
	`mock
().
	`checkEx≥˘©i⁄s
();

608 
	`CHECK_NO_MOCK_FAILURE
();

609 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

610 
	}
}

612 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹sW‹ksHõørchiˇl
)

614 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

615 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

616 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªpos
;

617 
ªpos
.
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

619 
	`mock
("existing");

620 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªpos
);

621 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

622 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

624 
	`mock
().
	`checkEx≥˘©i⁄s
();

625 
	`CHECK_NO_MOCK_FAILURE
();

626 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

627 
	}
}

629 
	$TEST
(
MockSuµ‹tTe°
, 
ªmoveCom∑øt‹sW‹ksHõøchiˇŒy
)

631 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

632 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

634 
	`mock
("sc›e").
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

635 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

636 
	`mock
("sc›e").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

637 
	`mock
("sc›e").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

639 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

640 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

641 
	}
}

643 
	$TEST
(
MockSuµ‹tTe°
, 
hasRëu∫VÆue
)

645 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

646 
	`mock
().
	`ex≥˘O√CÆl
("foo");

647 
	`CHECK
(!
	`mock
().
	`a˘uÆCÆl
("foo").
	`hasRëu∫VÆue
());

648 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

650 
	`mock
().
	`ex≥˘O√CÆl
("foo2").
	`™dRëu∫VÆue
(1);

651 
	`CHECK
(
	`mock
().
	`a˘uÆCÆl
("foo2").
	`hasRëu∫VÆue
());

652 
	`CHECK
(
	`mock
().
	`hasRëu∫VÆue
());

653 
	}
}

655 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆue
)

657 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

658 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

659 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

660 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ötRëu∫VÆue
());

661 
	}
}

663 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆueSësDif„ª¡VÆues
)

665 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

666 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(2);

668 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
();

670 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo");

671 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

672 
	}
}

674 
	$TEST
(
MockSuµ‹tTe°
, 
SåögRëu∫VÆue
)

676 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
("hello world");

677 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëSåögVÆue
());

678 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`°rögRëu∫VÆue
());

679 
	}
}

681 
	$TEST
(
MockSuµ‹tTe°
, 
DoubÀRëu∫VÆue
)

683 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1.0);

684 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
(), 0.05);

685 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`doubÀRëu∫VÆue
(), 0.05);

686 
	}
}

688 
	$TEST
(
MockSuµ‹tTe°
, 
PoöãrRëu∫VÆue
)

690 * 
±r
 = (*) 0x001;

691 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(
±r
);

692 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
());

693 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`poöãrRëu∫VÆue
());

694 
	}
}

696 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘
)

698 * 
obje˘På
 = (*) 0x001;

699 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

700 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

701 
	}
}

703 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Faûs
)

705 * 
obje˘På
 = (*) 0x001;

706 * 
obje˘På2
 = (*) 0x002;

707 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

709 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

710 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På2
);

712 
MockU√x≥˘edObje˘Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", 
obje˘På2
, *
ex≥˘©i⁄sLi°
);

713 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

714 
	}
}

716 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Ex≥˘edButNŸCÆÀd
)

718 * 
obje˘På
 = (*) 0x001;

719 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

720 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

722 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

723 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

724 
	`mock
().
	`a˘uÆCÆl
("boo");

725 
	`mock
().
	`a˘uÆCÆl
("boo");

727 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", *
ex≥˘©i⁄sLi°
);

728 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

729 
	`mock
().
	`checkEx≥˘©i⁄s
();

730 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

731 
	}
}

733 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆls
)

735 
	`mock
().
	`ex≥˘NCÆls
(2, "boo");

736 
	`mock
().
	`a˘uÆCÆl
("boo");

737 
	`mock
().
	`a˘uÆCÆl
("boo");

738 
	`mock
().
	`checkEx≥˘©i⁄s
();

739 
	`CHECK_NO_MOCK_FAILURE
();

740 
	}
}

742 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhP¨amëîs
)

744 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

745 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

746 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

747 
	`mock
().
	`checkEx≥˘©i⁄s
();

748 
	`CHECK_NO_MOCK_FAILURE
();

749 
	}
}

751 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀMu…ùÀCÆlsWôhP¨amëîs
)

753 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

754 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

755 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

756 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

757 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

758 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

759 
	`mock
().
	`checkEx≥˘©i⁄s
();

760 
	`CHECK_NO_MOCK_FAILURE
();

761 
	}
}

763 
	$TEST
(
MockSuµ‹tTe°
, 
åacög
)

765 
	`mock
().
	`åacög
(
åue
);

767 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

768 
	`mock
("sc›e").
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

769 
	`mock
().
	`checkEx≥˘©i⁄s
();

771 
	`STRCMP_CONTAINS
("boo", 
	`mock
().
	`gëTø˚Ouçut
());

772 
	`STRCMP_CONTAINS
("foo", 
	`mock
().
	`gëTø˚Ouçut
());

773 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_c.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

31 
	~"Te°MockSuµ‹t_cCFûe.h
"

34 
	$TEST_GROUP
(
MockSuµ‹t_c
)

36 
	}
};

38 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆO√CÆl
)

40 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

41 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

42 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

43 
	}
}

45 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîs
)

47 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

48 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

49 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

50 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

51 
	}
}

53 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

55  
obje˘1
 =
obje˘2
;

57 
	}
}

59 * 
	$ty≥NameVÆueToSåög
(* 
obje˘
)

61  (*Ë
obje˘
;

62 
	}
}

64 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîsOnObje˘
)

66 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

67 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

68 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

69 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

70 
	}
}

72 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫I¡VÆue
)

74 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

75 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
ötVÆue
);

76 
	`LONGS_EQUAL
(
MOCKVALUETYPE_INTEGER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

77 
	}
}

79 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫DoubÀVÆue
)

81 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫DoubÀVÆue
(1.0);

82 
	`DOUBLES_EQUAL
(1.0, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
, 0.005);

83 
	`LONGS_EQUAL
(
MOCKVALUETYPE_DOUBLE
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

84 
	}
}

86 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫SåögVÆue
)

88 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫SåögVÆue
("hello world");

89 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
°rögVÆue
);

90 
	`LONGS_EQUAL
(
MOCKVALUETYPE_STRING
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

91 
	}
}

93 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫PoöãrVÆue
)

95 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫PoöãrVÆue
((*) 10);

96 
	`POINTERS_EQUAL
((*Ë10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
poöãrVÆue
);

97 
	`LONGS_EQUAL
(
MOCKVALUETYPE_POINTER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

98 
	}
}

100 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tWôhSc›e
)

102 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

103 
	`LONGS_EQUAL
(0, 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
());

104 
	`LONGS_EQUAL
(1, 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
());

105 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

106 
	}
}

108 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëI¡D©a
)

110 
	`mock_c
()->
	`£tI¡D©a
("integer", 10);

111 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`gëD©a
("öãgî").
vÆue
.
ötVÆue
);

112 
	}
}

114 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëDoubÀD©a
)

116 
	`mock_c
()->
	`£tDoubÀD©a
("double", 1.0);

117 
	`DOUBLES_EQUAL
(1.00, 
	`mock_c
()->
	`gëD©a
("doubÀ").
vÆue
.
doubÀVÆue
, 0.05);

118 
	}
}

120 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëSåögD©a
)

122 
	`mock_c
()->
	`£tSåögD©a
("string", "hello world");

123 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`gëD©a
("°rög").
vÆue
.
°rögVÆue
);

124 
	}
}

126 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëPoöãrD©a
)

128 
	`mock_c
()->
	`£tPoöãrD©a
("pointer", (*) 1);

129 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("poöãr").
vÆue
.
poöãrVÆue
);

130 
	}
}

132 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëD©aObje˘
)

134 
	`mock_c
()->
	`£tD©aObje˘
("name", "type", (*) 1);

135 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("«me").
vÆue
.
obje˘VÆue
);

136 
	}
}

138 
	$TEST
(
MockSuµ‹t_c
, 
W‹ksInCFûe
)

140 
	`Æl_mock_suµ‹t_c_ˇŒs
();

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.c

28 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

30 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

32  
obje˘1
 =
obje˘2
;

34 
	}
}

36 * 
	$ty≥NameVÆueToSåög
(* 
obje˘
)

38  (*Ë
obje˘
;

39 
	}
}

41 
	$Æl_mock_suµ‹t_c_ˇŒs
()

43 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

44 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

45 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

47 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

48 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

49 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

50 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

52 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

53 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

54 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

55 
	`mock_c
()->
	`˛ór
();

56 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

58 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

59 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
();

60 
	`mock_c
()->
	`ªtu∫VÆue
();

61 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo2")->
	`™dRëu∫DoubÀVÆue
(1.0);

62 
	`mock_c
()->
	`a˘uÆCÆl
("boo2")->
	`ªtu∫VÆue
();

63 
	`mock_c
()->
	`ªtu∫VÆue
();

65 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo3")->
	`™dRëu∫SåögVÆue
("hello world");

66 
	`mock_c
()->
	`a˘uÆCÆl
("boo3")->
	`ªtu∫VÆue
();

67 
	`mock_c
()->
	`ªtu∫VÆue
();

69 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo4")->
	`™dRëu∫PoöãrVÆue
((*) 10);

70 
	`mock_c
()->
	`a˘uÆCÆl
("boo4")->
	`ªtu∫VÆue
();

71 
	`mock_c
()->
	`ªtu∫VÆue
();

73 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

74 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
();

75 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
();

76 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

77 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.h

28 #i‚de‡
__Te°MockSuµ‹tc_CFûe__h


29 
	#__Te°MockSuµ‹tc_CFûe__h


	)

31 
Æl_mock_suµ‹t_c_ˇŒs
();

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°Ext/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

36 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
OrdîedTe°
 
‹dîedTe°
;

39 
OrdîedTe°
 
‹dîedTe°2
;

40 
OrdîedTe°
 
‹dîedTe°3
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

43 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

45 
OrdîedTe°
* 
‹dîedTe°Cache
;

46 
	`£tup
()

48 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

49 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

51 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

52 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

55 
	`ã¨down
()

57 
dñëe
 
fixtuª
;

58 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

61 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

63 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

66 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

68 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

71 
Uã°
* 
	`fú°Te°
()

73  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

76 
Uã°
* 
	`£c⁄dTe°
()

78  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

80 
	}
};

82 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

84 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10, 5);

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

150 
	}
};

152 
	gã°Numbî
 = 0;

154 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

156 
	`CHECK
(
ã°Numbî
 == 0);

157 
ã°Numbî
++;

158 
	}
}

160 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

162 
	`CHECK
(
ã°Numbî
 == 2);

163 
ã°Numbî
++;

164 
	}
}

166 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

168 
	`CHECK
(
ã°Numbî
 == 1);

169 
ã°Numbî
++;

170 
	}
}

172 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

174 
	`CHECK
(
ã°Numbî
 == 4);

175 
ã°Numbî
++;

176 
	}
}

178 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

180 
	`CHECK
(
ã°Numbî
 == 3);

181 
ã°Numbî
++;

182 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\AllTests.h

29 
IMPORT_TEST_GROUP
–
Sim∂eSåögExãnsi⁄s
);

30 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	$TEST_GROUP
(
Sim∂eSåögExãnsi⁄s
)

33 
	}
};

35 
usög
 
«me•a˚
 
	g°d
;

37 
	$TEST
(
Sim∂eSåögExãnsi⁄s
, 
‰omStdSåög
)

39 
°rög
 
	`s
("hello");

40 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

42 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

31 
	~<°döt.h
>

33 
	$TEST_GROUP
(
Sim∂eSåögFromStdöt
)

35 
	}
};

37 
usög
 
«me•a˚
 
	g°d
;

40 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt64_t
)

48 
uöt64_t
 
i
 = 10;

49 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

50 
	`CHECK_EQUAL
("uöt64_ànŸ suµ‹ãd", 
ªsu…
);

52 
	}
}

54 
	$TEST
(
Sim∂eSåögFromStdöt
, 
I¡64_t
)

67 
	}
}

69 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt32_t
)

71 
uöt32_t
 
i
 = 0xffffffff;

73 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

74 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

75 
	}
}

77 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt16_t
)

79 
uöt16_t
 
i
 = 0xffff;

81 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

82 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

83 
	}
}

85 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt8_t
)

87 
uöt8_t
 
i
 = 0xff;

89 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

90 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

91 
	}
}

93 
	$IGNORE_TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt64_t
)

97 
	}
}

99 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt32_t
)

101 
uöt32_t
 
i
 = 0xffffffff;

102 
	`CHECK_EQUAL
(
i
, i);

103 
	}
}

105 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt16_t
)

107 
uöt16_t
 
i
 = 0xffff;

108 
	`CHECK_EQUAL
(
i
, i);

109 
	}
}

111 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt8_t
)

113 
uöt8_t
 
i
 = 0xff;

114 
	`CHECK_EQUAL
(
i
, i);

115 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

35 { 
Te°Te°ögFixtuª
* 
fixtuª
;

37 
OrdîedTe°
 
‹dîedTe°
;

38 
OrdîedTe°
 
‹dîedTe°2
;

39 
OrdîedTe°
 
‹dîedTe°3
;

40 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

44 
OrdîedTe°
* 
‹dîedTe°Cache
;

45 
	`£tup
()

47 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

48 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

50 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

51 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

54 
	`ã¨down
()

56 
dñëe
 
fixtuª
;

57 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

60 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

62 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

65 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

67 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

70 
Uã°
* 
	`fú°Te°
()

72  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

75 
Uã°
* 
	`£c⁄dTe°
()

77  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

79 
	}
};

81 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

83 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10,

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

149 {
	}
};

151 
	gã°Numbî
 = 0;

153 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

155 
	`CHECK
(
ã°Numbî
 == 0);

156 
ã°Numbî
++;

157 
	}
}

159 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

161 
	`CHECK
(
ã°Numbî
 == 2);

162 
ã°Numbî
++;

163 
	}
}

165 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

167 
	`CHECK
(
ã°Numbî
 == 1);

168 
ã°Numbî
++;

169 
	}
}

171 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

173 
	`CHECK
(
ã°Numbî
 == 4);

174 
ã°Numbî
++;

175 
	}
}

177 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

179 
	`CHECK
(
ã°Numbî
 == 3);

180 
ã°Numbî
++;

181 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\JUnitOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 c⁄° * 
	gtheTime
 = "1978-10-03T00:00:00";

37 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

39  
mûlisTime
;

40 
	}
}

42 c⁄° * 
	$MockGëPœtf‹mS≥cificTimeSåög
()

44  
theTime
;

45 
	}
}

47 
	$TEST_GROUP
(
JUnôOuçutTe°
)

49 ˛as†
	cMockJUnôTe°Ouçut
: 
public
 
JUnôTe°Ouçut


51 
public
:

54 
ã°GroupSize
 = 10

58 
deÁu…Size
 = 7

61 
fûesO≥√d
;

62 
fûeBÆ™˚
;

64 
Sim∂eSåög
 
fûeName_
;

65 
Sim∂eSåög
 
buf„r_
;

67 
Te°Resu…
* 
ªs_
;

68 
	sTe°D©a


70 
	`Te°D©a
() :

71 
	`t°_
(0), 
	`ã°Name_
(0), 
	`Áûuª_
(0)

75 
Uã°
* 
t°_
;

76 
Sim∂eSåög
* 
ã°Name_
;

77 
Te°Faûuª
* 
Áûuª_
;

80 
	sTe°GroupD©a


82 
	`Te°GroupD©a
() :

83 
	`numbîTe°s_
(0), 
	`tŸÆFaûuªs_
(0), 
	`«me_
(""), 
	`ã°D©a_
(0)

88 
numbîTe°s_
;

89 
tŸÆFaûuªs_
;

90 
Sim∂eSåög
 
«me_
;

92 
Te°D©a
* 
ã°D©a_
;

95 
Te°GroupD©a
 
ã°GroupD©a_
[
ã°GroupSize
];

97 
Te°GroupD©a
& 
	`cuºítGroup
()

99  
ã°GroupD©a_
[
fûesO≥√d
 - 1];

102 
	`ª£tXmlFûe
()

104 
buf„r_
 = "";

107 
	`MockJUnôTe°Ouçut
() :

108 
	`fûesO≥√d
(0), 
	`fûeBÆ™˚
(0), 
	`ªs_
(0)

110 
i
 = 0; i < 
ã°GroupSize
; i++) {

111 
ã°GroupD©a_
[
i
].
numbîTe°s_
 = 0;

112 
ã°GroupD©a_
[
i
].
tŸÆFaûuªs_
 = 0;

117 
	`£tResu…
(
Te°Resu…
* 
ã°Res
)

119 
ªs_
 = 
ã°Res
;

122 
vútuÆ
 ~
	`MockJUnôTe°Ouçut
()

124 
i
 = 0; i < 
ã°GroupSize
; i++) {

125 
j
 = 0; j < 
ã°GroupD©a_
[
i
].
numbîTe°s_
; j++) {

126 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
t°_
;

127 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
ã°Name_
;

128 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
Áûuª_
Ë
dñëe
ÅestGroupData_[i].testData_[j].failure_;

130 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
Ë
dñëe
[]ÅestGroupData_[i].testData_;

133 
	`LONGS_EQUAL
(0, 
fûeBÆ™˚
);

136 
	`wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf
)

138 
buf„r_
 +
buf
;

141 
	`›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
ö_FûeName
)

143 
fûesO≥√d
++;

144 
fûeBÆ™˚
++;

145 
fûeName_
 = 
ö_FûeName
;

148 
	`˛o£Fûe
()

150 
	`CHECK_XML_FILE
();

151 
	`ª£tXmlFûe
();

152 
fûeBÆ™˚
--;

155 
	`¸óãTe°sInGroup
(
ödex
, 
amou¡
, c⁄° * 
group
, c⁄° * 
ba£«me
)

157 
ã°GroupD©a_
[
ödex
].
«me_
 = 
group
;

158 
ã°GroupD©a_
[
ödex
].
numbîTe°s_
 = 
amou¡
;

160 
ã°GroupD©a_
[
ödex
].
ã°D©a_
 = 
√w
 
Te°D©a
[
amou¡
];

161 
i
 = 0; i < 
amou¡
; i++) {

162 
Te°D©a
& 
ã°D©a
 = 
ã°GroupD©a_
[
ödex
].
ã°D©a_
[
i
];

163 
ã°D©a
.
ã°Name_
 = 
√w
 
	`Sim∂eSåög
(
ba£«me
);

164 *
ã°D©a
.
ã°Name_
 +
	`SåögFrom
((Ë
i
);

165 
ã°D©a
.
t°_
 = 
√w
 
	`Uã°
(
group
,Åe°D©a.
ã°Name_
->
	`asCh¨Såög
(), "file", 1);

168 
	`runTe°s
()

170 
ªs_
->
	`ã°sSèπed
();

171 
i
 = 0; i < 
ã°GroupSize
; i++) {

172 
Te°GroupD©a
& 
d©a
 = 
ã°GroupD©a_
[
i
];

173 i‡(
d©a
.
numbîTe°s_
 == 0) ;

175 
mûlisTime
 = 0;

176 
ªs_
->
	`cuºítGroupSèπed
(
d©a
.
ã°D©a_
[0].
t°_
);

177 
j
 = 0; j < 
d©a
.
numbîTe°s_
; j++) {

178 
Te°D©a
& 
ã°D©a
 = 
d©a
.
ã°D©a_
[
j
];

180 
mûlisTime
 = 0;

181 
ªs_
->
	`cuºítTe°Sèπed
(
ã°D©a
.
t°_
);

182 i‡(
ã°D©a
.
Áûuª_
Ë
	`¥öt
(*testData.failure_);

183 
mûlisTime
 = 10;

184 
ªs_
->
	`cuºítTe°Ended
(
ã°D©a
.
t°_
);

186 
mûlisTime
 = 50;

187 
ªs_
->
	`cuºítGroupEnded
(
d©a
.
ã°D©a_
[0].
t°_
);

189 
ªs_
->
	`ã°sEnded
();

192 
	`£tFaûuª
(
groupIndex
, 
ã°Index
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
mesßge
)

194 
Te°D©a
& 
d©a
 = 
ã°GroupD©a_
[
groupIndex
].
ã°D©a_
[
ã°Index
];

195 
d©a
.
Áûuª_
 = 
√w
 
	`Te°Faûuª
(d©a.
t°_
, 
fûeName
, 
löeNumbî
, 
mesßge
);

196 
ã°GroupD©a_
[
groupIndex
].
tŸÆFaûuªs_
++;

199 
	`CHECK_HAS_XML_HEADER
(
Sim∂eSåög
 
°rög
)

201 
	`STRCMP_EQUAL
("<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>\n", 
°rög
.
	`asCh¨Såög
());

204 
	`CHECK_TEST_SUITE_START
(
Sim∂eSåög
 
ouçut
)

206 
Te°GroupD©a
& 
group
 = 
	`cuºítGroup
();

207 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°suôêîr‹s=\"0\" faûuªs=\"%d\" ho°«me=\"loˇlho°\"Çame=\"%s\"Åe°s=\"%d\"Åime=\"0.050\"Åime°amp=\"%s\">\n", 
group
.
tŸÆFaûuªs_
,

208 
group
.
«me_
.
	`asCh¨Såög
(), group.
numbîTe°s_
, 
theTime
);

209 
	`CHECK_EQUAL
(
buf
, 
ouçut
);

212 
	`CHECK_XML_FILE
()

214 
size_t
 
tŸÆSize
 = 
	`cuºítGroup
().
numbîTe°s_
 + 
deÁu…Size
 + (cuºítGroup().
tŸÆFaûuªs_
 * 2);

215 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

216 
buf„r_
.
	`•lô
("\n", 
cﬁ
);

217 
	`CHECK
(
cﬁ
.
	`size
(Ë>
tŸÆSize
);

218 
	`CHECK_HAS_XML_HEADER
(
cﬁ
[0]);

219 
	`CHECK_TEST_SUITE_START
(
cﬁ
[1]);

220 
	`CHECK_PROPERTIES_START
(
cﬁ
[2]);

221 
	`CHECK_PROPERTIES_END
(
cﬁ
[3]);

222 
	`CHECK_TESTS
(&
cﬁ
[4]);

223 
	`CHECK_SYSTEM_OUT
(
cﬁ
[cﬁ.
	`size
() - 3]);

224 
	`CHECK_SYSTEM_ERR
(
cﬁ
[cﬁ.
	`size
() - 2]);

225 
	`CHECK_TEST_SUITE_END
(
cﬁ
[cﬁ.
	`size
() - 1]);

228 
	`CHECK_PROPERTIES_START
(c⁄° 
Sim∂eSåög
& 
ouçut
)

230 
	`STRCMP_EQUAL
("<¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

233 
	`CHECK_PROPERTIES_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

235 
	`STRCMP_EQUAL
("</¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

238 
	`CHECK_SYSTEM_OUT
(c⁄° 
Sim∂eSåög
& 
ouçut
)

240 
	`STRCMP_EQUAL
("<sy°em-out></sy°em-out>\n", 
ouçut
.
	`asCh¨Såög
());

243 
	`CHECK_SYSTEM_ERR
(c⁄° 
Sim∂eSåög
& 
ouçut
)

245 
	`STRCMP_EQUAL
("<sy°em-îr></sy°em-îr>\n", 
ouçut
.
	`asCh¨Såög
());

248 
	`CHECK_TEST_SUITE_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

250 
	`STRCMP_EQUAL
("</ã°suôe>", 
ouçut
.
	`asCh¨Såög
());

252 
	`CHECK_TESTS
(
Sim∂eSåög
* 
¨r
)

254 
ödex
 = 0, 
curTe°
 = 0; curTe° < 
	`cuºítGroup
().
numbîTe°s_
; curTest++, index++) {

255 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°ˇ£ cœs¢ame=\"%s\"Çame=\"%s\"Åime=\"0.010\">\n", 
	`cuºítGroup
().
«me_
.
	`asCh¨Såög
(),

256 
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
t°_
->
	`gëName
().
	`asCh¨Såög
());

257 
	`CHECK_EQUAL
(
buf
, 
¨r
[
ödex
]);

258 i‡(
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
) {

259 
	`CHECK_FAILURE
(
¨r
, 
ödex
, 
curTe°
);

261 
buf
 = "</testcase>\n";

262 
	`CHECK_EQUAL
(
buf
, 
¨r
[++
ödex
]);

266 
	`CHECK_FAILURE
(
Sim∂eSåög
* 
¨r
, & 
i
, 
curTe°
)

268 
Te°Faûuª
& 
f
 = *
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
;

269 
i
++;

270 
Sim∂eSåög
 
mesßge
 = 
f
.
	`gëMesßge
().
	`asCh¨Såög
();

271 
mesßge
.
	`ª∂a˚
('"', '\'');

272 
mesßge
.
	`ª∂a˚
('<', '[');

273 
mesßge
.
	`ª∂a˚
('>', ']');

274 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

275 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<Áûuª mesßge=\"%s:%d: %s\"Åy≥=\"As£πi⁄FaûedEº‹\">\n", 
f
.
	`gëFûeName
().
	`asCh¨Såög
(), f.
	`gëFaûuªLöeNumbî
(), 
mesßge
.asCharString());

276 
	`CHECK_EQUAL
(
buf
, 
¨r
[
i
]);

277 
i
++;

278 
	`STRCMP_EQUAL
("</Áûuª>\n", 
¨r
[
i
].
	`asCh¨Såög
());

280 
	}
};

282 
MockJUnôTe°Ouçut
 * 
	gouçut
;

283 
Te°Resu…
 *
	gªs
;

285 
	$£tup
()

287 
ouçut
 = 
√w
 
	`MockJUnôTe°Ouçut
();

288 
ªs
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

289 
ouçut
->
	`£tResu…
(
ªs
);

290 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

291 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(
MockGëPœtf‹mS≥cificTimeSåög
);

292 
	}
}

293 
	$ã¨down
()

295 
dñëe
 
ouçut
;

296 
dñëe
 
ªs
;

297 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

298 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(0);

299 
	}
}

301 
	$runTe°s
()

303 
ouçut
->
	`¥ötTe°sSèπed
();

304 
ouçut
->
	`runTe°s
();

305 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

306 
	}
}

309 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupAŒPass
)

311 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "group", "name");

312 
	`runTe°s
();

313 
	`STRCMP_EQUAL
("˝puã°_group.xml", 
ouçut
->
fûeName_
.
	`asCh¨Såög
());

314 
	`LONGS_EQUAL
(1, 
ouçut
->
fûesO≥√d
);

315 
	}
}

317 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAŒPass
)

319 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group", "name");

320 
	`runTe°s
();

321 
	}
}

323 
	$TEST
(
JUnôOuçutTe°
, 
mu…ùÀTe°sInTwoGroupAŒPass
)

325 
ouçut
->
	`¸óãTe°sInGroup
(0, 3, "group", "name");

326 
ouçut
->
	`¸óãTe°sInGroup
(1, 8, "secondGroup", "secondName");

327 
	`runTe°s
();

328 
	`LONGS_EQUAL
(2, 
ouçut
->
fûesO≥√d
);

329 
	}
}

331 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupFaûed
)

333 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

334 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test <\"just\"> failed");

335 
	`runTe°s
();

336 
	}
}

338 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAndThªeFaû
)

340 
ouçut
->
	`¥ötTe°sSèπed
();

341 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "failedGroup", "failedName");

342 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

343 
ouçut
->
	`£tFaûuª
(0, 1, "file", 5, "Also failed");

344 
ouçut
->
	`£tFaûuª
(0, 4, "file", 8, "And failedágain");

345 
	`runTe°s
();

346 
	}
}

348 
	$TEST
(
JUnôOuçutTe°
, 
fourGroupsAndSomePassAndSomeFaû
)

350 
ouçut
->
	`¥ötTe°sSèπed
();

351 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group1", "firstName");

352 
ouçut
->
	`¸óãTe°sInGroup
(1, 50, "group2", "secondName");

353 
ouçut
->
	`¸óãTe°sInGroup
(2, 3, "group3", "thirdName");

354 
ouçut
->
	`¸óãTe°sInGroup
(3, 5, "group4", "fourthName");

356 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

357 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

358 
	`runTe°s
();

359 
	}
}

361 
	$TEST
(
JUnôOuçutTe°
, 
mesßgeWôhNewLöe
)

363 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

364 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test \n failed");

365 
	`runTe°s
();

366 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakAllocatorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Mem‹yLókAŒoˇt‹Te°
)

34 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
;

36 
	`ã¨down
()

38 i‡(
Æloˇt‹
Ë
dñëe
állocator;

40 
	}
};

42 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAŒoˇt‹
)

44 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

45 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
Æloˇt‹
);

46 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

47 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

48 
	`POINTERS_EQUAL
(
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

49 
	}
}

51 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAºayAŒoˇt‹
)

53 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

54 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
Æloˇt‹
);

55 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

56 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

57 
	`POINTERS_EQUAL
(
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

58 
	}
}

60 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítMÆlocAŒoˇt‹
)

62 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

63 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
Æloˇt‹
);

64 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

65 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

66 
	`POINTERS_EQUAL
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

67 
	}
}

69 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocAŒoˇti⁄
)

71 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

72 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

73 
	}
}

75 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocNames
)

77 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

78 
	`STRCMP_EQUAL
("Sènd¨d MÆlo¯AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

79 
	`STRCMP_EQUAL
("mÆloc", 
Æloˇt‹
->
	`Æloc_«me
());

80 
	`STRCMP_EQUAL
("‰ì", 
Æloˇt‹
->
	`‰ì_«me
());

81 
	}
}

83 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAŒoˇti⁄
)

85 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

86 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

87 
	}
}

89 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewNames
)

91 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

92 
	`STRCMP_EQUAL
("Sènd¨d New AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

93 
	`STRCMP_EQUAL
("√w", 
Æloˇt‹
->
	`Æloc_«me
());

94 
	`STRCMP_EQUAL
("dñëe", 
Æloˇt‹
->
	`‰ì_«me
());

95 
	}
}

97 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayAŒoˇti⁄
)

99 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

100 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

101 
	}
}

103 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayNames
)

105 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

106 
	`STRCMP_EQUAL
("Sènd¨d New [] AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

107 
	`STRCMP_EQUAL
("√w []", 
Æloˇt‹
->
	`Æloc_«me
());

108 
	`STRCMP_EQUAL
("dñëê[]", 
Æloˇt‹
->
	`‰ì_«me
());

109 
	}
}

111 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownAŒoˇti⁄
)

113 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

114 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

115 
	}
}

117 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownNames
)

119 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

120 
	`STRCMP_EQUAL
("NuŒ AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

121 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`Æloc_«me
());

122 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`‰ì_«me
());

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakDetectorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

30 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 ˛as†
	cMem‹yLókFaûuªF‹Te°
: 
public
 
Mem‹yLókFaûuª


35 
public
:

36 
vútuÆ
 ~
	$Mem‹yLókFaûuªF‹Te°
()

40 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

42 *
mesßge
 = 
Áû_°rög
;

43 
	}
}

45 
Sim∂eSåög
 *
	gmesßge
;

48 ˛as†
	cNewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dNewAŒoˇt‹


50 
public
:

51 
	$NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

52 
	`Æloc_ˇŒed
(0), 
	$‰ì_ˇŒed
(0)

56 
Æloc_ˇŒed
;

57 
‰ì_ˇŒed
;

58 * 
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

60 
Æloc_ˇŒed
++;

61  
Sènd¨dNewAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, "file", 1);

62 
	}
}

63 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

65 
‰ì_ˇŒed
++;

66 
Sènd¨dNewAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

67 
	}
}

70 ˛as†
	cMÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dMÆlocAŒoˇt‹


72 
public
:

73 
	$MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

74 
	`Æloc_ˇŒed
(0), 
	`‰ì_ˇŒed
(0), 
	`ÆlocMem‹yLókNodeCÆÀd
(0), 
	$‰ìMem‹yLókNodeCÆÀd
(0)

78 
Æloc_ˇŒed
;

79 
‰ì_ˇŒed
;

80 
ÆlocMem‹yLókNodeCÆÀd
;

81 
‰ìMem‹yLókNodeCÆÀd
;

82 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

84 
Æloc_ˇŒed
++;

85  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

86 
	}
}

87 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

89 
‰ì_ˇŒed
++;

90 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 
	}
}

93 * 
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

95 
ÆlocMem‹yLókNodeCÆÀd
++;

96  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
__FILE__
, 
__LINE__
);

97 
	}
}

99 
	$‰ìMem‹yLókNode
(* 
mem‹y
)

101 
‰ìMem‹yLókNodeCÆÀd
++;

102 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
__FILE__
, 
__LINE__
);

103 
	}
}

106 
	$TEST_GROUP
(
Mem‹yLókDëe˘‹Te°
)

108 
Mem‹yLókDëe˘‹
* 
dëe˘‹
;

109 
Mem‹yLókFaûuªF‹Te°
 *
ªp‹ãr
;

110 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
mÆlocAŒoˇt‹
;

111 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
√wAŒoˇt‹
;

112 
Sènd¨dNewAºayAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

114 
	`£tup
()

116 
dëe˘‹
 = 
√w
 
Mem‹yLókDëe˘‹
;

117 
ªp‹ãr
 = 
√w
 
Mem‹yLókFaûuªF‹Te°
;

118 
mÆlocAŒoˇt‹
 = 
√w
 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

119 
√wAŒoˇt‹
 = 
√w
 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

120 
√wAºayAŒoˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

121 
dëe˘‹
->
	`öô
(
ªp‹ãr
);

122 
dëe˘‹
->
	`íabÀ
();

123 
dëe˘‹
->
	`°¨tCheckög
();

124 
ªp‹ãr
->
mesßge
 = 
√w
 
	`Sim∂eSåög
();

126 
	`ã¨down
()

128 
dñëe
 
ªp‹ãr
->
mesßge
;

129 
dñëe
 
dëe˘‹
;

130 
dñëe
 
ªp‹ãr
;

131 
dñëe
 
mÆlocAŒoˇt‹
;

132 
dñëe
 
√wAŒoˇt‹
;

133 
dñëe
 
√wAºayAŒoˇt‹
;

135 
	}
};

137 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√Lók
)

139 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 3);

140 
dëe˘‹
->
	`°›Checkög
();

141 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

142 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

143 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 3"));

144 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

145 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

146 
	`Pœtf‹mS≥cificFªe
(
mem
);

147 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

148 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

149 
	}
}

151 
	~<°dio.h
>

153 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√HundªdLóks
)

155 c⁄° 
amou¡_Æloc
 = 100;

156 *
mem
[
amou¡_Æloc
];

157 
i
 = 0; i < 
amou¡_Æloc
; i++)

158 
mem
[
i
] = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 3);

159 
dëe˘‹
->
	`°›Checkög
();

161 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

163 
	`STRCMP_CONTAINS
(
MEM_LEAK_HEADER
, 
ouçut
.
	`asCh¨Såög
());

164 
	`STRCMP_CONTAINS
(
MEM_LEAK_FOOTER
, 
ouçut
.
	`asCh¨Såög
());

165 
	`STRCMP_CONTAINS
(
MEM_LEAK_ADDITION_MALLOC_WARNING
, 
ouçut
.
	`asCh¨Såög
());

168 
j
 = 0; j < 
amou¡_Æloc
; j++)

169 
	`Pœtf‹mS≥cificFªe
(
mem
[
j
]);

170 
	}
}

172 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókOutsideCheckögPîiod
)

174 
dëe˘‹
->
	`°›Checkög
();

175 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

176 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
);

177 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

178 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

179 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

180 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

181 
	`Pœtf‹mS≥cificFªe
(
mem
);

182 
	}
}

184 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
NoLóksWh©s€vî
)

186 
dëe˘‹
->
	`°›Checkög
();

187 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

188 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
));

189 
	}
}

191 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoLóksUsögO≥øt‹New
)

193 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

194 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

195 
dëe˘‹
->
	`°›Checkög
();

196 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

197 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

198 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 8"));

199 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

200 
	`Pœtf‹mS≥cificFªe
(
mem
);

201 
	`Pœtf‹mS≥cificFªe
(
mem2
);

202 
	}
}

204 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocButNoLók
)

206 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

207 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

208 
dëe˘‹
->
	`°›Checkög
();

209 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

210 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

211 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

212 
	}
}

214 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√Lók
)

216 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

217 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

218 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

219 
dëe˘‹
->
	`°›Checkög
();

220 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

221 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

222 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 12"));

223 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 4"));

224 
	`Pœtf‹mS≥cificFªe
(
mem2
);

225 
	`LONGS_EQUAL
(2, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

226 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

227 
	}
}

229 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√LókRevî£Ordî
)

231 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

232 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

233 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem2
);

234 
dëe˘‹
->
	`°›Checkög
();

235 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

236 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

237 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 12"));

238 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

239 
	`Pœtf‹mS≥cificFªe
(
mem
);

240 
	}
}

242 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
DñëeN⁄AloˇãdMem‹y
)

244 
a
;

245 * 
∑
 = &
a
;

246 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
∑
, "FREE.c", 100);

247 
dëe˘‹
->
	`°›Checkög
();

248 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
));

249 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: <unknown>Üine: 0 size: 0Åype: unknown"));

250 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

251 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

252 
	}
}

254 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiod
)

256 
dëe˘‹
->
	`°›Checkög
();

257 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

258 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

259 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

260 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

261 
	}
}

263 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiodCom∂iˇãdCa£
)

265 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

266 
dëe˘‹
->
	`°›Checkög
();

268 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

269 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

270 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

271 
	`Pœtf‹mS≥cificFªe
(
mem
);

272 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

273 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

275 
dëe˘‹
->
	`°¨tCheckög
();

276 * 
mem3
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

277 
dëe˘‹
->
	`°›Checkög
();

278 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

279 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

281 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

282 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

283 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

285 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_Æl
);

286 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

287 
	`Pœtf‹mS≥cificFªe
(
mem2
);

288 
	`Pœtf‹mS≥cificFªe
(
mem3
);

289 
	}
}

291 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókUsögO≥øt‹NewWôhFûeLöe
)

293 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4, "file.cpp", 1234);

294 
dëe˘‹
->
	`°›Checkög
();

295 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

296 
	`CHECK
(
ouçut
.
	`c⁄èös
("file.cpp"));

297 
	`CHECK
(
ouçut
.
	`c⁄èös
("1234"));

298 
	`Pœtf‹mS≥cificFªe
(
mem
);

299 
	}
}

301 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªeUsögAºayNew
)

303 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 10, "file.cpp", 1234);

304 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 12);

305 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

306 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

307 
	`CHECK
(
ouçut
.
	`c⁄èös
("new []"));

308 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
);

309 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem2
);

310 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

311 
dëe˘‹
->
	`°›Checkög
();

312 
	}
}

314 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªe
)

316 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

317 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 12);

318 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

319 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

320 
	`CHECK
(
ouçut
.
	`c⁄èös
("malloc"));

321 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

322 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
, "file.c", 5678);

323 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

324 
dëe˘‹
->
	`°›Checkög
();

325 
	}
}

327 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√RóŒoc
)

329 * 
mem1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

331 * 
mem2
 = 
dëe˘‹
->
	`ªÆlocMem‹y
(
mÆlocAŒoˇt‹
, 
mem1
, 1000, "other.cpp", 5678);

333 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

334 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

335 
	`CHECK
(
ouçut
.
	`c⁄èös
("other.cpp"));

337 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
);

338 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

339 
dëe˘‹
->
	`°›Checkög
();

340 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
Æloc_ˇŒed
);

341 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
‰ì_ˇŒed
);

342 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
ÆlocMem‹yLókNodeCÆÀd
);

343 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
‰ìMem‹yLókNodeCÆÀd
);

344 
	}
}

347 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocAndFªeWôhDif„ªn˚In°™˚sOfTheSameAŒoˇt‹Ty≥
)

349 
Sènd¨dNewAºayAŒoˇt‹
 
√wAºayAŒoˇt‹Two
;

350 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

351 
dëe˘‹
->
	`dóŒocMem‹y
(&
√wAºayAŒoˇt‹Two
, 
mem
, "FREE.c", 100);

352 
dëe˘‹
->
	`°›Checkög
();

353 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

354 
	}
}

356 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥
)

358 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

359 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

360 
dëe˘‹
->
	`°›Checkög
();

361 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
));

362 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 100Åype:Çew []"));

363 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

364 
	}
}

366 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥WôhCheckögDißbÀd
)

368 
dëe˘‹
->
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

369 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

370 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
, "FREE.c", 100);

371 
dëe˘‹
->
	`°›Checkög
();

372 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

373 
dëe˘‹
->
	`íabÀAŒoˇti⁄Ty≥Checkög
();

374 
	}
}

376 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mÆlocLókGivesAddôi⁄ÆW¨nög
)

378 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 100, "ALLOC.c", 10);

379 
dëe˘‹
->
	`°›Checkög
();

380 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

381 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d byáŒoˇtög usögÅhê˝puã° vîsi⁄ o‡mÆloc", 
ouçut
.
	`asCh¨Såög
());

382 
	`Pœtf‹mS≥cificFªe
(
mem
);

383 
	}
}

385 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
√wLókD€sNŸGiveAddôi⁄ÆW¨nög
)

387 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 100, "ALLOC.c", 10);

388 
dëe˘‹
->
	`°›Checkög
();

389 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

390 
	`CHECK
(! 
ouçut
.
	`c⁄èös
("MemoryÜeakÑeportsábout mallocánd free"));

391 
	`Pœtf‹mS≥cificFªe
(
mem
);

392 
	}
}

394 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
M¨kCheckögPîiodLóksAsN⁄CheckögPîiod
)

396 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

397 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

398 
dëe˘‹
->
	`°›Checkög
();

399 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

400 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

401 
dëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

402 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

403 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

404 
	`Pœtf‹mS≥cificFªe
(
mem
);

405 
	`Pœtf‹mS≥cificFªe
(
mem2
);

406 
	}
}

408 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mem‹yC‹ru±i⁄
)

410 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "ALLOC.c", 10);

411 
mem
[10] = 'O';

412 
mem
[11] = 'H';

413 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

414 
dëe˘‹
->
	`°›Checkög
();

415 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_MEMORY_CORRUPTION
));

416 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 10Åype: malloc"));

417 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

418 
	}
}

420 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ß„lyDñëeNULL
)

422 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 0);

423 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

424 
	}
}

426 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodDißbÀd
)

428 
dëe˘‹
->
	`dißbÀ
();

429 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

430 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

431 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

432 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

433 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

434 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

435 
	}
}

437 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodE«bÀd
)

439 
dëe˘‹
->
	`íabÀ
();

440 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

441 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

442 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

443 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

444 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

445 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

446 
	}
}

448 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodCheckög
)

450 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

451 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

452 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

453 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

454 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

455 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

456 
	}
}

458 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ÆloˇãWôhANuŒAŒoˇt‹Cau£sNoProbÀms
)

460 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 2);

461 
dëe˘‹
->
	`dóŒocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem
);

462 
	}
}

465 
	$TEST_GROUP
(
Sim∂eSåögBuf„r
)

467 
	}
};

469 
	$TEST
(
Sim∂eSåögBuf„r
, 
sim∂eTe°
)

471 
Sim∂eSåögBuf„r
 
buf„r
;

472 
buf„r
.
	`add
("Hello");

473 
buf„r
.
	`add
(" World");

474 
	`STRCMP_EQUAL
("HñlÿW‹ld", 
buf„r
.
	`toSåög
());

475 
	}
}

477 
	$TEST
(
Sim∂eSåögBuf„r
, 
wrôePa°Limô
)

479 
Sim∂eSåögBuf„r
 
buf„r
;

480 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 * 2; i++)

481 
buf„r
.
	`add
("h");

482 
Sim∂eSåög
 
	`°r
("h", 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
-1);

483 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

484 
	}
}

486 
	$TEST
(
Sim∂eSåögBuf„r
, 
£tWrôeLimô
)

488 
Sim∂eSåögBuf„r
 
buf„r
;

489 
buf„r
.
	`£tWrôeLimô
(10);

490 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 ; i++)

491 
buf„r
.
	`add
("h");

492 
Sim∂eSåög
 
	`°r
("h", 10);

493 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

494 
	}
}

496 
	$TEST
(
Sim∂eSåögBuf„r
, 
£tWrôeLimôTooHighIsIgn‹ed
)

498 
Sim∂eSåögBuf„r
 
buf„r
;

499 
buf„r
.
	`£tWrôeLimô
(
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
+10);

500 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
+10; i++)

501 
buf„r
.
	`add
("h");

502 
Sim∂eSåög
 
	`°r
("h", 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
-1);

503 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

504 
	}
}

506 
	$TEST
(
Sim∂eSåögBuf„r
, 
ª£tWrôeLimô
)

508 
Sim∂eSåögBuf„r
 
buf„r
;

509 
buf„r
.
	`£tWrôeLimô
(10);

510 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 ; i++)

511 
buf„r
.
	`add
("h");

512 
buf„r
.
	`ª£tWrôeLimô
();

513 
buf„r
.
	`add
(
	`Sim∂eSåög
("h", 10).
	`asCh¨Såög
());

515 
Sim∂eSåög
 
	`°r
("h", 20);

516 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

517 
	}
}

519 
	$TEST_GROUP
(
RóŒocBugRï‹ãd
Ë{ 
	}
};

521 
	$TEST
(
RóŒocBugRï‹ãd
, 
ThisSôu©i⁄Should¡Cøsh
)

523 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

524 
Mem‹yLókDëe˘‹
 
dëe˘‹
;

525 * 
mem
 = 
dëe˘‹
.
	`ÆlocMem‹y
(&
Æloˇt‹
, 5, "file", 1);

526 
mem
 = 
dëe˘‹
.
	`ªÆlocMem‹y
(&
Æloˇt‹
, mem, 19, "file", 1);

527 
dëe˘‹
.
	`dóŒocMem‹y
(&
Æloˇt‹
, 
mem
);

528 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

4 
	~"CµUTe°/Te°Ouçut.h
"

5 
	~"CµUTe°/Te°Regi°ry.h
"

6 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

8 
	~"AŒoˇti⁄InCµFûe.h
"

11 
	~"AŒoˇti⁄InCFûe.h
"

14 
	$TEST_GROUP
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
)

16 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

17 
	`£tup
()

19 
memLókDëe˘‹
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
();

22 
	}
};

24 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveMÆlocByTemp‹¨lySwôchögOffMÆloc
)

26 
memLóks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

27 #i‡
CPPUTEST_USE_MALLOC_MACROS


28 #unde‡
mÆloc


29 #unde‡
‰ì


31 * 
mem‹y
 = 
	`mÆloc
(10);

32 
	`LONGS_EQUAL
(
memLóks
, 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

33 
	`‰ì
 (
mem‹y
);

34 #i‡
CPPUTEST_USE_MALLOC_MACROS


35 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

37 
	}
}

40 ˛as†
	cNewDummyCœss


42 
	mpublic
:

45 #i‡
CPPUTEST_USE_NEW_MACROS


46 #unde‡
√w


48 * 
›î©‹
 
	$√w
 (
size_t
 
size
, 
addôi⁄Æ
)

49 #i‡
CPPUTEST_USE_NEW_MACROS


50 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

53  
	`mÆloc
(
size
 * 
addôi⁄Æ
);

55 
	}
};

58 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveNewByTemp‹¨lySwôchögOffNew
)

60 #i‡
CPPUTEST_USE_NEW_MACROS


61 #unde‡
√w


62 #unde‡
dñëe


64 * 
mem‹y
 = 
√w
 [10];

65 
dñëe
 [] 
mem‹y
;

66 #i‡
CPPUTEST_USE_NEW_MACROS


67 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

69 
	}
}

72 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


74 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

76 * 
Àak
 = 
	`√wAŒoˇti⁄
();

77 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

78 
dñëe
 
Àak
;

79 
	}
}

81 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

83 * 
Àak
 = 
	`√wAºayAŒoˇti⁄
();

84 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

85 
dñëe
[] 
Àak
;

86 
	}
}

88 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocOvîrideW‹ks
)

90 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

91 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCFûe.c", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

92 
	`‰ìAŒoˇti⁄
(
Àak
);

93 
	}
}

95 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocWôhButFªeWôhoutLókDëe˘i⁄D€¢tCøsh
)

97 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

98 
	`‰ìAŒoˇti⁄WôhoutMa¸o
(
Àak
);

99 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

100 
memLókDëe˘‹
->
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(
Àak
);

101 
	}
}

103 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewOvîlﬂdögWôhoutMa¸oW‹ks
)

105 * 
Àak
 = 
	`√wAŒoˇti⁄WôhoutMa¸o
();

106 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

107 
dñëe
 
Àak
;

108 
	}
}

110 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayOvîlﬂdögWôhoutMa¸oW‹ks
)

112 * 
Àak
 = 
	`√wAºayAŒoˇti⁄WôhoutMa¸o
();

113 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

114 
dñëe
[] 
Àak
;

115 
	}
}

119 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
Mem‹yOvîridesAªDißbÀd
)

121 * 
Àak
 = 
	`√wAŒoˇti⁄
();

122 
	`STRCMP_EQUAL
("Nÿmem‹yÜók†wîêdëe˘ed.", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

123 
dñëe
 
Àak
;

124 
	}
}

128 
	$TEST_GROUP
(
OutOfMem‹yTe°sF‹O≥øt‹New
)

130 
Mem‹yLókAŒoˇt‹
* 
no_mem‹y_Æloˇt‹
;

131 
	`£tup
()

133 
no_mem‹y_Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

134 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

135 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

137 
	`ã¨down
()

139 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

140 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

141 
dñëe
 
no_mem‹y_Æloˇt‹
;

143 
	}
};

145 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


147 #i‡
CPPUTEST_USE_STD_CPP_LIB


149 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

151 
åy
 {

152 
√w
 ;

153 
	`FAIL
("Should haveÅhrownánÉxception!")

155 
	`ˇtch
 (
°d
::
bad_Æloc
) {

157 
	}
}

159 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

161 
åy
 {

162 
√w
 [10];

163 
	`FAIL
("Should haveÅhrownánÉxception!")

165 
	`ˇtch
 (
°d
::
bad_Æloc
) {

167 
	}
}

171 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒ
)

173 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

174 
	}
}

176 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒ
)

178 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

179 
	}
}

183 #unde‡
√w


185 #i‡
CPPUTEST_USE_STD_CPP_LIB


187 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

189 
åy
 {

190 
√w
 ;

191 
	`FAIL
("Should haveÅhrownánÉxception!")

193 
	`ˇtch
 (
°d
::
bad_Æloc
) {

195 
	}
}

197 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

199 
åy
 {

200 
√w
 [10];

201 
	`FAIL
("Should haveÅhrownánÉxception!")

203 
	`ˇtch
 (
°d
::
bad_Æloc
) {

205 
	}
}

208 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

210 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

211 
	}
}

213 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

215 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

216 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakWarningTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

32 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

33 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

36 * 
	gÀak1
;

37 * 
	gÀak2
;

39 ˛as†
	cDummyRï‹ãr
: 
public
 
Mem‹yLókFaûuª


41 
public
:

42 
vútuÆ
 ~
	$DummyRï‹ãr
()

45 
vútuÆ
 
	$Áû
(* )

47 
	}
}

50 
Mem‹yLókDëe˘‹
* 
	gdëe˘‹
;

51 
Mem‹yLókW¨nögPlugö
* 
	gmemPlugö
;

52 
DummyRï‹ãr
 
	gdummy
;

53 
Mem‹yLókAŒoˇt‹
* 
	gÆloˇt‹
;

55 
	$TEST_GROUP
(
Mem‹yLókW¨nögTe°
)

57 
Te°Te°ögFixtuª
* 
fixtuª
;

59 
	`£tup
()

61 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

62 
dëe˘‹
 = 
√w
 
	`Mem‹yLókDëe˘‹
();

63 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

64 
dëe˘‹
->
	`öô
(&
dummy
);

65 
memPlugö
 = 
√w
 
	`Mem‹yLókW¨nögPlugö
("Te°Mem‹yLókW¨nögPlugö", 
dëe˘‹
);

66 
fixtuª
->
ªgi°ry_
->
	`ö°ÆlPlugö
(
memPlugö
);

67 
memPlugö
->
	`íabÀ
();

69 
Àak1
 = 0;

70 
Àak2
 = 0;

72 
	`ã¨down
()

74 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak1
);

75 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak2
);

77 
dñëe
 
fixtuª
;

78 
dñëe
 
memPlugö
;

79 
dñëe
 
dëe˘‹
;

80 
dñëe
 
Æloˇt‹
;

82 
	}
};

84 
	$_ã°TwoLóks
()

86 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

88 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

89 
	}
}

91 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
TwoLóks
)

93 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°TwoLóks
);

94 
fixtuª
->
	`runAŒTe°s
();

95 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

96 
fixtuª
->
	`as£πPrötC⁄èös
("TotalÇumber ofÜeaks: 2");

97 
	}
}

99 
	$_ã°Ign‹e2
()

101 
memPlugö
->
	`ex≥˘LóksInTe°
(2);

102 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

103 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

104 
	}
}

106 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
Ign‹e2
)

108 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°Ign‹e2
);

109 
fixtuª
->
	`runAŒTe°s
();

110 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

111 
	}
}

113 
	$_ÁûAndLókMem‹y
()

115 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

116 
	`FAIL
("");

117 
	}
}

119 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
FaûögTe°D€sNŸRï‹tMem‹yLóks
)

121 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûAndLókMem‹y
);

122 
fixtuª
->
	`runAŒTe°s
();

123 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

124 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\NullTestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	$TEST_GROUP
(
NuŒTe°
)

32 
NuŒTe°
* 
nuŒTe°
;

34 
	`TEST_SETUP
()

36 
nuŒTe°
 = 
√w
 
	`NuŒTe°
();

39 
	`TEST_TEARDOWN
()

41 
dñëe
 
nuŒTe°
;

43 
	}
};

45 
	$TEST
(
NuŒTe°
, 
Cª©e
)

47 
	}
}

49 
	$TEST
(
NuŒTe°
, 
In°™˚AlwaysTheSame
)

51 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

52 
	`CHECK
(&
_ö°™˚
 =&
NuŒTe°
::
	`ö°™˚
());

53 
	}
}

55 
	$TEST
(
NuŒTe°
, 
NuŒTe°sD⁄tCou¡
)

57 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

58 
	`CHECK
(
_ö°™˚
.
	`cou¡Te°s
() == 0);

59 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\PluginTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

34 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

35 
	#GENERIC_PLUGIN3
 "GíîicPlugö3"

	)

37 
	g£quí˚Numbî
;

39 ˛as†
	cDummyPlugö
: 
public
 
Te°Plugö


41 
public
:

42 
	$DummyPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

43 
	`Te°Plugö
(
«me
), 
	`¥eA˘i⁄
(0), 
	$po°A˘i⁄
(0)

47 
vútuÆ
 ~
	$DummyPlugö
()

49 
	}
}

51 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
¥eA˘i⁄
++;

54 
¥eA˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

55 
	}
}

57 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

59 
po°A˘i⁄
++;

60 
po°A˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

61 
	}
}

63 
	g¥eA˘i⁄
;

64 
	g¥eA˘i⁄Sequí˚
;

65 
	gpo°A˘i⁄
;

66 
	gpo°A˘i⁄Sequí˚
;

69 ˛as†
	cDummyPlugöWhichAc˚±sP¨amëîs
: 
public
 
DummyPlugö


71 
public
:

72 
	$DummyPlugöWhichAc˚±sP¨amëîs
(c⁄° 
Sim∂eSåög
& 
«me
) :

73 
	$DummyPlugö
(
«me
)

77 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

79 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

80 i‡(
¨gumít
 == "-paccept")

81  
åue
;

82  
Te°Plugö
::
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
);

83 
	}
}

88 
	$TEST_GROUP
(
PlugöTe°
)

90 
DummyPlugö
* 
fú°Plugö
;

91 
DummyPlugöWhichAc˚±sP¨amëîs
* 
£c⁄dPlugö
;

92 
DummyPlugö
* 
thúdPlugö
;

93 
Te°Te°ögFixtuª
 *
gíFixtuª
;

94 
Te°Regi°ry
 *
ªgi°ry
;

95 
	`£tup
()

97 
fú°Plugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN
);

98 
£c⁄dPlugö
 = 
√w
 
	`DummyPlugöWhichAc˚±sP¨amëîs
(
GENERIC_PLUGIN2
);

99 
thúdPlugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN3
);

100 
gíFixtuª
 = 
√w
 
Te°Te°ögFixtuª
;

101 
ªgi°ry
 = 
gíFixtuª
->
ªgi°ry_
;

102 
ªgi°ry
->
	`ö°ÆlPlugö
(
fú°Plugö
);

103 
£quí˚Numbî
 = 1;

106 
	`ã¨down
()

108 
dñëe
 
fú°Plugö
;

109 
dñëe
 
£c⁄dPlugö
;

110 
dñëe
 
thúdPlugö
;

111 
dñëe
 
gíFixtuª
;

113 
	}
};

115 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

116 
	#GENERIC_PLUGIN4
 "GíîicPlugö4"

	)

118 
	$TEST
(
PlugöTe°
, 
PlugöHasName
)

120 
	`CHECK_EQUAL
(
GENERIC_PLUGIN
, 
fú°Plugö
->
	`gëName
());

121 
	}
}

123 
	$TEST
(
PlugöTe°
, 
In°ÆlPlugö
)

125 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëFú°Plugö
());

126 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

127 
	}
}

129 
	$TEST
(
PlugöTe°
, 
In°ÆlMu…ùÀPlugös
)

131 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

132 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

133 
	`CHECK_EQUAL
(
thúdPlugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN3
));

134 
	`CHECK_EQUAL
(0, 
ªgi°ry
->
	`gëPlugöByName
("I doÇotÉxist"));

135 
	}
}

137 
	$TEST
(
PlugöTe°
, 
A˘i⁄sAŒRun
)

139 
gíFixtuª
->
	`runAŒTe°s
();

140 
gíFixtuª
->
	`runAŒTe°s
();

141 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

142 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
po°A˘i⁄
);

143 
	}
}

145 
	$TEST
(
PlugöTe°
, 
Sequí˚
)

147 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

148 
gíFixtuª
->
	`runAŒTe°s
();

149 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄Sequí˚
);

150 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄Sequí˚
);

151 
	`CHECK_EQUAL
(3, 
fú°Plugö
->
po°A˘i⁄Sequí˚
);

152 
	`CHECK_EQUAL
(4, 
thúdPlugö
->
po°A˘i⁄Sequí˚
);

153 
	}
}

155 
	$TEST
(
PlugöTe°
, 
DißbÀsPlugösD⁄tRun
)

157 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

158 
thúdPlugö
->
	`dißbÀ
();

159 
gíFixtuª
->
	`runAŒTe°s
();

160 
	`CHECK
(!
thúdPlugö
->
	`isE«bÀd
());

161 
thúdPlugö
->
	`íabÀ
();

162 
gíFixtuª
->
	`runAŒTe°s
();

163 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

164 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄
);

165 
	`CHECK
(
thúdPlugö
->
	`isE«bÀd
());

166 
	}
}

168 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsF‹UnknownArgumítsFaûs
)

170 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

171 c⁄° *
cmd_löe
[] = {"nonsense", "andmorenonsense"};

172 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0Ë=
Ál£
 );

173 
	}
}

175 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsC⁄töuesAndSuc˚edsWhíAPlugöC™P¨£
)

177 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

178 c⁄° *
cmd_löe
[] = {"-paccept", "andmorenonsense"};

179 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0));

180 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\SetPluginTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Te°Regi°ry.h
"

3 
	~"CµUTe°/Te°Ouçut.h
"

4 
	~"CµUTe°/Te°Plugö.h
"

6 
	$‹ig_func1
()

8 
	}
}

10 
	$°ub_func1
()

12 
	}
}

14 
	$‹ig_func2
()

16 
	}
}

18 
	$°ub_func2
()

20 
	}
}

22 (*
	gÂ1
)();

23 (*
	gÂ2
)();

25 
	$TEST_GROUP
(
SëPoöãrPlugöTe°
)

27 
SëPoöãrPlugö
* 
∂ugö_
;

28 
Te°Regi°ry
* 
myRegi°ry_
;

29 
SåögBuf„rTe°Ouçut
* 
ouçut_
;

30 
Te°Resu…
* 
ªsu…_
;

32 
	`£tup
()

34 
myRegi°ry_
 = 
√w
 
	`Te°Regi°ry
();

35 
∂ugö_
 = 
√w
 
	`SëPoöãrPlugö
("TestSetPlugin");

36 
myRegi°ry_
->
	`£tCuºítRegi°ry
(myRegistry_);

37 
myRegi°ry_
->
	`ö°ÆlPlugö
(
∂ugö_
);

38 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

39 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

42 
	`ã¨down
()

44 
myRegi°ry_
->
	`£tCuºítRegi°ry
(0);

45 
dñëe
 
myRegi°ry_
;

46 
dñëe
 
∂ugö_
;

47 
dñëe
 
ouçut_
;

48 
dñëe
 
ªsu…_
;

50 
	}
};

52 ˛as†
	cFun˘i⁄PoöãrUã°
: 
public
 
Uã°


54 
public
:

55 
	$£tup
()

57 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

58 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

59 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

61 
	$ã°Body
()

63 
	`CHECK
(
Â1
 =
°ub_func1
);

64 
	`CHECK
(
Â2
 =
°ub_func2
);

65 
	}
}

68 
	$TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTwoFun˘i⁄Poöãr
)

70 
Fun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`Fun˘i⁄PoöãrUã°
();

73 
Â1
 = 
‹ig_func1
;

74 
Â2
 = 
‹ig_func2
;

75 
myRegi°ry_
->
	`addTe°
(
t°
);

76 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

77 
	`CHECK
(
Â1
 =
‹ig_func1
);

78 
	`CHECK
(
Â2
 =
‹ig_func2
);

79 
	`LONGS_EQUAL
(0, 
ªsu…_
->
	`gëFaûuªCou¡
());

80 
dñëe
 
t°
;

81 
	}
}

83 ˛as†
	cMaxFun˘i⁄PoöãrUã°
: 
public
 
Uã°


85 
public
:

86 
numOfFpSës
;

87 
	$MaxFun˘i⁄PoöãrUã°
(
num
) :

88 
	$numOfFpSës
(
num
)

93 
	$£tup
()

95 
i
 = 0; i < 
numOfFpSës
; ++i)

96 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

97 
	}
}

100 
	$IGNORE_TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTooMuchFun˘i⁄Poöãr
)

102 
MaxFun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`MaxFun˘i⁄PoöãrUã°
(
SëPoöãrPlugö
::
MAX_SET
 + 1);

103 
myRegi°ry_
->
	`addTe°
(
t°
);

105 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

107 
	`LONGS_EQUAL
(1, 
ªsu…_
->
	`gëFaûuªCou¡
());

108 
dñëe
 
t°
;

109 
	}
}

111 
	g‹ig_doubÀ
 = 3.0;

112 * 
	g‹ig_doubÀ_±r
 = &
‹ig_doubÀ
;

113 
	g°ub_doubÀ
 = 4.0;

115 ˛as†
	cSëDoubÀPoöãrUã°
: 
public
 
Uã°


117 
public
:

118 
	$£tup
()

120 
	`UT_PTR_SET
(
‹ig_doubÀ_±r
, &
°ub_doubÀ
);

122 
	$ã°Body
()

124 
	`CHECK
(
‹ig_doubÀ_±r
 =&
°ub_doubÀ
);

125 
	}
}

128 
	$TEST
(
SëPoöãrPlugöTe°
, 
doubÀPoöãr
)

130 
SëDoubÀPoöãrUã°
 *
doubÀt°
 = 
√w
 
	`SëDoubÀPoöãrUã°
();

131 
myRegi°ry_
->
	`addTe°
(
doubÀt°
);

132 
	`CHECK
(
‹ig_doubÀ_±r
 =&
‹ig_doubÀ
);

133 
dñëe
 
doubÀt°
;

134 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\SimpleStringTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~<°dlib.h
>

34 
	$TEST_GROUP
(
Sim∂eSåög
)

36 
	}
};

38 
	$TEST
(
Sim∂eSåög
, 
deÁu…AŒoˇt‹IsNewAºayAŒoˇt‹
)

40 
	`POINTERS_EQUAL
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), 
Sim∂eSåög
::
	`gëSåögAŒoˇt‹
());

41 
	}
}

43 ˛as†
	cMyOwnSåögAŒoˇt‹
 : 
public
 
Sènd¨dMÆlocAŒoˇt‹


45 
public
:

46 
	$MyOwnSåögAŒoˇt‹
(Ë: 
	$mem‹yWasAŒoˇãd
(
Ál£
) {};

47 
vútuÆ
 ~
	$MyOwnSåögAŒoˇt‹
(Ë{
	}
};

49 
boﬁ
 
	gmem‹yWasAŒoˇãd
;

50 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

52 
mem‹yWasAŒoˇãd
 = 
åue
;

53  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

54 
	}
}

57 
	$TEST
(
Sim∂eSåög
, 
Æloˇt‹F‹Sim∂eSåögC™BeRïœ˚d
)

59 
MyOwnSåögAŒoˇt‹
 
myOwnAŒoˇt‹
;

60 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(&
myOwnAŒoˇt‹
);

61 
Sim∂eSåög
 
sim∂eSåög
;

62 
	`CHECK
(
myOwnAŒoˇt‹
.
mem‹yWasAŒoˇãd
);

63 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(
NULL
);

64 
	}
}

66 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚
)

68 
Sim∂eSåög
 
	`ex≥˘ed
("hellohello");

69 
Sim∂eSåög
 
	`a˘uÆ
("hello", 2);

71 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

72 
	}
}

74 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚OfZîo
)

76 
Sim∂eSåög
 
	`ex≥˘ed
("");

77 
Sim∂eSåög
 
	`a˘uÆ
("hello", 0);

79 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

80 
	}
}

82 
	$TEST
(
Sim∂eSåög
, 
C›y
)

84 
Sim∂eSåög
 
	`s1
("hello");

85 
Sim∂eSåög
 
	`s2
(
s1
);

87 
	`CHECK_EQUAL
(
s1
, 
s2
);

88 
	}
}

90 
	$TEST
(
Sim∂eSåög
, 
Assignmít
)

92 
Sim∂eSåög
 
	`s1
("hello");

93 
Sim∂eSåög
 
	`s2
("goodbye");

95 
s2
 = 
s1
;

97 
	`CHECK_EQUAL
(
s1
, 
s2
);

98 
	}
}

100 
	$TEST
(
Sim∂eSåög
, 
EquÆôy
)

102 
Sim∂eSåög
 
	`s1
("hello");

103 
Sim∂eSåög
 
	`s2
("hello");

105 
	`CHECK
(
s1
 =
s2
);

106 
	}
}

108 
	$TEST
(
Sim∂eSåög
, 
InEquÆôy
)

110 
Sim∂eSåög
 
	`s1
("hello");

111 
Sim∂eSåög
 
	`s2
("goodbye");

113 
	`CHECK
(
s1
 !
s2
);

114 
	}
}

116 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhoutCa£
)

118 
Sim∂eSåög
 
	`s1
("hello");

119 
Sim∂eSåög
 
	`s2
("hello");

121 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

122 
	}
}

124 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£
)

126 
Sim∂eSåög
 
	`s1
("hello");

127 
Sim∂eSåög
 
	`s2
("HELLO");

129 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

130 
	}
}

132 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£NŸEquÆ
)

134 
Sim∂eSåög
 
	`s1
("hello");

135 
Sim∂eSåög
 
	`s2
("WORLD");

137 
	`CHECK
(!
s1
.
	`equÆsNoCa£
(
s2
));

138 
	}
}

141 
	$TEST
(
Sim∂eSåög
, 
asCh¨Såög
)

143 
Sim∂eSåög
 
	`s1
("hello");

145 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Sim∂eSåög
, 
Size
)

150 
Sim∂eSåög
 
	`s1
("hello!");

152 
	`LONGS_EQUAL
(6, 
s1
.
	`size
());

153 
	}
}

155 
	$TEST
(
Sim∂eSåög
, 
toLowî
)

157 
Sim∂eSåög
 
	`s1
("AbCdEfG");

158 
Sim∂eSåög
 
	`s2
(
s1
.
	`toLowî
());

159 
	`STRCMP_EQUAL
("abcdefg", 
s2
.
	`asCh¨Såög
());

160 
	`STRCMP_EQUAL
("AbCdEfG", 
s1
.
	`asCh¨Såög
());

161 
	}
}

163 
	$TEST
(
Sim∂eSåög
, 
Addôi⁄
)

165 
Sim∂eSåög
 
	`s1
("hello!");

166 
Sim∂eSåög
 
	`s2
("goodbye!");

167 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

168 
Sim∂eSåög
 
s4
;

169 
s4
 = 
s1
 + 
s2
;

171 
	`CHECK_EQUAL
(
s3
, 
s4
);

172 
	}
}

174 
	$TEST
(
Sim∂eSåög
, 
C⁄ˇã«ti⁄
)

176 
Sim∂eSåög
 
	`s1
("hello!");

177 
Sim∂eSåög
 
	`s2
("goodbye!");

178 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

179 
Sim∂eSåög
 
s4
;

180 
s4
 +
s1
;

181 
s4
 +
s2
;

183 
	`CHECK_EQUAL
(
s3
, 
s4
);

185 
Sim∂eSåög
 
	`s5
("hello!goodbye!hello!goodbye!");

186 
s4
 += s4;

188 
	`CHECK_EQUAL
(
s5
, 
s4
);

189 
	}
}

191 
	$TEST
(
Sim∂eSåög
, 
C⁄èös
)

193 
Sim∂eSåög
 
	`s
("hello!");

194 
Sim∂eSåög
 
	`em±y
("");

195 
Sim∂eSåög
 
	`begönög
("hello");

196 
Sim∂eSåög
 
	`íd
("lo!");

197 
Sim∂eSåög
 
	`mid
("l");

198 
Sim∂eSåög
 
	`nŸP¨tOfSåög
("xxxx");

200 
	`CHECK
(
s
.
	`c⁄èös
(
em±y
));

201 
	`CHECK
(
s
.
	`c⁄èös
(
begönög
));

202 
	`CHECK
(
s
.
	`c⁄èös
(
íd
));

203 
	`CHECK
(
s
.
	`c⁄èös
(
mid
));

204 
	`CHECK
(!
s
.
	`c⁄èös
(
nŸP¨tOfSåög
));

206 
	`CHECK
(
em±y
.
	`c⁄èös
(empty));

207 
	`CHECK
(!
em±y
.
	`c⁄èös
(
s
));

208 
	}
}

210 
	$TEST
(
Sim∂eSåög
, 
°¨tsWôh
)

212 
Sim∂eSåög
 
	`hi
("Hi you!");

213 
Sim∂eSåög
 
	`∑π
("Hi");

214 
Sim∂eSåög
 
	`diff
("Hrrm Hi you! ffdsfd");

215 
	`CHECK
(
hi
.
	`°¨tsWôh
(
∑π
));

216 
	`CHECK
(!
∑π
.
	`°¨tsWôh
(
hi
));

217 
	`CHECK
(!
diff
.
	`°¨tsWôh
(
hi
));

218 
	}
}

220 
	$TEST
(
Sim∂eSåög
, 
•lô
)

222 
Sim∂eSåög
 
	`hi
("hello\nworld\nhow\ndo\nyou\ndo\n\n");

224 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

225 
hi
.
	`•lô
("\n", 
cﬁÀ˘i⁄
);

227 
	`LONGS_EQUAL
(7, 
cﬁÀ˘i⁄
.
	`size
());

228 
	`STRCMP_EQUAL
("hñlo\n", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

229 
	`STRCMP_EQUAL
("w‹ld\n", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

230 
	`STRCMP_EQUAL
("how\n", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[3].
	`asCh¨Såög
());

232 
	`STRCMP_EQUAL
("you\n", 
cﬁÀ˘i⁄
[4].
	`asCh¨Såög
());

233 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[5].
	`asCh¨Såög
());

234 
	`STRCMP_EQUAL
("\n", 
cﬁÀ˘i⁄
[6].
	`asCh¨Såög
());

235 
	}
}

237 
	$TEST
(
Sim∂eSåög
, 
•lôNoTokíOnTheEnd
)

239 
Sim∂eSåög
 
	`°rög
("Bah Yah oops");

240 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

242 
°rög
.
	`•lô
(" ", 
cﬁÀ˘i⁄
);

243 
	`LONGS_EQUAL
(3, 
cﬁÀ˘i⁄
.
	`size
());

244 
	`STRCMP_EQUAL
("Bah ", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

245 
	`STRCMP_EQUAL
("Yah ", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

246 
	`STRCMP_EQUAL
("o›s", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

247 
	}
}

249 
	$TEST
(
Sim∂eSåög
, 
cou¡
)

251 
Sim∂eSåög
 
	`°r
("ha ha ha ha");

252 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

253 
	}
}

255 
	$TEST
(
Sim∂eSåög
, 
cou¡Togëhî
)

257 
Sim∂eSåög
 
	`°r
("hahahaha");

258 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

259 
	}
}

261 
	$TEST
(
Sim∂eSåög
, 
ídsWôh
)

263 
Sim∂eSåög
 
	`°r
("Hello World");

264 
	`CHECK
(
°r
.
	`ídsWôh
("World"));

265 
	`CHECK
(!
°r
.
	`ídsWôh
("Worl"));

266 
	`CHECK
(!
°r
.
	`ídsWôh
("Hello"));

267 
Sim∂eSåög
 
	`°r2
("ah");

268 
	`CHECK
(
°r2
.
	`ídsWôh
("ah"));

269 
	`CHECK
(!
°r2
.
	`ídsWôh
("baah"));

270 
Sim∂eSåög
 
	`°r3
("");

271 
	`CHECK
(!
°r3
.
	`ídsWôh
("baah"));

273 
Sim∂eSåög
 
	`°r4
("ha ha ha ha");

274 
	`CHECK
(
°r4
.
	`ídsWôh
("ha"));

275 
	}
}

277 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚Ch¨WôhCh¨
)

279 
Sim∂eSåög
 
	`°r
("abcabcabca");

280 
°r
.
	`ª∂a˚
('a', 'b');

281 
	`STRCMP_EQUAL
("bbcbbcbbcb", 
°r
.
	`asCh¨Såög
());

282 
	}
}

284 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚SåögWôhSåög
)

286 
Sim∂eSåög
 
	`°r
("boo baa boo baa boo");

287 
°r
.
	`ª∂a˚
("boo", "boohoo");

288 
	`STRCMP_EQUAL
("boohoÿbØ boohoÿbØ boohoo", 
°r
.
	`asCh¨Såög
());

289 
	}
}

291 
	$TEST
(
Sim∂eSåög
, 
subSåögFromEm±ySåög
)

293 
Sim∂eSåög
 
	`°r
("");

294 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

295 
	}
}

297 
	$TEST
(
Sim∂eSåög
, 
subSåögFromSmÆlSåög
)

299 
Sim∂eSåög
 
	`°r
("H");

300 
	`STRCMP_EQUAL
("H", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos0
)

305 
Sim∂eSåög
 
	`°r
("Hello World");

306 
	`STRCMP_EQUAL
("Hñlo", 
°r
.
	`subSåög
(0, 5).
	`asCh¨Såög
());

307 
	}
}

309 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos1
)

311 
Sim∂eSåög
 
	`°r
("Hello World");

312 
	`STRCMP_EQUAL
("ñlÿ", 
°r
.
	`subSåög
(1, 5).
	`asCh¨Såög
());

313 
	}
}

315 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos5WôhAmou¡L¨gîTh™Såög
)

317 
Sim∂eSåög
 
	`°r
("Hello World");

318 
	`STRCMP_EQUAL
("W‹ld", 
°r
.
	`subSåög
(6, 10).
	`asCh¨Såög
());

319 
	}
}

321 
	$TEST
(
Sim∂eSåög
, 
subSåögBegöPosOutOfBounds
)

323 
Sim∂eSåög
 
	`°r
("Hello World");

324 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(13, 5).
	`asCh¨Såög
());

325 
	}
}

327 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rN‹mÆ
)

329 
Sim∂eSåög
 
	`°r
("Hello World");

330 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

331 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

332 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

333 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

334 
	`‰ì
(
buf„r
);

335 
	}
}

337 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhEm±yBuf„r
)

339 
Sim∂eSåög
 
	`°r
("Hello World");

340 * 
buf„r

NULL
;

341 
°r
.
	`c›yToBuf„r
(
buf„r
, 0);

342 
	`POINTERS_EQUAL
(
NULL
, 
buf„r
);

343 
	}
}

345 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhBiggîBuf„rTh™Nìded
)

347 
Sim∂eSåög
 
	`°r
("Hello");

348 
buf„rSize
 = 20;

349 * 
buf„r
(*Ë
	`mÆloc
(
buf„rSize
);

350 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

351 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

352 
	`‰ì
(
buf„r
);

353 
	}
}

355 
	$TEST
(
Sim∂eSåög
, 
C⁄èösNuŒ
)

357 
Sim∂eSåög
 
	`s
(0);

358 
	`CHECK
(!
s
.
	`c⁄èös
("something"));

359 
	}
}

361 
	$TEST
(
Sim∂eSåög
, 
NULLRï‹tsNuŒSåög
)

363 
	`STRCMP_EQUAL
("“uŒ)", 
	`SåögFromOrNuŒ
((*Ë
NULL
).
	`asCh¨Såög
());

364 
	}
}

366 
	$TEST
(
Sim∂eSåög
, 
Ch¨a˘îs
)

368 
Sim∂eSåög
 
	`s
(
	`SåögFrom
('a'));

369 
Sim∂eSåög
 
	`s2
(
	`SåögFrom
('a'));

370 
	`CHECK
(
s
 =
s2
);

371 
	}
}

373 
	$TEST
(
Sim∂eSåög
, 
DoubÀs
)

375 
Sim∂eSåög
 
	`s
(
	`SåögFrom
(1.2));

376 
	`STRCMP_EQUAL
("1.200000", 
s
.
	`asCh¨Såög
());

377 
s
 = 
	`SåögFrom
(1.2, 2);

378 
	`STRCMP_EQUAL
("1.20", 
s
.
	`asCh¨Såög
());

379 
	}
}

381 
	$TEST
(
Sim∂eSåög
, 
HexSåögs
)

383 
Sim∂eSåög
 
h1
 = 
	`HexSåögFrom
(0xffff);

384 
	`STRCMP_EQUAL
("ffff", 
h1
.
	`asCh¨Såög
());

385 
	}
}

387 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©
)

389 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s %s! %d", "Hello", "World", 2009);

390 
	`STRCMP_EQUAL
("HñlÿW‹ld! 2009", 
h1
.
	`asCh¨Såög
());

391 
	}
}

393 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©L¨ge
)

395 c⁄° * 
s
 = "ThisIsAPrettyLargeStringAndIfWeAddThisManyTimesToABufferItWillbeFull";

396 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s%s%s%s%s%s%s%s%s%s", 
s
, s, s, s, s, s, s, s, s, s);

397 
	`LONGS_EQUAL
(10, 
h1
.
	`cou¡
(
s
));

398 
	}
}

400 
	$WøµedUpVSNPrötf
(* 
buf
, 
n
, c⁄° * 
f‹m©
, ...)

402 
va_li°
 
¨gumíts
;

403 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

405 
ªsu…
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf
, 
n
, 
f‹m©
, 
¨gumíts
);

406 
	`va_íd
(
¨gumíts
);

407  
ªsu…
;

408 
	}
}

410 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_fôs
)

412 
buf
[10];

414 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345");

415 
	`STRCMP_EQUAL
("12345", 
buf
);

416 
	`LONGS_EQUAL
(5, 
cou¡
);

417 
	}
}

419 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_d€sNŸFô
)

421 
buf
[10];

423 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345678901");

424 
	`STRCMP_EQUAL
("123456789", 
buf
);

425 
	`LONGS_EQUAL
(11, 
cou¡
);

426 
	}
}

428 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög1L¨gî
)

430 
Sim∂eSåög
 
	`°r1
("1");

431 
Sim∂eSåög
 
	`°r2
("222");

433 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, '4');

434 
	`STRCMP_EQUAL
("441", 
°r1
.
	`asCh¨Såög
());

435 
	`STRCMP_EQUAL
("222", 
°r2
.
	`asCh¨Såög
());

436 
	}
}

438 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög2L¨gî
)

440 
Sim∂eSåög
 
	`°r1
(" ");

441 
Sim∂eSåög
 
	`°r2
("");

443 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

444 
	`STRCMP_EQUAL
(" ", 
°r1
.
	`asCh¨Såög
());

445 
	`STRCMP_EQUAL
(" ", 
°r2
.
	`asCh¨Såög
());

446 
	}
}

448 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthWôhSameLígthSåögs
)

450 
Sim∂eSåög
 
	`°r1
("123");

451 
Sim∂eSåög
 
	`°r2
("123");

453 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

454 
	`STRCMP_EQUAL
("123", 
°r1
.
	`asCh¨Såög
());

455 
	`STRCMP_EQUAL
("123", 
°r2
.
	`asCh¨Såög
());

456 
	}
}

458 
	$TEST
(
Sim∂eSåög
, 
NuŒP¨amëîs2
)

460 
Sim∂eSåög
* 
¨r
 = 
√w
 SimpleString[100];

461 
dñëe
[] 
¨r
;

462 
	}
}

464 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄Mu…ùÀAŒoˇãNoLóksMem‹y
)

466 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

467 
cﬁ
.
	`Æloˇã
(5);

468 
cﬁ
.
	`Æloˇã
(5);

470 
	}
}

472 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄RódOutOfBoundsRëu∫sEm±ySåög
)

474 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

475 
cﬁ
.
	`Æloˇã
(3);

476 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

477 
	}
}

479 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄WrôögToEm±ySåög
)

481 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

482 
cﬁ
.
	`Æloˇã
(3);

483 
cﬁ
[3] = 
	`Sim∂eSåög
("HAH");

484 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

485 
	}
}

487 #i‡
CPPUTEST_USE_STD_CPP_LIB


489 
	$TEST
(
Sim∂eSåög
, 
‰omStdSåög
)

491 
°d
::
°rög
 
	`s
("hello");

492 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

494 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

495 
	}
}

497 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt32_t
)

499 
uöt32_t
 
i
 = 0xffffffff;

500 
	`CHECK_EQUAL
(
i
, i);

501 
	}
}

503 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt16_t
)

505 
uöt16_t
 
i
 = 0xffff;

506 
	`CHECK_EQUAL
(
i
, i);

507 
	}
}

509 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt8_t
)

511 
uöt8_t
 
i
 = 0xff;

512 
	`CHECK_EQUAL
(
i
, i);

513 
	}
}

515 
	$TEST
(
Sim∂eSåög
, 
Uöt32_t
)

517 
uöt32_t
 
i
 = 0xffffffff;

519 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

520 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

521 
	}
}

523 
	$TEST
(
Sim∂eSåög
, 
Uöt16_t
)

525 
uöt16_t
 
i
 = 0xffff;

527 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

528 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

529 
	}
}

531 
	$TEST
(
Sim∂eSåög
, 
Uöt8_t
)

533 
uöt8_t
 
i
 = 0xff;

535 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

536 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

537 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestFailureTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

31 
	g«me•a˚


33 c⁄° 
	gÁûLöeNumbî
 = 2;

34 c⁄° * 
	gÁûFûeName
 = "fail.cpp";

37 
	gzîo
 = 0.0;

38 c⁄° 
	g«n
 = 
zîo
 / zero;

40 
	$TEST_GROUP
(
Te°Faûuª
)

42 
Uã°
* 
ã°
;

43 
SåögBuf„rTe°Ouçut
* 
¥öãr
;

45 
	`£tup
()

47 
ã°
 = 
√w
 
	`NuŒTe°
(
ÁûFûeName
, 
ÁûLöeNumbî
-1);

48 
¥öãr
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

50 
	`ã¨down
()

52 
dñëe
 
ã°
;

53 
dñëe
 
¥öãr
;

56 
	}
};

57 
	#FAILURE_EQUAL
(
a
, 
b
Ë
	`STRCMP_EQUAL_LOCATION
◊, b.
	`gëMesßge
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
)

	)

59 
	$TEST
(
Te°Faûuª
, 
Cª©eFaûuª
)

61 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

62 
Te°Faûuª
 
	`f2
(
ã°
, "the failure message");

63 
Te°Faûuª
 
	`f3
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
);

64 
	}
}

66 
	$TEST
(
Te°Faûuª
, 
GëTe°FûeAndLöeFromFaûuª
)

68 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

69 
	`STRCMP_EQUAL
(
ÁûFûeName
, 
f1
.
	`gëTe°FûeName
().
	`asCh¨Såög
());

70 
	`LONGS_EQUAL
(1, 
f1
.
	`gëTe°LöeNumbî
());

71 
	}
}

73 
	$TEST
(
Te°Faûuª
, 
Cª©ePassögEquÆsFaûuª
)

75 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

76 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <a˘uÆ>", 
f
);

77 
	}
}

79 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsA˘uÆ
)

81 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ex≥˘ed", 
NULL
);

82 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <“uŒ)>", 
f
);

83 
	}
}

85 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsEx≥˘ed
)

87 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
NULL
, "actual");

88 
	`FAILURE_EQUAL
("ex≥˘ed <“uŒ)>\n\tbuàwa† <a˘uÆ>", 
f
);

89 
	}
}

91 
	$TEST
(
Te°Faûuª
, 
CheckEquÆFaûuª
)

93 
CheckEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

94 
	`FAILURE_EQUAL
("expected <expected>\n"

97 "\à ^", 
f
);

98 
	}
}

100 
	$TEST
(
Te°Faûuª
, 
CheckFaûuª
)

102 
CheckFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

103 
	`FAILURE_EQUAL
("CHECK(chkËÁûed", 
f
);

104 
	}
}

106 
	$TEST
(
Te°Faûuª
, 
FaûFaûuª
)

108 
FaûFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

109 
	`FAILURE_EQUAL
("chk", 
f
);

110 
	}
}

112 
	$TEST
(
Te°Faûuª
, 
L⁄gsEquÆFaûuª
)

114 
L⁄gsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1, 2);

115 
	`FAILURE_EQUAL
("ex≥˘ed <1 0x1>\n\tbuàwa† <2 0x2>", 
f
);

116 
	}
}

118 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuª
)

120 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "abd");

121 
	`FAILURE_EQUAL
("expected <abc>\n"

124 "\à ^", 
f
);

125 
	}
}

127 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheEnd
)

129 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "ab");

130 
	`FAILURE_EQUAL
("expected <abc>\n"

133 "\à ^", 
f
);

134 
	}
}

136 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªNewV¨ü¡AtTheEnd
)

138 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "EndOfALongerString", "EndOfALongerStrinG");

139 
	`FAILURE_EQUAL
("expected <EndOfALongerString>\n"

142 "\à ^", 
f
);

143 
	}
}

145 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªWôhNewLöesAndTabs
)

147 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
,

151 
	`FAILURE_EQUAL
("expected <StringWith\t\nDifferentString>\n"

154 "\à \t\n^", 
f
);

155 
	}
}

157 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªInTheMiddÀ
)

159 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aa", "ab");

160 
	`FAILURE_EQUAL
("expected <aa>\n"

163 "\à ^", 
f
);

164 
	}
}

167 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheBegönög
)

169 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aaa", "bbb");

170 
	`FAILURE_EQUAL
("expected <aaa>\n"

173 "\à ^", 
f
);

174 
	}
}

176 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª
)

178 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ABC", "abd");

179 
	`FAILURE_EQUAL
("expected <ABC>\n"

182 "\à ^", 
f
);

183 
	}
}

185 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª2
)

187 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ac", "AB");

188 
	`FAILURE_EQUAL
("expected <ac>\n"

191 "\à ^", 
f
);

192 
	}
}

194 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆN‹mÆ
)

196 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 3.0);

197 
	`FAILURE_EQUAL
("expected <1.000000>\n"

198 "\tbuàwa† <2.000000>Åhªshﬁd u£d wa†<3.000000>", 
f
);

199 
	}
}

201 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆEx≥˘edIsNaN
)

203 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
«n
, 2.0, 3.0);

204 
	`FAILURE_EQUAL
("expected <Nan - NotáÇumber>\n"

206 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

207 
	}
}

209 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆA˘uÆIsNaN
)

211 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 
«n
, 3.0);

212 
	`FAILURE_EQUAL
("expected <1.000000>\n"

214 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

215 
	}
}

217 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆThªshﬁdIsNaN
)

219 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 
«n
);

220 
	`FAILURE_EQUAL
("expected <1.000000>\n"

222 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

223 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestHarness_cTest.cpp

30 
	#_WCHART


	)

31 
	~"CµUTe°/Te°H¨√ss_c.h
"

32 
	~"°dlib.h
"

35 
	~"CµUTe°/Te°H¨√ss.h
"

36 
	~"CµUTe°/Te°Regi°ry.h
"

37 
	~"CµUTe°/Te°Ouçut.h
"

38 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

39 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

41 
	$TEST_GROUP
(
Te°H¨√ss_c
)

43 
Te°Te°ögFixtuª
* 
fixtuª
;

44 
	`TEST_SETUP
()

46 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

48 
	`TEST_TEARDOWN
()

50 
dñëe
 
fixtuª
;

52 
	}
};

54 
	$_ÁûI¡Mëhod
()

56 
	`CHECK_EQUAL_C_INT
(1, 2);

57 
	}
}

59 
	$TEST
(
Te°H¨√ss_c
, 
checkI¡
)

61 
	`CHECK_EQUAL_C_INT
(2, 2);

62 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûI¡Mëhod
);

63 
fixtuª
->
	`runAŒTe°s
();

64 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1>\n but was <2>");

65 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

66 
	}
}

68 
	$_ÁûRólMëhod
()

70 
	`CHECK_EQUAL_C_REAL
(1.0, 2.0, 0.5);

71 
	}
}

73 
	$TEST
(
Te°H¨√ss_c
, 
checkRól
)

75 
	`CHECK_EQUAL_C_REAL
(1.0, 1.1, 0.5);

76 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûRólMëhod
);

77 
fixtuª
->
	`runAŒTe°s
();

78 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1.000000>\n but was <2.000000>");

79 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

80 
	}
}

82 
	$_ÁûCh¨Mëhod
()

84 
	`CHECK_EQUAL_C_CHAR
('a', 'c');

85 
	}
}

87 
	$TEST
(
Te°H¨√ss_c
, 
checkCh¨
)

89 
	`CHECK_EQUAL_C_CHAR
('a', 'a');

90 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûCh¨Mëhod
);

91 
fixtuª
->
	`runAŒTe°s
();

92 
fixtuª
->
	`as£πPrötC⁄èös
("expected <a>\n but was <c>");

93 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

94 
	}
}

96 
	$_ÁûSåögMëhod
()

98 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello World");

99 
	}
}

101 
	$TEST
(
Te°H¨√ss_c
, 
checkSåög
)

103 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello");

104 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûSåögMëhod
);

105 
fixtuª
->
	`runAŒTe°s
();

107 
SåögEquÆFaûuª
 
	`Áûuª
(
this
, "file", 1, "Hello", "Hello World");

108 
fixtuª
->
	`as£πPrötC⁄èös
(
Áûuª
.
	`gëMesßge
());

109 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

110 
	}
}

112 
	$_ÁûTextMëhod
()

114 
	`FAIL_TEXT_C
("Booo");

115 
	}
}

117 
	$TEST
(
Te°H¨√ss_c
, 
checkFaûText
)

119 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûTextMëhod
);

120 
fixtuª
->
	`runAŒTe°s
();

121 
fixtuª
->
	`as£πPrötC⁄èös
("Booo");

122 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

123 
	}
}

125 
	$_ÁûMëhod
()

127 
	`FAIL_C
();

128 
	}
}

130 
	$TEST
(
Te°H¨√ss_c
, 
checkFaû
)

132 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

133 
fixtuª
->
	`runAŒTe°s
();

134 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

135 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

136 
	}
}

138 
	$_CheckMëhod
()

140 
	`CHECK_C
(
Ál£
);

141 
	}
}

143 
	$TEST
(
Te°H¨√ss_c
, 
checkCheck
)

145 
	`CHECK_C
(
åue
);

146 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_CheckMëhod
);

147 
fixtuª
->
	`runAŒTe°s
();

148 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

149 
	}
}

151 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_mÆloc_out_of_mem‹y
)

153 
	`˝puã°_mÆloc_£t_out_of_mem‹y
();

154 
	`CHECK
(0 =
	`˝puã°_mÆloc
(100));

156 
	`˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

157 * 
mem
 = 
	`˝puã°_mÆloc
(100);

158 
	`CHECK
(0 !
mem
);

159 
	`˝puã°_‰ì
(
mem
);

160 
	}
}

162 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ˇŒoc
)

164 * 
mem
 = 
	`˝puã°_ˇŒoc
(10, 10);

165 
	`CHECK
(0 !
mem
);

166 
	`˝puã°_‰ì
(
mem
);

167 
	}
}

169 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ªÆloc_œrgî
)

171 c⁄° * 
numbî_°rög
 = "123456789";

173 * 
mem1
 = (*Ë
	`˝puã°_mÆloc
(10);

175 
	`Pœtf‹mS≥cificSåCpy
(
mem1
, 
numbî_°rög
);

176 
	`CHECK
(
mem1
 != 0);

178 * 
mem2
 = (*Ë
	`˝puã°_ªÆloc
(
mem1
, 1000);

180 
	`CHECK
(
mem2
 != 0);

181 
	`STRCMP_EQUAL
(
numbî_°rög
, 
mem2
);

183 
	`˝puã°_‰ì
(
mem2
);

184 
	}
}

186 
	$TEST
(
Te°H¨√ss_c
, 
ma¸os
)

188 * 
mem1
 = 
	`mÆloc
(10);

189 * 
mem2
 = 
	`ˇŒoc
(10, 20);

190 * 
mem3
 = 
	`ªÆloc
(
mem2
, 100);

191 
	`‰ì
(
mem1
);

192 
	`‰ì
(
mem3
);

193 
	}
}

195 
	$TEST
(
Te°H¨√ss_c
, 
ˇŒocInôülizedToZîo
)

197 * 
mem
 = (*Ë
	`ˇŒoc
(20, ());

198 
i
 = 0; i < 20; i++)

199 
	`CHECK
(
mem
[
i
] == 0);

200 
	`‰ì
(
mem
);

201 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestHarness_cTestCFile.c

2 
	~"CµUTe°/Te°H¨√ss_c.h
"

4 
fun˘i⁄WôhUnu£dP¨amëî
(* 
	$PUNUSED
(
u∆essP¨am©î
))

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestInstallerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

35 
NuŒTe°
 
	gnuŒTe°
;

37 
	$TEST_GROUP
(
Te°In°ÆÀr
)

39 
Te°In°ÆÀr
* 
ã°In°ÆÀr
;

40 
Te°Regi°ry
* 
myRegi°ry
;

41 
	`£tup
()

43 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

44 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

45 
ã°In°ÆÀr
 = 
√w
 
	`Te°In°ÆÀr
(&
nuŒTe°
, "Te°In°ÆÀr", "ã°", 
__FILE__
, 
__LINE__
);

47 
	`ã¨down
()

49 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

50 
ã°In°ÆÀr
->
	`unDo
();

51 
dñëe
 
ã°In°ÆÀr
;

52 
dñëe
 
myRegi°ry
;

54 
	}
};

56 
	$TEST
(
Te°In°ÆÀr
, 
Cª©e
)

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

37  
mûlisTime
;

38 
	}
}

40 
	$TEST_GROUP
(
Te°Ouçut
)

42 
Te°Ouçut
* 
¥öãr
;

43 
SåögBuf„rTe°Ouçut
* 
mock
;

44 
Uã°
* 
t°
;

45 
Te°Faûuª
 *
f
;

46 
Te°Faûuª
 *
f2
;

47 
Te°Faûuª
 *
f3
;

48 
Te°Resu…
* 
ªsu…
;

50 
	`£tup
()

52 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

53 
¥öãr
 = 
mock
;

54 
t°
 = 
√w
 
	`Uã°
("group", "test", "file", 10);

55 
f
 = 
√w
 
	`Te°Faûuª
(
t°
, "failfile", 20, "message");

56 
f2
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 20, "message");

57 
f3
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 2, "message");

58 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
mock
);

59 
ªsu…
->
	`£tTŸÆExecuti⁄Time
(10);

60 
mûlisTime
 = 0;

61 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

63 
	`ã¨down
()

65 
dñëe
 
¥öãr
;

66 
dñëe
 
t°
;

67 
dñëe
 
f
;

68 
dñëe
 
f2
;

69 
dñëe
 
f3
;

70 
dñëe
 
ªsu…
;

71 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

73 
	}
};

75 
	$TEST
(
Te°Ouçut
, 
PrötC⁄°Ch¨Sèr
)

77 
¥öãr
->
	`¥öt
("hello");

78 
¥öãr
->
	`¥öt
("hello\n");

79 
	`STRCMP_EQUAL
("hñlohñlo\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
Te°Ouçut
, 
PrötL⁄g
)

84 
¥öãr
->
	`¥öt
(1234);

85 
	`STRCMP_EQUAL
("1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

86 
	}
}

88 
	$TEST
(
Te°Ouçut
, 
PrötDoubÀ
)

90 
¥öãr
->
	`¥ötDoubÀ
(12.34);

91 
	`STRCMP_EQUAL
("12.340", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Te°Ouçut
, 
SåómO≥øt‹s
)

96 *
¥öãr
 << "n=" << 1234;

97 
	`STRCMP_EQUAL
("n=1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

98 
	}
}

100 
	$TEST
(
Te°Ouçut
, 
PrötTe°Ended
)

102 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

103 
	`STRCMP_EQUAL
(".", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

104 
	}
}

106 
	$TEST
(
Te°Ouçut
, 
PrötTe°ALŸ
)

108 
i
 = 0; i < 60; ++i) {

109 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

111 
	`STRCMP_EQUAL
("..................................................\n..........", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

112 
	}
}

114 
	$TEST
(
Te°Ouçut
, 
SëProgªssIndiˇt‹
)

116 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

117 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

118 
ªsu…
->
	`£tProgªssIndiˇt‹
("!");

119 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

120 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

121 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

123 
	`STRCMP_EQUAL
(".!.", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

124 
	}
}

126 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Sèπed
)

128 
mock
->
	`vîbo£
();

129 
¥öãr
->
	`¥ötCuºítTe°Sèπed
(*
t°
);

130 
	`STRCMP_EQUAL
("TEST(group,Åe°)", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

131 
	}
}

133 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Ended
)

135 
mock
->
	`vîbo£
();

136 
ªsu…
->
	`cuºítTe°Sèπed
(
t°
);

137 
mûlisTime
 = 5;

138 
ªsu…
->
	`cuºítTe°Ended
(
t°
);

139 
	`STRCMP_EQUAL
("TEST(group,Åe°Ë- 5 ms\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

140 
	}
}

142 
	$TEST
(
Te°Ouçut
, 
PrötTe°Run
)

144 
¥öãr
->
	`¥ötTe°Run
(2, 3);

145 
	`STRCMP_EQUAL
("Te°Ñu¿2 o‡3\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Te°Ouçut
, 
PrötTe°RunO∆yO√
)

150 
¥öãr
->
	`¥ötTe°Run
(1, 1);

151 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

152 
	}
}

154 
	$TEST
(
Te°Ouçut
, 
PrötWôhFaûuªInSameFûe
)

156 
¥öãr
->
	`¥öt
(*
f2
);

157 
	`STRCMP_EQUAL
("\nfûe:20:Éº‹: Faûuª i¿TEST(group,Åe°)\n\tmesßge\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

158 
	}
}

160 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInDif„ª¡Fûe
)

162 
¥öãr
->
	`¥öt
(*
f
);

163 c⁄° * 
ex≥˘ed
 =

166 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

167 
	}
}

169 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInHñ≥r
)

171 
¥öãr
->
	`¥öt
(*
f3
);

172 c⁄° * 
ex≥˘ed
 =

175 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

176 
	}
}

178 
	$TEST
(
Te°Ouçut
, 
PrötTe°Sèπs
)

180 
¥öãr
->
	`¥ötTe°sSèπed
();

181 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

182 
	}
}

184 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEnded
)

186 
ªsu…
->
	`cou¡Te°
();

187 
ªsu…
->
	`cou¡Check
();

188 
ªsu…
->
	`cou¡Ign‹ed
();

189 
ªsu…
->
	`cou¡Ign‹ed
();

190 
ªsu…
->
	`cou¡Run
();

191 
ªsu…
->
	`cou¡Run
();

192 
ªsu…
->
	`cou¡Run
();

193 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

194 
	`STRCMP_EQUAL
("\nOK (1Åe°s, 3Ñ™, 1 checks, 2 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

195 
	}
}

197 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEndedWôhFaûuªs
)

199 
ªsu…
->
	`addFaûuª
(*
f
);

200 
¥öãr
->
	`Êush
();

201 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

202 
	`STRCMP_EQUAL
("\nEº‹†(1 faûuªs, 0Åe°s, 0Ñ™, 0 checks, 0 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

203 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestRegistryTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	g«me•a˚


34 
°ub
()

37 c⁄° 
	gã°LöeNumbî
 = 1;

40 ˛as†
	cMockTe°
: 
public
 
Uã°


42 
public
:

43 
MockTe°
(c⁄° * 
group
 = "Group") :

44 
Uã°
(
group
, "Name", "Fûe", 
ã°LöeNumbî
), 
	$hasRun_
(
Ál£
)

47 
	$ã°Body
()

49 
hasRun_
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	ghasRun_
;

55 ˛as†
	cMockTe°Resu…
: 
public
 
Te°Resu…


57 
public
:

59 
cou¡Te°sSèπed
;

60 
	mcou¡Te°sEnded
;

61 
	mcou¡CuºítTe°Sèπed
;

62 
	mcou¡CuºítTe°Ended
;

63 
	mcou¡CuºítGroupSèπed
;

64 
	mcou¡CuºítGroupEnded
;

66 
	$MockTe°Resu…
(
Te°Ouçut
& 
p
) :

67 
	$Te°Resu…
(
p
)

69 
	`ª£tCou¡
();

72 
vútuÆ
 ~
	$MockTe°Resu…
()

74 
	}
}

77 
	$ª£tCou¡
()

79 
cou¡Te°sSèπed
 = 0;

80 
cou¡Te°sEnded
 = 0;

81 
cou¡CuºítTe°Sèπed
 = 0;

82 
cou¡CuºítTe°Ended
 = 0;

83 
cou¡CuºítGroupSèπed
 = 0;

84 
cou¡CuºítGroupEnded
 = 0;

85 
	}
}

87 
vútuÆ
 
	$ã°sSèπed
()

89 
cou¡Te°sSèπed
++;

90 
	}
}

91 
vútuÆ
 
	$ã°sEnded
()

93 
cou¡Te°sEnded
++;

94 
	}
}

95 
vútuÆ
 
	$cuºítTe°Sèπed
(
Uã°
* )

97 
cou¡CuºítTe°Sèπed
++;

98 
	}
}

99 
vútuÆ
 
	$cuºítTe°Ended
(
Uã°
* )

101 
cou¡CuºítTe°Ended
++;

102 
	}
}

103 
vútuÆ
 
	$cuºítGroupSèπed
(
Uã°
* )

105 
cou¡CuºítGroupSèπed
++;

106 
	}
}

107 
vútuÆ
 
	$cuºítGroupEnded
(
Uã°
* )

109 
cou¡CuºítGroupEnded
++;

110 
	}
}

114 
	$TEST_GROUP
(
Te°Regi°ry
)

116 
Te°Regi°ry
* 
myRegi°ry
;

117 
SåögBuf„rTe°Ouçut
* 
ouçut
;

118 
MockTe°
* 
ã°1
;

119 
MockTe°
* 
ã°2
;

120 
MockTe°
* 
ã°3
;

121 
Te°Resu…
 *
ªsu…
;

122 
MockTe°Resu…
 *
mockResu…
;

123 
	`£tup
()

125 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

126 
mockResu…
 = 
√w
 
	`MockTe°Resu…
(*
ouçut
);

127 
ªsu…
 = 
mockResu…
;

128 
ã°1
 = 
√w
 
	`MockTe°
();

129 
ã°2
 = 
√w
 
	`MockTe°
();

130 
ã°3
 = 
√w
 
	`MockTe°
("group2");

131 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

132 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

135 
	`ã¨down
()

137 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

138 
dñëe
 
myRegi°ry
;

139 
dñëe
 
ã°1
;

140 
dñëe
 
ã°2
;

141 
dñëe
 
ã°3
;

142 
dñëe
 
ªsu…
;

143 
dñëe
 
ouçut
;

145 
	}
};

147 
	$TEST
(
Te°Regi°ry
, 
ªgi°ryMyRegi°ryAndRe£t
)

149 
	`CHECK
(
myRegi°ry
->
	`gëCuºítRegi°ry
() == myRegistry);

150 
	}
}

152 
	$TEST
(
Te°Regi°ry
, 
em±yRegi°ryIsEm±y
)

154 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

155 
	}
}

157 
	$TEST
(
Te°Regi°ry
, 
addO√Te°IsNŸEm±y
)

159 
myRegi°ry
->
	`addTe°
(
ã°1
);

160 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

161 
	}
}

163 
	$TEST
(
Te°Regi°ry
, 
addO√TwoTe°s
)

165 
myRegi°ry
->
	`addTe°
(
ã°1
);

166 
myRegi°ry
->
	`addTe°
(
ã°2
);

167 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

168 
	}
}

170 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°s
)

172 
myRegi°ry
->
	`addTe°
(
ã°1
);

173 
myRegi°ry
->
	`addTe°
(
ã°2
);

174 
	`CHECK
(!
ã°1
->
hasRun_
);

175 
	`CHECK
(!
ã°2
->
hasRun_
);

176 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

177 
	`CHECK
(
ã°1
->
hasRun_
);

178 
	`CHECK
(
ã°2
->
hasRun_
);

179 
	}
}

181 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°sCheckResu…Fun˘i⁄sCÆÀd
)

183 
myRegi°ry
->
	`addTe°
(
ã°1
);

184 
myRegi°ry
->
	`addTe°
(
ã°2
);

185 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

186 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sSèπed
);

187 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sEnded
);

188 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupSèπed
);

189 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupEnded
);

190 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

191 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Ended
);

192 
	}
}

194 
	$TEST
(
Te°Regi°ry
, 
runThªeTe°ßndTwoGroupsCheckResu…Fun˘i⁄sCÆÀd
)

196 
myRegi°ry
->
	`addTe°
(
ã°1
);

197 
myRegi°ry
->
	`addTe°
(
ã°2
);

198 
myRegi°ry
->
	`addTe°
(
ã°3
);

199 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

200 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupSèπed
);

201 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupEnded
);

202 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

203 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Ended
);

204 
	}
}

206 
	$TEST
(
Te°Regi°ry
, 
unDoTe°
)

208 
myRegi°ry
->
	`addTe°
(
ã°1
);

209 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

210 
myRegi°ry
->
	`unDoLa°AddTe°
();

211 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

212 
	}
}

214 
	$TEST
(
Te°Regi°ry
, 
unDoButNoTe°
)

216 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

217 
myRegi°ry
->
	`unDoLa°AddTe°
();

218 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

219 
	}
}

221 
	$TEST
(
Te°Regi°ry
, 
ªÆlyUndoLa°Te°
)

223 
myRegi°ry
->
	`addTe°
(
ã°1
);

224 
myRegi°ry
->
	`addTe°
(
ã°2
);

225 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

226 
myRegi°ry
->
	`unDoLa°AddTe°
();

227 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

228 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

229 
	`CHECK
(
ã°1
->
hasRun_
);

230 
	`CHECK
(!
ã°2
->
hasRun_
);

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestResultTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

35 
	}
}

37 
	$TEST_GROUP
(
Te°Resu…
)

39 
Te°Ouçut
* 
¥öãr
;

40 
SåögBuf„rTe°Ouçut
* 
mock
;

42 
Te°Resu…
* 
ªs
;

44 
	`£tup
()

46 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
¥öãr
 = 
mock
;

48 
ªs
 = 
√w
 
	`Te°Resu…
(*
¥öãr
);

49 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

51 
	`ã¨down
()

53 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

54 
dñëe
 
¥öãr
;

55 
dñëe
 
ªs
;

57 
	}
};

59 
	$TEST
(
Te°Resu…
, 
Te°EndedWûlPrötResu…sAndExecuti⁄Time
)

61 
ªs
->
	`ã°sEnded
();

62 
	`CHECK
(
mock
->
	`gëOuçut
().
	`c⁄èös
("10 ms"));

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\UtestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
boﬁ
 
	ga·îCheck
;

35 
	$TEST_GROUP
(
Uã°
)

37 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
	`£tup
()

40 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

41 
a·îCheck
 = 
Ál£
;

43 
	`ã¨down
()

45 
dñëe
 
fixtuª
;

48 
	`ã°FaûuªWôh
((*
mëhod
)())

50 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

51 
fixtuª
->
	`runAŒTe°s
();

52 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

53 
	`CHECK
(!
a·îCheck
);

56 
	`ã°FaûuªWôhMëhodShouldC⁄èö
((*
mëhod
)(), c⁄° * 
ex≥˘ed
)

58 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

59 
fixtuª
->
	`runAŒTe°s
();

60 
fixtuª
->
	`as£πPrötC⁄èös
(
ex≥˘ed
);

61 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

62 
	`CHECK
(!
a·îCheck
);

65 
	}
};

67 
	$_∑ssMëhod
()

69 
	`CHECK
(
åue
);

70 
a·îCheck
 = 
åue
;

71 
	}
}

73 
	$_∑ssPröt
()

75 
	`UT_PRINT
("Hello World!");

76 
	}
}

78 
	$_∑ssPrötF
()

80 
	`UT_PRINT
(
	`SåögFromF‹m©
("Hello %s %d", "World!", 2009));

81 
	}
}

83 
	$_ÁûMëhod
()

85 
	`FAIL
("ThisÅest fails");

86 
a·îCheck
 = 
åue
;

87 
	}
}

89 
	$_ÁûMëhodFAIL_TEST
()

91 
	`FAIL_TEST
("ThisÅest fails");

92 
a·îCheck
 = 
åue
;

93 
	}
}

95 
	$_ÁûMëhodCHECK
()

97 
	`CHECK
(
Ál£
);

98 
a·îCheck
 = 
åue
;

99 
	}
}

101 
	$_ÁûMëhodCHECK_EQUAL
()

103 
	`CHECK_EQUAL
(1, 2);

104 
a·îCheck
 = 
åue
;

105 
	}
}

107 
	$_ÁûMëhodSTRCMP_CONTAINS
()

109 
	`STRCMP_CONTAINS
("hello", "world");

110 
a·îCheck
 = 
åue
;

111 
	}
}

113 
	$_ÁûMëhodSTRCMP_NOCASE_CONTAINS
()

115 
	`STRCMP_NOCASE_CONTAINS
("hello", "WORLD");

116 
a·îCheck
 = 
åue
;

117 
	}
}

119 
	$_ÁûMëhodLONGS_EQUAL
()

121 
	`LONGS_EQUAL
(1, 0xff);

122 
a·îCheck
 = 
åue
;

123 
	}
}

124 
	$_ÁûMëhodBYTES_EQUAL
()

126 
	`BYTES_EQUAL
('a', 'b');

127 
a·îCheck
 = 
åue
;

128 
	}
}

130 
	$_ÁûMëhodPOINTERS_EQUAL
()

132 
	`POINTERS_EQUAL
((*)0xa5a5, (*)0xf0f0);

133 
a·îCheck
 = 
åue
;

134 
	}
}

136 
	$_ÁûMëhodDOUBLES_EQUAL
()

138 
	`DOUBLES_EQUAL
(0.12, 44.1, 0.3);

139 
a·îCheck
 = 
åue
;

140 
	}
}

142 
	$TEST
(
Uã°
, 
FaûuªPrötsSomëhög
)

144 
	`ã°FaûuªWôh
(
_ÁûMëhod
);

145 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

146 
fixtuª
->
	`as£πPrötC⁄èös
("ThisÅest fails");

147 
	}
}

149 
	$TEST
(
Uã°
, 
FaûuªWôhFaûTe°
)

151 
	`ã°FaûuªWôh
(
_ÁûMëhodFAIL_TEST
);

152 
	}
}

154 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹L⁄gI¡s
)

156 
	`ã°FaûuªWôh
(
_ÁûMëhodLONGS_EQUAL
);

157 
fixtuª
->
	`as£πPrötC⁄èös
("expected < 1 0x01>");

158 
fixtuª
->
	`as£πPrötC⁄èös
("but was <255 0xff>");

159 
	}
}

161 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹Poöãrs
)

163 
	`ã°FaûuªWôh
(
_ÁûMëhodPOINTERS_EQUAL
);

164 
fixtuª
->
	`as£πPrötC⁄èös
("expected <0xa5a5>");

165 
fixtuª
->
	`as£πPrötC⁄èös
("but was <0xf0f0>");

166 
	}
}

168 
	$TEST
(
Uã°
, 
FaûuªWôhDOUBLES_EQUAL
)

170 
	`ã°FaûuªWôh
(
_ÁûMëhodDOUBLES_EQUAL
);

171 
	}
}

173 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

175 
	$TEST
(
Uã°
, 
com∑ªDoubÀs
)

177 
zîo
 = 0.0;

178 
«n
 = 
zîo
 / zero;

179 
	`CHECK
(
	`doubÀs_equÆ
(1.0, 1.001, 0.01));

180 
	`CHECK
(!
	`doubÀs_equÆ
(
«n
, 1.001, 0.01));

181 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 
«n
, 0.01));

182 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 1.001, 
«n
));

183 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 1.1, 0.05));

184 
	}
}

187 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK
)

189 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK
);

190 
	}
}

192 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK_EQUAL
)

194 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK_EQUAL
);

195 
	}
}

197 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_CONTAINS
)

199 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_CONTAINS
);

200 
	}
}

202 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_NOCASE_CONTAINS
)

204 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_NOCASE_CONTAINS
);

205 
	}
}

207 
	$TEST
(
Uã°
, 
FaûuªWôhBYTES_EQUAL
)

209 
	`ã°FaûuªWôh
(
_ÁûMëhodBYTES_EQUAL
);

210 
	}
}

212 
	$TEST
(
Uã°
, 
Suc˚ssPrötsNŸhög
)

214 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

215 
fixtuª
->
	`runAŒTe°s
();

216 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

217 
fixtuª
->
	`as£πPrötC⁄èös
(".\nOK (1Åests");

218 
	`CHECK
(
a·îCheck
);

219 
	}
}

221 
	$TEST
(
Uã°
, 
PrötPrötsWh©evîPrötPröts
)

223 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPröt
);

224 
fixtuª
->
	`runAŒTe°s
();

225 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

226 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World!");

227 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

228 
	}
}

230 
	$TEST
(
Uã°
, 
PrötPrötsPrötf
)

232 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPrötF
);

233 
fixtuª
->
	`runAŒTe°s
();

234 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

235 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World! 2009");

236 
	}
}

238 
	$TEST
(
Uã°
, 
ÆlMa¸os
)

240 
	`CHECK
(0 == 0);

241 
	`LONGS_EQUAL
(1,1);

242 
	`BYTES_EQUAL
(0xab,0xab);

243 
	`CHECK_EQUAL
(100,100);

244 
	`STRCMP_EQUAL
("THIS", "THIS");

245 
	`STRCMP_CONTAINS
("THIS", "THISTHAT");

246 
	`STRCMP_NOCASE_EQUAL
("this", "THIS");

247 
	`STRCMP_NOCASE_CONTAINS
("this", "THISTHAT");

248 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

249 
	`POINTERS_EQUAL
(
this
,Åhis);

250 
	}
}

252 
	$fun˘i⁄Th©Rëu∫sAVÆue
()

254 
	`CHECK
(0 == 0);

255 
	`LONGS_EQUAL
(1,1);

256 
	`BYTES_EQUAL
(0xab,0xab);

257 
	`CHECK_EQUAL
(100,100);

258 
	`STRCMP_EQUAL
("THIS", "THIS");

259 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

260 
	`POINTERS_EQUAL
(0, 0);

262 
	}
}

264 
	$TEST
(
Uã°
, 
ÆlMa¸osFromFun˘i⁄Th©Rëu∫sAVÆue
)

266 
	`fun˘i⁄Th©Rëu∫sAVÆue
();

267 
	}
}

269 
	$TEST
(
Uã°
, 
As£πsA˘LikeSèãmíts
)

271 i‡(
fixtuª
 !0Ë
	`CHECK
(
åue
)

272 
	`CHECK
(
Ál£
)

274 i‡(
fixtuª
 !0Ë
	`CHECK_EQUAL
(
åue
,Årue)

275 
	`CHECK_EQUAL
(
Ál£
, false)

277 i‡(
fixtuª
 !0Ë
	`STRCMP_EQUAL
("", "")

278 
	`STRCMP_EQUAL
("", " ")

280 i‡(
fixtuª
 != 0)

281 
	`STRCMP_CONTAINS
("con", "contains")

283 
	`STRCMP_CONTAINS
("hello", "world")

285 i‡(
fixtuª
 != 0)

286 
	`LONGS_EQUAL
(1, 1)

288 
	`LONGS_EQUAL
(1, 0)

290 i‡(
fixtuª
 != 0)

291 
	`DOUBLES_EQUAL
(1, 1, 0.01)

293 
	`DOUBLES_EQUAL
(1, 0, 0.01)

295 i‡(
Ál£
)

296 
	`FAIL
("")

297 
	`CHECK
(
åue
);;

299 i‡(
åue
) ;

301 
	`FAIL
("")

303 
	`SUCCESS
();

304 
	}
}

306 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Suµ‹tsAŒMa¸os
)

308 
	`CHECK
(
åue
);

309 
	`CHECK_EQUAL
(
åue
,Årue);

310 
	`STRCMP_EQUAL
("", "");

311 
	`LONGS_EQUAL
(1, 1);

312 
	`DOUBLES_EQUAL
(1, 1, 0.01);

313 
	`FAIL
("");

314 
	}
}

316 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Ac˚ssögFixtuª
)

318 
	`CHECK
(
fixtuª
 != 0);

319 
	}
}

321 
	$TEST
(
Uã°
, 
Ma¸osU£dInSëup
)

323 
	`IGNORE_ALL_LEAKS_IN_TEST
();

324 
fixtuª
->
	`£tSëup
(
_ÁûMëhod
);

325 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

326 
fixtuª
->
	`runAŒTe°s
();

327 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

328 
	}
}

330 
	$TEST
(
Uã°
, 
Ma¸osU£dInTórDown
)

332 
	`IGNORE_ALL_LEAKS_IN_TEST
();

333 
fixtuª
->
	`£tTórdown
(
_ÁûMëhod
);

334 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

335 
fixtuª
->
	`runAŒTe°s
();

336 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

337 
	}
}

339 
	gã¨downCÆÀd
 = 0;

341 
	$_ã¨downMëhod
()

343 
ã¨downCÆÀd
++;

344 
	}
}

346 
	$TEST
(
Uã°
, 
TórdownCÆÀdA·îTe°Faûuª
)

348 
ã¨downCÆÀd
 = 0;

349 
	`IGNORE_ALL_LEAKS_IN_TEST
();

350 
fixtuª
->
	`£tTórdown
(
_ã¨downMëhod
);

351 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

352 
fixtuª
->
	`runAŒTe°s
();

353 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

354 
	`LONGS_EQUAL
(1, 
ã¨downCÆÀd
);

355 
	}
}

357 
	g°›A·îFaûuª
 = 0;

358 
	$_°›A·îFaûuªMëhod
()

360 
	`FAIL
("fail");

361 
°›A·îFaûuª
++;

362 
	}
}

364 
	$TEST
(
Uã°
, 
Te°St›sA·îTe°Faûuª
)

366 
	`IGNORE_ALL_LEAKS_IN_TEST
();

367 
°›A·îFaûuª
 = 0;

368 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_°›A·îFaûuªMëhod
);

369 
fixtuª
->
	`runAŒTe°s
();

370 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

371 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

372 
	}
}

374 
	$TEST
(
Uã°
, 
Te°St›sA·îSëupFaûuª
)

376 
°›A·îFaûuª
 = 0;

377 
fixtuª
->
	`£tSëup
(
_°›A·îFaûuªMëhod
);

378 
fixtuª
->
	`£tTórdown
(
_°›A·îFaûuªMëhod
);

379 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

380 
fixtuª
->
	`runAŒTe°s
();

381 
	`LONGS_EQUAL
(2, 
fixtuª
->
	`gëFaûuªCou¡
());

382 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

383 
	}
}

385 
	$TEST_BASE
(
MyOwnTe°
)

387 
	`MyOwnTe°
() :

388 
	`öTe°
(
Ál£
)

391 
boﬁ
 
öTe°
;

393 
	`£tup
()

395 
	`CHECK
(!
öTe°
);

396 
öTe°
 = 
åue
;

398 
	`ã¨down
()

400 
	`CHECK
(
öTe°
);

401 
öTe°
 = 
Ál£
;

403 
	}
};

405 
	$TEST_GROUP_BASE
(
Uã°MyOwn
, 
MyOwnTe°
)

407 
	}
};

409 
	$TEST
(
Uã°MyOwn
, 
ã°
)

411 
	`CHECK
(
öTe°
);

412 
	}
}

414 ˛as†
	cNuŒP¨amëîTe°
: 
public
 
Uã°


418 
	$TEST
(
Uã°MyOwn
, 
NuŒP¨amëîs
)

420 
NuŒP¨amëîTe°
 
nuŒTe°
;

421 
Te°Regi°ry
* 
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

422 
nuŒTe°
.
	`shouldRun
(
ªg
->
	`gëGroupFûãr
(),Ñeg->
	`gëNameFûãr
());

423 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\AllTests.h

1 
IMPORT_TEST_GROUP
(
Fú°Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\keyevent.c

1 
	~"keyevít.h
"

3 
	gkeydown_evít_cou¡
=0;

4 
	gkeydown_evít_cou¡s
[]={0,0,0,0,0};

5 
	gkeydown_evít
=0;

6 
	g_key_°©e
=0;

7 
	g_key_°©es
[]={0,0,0,0,0};

8 
	g_ch™√l
=0;

10 
	$keydown_evít_ˇŒback
() {

11 
keydown_evít_cou¡s
[
_ch™√l
] += 1;

12 
keydown_evít_cou¡
 = 
keydown_evít_cou¡s
[
_ch™√l
];

13 
keydown_evít
=
PRESSED
;

14 
	}
}

16 
	$keydown_evít_ªÀa£_ˇŒback
() {

17 
keydown_evít
=
RELEASED
;

18 
	}
}

22 
	$£t_key_°©e
(
°©e
) {

23 
_key_°©e
=
_key_°©es
[
_ch™√l
];

24 i‡(
_key_°©e
==0 && 
°©e
==1) {

25 
	`keydown_evít_ˇŒback
();

27 i‡(
_key_°©e
==1 && 
°©e
==0) {

28 
	`keydown_evít_ªÀa£_ˇŒback
();

30 
_key_°©es
[
_ch™√l
]=
°©e
;

31 
	}
}

33 
	$£t_key
(
ch™√l
) {

34 
_ch™√l
=
ch™√l
;

35 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\keyevent.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#PRESSED
 1

	)

5 
	#RELEASED
 2

	)

7 
keydown_evít_cou¡
;

8 
keydown_evít_cou¡s
[];

9 * 
keydown_evít_cb
;

10 
keydown_evít
;

12 
£t_key_°©e
(
°©e
);

13 
£t_key
(
ch™√l
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\realtime.c

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\realtime.h

1 
my_dñay
();

2 
my_mûlis
();

5 
	$my_dñay
(
ßm∂e_øã
) {

7 
	}
}

9 
	$my_mûlis
() {

11 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

9 
	~"AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.h

1 
IMPORT_TEST_GROUP
(
KeydownEvít
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\keyevent.c

1 
	~"keyevít.h
"

3 
	gkey_°©e
=0;

4 
	g_key_°©e
=0;

5 
	gp_key_°©e
=0;

7 
	g_un˚πaö_cou¡
;

9 
	g_°©e
=0;

11 
	g_evít
=
NOEVT
;

13 
	gkeydown_evít
=0;

15 
	gßm∂e_øã
;

16 
	g˘ime
;

17 
	gdeboun˚_≥riod
;

18 
	gœ°_deboun˚_time
=0;

20 
	$öô_°©es
() {

21 
key_°©e
=0;

22 
_°©e
=0;

23 
	}
}

25 
	$keydown_evít_ˇŒback
() {

26 
keydown_evít
=
PRESSED
;

27 
	}
}

29 
	$keydown_evít_ªÀa£_ˇŒback
() {

30 
keydown_evít
=
RELEASED
;

31 
	}
}

34 (*
keydown_evít_cb
)(Ë
keydown_evít_ˇŒback
;

36 
	$£t_key_°©e
(
°©e
) {

37 
_key_°©e
 = 
°©e
;

38 
	}
}

40 
	$ªad_key_°©e
(){

41  
key_°©e
;

42 
	}
}

44 
	$£t_un˚πaö_cou¡
(
cou¡
) {

45 
_un˚πaö_cou¡
 = 
cou¡
;

46 
	`öô_°©es
();

47 
	}
}

49 
	$√xt_°©e
(
öp
, 
k
, 
n
) {

50 i‡(!
öp
 && 
k
)

51  (
k
+1Ë% (
n
+1);

53  
öp
;

54 
	}
}

56 
	$¥o˚ss_key_ch©ãrög
() {

57 
_°©e
 = 
	`√xt_°©e
(
_key_°©e
, _°©e, 
_un˚πaö_cou¡
);

58 
p_key_°©e
=
key_°©e
;

59 
key_°©e
 = 0 < 
_°©e
;

60 
	}
}

62 
	$key_°ï
(
k
) {

63 
	`£t_key_°©e
(
k
);

64 
	`¥o˚ss_key_ch©ãrög
();

65 
	}
}

67 
	$gë_evít
() {

69 i‡(!
p_key_°©e
 && 
key_°©e
)

70 
_evít
=
PRESSED
;

71 i‡(
p_key_°©e
 && !
key_°©e
)

72 
_evít
=
RELEASED
;

74 
_evít
=
NOEVT
;

75  
_evít
;

89 
	}
}

91 
	$£t_deboun˚_≥riod
(
dñay
) {

92 
deboun˚_≥riod
 = 
dñay
;

93 
	}
}

96 
	$£t_ßm∂ög_øã
(
mûlis
) {

97 
ßm∂e_øã
 = 
mûlis
;

98 
	}
}

100 
	$ª£t_œ°_deboun˚_time
() {

101 
œ°_deboun˚_time
 = 
˘ime
;

102 
	}
}

104 
	$¥o˚ss_debouncög
() {

105 i‡(
_key_°©e
 !
p_key_°©e
) {

106 
	`ª£t_œ°_deboun˚_time
();

109 i‡((
˘ime
 - 
œ°_deboun˚_time
Ë> 
deboun˚_≥riod
) {

110 
key_°©e
 = 
_key_°©e
;

114 
p_key_°©e
 = 
_key_°©e
;

115 
	}
}

117 
	$dñay
() {

118 
˘ime
 = ctimê+ 
ßm∂e_øã
;

119 
	}
}

121 
	$ªad_key
() {

122  
key_°©e
;

123 
	}
}

125 
	$£t_key
(
°©e
) {

126 
_key_°©e
 = 
°©e
;

127 
	}
}

129 
	$öô_˘ime
() {

130 
˘ime
 = 0;

131 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\keyevent.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#NOEVT
 0

	)

5 
	#PRESSED
 1

	)

6 
	#RELEASED
 2

	)

8 (*
keydown_evít_cb
)();

9 
keydown_evít
;

11 
˘ime
;

12 
œ°_deboun˚_time
;

13 
deboun˚_≥riod
;

15 
	`£t_key_°©e
(
°©e
);

17 
	`£t_key_°©e1
(
°©e
);

19 
	`ªad_key_°©e
();

20 
	`ªad_keydown_evít
();

22 
	`£t_un˚πaö_cou¡
(
cou¡
);

23 
	`¥o˚ss_key_ch©ãrög
();

24 
	`¥o˚ss_key_ch©ãrög1
();

26 
	`key_°ï
(
°©e
);

27 
	`gë_evít
();

29 
	`£t_deboun˚_≥riod
(
dñay
);

30 
	`£t_ßm∂ög_øã
(
mûlis
);

31 
	`£t_key
(
°©e
);

32 
	`¥o˚ss_debouncög
();

33 
	`dñay
();

34 
	`ªad_key
();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_keyevent.cpp

2 
	~<io°ªam
>

3 
	~<°rög
>

4 
	~<s°ªam
>

6 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~"keyevít.h
"

16 
	#CHAR2VAL
(
x
Ë((x)=='-'?
ON
:
OFF
)

	)

17 
	#CHAR2EVT
(
x
Ë((x)=='^'?
PRESSED
:((x)=='v'?
RELEASED
:
NOEVT
Ë)

	)

19 
	#ASSERT_KEYSTATE
(
ö
,
out
) \

20 
	`as£π_key°©e_loˇti⁄
((
ö
),(
out
), 
__FILE__
,
__LINE__
)

	)

22 
	#ASSERT_KEYSTATE_t
(
ö
,
out
) \

23 
	`as£π_key°©e_t_loˇti⁄
((
ö
),(
out
), 
__FILE__
,
__LINE__
)

	)

25 
	$as£π_debouncög_buf„r
(
ö
,
out
,

26 
exp_˘ime
,

27 
exp_œ°_deboun˚_time
)

29 
a˘uÆ
;

30 
	`dñay
();

31 
	`LONGS_EQUAL
(
exp_˘ime
, 
˘ime
);

32 
	`£t_key
(
	`CHAR2VAL
(
ö
));

33 
	`¥o˚ss_debouncög
();

34 
a˘uÆ
 = 
	`ªad_key
();

35 
	`LONGS_EQUAL
(
	`CHAR2VAL
(
out
),
a˘uÆ
);

36 
	`LONGS_EQUAL
(
exp_œ°_deboun˚_time
,
œ°_deboun˚_time
);

37 
	}
}

39 
	$as£π_key°©e_t_loˇti⁄
(* 
ö
, * 
out
,c⁄° * 
fûe
, 
löe
) {

44 
	}
}

46 
	$as£π_key°©e_loˇti⁄
(* 
ö
, * 
out
,c⁄° * 
fûe
, 
löe
)

48 
key_°©e
 = 0;

49 
i
=0;

50 
°d
::
o°rög°ªam
 
ss
;

51 (*
ö
))

53 
	`£t_key_°©e
(
	`CHAR2VAL
(*
ö
));

54 
	`¥o˚ss_key_ch©ãrög
();

56 
key_°©e
 = 
	`ªad_key_°©e
();

58 i‡(
	`CHAR2VAL
(*
out
)!=
key_°©e
)

60 
ss
<<(*
out
Ë<< "Éx≥˘ed buà" << (*
ö
Ë<< "áà" << 
i
;

61 
	`FAIL_LOCATION
(
ss
.
	`°r
().
	`c_°r
(),
fûe
,
löe
);

63 
ö
++;
out
++;
i
++;

65 
	}
}

68 
	$TEST_GROUP
(
KeydownEvít
)

70 
	`£tup
()

73 
	`ã¨down
()

76 
	}
};

79 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄
)

81 
ö_s
[]="__----";

82 
ou_s
[]="__----";

84 
	`£t_un˚πaö_cou¡
(3);

85 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

86 
	}
}

88 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄_off1
)

90 
ö_s
[]="__--__";

91 
ou_s
[]="__----";

93 
	`£t_un˚πaö_cou¡
(3);

94 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

95 
	}
}

97 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄_off2
)

99 
ö_s
[]="__--___";

100 
ou_s
[]="__----_";

102 
	`£t_un˚πaö_cou¡
(3);

103 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

105 
ö_s1
[]="__--___";

106 
ou_s1
[]="__----_";

108 
	`£t_un˚πaö_cou¡
(3);

109 
	`ASSERT_KEYSTATE
(
ö_s1
,
ou_s1
);

110 
	}
};

112 
	$TEST
(
KeydownEvít
, 
ã°_key_¥ess_ªÀa£
)

114 
ö_s
[]="_--_____-__-___";

115 
ev_s
[]=" ^ v ^ v";

116 
i
=0;

117 
	`£t_un˚πaö_cou¡
(3);

119 *(
ö_s
+
i
)) {

120 
	`key_°ï
(
	`CHAR2VAL
(*(
ö_s
+
i
)));

121 
	`LONGS_EQUAL
(
	`CHAR2EVT
(*(
ev_s
+
i
)), 
	`gë_evít
());

122 
i
++;

124 
	}
}

146 
	$TEST
(
KeydownEvít
, 
ã°2
){

147 
öputBuf„r
[] = "_-----";

148 
ex≥˘edBuf„r
[] = "_____-";

150 
s_øã
 = 5, 
exp_time
=5, 
exp_œ°_deb_time
=0;

151 
i
=0;

153 
	`£t_ßm∂ög_øã
(
s_øã
);

154 
	`£t_deboun˚_≥riod
(15);

156 
	`as£π_debouncög_buf„r
(
öputBuf„r
[
i
],
ex≥˘edBuf„r
[i],

157 
exp_time
,

158 
exp_œ°_deb_time
);

160 
exp_œ°_deb_time
=10;
i
++;

162 ; 
i
 < 
	`°æí
(
öputBuf„r
); i++) {

163 
exp_time
+=
s_øã
;

164 
	`as£π_debouncög_buf„r
(
öputBuf„r
[
i
],
ex≥˘edBuf„r
[i],

165 
exp_time
,

166 
exp_œ°_deb_time
);

168 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\time.c

1 #ifde‡
__AVR__


2 
	~"../../ArduöoC‹e/WProgøm.h
"

3 (*
my_dñay
)(Ë
dñay
;

4 (*
my_mûlis
)(Ë
mûlis
;

6 (*
my_dñay
)();

7 (*
my_mûlis
)();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\time.h

1 (* 
my_dñay
)();

2 (* 
my_mûlis
)();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\AllTests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	$maö
(
ac
, ** 
av
)

33  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

34 
	}
}

36 
	~"Aµliˇti⁄Lib/AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\#HelloTest.cpp#

3 
	~"hñlo.h
"

6 
	~<°dio.h
>

7 
	~<°d¨g.h
>

8 
	~"CµUTe°/Te°H¨√ss.h
"

10 
Sim∂eSåög
* 
buf„r
;

12 
	$TEST_GROUP
(
HñloW‹ld
)

13 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

15 
va_li°
 
¨gumíts
;

16 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

17 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

18 
	`va_íd
(
¨gumíts
);

21 
	`£tup
()

23 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

24 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

26 
	`ã¨down
()

28 
dñëe
 
buf„r
;

30 
	}
};

32 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

34 
	`¥ötHñloW‹ld
();

35 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

36 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\#PrinterTest.cpp#

28 
	~"Pröãr.h
"

29 
	~"MockPröãr.h
"

30 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

33 
	$TEST_GROUP
(
Pröãr
)

34 { 
Pröãr
* 
¥öãr
;

35 
MockPröãr
* 
mockPröãr
;

37 
	`£tup
()

39 
mockPröãr
 = 
√w
 
	`MockPröãr
();

40 
¥öãr
 = 
mockPröãr
;

42 
	`ã¨down
()

44 
dñëe
 
¥öãr
;

46 
	}
};

48 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

50 
¥öãr
->
	`Pröt
("hello");

51 
¥öãr
->
	`Pröt
("hello\n");

53 
	}
}

55 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

57 
¥öãr
->
	`Pröt
(1234);

59 
	}
}

61 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

63 *
¥öãr
 << "n=" << 1234;

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\AllTests.h

28 
IMPORT_TEST_GROUP
–
Pröãr
);

29 
IMPORT_TEST_GROUP
–
CúcuœrBuf„r
);

30 
IMPORT_TEST_GROUP
–
HñloW‹ld
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.cpp

28 
	~"CúcuœrBuf„r.h
"

29 
	~"Pröãr.h
"

31 
	gCúcuœrBuf„r
::
	$CúcuœrBuf„r
(
ˇ∑côy
) :

32 
	`ödex
(0), 
	`outdex
(0), 
	`ˇ∑côy
(
ˇ∑côy
), 
	`em±y
(
åue
), 
	$fuŒ
(
Ál£
)

34 
buf„r
 = 
√w
 [
this
->
ˇ∑côy
];

35 
	}
}

37 
	gCúcuœrBuf„r
::~
	$CúcuœrBuf„r
()

39 
dñëe
[] 
buf„r
;

40 
	}
}

42 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsEm±y
()

44  
em±y
;

45 
	}
}

47 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsFuŒ
()

49  
fuŒ
;

50 
	}
}

52 
	gCúcuœrBuf„r
::
	$Put
(
i
)

54 
em±y
 = 
Ál£
;

55 
buf„r
[
ödex
] = 
i
;

56 
ödex
 = 
	`Next
(index);

57 i‡(
fuŒ
Ë
outdex
 = 
	`Next
(outdex);

58 i‡(
ödex
 =
outdex
Ë
fuŒ
 = 
åue
;

59 
	}
}

61 
	gCúcuœrBuf„r
::
	$Gë
()

63 
ªsu…
 = -1;

64 
fuŒ
 = 
Ál£
;

66 i‡(!
em±y
) {

67 
ªsu…
 = 
buf„r
[
outdex
];

68 
outdex
 = 
	`Next
(outdex);

69 i‡(
outdex
 =
ödex
Ë
em±y
 = 
åue
;

71  
ªsu…
;

72 
	}
}

74 
	gCúcuœrBuf„r
::
	$C≠acôy
()

76  
ˇ∑côy
;

77 
	}
}

79 
	gCúcuœrBuf„r
::
	$Next
(
i
)

81 i‡(++
i
 >
ˇ∑côy
) i = 0;

82  
i
;

83 
	}
}

85 
	gCúcuœrBuf„r
::
	$Pröt
(
Pröãr
* 
p
)

87 
p
->
	`Pröt
("Circular buffer content:\n<");

89 
¥ötIndex
 = 
outdex
;

90 
cou¡
 = 
ödex
 - 
outdex
;

92 i‡(!
em±y
 && (
ödex
 <
outdex
)Ë
cou¡
 = 
ˇ∑côy
 - (outdex - index);

94 
i
 = 0; i < 
cou¡
; i++) {

95 
p
->
	`Pröt
(
buf„r
[
¥ötIndex
]);

96 
¥ötIndex
 = 
	`Next
(printIndex);

97 i‡(
i
 + 1 !
cou¡
Ë
p
->
	`Pröt
(", ");

99 
p
->
	`Pröt
(">\n");

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.h

28 #i‚de‡
D_CúcuœrBuf„r_H


29 
	#D_CúcuœrBuf„r_H


	)

38 
˛ass
 
	gPröãr
;

40 ˛as†
	cCúcuœrBuf„r


42 
	mpublic
:

43 
ex∂icô
 
CúcuœrBuf„r
(
ˇ∑côy
 = 
CAPACITY
);

44 
	mvútuÆ
 ~
CúcuœrBuf„r
();

46 
Put
();

47 
Gë
();

48 
boﬁ
 
IsEm±y
();

49 
boﬁ
 
IsFuŒ
();

50 
C≠acôy
();

51 
Next
(
i
);

52 
Pröt
(
Pröãr
*);

54 
	m¥iv©e
:

56 
ödex
;

57 
	moutdex
;

58 * 
	mbuf„r
;

59 
	mˇ∑côy
;

62 
	mCAPACITY
 = 5

64 
boﬁ
 
	gem±y
;

65 
boﬁ
 
	gfuŒ
;

67 
CúcuœrBuf„r
(const CircularBuffer&);

68 
	gCúcuœrBuf„r
& 
	g›î©‹
=(c⁄° 
CúcuœrBuf„r
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp

28 
	~"MockPröãr.h
"

29 
	~"CúcuœrBuf„r.h
"

30 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

33 
	$TEST_GROUP
(
CúcuœrBuf„r
)

34 { 
CúcuœrBuf„r
* 
buf„r
;

36 
	`£tup
()

38 
buf„r
 = 
√w
 
	`CúcuœrBuf„r
();

40 
	`ã¨down
()

42 
dñëe
 
buf„r
;

45 
	`fûlTheQueue
(
£ed
, 
howM™y
)

47 
i
 = 0; i < 
howM™y
; i++)

48 
buf„r
->
	`Put
(
£ed
 + 
i
);

50 
	`ªmoveFromQueue
(
howM™y
)

52 
i
 = 0; i < 
howM™y
; i++)

53 
buf„r
->
	`Gë
();

55 
	}
};

57 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

59 
	`CHECK
(
buf„r
->
	`IsEm±y
());

60 
	}
}

62 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

64 
buf„r
->
	`Put
(10046);

65 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

66 
	}
}

68 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

70 
buf„r
->
	`Put
(4567);

71 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

72 
buf„r
->
	`Gë
();

73 
	`CHECK
(
buf„r
->
	`IsEm±y
());

74 
	}
}

76 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

78 
buf„r
->
	`Put
(4567);

79 
	`LONGS_EQUAL
(4567, 
buf„r
->
	`Gë
());

80 
	}
}

82 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

84 
buf„r
->
	`Put
(1);

85 
buf„r
->
	`Put
(2);

86 
buf„r
->
	`Put
(3);

87 
	`LONGS_EQUAL
(1, 
buf„r
->
	`Gë
());

88 
	`LONGS_EQUAL
(2, 
buf„r
->
	`Gë
());

89 
	`LONGS_EQUAL
(3, 
buf„r
->
	`Gë
());

90 
	}
}

92 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

94 
CúcuœrBuf„r
 
	`buf„r
(2);

95 
	`LONGS_EQUAL
(2, 
buf„r
.
	`C≠acôy
());

96 
	}
}

98 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

100 
	`fûlTheQueue
(0, 
buf„r
->
	`C≠acôy
());

101 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

102 
	}
}

104 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

106 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

108 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

110 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

112 
	`CHECK
(
buf„r
->
	`IsEm±y
());

113 
	}
}

115 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

117 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

119 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

120 
	`LONGS_EQUAL
(100, 
buf„r
->
	`Gë
());

121 
	`CHECK
(!
buf„r
->
	`IsFuŒ
());

122 
buf„r
->
	`Put
(1000);

123 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

125 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 1);

127 
	`LONGS_EQUAL
(1000, 
buf„r
->
	`Gë
());

128 
	`CHECK
(
buf„r
->
	`IsEm±y
());

129 
	}
}

131 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒ
)

133 
ˇ∑côy
 = 
buf„r
->
	`C≠acôy
();

134 
	`fûlTheQueue
(900, 
ˇ∑côy
);

135 
buf„r
->
	`Put
(9999);

137 
i
 = 0; i < 
buf„r
->
	`C≠acôy
() - 1; i++)

138 
	`LONGS_EQUAL
(
i
+900+1, 
buf„r
->
	`Gë
());

140 
	`LONGS_EQUAL
(9999, 
buf„r
->
	`Gë
());

141 
	`CHECK
(
buf„r
->
	`IsEm±y
());

142 
	}
}

148 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±y
)

150 
	`LONGS_EQUAL
(-1, 
buf„r
->
	`Gë
());

151 
	`CHECK
(
buf„r
->
	`IsEm±y
());

152 
	}
}

160 
	$TEST
(
CúcuœrBuf„r
, 
PrötEm±y
)

162 
MockPröãr
 
mock
;

163 
Pröãr
* 
p
 = &
mock
;

165 
buf„r
->
	`Pröt
(
p
);

168 
	}
}

170 
	$TEST
(
CúcuœrBuf„r
, 
PrötA·îO√Put
)

172 
MockPröãr
 
mock
;

174 
buf„r
->
	`Put
(1);

175 
buf„r
->
	`Pröt
(&
mock
);

178 
	}
}

180 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedOrFuŒ
)

182 
MockPröãr
 
mock
;

184 
buf„r
->
	`Put
(1);

185 
buf„r
->
	`Put
(2);

186 
buf„r
->
	`Put
(3);

187 
buf„r
->
	`Pröt
(&
mock
);

190 
	}
}

192 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedAndIsFuŒ
)

194 
MockPröãr
 
mock
;

196 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

198 
buf„r
->
	`Pröt
(&
mock
);

203 
	}
}

205 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

207 
MockPröãr
 
mock
;

209 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

210 
buf„r
->
	`Gë
();

211 
buf„r
->
	`Put
(999);

213 
buf„r
->
	`Pröt
(&
mock
);

218 
	}
}

220 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndFuŒOvîwrôeOlde°
)

222 
MockPröãr
 
mock
;

224 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

225 
buf„r
->
	`Put
(9999);

227 
buf„r
->
	`Pröt
(&
mock
);

232 
	}
}

234 
	$TEST
(
CúcuœrBuf„r
, 
PrötBound¨y
)

236 
MockPröãr
 
mock
;

238 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

239 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 2);

240 
buf„r
->
	`Put
(888);

241 
	`fûlTheQueue
(300, 
buf„r
->
	`C≠acôy
() - 1);

243 
buf„r
->
	`Pröt
(&
mock
);

248 
	}
}

250 
	$TEST
(
CúcuœrBuf„r
, 
FûlEm±yThíPröt
)

252 
MockPröãr
 
mock
;

254 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

255 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

256 
buf„r
->
	`Pröt
(&
mock
);

261 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\HelloTest.cpp

3 
	~"hñlo.h
"

6 
	~<°dio.h
>

7 
	~<°d¨g.h
>

8 
	~"CµUTe°/Te°H¨√ss.h
"

10 
Sim∂eSåög
* 
buf„r
;

12 
	$TEST_GROUP
(
HñloW‹ld
)

13 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

15 
va_li°
 
¨gumíts
;

16 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

17 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

18 
	`va_íd
(
¨gumíts
);

21 
	`£tup
()

23 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

24 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

26 
	`ã¨down
()

28 
dñëe
 
buf„r
;

30 
	}
};

32 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

34 
	`¥ötHñloW‹ld
();

35 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

36 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockPrinter.h

28 #i‚de‡
D_MockPröãr_H


29 
	#D_MockPröãr_H


	)

38 
	~"Pröãr.h
"

39 
	~"CµUTe°/Sim∂eSåög.h
"

40 
	~<°dlib.h
>

41 
	~<°rög
>

43 ˛as†
	cMockPröãr
: 
public
 
Pröãr


45 
public
:

46 
ex∂icô
 
	$MockPröãr
()

49 
vútuÆ
 ~
	$MockPröãr
()

51 
	}
}

53 
vútuÆ
 
	$Pröt
(c⁄° * 
s
)

55 
ßvedOuçut
.
	`≠≥nd
(
s
);

56 
	}
}

58 
vútuÆ
 
	$Pröt
(
vÆue
)

60 
Sim∂eSåög
 
buf„r
;

61 
buf„r
 = 
	`SåögFromF‹m©
("%ld", 
vÆue
);

62 
ßvedOuçut
.
	`≠≥nd
(
buf„r
.
	`asCh¨Såög
());

63 
	}
}

65 
	g°d
::
°rög
 
	$gëOuçut
() const

67  
ßvedOuçut
;

68 
	}
}

70 
	g¥iv©e
:

72 
°d
::
°rög
 
ßvedOuçut
;

74 
MockPröãr
(const MockPrinter&);

75 
	gMockPröãr
& 
	g›î©‹
=(c⁄° 
MockPröãr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.cpp

28 
	~"Pröãr.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Sim∂eSåög.h
"

31 
	~<°dio.h
>

33 
	gPröãr
::
	$Pröãr
()

35 
	}
}

37 
Pröãr
::~
	$Pröãr
()

39 
	}
}

41 
Pröãr
::
	$Pröt
(c⁄° * 
s
)

43 c⁄° * 
p
 = 
s
; *p;Ö++)

44 
	`putch¨
(*
p
);

45 
	}
}

47 
	gPröãr
::
	$Pröt
(
n
)

49 
	`Pröt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

50 
	}
}

52 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, c⁄° * 
	gs
)

54 
	gp
.
Pröt
(
s
);

55  
	gp
;

58 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, 
	gi
)

60 
	gp
.
Pröt
(
i
);

61  
	gp
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.h

28 #i‚de‡
D_Pröãr_H


29 
	#D_Pröãr_H


	)

37 ˛as†
	cPröãr


39 
	mpublic
:

40 
ex∂icô
 
Pröãr
();

41 
	mvútuÆ
 ~
Pröãr
();

43 
vútuÆ
 
Pröt
(const *);

44 
vútuÆ
 
Pröt
();

46 
	m¥iv©e
:

48 
Pröãr
(const Printer&);

49 
	mPröãr
& 
	m›î©‹
=(c⁄° 
Pröãr
&);

53 
	gPröãr
& 
	g›î©‹
<<(Printer&, const *);

54 
	gPröãr
& 
	g›î©‹
<<(Printer&, );

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\PrinterTest.cpp

28 
	~"Pröãr.h
"

29 
	~"MockPröãr.h
"

30 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

33 
	$TEST_GROUP
(
Pröãr
)

34 { 
Pröãr
* 
¥öãr
;

35 
MockPröãr
* 
mockPröãr
;

37 
	`£tup
()

39 
mockPröãr
 = 
√w
 
	`MockPröãr
();

40 
¥öãr
 = 
mockPröãr
;

42 
	`ã¨down
()

44 
dñëe
 
¥öãr
;

46 
	}
};

48 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

50 
¥öãr
->
	`Pröt
("hello");

51 
¥öãr
->
	`Pröt
("hello\n");

52 
	`CHECK_EQUAL
("hñlohñlo\n", 
mockPröãr
->
	`gëOuçut
());

53 
	}
}

55 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

57 
¥öãr
->
	`Pröt
(1234);

59 
	}
}

61 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

63 *
¥öãr
 << "n=" << 1234;

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.c

1 
	~<°dio.h
>

2 
	~"hñlo.h
"

4 
	$¥ötHñloW‹ld
()

6 
	`PrötF‹m©ed
("Hello World!\n");

7 
	}
}

9 (*
PrötF‹m©ed
)(c⁄° *, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.h

1 #i‚de‡
HELLO_H_


2 
	#HELLO_H_


	)

4 
¥ötHñloW‹ld
();

6 (*
PrötF‹m©ed
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineArguments.h

1 #i‚de‡
D_Comm™dLöeArgumíts_H


2 
	#D_Comm™dLöeArgumíts_H


	)

9 
	~"Sim∂eSåög.h
"

10 
	~"Te°Ouçut.h
"

12 
˛ass
 
	gTe°Plugö
;

14 ˛as†
	cComm™dLöeArgumíts


16 
	mpublic
:

17 
ex∂icô
 
Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
, 
Te°Plugö
*);

18 
	mvútuÆ
 ~
Comm™dLöeArgumíts
();

20 
boﬁ
 
∑r£
();

21 
boﬁ
 
	$isVîbo£
() const;

22 
	$gëRïótCou¡
() const;

23 
Sim∂eSåög
 
	$gëGroupFûãr
() const;

24 
Sim∂eSåög
 
	$gëNameFûãr
() const;

25 
boﬁ
 
	$isJUnôOuçut
() const;

26 
boﬁ
 
	$isE˛ù£Ouçut
() const;

27 c⁄° * 
	$ußge
() const;

29 
¥iv©e
:

31 
	eOuçutTy≥


33 
OUTPUT_ECLIPSE
, 
OUTPUT_JUNIT


35 
ac
;

36 c⁄° ** 
av
;

37 
Te°Plugö
* 
∂ugö_
;

39 
boﬁ
 
vîbo£_
;

40 
ª≥©_
;

41 
Sim∂eSåög
 
groupFûãr_
;

42 
Sim∂eSåög
 
«meFûãr_
;

43 
OuçutTy≥
 
ouçutTy≥_
;

45 
Sim∂eSåög
 
	`gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
);

46 
	`SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
ödex
);

47 
	`SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

48 
	`SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

49 
boﬁ
 
	`SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
ödex
);

51 
	`Comm™dLöeArgumíts
(c⁄° 
Comm™dLöeArgumíts
&);

52 
Comm™dLöeArgumíts
& 
›î©‹
=(const CommandLineArguments&);

54 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineTestRunner.h

28 #i‚de‡
D_Comm™dLöeTe°Ru¬î_H


29 
	#D_Comm™dLöeTe°Ru¬î_H


	)

31 
	~"Te°H¨√ss.h
"

32 
	~"Te°Ouçut.h
"

33 
	~"Comm™dLöeArgumíts.h
"

41 
˛ass
 
	gJUnôTe°Ouçut
;

43 
	#DEF_PLUGIN_MEM_LEAK
 "Mem‹yLókPlugö"

	)

44 
	#DEF_PLUGIN_SET_POINTER
 "SëPoöãrPlugö"

	)

46 ˛as†
	cComm™dLöeTe°Ru¬î


48 
	mpublic
:

49 
	eOuçutTy≥


51 
OUTPUT_NORMAL
, 
	mOUTPUT_JUNIT


54 
RunAŒTe°s
(
ac
, c⁄° ** 
av
);

55 
RunAŒTe°s
(
ac
, ** 
av
);

56 
Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
*);

58 
	gvútuÆ
 ~
Comm™dLöeTe°Ru¬î
();

59 
runAŒTe°sMaö
();

61 
	g¥iv©e
:

63 
¨gc
;

64 c⁄° ** 
	g¨gv
;

65 
Te°Ouçut
* 
	gouçut_
;

66 
JUnôTe°Ouçut
* 
	gjUnôOuçut
;

67 
Comm™dLöeArgumíts
* 
	g¨gumíts
;

69 
boﬁ
 
∑r£Argumíts
(
Te°Plugö
*);

70 
runAŒTe°s
();

71 
öôülizeTe°Run
();

72 
boﬁ
 
isVîbo£
();

73 
gëRïótCou¡
();

74 
Sim∂eSåög
 
gëGroupFûãr
();

75 
Sim∂eSåög
 
gëNameFûãr
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\OrderedTest.h

28 #i‚de‡
D_OrdîedTe°_h


29 
	#D_OrdîedTe°_h


	)

31 ˛as†
	cOrdîedTe°
 : 
public
 
Uã°


33 
public
:

34 
OrdîedTe°
();

35 
	mvútuÆ
 ~
OrdîedTe°
();

37 
vútuÆ
 
OrdîedTe°
* 
addOrdîedTe°
(OrdîedTe°* 
ã°
);

38 
vútuÆ
 
OrdîedTe°
* 
gëNextOrdîedTe°
();

40 
gëLevñ
();

41 
£tLevñ
(
Àvñ
);

43 
addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
);

44 
OrdîedTe°
* 
gëOrdîedTe°Hód
();

45 
boﬁ
 
fú°OrdîedTe°
();

47 
£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
);

48 
	m¥iv©e
:

49 
OrdîedTe°
* 
_‹dîedTe°sHód
;

50 
OrdîedTe°
* 
	m_√xtOrdîedTe°
;

52 
	m_Àvñ
;

56 ˛as†
	cOrdîedTe°In°ÆÀr


58 
	mpublic
:

59 
ex∂icô
 
OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Àvñ
);

60 
	mvútuÆ
 ~
OrdîedTe°In°ÆÀr
();

62 
	m¥iv©e
:

63 
addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
);

64 
addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
OrdîedTe°
* 
ã°
);

68 
	#TEST_ORDERED
(
ã°Group
, 
ã°Name
, 
ã°Levñ
) \

69 
˛ass
 
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
CµUTe°Group
##testGroup \

70 { 
public
: 
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
CµUTe°Group
##
	`ã°Group
 () {} \

71 
	`ã°Body
(); } \

72 
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

73 
OrdîedTe°In°ÆÀr
 
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
, 
ã°Levñ
); \

74 
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\SimpleStringExtensions.h

37 #i‚de‡
D_Sim∂eSåögExãnsi⁄s_H


38 
	#D_Sim∂eSåögExãnsi⁄s_H


	)

40 
	~<°rög
>

41 
	~"CµUTe°/Te°H¨√ss.h
"

42 
	~"CµUTe°/Sim∂eSåög.h
"

44 
Sim∂eSåög
 
SåögFrom
(c⁄° 
°d
::
°rög
& 
Ÿhî
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\SimpleStringFromStdint.h

37 #i‚de‡
D_Sim∂eSåögExãnsi⁄s_H


38 
	#D_Sim∂eSåögExãnsi⁄s_H


	)

40 
	~"CµUTe°/Sim∂eSåög.h
"

41 
	~<°döt.h
>

43 
Sim∂eSåög
 
SåögFrom
(
uöt64_t
);

44 
Sim∂eSåög
 
SåögFrom
(
uöt32_t
);

45 
Sim∂eSåög
 
SåögFrom
(
uöt16_t
);

46 
Sim∂eSåög
 
SåögFrom
(
uöt8_t
);

48 
Sim∂eSåög
 
SåögFrom
(
öt64_t
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Failure.h

38 #i‚de‡
D_Faûuª_H


39 
	#D_Faûuª_H


	)

41 
	~"Sim∂eSåög.h
"

43 
˛ass
 
	gUã°
;

44 
˛ass
 
	gTe°Ouçut
;

46 ˛as†
	cFaûuª


49 
	mpublic
:

50 
Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

51 c⁄° 
Sim∂eSåög
& 
theMesßge
);

52 
Faûuª
(
Uã°
*, c⁄° 
Sim∂eSåög
& 
theMesßge
);

53 
Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
);

54 
Faûuª
(const Failure&);

55 
	mvútuÆ
 ~
Faûuª
();

57 
vútuÆ
 
Sim∂eSåög
 
	$gëFûeName
() const;

58 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°Name
() const;

59 
vútuÆ
 
	$gëLöeNumbî
() const;

60 
vútuÆ
 
Sim∂eSåög
 
	$gëMesßge
() const;

62 
¥Ÿe˘ed
:

63 
Sim∂eSåög
 
ã°Name
;

64 
Sim∂eSåög
 
fûeName
;

65 
löeNumbî
;

66 
Sim∂eSåög
 
mesßge
;

68 
Faûuª
& 
›î©‹
=(const Failure&);

72 ˛as†
	cEquÆsFaûuª
: 
public
 
Faûuª


74 
public
:

76 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

77 c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

79 
¥iv©e
:

80 
	`EquÆsFaûuª
(c⁄° 
EquÆsFaûuª
&);

81 
EquÆsFaûuª
& 
›î©‹
=(const EqualsFailure&);

84 ˛as†
	cC⁄èösFaûuª
: 
public
 
Faûuª


86 
public
:

88 
	`C⁄èösFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

89 c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

91 
¥iv©e
:

92 
	`C⁄èösFaûuª
(c⁄° 
C⁄èösFaûuª
&);

93 
C⁄èösFaûuª
& 
›î©‹
=(const ContainsFailure&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\JUnitTestOutput.h

28 #i‚de‡
D_JUnôTe°Ouçut_h


29 
	#D_JUnôTe°Ouçut_h


	)

31 
	~"Te°Ouçut.h
"

32 
	~"Sim∂eSåög.h
"

34 
	gJUnôTe°OuçutIm∂
;

35 
	gJUnôTe°Ca£Resu…Node
;

37 ˛as†
	cJUnôTe°Ouçut
: 
public
 
Te°Ouçut


39 
public
:

40 
JUnôTe°Ouçut
();

41 
	mvútuÆ
 ~
JUnôTe°Ouçut
();

43 
vútuÆ
 
¥ötTe°sSèπed
();

44 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

45 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

46 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

47 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

48 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

50 
vútuÆ
 
vîbo£
();

51 
vútuÆ
 
¥öt
(const *);

52 
vútuÆ
 
¥öt
();

53 
vútuÆ
 
¥öt
(c⁄° 
Faûuª
& 
Áûuª
);

54 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

56 
vútuÆ
 
Êush
();

58 
	m¥Ÿe˘ed
:

60 
JUnôTe°OuçutIm∂
* 
im∂_
;

61 
ª£tTe°GroupResu…
();

63 
vútuÆ
 
›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
);

64 
vútuÆ
 
wrôeTe°GroupToFûe
();

65 
vútuÆ
 
wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
);

66 
vútuÆ
 
˛o£Fûe
();

68 
vútuÆ
 
wrôeXmlHódî
();

69 
vútuÆ
 
wrôeTe°SuôeSummîy
();

70 
vútuÆ
 
wrôePr›îtõs
();

71 
vútuÆ
 
wrôeTe°Ca£s
();

72 
vútuÆ
 
wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
);

73 
vútuÆ
 
wrôeFûeEndög
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakAllocator.h

1 #i‚de‡
D_Mem‹yLókAŒoˇt‹_h


2 
	#D_Mem‹yLókAŒoˇt‹_h


	)

4 ˛as†
	cMem‹yLókAŒoˇt‹


6 
	mpublic
:

7 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
)=0;

8 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
)=0;

10 
vútuÆ
 c⁄° * 
«me
()=0;

11 
vútuÆ
 c⁄° * 
Æloc_«me
()=0;

12 
vútuÆ
 c⁄° * 
‰ì_«me
()=0;

14 
vútuÆ
 
isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

15 
	mvútuÆ
 ~
	$Mem‹yLókAŒoˇt‹
()

20 
	`£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

21 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAŒoˇt‹
();

22 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

24 
	`£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

25 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAºayAŒoˇt‹
();

26 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

28 
	`£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

29 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítMÆlocAŒoˇt‹
();

30 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

32 
¥iv©e
:

33 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAŒoˇt‹
;

34 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAºayAŒoˇt‹
;

35 
Mem‹yLókAŒoˇt‹
* 
cuºítMÆlocAŒoˇt‹
;

36 
	}
};

38 ˛as†
	cSènd¨dMÆlocAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


40 
public
:

41 * 
Æloc_mem‹y
(
size_t
 
size
);

42 
‰ì_mem‹y
(* 
mem‹y
);

44 c⁄° * 
«me
();

45 c⁄° * 
Æloc_«me
();

46 c⁄° * 
‰ì_«me
();

48 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

51 ˛as†
	cSènd¨dNewAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


53 
public
:

54 * 
Æloc_mem‹y
(
size_t
 
size
);

55 
‰ì_mem‹y
(* 
mem‹y
);

57 c⁄° * 
«me
();

58 c⁄° * 
Æloc_«me
();

59 c⁄° * 
‰ì_«me
();

61 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

64 ˛as†
	cSènd¨dNewAºayAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


66 
public
:

67 * 
Æloc_mem‹y
(
size_t
 
size
);

68 
‰ì_mem‹y
(* 
mem‹y
);

70 c⁄° * 
«me
();

71 c⁄° * 
Æloc_«me
();

72 c⁄° * 
‰ì_«me
();

74 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

77 ˛as†
	cNuŒUnknownAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


79 
public
:

80 * 
Æloc_mem‹y
(
size_t
 
size
);

81 
‰ì_mem‹y
(* 
mem‹y
);

83 c⁄° * 
«me
();

84 c⁄° * 
Æloc_«me
();

85 c⁄° * 
‰ì_«me
();

87 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetector.h

1 #i‚de‡
D_Mem‹yLókDëe˘‹_h


2 
	#D_Mem‹yLókDëe˘‹_h


	)

4 
	#MEM_LEAK_NONE
 "Nÿmem‹yÜók†wîêdëe˘ed."

	)

5 
	#MEM_LEAK_HEADER
 "Mem‹yÜók(sËfound.\n"

	)

6 
	#MEM_LEAK_LEAK
 "Lók size: %d AŒoˇãdát: %†™dÜöe: %d. Ty≥: \"%s\" C⁄ã¡: \"%.15s\"\n"

	)

7 
	#MEM_LEAK_FOOTER
 "TŸÆÇumbî o‡Àaks: "

	)

9 
	#MEM_LEAK_ALLOC_DEALLOC_MISMATCH
 "AŒoˇti⁄/dóŒoˇti⁄Åy≥ mism©ch\n"

	)

10 
	#MEM_LEAK_MEMORY_CORRUPTION
 "Mem‹y c‹ru±i⁄ (wrôã¿ouào‡bounds?)\n"

	)

11 
	#MEM_LEAK_ALLOC_LOCATION
 "áŒoˇãdáàfûe: %†löe: %d size: %dÅy≥: %s\n"

	)

12 
	#MEM_LEAK_DEALLOC_LOCATION
 " dóŒoˇãdáàfûe: %†löe: %dÅy≥: %s\n"

	)

13 
	#MEM_LEAK_DEALLOC_NON_ALLOCATED
 "DóŒoˇtögÇ⁄-Æloˇãd mem‹y\n"

	)

15 
	eMemLókPîiod


17 
	mmem_Àak_≥riod_Æl
,

18 
	mmem_Àak_≥riod_dißbÀd
,

19 
	mmem_Àak_≥riod_íabÀd
,

20 
	mmem_Àak_≥riod_checkög


23 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

25 
	~<°dlib.h
>

27 ˛as†
	cMem‹yLókFaûuª


29 
	mpublic
:

30 
vútuÆ
 ~
	$Mem‹yLókFaûuª
()

34 
vútuÆ
 
	`Áû
(* 
Áû_°rög
)=0;

35 
	}
};

37 
	sSim∂eSåögBuf„r


41 
	mSIMPLE_STRING_BUFFER_LEN
 = 4096

44 
Sim∂eSåögBuf„r
();

45 
˛ór
();

46 
add
(c⁄° * 
f‹m©
, ...);

47 * 
toSåög
();

49 
	m¥iv©e
:

50 
buf„r
[
SIMPLE_STRING_BUFFER_LEN
];

51 
	mposôi⁄s_fûÀd
;

54 
	sMem‹yLókDëe˘‹Node


56 
Mem‹yLókDëe˘‹Node
() :

57 
size
(0), 
√xt
(0)

61 
size_t
 
	msize
;

62 * 
	mmem‹y
;

63 c⁄° * 
	mfûe
;

64 
	mlöe
;

65 
Mem‹yLókAŒoˇt‹
* 
	mÆloˇt‹
;

66 
MemLókPîiod
 
	m≥riod
;

68 
	m¥iv©e
:

69 
‰õnd
 
Mem‹yLókDëe˘‹Li°
;

70 
Mem‹yLókDëe˘‹Node
* 
	m√xt
;

73 
	sMem‹yLókDëe˘‹Li°


75 
Mem‹yLókDëe˘‹Li°
() :

76 
hód
(0)

81 
öôNode
(
Mem‹yLókDëe˘‹Node
* 
node
,

82 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
,

83 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
);

85 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

86 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

88 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

89 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
node
,

90 
MemLókPîiod
 
≥riod
);

91 
Mem‹yLókDëe˘‹Node
* 
gëLókFrom
(Mem‹yLókDëe˘‹Node* 
node
,

92 
MemLókPîiod
 
≥riod
);

94 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

95 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

96 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

98 
boﬁ
 
isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
);

100 
	m¥iv©e
:

101 
Mem‹yLókDëe˘‹Node
* 
hód
;

104 
	sMem‹yLókDëe˘‹TabÀ


106 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

108 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

109 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

111 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

112 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

114 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

115 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
Àak
,

116 
MemLókPîiod
 
≥riod
);

118 
	m¥iv©e
:

119 
hash
(* 
mem‹y
);

123 
	mhash_¥ime
 = 
MEMORY_LEAK_HASH_TABLE_SIZE


125 
Mem‹yLókDëe˘‹Li°
 
	mèbÀ
[
hash_¥ime
];

128 ˛as†
	cMem‹yLókDëe˘‹


130 
	mpublic
:

131 
Mem‹yLókDëe˘‹
();

132 ~
	$Mem‹yLókDëe˘‹
()

136 
	`öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
);

138 
	`íabÀ
();

139 
	`dißbÀ
();

141 
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

142 
	`íabÀAŒoˇti⁄Ty≥Checkög
();

144 
	`°¨tCheckög
();

145 
	`°›Checkög
();

147 c⁄° * 
	`ªp‹t
(
MemLókPîiod
 
≥riod
);

148 
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

149 
	`tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
);

150 
	`˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

152 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
);

153 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
,

154 c⁄° * 
fûe
, 
löe
);

155 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
);

156 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
,

157 c⁄° * 
fûe
, 
löe
);

158 * 
	`ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
,

159 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

163 
mem‹y_c‹ru±i⁄_buf„r_size
 = 3

164 
	}
};

165 
	g¥iv©e
:

166 
Mem‹yLókFaûuª
* 
ªp‹ãr
;

167 
MemLókPîiod
 
	gcuºít_≥riod
;

168 
Sim∂eSåögBuf„r
 
	gouçut_buf„r
;

169 
Mem‹yLókDëe˘‹TabÀ
 
	gmem‹yTabÀ
;

170 
boﬁ
 
	gdoAŒoˇti⁄Ty≥Checkög
;

172 
C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
);

173 
ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
,

174 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

175 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

176 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
);

178 * 
ªÆloˇãMem‹yAndExåaInfo
(* 
mem‹y
, 
size_t
 
size
);

179 * 
ÆloˇãMem‹yAndExåaInfo
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

180 
size_t
 
size
);

181 
addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
, 
size_t
 
size
);

182 
checkF‹AŒocMism©chOrC‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
,

183 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

185 
addMem‹yLókInfoAndC‹ru±i⁄Info
(* 
mem‹y
, 
size_t
 
size
,

186 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

187 
boﬁ
 
ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(* 
mem‹y
, c⁄° * 
fûe
,

188 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

190 
Mem‹yLókDëe˘‹Node
* 
gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h

28 #i‚de‡
D_Mem‹yLókW¨nögPlugö_h


29 
	#D_Mem‹yLókW¨nögPlugö_h


	)

31 
	~"Te°Plugö.h
"

42 
	#IGNORE_ALL_LEAKS_IN_TEST
(Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ign‹eAŒLóksInTe°
();

	)

43 
	#EXPECT_N_LEAKS
(
n
Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ex≥˘LóksInTe°
“);

	)

46 
	~"Te°H¨√ss_c.h
"

49 #i‡
UT_NEW_OVERRIDES_ENABLED


50 #ifde‡
√w


51 #unde‡
√w


54 * 
›î©‹
 
√w
(
size_t
 
size
);

55 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
);

56 * 
›î©‹
 
√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

57 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
);

58 
›î©‹
 
dñëe
(* 
mem
, c⁄° * 
fûe
, 
löe
);

59 
›î©‹
 
	gdñëe
[](* 
	gmem
, c⁄° * 
	gfûe
, 
	glöe
);

60 
›î©‹
 
dñëe
(* 
mem
);

61 
›î©‹
 
	gdñëe
[](* 
	gmem
);

63 #i‡
UT_NEW_MACROS_ENABLED


64 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

69 
˛ass
 
	gMem‹yLókDëe˘‹
;

71 ˛as†
	cMem‹yLókW¨nögPlugö
: 
public
 
Te°Plugö


73 
public
:

74 
Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

75 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
 = 0);

76 
	mvútuÆ
 ~
Mem‹yLókW¨nögPlugö
();

78 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

79 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

81 
vútuÆ
 c⁄° * 
FöÆRï‹t
(
toBeDñëedLóks
 = 0);

83 
ign‹eAŒLóksInTe°
();

84 
ex≥˘LóksInTe°
(
n
);

86 
Mem‹yLókDëe˘‹
* 
gëMem‹yLókDëe˘‹
();

87 
Mem‹yLókW¨nögPlugö
* 
gëFú°Plugö
();

89 
Mem‹yLókDëe˘‹
* 
gëGlobÆDëe˘‹
();

90 
	m¥iv©e
:

91 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

92 
boﬁ
 
	mign‹eAŒW¨nögs
;

93 
	mex≥˘edLóks
;

94 
	mÁûuªCou¡
;

96 
Mem‹yLókW¨nögPlugö
* 
	mfú°Plugö
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\PlatformSpecificFunctions.h

28 #i‚de‡
PLATFORMSPECIFICFUNCTIONS_H_


29 
	#PLATFORMSPECIFICFUNCTIONS_H_


	)

46 
GëPœtf‹mS≥cificTimeInMûlis
();

47 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
)());

49 c⁄° * 
GëPœtf‹mS≥cificTimeSåög
();

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
)());

53 
Pœtf‹mS≥cificAtoI
(c⁄° *
°r
);

54 
Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
);

55 * 
Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
);

56 * 
Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
);

57 * 
Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
);

58 
Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
);

59 
Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
);

60 * 
Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
);

61 
Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
,

62 
va_li°
 
va_¨gs_li°
);

65 
Pœtf‹mS≥cificFabs
(
d
);

66 
Pœtf‹mS≥cificAtExô
((*
func
)());

69 * 
	tPœtf‹mS≥cificFûe
;

71 
Pœtf‹mS≥cificFûe
 
Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
,

72 c⁄° * 
Êag
);

73 
Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
);

74 
Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
);

76 
Pœtf‹mS≥cificPutch¨
(
c
);

77 
Pœtf‹mS≥cificFlush
();

80 * 
Pœtf‹mS≥cificMÆloc
(
size
);

81 * 
Pœtf‹mS≥cificRóŒoc
(* 
mem‹y
, 
size
);

82 
Pœtf‹mS≥cificFªe
(* 
mem‹y
);

83 * 
Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\SimpleString.h

38 #i‚de‡
D_Sim∂eSåög_h


39 
	#D_Sim∂eSåög_h


	)

41 
	~<°d¨g.h
>

43 
˛ass
 
	gSim∂eSåögCﬁÀ˘i⁄
;

45 ˛as†
	cSim∂eSåög


47 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

48 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

50 
	mpublic
:

51 
Sim∂eSåög
(c⁄° *
vÆue
 = "");

52 
Sim∂eSåög
(c⁄° *
vÆue
, 
ª≥©Cou¡
);

53 
Sim∂eSåög
(c⁄° Sim∂eSåög& 
Ÿhî
);

54 ~
Sim∂eSåög
();

56 
	mSim∂eSåög
& 
	m›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
);

57 
Sim∂eSåög
 
	m›î©‹
+(c⁄° 
	mSim∂eSåög
&);

58 
	mSim∂eSåög
& 
	m›î©‹
+=(c⁄° 
Sim∂eSåög
&);

59 
	mSim∂eSåög
& 
	m›î©‹
+=(const *);

61 
boﬁ
 
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

62 
boﬁ
 
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

63 
boﬁ
 
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

65 
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
,

66 
Sim∂eSåögCﬁÀ˘i⁄
& 
outCﬁÀ˘i⁄
) const;

68 
	$cou¡
(c⁄° 
Sim∂eSåög
& 
°r
) const;

70 
	`ª∂a˚
(
to
, 
wôh
);

71 
	`ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
);

73 c⁄° *
	$asCh¨Såög
() const;

74 
	$size
() const;

76 
¥iv©e
:

77 *
buf„r
;

80 ˛as†
	cSim∂eSåögCﬁÀ˘i⁄


82 
public
:

83 
	`Sim∂eSåögCﬁÀ˘i⁄
();

84 ~
	`Sim∂eSåögCﬁÀ˘i⁄
();

86 
	`Æloˇã
(
size
);

88 
	$size
() const;

89 
Sim∂eSåög
& 
›î©‹
[](
ödex
);

91 
¥iv©e
:

92 
Sim∂eSåög
* 
cﬁÀ˘i⁄
;

93 
Sim∂eSåög
 
em±y
;

94 
_size
;

96 
›î©‹
 =(
Sim∂eSåögCﬁÀ˘i⁄
&);

97 
	`Sim∂eSåögCﬁÀ˘i⁄
(
Sim∂eSåögCﬁÀ˘i⁄
&);

100 
Sim∂eSåög
 
	`SåögFrom
(
boﬁ
 
vÆue
);

101 
Sim∂eSåög
 
	`SåögFrom
(* 
vÆue
);

102 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

103 
Sim∂eSåög
 
	`SåögFrom
(c⁄° *
vÆue
);

104 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

105 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

106 
Sim∂eSåög
 
	`HexSåögFrom
(
vÆue
);

107 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
, 
¥ecisi⁄
 = 6);

108 
Sim∂eSåög
 
	`SåögFrom
(c⁄° Sim∂eSåög& 
Ÿhî
);

109 
Sim∂eSåög
 
	`SåögFromF‹m©
(c⁄° * 
f‹m©
, ...);

110 
Sim∂eSåög
 
	`VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness.h

28 #i‚de‡
D_Te°H¨√ss_h


29 
	#D_Te°H¨√ss_h


	)

43 #i‚de‡
UT_NEW_MACROS_ENABLED


44 #ifde‡
UT_NEW_MACROS_DISABLED


45 
	#UT_NEW_MACROS_ENABLED
 0

	)

47 
	#UT_NEW_MACROS_ENABLED
 1

	)

51 #i‚de‡
UT_NEW_OVERRIDES_ENABLED


52 #ifde‡
UT_NEW_OVERRIDES_DISABLED


53 
	#UT_NEW_OVERRIDES_ENABLED
 0

	)

54 #unde‡
UT_NEW_MACROS_ENABLED


55 
	#UT_NEW_MACROS_ENABLED
 0

	)

57 
	#UT_NEW_OVERRIDES_ENABLED
 1

	)

65 
	#MEMORY_LEAK_HASH_TABLE_SIZE
 73

	)

75 
	~"Uã°.h
"

76 
	~"Uã°Ma¸os.h
"

77 
	~"Sim∂eSåög.h
"

78 
	~"Te°Resu….h
"

79 
	~"Faûuª.h
"

80 
	~"Te°Plugö.h
"

81 
	~"Mem‹yLókW¨nögPlugö.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness_c.h

38 #i‚de‡
D_Te°H¨√ss_c_h


39 
	#D_Te°H¨√ss_c_h


	)

41 
	#CHECK_EQUAL_C_INT
(
ex≥˘ed
,
a˘uÆ
) \

42 
	`CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

44 
	#CHECK_EQUAL_C_REAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
) \

45 
	`CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

47 
	#CHECK_EQUAL_C_CHAR
(
ex≥˘ed
,
a˘uÆ
) \

48 
	`CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

50 
	#CHECK_EQUAL_C_STRING
(
ex≥˘ed
,
a˘uÆ
) \

51 
	`CHECK_EQUAL_C_STRING_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

53 
	#FAIL_TEXT_C
(
ãxt
) \

54 
	`FAIL_TEXT_C_LOCATION
(
ãxt
,
__FILE__
,
__LINE__
)

	)

56 
	#FAIL_C
() \

57 
	`FAIL_C_LOCATION
(
__FILE__
,
__LINE__
)

	)

59 
	#CHECK_C
(
c⁄dôi⁄
) \

60 
	`CHECK_C_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
,
__LINE__
)

	)

63 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

64 c⁄° * 
fûeName
, 
löeNumbî
);

65 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

66 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

67 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

68 c⁄° * 
fûeName
, 
löeNumbî
);

69 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
,

70 c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
);

71 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

72 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

75 c⁄° * 
fûeName
, 
löeNumbî
);

79 #i‚de‡
UT_MALLOC_MACROS_ENABLED


80 #ifde‡
UT_MALLOC_MACROS_DISABLED


81 
	#UT_MALLOC_MACROS_ENABLED
 0

	)

83 
	#UT_MALLOC_MACROS_ENABLED
 1

	)

87 #i‡
UT_MALLOC_MACROS_ENABLED


88 #unde‡
mÆloc


89 #unde‡
‰ì


90 
	#mÆloc
 
°d_mÆloc


	)

91 
	#‰ì
 
°d_‰ì


	)

92 
	#ˇŒoc
 
°d_ˇŒoc


	)

93 
	#ªÆloc
 
°d_ªÆloc


	)

94 
	~<°dlib.h
>

95 #unde‡
mÆloc


96 #unde‡
‰ì


97 #unde‡
ªÆloc


98 #unde‡
ˇŒoc


100 
	~<°dlib.h
>

103 * 
˝puã°_mÆloc
(
size_t
 
size
);

104 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
);

105 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
);

106 
˝puã°_‰ì
(* 
buf„r
);

108 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

109 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
,

110 c⁄° * 
fûe
, 
löe
);

111 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
,

112 c⁄° * 
fûe
, 
löe
);

113 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

115 #i‡
UT_MALLOC_MACROS_ENABLED


116 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

117 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

118 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

119 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

122 
˝puã°_mÆloc_£t_out_of_mem‹y
();

123 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestOutput.h

28 #i‚de‡
D_Te°Ouçut_h


29 
	#D_Te°Ouçut_h


	)

42 
˛ass
 
	gUã°
;

43 
˛ass
 
	gFaûuª
;

44 
˛ass
 
	gTe°Resu…
;

46 ˛as†
	cTe°Ouçut


48 
	mpublic
:

49 
ex∂icô
 
Te°Ouçut
();

50 
	mvútuÆ
 ~
Te°Ouçut
();

52 
vútuÆ
 
¥ötTe°sSèπed
();

53 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

54 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

55 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

56 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

57 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

59 
vútuÆ
 
vîbo£
();

60 
vútuÆ
 
¥öt
(const *)=0;

61 
vútuÆ
 
¥öt
();

62 
vútuÆ
 
¥ötDoubÀ
();

63 
vútuÆ
 
¥ötHex
();

64 
vútuÆ
 
¥öt
(c⁄° 
Faûuª
& 
Áûuª
);

65 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

66 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

68 
vútuÆ
 
Êush
();

70 
	m¥iv©e
:

72 
vútuÆ
 
¥ötProgªssIndiˇt‹
();

74 
Te°Ouçut
(const TestOutput&);

75 
	mTe°Ouçut
& 
	m›î©‹
=(c⁄° 
Te°Ouçut
&);

77 
	mdŸCou¡_
;

78 
boﬁ
 
	mvîbo£_
;

79 c⁄° * 
	m¥ogªssIndiˇti⁄
;

82 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, const *);

83 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, );

93 ˛as†
	cC⁄sﬁeTe°Ouçut
: 
public
 
Te°Ouçut


95 
public
:

96 
ex∂icô
 
	$C⁄sﬁeTe°Ouçut
()

100 
vútuÆ
 ~
	$C⁄sﬁeTe°Ouçut
()

102 
	}
}

105 
vútuÆ
 
¥öt
(c⁄° * 
s
);

106 
vútuÆ
 
Êush
();

108 
	g¥iv©e
:

109 
C⁄sﬁeTe°Ouçut
(const ConsoleTestOutput&);

110 
	gC⁄sﬁeTe°Ouçut
& 
	g›î©‹
=(c⁄° 
C⁄sﬁeTe°Ouçut
&);

122 ˛as†
	cSåögBuf„rTe°Ouçut
: 
public
 
Te°Ouçut


124 
public
:

125 
ex∂icô
 
	$SåögBuf„rTe°Ouçut
()

129 
vútuÆ
 ~
	$SåögBuf„rTe°Ouçut
()

131 
	}
}

134 
	$¥öt
(c⁄° * 
s
)

136 
ouçut
 +
s
;

137 
	}
}

139 
	$Êush
()

141 
ouçut
 = "";

142 
	}
}

144 c⁄° 
	gSim∂eSåög
& 
	$gëOuçut
()

146  
ouçut
;

147 
	}
}

149 
	g¥iv©e
:

150 
Sim∂eSåög
 
ouçut
;

152 
SåögBuf„rTe°Ouçut
(const StringBufferTestOutput&);

153 
	gSåögBuf„rTe°Ouçut
& 
	g›î©‹
=(c⁄° 
SåögBuf„rTe°Ouçut
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestPlugin.h

36 #i‚de‡
D_Te°Plugö_h


37 
	#D_Te°Plugö_h


	)

39 
˛ass
 
	gUã°
;

40 
˛ass
 
	gTe°Resu…
;

42 ˛as†
	cTe°Plugö


44 
	mpublic
:

46 
Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
);

47 
	mvútuÆ
 ~
Te°Plugö
();

49 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

55 
	}
}

57 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

59  
Ál£
;

60 
	}
}

63 
vútuÆ
 
runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

64 
vútuÆ
 
runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

65 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
);

66 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
);

68 
vútuÆ
 
Te°Plugö
* 
addPlugö
(TestPlugin*);

69 
vútuÆ
 
Te°Plugö
* 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

70 
vútuÆ
 
Te°Plugö
* 
gëNext
();

72 
vútuÆ
 
dißbÀ
();

73 
vútuÆ
 
íabÀ
();

74 
vútuÆ
 
boﬁ
 
isE«bÀd
();

76 c⁄° 
	gSim∂eSåög
& 
gëName
();

77 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

79 
	g¥Ÿe˘ed
:

80 
Te°Plugö
(Te°Plugö* 
√xt
);

82 
	g¥iv©e
:

83 
Te°Plugö
* 
√xt_
;

84 
Sim∂eSåög
 
	g«me_
;

85 
boﬁ
 
	gíabÀd_
;

96 
CµUTe°St‹e
(**
loˇti⁄
, *
vÆue
);

98 ˛as†
	cSëPoöãrPlugö
: 
public
 
Te°Plugö


100 
public
:

101 
SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
);

102 
	mvútuÆ
 ~
SëPoöãrPlugö
();

103 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

107 
	mMAX_SET
 = 1024

111 
	#UT_PTR_SET
(
a
, 
b
Ë{ 
	`CµUTe°St‹e
–(**)&a, (*Ëa);á = b; }

	)

115 ˛as†
	cNuŒTe°Plugö
: 
public
 
Te°Plugö


117 
public
:

119 
NuŒTe°Plugö
();

120 
	mvútuÆ
 ~
	$NuŒTe°Plugö
()

125 
vútuÆ
 
	`runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

126 
vútuÆ
 
	`runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

128 
NuŒTe°Plugö
* 
	`ö°™˚
();

129 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestRegistry.h

36 #i‚de‡
D_Te°Regi°ry_h


37 
	#D_Te°Regi°ry_h


	)

39 
	~"Sim∂eSåög.h
"

41 
˛ass
 
	gUã°
;

42 
˛ass
 
	gTe°Resu…
;

43 
˛ass
 
	gTe°Plugö
;

45 ˛as†
	cTe°Regi°ry


47 
	mpublic
:

48 
Te°Regi°ry
();

49 
	mvútuÆ
 ~
Te°Regi°ry
();

51 
vútuÆ
 
addTe°
(
Uã°
 *
ã°
);

52 
vútuÆ
 
unDoLa°AddTe°
();

53 
vútuÆ
 
cou¡Te°s
();

54 
vútuÆ
 
runAŒTe°s
(
Te°Resu…
& 
ªsu…
);

55 
vútuÆ
 
«meFûãr
(
Sim∂eSåög
);

56 
vútuÆ
 
groupFûãr
(
Sim∂eSåög
);

58 
vútuÆ
 
ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
);

59 
vútuÆ
 
ª£tPlugös
();

60 
vútuÆ
 
Te°Plugö
* 
gëFú°Plugö
();

61 
vútuÆ
 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

64 
Sim∂eSåög
 
gëGroupFûãr
();

65 
Sim∂eSåög
 
gëNameFûãr
();

67 
vútuÆ
 
Uã°
* 
gëFú°Te°
();

68 
vútuÆ
 
Uã°
* 
gëLa°Te°
();

69 
vútuÆ
 
Uã°
* 
gëTe°WôhNext
(Uã°* 
ã°
);

71 
Te°Regi°ry
* 
gëCuºítRegi°ry
();

72 
vútuÆ
 
£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
);

73 
˛ónup
();

74 
	m¥iv©e
:

76 
boﬁ
 
ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
);

77 
boﬁ
 
ídOfGroup
(
Uã°
* 
ã°
);

79 
Uã°
 * 
	mã°s
;

80 
Sim∂eSåög
* 
	m«meFûãr_
;

81 
Sim∂eSåög
* 
	mgroupFûãr_
;

82 
Te°Plugö
* 
	mfú°Plugö_
;

83 
Te°Regi°ry
* 
	mcuºítRegi°ry_
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestResult.h

38 #i‚de‡
D_Te°Resu…_h


39 
	#D_Te°Resu…_h


	)

41 
˛ass
 
	gFaûuª
;

42 
˛ass
 
	gTe°Ouçut
;

43 
˛ass
 
	gUã°
;

45 ˛as†
	cTe°Resu…


47 
	mpublic
:

48 
Te°Resu…
(
Te°Ouçut
&);

49 
	mvútuÆ
 ~
Te°Resu…
();

51 
vútuÆ
 
ã°sSèπed
();

52 
vútuÆ
 
ã°sEnded
();

53 
vútuÆ
 
cuºítGroupSèπed
(
Uã°
* 
ã°
);

54 
vútuÆ
 
cuºítGroupEnded
(
Uã°
* 
ã°
);

55 
vútuÆ
 
cuºítTe°Sèπed
(
Uã°
* 
ã°
);

56 
vútuÆ
 
cuºítTe°Ended
(
Uã°
* 
ã°
);

58 
vútuÆ
 
cou¡Te°
();

59 
vútuÆ
 
cou¡Run
();

60 
vútuÆ
 
cou¡Check
();

61 
vútuÆ
 
cou¡FûãªdOut
();

62 
vútuÆ
 
cou¡Ign‹ed
();

63 
vútuÆ
 
addFaûuª
(c⁄° 
Faûuª
& 
Áûuª
);

64 
vútuÆ
 
¥öt
(c⁄° * 
ãxt
);

65 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

67 
	$gëTe°Cou¡
() const

69  
ã°Cou¡
;

71 
	$gëRunCou¡
() const

73  
runCou¡
;

74 
	}
}

75 
	$gëCheckCou¡
() const

77  
checkCou¡
;

78 
	}
}

79 
	$gëFûãªdOutCou¡
() const

81  
fûãªdOutCou¡
;

82 
	}
}

83 
	$gëIgn‹edCou¡
() const

85  
ign‹edCou¡
;

86 
	}
}

87 
	$gëFaûuªCou¡
() const

89  
ÁûuªCou¡
;

90 
	}
}

92 
	$gëTŸÆExecuti⁄Time
() const;

93 
	`£tTŸÆExecuti⁄Time
(
exTime
);

95 
	$gëCuºítTe°TŸÆExecuti⁄Time
() const;

96 
	$gëCuºítGroupTŸÆExecuti⁄Time
() const;

97 
¥iv©e
:

99 
Te°Ouçut
& 
ouçut
;

100 
ã°Cou¡
;

101 
runCou¡
;

102 
checkCou¡
;

103 
ÁûuªCou¡
;

104 
fûãªdOutCou¡
;

105 
ign‹edCou¡
;

106 
tŸÆExecuti⁄Time
;

107 
timeSèπed
;

108 
cuºítTe°TimeSèπed
;

109 
cuºítTe°TŸÆExecuti⁄Time
;

110 
cuºítGroupTimeSèπed
;

111 
cuºítGroupTŸÆExecuti⁄Time
;

112 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestTestingFixture.h

28 #i‚de‡
D_Te°Te°ögFixtuª_H


29 
	#D_Te°Te°ögFixtuª_H


	)

31 ˛as†
	cTe°Te°ögFixtuª


33 
	mpublic
:

35 
	$Te°Te°ögFixtuª
()

37 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

38 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

39 
gíTe°
 = 
√w
 
	`ExecFun˘i⁄Te°
();

40 
ªgi°ry
 = 
√w
 
	`Te°Regi°ry
();

42 
ªgi°ry
->
	`£tCuºítRegi°ry
(registry);

43 
ªgi°ry
->
	`addTe°
(
gíTe°
);

47 
vútuÆ
 ~
	$Te°Te°ögFixtuª
()

49 
ªgi°ry
->
	`£tCuºítRegi°ry
(0);

50 
dñëe
 
ªgi°ry
;

51 
dñëe
 
ªsu…
;

52 
dñëe
 
ouçut
;

53 
dñëe
 
gíTe°
;

54 
	}
}

56 
£tTe°Fun˘i⁄
((*
ã°Fun˘i⁄
)())

58 
gíTe°
->
_ã°Fun˘i⁄
 = 
ã°Fun˘i⁄
;

59 
	}
}

61 
£tSëup
((*
£tupFun˘i⁄
)())

63 
gíTe°
->
£tup_
 = 
£tupFun˘i⁄
;

64 
	}
}

66 
£tTórdown
((*
ã¨downFun˘i⁄
)())

68 
gíTe°
->
ã¨down_
 = 
ã¨downFun˘i⁄
;

69 
	}
}

71 
	$runAŒTe°s
()

73 
ªgi°ry
->
	`runAŒTe°s
(*
ªsu…
);

74 
	}
}

76 
	$gëFaûuªCou¡
()

78  
ªsu…
->
	`gëFaûuªCou¡
();

79 
	}
}

81 
	$as£πPrötC⁄èös
(c⁄° 
Sim∂eSåög
& 
c⁄èös
)

83 
	`as£πPrötC⁄èös
(
ouçut
, 
c⁄èös
);

84 
	}
}

86 
	$as£πPrötC⁄èös
(
SåögBuf„rTe°Ouçut
* 
ouçut
,

87 c⁄° 
Sim∂eSåög
& 
c⁄èös
)

89 i‡(
ouçut
->
	`gëOuçut
().
	`c⁄èös
(
c⁄èös
)) ;

90 
Sim∂eSåög
 
	`mesßge
("\tActual <");

91 
mesßge
 +
ouçut
->
	`gëOuçut
().
	`asCh¨Såög
();

92 
mesßge
 += ">\n";

93 
mesßge
 += "\tdidÇot contain <";

94 
mesßge
 +
c⁄èös
.
	`asCh¨Såög
();

95 
mesßge
 += ">\n";

96 
	`FAIL
(
mesßge
.
	`asCh¨Såög
());

98 
	}
}

100 
Te°Regi°ry
* 
	gªgi°ry
;

101 
ExecFun˘i⁄Te°
* 
	ggíTe°
;

102 
SåögBuf„rTe°Ouçut
* 
	gouçut
;

103 
Te°Resu…
 * 
	gªsu…
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Utest.h

31 #i‚de‡
D_UTe°_h


32 
	#D_UTe°_h


	)

34 
	~"Sim∂eSåög.h
"

45 
˛ass
 
	gTe°Resu…
;

46 
˛ass
 
	gTe°Plugö
;

48 ˛as†
	cUã°


50 
	mpublic
:

52 
Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

53 
löeNumbî
);

55 
	mvútuÆ
 ~
Uã°
();

57 
vútuÆ
 
	$ã°Body
()

62 
vútuÆ
 
	`run
(
Te°Resu…
& 
ªsu…
);

63 
vútuÆ
 
	`runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

64 
vútuÆ
 
Sim∂eSåög
 
	$gëF‹m©ãdName
() const;

66 
vútuÆ
 
Uã°
* 
	`addTe°
(Uã°* 
ã°
);

67 
vútuÆ
 
Uã°
 *
	$gëNext
() const;

68 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

69 
vútuÆ
 
	`cou¡Te°s
();

71 
boﬁ
 
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
,

72 c⁄° 
Sim∂eSåög
& 
«meFûãr
) const;

73 c⁄° 
Sim∂eSåög
 
	$gëName
() const;

74 c⁄° 
Sim∂eSåög
 
	$gëGroup
() const;

75 c⁄° 
Sim∂eSåög
 
	$gëFûe
() const;

76 
	$gëLöeNumbî
() const;

77 
vútuÆ
 c⁄° * 
	$gëProgªssIndiˇt‹
() const;

79 
vútuÆ
 
	`£tup
();

80 
vútuÆ
 
	`ã¨down
();

82 
Te°Resu…
* 
	`gëTe°Resu…
();

83 
Uã°
* 
	`gëCuºít
();

85 
vútuÆ
 
boﬁ
 
	`as£πTrue
(boﬁ 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

86 c⁄° * 
fûeName
, 
löeNumbî
);

87 
vútuÆ
 
boﬁ
 
	`as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

88 c⁄° * 
fûeName
, 
löeNumbî
);

89 
vútuÆ
 
boﬁ
 
	`as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

90 c⁄° * 
fûeName
, 
löeNumbî
);

91 
vútuÆ
 
boﬁ
 
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

92 c⁄° * 
fûeName
, 
löeNumbî
);

93 
vútuÆ
 
boﬁ
 
	`as£πPoöãrsEquÆ
(* 
ex≥˘ed
, * 
a˘uÆ
,

94 c⁄° * 
fûeName
, 
löeNumbî
);

95 
vútuÆ
 
boﬁ
 
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

96 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

97 
vútuÆ
 
	`Áû
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
);

98 
vútuÆ
 
	`¥öt
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
);

99 
vútuÆ
 
	`¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
,

100 
löeNumbî
);

102 
	`£tFûeName
(c⁄° * 
fûeName
);

103 
	`£tLöeNumbî
(
löeNumbî
);

104 
	`£tGroupName
(c⁄° * 
groupName
);

105 
	`£tTe°Name
(c⁄° * 
ã°Name
);

107 
	`exôCuºítTe°
();

108 
¥Ÿe˘ed
:

109 
vútuÆ
 
	`runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

111 
vútuÆ
 
	`execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
,

112 
Te°Resu…
& 
ªsu…
);

113 
vútuÆ
 
boﬁ
 
	`execuãPœtf‹mS≥cificSëup
();

114 
vútuÆ
 
	`execuãPœtf‹mS≥cificTe°Body
();

115 
vútuÆ
 
	`execuãPœtf‹mS≥cificTórdown
();

116 
vútuÆ
 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

118 
	`Uã°
();

120 
	`Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

121 
löeNumbî
, 
Uã°
* 
√xtTe°
);

123 
vútuÆ
 
Sim∂eSåög
 
	$gëMa¸oName
() const;

125 
¥iv©e
:

127 c⁄° * 
group_
;

128 c⁄° * 
«me_
;

129 c⁄° * 
fûe_
;

130 
löeNumbî_
;

131 
Uã°
 *
√xt_
;

132 
Te°Resu…
* 
ã°Resu…_
;

133 
Uã°
* 
cuºítTe°_
;

134 
	}
};

138 ˛as†
	cNuŒTe°
: 
public
 
Uã°


140 
public
:

141 
ex∂icô
 
NuŒTe°
();

142 
	mvútuÆ
 ~
NuŒTe°
();

144 
	$ã°Body
()

148 
NuŒTe°
& 
	`ö°™˚
();

150 
vútuÆ
 
	`cou¡Te°s
();

151 
vútuÆ
 
Uã°
*
	$gëNext
() const;

152 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

153 
¥iv©e
:

155 
	`NuŒTe°
(c⁄° 
NuŒTe°
&);

156 
NuŒTe°
& 
›î©‹
=(const NullTest&);

158 
	}
};

162 ˛as†
	cExecFun˘i⁄Te°
: 
public
 
Uã°


164 
public
:

165 (*
£tup_
)();

166 (*
	mã¨down_
)();

167 (*
	m_ã°Fun˘i⁄
)();

168 
ExecFun˘i⁄Te°
((*
£tup
)(Ë0, (*
ã¨down
)() = 0) :

169 
Uã°
("Gíîic", "Gíîic", "Gíîic", 1), 
£tup_
(
£tup
), 
ã¨down_
(

170 
ã¨down
), 
	$_ã°Fun˘i⁄
(0)

173 
	$ã°Body
()

175 i‡(
_ã°Fun˘i⁄
Ë
	`_ã°Fun˘i⁄
();

176 
	}
}

177 
vútuÆ
 
	$£tup
()

179 i‡(
£tup_
Ë
	`£tup_
();

180 
	}
}

181 
vútuÆ
 
	$ã¨down
()

183 i‡(
ã¨down_
Ë
	`ã¨down_
();

184 
	}
}

189 ˛as†
	cTe°In°ÆÀr


191 
	mpublic
:

192 
ex∂icô
 
Te°In°ÆÀr
(
Uã°
*, c⁄° * 
groupName
, c⁄° * 
ã°Name
,

193 c⁄° * 
fûeName
, 
löeNumbî
);

194 
	mvútuÆ
 ~
Te°In°ÆÀr
();

196 
unDo
();

198 
	m¥iv©e
:

200 
Te°In°ÆÀr
(const TestInstaller&);

201 
	mTe°In°ÆÀr
& 
	m›î©‹
=(c⁄° 
Te°In°ÆÀr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\UtestMacros.h

28 #i‚de‡
D_UTe°Ma¸os_h


29 
	#D_UTe°Ma¸os_h


	)

40 
	#TEST_GROUP_BASE
(
ã°Group
, 
ba£˛ass
) \

41 
exã∫Te°Group
##
ã°Group
 = 0; \

42 
CµUTe°Group
##
ã°Group
 : 
public
 
ba£˛ass


	)

44 
	#TEST_BASE
(
ã°Ba£Cœss
) \

45 
ã°Ba£Cœss
 : 
public
 
Uã°


	)

47 
	#TEST_GROUP
(
ã°Group
) \

48 
	`TEST_GROUP_BASE
(
ã°Group
, 
Uã°
)

	)

50 
	#TEST_SETUP
() \

51 
vútuÆ
 
	`£tup
()

	)

53 
	#TEST_TEARDOWN
() \

54 
vútuÆ
 
	`ã¨down
()

	)

56 
	#TEST
(
ã°Group
, 
ã°Name
) \

57 
˛ass
 
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
CµUTe°Group
##testGroup \

58 { 
public
: 
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
CµUTe°Group
##
	`ã°Group
 () {} \

59 
	`ã°Body
(); } \

60 
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

61 
Te°In°ÆÀr
 
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

62 
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

64 
	#IGNORE_TEST
(
ã°Group
, 
ã°Name
)\

65 
˛ass
 
ã°Group
##
ã°Name
##
Te°
 : 
public
 
CµUTe°Group
##testGroup \

66 { 
public
: 
ã°Group
##
ã°Name
##
	`Te°
 (Ë: 
CµUTe°Group
##
	`ã°Group
 () {} \

67 
vútuÆ
 
	`run
 (
Te°Resu…
& 
ªsu…
) { \

68 
ªsu…
.
	`cou¡Ign‹ed
(); } \

69 
vútuÆ
 c⁄° * 
	`gëProgªssIndiˇt‹
() const { "!";} \

70 
¥Ÿe˘ed
: 
vútuÆ
 
Sim∂eSåög
 
	`gëMa¸oName
() const \

72 
public
: 
	`ã°BodyTh©NevîRuns
 (); } \

73 
ã°Group
##
ã°Name
##
In°™˚
; \

74 
Te°In°ÆÀr
 
ã°Group
##
ã°Name
##
	`In°ÆÀr
(&ã°Group##ã°Name##
In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

75 
ã°Group
##
ã°Name
##
Te°
::
	`ã°BodyTh©NevîRuns
 ()

	)

77 
	#IMPORT_TEST_GROUP
(
ã°Group
) \

78 
exã∫Te°Group
##
ã°Group
;\

79 * 
p
##
ã°Group
 = &
exã∫Te°Group
##
	)
testGroup

83 
	#CHECK_LOCATION
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)\

84 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πTrue
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

86 
	#CHECK
(
c⁄dôi⁄
)\

87 
	`CHECK_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
, 
__LINE__
)

	)

90 
	#CHECK_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

91 
	`CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

93 
	#CHECK_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

94 i‡((
ex≥˘ed
Ë!(
a˘uÆ
))\

97 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();\

98 
EquÆsFaûuª
 
	`_f
(
Uã°
::
	`gëCuºít
(), 
fûe
, 
löe
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)); \

99 
Uã°
::
	`gëTe°Resu…
()->
	`addFaûuª
(
_f
);\

101 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
(); \

104 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();

	)

108 
	#STRCMP_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

109 
	`STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

111 
	#STRCMP_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

112 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πC°rEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

114 
	#STRCMP_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

115 
	`STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

117 
	#STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

118 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πC°rC⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

121 
	#LONGS_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

122 
	`LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
, 
__LINE__
)

	)

124 
	#LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

125 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

127 
	#BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

128 
	`LONGS_EQUAL
((
ex≥˘ed
Ë& 0xff,(
a˘uÆ
Ë& 0xff)

	)

130 
	#POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

131 
	`POINTERS_EQUAL_LOCATION
((
ex≥˘ed
),(
a˘uÆ
), 
__FILE__
, 
__LINE__
)

	)

133 
	#POINTERS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

134 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πPoöãrsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

137 
	#DOUBLES_EQUAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
)\

138 
	`DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

140 
	#DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
fûe
,
löe
)\

141 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

145 #i‚de‡
FAIL


146 
	#FAIL
(
ãxt
)\

147 
	`FAIL_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

149 
	#FAIL_LOCATION
(
ãxt
, 
fûe
, 
löe
)\

150 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

153 
	#FAIL_TEST
(
ãxt
)\

154 
	`FAIL_TEST_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

156 
	#FAIL_TEST_LOCATION
(
ãxt
, 
fûe
,
löe
)\

157 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

159 
	#UT_PRINT_LOCATION
(
ãxt
, 
fûe
, 
löe
) \

160 { 
Uã°
::
	`gëCuºít
()->
	`¥öt
(
ãxt
, 
fûe
, 
löe
); }

	)

162 
	#UT_PRINT
(
ãxt
) \

163 
	`UT_PRINT_LOCATION
(
ãxt
, 
__FILE__
, 
__LINE__
)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\VirtualCall.h

1 #i‚de‡
D_VútuÆCÆl_H


2 
	#D_VútuÆCÆl_H


	)

4 
	#£nd
(
obj
,
msg
)\

5 ((
obj
)->
	`msg
(obj))

	)

7 
	#£nd1
(
obj
,
msg
,
¨g0
)\

8 ((
obj
)->
	`msg
((obj),(
¨g0
)))

	)

10 
	#£nd2
(
obj
,
msg
,
¨g0
,
¨g1
)\

11 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
)))

	)

13 
	#£nd3
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
)\

14 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
)))

	)

16 
	#£nd4
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
,
¨g3
)\

17 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
),(
¨g3
)))

	)

19 
	#vBöd
(
obj
,
msg
,
√wMëhod
)\

20 (
obj
->
msg
=&
√wMëhod
)

	)

22 
	#ˇ°ToDe°royî
(
Cœss
Ë(Cœss* (*)(Cœss*))

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Gcc\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\StarterKit\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Symbian\Platform.h

2 #i‚de‡
PLATFORM_H_


3 
	#PLATFORM_H_


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\Platform.h

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4786)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢ame
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

14 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	gÁkeR™
 = 0;

7 
	~"CœssName.h
"

8 
vútuÆFun˘i⁄_ª«meThis_Áke
(
CœssName
*)

10 
ÁkeR™
 = 1;

14 
	$TEST_GROUP
(
CœssName
)

16 
CœssName
* 
aCœssName
;

18 
	`£tup
()

20 
aCœssName
 = 
	`CœssName_Cª©e
();

21 
ÁkeR™
 = 0;

22 
aCœssName
->
vútuÆFun˘i⁄_ª«meThis
 = 
vútuÆFun˘i⁄_ª«meThis_Áke
;

25 
	`ã¨down
()

27 
	`CœssName_De°roy
(
aCœssName
);

29 
	}
};

31 
	$TEST
(
CœssName
, 
Fake
)

33 
aCœssName
->
	`vútuÆFun˘i⁄_ª«meThis
(aClassName);

34 
	`LONGS_EQUAL
(1, 
ÁkeR™
);

35 
	}
}

37 
	$TEST
(
CœssName
, 
Cª©e
)

39 
	`FAIL
("Start here");

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢amePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"CœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

5 ˛as†
	cCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


7 
CPPUNIT_TEST_SUITE
(
CœssNameTe°
);

8 
CPPUNIT_TEST
(
ã°Cª©e
);

9 
CPPUNIT_TEST_SUITE_END
();

11 
CœssName
* 
	maCœssName
;

13 
	mpublic
:

15 
	$£tUp
()

17 
aCœssName
 = 
√w
 
	`CœssName
();

20 
	$ã¨Down
()

22 
dñëe
 
aCœssName
;

23 
	}
}

25 
	$ã°Cª©e
()

27 
	`CPPUNIT_FAIL
("Start here");

28 
	}
}

31 
CPPUNIT_TEST_SUITE_REGISTRATION
(
CœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeCœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

4 
	~"MockCœssName.h
"

6 ˛as†
	cMockCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


8 
CPPUNIT_TEST_SUITE
(
MockCœssNameTe°
);

9 
CPPUNIT_TEST
(
ã°Cª©e
);

10 
CPPUNIT_TEST_SUITE_END
();

12 
CœssName
* 
	maCœssName
;

13 
MockCœssName
* 
	mmockCœssName
;

15 
	mpublic
:

17 
	$£tUp
()

19 
mockCœssName
 = 
√w
 
	`MockCœssName
();

20 
aCœssName
 = 
mockCœssName
;

23 
	$ã¨Down
()

25 
dñëe
 
aCœssName
;

26 
	}
}

28 
	$ã°Cª©e
()

30 
	`CPPUNIT_FAIL
("Start here");

31 
	}
}

34 
CPPUNIT_TEST_SUITE_REGISTRATION
(
MockCœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\XTest.cpp

3 
	~"X.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
X
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
X
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.c

1 
	~"CœssName.h
"

2 
	~"IO.h
"

6 
	$CœssName_Cª©e
()

8 
	}
}

10 
	$CœssName_De°roy
()

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
	~<°döt.h
>

11 
CœssName_Cª©e
();

12 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssName
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssNamePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameTest.cpp

1 
	~"CœssName.h
"

4 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	$TEST_GROUP
(
CœssName
)

8 
CœssName
* 
aCœssName
;

10 
	`£tup
()

12 
aCœssName
 = 
√w
 
	`CœssName
();

14 
	`ã¨down
()

16 
dñëe
 
aCœssName
;

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.c

1 
	~"CœssName.h
"

4 
	$CœssName
()

6 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceTest.cpp

1 
	~"CœssName.h
"

2 
	~"MockCœssName.h
"

5 
	~"CµUTe°/Te°H¨√ss.h
"

7 
	$TEST_GROUP
(
CœssName
)

9 
CœssName
* 
aCœssName
;

10 
MockCœssName
* 
mockCœssName
;

12 
	`£tup
()

14 
mockCœssName
 = 
√w
 
	`MockCœssName
();

15 
aCœssName
 = 
mockCœssName
;

17 
	`ã¨down
()

19 
dñëe
 
aCœssName
;

21 
	}
};

23 
	$TEST
(
CœssName
, 
Cª©e
)

25 
	`FAIL
("Start here");

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineArguments.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gComm™dLöeArgumíts
::
	$Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
,

33 
Te°Plugö
* 
∂ugö
) :

34 
	`ac
(
ac
), 
	`av
(
av
), 
	`∂ugö_
(
∂ugö
), 
	`vîbo£_
(
Ál£
), 
	`ª≥©_
(1), 
	`groupFûãr_
(

35 ""), 
	`«meFûãr_
(""), 
	$ouçutTy≥_
(
OUTPUT_ECLIPSE
)

37 
	}
}

39 
	gComm™dLöeArgumíts
::~
	$Comm™dLöeArgumíts
()

41 
	}
}

43 
boﬁ
 
Comm™dLöeArgumíts
::
	$∑r£
()

45 
boﬁ
 
c‹ª˘P¨amëîs
 = 
åue
;

46 
i
 = 1; i < 
ac
; i++) {

47 
Sim∂eSåög
 
¨gumít
 = 
av
[
i
];

48 i‡(
¨gumít
 ="-v"Ë
vîbo£_
 = 
åue
;

49 i‡(
¨gumít
.
	`°¨tsWôh
("-r")Ë
	`SëRïótCou¡
(
ac
, 
av
, 
i
);

50 i‡(
¨gumít
.
	`°¨tsWôh
("-g")Ë
	`SëGroupFûãr
(
ac
, 
av
, 
i
);

51 i‡(
¨gumít
.
	`°¨tsWôh
("-n")Ë
	`SëNameFûãr
(
ac
, 
av
, 
i
);

52 i‡(
¨gumít
.
	`°¨tsWôh
("-o")Ë
c‹ª˘P¨amëîs
 = 
	`SëOuçutTy≥
(

53 
ac
, 
av
, 
i
);

54 i‡(
¨gumít
.
	`°¨tsWôh
("-p")Ë
c‹ª˘P¨amëîs


55 
∂ugö_
->
	`∑r£Argumíts
(
ac
, 
av
, 
i
);

56 
c‹ª˘P¨amëîs
 = 
Ál£
;

58 i‡(
c‹ª˘P¨amëîs
 =
Ál£
) {

59  
Ál£
;

62  
åue
;

63 
	}
}

65 c⁄° * 
	gComm™dLöeArgumíts
::
	$ußge
() const

68 
	}
}

70 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isVîbo£
() const

72  
vîbo£_
;

73 
	}
}

75 
	gComm™dLöeArgumíts
::
	$gëRïótCou¡
() const

77  
ª≥©_
;

78 
	}
}

80 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëGroupFûãr
() const

82  
groupFûãr_
;

83 
	}
}

85 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëNameFûãr
() const

87  
«meFûãr_
;

88 
	}
}

90 
	gComm™dLöeArgumíts
::
	$SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
i
)

92 
ª≥©_
 = 0;

94 
Sim∂eSåög
 
	`ª≥©P¨amëî
(
av
[
i
]);

95 i‡(
ª≥©P¨amëî
.
	`size
(Ë> 2Ë
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
] + 2);

96 i‡(
i
 + 1 < 
ac
) {

97 
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
 + 1]);

98 i‡(
ª≥©_
 !0Ë
i
++;

101 i‡(0 =
ª≥©_
)Ñepeat_ = 2;

103 
	}
}

105 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëP¨amëîFõld
(
ac
, c⁄° ** 
av
,

106 & 
i
)

108 
Sim∂eSåög
 
	`∑ømëî
(
av
[
i
]);

109 i‡(
∑ømëî
.
	`size
(Ë> 2Ë 
av
[
i
] + 2;

110 i‡(
i
 + 1 < 
ac
Ë 
av
[++i];

112 
	}
}

114 
	gComm™dLöeArgumíts
::
	$SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

116 
Sim∂eSåög
 
gf
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

117 
groupFûãr_
 = 
gf
;

118 
	}
}

120 
	gComm™dLöeArgumíts
::
	$SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

122 
«meFûãr_
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

123 
	}
}

125 
boﬁ
 
	gComm™dLöeArgumíts
::
	$SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
i
)

127 
Sim∂eSåög
 
ouçutTy≥
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

128 i‡(
ouçutTy≥
.
	`size
(Ë=0Ë 
Ál£
;

130 i‡(
ouçutTy≥
 == "normal" || outputType == "eclipse") {

131 
ouçutTy≥_
 = 
OUTPUT_ECLIPSE
;

132  
åue
;

134 i‡(
ouçutTy≥
 == "junit") {

135 
ouçutTy≥_
 = 
OUTPUT_JUNIT
;

136  
åue
;

138  
Ál£
;

139 
	}
}

141 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isE˛ù£Ouçut
() const

143  
ouçutTy≥_
 =
OUTPUT_ECLIPSE
;

144 
	}
}

146 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isJUnôOuçut
() const

148  
ouçutTy≥_
 =
OUTPUT_JUNIT
;

149 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineTestRunner.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/JUnôTe°Ouçut.h
"

32 
	~"CµUTe°/Te°Regi°ry.h
"

34 
	gComm™dLöeTe°Ru¬î
::
	$Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
,

35 
Te°Ouçut
* 
ouçut
) :

36 
	`¨gc
(
ac
), 
	`¨gv
(
av
), 
	`ouçut_
(
ouçut
), 
	$jUnôOuçut
(
√w
 
JUnôTe°Ouçut
)

38 
	}
}

40 
	gComm™dLöeTe°Ru¬î
::~
	$Comm™dLöeTe°Ru¬î
()

42 
dñëe
 
¨gumíts
;

43 
dñëe
 
jUnôOuçut
;

44 
	}
}

46 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, ** 
av
)

48  
	`RunAŒTe°s
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
));

49 
	}
}

51 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, c⁄° ** 
av
)

53 
ªsu…
 = 0;

54 
C⁄sﬁeTe°Ouçut
 
ouçut
;

56 
Mem‹yLókW¨nögPlugö
 
	`memLókW¨n
(
DEF_PLUGIN_MEM_LEAK
);

58 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
memLókW¨n
);

61 
Comm™dLöeTe°Ru¬î
 
	`ru¬î
(
ac
, 
av
, &
ouçut
);

62 
ªsu…
 = 
ru¬î
.
	`runAŒTe°sMaö
();

65 i‡(
ªsu…
 == 0) {

66 
ouçut
 << 
memLókW¨n
.
	`FöÆRï‹t
(0);

68  
ªsu…
;

69 
	}
}

71 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°sMaö
()

73 
ã°Resu…
 = 0;

75 
SëPoöãrPlugö
 
	`pPlugö
(
DEF_PLUGIN_SET_POINTER
);

76 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
pPlugö
);

78 i‡(!
	`∑r£Argumíts
(
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`gëFú°Plugö
()))  1;

80 
ã°Resu…
 = 
	`runAŒTe°s
();

82 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`˛ónup
();

83  
ã°Resu…
;

84 
	}
}

86 
	gComm™dLöeTe°Ru¬î
::
	$öôülizeTe°Run
()

88 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`groupFûãr
(
¨gumíts
->
	`gëGroupFûãr
());

89 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`«meFûãr
(
¨gumíts
->
	`gëNameFûãr
());

90 i‡(
¨gumíts
->
	`isVîbo£
()Ë
ouçut_
->
	`vîbo£
();

91 
	}
}

93 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°s
()

95 
	`öôülizeTe°Run
();

96 
lo›Cou¡
 = 0;

97 
ÁûuªCou¡
 = 0;

98 
ª≥©_
 = 
¨gumíts
->
	`gëRïótCou¡
();

100 
lo›Cou¡
++ < 
ª≥©_
) {

101 
ouçut_
->
	`¥ötTe°Run
(
lo›Cou¡
, 
ª≥©_
);

102 
Te°Resu…
 
	`å
(*
ouçut_
);

103 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`runAŒTe°s
(
å
);

104 
ÁûuªCou¡
 +
å
.
	`gëFaûuªCou¡
();

107  
ÁûuªCou¡
;

108 
	}
}

110 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$∑r£Argumíts
(
Te°Plugö
* 
∂ugö
)

112 
¨gumíts
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
, 
∂ugö
);

113 i‡(
¨gumíts
->
	`∑r£
()) {

114 i‡(
¨gumíts
->
	`isJUnôOuçut
()) {

115 
ouçut_
 = 
jUnôOuçut
;

117  
åue
;

120 
ouçut_
->
	`¥öt
(
¨gumíts
->
	`ußge
());

121  
Ál£
;

123 
	}
}

125 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$isVîbo£
()

127  
¨gumíts
->
	`isVîbo£
();

128 
	}
}

130 
	gComm™dLöeTe°Ru¬î
::
	$gëRïótCou¡
()

132  
¨gumíts
->
	`gëRïótCou¡
();

133 
	}
}

135 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëGroupFûãr
()

137  
¨gumíts
->
	`gëGroupFûãr
();

138 
	}
}

140 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëNameFûãr
()

142  
¨gumíts
->
	`gëNameFûãr
();

143 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\OrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

32 
OrdîedTe°
* 
	gOrdîedTe°
::
_‹dîedTe°sHód
 = 0;

34 
	gOrdîedTe°
::
	$OrdîedTe°
() :

35 
	$_√xtOrdîedTe°
(0)

37 
	}
}

39 
OrdîedTe°
::~
	$OrdîedTe°
()

41 
	}
}

43 
OrdîedTe°
::
	$gëLevñ
()

45  
_Àvñ
;

46 
	}
}

48 
	gOrdîedTe°
::
	$£tLevñ
(
Àvñ
)

50 
_Àvñ
 = 
Àvñ
;

51 
	}
}

53 
	gOrdîedTe°
::
	$£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
)

55 
_‹dîedTe°sHód
 = 
ã°
;

56 
	}
}

58 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëOrdîedTe°Hód
()

60  
_‹dîedTe°sHód
;

61 
	}
}

63 
boﬁ
 
	gOrdîedTe°
::
	$fú°OrdîedTe°
()

65  (
	`gëOrdîedTe°Hód
() == 0);

66 
	}
}

68 
OrdîedTe°
* 
	gOrdîedTe°
::
	$addOrdîedTe°
(
OrdîedTe°
* 
ã°
)

70 
Uã°
::
	`addTe°
(
ã°
);

71 
_√xtOrdîedTe°
 = 
ã°
;

72  
this
;

73 
	}
}

75 
	gOrdîedTe°
::
	$addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
)

77 
Te°Regi°ry
 *
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

79 i‡(
ªg
->
	`gëFú°Te°
()->
	`isNuŒ
(Ë|| 
	`gëOrdîedTe°Hód
()

80 =
ªg
->
	`gëFú°Te°
()Ëªg->
	`addTe°
(
ã°
);

81 
ªg
->
	`gëTe°WôhNext
(
	`gëOrdîedTe°Hód
())->
	`addTe°
(
ã°
);

83 
ã°
->
_√xtOrdîedTe°
 = 
	`gëOrdîedTe°Hód
();

84 
	`£tOrdîedTe°Hód
(
ã°
);

85 
	}
}

87 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëNextOrdîedTe°
()

89  
_√xtOrdîedTe°
;

90 
	}
}

92 
	gOrdîedTe°In°ÆÀr
::
	$OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
,

93 c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

94 
löeNumbî
, 
Àvñ
)

96 
ã°
->
	`£tTe°Name
(
ã°Name
);

97 
ã°
->
	`£tGroupName
(
groupName
);

98 
ã°
->
	`£tFûeName
(
fûeName
);

99 
ã°
->
	`£tLöeNumbî
(
löeNumbî
);

100 
ã°
->
	`£tLevñ
(
Àvñ
);

102 i‡(
OrdîedTe°
::
	`fú°OrdîedTe°
()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(
ã°
);

103 
	`addOrdîedTe°InOrdî
(
ã°
);

104 
	}
}

106 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
)

108 i‡(
ã°
->
	`gëLevñ
(Ë< 
OrdîedTe°
::
	`gëOrdîedTe°Hód
()->gëLevñ()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(

109 
ã°
);

110 
	`addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
ã°
);

111 
	}
}

113 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(

114 
OrdîedTe°
* 
ã°
)

116 
OrdîedTe°
* 
cuºít
 = OrdîedTe°::
	`gëOrdîedTe°Hód
();

117 
cuºít
->
	`gëNextOrdîedTe°
()) {

119 i‡(
cuºít
->
	`gëNextOrdîedTe°
()->
	`gëLevñ
(Ë> 
ã°
->getLevel()) {

120 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

121 
cuºít
->
	`addOrdîedTe°
(
ã°
);

124 
cuºít
 = cuºít->
	`gëNextOrdîedTe°
();

126 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

127 
cuºít
->
	`addOrdîedTe°
(
ã°
);

128 
	}
}

130 
	gOrdîedTe°In°ÆÀr
::~
	$OrdîedTe°In°ÆÀr
()

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\SimpleStringExtensions.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

30 
Sim∂eSåög
 
SåögFrom
(c⁄° 
°d
::
°rög
& 
vÆue
)

32  
Sim∂eSåög
(
vÆue
.
c_°r
());

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\SimpleStringFromStdint.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
Sim∂eSåög
 
	$SåögFrom
(
uöt64_t
 
i
)

39 
	}
}

51 
Sim∂eSåög
 
	$SåögFrom
(
uöt32_t
 
i
)

53  
	`SåögFromF‹m©
("%10u (0x%08x)", 
i
, i);

54 
	}
}

56 
Sim∂eSåög
 
	$SåögFrom
(
uöt16_t
 
i
)

58  
	`SåögFromF‹m©
("%5u (0x%04x)", 
i
, i);

59 
	}
}

61 
Sim∂eSåög
 
	$SåögFrom
(
uöt8_t
 
i
)

63  
	`SåögFromF‹m©
("%3u (0x%02x)", 
i
, i);

64 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Failure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Faûuª.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	gFaûuª
::
	$Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
,

33 c⁄° 
Sim∂eSåög
& 
theMesßge
) :

34 
	`ã°Name
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName
(
fûeName
), 
	`löeNumbî
(

35 
löeNumbî
), 
	$mesßge
(
theMesßge
)

37 
	}
}

39 
	gFaûuª
::
	$Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

40 
	`ã°Name
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName
—e°->
	`gëFûe
()), 
	`löeNumbî
(

41 
ã°
->
	`gëLöeNumbî
()), 
	$mesßge
(
theMesßge
)

43 
	}
}

45 
	gFaûuª
::
	$Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNum
) :

46 
	`ã°Name
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName
(
fûeName
),

47 
	`löeNumbî
(
löeNum
), 
	`mesßge
("no message")

49 
	}
}

51 
	gFaûuª
::
	$Faûuª
(c⁄° 
Faûuª
& 
f
) :

52 
	`ã°Name
(
f
.
ã°Name
), 
	`fûeName
(f.
fûeName
), 
	`löeNumbî
(f.
löeNumbî
),

53 
	$mesßge
(
f
.
mesßge
)

55 
	}
}

57 
	gFaûuª
::~
	$Faûuª
()

59 
	}
}

61 
Sim∂eSåög
 
Faûuª
::
	$gëFûeName
() const

63  
fûeName
;

64 
	}
}

66 
Sim∂eSåög
 
	gFaûuª
::
	$gëTe°Name
() const

68  
ã°Name
;

69 
	}
}

71 
	gFaûuª
::
	$gëLöeNumbî
() const

73  
löeNumbî
;

74 
	}
}

76 
Sim∂eSåög
 
	gFaûuª
::
	$gëMesßge
() const

78  
mesßge
;

79 
	}
}

81 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
,

82 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
,

83 c⁄° 
Sim∂eSåög
& 
a˘uÆ
) :

84 
	$Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

87 c⁄° * 
f‹m©
 = "expected <%s>\n\tbut was <%s>";

88 
mesßge
 = 
	`SåögFromF‹m©
(
f‹m©
, 
ex≥˘ed
.
	`asCh¨Såög
(),

89 
a˘uÆ
.
	`asCh¨Såög
());

90 
	}
}

92 
	gC⁄èösFaûuª
::
	$C⁄èösFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
,

93 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
,

94 c⁄° 
Sim∂eSåög
& 
a˘uÆ
) :

95 
	$Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

98 c⁄° * 
f‹m©
 = "actual <%s>\n\tdidÇot contain <%s>";

99 
mesßge
 = 
	`SåögFromF‹m©
(
f‹m©
, 
a˘uÆ
.
	`asCh¨Såög
(),

100 
ex≥˘ed
.
	`asCh¨Såög
());

101 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\JUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	sJUnôTe°Ca£Resu…Node


36 
JUnôTe°Ca£Resu…Node
() :

37 
execTime_
(0), 
Áûuª_
(0), 
√xt_
(0)

41 
Sim∂eSåög
 
	m«me_
;

42 
	mexecTime_
;

43 
Faûuª
* 
	mÁûuª_
;

44 
JUnôTe°Ca£Resu…Node
* 
	m√xt_
;

47 
	sJUnôTe°GroupResu…


49 
JUnôTe°GroupResu…
() :

50 
ã°Cou¡_
(0), 
ÁûuªCou¡_
(0), 
groupExecTime_
(0), 
hód_
(0), 
èû_
(0)

54 
	mã°Cou¡_
;

55 
	mÁûuªCou¡_
;

56 
	m°¨tTime_
;

57 
	mgroupExecTime_
;

58 
Sim∂eSåög
 
	mgroup_
;

59 
JUnôTe°Ca£Resu…Node
* 
	mhód_
;

60 
JUnôTe°Ca£Resu…Node
* 
	mèû_
;

63 
	sJUnôTe°OuçutIm∂


65 
JUnôTe°GroupResu…
 
	mªsu…s_
;

66 
Pœtf‹mS≥cificFûe
 
	mfûe_
;

69 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

70 
	$im∂_
(
√w
 
JUnôTe°OuçutIm∂
)

72 
	}
}

74 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

76 
	`ª£tTe°GroupResu…
();

77 
dñëe
 
im∂_
;

78 
	}
}

80 
	gJUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

82 
im∂_
->
ªsu…s_
.
ã°Cou¡_
 = 0;

83 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
 = 0;

84 
im∂_
->
ªsu…s_
.
group_
 = "";

85 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

86 
cur
) {

87 
JUnôTe°Ca£Resu…Node
* 
tmp
 = 
cur
->
√xt_
;

89 i‡(
cur
->
Áûuª_
Ë
dñëe
 cur->failure_;

90 
dñëe
 
cur
;

91 
cur
 = 
tmp
;

93 
im∂_
->
ªsu…s_
.
hód_
 = 0;

94 
im∂_
->
ªsu…s_
.
èû_
 = 0;

95 
	}
}

97 
	gJUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

99 
	}
}

101 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

103 
	}
}

105 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

107 
im∂_
->
ªsu…s_
.
èû_
->
execTime_


108 
ªsu…
.
	`gëCuºítTe°TŸÆExecuti⁄Time
();

109 
	}
}

111 
	gJUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

113 
	}
}

115 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

117 
im∂_
->
ªsu…s_
.
groupExecTime_
 = 
ªsu…
.
	`gëCuºítGroupTŸÆExecuti⁄Time
();

118 
	`wrôeTe°GroupToFûe
();

119 
	`ª£tTe°GroupResu…
();

120 
	}
}

122 
	gJUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

124 
im∂_
->
ªsu…s_
.
ã°Cou¡_
++;

125 
im∂_
->
ªsu…s_
.
group_
 = 
ã°
.
	`gëGroup
();

126 
im∂_
->
ªsu…s_
.
°¨tTime_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

128 i‡(
im∂_
->
ªsu…s_
.
èû_
 == 0) {

129 
im∂_
->
ªsu…s_
.
hód_
 = im∂_->ªsu…s_.
èû_


130 
√w
 
JUnôTe°Ca£Resu…Node
;

133 
im∂_
->
ªsu…s_
.
èû_
->
√xt_
 = 
√w
 
JUnôTe°Ca£Resu…Node
;

134 
im∂_
->
ªsu…s_
.
èû_
 = im∂_->ªsu…s_.èû_->
√xt_
;

136 
im∂_
->
ªsu…s_
.
èû_
->
«me_
 = 
ã°
.
	`gëName
();

137 
	}
}

139 
Sim∂eSåög
 
	$¸óãFûeName
(c⁄° 
Sim∂eSåög
& 
group
)

141 
Sim∂eSåög
 
fûeName
 = "cpputest_";

142 
fûeName
 +
group
;

143 
fûeName
 += ".xml";

144  
fûeName
;

145 
	}
}

147 
	gJUnôTe°Ouçut
::
	$wrôeXmlHódî
()

149 
	`wrôeToFûe
("<?xml version=\"1.0\"Éncoding=\"UTF-8\" ?>\n");

150 
	}
}

152 
	gJUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

154 
Sim∂eSåög


155 
buf
 =

156 
	`SåögFromF‹m©
(

158 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
,

159 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

160 
im∂_
->
ªsu…s_
.
ã°Cou¡_
,

161 (Ë(
im∂_
->
ªsu…s_
.
groupExecTime_
 / 1000), () (impl_->results_.groupExecTime_ % 1000),

162 
	`GëPœtf‹mS≥cificTimeSåög
());

163 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

164 
	}
}

166 
	gJUnôTe°Ouçut
::
	$wrôePr›îtõs
()

168 
	`wrôeToFûe
("<properties>\n");

169 
	`wrôeToFûe
("</properties>\n");

170 
	}
}

172 
	gJUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

174 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

175 
cur
) {

176 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

178 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

179 
cur
->
«me_
.
	`asCh¨Såög
(), (Ë(cur->
execTime_
 / 1000), ()(cur->execTime_ % 1000));

180 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

182 i‡(
cur
->
Áûuª_
) {

183 
	`wrôeFaûuª
(
cur
);

185 
	`wrôeToFûe
("</testcase>\n");

186 
cur
 = cur->
√xt_
;

188 
	}
}

190 
	gJUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

192 
Sim∂eSåög
 
mesßge
 = 
node
->
Áûuª_
->
	`gëMesßge
().
	`asCh¨Såög
();

193 
mesßge
.
	`ª∂a˚
('"', '\'');

194 
mesßge
.
	`ª∂a˚
('<', '[');

195 
mesßge
.
	`ª∂a˚
('>', ']');

196 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

197 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

199 
node
->
Áûuª_
->
	`gëFûeName
().
	`asCh¨Såög
(),

200 
node
->
Áûuª_
->
	`gëLöeNumbî
(), 
mesßge
.
	`asCh¨Såög
());

201 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

202 
	`wrôeToFûe
("</failure>\n");

203 
	}
}

205 
	gJUnôTe°Ouçut
::
	$wrôeFûeEndög
()

207 
	`wrôeToFûe
("<system-out></system-out>\n");

208 
	`wrôeToFûe
("<system-err></system-err>\n");

209 
	`wrôeToFûe
("</testsuite>");

210 
	}
}

212 
	gJUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

214 
	`›íFûeF‹Wrôe
(
	`¸óãFûeName
(
im∂_
->
ªsu…s_
.
group_
));

215 
	`wrôeXmlHódî
();

216 
	`wrôeTe°SuôeSummîy
();

217 
	`wrôePr›îtõs
();

218 
	`wrôeTe°Ca£s
();

219 
	`wrôeFûeEndög
();

220 
	`˛o£Fûe
();

221 
	}
}

223 
	gJUnôTe°Ouçut
::
	$vîbo£
()

225 
	}
}

227 
JUnôTe°Ouçut
::
	$¥öt
(const *)

229 
	}
}

231 
JUnôTe°Ouçut
::
	$¥öt
()

233 
	}
}

235 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

237 i‡(
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 == 0) {

238 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
++;

239 
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 = 
√w
 
	`Faûuª
(
Áûuª
);

241 
	}
}

243 
	gJUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

245 
	}
}

247 
	gJUnôTe°Ouçut
::
	$Êush
()

249 
	}
}

251 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

253 
im∂_
->
fûe_
 = 
	`Pœtf‹mS≥cificFO≥n
(
fûeName
.
	`asCh¨Såög
(), "w");

254 
	}
}

256 
	gJUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

258 
	`Pœtf‹mS≥cificFPuts
(
buf„r
.
	`asCh¨Såög
(), 
im∂_
->
fûe_
);

259 
	}
}

261 
	gJUnôTe°Ouçut
::
	$˛o£Fûe
()

263 
	`Pœtf‹mS≥cificFClo£
(
im∂_
->
fûe_
);

264 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$checkedMÆloc
(
size_t
 
size
)

34 * 
mem
 = (*Ë
	`Pœtf‹mS≥cificMÆloc
(
size
);

35 i‡(
mem
 =0)
	`FAIL
("mallocÑeturnedÇulÖointer");

36  
mem
;

37 
	}
}

39 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAŒoˇt‹
 = 0;

40 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAºayAŒoˇt‹
 = 0;

41 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítMÆlocAŒoˇt‹
 = 0;

43 
	gMem‹yLókAŒoˇt‹
::
	$isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

45  
	`Pœtf‹mS≥cificSåCmp
(
this
->
	`«me
(), 
Æloˇt‹
->name()) == 0;

46 
	}
}

48 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

50 
cuºítNewAŒoˇt‹
 = 
Æloˇt‹
;

51 
	}
}

53 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAŒoˇt‹
()

55 i‡(
cuºítNewAŒoˇt‹
 == 0)

56 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

57  
cuºítNewAŒoˇt‹
;

58 
	}
}

60 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹ToDeÁu…
()

62 
cuºítNewAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

63 
	}
}

65 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

67 
cuºítNewAºayAŒoˇt‹
 = 
Æloˇt‹
;

68 
	}
}

70 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAºayAŒoˇt‹
()

72 i‡(
cuºítNewAºayAŒoˇt‹
 == 0)

73 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

74  
cuºítNewAºayAŒoˇt‹
;

75 
	}
}

77 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹ToDeÁu…
()

79 
cuºítNewAºayAŒoˇt‹
 = 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

80 
	}
}

82 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

84 
cuºítMÆlocAŒoˇt‹
 = 
Æloˇt‹
;

85 
	}
}

87 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítMÆlocAŒoˇt‹
()

89 i‡(
cuºítMÆlocAŒoˇt‹
 == 0)

90 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

91  
cuºítMÆlocAŒoˇt‹
;

92 
	}
}

94 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹ToDeÁu…
()

96 
cuºítMÆlocAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

97 
	}
}

100 * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

102  
	`checkedMÆloc
(
size
);

103 
	}
}

105 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

107 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

108 
	}
}

110 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$«me
()

113 
	}
}

115 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_«me
()

118 
	}
}

120 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_«me
()

123 
	}
}

125 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dMÆlocAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

127 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

128  &
Æloˇt‹
;

129 
	}
}

131 * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

133  
	`checkedMÆloc
(
size
);

134 
	}
}

136 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

138 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

139 
	}
}

141 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$«me
()

144 
	}
}

146 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_«me
()

149 
	}
}

151 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_«me
()

154 
	}
}

156 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

158 
Sènd¨dNewAŒoˇt‹
 
Æloˇt‹
;

159  &
Æloˇt‹
;

160 
	}
}

162 * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

164  
	`checkedMÆloc
(
size
);

165 
	}
}

167 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

169 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

170 
	}
}

172 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$«me
()

175 
	}
}

177 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_«me
()

180 
	}
}

182 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_«me
()

185 
	}
}

187 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAºayAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

189 
Sènd¨dNewAºayAŒoˇt‹
 
Æloˇt‹
;

190  &
Æloˇt‹
;

191 
	}
}

192 * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

195 
	}
}

197 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

199 
	}
}

201 c⁄° * 
NuŒUnknownAŒoˇt‹
::
	$«me
()

204 
	}
}

206 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_«me
()

209 
	}
}

211 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_«me
()

214 
	}
}

216 
Mem‹yLókAŒoˇt‹
* 
	gNuŒUnknownAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

218 
NuŒUnknownAŒoˇt‹
 
Æloˇt‹
;

219  &
Æloˇt‹
;

220 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakDetector.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	#UNKNOWN
 ((*)("<unknown>"))

	)

34 
	gSim∂eSåögBuf„r
::
	$Sim∂eSåögBuf„r
() :

35 
	$posôi⁄s_fûÀd
(0)

37 
	}
}

40 
	gSim∂eSåögBuf„r
::
	$˛ór
()

42 
posôi⁄s_fûÀd
 = 0;

43 
buf„r
[0] = '\0';

44 
	}
}

46 
	gSim∂eSåögBuf„r
::
	$add
(c⁄° * 
f‹m©
, ...)

48 
cou¡
 = 0;

49 
va_li°
 
¨gumíts
;

50 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

51 
cou¡
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf„r
 + 
posôi⁄s_fûÀd
,

52 
SIMPLE_STRING_BUFFER_LEN
 - 
posôi⁄s_fûÀd
, 
f‹m©
, 
¨gumíts
);

53 i‡(
cou¡
 > 0Ë
posôi⁄s_fûÀd
 += count;

54 
	`va_íd
(
¨gumíts
);

55 
	}
}

57 * 
	gSim∂eSåögBuf„r
::
	$toSåög
()

59  
buf„r
;

60 
	}
}

64 
	gMem‹yLókDëe˘‹Li°
::
	$öôNode
(
Mem‹yLókDëe˘‹Node
* 
node
,

65 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
,

66 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
)

68 i‡(
node
) {

69 
node
->
size
 = size;

70 
node
->
mem‹y
 = memory;

71 
node
->
≥riod
 =Öeriod;

72 
node
->
fûe
 = file;

73 
node
->
löe
 =Üine;

74 
node
->
Æloˇt‹
 =állocator;

76 
	}
}

78 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
,

79 
MemLókPîiod
 
≥riod
)

81  
≥riod
 =
mem_Àak_≥riod_Æl
 || 
node
->period ==Öeriod

82 || (
node
->
≥riod
 !
mem_Àak_≥riod_dißbÀd
 &&Öeriod

83 =
mem_Àak_≥riod_íabÀd
);

84 
	}
}

86 
	gMem‹yLókDëe˘‹Li°
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

88 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód
;

89 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

91 
cur
) {

92 i‡(
	`isInPîiod
(
cur
, 
≥riod
)) {

93 i‡(
¥ev
) {

94 
¥ev
->
√xt
 = 
cur
->next;

95 
cur
 = 
¥ev
;

98 
hód
 = 
cur
->
√xt
;

99 
cur
 = 
hód
;

103 
¥ev
 = 
cur
;

104 
cur
 = cur->
√xt
;

106 
	}
}

108 
	gMem‹yLókDëe˘‹Li°
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

110 
node
->
√xt
 = 
hód
;

111 
hód
 = 
node
;

112 
	}
}

114 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$ªmoveNode
(* 
mem‹y
)

116 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód
;

117 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

118 
cur
) {

119 i‡(
cur
->
mem‹y
 == memory) {

120 i‡(
¥ev
) {

121 
¥ev
->
√xt
 = 
cur
->next;

122  
cur
;

125 
hód
 = 
cur
->
√xt
;

126  
cur
;

129 
¥ev
 = 
cur
;

130 
cur
 = cur->
√xt
;

133 
	}
}

135 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëLókFrom
(

136 
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

138 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
node
; cur; cu∏cur->
√xt
)

139 i‡(
	`isInPîiod
(
cur
, 
≥riod
))  cur;

141 
	}
}

143 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëFú°Lók
(

144 
MemLókPîiod
 
≥riod
)

146  
	`gëLókFrom
(
hód
, 
≥riod
);

147 
	}
}

149 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëNextLók
(

150 
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

152  
	`gëLókFrom
(
node
->
√xt
, 
≥riod
);

153 
	}
}

155 
	gMem‹yLókDëe˘‹Li°
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

157 
tŸÆ_Àaks
 = 0;

158 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód
;Çode;Çodênode->
√xt
) {

159 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë
tŸÆ_Àaks
++;

161  
tŸÆ_Àaks
;

162 
	}
}

164 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

166 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód
;Çode;Çodênode->
√xt
)

167 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë 
åue
;

168  
Ál£
;

169 
	}
}

173 
	gMem‹yLókDëe˘‹TabÀ
::
	$hash
(* 
mem‹y
)

175  ((
size_t
Ë
mem‹y
Ë% 
hash_¥ime
;

176 
	}
}

178 
	gMem‹yLókDëe˘‹TabÀ
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

180 
i
 = 0; i < 
hash_¥ime
; i++)

181 
èbÀ
[
i
].
	`˛órAŒAccou¡ög
(
≥riod
);

182 
	}
}

184 
	gMem‹yLókDëe˘‹TabÀ
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

186 
èbÀ
[
	`hash
(
node
->
mem‹y
)].
	`addNewNode
(node);

187 
	}
}

189 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$ªmoveNode
(* 
mem‹y
)

191  
èbÀ
[
	`hash
(
mem‹y
)].
	`ªmoveNode
(memory);

192 
	}
}

194 
boﬁ
 
	gMem‹yLókDëe˘‹TabÀ
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

196 
i
 = 0; i < 
hash_¥ime
; i++)

197 i‡(
èbÀ
[
i
].
	`hasLóks
(
≥riod
)Ë 
åue
;

198  
Ál£
;

199 
	}
}

201 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

203 
tŸÆ_Àaks
 = 0;

204 
i
 = 0; i < 
hash_¥ime
; i++)

205 
tŸÆ_Àaks
 +
èbÀ
[
i
].
	`gëTŸÆLóks
(
≥riod
);

206  
tŸÆ_Àaks
;

207 
	}
}

209 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëFú°Lók
(

210 
MemLókPîiod
 
≥riod
)

212 
i
 = 0; i < 
hash_¥ime
; i++) {

213 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ
[
i
].
	`gëFú°Lók
(
≥riod
);

214 i‡(
node
) Çode;

217 
	}
}

219 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëNextLók
(

220 
Mem‹yLókDëe˘‹Node
* 
Àak
, 
MemLókPîiod
 
≥riod
)

222 
i
 = 
	`hash
(
Àak
->
mem‹y
);

223 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ
[
i
].
	`gëNextLók
(
Àak
, 
≥riod
);

224 i‡(
node
) Çode;

226 ++
i
; i < 
hash_¥ime
; i++) {

227 
node
 = 
èbÀ
[
i
].
	`gëFú°Lók
(
≥riod
);

228 i‡(
node
) Çode;

231 
	}
}

235 
	gMem‹yLókDëe˘‹
::
	$Mem‹yLókDëe˘‹
()

237 
	}
}

239 
Mem‹yLókDëe˘‹
::
	$öô
(
Mem‹yLókFaûuª
* 
ªp‹t
)

241 
doAŒoˇti⁄Ty≥Checkög
 = 
åue
;

242 
cuºít_≥riod
 = 
mem_Àak_≥riod_dißbÀd
;

243 
ªp‹ãr
 = 
ªp‹t
;

244 
ouçut_buf„r
 = 
	`Sim∂eSåögBuf„r
();

245 
mem‹yTabÀ
 = 
	`Mem‹yLókDëe˘‹TabÀ
();

246 
	}
}

248 
	gMem‹yLókDëe˘‹
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

250 
mem‹yTabÀ
.
	`˛órAŒAccou¡ög
(
≥riod
);

251 
	}
}

253 
	gMem‹yLókDëe˘‹
::
	$°¨tCheckög
()

255 
ouçut_buf„r
.
	`˛ór
();

256 
cuºít_≥riod
 = 
mem_Àak_≥riod_checkög
;

257 
	}
}

259 
	gMem‹yLókDëe˘‹
::
	$°›Checkög
()

261 
cuºít_≥riod
 = 
mem_Àak_≥riod_íabÀd
;

262 
	}
}

264 
	gMem‹yLókDëe˘‹
::
	$íabÀ
()

266 
cuºít_≥riod
 = 
mem_Àak_≥riod_íabÀd
;

267 
	}
}

269 
	gMem‹yLókDëe˘‹
::
	$dißbÀ
()

271 
cuºít_≥riod
 = 
mem_Àak_≥riod_dißbÀd
;

272 
	}
}

274 
	gMem‹yLókDëe˘‹
::
	$dißbÀAŒoˇti⁄Ty≥Checkög
()

276 
doAŒoˇti⁄Ty≥Checkög
 = 
Ál£
;

277 
	}
}

279 
	gMem‹yLókDëe˘‹
::
	$íabÀAŒoˇti⁄Ty≥Checkög
()

281 
doAŒoˇti⁄Ty≥Checkög
 = 
åue
;

282 
	}
}

284 
	gMem‹yLókDëe˘‹
::
	$ªp‹tFaûuª
(c⁄° * 
mesßge
,

285 c⁄° * 
ÆlocFûe
, 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

286 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

287 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
)

289 
ouçut_buf„r
.
	`add
(
mesßge
);

290 
ouçut_buf„r
.
	`add
(
MEM_LEAK_ALLOC_LOCATION
, 
ÆlocFûe
, 
ÆlocLöe
, 
ÆlocSize
,

291 
ÆlocAŒoˇt‹
->
	`Æloc_«me
());

292 
ouçut_buf„r
.
	`add
(
MEM_LEAK_DEALLOC_LOCATION
, 
‰ìFûe
, 
‰ìLöe
,

293 
‰ìAŒoˇt‹
->
	`‰ì_«me
());

294 
ªp‹ãr
->
	`Áû
(
ouçut_buf„r
.
	`toSåög
());

295 
	}
}

297 
	$ˇlcuœãI¡Alig√dSize
(
size_t
 
size
)

299  ((Ë- (
size
 % ())) + size;

300 
	}
}

302 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹
::
	$gëNodeFromMem‹yPoöãr
(

303 * 
mem‹y
, 
size_t
 
mem‹y_size
)

305  (
Mem‹yLókDëe˘‹Node
*Ë(
mem‹y
 + 
	`ˇlcuœãI¡Alig√dSize
(

306 
mem‹y_size
 + 
mem‹y_c‹ru±i⁄_buf„r_size
));

307 
	}
}

309 * 
	gMem‹yLókDëe˘‹
::
	$ÆloˇãMem‹yAndExåaInfo
(

310 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
)

312  
Æloˇt‹
->
	`Æloc_mem‹y
(
	`ˇlcuœãI¡Alig√dSize
(
size


313 + 
mem‹y_c‹ru±i⁄_buf„r_size
) + memory_corruption_buffer_size

314 + (
Mem‹yLókDëe˘‹Node
));

315 
	}
}

317 * 
	gMem‹yLókDëe˘‹
::
	$ªÆloˇãMem‹yAndExåaInfo
(* 
mem‹y
,

318 
size_t
 
size
)

320  (*Ë
	`Pœtf‹mS≥cificRóŒoc
(
mem‹y
, 
	`ˇlcuœãI¡Alig√dSize
(
size


321 + 
mem‹y_c‹ru±i⁄_buf„r_size
Ë+ (
Mem‹yLókDëe˘‹Node
));

322 
	}
}

324 
	gMem‹yLókDëe˘‹
::
	$addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
,

325 
size_t
 
size
)

327 
mem‹y
[
size
] = 'B';

328 
mem‹y
[
size
 + 1] = 'A';

329 
mem‹y
[
size
 + 2] = 'S';

330 
	}
}

332 
	gMem‹yLókDëe˘‹
::
	$checkF‹AŒocMism©chOrC‹ru±i⁄
(

333 
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
,

334 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

336 i‡(
node
->
Æloˇt‹
 !Æloˇt‹ && 
doAŒoˇti⁄Ty≥Checkög
) {

337 i‡(!
Æloˇt‹
->
	`isOfEquÆTy≥
(
node
->Æloˇt‹)Ë
	`ªp‹tFaûuª
(

338 
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
, 
node
->
fûe
,Çode->
löe
,

339 
node
->
size
,Çode->
Æloˇt‹
, 
fûe
, 
löe
,állocator);

341 i‡(
node
->
mem‹y
[node->
size
] != 'B' ||Çode->memory[node->size + 1]

342 !'A' || 
node
->
mem‹y
[node->
size
 + 2] !'S'Ë
	`ªp‹tFaûuª
(

343 
MEM_LEAK_MEMORY_CORRUPTION
, 
node
->
fûe
,Çode->
löe
,Çode->
size
,

344 
node
->
Æloˇt‹
, 
fûe
, 
löe
,állocator);

345 
	}
}

347 
	gMem‹yLókDëe˘‹
::
	$addMem‹yLókInfoAndC‹ru±i⁄Info
(* 
mem‹y
,

348 
size_t
 
size
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

350 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
mem‹y
, 
size
);

351 i‡(
mem‹y
) {

352 
Mem‹yLókDëe˘‹Node
* 
node
 = 
	`gëNodeFromMem‹yPoöãr
(
mem‹y
, 
size
);

353 
Mem‹yLókDëe˘‹Li°
::
	`öôNode
(
node
, 
Æloˇt‹
, 
size
, 
mem‹y
,

354 
cuºít_≥riod
, 
fûe
, 
löe
);

355 
mem‹yTabÀ
.
	`addNewNode
(
node
);

357 
	}
}

359 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(* 
mem‹y
,

360 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

362 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ
.
	`ªmoveNode
(
mem‹y
);

363 i‡(
node
) {

364 
	`checkF‹AŒocMism©chOrC‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

365  
åue
;

367 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0,

368 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

369  
Ál£
;

370 
	}
}

372 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

373 
size_t
 
size
)

375  
	`ÆlocMem‹y
(
Æloˇt‹
, 
size
, 
UNKNOWN
, 0);

376 
	}
}

378 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

379 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

381 * 
mem
 = 
	`ÆloˇãMem‹yAndExåaInfo
(
Æloˇt‹
, 
size
);

382 i‡(
mem
)

383 
	`addMem‹yLókInfoAndC‹ru±i⁄Info
(
mem
, 
size
, 
fûe
, 
löe
, 
Æloˇt‹
);

384  
mem
;

385 
	}
}

387 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

388 * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

390 i‡(
mem‹y
 == 0) ;

392 i‡(
	`ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
((*Ë
mem‹y
, 
fûe
, 
löe
,

393 
Æloˇt‹
)ËÆloˇt‹->
	`‰ì_mem‹y
((*Ë
mem‹y
);

394 
	}
}

396 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

397 * 
mem‹y
)

399 
	`dóŒocMem‹y
(
Æloˇt‹
, (*Ë
mem‹y
, 
UNKNOWN
, 0);

400 
	}
}

402 * 
	gMem‹yLókDëe˘‹
::
	$ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

403 * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

405 i‡(
mem‹y
Ë
	`ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(mem‹y, 
fûe
, 
löe
,

406 
Æloˇt‹
);

408 * 
mem
 = 
	`ªÆloˇãMem‹yAndExåaInfo
(
mem‹y
, 
size
);

409 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
mem
, 
size
);

410 
	`addMem‹yLókInfoAndC‹ru±i⁄Info
(
mem
, 
size
, 
fûe
, 
löe
, 
Æloˇt‹
);

411  
mem
;

412 
	}
}

414 
	gMem‹yLókDëe˘‹
::
	$C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
)

416 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ
.
	`gëFú°Lók
(
≥riod
);

417 
tŸÆ_Àaks
 = 0;

418 
ouçut_buf„r
.
	`add
(
MEM_LEAK_HEADER
);

420 
Àak
) {

421 
ouçut_buf„r
.
	`add
(
MEM_LEAK_LEAK
, 
Àak
->
size
,Üók->
fûe
,Üók->
löe
,

422 
Àak
->
Æloˇt‹
->
	`Æloc_«me
(),Üók->
mem‹y
);

423 
tŸÆ_Àaks
++;

424 
Àak
 = 
mem‹yTabÀ
.
	`gëNextLók
÷ók, 
≥riod
);

426 
ouçut_buf„r
.
	`add
("%†%d", 
MEM_LEAK_FOOTER
, 
tŸÆ_Àaks
);

427 
	}
}

429 c⁄° * 
	gMem‹yLókDëe˘‹
::
	$ªp‹t
(
MemLókPîiod
 
≥riod
)

431 i‡(!
mem‹yTabÀ
.
	`hasLóks
(
≥riod
)Ë 
MEM_LEAK_NONE
;

433 
ouçut_buf„r
.
	`˛ór
();

434 
	`C⁄°ru˘Mem‹yLókRï‹t
(
≥riod
);

436  
ouçut_buf„r
.
	`toSåög
();

437 
	}
}

439 
	gMem‹yLókDëe˘‹
::
	$m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
()

441 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ
.
	`gëFú°Lók
(

442 
mem_Àak_≥riod_checkög
);

443 
Àak
) {

444 i‡(
Àak
->
≥riod
 =
mem_Àak_≥riod_checkög
)Üeak->period

445 
mem_Àak_≥riod_íabÀd
;

446 
Àak
 = 
mem‹yTabÀ
.
	`gëNextLók
÷ók, 
mem_Àak_≥riod_checkög
);

448 
	}
}

450 
	gMem‹yLókDëe˘‹
::
	$tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
)

452  
mem‹yTabÀ
.
	`gëTŸÆLóks
(
≥riod
);

453 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

30 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 ˛as†
	cMem‹yLókW¨nögRï‹ãr
: 
public
 
Mem‹yLókFaûuª


36 
public
:

37 
vútuÆ
 ~
	$Mem‹yLókW¨nögRï‹ãr
()

41 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

43 
	`FAIL
(
Áû_°rög
);

44 
	}
}

47 
Mem‹yLókW¨nögRï‹ãr
* 
	gglobÆRï‹ãr
 = 0;

48 
Mem‹yLókDëe˘‹
* 
	gglobÆDëe˘‹
 = 0;

50 
	$de°royDëe˘‹
()

52 
	`Pœtf‹mS≥cificFªe
(
globÆDëe˘‹
);

53 
globÆRï‹ãr
->~
	`Mem‹yLókW¨nögRï‹ãr
();

54 
	`Pœtf‹mS≥cificFªe
(
globÆRï‹ãr
);

55 
globÆRï‹ãr
 = 0;

56 
globÆDëe˘‹
 = 0;

57 
	}
}

59 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëGlobÆDëe˘‹
()

61 i‡(
globÆDëe˘‹
 == 0) {

66 
Mem‹yLókW¨nögRï‹ãr
 
ªp‹ãr
;

67 
globÆRï‹ãr
 = (
Mem‹yLókW¨nögRï‹ãr
*Ë
	`Pœtf‹mS≥cificMÆloc
(

68 (
Mem‹yLókW¨nögRï‹ãr
));

69 
	`Pœtf‹mS≥cificMemCpy
(
globÆRï‹ãr
, &
ªp‹ãr
,

70 (
Mem‹yLókW¨nögRï‹ãr
));

72 
globÆDëe˘‹
 = (
Mem‹yLókDëe˘‹
*Ë
	`Pœtf‹mS≥cificMÆloc
(

73 (
Mem‹yLókDëe˘‹
));

74 i‡(
globÆDëe˘‹
 =0)
	`FAIL
("operatorÇew(size, bool)ÇotÉnough memory");

75 
globÆDëe˘‹
->
	`öô
(
globÆRï‹ãr
);

76 
	`Pœtf‹mS≥cificAtExô
(
de°royDëe˘‹
);

78  
globÆDëe˘‹
;

79 
	}
}

81 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
fú°Plugö
 = 0;

83 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
	$gëFú°Plugö
()

85  
fú°Plugö
;

86 
	}
}

88 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëMem‹yLókDëe˘‹
()

90  
memLókDëe˘‹
;

91 
	}
}

93 
	gMem‹yLókW¨nögPlugö
::
	$ign‹eAŒLóksInTe°
()

95 
ign‹eAŒW¨nögs
 = 
åue
;

96 
	}
}

98 
	gMem‹yLókW¨nögPlugö
::
	$ex≥˘LóksInTe°
(
n
)

100 
ex≥˘edLóks
 = 
n
;

101 
	}
}

103 
	gMem‹yLókW¨nögPlugö
::
	$Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

104 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
) :

105 
	`Te°Plugö
(
«me
), 
	`ign‹eAŒW¨nögs
(
Ál£
), 
	$ex≥˘edLóks
(0)

107 i‡(
fú°Plugö
 =0Ëfú°Plugö = 
this
;

109 i‡(
loˇlDëe˘‹
Ë
memLókDëe˘‹
 =ÜocalDetector;

110 
memLókDëe˘‹
 = 
	`gëGlobÆDëe˘‹
();

112 
memLókDëe˘‹
->
	`íabÀ
();

113 
	}
}

115 
	gMem‹yLókW¨nögPlugö
::~
	$Mem‹yLókW¨nögPlugö
()

117 i‡(
this
 =
fú°Plugö
) firstPlugin = 0;

118 
	}
}

120 
	gMem‹yLókW¨nögPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

122 
memLókDëe˘‹
->
	`°¨tCheckög
();

123 
ÁûuªCou¡
 = 
ªsu…
.
	`gëFaûuªCou¡
();

124 
	}
}

126 
	gMem‹yLókW¨nögPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

128 
memLókDëe˘‹
->
	`°›Checkög
();

129 
Àaks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

131 i‡(!
ign‹eAŒW¨nögs
 && 
ex≥˘edLóks
 !
Àaks
 && 
ÁûuªCou¡


132 =
ªsu…
.
	`gëFaûuªCou¡
()) {

133 
Faûuª
 
	`f
(&
ã°
, 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

134 
ªsu…
.
	`addFaûuª
(
f
);

136 
memLókDëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

137 
ign‹eAŒW¨nögs
 = 
Ál£
;

138 
ex≥˘edLóks
 = 0;

139 
	}
}

141 c⁄° * 
	gMem‹yLókW¨nögPlugö
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

143 
Àaks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
);

144 i‡(
Àaks
 !
toBeDñëedLóks
Ë 
memLókDëe˘‹
->
	`ªp‹t
(

145 
mem_Àak_≥riod_íabÀd
);

147 
	}
}

149 #i‡
UT_NEW_OVERRIDES_ENABLED


150 #unde‡
√w


152 * 
›î©‹
 
	$√w
(
size_t
 
size
)

154  
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(

155 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
);

156 
	}
}

158 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

160  
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(

161 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

162 
	}
}

164 
›î©‹
 
	$dñëe
(* 
mem
, c⁄° * 
fûe
, 
löe
)

166 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(

167 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

168 
	}
}

170 
›î©‹
 
	$dñëe
(* 
mem
)

172 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(

173 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

174 
	}
}

176 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

178  
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

179 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
);

182 * 
›î©‹
 
	g√w
 [](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
)

184  
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

185 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

188 
›î©‹
 
	gdñëe
[](* 
	gmem
, c⁄° * 
	gfûe
, 
	glöe
)

190 
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

191 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

194 
›î©‹
 
	gdñëe
[](* 
	gmem
)

196 
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

197 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

39 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

40 
	$im∂_
(0)

42 
	}
}

44 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

46 
	}
}

48 
JUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

50 
	}
}

52 
JUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

54 
	}
}

56 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

58 
	}
}

60 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

62 
	}
}

64 
JUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

66 
	}
}

68 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

70 
	}
}

72 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

74 
	}
}

76 
JUnôTe°Ouçut
::
	$wrôeXmlHódî
()

78 
	}
}

80 
JUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

82 
	}
}

84 
JUnôTe°Ouçut
::
	$wrôePr›îtõs
()

86 
	}
}

88 
JUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

90 
	}
}

92 
JUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

94 
	}
}

96 
JUnôTe°Ouçut
::
	$wrôeFûeEndög
()

98 
	}
}

100 
JUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

102 
	}
}

104 
JUnôTe°Ouçut
::
	$vîbo£
()

106 
	}
}

108 
JUnôTe°Ouçut
::
	$¥öt
(const *)

110 
	}
}

112 
JUnôTe°Ouçut
::
	$¥öt
()

114 
	}
}

116 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

118 
	}
}

120 
JUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

122 
	}
}

124 
	gJUnôTe°Ouçut
::
	$Êush
()

126 
	}
}

128 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

130 
	}
}

132 
JUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

134 
	}
}

136 
JUnôTe°Ouçut
::
	$˛o£Fûe
()

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\SimpleString.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$ÆlocSåög
(
size
)

34  
√w
 [
size
];

35 
	}
}

37 
	$dóŒocSåög
(* 
°r
)

39 
dñëe
[] 
°r
;

40 
	}
}

41 * 
	$gëEm±rySåög
()

43 * 
em±y
 = 
√w
 [1];

44 
em±y
[0] = '\0';

45  
em±y
;

46 
	}
}

47 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
ŸhîBuf„r
)

49 i‡(
ŸhîBuf„r
 == 0) {

50 
buf„r
 = 
	`gëEm±rySåög
();

53 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
ŸhîBuf„r
) + 1;

54 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

55 
	`Pœtf‹mS≥cificSåCpy
(
buf„r
, 
ŸhîBuf„r
);

57 
	}
}

59 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
Ÿhî
, 
ª≥©Cou¡
)

61 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
Ë* 
ª≥©Cou¡
 + 1;

62 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

63 * 
√xt
 = 
buf„r
;

64 
i
 = 0; i < 
ª≥©Cou¡
; i++) {

65 
	`Pœtf‹mS≥cificSåCpy
(
√xt
, 
Ÿhî
);

66 
√xt
 +
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
);

68 *
√xt
 = 0;

70 
	}
}

71 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

73 
Àn
 = 
Ÿhî
.
	`size
() + 1;

74 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

75 
	`Pœtf‹mS≥cificSåCpy
(
buf„r
, 
Ÿhî
.buffer);

76 
	}
}

78 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

80 i‡(
this
 !&
Ÿhî
) {

81 
dóŒocSåög
(
buf„r
);

82 
	gÀn
 = 
Ÿhî
.
size
() + 1;

83 
	gbuf„r
 = 
ÆlocSåög
(
Àn
);

84 
Pœtf‹mS≥cificSåCpy
(
buf„r
, 
Ÿhî
.buffer);

86  *
	gthis
;

89 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

93 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
Ë=0Ë 
åue
;

94 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r
Ë=0Ë 
Ál£
;

95  
	`Pœtf‹mS≥cificSåSå
(
buf„r
, 
Ÿhî
.buffer) != 0;

96 
	}
}

98 
boﬁ
 
	gSim∂eSåög
::
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

100 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
Ë=0Ë 
åue
;

101 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r
Ë=0Ë 
Ál£
;

102  
	`Pœtf‹mS≥cificSåSå
(
buf„r
, 
Ÿhî
.buffer) == buffer;

103 
	}
}

105 
boﬁ
 
	gSim∂eSåög
::
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

107 
buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
buf„r
);

108 
Ÿhî_buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
);

109 i‡(
Ÿhî_buf„r_Àngth
 =0Ë 
åue
;

110 i‡(
buf„r_Àngth
 =0Ë 
Ál£
;

111 i‡(
buf„r_Àngth
 < 
Ÿhî_buf„r_Àngth
Ë 
Ál£
;

112  
	`Pœtf‹mS≥cificSåCmp
(
buf„r
 + 
buf„r_Àngth
 - 
Ÿhî_buf„r_Àngth
,

113 
Ÿhî
.
buf„r
) == 0;

114 
	}
}

116 
	gSim∂eSåög
::
	$cou¡
(c⁄° 
Sim∂eSåög
& 
sub°r
) const

118 
num
 = 0;

119 * 
°r
 = 
buf„r
;

120 (
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
sub°r
.
buf„r
))) {

121 
num
++;

122 
°r
++;

124  
num
;

125 
	}
}

127 
	gSim∂eSåög
::
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
, 
Sim∂eSåögCﬁÀ˘i⁄
& 
cﬁ
) const

129 
num
 = 
	`cou¡
(
•lô
);

130 
exåaEndTokí
 = (
	`ídsWôh
(
•lô
)) ? 0 : 1;

131 
cﬁ
.
	`Æloˇã
(
num
 + 
exåaEndTokí
);

133 * 
°r
 = 
buf„r
;

134 * 
¥ev
;

135 
i
 = 0; i < 
num
; ++i) {

136 
¥ev
 = 
°r
;

137 
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
•lô
.
buf„r
) + 1;

138 
Àn
 = 
°r
 - 
¥ev
;

139 * 
sub
 = 
	`ÆlocSåög
(
Àn
 + 1);

140 
	`Pœtf‹mS≥cificSåNCpy
(
sub
, 
¥ev
, 
Àn
);

141 
sub
[
Àn
] = '\0';

142 
cﬁ
[
i
] = 
sub
;

143 
	`dóŒocSåög
(
sub
);

145 i‡(
exåaEndTokí
) {

146 
cﬁ
[
num
] = 
°r
;

148 
	}
}

150 
	gSim∂eSåög
::
	$ª∂a˚
(
to
, 
wôh
)

152 
s
 = 
	`size
();

153 
i
 = 0; i < 
s
; i++) {

154 i‡(
buf„r
[
i
] =
to
Ëbuf„r[i] = 
wôh
;

156 
	}
}

158 
	gSim∂eSåög
::
	$ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
)

160 
c
 = 
	`cou¡
(
to
);

161 
Àn
 = 
	`size
();

162 
tﬁí
 = 
	`Pœtf‹mS≥cificSåLí
(
to
);

163 
wôhÀn
 = 
	`Pœtf‹mS≥cificSåLí
(
wôh
);

165 
√wsize
 = 
Àn
 + (
wôhÀn
 * 
c
Ë- (
tﬁí
 * c) + 1;

167 i‡(
√wsize
) {

168 * 
√wbuf
 = 
	`ÆlocSåög
(
√wsize
);

169 
i
 = 0, 
j
 = 0; i < 
Àn
;) {

170 i‡(
	`Pœtf‹mS≥cificSåNCmp
(&
buf„r
[
i
], 
to
, 
tﬁí
) == 0) {

171 
	`Pœtf‹mS≥cificSåNCpy
(&
√wbuf
[
j
], 
wôh
, 
wôhÀn
);

172 
j
 +
wôhÀn
;

173 
i
 +
tﬁí
;

176 
√wbuf
[
j
] = 
buf„r
[
i
];

177 
j
++;

178 
i
++;

181 
	`dóŒocSåög
(
buf„r
);

182 
buf„r
 = 
√wbuf
;

183 
buf„r
[
√wsize
 - 1] = '\0';

186 
buf„r
 = 
	`gëEm±rySåög
();

187 
buf„r
[0] = '\0';

189 
	}
}

191 c⁄° *
	gSim∂eSåög
::
	$asCh¨Såög
() const

193  
buf„r
;

194 
	}
}

196 
	gSim∂eSåög
::
	$size
() const

198  
	`Pœtf‹mS≥cificSåLí
(
buf„r
);

199 
	}
}

201 
	gSim∂eSåög
::~
	$Sim∂eSåög
()

203 
	`dóŒocSåög
(
buf„r
);

204 
	}
}

206 
boﬁ
 
	g›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

208  0 =
Pœtf‹mS≥cificSåCmp
(
À·
.
asCh¨Såög
(),

209 
right
.
asCh¨Såög
());

212 
boﬁ
 
	g›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

214  !(
	gÀ·
 =
right
);

217 
Sim∂eSåög
 
	gSim∂eSåög
::
›î©‹
+(c⁄° Sim∂eSåög& 
rhs
)

219 
Sim∂eSåög
 
t
(
buf„r
);

220 
	gt
 +
rhs
.
buf„r
;

221  
	gt
;

224 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° 
Sim∂eSåög
& 
rhs
)

226  
›î©‹
+=(
rhs
.
buf„r
);

229 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° * 
rhs
)

231 
Àn
 = 
this
->
size
(Ë+ 
Pœtf‹mS≥cificSåLí
(
rhs
) + 1;

232 * 
	gtbuf„r
 = 
ÆlocSåög
(
Àn
);

233 
Pœtf‹mS≥cificSåCpy
(
tbuf„r
, 
this
->
buf„r
);

234 
Pœtf‹mS≥cificSåC©
(
tbuf„r
, 
rhs
);

235 
dóŒocSåög
(
buf„r
);

236 
	gbuf„r
 = 
tbuf„r
;

237  *
	gthis
;

240 
Sim∂eSåög
 
	$SåögFrom
(
boﬁ
 
vÆue
)

242  
	`Sim∂eSåög
(
	`SåögFromF‹m©
("%s", 
vÆue
 ? "true" : "false"));

243 
	}
}

245 
Sim∂eSåög
 
	$SåögFrom
(c⁄° *
vÆue
)

247  
	`Sim∂eSåög
(
vÆue
);

248 
	}
}

250 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

252  
	`SåögFromF‹m©
("%d", 
vÆue
);

253 
	}
}

255 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

257  
	`SåögFromF‹m©
("%ld", 
vÆue
);

258 
	}
}

260 
Sim∂eSåög
 
	$SåögFrom
(* 
vÆue
)

262  
	`Sim∂eSåög
("0x"Ë+ 
	`HexSåögFrom
((Ë
vÆue
);

263 
	}
}

265 
Sim∂eSåög
 
	$HexSåögFrom
(
vÆue
)

267  
	`SåögFromF‹m©
("%lx", 
vÆue
);

268 
	}
}

270 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
, 
¥ecisi⁄
)

272 
Sim∂eSåög
 
f‹m©
 = 
	`SåögFromF‹m©
("%%.%df", 
¥ecisi⁄
);

273  
	`SåögFromF‹m©
(
f‹m©
.
	`asCh¨Såög
(), 
vÆue
);

274 
	}
}

276 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

278  
	`SåögFromF‹m©
("%c", 
vÆue
);

279 
	}
}

281 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
Sim∂eSåög
& 
vÆue
)

283  
	`Sim∂eSåög
(
vÆue
);

284 
	}
}

286 
Sim∂eSåög
 
	$SåögFromF‹m©
(c⁄° * 
f‹m©
, ...)

288 
Sim∂eSåög
 
ªsu…Såög
;

289 
va_li°
 
¨gumíts
;

290 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

292 
ªsu…Såög
 = 
	`VSåögFromF‹m©
(
f‹m©
, 
¨gumíts
);

293 
	`va_íd
(
¨gumíts
);

294  
ªsu…Såög
;

295 
	}
}

298 #i‚de‡
va_c›y


299 
	#va_c›y
(
c›y
, 
‹igöÆ
Ëc›y = origöÆ;

	)

302 
Sim∂eSåög
 
	$VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

304 
va_li°
 
¨gsC›y
;

305 
	`va_c›y
(
¨gsC›y
, 
¨gs
);

308 
sizeOfdeÁu…Buf„r
 = 100

310 
deÁu…Buf„r
[
sizeOfdeÁu…Buf„r
];

311 
Sim∂eSåög
 
ªsu…Såög
;

313 
size
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
deÁu…Buf„r
, 
sizeOfdeÁu…Buf„r
,

314 
f‹m©
, 
¨gs
);

315 i‡(
size
 < 
sizeOfdeÁu…Buf„r
) {

316 
ªsu…Såög
 = 
	`Sim∂eSåög
(
deÁu…Buf„r
);

319 * 
√wBuf„r
 = 
√w
 [
size
 + 1];

320 
	`Pœtf‹mS≥cificVSN¥ötf
(
√wBuf„r
, 
size
 + 1, 
f‹m©
, 
¨gsC›y
);

321 
ªsu…Såög
 = 
	`Sim∂eSåög
(
√wBuf„r
);

323 
dñëe
[] 
√wBuf„r
;

325  
ªsu…Såög
;

326 
	}
}

328 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Sim∂eSåögCﬁÀ˘i⁄
()

330 
cﬁÀ˘i⁄
 = 0;

331 
_size
 = 0;

332 
	}
}

334 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Æloˇã
(
size
)

336 i‡(
cﬁÀ˘i⁄
Ë
dñëe
[] collection;

338 
_size
 = 
size
;

339 
cﬁÀ˘i⁄
 = 
√w
 
Sim∂eSåög
[
_size
];

340 
	}
}

342 
	gSim∂eSåögCﬁÀ˘i⁄
::~
	$Sim∂eSåögCﬁÀ˘i⁄
()

344 
dñëe
[] (
cﬁÀ˘i⁄
);

345 
	}
}

347 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$size
() const

349  
_size
;

350 
	}
}

352 
	gSim∂eSåög
& 
	gSim∂eSåögCﬁÀ˘i⁄
::
›î©‹
[](
ödex
)

354 i‡(
ödex
 >
_size
) {

355 
em±y
 = "";

356  
	gem±y
;

359  
	gcﬁÀ˘i⁄
[
ödex
];

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestHarness_c.cpp

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

36 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

41 
	~"CµUTe°/Te°H¨√ss_c.h
"

43 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
,

44 
löeNumbî
)

46 
CHECK_EQUAL_LOCATION
(()
ex≥˘ed
, ()
a˘uÆ
, 
fûeName
, 
löeNumbî
);

49 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

50 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

52 
DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûeName
, 
löeNumbî
);

55 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

56 c⁄° * 
fûeName
, 
löeNumbî
)

58 
CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

61 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

62 c⁄° * 
fûeName
, 
löeNumbî
)

64 
STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

67 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

68 
löeNumbî
)

70 
FAIL_LOCATION
(
ãxt
, 
fûeName
, 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
)

75 
FAIL_LOCATION
("", 
fûeName
, 
löeNumbî
);

78 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

79 c⁄° * 
fûeName
, 
löeNumbî
)

81 
CHECK_LOCATION
(((
c⁄dôi⁄
Ë=0 ? 
Ál£
 : 
åue
), 
c⁄dôi⁄Såög
, 
fûeName
, 
löeNumbî
);

84 
˝puã°_mÆloc_£t_out_of_mem‹y
()

86 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹
(
NuŒUnknownAŒoˇt‹
::
deÁu…AŒoˇt‹
());

89 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
()

91 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

94 * 
˝puã°_mÆloc
(
size_t
 
size
)

96  
˝puã°_mÆloc_loˇti⁄
(
size
, "<unknown>", 0);

99 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
)

101  
˝puã°_ˇŒoc_loˇti⁄
(
num
, 
size
, "<unknown>", 0);

104 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
)

106  
˝puã°_ªÆloc_loˇti⁄
(
±r
, 
size
, "<unknown>", 0);

109 
˝puã°_‰ì
(* 
buf„r
)

111 
˝puã°_‰ì_loˇti⁄
(
buf„r
, "<unknown>", 0);

114 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

116  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

117 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), 
size
, 
fûe
, 
löe
);

120 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
, c⁄° * 
fûe
,

121 
löe
)

123  
˝puã°_mÆloc_loˇti⁄
(
num
 * 
size
, 
fûe
, 
löe
);

126 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
,

127 
löe
)

129  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ªÆlocMem‹y
(

130 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
mem‹y
, 
size
, 
fûe
, 
löe
);

133 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
)

135 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

136 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
buf„r
, 
fûe
, 
löe
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gTe°Ouçut
::
	$Te°Ouçut
() :

33 
	`dŸCou¡_
(0), 
	`vîbo£_
(
Ál£
), 
	`¥ogªssIndiˇti⁄
(".")

35 
	}
}

37 
	gTe°Ouçut
::~
	$Te°Ouçut
()

39 
	}
}

41 
Te°Ouçut
::
	$vîbo£
()

43 
vîbo£_
 = 
åue
;

44 
	}
}

46 
	gTe°Ouçut
::
	$¥öt
(
n
)

48 
	`¥öt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

49 
	}
}

51 
	gTe°Ouçut
::
	$¥ötDoubÀ
(
d
)

53 
	`¥öt
(
	`SåögFrom
(
d
, 3).
	`asCh¨Såög
());

54 
	}
}

56 
	gTe°Ouçut
::
	$¥ötHex
(
n
)

58 
	`¥öt
(
	`HexSåögFrom
(
n
).
	`asCh¨Såög
());

59 
	}
}

61 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, c⁄° * 
	gs
)

63 
	gp
.
¥öt
(
s
);

64  
	gp
;

67 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, 
	gi
)

69 
	gp
.
¥öt
(
i
);

70  
	gp
;

73 
	gTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

75 i‡(
vîbo£_
Ë
	`¥öt
(
ã°
.
	`gëF‹m©ãdName
().
	`asCh¨Såög
());

76 
	}
}

78 
	gTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
)

80 i‡(
vîbo£_
) {

81 
	`¥öt
(" - ");

82 
	`¥öt
(
ªs
.
	`gëCuºítTe°TŸÆExecuti⁄Time
());

83 
	`¥öt
(" ms\n");

86 
	`¥ötProgªssIndiˇt‹
();

88 
	}
}

90 
	gTe°Ouçut
::
	$¥ötProgªssIndiˇt‹
()

92 
	`¥öt
(
¥ogªssIndiˇti⁄
);

93 i‡(++
dŸCou¡_
 % 50 =0Ë
	`¥öt
("\n");

94 
	}
}

96 
	gTe°Ouçut
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

98 
¥ogªssIndiˇti⁄
 = 
ödiˇt‹
;

99 
	}
}

101 
	gTe°Ouçut
::
	$¥ötTe°sSèπed
()

103 
	}
}

105 
Te°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

107 
	}
}

109 
Te°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
)

111 
	}
}

113 
Te°Ouçut
::
	$Êush
()

115 
	}
}

117 
Te°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

119 i‡(
ªsu…
.
	`gëFaûuªCou¡
() > 0) {

120 
	`¥öt
("\nErrors (");

121 
	`¥öt
(
ªsu…
.
	`gëFaûuªCou¡
());

122 
	`¥öt
(" failures, ");

125 
	`¥öt
("\nOK (");

127 
	`¥öt
(
ªsu…
.
	`gëTe°Cou¡
());

128 
	`¥öt
("Åests, ");

129 
	`¥öt
(
ªsu…
.
	`gëRunCou¡
());

130 
	`¥öt
("Ñan, ");

131 
	`¥öt
(
ªsu…
.
	`gëCheckCou¡
());

132 
	`¥öt
(" checks, ");

133 
	`¥öt
(
ªsu…
.
	`gëIgn‹edCou¡
());

134 
	`¥öt
(" ignored, ");

135 
	`¥öt
(
ªsu…
.
	`gëFûãªdOutCou¡
());

136 
	`¥öt
(" filtered out, ");

137 
	`¥öt
(
ªsu…
.
	`gëTŸÆExecuti⁄Time
());

138 
	`¥öt
(" ms)\n\n");

139 
	}
}

141 
	gTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

143 i‡(
tŸÆ
 > 1) {

144 
	`¥öt
("TestÑun ");

145 
	`¥öt
(
numbî
);

146 
	`¥öt
(" of ");

147 
	`¥öt
(
tŸÆ
);

148 
	`¥öt
("\n");

150 
	}
}

152 
	gTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

154 
	`¥öt
("\n");

155 
	`¥öt
(
Áûuª
.
	`gëFûeName
().
	`asCh¨Såög
());

156 
	`¥öt
(":");

157 
	`¥öt
(
Áûuª
.
	`gëLöeNumbî
());

158 
	`¥öt
(":");

159 
	`¥öt
("Érror: ");

160 
	`¥öt
("Failure in ");

161 
	`¥öt
(
Áûuª
.
	`gëTe°Name
().
	`asCh¨Såög
());

162 
	`¥öt
("\n");

163 
	`¥öt
("\t");

164 
	`¥öt
(
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

165 
	`¥öt
("\n\n");

166 
	}
}

168 
	gC⁄sﬁeTe°Ouçut
::
	$¥öt
(c⁄° * 
s
)

170 *
s
) {

171 i‡('\n' =*
s
Ë
	`Pœtf‹mS≥cificPutch¨
('\r');

172 
	`Pœtf‹mS≥cificPutch¨
(*
s
);

173 
s
++;

175 
	`Êush
();

176 
	}
}

178 
	gC⁄sﬁeTe°Ouçut
::
	$Êush
()

180 
	`Pœtf‹mS≥cificFlush
();;

181 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	gTe°Plugö
::
	$Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

32 
	`√xt_
(
NuŒTe°Plugö
::
	`ö°™˚
()), 
	`«me_
(
«me
), 
	$íabÀd_
(
åue
)

34 
	}
}

36 
	gTe°Plugö
::
	$Te°Plugö
(
Te°Plugö
* 
√xt
) :

37 
	`√xt_
(
√xt
), 
	`«me_
("null")

39 
	}
}

41 
	gTe°Plugö
::~
	$Te°Plugö
()

43 
	}
}

45 
Te°Plugö
* Te°Plugö::
	$addPlugö
(
Te°Plugö
* 
∂ugö
)

47 
√xt_
 = 
∂ugö
;

48  
this
;

49 
	}
}

51 
	gTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

53 i‡(
íabÀd_
Ë
	`¥eTe°A˘i⁄
(
ã°
, 
ªsu…
);

54 
√xt_
->
	`runAŒPªTe°A˘i⁄
(
ã°
, 
ªsu…
);

55 
	}
}

57 
	gTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

59 
√xt_
 ->
	`runAŒPo°Te°A˘i⁄
(
ã°
, 
ªsu…
);

60 i‡(
íabÀd_
Ë
	`po°Te°A˘i⁄
(
ã°
, 
ªsu…
);

61 
	}
}

63 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
)

65  
	`∑r£AŒArgumíts
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
), 
ödex
);

66 
	}
}

68 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

70 i‡(
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
)Ë 
åue
;

71 i‡(
√xt_
ËÇext_->
	`∑r£AŒArgumíts
(
ac
, 
av
, 
ödex
);

72  
Ál£
;

73 
	}
}

75 c⁄° 
	gSim∂eSåög
& 
	gTe°Plugö
::
	$gëName
()

77  
«me_
;

78 
	}
}

80 
Te°Plugö
* 
	gTe°Plugö
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

82 i‡(
«me
 =
«me_
Ë 
this
;

83 i‡(
√xt_
ËÇext_->
	`gëPlugöByName
(
«me
);

84  (
√xt_
);

85 
	}
}

87 
Te°Plugö
* 
	gTe°Plugö
::
	$gëNext
()

89  
√xt_
;

90 
	}
}

91 
Te°Plugö
* 
	gTe°Plugö
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

93 
Te°Plugö
* 
ªmoved
 = 0;

94 i‡(
√xt_
 &&Çext_->
	`gëName
(Ë=
«me
) {

95 
ªmoved
 = 
√xt_
;

96 
√xt_
 =Çext_->next_;

98  
ªmoved
;

99 
	}
}

101 
	gTe°Plugö
::
	$dißbÀ
()

103 
íabÀd_
 = 
Ál£
;

104 
	}
}

106 
	gTe°Plugö
::
	$íabÀ
()

108 
íabÀd_
 = 
åue
;

109 
	}
}

111 
boﬁ
 
	gTe°Plugö
::
	$isE«bÀd
()

113  
íabÀd_
;

114 
	}
}

116 
	s˝puã°_∑ú


118 **
	m‹ig
;

119 *
	m‹ig_vÆue
;

124 
	gödex
;

125 
˝puã°_∑ú
 
	g£éi°
[
SëPoöãrPlugö
::
MAX_SET
];

127 
	gSëPoöãrPlugö
::
	$SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me_
) :

128 
	$Te°Plugö
(
«me_
)

130 
ödex
 = 0;

131 
	}
}

133 
	gSëPoöãrPlugö
::~
	$SëPoöãrPlugö
()

135 
	}
}

137 
	$CµUTe°St‹e
(**
fun˘i⁄
, *
vÆue
)

139 i‡(
ödex
 >
SëPoöãrPlugö
::
MAX_SET
) {

140 
	`FAIL
("MaximumÇumber of functionÖointers installed!");

142 
£éi°
[
ödex
].
‹ig_vÆue
 = 
vÆue
;

143 
£éi°
[
ödex
].
‹ig
 = 
fun˘i⁄
;

144 
ödex
++;

145 
	}
}

147 
	gSëPoöãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

149 
i
 = 
ödex
 - 1; i >= 0; i--)

150 *((**Ë
£éi°
[
i
].
‹ig
Ë£éi°[i].
‹ig_vÆue
;

151 
ödex
 = 0;

152 
	}
}

156 
	gNuŒTe°Plugö
::
	$NuŒTe°Plugö
() :

157 
	$Te°Plugö
(0)

159 
	}
}

161 
NuŒTe°Plugö
* NuŒTe°Plugö::
	$ö°™˚
()

163 
NuŒTe°Plugö
 
_ö°™˚
;

164  &
_ö°™˚
;

165 
	}
}

167 
	gNuŒTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

169 
	}
}

171 
	gNuŒTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestRegistry.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	gTe°Regi°ry
::
	$Te°Regi°ry
() :

32 
	`ã°s
(&
NuŒTe°
::
	`ö°™˚
()), 
	`«meFûãr_
(0), 
	`groupFûãr_
(0),

33 
	`fú°Plugö_
(
NuŒTe°Plugö
::
	$ö°™˚
())

35 
	}
}

37 
Te°Regi°ry
::~
	$Te°Regi°ry
()

39 
	`˛ónup
();

40 
	}
}

42 
	gTe°Regi°ry
::
	$˛ónup
()

44 
dñëe
 
«meFûãr_
;

45 
dñëe
 
groupFûãr_
;

46 
«meFûãr_
 = 0;

47 
groupFûãr_
 = 0;

48 
	}
}

50 
	gTe°Regi°ry
::
	$addTe°
(
Uã°
 *
ã°
)

52 
ã°s
 = 
ã°
->
	`addTe°
(tests);

53 
	}
}

55 
	gTe°Regi°ry
::
	$runAŒTe°s
(
Te°Resu…
& 
ªsu…
)

57 
boﬁ
 
groupSèπ
 = 
åue
;

59 
ªsu…
.
	`ã°sSèπed
();

60 
Uã°
 *
ã°
 = 
ã°s
; !ã°->
	`isNuŒ
();Åe° =Åe°->
	`gëNext
()) {

62 i‡(
groupSèπ
) {

63 
ªsu…
.
	`cuºítGroupSèπed
(
ã°
);

64 
groupSèπ
 = 
Ál£
;

67 
ªsu…
.
	`£tProgªssIndiˇt‹
(
ã°
->
	`gëProgªssIndiˇt‹
());

68 
ªsu…
.
	`cou¡Te°
();

69 i‡(
	`ã°ShouldRun
(
ã°
, 
ªsu…
)) {

70 
ªsu…
.
	`cuºítTe°Sèπed
(
ã°
);

71 
ã°
->
	`runO√Te°WôhPlugös
(
fú°Plugö_
, 
ªsu…
);

72 
ªsu…
.
	`cuºítTe°Ended
(
ã°
);

75 i‡(
	`ídOfGroup
(
ã°
)) {

76 
groupSèπ
 = 
åue
;

77 
ªsu…
.
	`cuºítGroupEnded
(
ã°
);

80 
ªsu…
.
	`ã°sEnded
();

81 
	}
}

83 
boﬁ
 
	gTe°Regi°ry
::
	$ídOfGroup
(
Uã°
* 
ã°
)

85  (
ã°
->
	`isNuŒ
(Ë||Åe°->
	`gëGroup
(Ë!ã°->
	`gëNext
()->getGroup());

86 
	}
}

88 
	gTe°Regi°ry
::
	$cou¡Te°s
()

90  
ã°s
->
	`cou¡Te°s
();

91 
	}
}

93 
Te°Regi°ry
* 
	gTe°Regi°ry
::
cuºítRegi°ry_
 = 0;

95 
Te°Regi°ry
* 
	gTe°Regi°ry
::
	$gëCuºítRegi°ry
()

97 
Te°Regi°ry
 
ªgi°ry
;

98  (
cuºítRegi°ry_
 =0Ë? &
ªgi°ry
 : currentRegistry_;

99 
	}
}

101 
	gTe°Regi°ry
::
	$£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
)

103 
cuºítRegi°ry_
 = 
ªgi°ry
;

104 
	}
}

106 
	gTe°Regi°ry
::
	$unDoLa°AddTe°
()

108 
ã°s
 =Åe°s->
	`gëNext
();

110 
	}
}

112 
	gTe°Regi°ry
::
	$«meFûãr
(
Sim∂eSåög
 
f
)

114 
dñëe
 
«meFûãr_
;

115 
«meFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

116 
	}
}

118 
	gTe°Regi°ry
::
	$groupFûãr
(
Sim∂eSåög
 
f
)

120 
dñëe
 
groupFûãr_
;

121 
groupFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

122 
	}
}

124 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëGroupFûãr
()

126  *
groupFûãr_
;

127 
	}
}

129 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëNameFûãr
()

131  *
«meFûãr_
;

132 
	}
}

134 
boﬁ
 
	gTe°Regi°ry
::
	$ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

136 i‡(
groupFûãr_
 =0ËgroupFûãr_ = 
√w
 
	`Sim∂eSåög
();

137 i‡(
«meFûãr_
 =0Ë«meFûãr_ = 
√w
 
	`Sim∂eSåög
();

138 i‡(
ã°
->
	`shouldRun
(*
groupFûãr_
, *
«meFûãr_
)Ë 
åue
;

140 
ªsu…
.
	`cou¡FûãªdOut
();

141  
Ál£
;

143 
	}
}

145 
	gTe°Regi°ry
::
	$ª£tPlugös
()

147 
fú°Plugö_
 = 
NuŒTe°Plugö
::
	`ö°™˚
();

148 
	}
}

150 
	gTe°Regi°ry
::
	$ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
)

152 
fú°Plugö_
 = 
∂ugö
->
	`addPlugö
(firstPlugin_);

153 
	}
}

155 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëFú°Plugö
()

157  
fú°Plugö_
;

158 
	}
}

160 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

162  
fú°Plugö_
->
	`gëPlugöByName
(
«me
);

163 
	}
}

165 
	gTe°Regi°ry
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

167 i‡(
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
) == firstPlugin_) firstPlugin_

168 
fú°Plugö_
->
	`gëNext
();

169 i‡(
fú°Plugö_
->
	`gëName
(Ë=
«me
Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

170 
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
);

171 
	}
}

173 
Uã°
* 
	gTe°Regi°ry
::
	$gëFú°Te°
()

175  
ã°s
;

176 
	}
}

178 
Uã°
* 
	gTe°Regi°ry
::
	$gëLa°Te°
()

180 
Uã°
* 
cuºít
 = 
ã°s
;

181 !
cuºít
->
	`gëNext
()->
	`isNuŒ
())

182 
cuºít
 = cuºít->
	`gëNext
();

183  
cuºít
;

184 
	}
}

186 
Uã°
* 
	gTe°Regi°ry
::
	$gëTe°WôhNext
(
Uã°
* 
ã°
)

188 
Uã°
* 
cuºít
 = 
ã°s
;

189 !
cuºít
->
	`gëNext
()->
	`isNuŒ
(Ë&& cuºít->gëNext(Ë!
ã°
)

190 
cuºít
 = cuºít->
	`gëNext
();

191  
cuºít
;

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestResult.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Resu….h
"

30 
	~"CµUTe°/Faûuª.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	gTe°Resu…
::
	$Te°Resu…
(
Te°Ouçut
& 
p
) :

35 
	`ouçut
(
p
), 
	`ã°Cou¡
(0), 
	`runCou¡
(0), 
	`checkCou¡
(0), 
	`ÁûuªCou¡
(0),

36 
	`fûãªdOutCou¡
(0), 
	`ign‹edCou¡
(0), 
	`tŸÆExecuti⁄Time
(0),

37 
	`timeSèπed
(0), 
	`cuºítTe°TimeSèπed
(0),

38 
	`cuºítTe°TŸÆExecuti⁄Time
(0), 
	`cuºítGroupTimeSèπed
(0),

39 
	$cuºítGroupTŸÆExecuti⁄Time
(0)

41 
	}
}

43 
	gTe°Resu…
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

45 
ouçut
.
	`£tProgªssIndiˇt‹
(
ödiˇt‹
);

46 
	}
}

48 
	gTe°Resu…
::~
	$Te°Resu…
()

50 
	}
}

52 
Te°Resu…
::
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

54 
ouçut
.
	`¥ötCuºítGroupSèπed
(*
ã°
);

55 
cuºítGroupTimeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

56 
	}
}

58 
	gTe°Resu…
::
	$cuºítGroupEnded
(
Uã°
* 
ã°
)

60 
cuºítGroupTŸÆExecuti⁄Time
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
()

61 - 
cuºítGroupTimeSèπed
;

62 
ouçut
.
	`¥ötCuºítGroupEnded
(*
this
);

63 
	}
}

65 
	gTe°Resu…
::
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

67 
ouçut
.
	`¥ötCuºítTe°Sèπed
(*
ã°
);

68 
cuºítTe°TimeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

69 
	}
}

71 
	gTe°Resu…
::
	$¥öt
(c⁄° * 
ãxt
)

73 
ouçut
.
	`¥öt
(
ãxt
);

74 
	}
}

76 
	gTe°Resu…
::
	$cuºítTe°Ended
(
Uã°
* 
ã°
)

78 
cuºítTe°TŸÆExecuti⁄Time
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
()

79 - 
cuºítTe°TimeSèπed
;

80 
ouçut
.
	`¥ötCuºítTe°Ended
(*
this
);

82 
	}
}

84 
	gTe°Resu…
::
	$addFaûuª
(c⁄° 
Faûuª
& 
Áûuª
)

86 
ouçut
.
	`¥öt
(
Áûuª
);

87 
ÁûuªCou¡
++;

88 
	}
}

90 
	gTe°Resu…
::
	$cou¡Te°
()

92 
ã°Cou¡
++;

93 
	}
}

95 
	gTe°Resu…
::
	$cou¡Run
()

97 
runCou¡
++;

98 
	}
}

100 
	gTe°Resu…
::
	$cou¡Check
()

102 
checkCou¡
++;

103 
	}
}

105 
	gTe°Resu…
::
	$cou¡FûãªdOut
()

107 
fûãªdOutCou¡
++;

108 
	}
}

110 
	gTe°Resu…
::
	$cou¡Ign‹ed
()

112 
ign‹edCou¡
++;

113 
	}
}

115 
	gTe°Resu…
::
	$ã°sSèπed
()

117 
timeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

118 
ouçut
.
	`¥ötTe°sSèπed
();

119 
	}
}

121 
	gTe°Resu…
::
	$ã°sEnded
()

123 
timeEnded
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

124 
tŸÆExecuti⁄Time
 = 
timeEnded
 - 
timeSèπed
;

125 
ouçut
.
	`¥ötTe°sEnded
(*
this
);

126 
	}
}

128 
	gTe°Resu…
::
	$gëTŸÆExecuti⁄Time
() const

130  
tŸÆExecuti⁄Time
;

131 
	}
}

133 
	gTe°Resu…
::
	$£tTŸÆExecuti⁄Time
(
exTime
)

135 
tŸÆExecuti⁄Time
 = 
exTime
;

136 
	}
}

138 
	gTe°Resu…
::
	$gëCuºítTe°TŸÆExecuti⁄Time
() const

140  
cuºítTe°TŸÆExecuti⁄Time
;

141 
	}
}

143 
	gTe°Resu…
::
	$gëCuºítGroupTŸÆExecuti⁄Time
() const

145  
cuºítGroupTŸÆExecuti⁄Time
;

146 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Utest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
Te°Resu…
* 
	gUã°
::
ã°Resu…_
 = 0;

33 
Uã°
* 
	gUã°
::
cuºítTe°_
 = 0;

35 
	gUã°
::
	$Uã°
() :

36 
	`group_
("UndeföedTe°Group"), 
	`«me_
("UndefinedTest"),

37 
	`fûe_
("UndeföedFûe"), 
	`löeNumbî_
(0),

38 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

40 
	}
}

42 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

43 
löeNumbî
) :

44 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
),

45 
	`löeNumbî_
(
löeNumbî
), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

47 
	}
}

49 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

50 
löeNumbî
, 
Uã°
* 
√xtTe°
) :

51 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
),

52 
	`löeNumbî_
(
löeNumbî
), 
	$√xt_
(
√xtTe°
)

54 
	}
}

56 
	gUã°
::~
	$Uã°
()

58 
	}
}

60 
Uã°
::
	$runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

62 
	`execuãPœtf‹mS≥cificRunO√Te°
(
∂ugö
, 
ªsu…
);

63 
	}
}

65 
	gUã°
::
	$runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

67 
∂ugö
->
	`runAŒPªTe°A˘i⁄
(*
this
, 
ªsu…
);

68 
	`run
(
ªsu…
);

69 
∂ugö
->
	`runAŒPo°Te°A˘i⁄
(*
this
, 
ªsu…
);

70 
	}
}

72 
	gUã°
::
	$run
(
Te°Resu…
& 
ªsu…
)

75 
Uã°
* 
ßvedTe°
 = 
cuºítTe°_
;

76 
Te°Resu…
* 
ßvedResu…
 = 
ã°Resu…_
;

78 
ªsu…
.
	`cou¡Run
();

79 
ã°Resu…_
 = &
ªsu…
;

80 
cuºítTe°_
 = 
this
;

82 i‡(
	`execuãPœtf‹mS≥cificSëup
()) {

83 
	`execuãPœtf‹mS≥cificTe°Body
();

85 
	`execuãPœtf‹mS≥cificTórdown
();

88 
cuºítTe°_
 = 
ßvedTe°
;

89 
ã°Resu…_
 = 
ßvedResu…
;

90 
	}
}

92 
	gUã°
::
	$exôCuºítTe°
()

94 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

95 
	}
}

97 
Uã°
 *
	gUã°
::
	$gëNext
() const

99  
√xt_
;

100 
	}
}

102 
Uã°
* 
	gUã°
::
	$addTe°
(
Uã°
 *
ã°
)

104 
√xt_
 = 
ã°
;

105  
this
;

106 
	}
}

108 
	gUã°
::
	$cou¡Te°s
()

110  
√xt_
->
	`cou¡Te°s
() + 1;

111 
	}
}

113 
boﬁ
 
	gUã°
::
	$isNuŒ
() const

115  
Ál£
;

116 
	}
}

118 
Sim∂eSåög
 
	gUã°
::
	$gëMa¸oName
() const

121 
	}
}

123 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëName
() const

125  
	`Sim∂eSåög
(
«me_
);

126 
	}
}

128 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëGroup
() const

130  
	`Sim∂eSåög
(
group_
);

131 
	}
}

133 
Sim∂eSåög
 
	gUã°
::
	$gëF‹m©ãdName
() const

135 
Sim∂eSåög
 
	`f‹m©ãdName
(
	`gëMa¸oName
());

136 
f‹m©ãdName
 += "(";

137 
f‹m©ãdName
 +
group_
;

138 
f‹m©ãdName
 += ", ";

139 
f‹m©ãdName
 +
«me_
;

140 
f‹m©ãdName
 += ")";

142  
f‹m©ãdName
;

143 
	}
}

145 c⁄° * 
	gUã°
::
	$gëProgªssIndiˇt‹
() const

148 
	}
}

150 
	gUã°
::
	$£tFûeName
(c⁄° * 
fûeName
)

152 
fûe_
 = 
fûeName
;

153 
	}
}

155 
	gUã°
::
	$£tLöeNumbî
(
löeNumbî
)

157 
löeNumbî_
 = 
löeNumbî
;

158 
	}
}

160 
	gUã°
::
	$£tGroupName
(c⁄° * 
groupName
)

162 
group_
 = 
groupName
;

163 
	}
}

165 
	gUã°
::
	$£tTe°Name
(c⁄° * 
ã°Name
)

167 
«me_
 = 
ã°Name
;

168 
	}
}

170 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëFûe
() const

172  
	`Sim∂eSåög
(
fûe_
);

173 
	}
}

175 
	gUã°
::
	$gëLöeNumbî
() const

177  
löeNumbî_
;

178 
	}
}

180 
	gUã°
::
	$£tup
()

182 
	}
}

184 
Uã°
::
	$ã¨down
()

186 
	}
}

188 
boﬁ
 
Uã°
::
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
,

189 c⁄° 
Sim∂eSåög
& 
«meFûãr
) const

191 
Sim∂eSåög
 
	`group
(
group_
);

192 
Sim∂eSåög
 
	`«me
(
«me_
);

193 i‡(
group
.
	`c⁄èös
(
groupFûãr
Ë&& 
«me
.c⁄èös(
«meFûãr
)Ë 
åue
;

195  
Ál£
;

196 
	}
}

198 
boﬁ
 
	gUã°
::
	$as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

199 c⁄° * 
fûeName
, 
löeNumbî
)

201 
ã°Resu…_
->
	`cou¡Check
();

202 i‡(!(
c⁄dôi⁄
)) {

203 
Sim∂eSåög
 
	`mesßge
("CHECK(");

204 
mesßge
 +
c⁄dôi⁄Såög
;

205 
mesßge
 += ") failed";

206 
Faûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
mesßge
);

207 
ã°Resu…_
->
	`addFaûuª
(
_f
);

208  
Ál£
;

210  
åue
;

211 
	}
}

213 
boﬁ
 
	gUã°
::
	$as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

214 c⁄° * 
fûeName
, 
löeNumbî
)

216 
ã°Resu…_
->
	`cou¡Check
();

217 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 =0Ë 
åue
;

218 i‡(
a˘uÆ
 == 0) {

219 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

220 
	`SåögFrom
("(null)"));

221 
ã°Resu…_
->
	`addFaûuª
(
_f
);

222  
Ál£
;

224 i‡(
ex≥˘ed
 == 0) {

225 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
("(null)"),

226 
	`SåögFrom
(
a˘uÆ
));

227 
ã°Resu…_
->
	`addFaûuª
(
_f
);

228  
Ál£
;

230 i‡(
	`Pœtf‹mS≥cificSåCmp
(
ex≥˘ed
, 
a˘uÆ
) != 0) {

231 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

232 
	`SåögFrom
(
a˘uÆ
));

233 
ã°Resu…_
->
	`addFaûuª
(
_f
);

234  
Ál£
;

236  
åue
;

237 
	}
}

239 
boﬁ
 
	gUã°
::
	$as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

240 c⁄° * 
fûeName
, 
löeNumbî
)

242 
ã°Resu…_
->
	`cou¡Check
();

243 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 =0Ë 
åue
;

244 i‡(
a˘uÆ
 == 0) {

245 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

246 
	`SåögFrom
("(null)"));

247 
ã°Resu…_
->
	`addFaûuª
(
_f
);

248  
Ál£
;

250 i‡(
ex≥˘ed
 == 0) {

251 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
("(null)"),

252 
	`SåögFrom
(
a˘uÆ
));

253 
ã°Resu…_
->
	`addFaûuª
(
_f
);

254  
Ál£
;

256 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èös
(
ex≥˘ed
)) {

257 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

258 
	`SåögFrom
(
a˘uÆ
));

259 
ã°Resu…_
->
	`addFaûuª
(
_f
);

260  
Ál£
;

262  
åue
;

263 
	}
}

265 
	$PadSåögsToSameLígth
(
Sim∂eSåög
& 
aDecimÆ
, Sim∂eSåög& 
eDecimÆ
,

266 
∑dCh¨a˘î
)

268 
∑d
[2];

269 
∑d
[0] = 
∑dCh¨a˘î
;

270 
∑d
[1] = 0;

271 i‡(
aDecimÆ
.
	`size
(Ë> 
eDecimÆ
.size()ËeDecimÆ = 
	`Sim∂eSåög
(
∑d
,

272 
aDecimÆ
.
	`size
(Ë- 
eDecimÆ
.size()) +ÉDecimal;

273 
aDecimÆ
 = 
	`Sim∂eSåög
(
∑d
, 
eDecimÆ
.
	`size
() -áDecimal.size())

274 + 
aDecimÆ
;

275 
	}
}

277 
boﬁ
 
	gUã°
::
	$as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
,

278 
löeNumbî
)

280 
ã°Resu…_
->
	`cou¡Check
();

281 i‡(
ex≥˘ed
 !
a˘uÆ
) {

282 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

283 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

284 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

285 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

287 
	`PadSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

288 
	`PadSåögsToSameLígth
(
aHex
, 
eHex
, '0');

290 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

291 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

293 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘edRï‹ãd
,

294 
a˘uÆRï‹ãd
);

295 
ã°Resu…_
->
	`addFaûuª
(
_f
);

296  
Ál£
;

298  
åue
;

299 
	}
}

301 
boﬁ
 
	gUã°
::
	$as£πPoöãrsEquÆ
(* 
ex≥˘ed
, * 
a˘uÆ
,

302 c⁄° * 
fûeName
, 
löeNumbî
)

304 
ã°Resu…_
->
	`cou¡Check
();

305 i‡(
ex≥˘ed
 !
a˘uÆ
) {

306 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

307 
	`SåögFrom
(
a˘uÆ
));

308 
ã°Resu…_
->
	`addFaûuª
(
_f
);

309  
Ál£
;

311  
åue
;

312 
	}
}

314 
boﬁ
 
	gUã°
::
	$as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

315 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

317 
ã°Resu…_
->
	`cou¡Check
();

318 i‡(
	`Pœtf‹mS≥cificFabs
(
ex≥˘ed
 - 
a˘uÆ
Ë> 
thªshﬁd
) {

319 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

320 
	`SåögFrom
(
a˘uÆ
));

321 
ã°Resu…_
->
	`addFaûuª
(
_f
);

322  
Ál£
;

324  
åue
;

325 
	}
}

327 
	gUã°
::
	$Áû
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

329 
Faûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
ãxt
);

330 
ã°Resu…_
->
	`addFaûuª
(
_f
);

331 
	}
}

333 
	gUã°
::
	$¥öt
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

335 
Sim∂eSåög
 
°rögToPröt
 = "\n";

336 
°rögToPröt
 +
fûeName
;

337 
°rögToPröt
 += ":";

338 
°rögToPröt
 +
	`SåögFrom
(
löeNumbî
);

339 
°rögToPröt
 += " ";

340 
°rögToPröt
 +
ãxt
;

341 
ã°Resu…_
->
	`¥öt
(
°rögToPröt
.
	`asCh¨Såög
());

342 
	}
}

344 
	gUã°
::
	$¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
,

345 
löeNumbî
)

347 
	`¥öt
(
ãxt
.
	`asCh¨Såög
(), 
fûeName
, 
löeNumbî
);

348 
	}
}

350 
Te°Resu…
* 
	gUã°
::
	$gëTe°Resu…
()

352  
ã°Resu…_
;

353 
	}
}

355 
Uã°
* 
	gUã°
::
	$gëCuºít
()

357  
cuºítTe°_
;

358 
	}
}

363 
	gNuŒTe°
::
	$NuŒTe°
() :

364 
	`Uã°
("NullGroup", "NullName", "NullFile", -1, 0)

366 
	}
}

368 
	gNuŒTe°
::~
	$NuŒTe°
()

370 
	}
}

372 
NuŒTe°
& NuŒTe°::
	$ö°™˚
()

374 
NuŒTe°
 
_ö°™˚
;

375  
_ö°™˚
;

376 
	}
}

378 
	gNuŒTe°
::
	$cou¡Te°s
()

381 
	}
}

383 
Uã°
* 
	gNuŒTe°
::
	$gëNext
() const

385  &
	`ö°™˚
();

386 
	}
}

388 
boﬁ
 
	gNuŒTe°
::
	$isNuŒ
() const

390  
åue
;

391 
	}
}

395 
	gTe°In°ÆÀr
::
	$Te°In°ÆÀr
(
Uã°
* 
t
, c⁄° * 
groupName
,

396 c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
)

398 
t
->
	`£tGroupName
(
groupName
);

399 
t
->
	`£tTe°Name
(
ã°Name
);

400 
t
->
	`£tFûeName
(
fûeName
);

401 
t
->
	`£tLöeNumbî
(
löeNumbî
);

402 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`addTe°
(
t
);

403 
	}
}

405 
	gTe°In°ÆÀr
::~
	$Te°In°ÆÀr
()

407 
	}
}

409 
Te°In°ÆÀr
::
	$unDo
()

411 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`unDoLa°AddTe°
();

412 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp

28 
	~<°dlib.h
>

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 #unde‡
mÆloc


31 #unde‡
‰ì


32 #unde‡
ˇŒoc


33 #unde‡
ªÆloc


35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~<sys/time.h
>

37 
	~<time.h
>

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~<£tjmp.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

44 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

46 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

47 
	gjmp_buf_ödex
 = 0;

49 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

51 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

52 
jmp_buf_ödex
++;

53 
	`£tup
();

54 
jmp_buf_ödex
--;

55  
åue
;

57  
Ál£
;

58 
	}
}

60 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

63 
jmp_buf_ödex
++;

64 
	`ã°Body
();

65 
jmp_buf_ödex
--;

67 
	}
}

69 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

71 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

72 
jmp_buf_ödex
++;

73 
	`ã¨down
();

74 
jmp_buf_ödex
--;

76 
	}
}

78 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

80 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

81 
jmp_buf_ödex
++;

82 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

83 
jmp_buf_ödex
--;

85 
	}
}

87 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

89 
jmp_buf_ödex
--;

90 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

91 
	}
}

95 
	$TimeInMûlisIm∂emíèti⁄
()

97 
timevÆ
 
tv
;

98 
timez⁄e
 
tz
;

99 
	`gëtimeofday
(&
tv
, &
tz
);

100  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

101 
	}
}

103 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

105 
	$GëPœtf‹mS≥cificTimeInMûlis
()

107  
	`timeInMûlisFp
();

108 
	}
}

110 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

112 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

113 
	}
}

117 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

119 
time_t
 
tm
 = 
	`time
(
NULL
);

120  
	`˘ime
(&
tm
);

121 
	}
}

123 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

125 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

127  
	`timeSåögFp
();

128 
	}
}

130 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

132 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

135 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

137  
	`©oi
(
°r
);

138 
	}
}

140 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

142  
	`°æí
(
°r
);

143 
	}
}

145 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

147  
	`°rˇt
(
s1
, 
s2
);

148 
	}
}

150 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

152  
	`°r˝y
(
s1
, 
s2
);

153 
	}
}

155 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

157  
	`°∫˝y
(
s1
, 
s2
, 
size
);

158 
	}
}

160 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

162  
	`°rcmp
(
s1
, 
s2
);

163 
	}
}

165 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

167  
	`°∫cmp
(
s1
, 
s2
, 
size
);

168 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  (*Ë
	`°r°r
(
s1
, 
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

181  
	`f›í
(
fûíame
, 
Êag
);

182 
	}
}

184 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

186 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

187 
	}
}

189 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

191 
	`f˛o£
((
FILE
*)
fûe
);

192 
	}
}

194 
	$Pœtf‹mS≥cificFlush
()

196 
	`fÊush
(
°dout
);

197 
	}
}

199 
	$Pœtf‹mS≥cificPutch¨
(
c
)

201  
	`putch¨
(
c
);

202 
	}
}

204 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

206  
	`mÆloc
(
size
);

207 
	}
}

209 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

211  
	`ªÆloc
(
mem‹y
, 
size
);

212 
	}
}

214 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

216 
	`‰ì
(
mem‹y
);

217 
	}
}

219 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

221  
	`mem˝y
(
s1
, 
s2
, 
size
);

222 
	}
}

224 
Pœtf‹mS≥cificAtExô
((*
func
) ())

226  
	`©exô
(
func
);

227 
	}
}

229 
	$Pœtf‹mS≥cificFabs
(
d
)

231  
	`Ábs
(
d
);

232 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Iar\UtestPlatform.cpp

29 
	~<time.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<£tjmp.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~"CµUTe°/Te°H¨√ss.h
"

37 #unde‡
mÆloc


38 #unde‡
ˇŒoc


39 #unde‡
ªÆloc


40 #unde‡
‰ì


41 
	~"CµUTe°/Te°Regi°ry.h
"

42 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

44 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

45 
	gjmp_buf_ödex
 = 0;

47 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

49 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

50 
jmp_buf_ödex
++;

51 
	`£tup
();

52 
jmp_buf_ödex
--;

53  
åue
;

55  
Ál£
;

56 
	}
}

58 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

60 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

61 
jmp_buf_ödex
++;

62 
	`ã°Body
();

63 
jmp_buf_ödex
--;

65 
	}
}

67 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

69 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

70 
jmp_buf_ödex
++;

71 
	`ã¨down
();

72 
jmp_buf_ödex
--;

74 
	}
}

76 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

78 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

79 
jmp_buf_ödex
++;

80 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

81 
jmp_buf_ödex
--;

83 
	}
}

85 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

87 
jmp_buf_ödex
--;

88 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

89 
	}
}

93 
	$TimeInMûlisIm∂emíèti⁄
()

95 
˛ock_t
 
t
 = 
	`˛ock
();

97 
t
 =Å * 10;

100 
	}
}

102 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

104 
	$GëPœtf‹mS≥cificTimeInMûlis
()

106  
	`timeInMûlisFp
();

107 
	}
}

109 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

111 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

112 
	}
}

116 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

118 
time_t
 
tm
 = 
	`time
(
NULL
);

119  
	`˘ime
(&
tm
);

120 
	}
}

122 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

124 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

126  
	`timeSåögFp
();

127 
	}
}

129 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

131 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

134 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

136  
	`©oi
(
°r
);

137 
	}
}

139 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

141  
	`°æí
(
°r
);

142 
	}
}

144 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

146  
	`°rˇt
(
s1
, 
s2
);

147 
	}
}

149 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

151  
	`°r˝y
(
s1
, 
s2
);

152 
	}
}

154 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

156  
	`°∫˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

161  
	`°rcmp
(
s1
, 
s2
);

162 
	}
}

164 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

166  
	`°∫cmp
(
s1
, 
s2
, 
size
);

167 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  
	`°r°r
((*)
s1
, (*)
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

182 
	}
}

184 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

186 
	}
}

188 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

190 
	}
}

192 
	$Pœtf‹mS≥cificFlush
()

194 
	}
}

196 
	$Pœtf‹mS≥cificPutch¨
(
c
)

198  
	`putch¨
(
c
);

199 
	}
}

201 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

203  
	`mÆloc
(
size
);

204 
	}
}

206 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

208  
	`ªÆloc
(
mem‹y
, 
size
);

209 
	}
}

211 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

213 
	`‰ì
(
mem‹y
);

214 
	}
}

216 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

218  
	`mem˝y
(
s1
, 
s2
, 
size
);

219 
	}
}

221 
Pœtf‹mS≥cificAtExô
((*
func
) ())

223  
	`©exô
(
func
);

224 
	}
}

226 
	$Pœtf‹mS≥cificFabs
(
d
)

228  
	`Ábs
(
d
);

229 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp

28 
	~"CµUTe°/Mem‹yLókW¨nög.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

34 
	gÆloˇãdBlocks
 = 0;

35 
	gÆloˇãdAºays
 = 0;

36 
	gfú°InôülBlocks
 = 0;

37 
	gfú°InôülAºays
 = 0;

38 
boﬁ
 
	gªp‹ãrRegi°îed
 = 
Ál£
;

40 ˛as†
	cMem‹yLókW¨nögD©a


42 
	mpublic
:

43 
Mem‹yLókW¨nögD©a
();

45 
	möôülBlocksU£d
;

46 
	möôülAºaysU£d
;

48 
	mblockUßgeCheckPoöt
;

49 
	m¨øyUßgeCheckPoöt
;

50 
	mex≥˘Cou¡
;

51 
	mmesßge
[100];

54 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

56 
_im∂
 = (
Mem‹yLókW¨nögD©a
*Ë
	`mÆloc
((MemoryLeakWarningData));

57 
_im∂
->
öôülBlocksU£d
 = 0;

58 
_im∂
->
öôülAºaysU£d
 = 0;

60 
_im∂
->
blockUßgeCheckPoöt
 = 0;

61 
_im∂
->
¨øyUßgeCheckPoöt
 = 0;

62 
_im∂
->
ex≥˘Cou¡
 = 0;

63 
_im∂
->
mesßge
[0] = '\0';

64 
	}
}

66 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

68 
	`‰ì
(
_im∂
);

69 
	}
}

72 
ªp‹tMem‹yBÆœn˚
();

75 
	$ªp‹tMem‹yBÆœn˚
()

77 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
fú°InôülBlocks
;

78 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
fú°InôülAºays
;

79 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

81 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

82 
	`¥ötf
("NoÜeaks but someárrays were deleted without []\n");

85 i‡(
blockBÆ™˚
 > 0)

86 
	`¥ötf
("Mem‹yÜók! %d block†nŸ dñëed\n", 
blockBÆ™˚
);

87 i‡(
¨øyBÆ™˚
 > 0)

88 
	`¥ötf
("Mem‹yÜók! %dáºay†nŸ dñëed\n", 
¨øyBÆ™˚
);

89 i‡(
blockBÆ™˚
 < 0)

90 
	`¥ötf
("M‹êblock†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
blockBÆ™˚
);

91 i‡(
¨øyBÆ™˚
 < 0)

92 
	`¥ötf
("M‹ê¨øy†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
¨øyBÆ™˚
);

94 
	`¥ötf
("NOTE - some memoryÜeaksáppearÅo beállocated staticsÅhatáreÇotÑeleased\n"

100 
	}
}

103 
Mem‹yLókW¨nög
* Mem‹yLókW¨nög::
_œã°
 = 
NULL
;

105 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

107 
_œã°
 = 
this
;

108 
	`Cª©eD©a
();

109 
	}
}

111 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

113 
	`De°royD©a
();

114 
	}
}

116 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

118  
_œã°
;

119 
	}
}

121 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

123 
_œã°
 = 
œã°
;

124 
	}
}

126 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

128 
_im∂
->
öôülBlocksU£d
 = 
ÆloˇãdBlocks
;

129 
_im∂
->
öôülAºaysU£d
 = 
ÆloˇãdAºays
;

131 i‡(!
ªp‹ãrRegi°îed
) {

132 
fú°InôülBlocks
 = 
ÆloˇãdBlocks
;

133 
fú°InôülAºays
 = 
ÆloˇãdAºays
;

134 
ªp‹ãrRegi°îed
 = 
åue
;

137 
	}
}

139 c⁄° * 
	gMem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

141 i‡(
_im∂
->
öôülBlocksU£d
 !(
ÆloˇãdBlocks
-
toBeDñëedLóks
)

142 || 
_im∂
->
öôülAºaysU£d
 !
ÆloˇãdAºays
 )

144 
	`¥ötf
("initial blocks=%d,állocated blocks=%d\ninitialárrays=%d,állocatedárrays=%d\n",

145 
_im∂
->
öôülBlocksU£d
, 
ÆloˇãdBlocks
, _im∂->
öôülAºaysU£d
, 
ÆloˇãdAºays
);

151 
	}
}

153 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

155 
_im∂
->
blockUßgeCheckPoöt
 = 
ÆloˇãdBlocks
;

156 
_im∂
->
¨øyUßgeCheckPoöt
 = 
ÆloˇãdAºays
;

157 
	}
}

159 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

161 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
;

162 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
;

164 i‡(
_im∂
->
ex≥˘Cou¡
 !0 && 
blockBÆ™˚
 + 
¨øyBÆ™˚
 == _impl->expectCount)

165  
Ál£
;

166 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

167  
Ál£
;

168 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

169 
	`•rötf
(
_im∂
->
mesßge
, "NoÜeaks but someárrays were deleted without []\n");

172 
nch¨s
 = 0;

173 i‡(
_im∂
->
blockUßgeCheckPoöt
 !
ÆloˇãdBlocks
)

174 
nch¨s
 = 
	`•rötf
(
_im∂
->
mesßge
, "thisÅestÜeaks %d blocks",

175 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
);

177 i‡(
_im∂
->
¨øyUßgeCheckPoöt
 !
ÆloˇãdAºays
)

178 
	`•rötf
(
_im∂
->
mesßge
 + 
nch¨s
, "thisÅestÜeaks %dárrays",

179 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
);

181  
åue
;

182 
	}
}

184 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

186  
_im∂
->
mesßge
;

187 
	}
}

189 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

191 
_im∂
->
ex≥˘Cou¡
 = 
n
;

192 
	}
}

196 * 
›î©‹
 
	$√w
(
size_t
 
size
)

198 
ÆloˇãdBlocks
++;

199  
	`mÆloc
(
size
);

200 
	}
}

202 
›î©‹
 
	$dñëe
(* 
mem
)

204 
ÆloˇãdBlocks
--;

205 
	`‰ì
(
mem
);

206 
	}
}

208 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

210 
	gÆloˇãdAºays
++;

211  
mÆloc
(
size
);

214 
›î©‹
 
	gdñëe
[](* 
	gmem
)

216 
	gÆloˇãdAºays
--;

217 
‰ì
(
mem
);

220 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

222 
ÆloˇãdBlocks
++;

223  
	`mÆloc
(
size
);

225 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°/Te°Resu….h
"

4 
	~<time.h
>

5 
	~<sys/time.h
>

7 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

9 
	`ã°Body
();

10 
	}
}

15 
	$TimeInMûlisIm∂emíèti⁄
()

17 
timevÆ
 
tv
;

18 
timez⁄e
 
tz
;

19 ::
	`gëtimeofday
(&
tv
, &
tz
);

20  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

21 
	}
}

23 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

25 
	$GëPœtf‹mS≥cificTimeInMûlis
()

27  
	`timeInMûlisFp
();

28 
	}
}

30 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

32 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

33 
	}
}

37 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
()

39 
time_t
 
tm
 = 
	`time
(
NULL
);

40  
	`˘ime
(&
tm
);

41 
	}
}

43 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

45 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
()

47  
	`timeSåögFp
();

48 
	}
}

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ())

52 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

53 
	}
}

56 
	~<£tjmp.h
>

58 
jmp_buf
 
	gã°_exô_jmp_buf
;

60 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
))

63 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

64 
	}
}

66 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

68 
	`l⁄gjmp
(
ã°_exô_jmp_buf
, 1);

69 
	}
}

71 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

73 
	}
}

75 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp

28 
	~"Mem‹yLókW¨nög.h
"

30 
	~<e32ba£.h
>

32 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
_œã°
 = 
NULL
;

35 ˛as†
	cMem‹yLókW¨nögD©a
 : 
public
 
CBa£
 {

36 
public
:

37 
TI¡
 
iInôülAŒocCñls
;

38 
TI¡
 
	miEx≥˘edLóks
;

39 
TI¡
 
	miInôülThªadH™dÀCou¡
;

40 
TI¡
 
	miInôülPro˚ssH™dÀCou¡
;

43 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

45 
_œã°
 = 
this
;

46 
	`Cª©eD©a
();

47 
	}
}

49 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

51 
	`De°royD©a
();

52 
	}
}

54 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

56 
	}
}

58 c⁄° * 
Mem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

60 
TI¡
 
	`˚ŒDif„ªn˚
(
U£r
::
	`Cou¡AŒocCñls
(Ë- 
_im∂
->
iInôülAŒocCñls
);

61 if–
˚ŒDif„ªn˚
 !
toBeDñëedLóks
 ) {

65 
TI¡
 
¥o˚ssH™dÀs
;

66 
TI¡
 
thªadH™dÀs
;

67 
	`RThªad
().
	`H™dÀCou¡
(
¥o˚ssH™dÀs
, 
thªadH™dÀs
);

69 if(
_im∂
->
iInôülPro˚ssH™dÀCou¡
 !
¥o˚ssH™dÀs
 ||

70 
_im∂
->
iInôülThªadH™dÀCou¡
 !
thªadH™dÀs
) {

75 
	}
}

77 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

79 
_im∂
->
iInôülAŒocCñls
 = 
U£r
::
	`Cou¡AŒocCñls
();

80 
	`RThªad
().
	`H™dÀCou¡
(
_im∂
->
iInôülPro˚ssH™dÀCou¡
, _im∂->
iInôülThªadH™dÀCou¡
);

81 
	}
}

83 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

85 
TI¡
 
	`ÆloˇãdCñls
(
U£r
::
	`Cou¡AŒocCñls
());

86 if(
_im∂
->
iEx≥˘edLóks
 != 0) {

87 
TI¡
 
	`dif„ªn˚
(
	`Abs
(
_im∂
->
iInôülAŒocCñls
 - 
ÆloˇãdCñls
));

88  
dif„ªn˚
 !
_im∂
->
iEx≥˘edLóks
;

90  
ÆloˇãdCñls
 !
_im∂
->
iInôülAŒocCñls
;

91 
	}
}

93 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

96 
	}
}

98 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

100 
_im∂
->
iEx≥˘edLóks
 = 
n
;

101 
	}
}

104 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

106 
_im∂
 = 
	`√w
(
ELóve
Ë
	`Mem‹yLókW¨nögD©a
();

107 
	}
}

109 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

111 
dñëe
 
_im∂
;

112 
_im∂
 = 
NULL
;

113 
	}
}

115 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

117  
_œã°
;

118 
	}
}

120 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

122 
_œã°
 = 
œã°
;

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~<e32def.h
>

30 
	~<e32°d.h
>

31 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<°dlib.h
>

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

39 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

41 
TI¡
 
	`îr
(
KEºN⁄e
);

42 
	`TRAP
(
îr
, 
	`ã°Body
());

43 if(
îr
 !
KEºN⁄e
) {

44 
Uã°
::
	`gëCuºít
()->
	`Áû
("Leave inÅest method", "", 0);

46 
	}
}

48 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
() {

49 
U£r
::
	`Lóve
(
KEºN⁄e
);

50 
	}
}

52 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
() {

53 
	`£tup
();

54  
åue
;

55 
	}
}

57 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
) {

58 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
() {

62 
	`ã¨down
();

63 
	}
}

65 
	$TimeInMûlisIm∂emíèti⁄
() {

66 
timevÆ
 
tv
;

67 
timez⁄e
 
tz
;

68 ::
	`gëtimeofday
(&
tv
, &
tz
);

69  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

70 
	}
}

72 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

74 
	$GëPœtf‹mS≥cificTimeInMûlis
() {

75  
	`timeInMûlisFp
();

76 
	}
}

78 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ()) {

79 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

80 
	}
}

84 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
() {

85 
time_t
 
tm
 = 
	`time
(
NULL
);

86  
	`˘ime
(&
tm
);

87 
	}
}

89 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

91 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
() {

92  
	`timeSåögFp
();

93 
	}
}

95 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ()) {

96 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

97 
	}
}

99 
	$Pœtf‹mS≥cificVSN¥ötf
(* 
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
) {

100  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

101 
	}
}

103 
	$Pœtf‹mS≥cificFlush
() {

104 
	`fÊush
(
°dout
);

105 
	}
}

107 
	$Pœtf‹mS≥cificPutch¨
(
c
) {

108  
	`putch¨
(
c
);

109 
	}
}

111 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
) {

112  
	`°r˝y
(
s1
, 
s2
);

113 
	}
}

115 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
s
) {

116  
	`°æí
(
s
);

117 
	}
}

119 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
) {

120  
	`°r°r
(
s1
, 
s2
);

121 
	}
}

123 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

124  
	`°rcmp
(
s1
, 
s2
);

125 
	}
}

127 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
) {

128  
	`°∫˝y
(
s1
, 
s2
, 
size
);

129 
	}
}

131 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
) {

132  
	`°∫cmp
(
s1
, 
s2
, 
size
);

133 
	}
}

135 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
) {

136  
	`°rˇt
(
s1
, 
s2
);

137 
	}
}

139 
	$Pœtf‹mS≥cificFabs
(
d
) {

140  
	`Ábs
(
d
);

141 
	}
}

143 * 
	$Pœtf‹mS≥cificMÆloc
(
size
) {

144  
	`mÆloc
(
size
);

145 
	}
}

147 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
) {

148  
	`ªÆloc
(
mem‹y
, 
size
);

149 
	}
}

151 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
) {

152 
	`‰ì
(
mem‹y
);

153 
	}
}

155 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
) {

156  
	`mem˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
Pœtf‹mS≥cificAtExô
((*
func
) ()) {

160  
	`©exô
(
func
);

161 
	}
}

163 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
) {

164  
	`f›í
(
fûíame
, 
Êag
);

165 
	}
}

167 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
) {

168 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

169 
	}
}

171 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
) {

172 
	`f˛o£
((
FILE
*)
fûe
);

173 
	}
}

175 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
) {

176  
	`©oi
(
°r
);

177 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp

1 
	~<°dlib.h
>

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 #unde‡
mÆloc


4 #unde‡
‰ì


5 #unde‡
ˇŒoc


6 #unde‡
ªÆloc


8 
	~"CµUTe°/Te°Regi°ry.h
"

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<£tjmp.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

14 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

16 
	~<wödows.h
>

17 
	~<mmsy°em.h
>

21 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

22 
	gjmp_buf_ödex
 = 0;

24 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

26 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

27 
jmp_buf_ödex
++;

28 
	`£tup
();

29 
jmp_buf_ödex
--;

30  
åue
;

32  
Ál£
;

33 
	}
}

35 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

37 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

38 
jmp_buf_ödex
++;

39 
	`ã°Body
();

40 
jmp_buf_ödex
--;

42 
	}
}

44 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

46 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

47 
jmp_buf_ödex
++;

48 
	`ã¨down
();

49 
jmp_buf_ödex
--;

51 
	}
}

53 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

55 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

56 
jmp_buf_ödex
++;

57 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

58 
jmp_buf_ödex
--;

60 
	}
}

62 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

64 
jmp_buf_ödex
--;

65 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

66 
	}
}

72 
	$TimeInMûlisIm∂emíèti⁄
()

74  
	`timeGëTime
()/1000;

75 
	}
}

77 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

79 
	$GëPœtf‹mS≥cificTimeInMûlis
()

81  
	`timeInMûlisFp
();

82 
	}
}

84 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

86 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

87 
	}
}

91 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

94 
	}
}

96 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

98 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

100  
	`timeSåögFp
();

101 
	}
}

103 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

105 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

111 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

113  
	`©oi
(
°r
);

114 
	}
}

116 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

118  
	`°æí
(
°r
);

119 
	}
}

121 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

123  
	`°rˇt
(
s1
, 
s2
);

124 
	}
}

126 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

128  
	`°r˝y
(
s1
, 
s2
);

129 
	}
}

131 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

138  
	`°rcmp
(
s1
, 
s2
);

139 
	}
}

141 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

143  
	`°∫cmp
(
s1
, 
s2
, 
size
);

144 
	}
}

145 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

147  (*Ë
	`°r°r
(
s1
, 
s2
);

148 
	}
}

150 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

152 * 
buf
 = 0;

153 
sizeGuess
 = 
size
;

155 
ªsu…
 = 
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

156 
°r
[
size
-1] = 0;

157 
ªsu…
 == -1)

159 i‡(
buf
 != 0)

160 
	`‰ì
(
buf
);

161 
sizeGuess
 += 10;

162 
buf
 = (*)
	`mÆloc
(
sizeGuess
);

163 
ªsu…
 = 
	`_v¢¥ötf
–
buf
, 
sizeGuess
, 
f‹m©
, 
¨gs
);

166 i‡(
buf
 != 0)

167 
	`‰ì
(
buf
);

168  
ªsu…
;

170 
	}
}

172 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

174  
	`f›í
(
fûíame
, 
Êag
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

179 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

180 
	}
}

182 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

184 
	`f˛o£
((
FILE
*)
fûe
);

185 
	}
}

187 
	$Pœtf‹mS≥cificFlush
()

189 
	`fÊush
(
°dout
);

190 
	}
}

192 
	$Pœtf‹mS≥cificPutch¨
(
c
)

194  
	`putch¨
(
c
);

195 
	}
}

197 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

199  
	`mÆloc
(
size
);

200 
	}
}

202 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

204  
	`ªÆloc
(
mem‹y
, 
size
);

205 
	}
}

207 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

209 
	`‰ì
(
mem‹y
);

210 
	}
}

212 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

214  
	`mem˝y
(
s1
, 
s2
, 
size
);

215 
	}
}

217 
Pœtf‹mS≥cificAtExô
((*
func
) ())

219  
	`©exô
(
func
);

220 
	}
}

222 
	$Pœtf‹mS≥cificFabs
(
d
)

224  
	`Ábs
(
d
);

225 
	}
}

235 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

237 
åy
 {

238 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

240 
	`ˇtch
 () {

244 
	}
}

246 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

248 
	`ã°Body
();

249 
	}
}

251 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

253 
	`throw
(1);

254 
	}
}

258 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, * 
¨gs
)

260  
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, (
va_li°
Ë
¨gs
);

261 
	}
}

266 
	~<£tjmp.h
>

268 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

269 
	gjmp_buf_ödex
 = 0;

271 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

273 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

274 
jmp_buf_ödex
++;

275 
	`£tup
();

276 
jmp_buf_ödex
--;

277  
åue
;

279  
Ál£
;

280 
	}
}

282 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

284 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

285 
jmp_buf_ödex
++;

286 
	`ã°Body
();

287 
jmp_buf_ödex
--;

289 
	}
}

291 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

293 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

294 
jmp_buf_ödex
++;

295 
	`ã¨down
();

296 
jmp_buf_ödex
--;

298 
	}
}

300 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

302 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

303 
jmp_buf_ödex
++;

304 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

305 
jmp_buf_ödex
--;

307 
	}
}

310 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

312 
jmp_buf_ödex
--;

313 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

314 
	}
}

330 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

332 
åy
 {

333 
	`£tup
();

335 
	`ˇtch
 () {

336  
Ál£
;

338  
åue
;

339 
	}
}

341 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

343 
åy
 {

344 
	`ã°Body
();

346 
	`ˇtch
 () {

349 
	}
}

351 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

353 
åy
 {

354 
	`ã¨down
();

356 
	`ˇtch
 () {

359 
	}
}

361 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

363 
	`throw
(1);

364 
	}
}

367 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

369 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

371 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	$maö
(
ac
, c⁄° ** 
av
)

32  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

33 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.h

29 
IMPORT_TEST_GROUP
–
Uã°
);

30 
IMPORT_TEST_GROUP
–
Faûuª
);

31 
IMPORT_TEST_GROUP
–
Te°Ouçut
);

32 
IMPORT_TEST_GROUP
–
Sim∂eSåög
);

33 
IMPORT_TEST_GROUP
–
Te°In°ÆÀr
);

34 
IMPORT_TEST_GROUP
–
NuŒTe°
);

35 
IMPORT_TEST_GROUP
–
Mem‹yLókW¨nögTe°
);

36 
IMPORT_TEST_GROUP
–
Te°H¨√ss_c
);

37 
IMPORT_TEST_GROUP
–
Comm™dLöeTe°Ru¬î
);

38 
IMPORT_TEST_GROUP
–
JUnôOuçutTe°
);

39 
IMPORT_TEST_GROUP
–
Mem‹yLókDëe˘‹Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineArgumentsTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

32 ˛as†
	cO±i⁄sPlugö
: 
public
 
Te°Plugö


34 
public
:

35 
	$O±i⁄sPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

36 
	$Te°Plugö
(
«me
)

40 ~
	$O±i⁄sPlugö
()

42 
	}
}

44 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

46  
åue
;

47 
	}
}

51 
	$TEST_GROUP
(
Comm™dLöeArgumíts
)

52 { 
Comm™dLöeArgumíts
* 
¨gs
;

53 
O±i⁄sPlugö
* 
∂ugö
;

55 
	`£tup
()

57 
∂ugö
 = 
√w
 
	`O±i⁄sPlugö
("options");

59 
	`ã¨down
()

61 
dñëe
 
¨gs
;

62 
dñëe
 
∂ugö
;

65 
boﬁ
 
	`√wArgumítP¨£r
(
¨gc
, c⁄° ** 
¨gv
)

67 
¨gs
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
, 
∂ugö
);

68  
¨gs
->
	`∑r£
();

70 
	}
};

72 
	$TEST
(
Comm™dLöeArgumíts
, 
Cª©e
)

74 
	}
}

76 
	$TEST
(
Comm™dLöeArgumíts
, 
vîbo£SëMu…ùÀP¨amëîs
)

78 c⁄° * 
¨gv
[] = { "tests.exe", "-v" };

79 
	`CHECK
(
	`√wArgumítP¨£r
(2, 
¨gv
));

80 
	`CHECK
(
¨gs
->
	`isVîbo£
());

81 
	}
}

83 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©Së
)

85 
¨gc
 = 2;

86 c⁄° * 
¨gv
[] = { "tests.exe", "-r3" };

87 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

88 
	`LONGS_EQUAL
(3, 
¨gs
->
	`gëRïótCou¡
());

89 
	}
}

91 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDif„ª¡P¨amëî
)

93 
¨gc
 = 3;

94 c⁄° * 
¨gv
[] = { "tests.exe", "-r", "4" };

95 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

96 
	`LONGS_EQUAL
(4, 
¨gs
->
	`gëRïótCou¡
());

97 
	}
}

99 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDeÁu…sToTwo
)

101 
¨gc
 = 2;

102 c⁄° * 
¨gv
[] = { "tests.exe", "-r" };

103 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

104 
	`LONGS_EQUAL
(2, 
¨gs
->
	`gëRïótCou¡
());

105 
	}
}

107 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãr
)

109 
¨gc
 = 3;

110 c⁄° * 
¨gv
[] = { "tests.exe", "-g", "group" };

111 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

112 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

113 
	}
}

115 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãrSameP¨amëî
)

117 
¨gc
 = 2;

118 c⁄° * 
¨gv
[] = { "tests.exe", "-ggroup" };

119 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

120 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

121 
	}
}

123 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãr
)

125 
¨gc
 = 3;

126 c⁄° * 
¨gv
[] = { "tests.exe", "-n", "name" };

127 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

128 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

129 
	}
}

131 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãrSameP¨amëî
)

133 
¨gc
 = 2;

134 c⁄° * 
¨gv
[] = { "tests.exe", "-nname" };

135 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

136 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

137 
	}
}

139 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçut
)

141 
¨gc
 = 2;

142 c⁄° * 
¨gv
[] = { "tests.exe", "-onormal" };

143 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

144 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

145 
	}
}

147 
	$TEST
(
Comm™dLöeArgumíts
, 
£tE˛sùeOuçut
)

149 
¨gc
 = 2;

150 c⁄° * 
¨gv
[] = { "tests.exe", "-oeclipse" };

151 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

152 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

153 
	}
}

155 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçutDif„ª¡P¨amëî
)

157 
¨gc
 = 3;

158 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "normal" };

159 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

160 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

161 
	}
}

163 
	$TEST
(
Comm™dLöeArgumíts
, 
£tJUnôOuçutDif„ª¡P¨amëî
)

165 
¨gc
 = 3;

166 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "junit" };

167 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

168 
	`CHECK
(
¨gs
->
	`isJUnôOuçut
());

169 
	}
}

171 
	$TEST
(
Comm™dLöeArgumíts
, 
£tOuçutToG¨bage
)

173 
¨gc
 = 3;

174 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "garbage" };

175 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

176 
	}
}

178 
	$TEST
(
Comm™dLöeArgumíts
, 
weúdP¨am©îsPrötsUßgeAndRëu∫sFÆ£
)

180 
¨gc
 = 2;

181 c⁄° * 
¨gv
[] = { "tests.exe", "-SomethingWeird" };

182 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

183 
	`STRCMP_EQUAL
("usage [-v] [-r#] [-g groupName] [-nÅestName] [-o{normal, junit}]\n",

184 
¨gs
->
	`ußge
());

185 
	}
}

187 
	$TEST
(
Comm™dLöeArgumíts
, 
∂ugöKnowsO±i⁄
)

189 
¨gc
 = 2;

190 c⁄° * 
¨gv
[] = { "tests.exe", "-pPluginOption" };

191 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(
∂ugö
);

192 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

193 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ªmovePlugöByName
("options");

194 
	}
}

196 
	$TEST
(
Comm™dLöeArgumíts
, 
checkDeÁu…Argumíts
)

198 
¨gc
 = 1;

199 c⁄° * 
¨gv
[] = { "tests.exe" };

200 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

201 
	`CHECK
(!
¨gs
->
	`isVîbo£
());

202 
	`LONGS_EQUAL
(1, 
¨gs
->
	`gëRïótCou¡
());

203 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

204 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

205 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

206 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineTestRunnerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Te°Plugö.h
"

34 
	$TEST_GROUP
(
Comm™dLöeTe°Ru¬î
)

36 
	`£tup
()

39 
	`ã¨down
()

42 
	}
};

44 
	$IGNORE_TEST
(
Comm™dLöeTe°Ru¬î
, 
HmmmmWh©ToWrôe
)

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\AllTests.h

29 
IMPORT_TEST_GROUP
–
Sim∂eSåögExãnsi⁄s
);

30 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	$TEST_GROUP
(
Sim∂eSåögExãnsi⁄s
)

33 
	}
};

35 
usög
 
«me•a˚
 
	g°d
;

37 
	$TEST
(
Sim∂eSåögExãnsi⁄s
, 
‰omStdSåög
)

39 
°rög
 
	`s
("hello");

40 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

42 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

31 
	~<°döt.h
>

33 
	$TEST_GROUP
(
Sim∂eSåögFromStdöt
)

35 
	}
};

37 
usög
 
«me•a˚
 
	g°d
;

40 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt64_t
)

48 
uöt64_t
 
i
 = 10;

49 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

50 
	`CHECK_EQUAL
("uöt64_ànŸ suµ‹ãd", 
ªsu…
);

52 
	}
}

54 
	$TEST
(
Sim∂eSåögFromStdöt
, 
I¡64_t
)

67 
	}
}

69 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt32_t
)

71 
uöt32_t
 
i
 = 0xffffffff;

73 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

74 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

75 
	}
}

77 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt16_t
)

79 
uöt16_t
 
i
 = 0xffff;

81 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

82 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

83 
	}
}

85 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt8_t
)

87 
uöt8_t
 
i
 = 0xff;

89 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

90 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

91 
	}
}

93 
	$IGNORE_TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt64_t
)

97 
	}
}

99 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt32_t
)

101 
uöt32_t
 
i
 = 0xffffffff;

102 
	`CHECK_EQUAL
(
i
, i);

103 
	}
}

105 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt16_t
)

107 
uöt16_t
 
i
 = 0xffff;

108 
	`CHECK_EQUAL
(
i
, i);

109 
	}
}

111 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt8_t
)

113 
uöt8_t
 
i
 = 0xff;

114 
	`CHECK_EQUAL
(
i
, i);

115 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

35 { 
Te°Te°ögFixtuª
* 
fixtuª
;

37 
OrdîedTe°
 
‹dîedTe°
;

38 
OrdîedTe°
 
‹dîedTe°2
;

39 
OrdîedTe°
 
‹dîedTe°3
;

40 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

44 
OrdîedTe°
* 
‹dîedTe°Cache
;

45 
	`£tup
()

47 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

48 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

50 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

51 
fixtuª
->
ªgi°ry
->
	`unDoLa°AddTe°
();

53 
	`ã¨down
()

55 
dñëe
 
fixtuª
;

56 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

59 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

61 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

64 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

66 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

69 
Uã°
* 
	`fú°Te°
()

71  
fixtuª
->
ªgi°ry
->
	`gëFú°Te°
();

74 
Uã°
* 
	`£c⁄dTe°
()

76  
fixtuª
->
ªgi°ry
->
	`gëFú°Te°
()->
	`gëNext
();

78 
	}
};

80 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

82 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10,

84 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

85 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

87 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

88 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

89 
	}
}

91 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

93 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

94 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

95 
	}
}

97 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

99 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

100 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

101 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

102 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

103 
	}
}

105 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

107 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

109 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

110 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

111 
	}
}

113 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

115 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

117 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

118 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

119 
	}
}

121 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

123 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

124 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

125 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

126 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

127 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

128 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

130 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

131 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

132 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

134 
	}
}

136 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

138 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

142 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

143 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

144 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

146 
	}
}

147 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

148 {
	}
};

150 
	gã°Numbî
 = 0;

152 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

154 
	`CHECK
(
ã°Numbî
 == 0);

155 
ã°Numbî
++;

156 
	}
}

158 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

160 
	`CHECK
(
ã°Numbî
 == 2);

161 
ã°Numbî
++;

162 
	}
}

164 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

166 
	`CHECK
(
ã°Numbî
 == 1);

167 
ã°Numbî
++;

168 
	}
}

170 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

172 
	`CHECK
(
ã°Numbî
 == 4);

173 
ã°Numbî
++;

174 
	}
}

176 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

178 
	`CHECK
(
ã°Numbî
 == 3);

179 
ã°Numbî
++;

180 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\FailureTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

31 
	g«me•a˚


33 c⁄° 
	gÁûLöeNumbî
 = 2;

34 c⁄° * 
	gÁûFûeName
 = "fail.cpp";

37 
	$TEST_GROUP
(
Faûuª
)

38 { 
Uã°
* 
ã°
;

39 
SåögBuf„rTe°Ouçut
* 
¥öãr
;

41 
	`TEST_SETUP
()

43 
ã°
 = 
√w
 
	`NuŒTe°
();

44 
¥öãr
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

46 
	`TEST_TEARDOWN
()

48 
dñëe
 
ã°
;

49 
dñëe
 
¥öãr
;

51 
	}
};

53 
	$TEST
(
Faûuª
, 
Cª©eFaûuª
)

55 
Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

56 
Faûuª
 
	`f2
(
ã°
, "the failure message");

57 
Faûuª
 
	`f3
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
);

58 
	}
}

60 
	$TEST
(
Faûuª
, 
Cª©ePassögEquÆsFaûuª
)

62 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\JUnitOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 c⁄° * 
	gtheTime
 = "1978-10-03T00:00:00";

37 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

39  
mûlisTime
;

40 
	}
}

42 c⁄° * 
	$MockGëPœtf‹mS≥cificTimeSåög
()

44  
theTime
;

45 
	}
}

47 
	$TEST_GROUP
(
JUnôOuçutTe°
)

48 { cœs†
	cMockJUnôTe°Ouçut
: 
public
 
JUnôTe°Ouçut


50 
public
:

53 
ã°GroupSize
 = 10

57 
deÁu…Size
 = 7

60 
fûesO≥√d
;

61 
fûeBÆ™˚
;

63 
Sim∂eSåög
 
fûeName
;

64 
Sim∂eSåög
 
buf„r
;

66 
Te°Resu…
* 
ªs
;

67 
	sTe°D©a


69 
	`Te°D©a
() :

70 
	`t°_
(0), 
	`ã°Name_
(0), 
	`Áûuª_
(0)

74 
Uã°
* 
t°_
;

75 
Sim∂eSåög
* 
ã°Name_
;

76 
Faûuª
* 
Áûuª_
;

79 
	sTe°GroupD©a


81 
	`Te°GroupD©a
() :

82 
	`numbîTe°s_
(0), 
	`tŸÆFaûuªs_
(0), 
	`«me_
(""), 
	`ã°D©a_
(0)

87 
numbîTe°s_
;

88 
tŸÆFaûuªs_
;

89 
Sim∂eSåög
 
«me_
;

91 
Te°D©a
* 
ã°D©a_
;

94 
Te°GroupD©a
 
ã°GroupD©a_
[
ã°GroupSize
];

96 
Te°GroupD©a
& 
	`cuºítGroup
()

98  
ã°GroupD©a_
[
fûesO≥√d
 - 1];

101 
	`ª£tXmlFûe
()

103 
buf„r
 = "";

106 
	`MockJUnôTe°Ouçut
() :

107 
	`fûesO≥√d
(0), 
	`fûeBÆ™˚
(0), 
	`ªs
(0)

109 
i
 = 0; i < 
ã°GroupSize
; i++) {

110 
ã°GroupD©a_
[
i
].
numbîTe°s_
 = 0;

111 
ã°GroupD©a_
[
i
].
tŸÆFaûuªs_
 = 0;

116 
	`£tResu…
(
Te°Resu…
* 
ã°Res
)

118 
ªs
 = 
ã°Res
;

121 
vútuÆ
 ~
	`MockJUnôTe°Ouçut
()

123 
i
 = 0; i < 
ã°GroupSize
; i++) {

124 
j
 = 0; j < 
ã°GroupD©a_
[
i
].
numbîTe°s_
; j++) {

125 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
t°_
;

126 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
ã°Name_
;

127 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
Áûuª_
Ë
dñëe
ÅestGroupData_[i].testData_[j].failure_;

129 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
Ë
dñëe
[]ÅestGroupData_[i].testData_;

132 
	`LONGS_EQUAL
(0, 
fûeBÆ™˚
);

135 
	`wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf
)

137 
buf„r
 +
buf
;

140 
	`›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
ö_FûeName
)

142 
fûesO≥√d
++;

143 
fûeBÆ™˚
++;

144 
fûeName
 = 
ö_FûeName
;

147 
	`˛o£Fûe
()

149 
	`CHECK_XML_FILE
();

150 
	`ª£tXmlFûe
();

151 
fûeBÆ™˚
--;

154 
	`¸óãTe°sInGroup
(
ödex
, 
amou¡
, c⁄° * 
group
,

155 c⁄° * 
ba£«me
)

157 
ã°GroupD©a_
[
ödex
].
«me_
 = 
group
;

158 
ã°GroupD©a_
[
ödex
].
numbîTe°s_
 = 
amou¡
;

160 
ã°GroupD©a_
[
ödex
].
ã°D©a_
 = 
√w
 
Te°D©a
[
amou¡
];

161 
i
 = 0; i < 
amou¡
; i++) {

162 
Te°D©a
& 
ã°D©a
 = 
ã°GroupD©a_
[
ödex
].
ã°D©a_
[
i
];

163 
ã°D©a
.
ã°Name_
 = 
√w
 
	`Sim∂eSåög
(
ba£«me
);

164 *
ã°D©a
.
ã°Name_
 +
	`SåögFrom
(()
i
);

165 
ã°D©a
.
t°_
 = 
√w
 
	`Uã°
(
group
,Åe°D©a.
ã°Name_
->
	`asCh¨Såög
(), "file", 1);

168 
	`runTe°s
()

170 
ªs
->
	`ã°sSèπed
();

171 
i
 = 0; i < 
ã°GroupSize
; i++) {

172 
Te°GroupD©a
& 
d©a
 = 
ã°GroupD©a_
[
i
];

173 i‡(
d©a
.
numbîTe°s_
 == 0) ;

175 
mûlisTime
 = 0;

176 
ªs
->
	`cuºítGroupSèπed
(
d©a
.
ã°D©a_
[0].
t°_
);

177 
i
 = 0; i < 
d©a
.
numbîTe°s_
; i++) {

178 
Te°D©a
& 
ã°D©a
 = 
d©a
.
ã°D©a_
[
i
];

180 
mûlisTime
 = 0;

181 
ªs
->
	`cuºítTe°Sèπed
(
ã°D©a
.
t°_
);

182 i‡(
ã°D©a
.
Áûuª_
)

183 
	`¥öt
(*
ã°D©a
.
Áûuª_
);

184 
mûlisTime
 = 10;

185 
ªs
->
	`cuºítTe°Ended
(
ã°D©a
.
t°_
);

187 
mûlisTime
 = 50;

188 
ªs
->
	`cuºítGroupEnded
(
d©a
.
ã°D©a_
[0].
t°_
);

190 
ªs
->
	`ã°sEnded
();

193 
	`£tFaûuª
(
groupIndex
, 
ã°Index
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
mesßge
)

195 
Te°D©a
& 
d©a
 = 
ã°GroupD©a_
[
groupIndex
].
ã°D©a_
[
ã°Index
];

196 
d©a
.
Áûuª_
 = 
√w
 
	`Faûuª
(d©a.
t°_
, 
fûeName
, 
löeNumbî
, 
mesßge
);

197 
ã°GroupD©a_
[
groupIndex
].
tŸÆFaûuªs_
++;

200 
	`CHECK_HAS_XML_HEADER
(
Sim∂eSåög
 
°rög
)

202 
	`STRCMP_EQUAL
("<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>\n", 
°rög
.
	`asCh¨Såög
());

205 
	`CHECK_TEST_SUITE_START
(
Sim∂eSåög
 
ouçut
)

207 
Te°GroupD©a
& 
group
 = 
	`cuºítGroup
();

208 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<testsuiteÉrrors=\"0\" failures=\"%d\" hostname=\"localhost\"Çame=\"%s\"Åests=\"%d\"Åime=\"0.050\"Åimestamp=\"%s\">\n",

209 
group
.
tŸÆFaûuªs_
, group.
«me_
.
	`asCh¨Såög
(), group.
numbîTe°s_
, 
theTime
);

210 
	`CHECK_EQUAL
(
buf
, 
ouçut
);

213 
	`CHECK_XML_FILE
()

215 
tŸÆSize
 = 
	`cuºítGroup
().
numbîTe°s_
+ 
deÁu…Size
 + (cuºítGroup().
tŸÆFaûuªs_
 * 2);

216 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

217 
buf„r
.
	`•lô
("\n", 
cﬁ
);

218 
	`CHECK
(
cﬁ
.
	`size
(Ë>
tŸÆSize
);

219 
	`CHECK_HAS_XML_HEADER
(
cﬁ
[0]);

220 
	`CHECK_TEST_SUITE_START
(
cﬁ
[1]);

221 
	`CHECK_PROPERTIES_START
(
cﬁ
[2]);

222 
	`CHECK_PROPERTIES_END
(
cﬁ
[3]);

223 
	`CHECK_TESTS
(&
cﬁ
[4]);

224 
	`CHECK_SYSTEM_OUT
(
cﬁ
[cﬁ.
	`size
()-3]);

225 
	`CHECK_SYSTEM_ERR
(
cﬁ
[cﬁ.
	`size
()-2]);

226 
	`CHECK_TEST_SUITE_END
(
cﬁ
[cﬁ.
	`size
()-1]);

229 
	`CHECK_PROPERTIES_START
(c⁄° 
Sim∂eSåög
& 
ouçut
)

231 
	`STRCMP_EQUAL
("<¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

234 
	`CHECK_PROPERTIES_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

236 
	`STRCMP_EQUAL
("</¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

239 
	`CHECK_SYSTEM_OUT
(c⁄° 
Sim∂eSåög
& 
ouçut
)

241 
	`STRCMP_EQUAL
("<sy°em-out></sy°em-out>\n", 
ouçut
.
	`asCh¨Såög
());

244 
	`CHECK_SYSTEM_ERR
(c⁄° 
Sim∂eSåög
& 
ouçut
)

246 
	`STRCMP_EQUAL
("<sy°em-îr></sy°em-îr>\n", 
ouçut
.
	`asCh¨Såög
());

249 
	`CHECK_TEST_SUITE_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

251 
	`STRCMP_EQUAL
("</ã°suôe>", 
ouçut
.
	`asCh¨Såög
());

253 
	`CHECK_TESTS
(
Sim∂eSåög
* 
¨r
)

255 
ödex
 = 0, 
curTe°
 = 0; curTe° < 
	`cuºítGroup
().
numbîTe°s_
; curTest++, index++) {

256 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
 ("<testcase classname=\"%s\"Çame=\"%s\"Åime=\"0.010\">\n",

257 
	`cuºítGroup
().
«me_
.
	`asCh¨Såög
(), cuºítGroup().
ã°D©a_
[
curTe°
].
t°_
->
	`gëName
().asCharString());

258 
	`CHECK_EQUAL
(
buf
, 
¨r
[
ödex
]);

259 i‡(
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
) {

260 
	`CHECK_FAILURE
(
¨r
, 
ödex
, 
curTe°
);

262 
buf
 = "</testcase>\n";

263 
	`CHECK_EQUAL
(
buf
, 
¨r
[++
ödex
]);

267 
	`CHECK_FAILURE
(
Sim∂eSåög
* 
¨r
, & 
i
, 
curTe°
)

269 
Faûuª
& 
f
 = *
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
;

270 
i
++;

271 
Sim∂eSåög
 
mesßge
 = 
f
.
	`gëMesßge
().
	`asCh¨Såög
();

272 
mesßge
.
	`ª∂a˚
('"','\'');

273 
mesßge
.
	`ª∂a˚
('<','[');

274 
mesßge
.
	`ª∂a˚
('>',']');

275 
mesßge
.
	`ª∂a˚
("\n","{newline}");

276 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<Áûuª mesßge=\"%s:%d: %s\"Åy≥=\"As£πi⁄FaûedEº‹\">\n", 
f
.
	`gëFûeName
().
	`asCh¨Såög
(), f.
	`gëLöeNumbî
(), 
mesßge
.asCharString());

277 
	`CHECK_EQUAL
(
buf
, 
¨r
[
i
]);

278 
i
++;

279 
	`STRCMP_EQUAL
("</Áûuª>\n", 
¨r
[
i
].
	`asCh¨Såög
());

281 
	}
};

283 
MockJUnôTe°Ouçut
 * 
	gouçut
;

284 
Te°Resu…
 *
	gªs
;

286 
	$£tup
()

288 
ouçut
 = 
√w
 
	`MockJUnôTe°Ouçut
();

289 
ªs
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

290 
ouçut
->
	`£tResu…
(
ªs
);

291 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

292 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(
MockGëPœtf‹mS≥cificTimeSåög
);

293 
	}
}

294 
	$ã¨down
()

296 
dñëe
 
ouçut
;

297 
dñëe
 
ªs
;

298 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

299 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(0);

300 
	}
}

302 
	$runTe°s
()

304 
ouçut
->
	`¥ötTe°sSèπed
();

305 
ouçut
->
	`runTe°s
();

306 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

307 
	}
}

310 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupAŒPass
)

312 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "group", "name");

313 
	`runTe°s
();

314 
	`STRCMP_EQUAL
("˝puã°_group.xml", 
ouçut
->
fûeName
.
	`asCh¨Såög
());

315 
	`LONGS_EQUAL
(1, 
ouçut
->
fûesO≥√d
);

316 
	}
}

318 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAŒPass
)

320 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group", "name");

321 
	`runTe°s
();

322 
	}
}

324 
	$TEST
(
JUnôOuçutTe°
, 
mu…ùÀTe°sInTwoGroupAŒPass
)

326 
ouçut
->
	`¸óãTe°sInGroup
(0, 3, "group", "name");

327 
ouçut
->
	`¸óãTe°sInGroup
(1, 8, "secondGroup", "secondName");

328 
	`runTe°s
();

329 
	`LONGS_EQUAL
(2, 
ouçut
->
fûesO≥√d
);

330 
	}
}

332 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupFaûed
)

334 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

335 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test <\"just\"> failed");

336 
	`runTe°s
();

337 
	}
}

339 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAndThªeFaû
)

341 
ouçut
->
	`¥ötTe°sSèπed
();

342 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "failedGroup", "failedName");

343 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

344 
ouçut
->
	`£tFaûuª
(0, 1, "file", 5, "Also failed");

345 
ouçut
->
	`£tFaûuª
(0, 4, "file", 8, "And failedágain");

346 
	`runTe°s
();

347 
	}
}

349 
	$TEST
(
JUnôOuçutTe°
, 
fourGroupsAndSomePassAndSomeFaû
)

351 
ouçut
->
	`¥ötTe°sSèπed
();

352 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group1", "firstName");

353 
ouçut
->
	`¸óãTe°sInGroup
(1, 50, "group2", "secondName");

354 
ouçut
->
	`¸óãTe°sInGroup
(2, 3, "group3", "thirdName");

355 
ouçut
->
	`¸óãTe°sInGroup
(3, 5, "group4", "fourthName");

357 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

358 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

359 
	`runTe°s
();

360 
	}
}

362 
	$TEST
(
JUnôOuçutTe°
, 
mesßgeWôhNewLöe
)

364 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

365 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test \n failed");

366 
	`runTe°s
();

367 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakAllocatorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Mem‹yLókAŒoˇt‹Te°
)

33 { 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
;

35 
	`ã¨down
()

37 i‡(
Æloˇt‹
Ë
dñëe
állocator;

39 
	}
};

41 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAŒoˇt‹
)

43 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

44 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
Æloˇt‹
);

45 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

46 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

47 
	`POINTERS_EQUAL
(
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

48 
	}
}

50 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAºayAŒoˇt‹
)

52 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

53 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
Æloˇt‹
);

54 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

55 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

56 
	`POINTERS_EQUAL
(
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

57 
	}
}

59 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítMÆlocAŒoˇt‹
)

61 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

62 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
Æloˇt‹
);

63 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

64 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

65 
	`POINTERS_EQUAL
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

66 
	}
}

69 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocAŒoˇti⁄
)

71 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

72 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

73 
	}
}

75 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocNames
)

77 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

78 
	`STRCMP_EQUAL
("Sènd¨d MÆlo¯AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

79 
	`STRCMP_EQUAL
("mÆloc", 
Æloˇt‹
->
	`Æloc_«me
());

80 
	`STRCMP_EQUAL
("‰ì", 
Æloˇt‹
->
	`‰ì_«me
());

81 
	}
}

83 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAŒoˇti⁄
)

85 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

86 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

87 
	}
}

89 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewNames
)

91 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

92 
	`STRCMP_EQUAL
("Sènd¨d New AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

93 
	`STRCMP_EQUAL
("√w", 
Æloˇt‹
->
	`Æloc_«me
());

94 
	`STRCMP_EQUAL
("dñëe", 
Æloˇt‹
->
	`‰ì_«me
());

95 
	}
}

97 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayAŒoˇti⁄
)

99 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

100 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

101 
	}
}

103 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayNames
)

105 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

106 
	`STRCMP_EQUAL
("Sènd¨d New [] AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

107 
	`STRCMP_EQUAL
("√w []", 
Æloˇt‹
->
	`Æloc_«me
());

108 
	`STRCMP_EQUAL
("dñëê[]", 
Æloˇt‹
->
	`‰ì_«me
());

109 
	}
}

111 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownAŒoˇti⁄
)

113 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

114 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

115 
	}
}

117 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownNames
)

119 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

120 
	`STRCMP_EQUAL
("NuŒ AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

121 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`Æloc_«me
());

122 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`‰ì_«me
());

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakDetectorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

30 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 ˛as†
	cMem‹yLókFaûuªF‹Te°
: 
public
 
Mem‹yLókFaûuª


35 
public
:

36 
vútuÆ
 ~
	$Mem‹yLókFaûuªF‹Te°
()

40 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

42 *
mesßge
 = 
Áû_°rög
;

43 
	}
}

45 
Sim∂eSåög
 *
	gmesßge
;

48 
	$TEST_GROUP
(
Mem‹yLókDëe˘‹Te°
)

50 
Mem‹yLókDëe˘‹
* 
dëe˘‹
;

51 
Mem‹yLókFaûuªF‹Te°
 *
ªp‹ãr
;

52 
Sènd¨dMÆlocAŒoˇt‹
* 
mÆlocAŒoˇt‹
;

53 
Sènd¨dNewAŒoˇt‹
* 
√wAŒoˇt‹
;

54 
Sènd¨dNewAºayAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

56 
	`£tup
()

58 
dëe˘‹
 = 
√w
 
Mem‹yLókDëe˘‹
;

59 
ªp‹ãr
 = 
√w
 
Mem‹yLókFaûuªF‹Te°
;

60 
mÆlocAŒoˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

61 
√wAŒoˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

62 
√wAºayAŒoˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

63 
dëe˘‹
->
	`öô
(
ªp‹ãr
);

64 
dëe˘‹
->
	`íabÀ
();

65 
dëe˘‹
->
	`°¨tCheckög
();

66 
ªp‹ãr
->
mesßge
 = 
√w
 
	`Sim∂eSåög
();

68 
	`ã¨down
()

70 
dñëe
 
ªp‹ãr
->
mesßge
;

71 
dñëe
 
dëe˘‹
;

72 
dñëe
 
ªp‹ãr
;

73 
dñëe
 
mÆlocAŒoˇt‹
;

74 
dñëe
 
√wAŒoˇt‹
;

75 
dñëe
 
√wAºayAŒoˇt‹
;

77 
	}
};

79 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√Lók
)

81 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 3);

82 
dëe˘‹
->
	`°›Checkög
();

83 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

84 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

85 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 3"));

86 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

87 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

88 
	`Pœtf‹mS≥cificFªe
(
mem
);

89 
	}
}

91 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókOutsideCheckögPîiod
)

93 
dëe˘‹
->
	`°›Checkög
();

94 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

95 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
);

96 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

97 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

98 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

99 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

100 
	`Pœtf‹mS≥cificFªe
(
mem
);

101 
	}
}

103 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
NoLóksWh©s€vî
)

105 
dëe˘‹
->
	`°›Checkög
();

106 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

107 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
));

108 
	}
}

110 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoLóksUsögO≥øt‹New
)

112 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

113 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

114 
dëe˘‹
->
	`°›Checkög
();

115 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

116 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

117 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 8"));

118 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

119 
	`Pœtf‹mS≥cificFªe
(
mem
);

120 
	`Pœtf‹mS≥cificFªe
(
mem2
);

121 
	}
}

123 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocButNoLók
)

125 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

126 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

127 
dëe˘‹
->
	`°›Checkög
();

128 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

129 
	}
}

131 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√Lók
)

133 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

134 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

135 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

136 
dëe˘‹
->
	`°›Checkög
();

137 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

138 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

139 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 12"));

140 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 4"));

141 
	`Pœtf‹mS≥cificFªe
(
mem2
);

142 
	}
}

144 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√LókRevî£Ordî
)

146 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

147 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

148 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem2
);

149 
dëe˘‹
->
	`°›Checkög
();

150 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

151 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

152 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 12"));

153 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

154 
	`Pœtf‹mS≥cificFªe
(
mem
);

155 
	}
}

157 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
DñëeN⁄AloˇãdMem‹y
)

159 
a
;

160 * 
∑
 = &
a
;

161 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
∑
, "FREE.c", 100);

162 
dëe˘‹
->
	`°›Checkög
();

163 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
));

164 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: <unknown>Üine: 0 size: 0Åype: unknown"));

165 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

166 
	}
}

168 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiod
)

170 
dëe˘‹
->
	`°›Checkög
();

171 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

172 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

173 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

174 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

175 
	}
}

177 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiodCom∂iˇãdCa£
)

179 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

180 
dëe˘‹
->
	`°›Checkög
();

182 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

183 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

184 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

185 
	`Pœtf‹mS≥cificFªe
(
mem
);

186 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

187 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

189 
dëe˘‹
->
	`°¨tCheckög
();

190 * 
mem3
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

191 
dëe˘‹
->
	`°›Checkög
();

192 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

193 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

195 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

196 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

197 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

199 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_Æl
);

200 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

201 
	`Pœtf‹mS≥cificFªe
(
mem2
);

202 
	`Pœtf‹mS≥cificFªe
(
mem3
);

203 
	}
}

205 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókUsögO≥øt‹NewWôhFûeLöe
)

207 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4, "file.cpp", 1234);

208 
dëe˘‹
->
	`°›Checkög
();

209 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

210 
	`CHECK
(
ouçut
.
	`c⁄èös
("file.cpp"));

211 
	`CHECK
(
ouçut
.
	`c⁄èös
("1234"));

212 
	`Pœtf‹mS≥cificFªe
(
mem
);

213 
	}
}

215 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªeUsögAºayNew
)

217 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 10, "file.cpp", 1234);

218 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 12);

219 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

220 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

221 
	`CHECK
(
ouçut
.
	`c⁄èös
("new []"));

222 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
);

223 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem2
);

224 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

225 
dëe˘‹
->
	`°›Checkög
();

226 
	}
}

228 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªe
)

230 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

231 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 12);

232 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

233 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

234 
	`CHECK
(
ouçut
.
	`c⁄èös
("malloc"));

235 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

236 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
, "file.c", 5678);

237 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

238 
dëe˘‹
->
	`°›Checkög
();

239 
	}
}

241 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√RóŒoc
)

243 * 
mem1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

245 * 
mem2
 = 
dëe˘‹
->
	`ªÆlocMem‹y
(
mÆlocAŒoˇt‹
, 
mem1
, 1000,

248 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

249 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

250 
	`CHECK
(
ouçut
.
	`c⁄èös
("other.cpp"));

252 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
);

253 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

254 
dëe˘‹
->
	`°›Checkög
();

255 
	}
}

257 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocAndFªeWôhDif„ªn˚In°™˚sOfTheSameAŒoˇt‹Ty≥
)

259 
Sènd¨dNewAºayAŒoˇt‹
 
√wAºayAŒoˇt‹Two
;

260 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

261 
dëe˘‹
->
	`dóŒocMem‹y
(&
√wAºayAŒoˇt‹Two
, 
mem
, "FREE.c", 100);

262 
dëe˘‹
->
	`°›Checkög
();

263 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

264 
	}
}

266 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥
)

268 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

269 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

270 
dëe˘‹
->
	`°›Checkög
();

271 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
));

272 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 100Åype:Çew []"));

273 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

274 
	}
}

276 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥WôhCheckögDißbÀd
)

278 
dëe˘‹
->
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

279 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

280 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
, "FREE.c", 100);

281 
dëe˘‹
->
	`°›Checkög
();

282 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

283 
dëe˘‹
->
	`íabÀAŒoˇti⁄Ty≥Checkög
();

284 
	}
}

286 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
M¨kCheckögPîiodLóksAsN⁄CheckögPîiod
)

288 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

289 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

290 
dëe˘‹
->
	`°›Checkög
();

291 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

292 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

293 
dëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

294 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

295 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

296 
	`Pœtf‹mS≥cificFªe
(
mem
);

297 
	`Pœtf‹mS≥cificFªe
(
mem2
);

298 
	}
}

300 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mem‹yC‹ru±i⁄
)

302 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "ALLOC.c", 10);

303 
mem
[10] = 'O';

304 
mem
[11] = 'H';

305 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

306 
dëe˘‹
->
	`°›Checkög
();

307 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_MEMORY_CORRUPTION
));

308 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 10Åype: malloc"));

309 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

310 
	}
}

312 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ß„lyDñëeNULL
)

314 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 0);

315 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

316 
	}
}

318 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodDißbÀd
)

320 
dëe˘‹
->
	`dißbÀ
();

321 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

322 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

323 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

324 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

325 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

326 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

327 
	}
}

329 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodE«bÀd
)

331 
dëe˘‹
->
	`íabÀ
();

332 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

333 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

334 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

335 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

336 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

337 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

338 
	}
}

340 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodCheckög
)

342 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

343 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

344 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

345 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

346 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

347 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

348 
	}
}

350 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ÆloˇãWôhANuŒAŒoˇt‹Cau£sNoProbÀms
)

352 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 2);

353 
dëe˘‹
->
	`dóŒocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem
);

354 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakWarningTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

32 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

33 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

36 * 
	gÀak1
;

37 * 
	gÀak2
;

39 ˛as†
	cDummyRï‹ãr
: 
public
 
Mem‹yLókFaûuª


41 
public
:

42 
vútuÆ
 ~
	$DummyRï‹ãr
()

46 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

48 
	}
}

52 
Mem‹yLókDëe˘‹
* 
	gdëe˘‹
;

53 
Mem‹yLókW¨nögPlugö
* 
	gmemPlugö
;

54 
DummyRï‹ãr
 
	gdummy
;

55 
Mem‹yLókAŒoˇt‹
* 
	gÆloˇt‹
;

57 
	$TEST_GROUP
(
Mem‹yLókW¨nögTe°
)

58 { 
Te°Te°ögFixtuª
* 
fixtuª
;

59 
	`£tup
()

61 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

62 
dëe˘‹
 = 
√w
 
	`Mem‹yLókDëe˘‹
();

63 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

64 
dëe˘‹
->
	`öô
(&
dummy
);

65 
memPlugö
 = 
√w
 
	`Mem‹yLókW¨nögPlugö
("Te°Mem‹yLókW¨nögPlugö", 
dëe˘‹
);

66 
fixtuª
->
ªgi°ry
->
	`ö°ÆlPlugö
(
memPlugö
);

67 
memPlugö
->
	`íabÀ
();

69 
Àak1
 = 0;

70 
Àak2
 = 0;

72 
	`ã¨down
()

74 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak1
);

75 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak2
);

77 
dñëe
 
fixtuª
;

78 
dñëe
 
memPlugö
;

79 
dñëe
 
dëe˘‹
;

80 
dñëe
 
Æloˇt‹
;

82 
	}
};

84 
	$_ã°TwoLóks
()

86 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

88 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

89 
	}
}

91 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
TwoLóks
)

93 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°TwoLóks
);

94 
fixtuª
->
	`runAŒTe°s
();

95 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

96 
fixtuª
->
	`as£πPrötC⁄èös
("TotalÇumber ofÜeaks: 2");

97 
	}
}

99 
	$_ã°Ign‹e2
()

101 
memPlugö
->
	`ex≥˘LóksInTe°
(2);

102 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

103 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

104 
	}
}

106 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
Ign‹e2
)

108 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°Ign‹e2
);

109 
fixtuª
->
	`runAŒTe°s
();

110 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

111 
	}
}

113 
	$_ÁûAndLókMem‹y
()

115 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

116 
	`FAIL
("");

117 
	}
}

119 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
FaûögTe°D€sNŸRï‹tMem‹yLóks
)

121 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûAndLókMem‹y
);

122 
fixtuª
->
	`runAŒTe°s
();

123 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

124 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\NullTestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	$TEST_GROUP
(
NuŒTe°
)

31 { 
NuŒTe°
* 
nuŒTe°
;

33 
	`TEST_SETUP
()

35 
nuŒTe°
 = 
√w
 
	`NuŒTe°
();

37 
	`TEST_TEARDOWN
()

39 
dñëe
 
nuŒTe°
;

41 
	}
};

43 
	$TEST
(
NuŒTe°
, 
Cª©e
)

45 
	}
}

47 
	$TEST
(
NuŒTe°
, 
In°™˚AlwaysTheSame
)

49 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

50 
	`CHECK
(&
_ö°™˚
 =&
NuŒTe°
::
	`ö°™˚
());

51 
	}
}

53 
	$TEST
(
NuŒTe°
, 
NuŒTe°sD⁄tCou¡
)

55 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

56 
	`CHECK
(
_ö°™˚
.
	`cou¡Te°s
() == 0);

57 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\PluginTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

34 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

36 
	g£quí˚Numbî
;

38 ˛as†
	cDummyPlugö
: 
public
 
Te°Plugö


40 
public
:

41 
	$DummyPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

42 
	`Te°Plugö
(
«me
), 
	`¥eA˘i⁄
(0), 
	$po°A˘i⁄
(0)

46 
vútuÆ
 ~
	$DummyPlugö
()

48 
	}
}

51 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
¥eA˘i⁄
++;

54 
¥eA˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

55 
	}
}

57 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

59 
po°A˘i⁄
++;

60 
po°A˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

61 
	}
}

64 
	g¥eA˘i⁄
;

65 
	g¥eA˘i⁄Sequí˚
;

66 
	gpo°A˘i⁄
;

67 
	gpo°A˘i⁄Sequí˚
;

70 
	$TEST_GROUP
(
PlugöTe°
)

72 
DummyPlugö
* 
fú°Plugö
;

73 
DummyPlugö
* 
£c⁄dPlugö
;

74 
Te°Te°ögFixtuª
 *
gíFixtuª
;

75 
Te°Regi°ry
 *
ªgi°ry
;

76 
	`£tup
()

78 
fú°Plugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN
);

79 
£c⁄dPlugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN2
);

80 
gíFixtuª
 = 
√w
 
Te°Te°ögFixtuª
;

81 
ªgi°ry
 = 
gíFixtuª
->registry;

82 
ªgi°ry
->
	`ö°ÆlPlugö
(
fú°Plugö
);

83 
£quí˚Numbî
 = 1;

86 
	`ã¨down
()

88 
dñëe
 
fú°Plugö
;

89 
dñëe
 
£c⁄dPlugö
;

90 
dñëe
 
gíFixtuª
;

92 
	}
};

94 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

95 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

97 
	$TEST
(
PlugöTe°
, 
PlugöHasName
)

99 
	`CHECK_EQUAL
(
GENERIC_PLUGIN
, 
fú°Plugö
->
	`gëName
());

100 
	}
}

102 
	$TEST
(
PlugöTe°
, 
In°ÆlPlugö
)

104 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëFú°Plugö
());

105 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

106 
	}
}

108 
	$TEST
(
PlugöTe°
, 
In°ÆlMu…ùÀPlugös
)

110 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

111 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

112 
	`CHECK_EQUAL
(
£c⁄dPlugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN2
));

113 
	`CHECK_EQUAL
(0, 
ªgi°ry
->
	`gëPlugöByName
("I doÇotÉxist"));

114 
	}
}

116 
	$TEST
(
PlugöTe°
, 
A˘i⁄sAŒRun
)

118 
gíFixtuª
->
	`runAŒTe°s
();

119 
gíFixtuª
->
	`runAŒTe°s
();

120 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

121 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
po°A˘i⁄
);

122 
	}
}

124 
	$TEST
(
PlugöTe°
, 
Sequí˚
)

126 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

127 
gíFixtuª
->
	`runAŒTe°s
();

128 
	`CHECK_EQUAL
(1, 
£c⁄dPlugö
->
¥eA˘i⁄Sequí˚
);

129 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄Sequí˚
);

130 
	`CHECK_EQUAL
(3, 
fú°Plugö
->
po°A˘i⁄Sequí˚
);

131 
	`CHECK_EQUAL
(4, 
£c⁄dPlugö
->
po°A˘i⁄Sequí˚
);

132 
	}
}

134 
	$TEST
(
PlugöTe°
, 
DißbÀsPlugösD⁄tRun
)

136 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

137 
£c⁄dPlugö
->
	`dißbÀ
();

138 
gíFixtuª
->
	`runAŒTe°s
();

139 
	`CHECK
(!
£c⁄dPlugö
->
	`isE«bÀd
());

140 
£c⁄dPlugö
->
	`íabÀ
();

141 
gíFixtuª
->
	`runAŒTe°s
();

142 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

143 
	`CHECK_EQUAL
(1, 
£c⁄dPlugö
->
¥eA˘i⁄
);

144 
	`CHECK
(
£c⁄dPlugö
->
	`isE«bÀd
());

145 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SetPluginTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Te°Regi°ry.h
"

3 
	~"CµUTe°/Te°Ouçut.h
"

4 
	~"CµUTe°/Te°Plugö.h
"

6 
	$‹ig_func1
()

8 
	}
}

10 
	$°ub_func1
()

12 
	}
}

14 
	$‹ig_func2
()

16 
	}
}

18 
	$°ub_func2
()

20 
	}
}

23 (*
	gÂ1
)();

24 (*
	gÂ2
)();

26 
	$TEST_GROUP
(
SëPoöãrPlugöTe°
)

27 { 
SëPoöãrPlugö
* 
∂ugö
;

28 
Te°Regi°ry
* 
myRegi°ry
;

29 
SåögBuf„rTe°Ouçut
* 
ouçut
;

30 
Te°Resu…
* 
ªsu…
;

32 
	`£tup
()

34 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

35 
∂ugö
 = 
√w
 
	`SëPoöãrPlugö
("TestSetPlugin");

36 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

37 
myRegi°ry
->
	`ö°ÆlPlugö
(
∂ugö
);

38 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

39 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

42 
	`ã¨down
()

44 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

45 
dñëe
 
myRegi°ry
;

46 
dñëe
 
∂ugö
;

47 
dñëe
 
ouçut
;

48 
dñëe
 
ªsu…
;

50 
	}
};

52 ˛as†
	cFun˘i⁄PoöãrUã°
: 
public
 
Uã°


54 
public
:

55 
	$£tup
()

57 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

58 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

59 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

61 
	$ã°Body
()

63 
	`CHECK
(
Â1
 =
°ub_func1
);

64 
	`CHECK
(
Â2
 =
°ub_func2
);

65 
	}
}

68 
	$TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTwoFun˘i⁄Poöãr
)

70 
Fun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`Fun˘i⁄PoöãrUã°
();

73 
Â1
 = 
‹ig_func1
;

74 
Â2
 = 
‹ig_func2
;

75 
myRegi°ry
->
	`addTe°
(
t°
);

76 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

77 
	`CHECK
(
Â1
 =
‹ig_func1
);

78 
	`CHECK
(
Â2
 =
‹ig_func2
);

79 
	`LONGS_EQUAL
(0, 
ªsu…
->
	`gëFaûuªCou¡
());

80 
dñëe
 
t°
;

81 
	}
}

83 ˛as†
	cMaxFun˘i⁄PoöãrUã°
: 
public
 
Uã°


85 
public
:

86 
numOfFpSës
;

87 
	$MaxFun˘i⁄PoöãrUã°
(
num
) :

88 
	$numOfFpSës
(
num
)

93 
	$£tup
()

95 
i
 = 0; i < 
numOfFpSës
; ++i)

96 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

97 
	}
}

100 
	$IGNORE_TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTooMuchFun˘i⁄Poöãr
)

102 
MaxFun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`MaxFun˘i⁄PoöãrUã°
(

103 
SëPoöãrPlugö
::
MAX_SET
 + 1);

104 
myRegi°ry
->
	`addTe°
(
t°
);

106 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

108 
	`LONGS_EQUAL
(1, 
ªsu…
->
	`gëFaûuªCou¡
());

109 
dñëe
 
t°
;

110 
	}
}

112 
	g‹ig_doubÀ
 = 3.0;

113 * 
	g‹ig_doubÀ_±r
 = &
‹ig_doubÀ
;

114 
	g°ub_doubÀ
 = 4.0;

116 ˛as†
	cSëDoubÀPoöãrUã°
: 
public
 
Uã°


118 
public
:

119 
	$£tup
()

121 
	`UT_PTR_SET
(
‹ig_doubÀ_±r
, &
°ub_doubÀ
);

123 
	$ã°Body
()

125 
	`CHECK
(
‹ig_doubÀ_±r
 =&
°ub_doubÀ
);

126 
	}
}

129 
	$TEST
(
SëPoöãrPlugöTe°
, 
doubÀPoöãr
)

131 
SëDoubÀPoöãrUã°
 *
doubÀt°
 = 
√w
 
	`SëDoubÀPoöãrUã°
();

132 
myRegi°ry
->
	`addTe°
(
doubÀt°
);

133 
	`CHECK
(
‹ig_doubÀ_±r
 =&
‹ig_doubÀ
);

134 
dñëe
 
doubÀt°
;

135 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SimpleStringTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Sim∂eSåög
)

35 
	}
};

37 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚
)

39 
Sim∂eSåög
 
	`ex≥˘ed
("hellohello");

40 
Sim∂eSåög
 
	`a˘uÆ
("hello", 2);

42 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

43 
	}
}

45 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚OfZîo
)

47 
Sim∂eSåög
 
	`ex≥˘ed
("");

48 
Sim∂eSåög
 
	`a˘uÆ
("hello", 0);

50 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

51 
	}
}

53 
	$TEST
(
Sim∂eSåög
, 
C›y
)

55 
Sim∂eSåög
 
	`s1
("hello");

56 
Sim∂eSåög
 
	`s2
(
s1
);

58 
	`CHECK_EQUAL
(
s1
, 
s2
);

59 
	}
}

61 
	$TEST
(
Sim∂eSåög
, 
Assignmít
)

63 
Sim∂eSåög
 
	`s1
("hello");

64 
Sim∂eSåög
 
	`s2
("goodbye");

66 
s2
 = 
s1
;

68 
	`CHECK_EQUAL
(
s1
, 
s2
);

69 
	}
}

71 
	$TEST
(
Sim∂eSåög
, 
EquÆôy
)

73 
Sim∂eSåög
 
	`s1
("hello");

74 
Sim∂eSåög
 
	`s2
("hello");

76 
	`CHECK
(
s1
 =
s2
);

77 
	}
}

79 
	$TEST
(
Sim∂eSåög
, 
InEquÆôy
)

81 
Sim∂eSåög
 
	`s1
("hello");

82 
Sim∂eSåög
 
	`s2
("goodbye");

84 
	`CHECK
(
s1
 !
s2
);

85 
	}
}

87 
	$TEST
(
Sim∂eSåög
, 
asCh¨Såög
)

89 
Sim∂eSåög
 
	`s1
("hello");

91 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Sim∂eSåög
, 
Size
)

96 
Sim∂eSåög
 
	`s1
("hello!");

98 
	`LONGS_EQUAL
(6, 
s1
.
	`size
());

99 
	}
}

101 
	$TEST
(
Sim∂eSåög
, 
Addôi⁄
)

103 
Sim∂eSåög
 
	`s1
("hello!");

104 
Sim∂eSåög
 
	`s2
("goodbye!");

105 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

106 
Sim∂eSåög
 
s4
;

107 
s4
 = 
s1
 + 
s2
;

109 
	`CHECK_EQUAL
(
s3
, 
s4
);

110 
	}
}

112 
	$TEST
(
Sim∂eSåög
, 
C⁄ˇã«ti⁄
)

114 
Sim∂eSåög
 
	`s1
("hello!");

115 
Sim∂eSåög
 
	`s2
("goodbye!");

116 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

117 
Sim∂eSåög
 
s4
;

118 
s4
 +
s1
;

119 
s4
 +
s2
;

121 
	`CHECK_EQUAL
(
s3
, 
s4
);

123 
Sim∂eSåög
 
	`s5
("hello!goodbye!hello!goodbye!");

124 
s4
 += s4;

126 
	`CHECK_EQUAL
(
s5
, 
s4
);

127 
	}
}

129 
	$TEST
(
Sim∂eSåög
, 
C⁄èös
)

131 
Sim∂eSåög
 
	`s
("hello!");

132 
Sim∂eSåög
 
	`em±y
("");

133 
Sim∂eSåög
 
	`begönög
("hello");

134 
Sim∂eSåög
 
	`íd
("lo!");

135 
Sim∂eSåög
 
	`mid
("l");

136 
Sim∂eSåög
 
	`nŸP¨tOfSåög
("xxxx");

138 
	`CHECK
(
s
.
	`c⁄èös
(
em±y
));

139 
	`CHECK
(
s
.
	`c⁄èös
(
begönög
));

140 
	`CHECK
(
s
.
	`c⁄èös
(
íd
));

141 
	`CHECK
(
s
.
	`c⁄èös
(
mid
));

142 
	`CHECK
(!
s
.
	`c⁄èös
(
nŸP¨tOfSåög
));

144 
	`CHECK
(
em±y
.
	`c⁄èös
(empty));

145 
	`CHECK
(!
em±y
.
	`c⁄èös
(
s
));

146 
	}
}

148 
	$TEST
(
Sim∂eSåög
, 
°¨tsWôh
)

150 
Sim∂eSåög
 
	`hi
("Hi you!");

151 
Sim∂eSåög
 
	`∑π
("Hi");

152 
Sim∂eSåög
 
	`diff
("Hrrm Hi you! ffdsfd");

153 
	`CHECK
(
hi
.
	`°¨tsWôh
(
∑π
));

154 
	`CHECK
(!
∑π
.
	`°¨tsWôh
(
hi
));

155 
	`CHECK
(!
diff
.
	`°¨tsWôh
(
hi
));

156 
	}
}

158 
	$TEST
(
Sim∂eSåög
, 
•lô
)

160 
Sim∂eSåög
 
	`hi
("hello\nworld\nhow\ndo\nyou\ndo\n\n");

162 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

163 
hi
.
	`•lô
("\n", 
cﬁÀ˘i⁄
);

165 
	`LONGS_EQUAL
(7, 
cﬁÀ˘i⁄
.
	`size
());

166 
	`STRCMP_EQUAL
("hñlo\n", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

167 
	`STRCMP_EQUAL
("w‹ld\n", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

168 
	`STRCMP_EQUAL
("how\n", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

169 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[3].
	`asCh¨Såög
());

170 
	`STRCMP_EQUAL
("you\n", 
cﬁÀ˘i⁄
[4].
	`asCh¨Såög
());

171 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[5].
	`asCh¨Såög
());

172 
	`STRCMP_EQUAL
("\n", 
cﬁÀ˘i⁄
[6].
	`asCh¨Såög
());

173 
	}
}

175 
	$TEST
(
Sim∂eSåög
, 
•lôNoTokíOnTheEnd
)

177 
Sim∂eSåög
 
	`°rög
("Bah Yah oops");

178 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

180 
°rög
.
	`•lô
(" ", 
cﬁÀ˘i⁄
);

181 
	`LONGS_EQUAL
(3, 
cﬁÀ˘i⁄
.
	`size
());

182 
	`STRCMP_EQUAL
("Bah ", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

183 
	`STRCMP_EQUAL
("Yah ", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

184 
	`STRCMP_EQUAL
("o›s", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

185 
	}
}

187 
	$TEST
(
Sim∂eSåög
, 
cou¡
)

189 
Sim∂eSåög
 
	`°r
("ha ha ha ha");

190 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

191 
	}
}

193 
	$TEST
(
Sim∂eSåög
, 
cou¡Togëhî
)

195 
Sim∂eSåög
 
	`°r
("hahahaha");

196 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

197 
	}
}

199 
	$TEST
(
Sim∂eSåög
, 
ídsWôh
)

201 
Sim∂eSåög
 
	`°r
("Hello World");

202 
	`CHECK
(
°r
.
	`ídsWôh
("World"));

203 
	`CHECK
(!
°r
.
	`ídsWôh
("Worl"));

204 
	`CHECK
(!
°r
.
	`ídsWôh
("Hello"));

205 
Sim∂eSåög
 
	`°r2
("ah");

206 
	`CHECK
(
°r2
.
	`ídsWôh
("ah"));

207 
	`CHECK
(!
°r2
.
	`ídsWôh
("baah"));

208 
Sim∂eSåög
 
	`°r3
("");

209 
	`CHECK
(!
°r3
.
	`ídsWôh
("baah"));

211 
Sim∂eSåög
 
	`°r4
("ha ha ha ha");

212 
	`CHECK
(
°r4
.
	`ídsWôh
("ha"));

213 
	}
}

215 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚Ch¨WôhCh¨
)

217 
Sim∂eSåög
 
	`°r
("abcabcabca");

218 
°r
.
	`ª∂a˚
('a', 'b');

219 
	`STRCMP_EQUAL
("bbcbbcbbcb", 
°r
.
	`asCh¨Såög
());

220 
	}
}

222 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚SåögWôhSåög
)

224 
Sim∂eSåög
 
	`°r
("boo baa boo baa boo");

225 
°r
.
	`ª∂a˚
("boo", "boohoo");

226 
	`STRCMP_EQUAL
("boohoÿbØ boohoÿbØ boohoo", 
°r
.
	`asCh¨Såög
());

227 
	}
}

229 
	$TEST
(
Sim∂eSåög
, 
C⁄èösNuŒ
)

231 
Sim∂eSåög
 
	`s
(0);

232 
	`CHECK
(!
s
.
	`c⁄èös
("something"));

233 
	}
}

235 
	$TEST
(
Sim∂eSåög
, 
Ch¨a˘îs
)

237 
Sim∂eSåög
 
	`s
(
	`SåögFrom
('a'));

238 
Sim∂eSåög
 
	`s2
(
	`SåögFrom
('a'));

239 
	`CHECK
(
s
 =
s2
);

240 
	}
}

242 
	$TEST
(
Sim∂eSåög
, 
DoubÀs
)

244 
Sim∂eSåög
 
	`s
(
	`SåögFrom
(1.2));

245 
	`STRCMP_EQUAL
("1.200000", 
s
.
	`asCh¨Såög
());

246 
s
 = 
	`SåögFrom
(1.2, 2);

247 
	`STRCMP_EQUAL
("1.20", 
s
.
	`asCh¨Såög
());

248 
	}
}

250 
	$TEST
(
Sim∂eSåög
, 
HexSåögs
)

252 
Sim∂eSåög
 
h1
 = 
	`HexSåögFrom
(0xffff);

253 
	`STRCMP_EQUAL
("ffff", 
h1
.
	`asCh¨Såög
());

254 
	}
}

256 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©
)

258 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s %s! %d", "Hello", "World", 2009);

259 
	`STRCMP_EQUAL
("HñlÿW‹ld! 2009", 
h1
.
	`asCh¨Såög
());

260 
	}
}

262 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©L¨ge
)

264 c⁄° * 
s
 =

266 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s%s%s%s%s%s%s%s%s%s", 
s
, s, s, s,

267 
s
, s, s, s, s, s);

268 
	`LONGS_EQUAL
(10, 
h1
.
	`cou¡
(
s
));

269 
	}
}

271 
	$WøµedUpVSNPrötf
(* 
buf
, 
n
, c⁄° * 
f‹m©
, ...)

273 
va_li°
 
¨gumíts
;

274 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

276 
ªsu…
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf
, 
n
, 
f‹m©
, 
¨gumíts
);

277 
	`va_íd
(
¨gumíts
);

278  
ªsu…
;

279 
	}
}

281 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_fôs
)

283 
buf
[10];

285 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345");

286 
	`STRCMP_EQUAL
("12345", 
buf
);

287 
	`LONGS_EQUAL
(5, 
cou¡
);

288 
	}
}

290 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_d€sNŸFô
)

292 
buf
[10];

294 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345678901");

295 
	`STRCMP_EQUAL
("123456789", 
buf
);

296 
	`LONGS_EQUAL
(11, 
cou¡
);

297 
	}
}

299 
	$TEST
(
Sim∂eSåög
, 
NuŒP¨amëîs2
)

301 
Sim∂eSåög
* 
¨r
 = 
√w
 SimpleString[100];

302 
dñëe
[] 
¨r
;

303 
	}
}

305 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄Mu…ùÀAŒoˇãNoLóksMem‹y
)

307 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

308 
cﬁ
.
	`Æloˇã
(5);

309 
cﬁ
.
	`Æloˇã
(5);

311 
	}
}

313 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄RódOutOfBoundsRëu∫sEm±ySåög
)

315 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

316 
cﬁ
.
	`Æloˇã
(3);

317 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

318 
	}
}

320 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄WrôögToEm±ySåög
)

322 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

323 
cﬁ
.
	`Æloˇã
(3);

324 
cﬁ
[3] = 
	`Sim∂eSåög
("HAH");

325 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

326 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTest.cpp

30 
	#_WCHART


	)

31 
	~"CµUTe°/Te°H¨√ss_c.h
"

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~"CµUTe°/Te°Ouçut.h
"

37 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

38 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

40 
	$TEST_GROUP
(
Te°H¨√ss_c
)

42 
Te°Te°ögFixtuª
* 
fixtuª
;

43 
	`TEST_SETUP
()

45 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

47 
	`TEST_TEARDOWN
()

49 
dñëe
 
fixtuª
;

51 
	}
};

53 
	$_ÁûI¡Mëhod
()

55 
	`CHECK_EQUAL_C_INT
(1, 2);

56 
	}
}

58 
	$TEST
(
Te°H¨√ss_c
, 
checkI¡
)

60 
	`CHECK_EQUAL_C_INT
(2, 2);

61 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûI¡Mëhod
);

62 
fixtuª
->
	`runAŒTe°s
();

63 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1>\n but was <2>");

64 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

65 
	}
}

67 
	$_ÁûRólMëhod
()

69 
	`CHECK_EQUAL_C_REAL
(1.0, 2.0, 0.5);

70 
	}
}

72 
	$TEST
(
Te°H¨√ss_c
, 
checkRól
)

74 
	`CHECK_EQUAL_C_REAL
(1.0, 1.1, 0.5);

75 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûRólMëhod
);

76 
fixtuª
->
	`runAŒTe°s
();

77 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1.000000>\n but was <2.000000>");

78 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

79 
	}
}

81 
	$_ÁûCh¨Mëhod
()

83 
	`CHECK_EQUAL_C_CHAR
('a', 'c');

84 
	}
}

86 
	$TEST
(
Te°H¨√ss_c
, 
checkCh¨
)

88 
	`CHECK_EQUAL_C_CHAR
('a', 'a');

89 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûCh¨Mëhod
);

90 
fixtuª
->
	`runAŒTe°s
();

91 
fixtuª
->
	`as£πPrötC⁄èös
("expected <a>\n but was <c>");

92 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

93 
	}
}

95 
	$_ÁûSåögMëhod
()

97 
	`CHECK_EQUAL_C_STRING
("Hello", "World");

98 
	}
}

100 
	$TEST
(
Te°H¨√ss_c
, 
checkSåög
)

102 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello");

103 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûSåögMëhod
);

104 
fixtuª
->
	`runAŒTe°s
();

105 
fixtuª
->
	`as£πPrötC⁄èös
("expected <Hello>\n but was <World>");

106 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

107 
	}
}

109 
	$_ÁûTextMëhod
()

111 
	`FAIL_TEXT_C
("Booo");

112 
	}
}

114 
	$TEST
(
Te°H¨√ss_c
, 
checkFaûText
)

116 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûTextMëhod
);

117 
fixtuª
->
	`runAŒTe°s
();

118 
fixtuª
->
	`as£πPrötC⁄èös
("Booo");

119 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

120 
	}
}

122 
	$_ÁûMëhod
()

124 
	`FAIL_C
();

125 
	}
}

127 
	$TEST
(
Te°H¨√ss_c
, 
checkFaû
)

129 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

130 
fixtuª
->
	`runAŒTe°s
();

131 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

132 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

133 
	}
}

135 
	$_CheckMëhod
()

137 
	`CHECK_C
(
Ál£
);

138 
	}
}

140 
	$TEST
(
Te°H¨√ss_c
, 
checkCheck
)

142 
	`CHECK_C
(
åue
);

143 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_CheckMëhod
);

144 
fixtuª
->
	`runAŒTe°s
();

145 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

146 
	}
}

148 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_mÆloc_out_of_mem‹y
)

150 
	`˝puã°_mÆloc_£t_out_of_mem‹y
();

151 
	`CHECK
(0 =
	`˝puã°_mÆloc
(100));

153 
	`˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

154 * 
mem
 = 
	`˝puã°_mÆloc
(100);

155 
	`CHECK
(0 !
mem
);

156 
	`˝puã°_‰ì
(
mem
);

157 
	}
}

159 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ˇŒoc
)

161 * 
mem
 = 
	`˝puã°_ˇŒoc
(10, 10);

162 
	`CHECK
(0 !
mem
);

163 
	`˝puã°_‰ì
(
mem
);

164 
	}
}

166 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ªÆloc_œrgî
)

168 c⁄° * 
numbî_°rög
 = "123456789";

170 * 
mem1
 = (*Ë
	`˝puã°_mÆloc
(10);

172 
	`Pœtf‹mS≥cificSåCpy
(
mem1
, 
numbî_°rög
);

173 
	`CHECK
(
mem1
 != 0);

175 * 
mem2
 = (*Ë
	`˝puã°_ªÆloc
(
mem1
, 1000);

177 
	`CHECK
(
mem2
 != 0);

178 
	`STRCMP_EQUAL
(
numbî_°rög
, 
mem2
)

180 
	`˝puã°_‰ì
(
mem2
);

181 
	}
}

183 
	$TEST
(
Te°H¨√ss_c
, 
ma¸os
)

185 * 
mem1
 = 
	`mÆloc
(10);

186 * 
mem2
 = 
	`ˇŒoc
(10, 20);

187 * 
mem3
 = 
	`ªÆloc
(
mem2
, 100);

188 
	`‰ì
(
mem1
);

189 
	`‰ì
(
mem3
);

190 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestInstallerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

35 
NuŒTe°
 
	gnuŒTe°
;

37 
	$TEST_GROUP
(
Te°In°ÆÀr
)

38 { 
Te°In°ÆÀr
* 
ã°In°ÆÀr
;

39 
Te°Regi°ry
* 
myRegi°ry
;

40 
	`£tup
()

42 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

43 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

44 
ã°In°ÆÀr
 = 
√w
 
	`Te°In°ÆÀr
(&
nuŒTe°
, "TestInstaller",

45 "ã°", 
__FILE__
, 
__LINE__
);

47 
	`ã¨down
()

49 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

50 
ã°In°ÆÀr
->
	`unDo
();

51 
dñëe
 
ã°In°ÆÀr
;

52 
dñëe
 
myRegi°ry
;

54 
	}
};

56 
	$TEST
(
Te°In°ÆÀr
, 
Cª©e
)

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

37  
mûlisTime
;

38 
	}
}

40 
	$TEST_GROUP
(
Te°Ouçut
)

42 
Te°Ouçut
* 
¥öãr
;

43 
SåögBuf„rTe°Ouçut
* 
mock
;

44 
Uã°
* 
t°
;

45 
Faûuª
 *
f
;

46 
Te°Resu…
* 
ªsu…
;

48 
	`TEST_SETUP
()

50 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

51 
¥öãr
 = 
mock
;

52 
t°
 = 
√w
 
	`Uã°
("group", "test", "file", 1);

53 
f
 = 
√w
 
	`Faûuª
(
t°
, "failfile", 2, "message");

54 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
mock
);

55 
ªsu…
->
	`£tTŸÆExecuti⁄Time
(10);

56 
mûlisTime
 = 0;

57 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

59 
	`TEST_TEARDOWN
()

61 
dñëe
 
¥öãr
;

62 
dñëe
 
t°
;

63 
dñëe
 
f
;

64 
dñëe
 
ªsu…
;

65 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

67 
	}
};

69 
	$TEST
(
Te°Ouçut
, 
PrötC⁄°Ch¨Sèr
)

71 
¥öãr
->
	`¥öt
("hello");

72 
¥öãr
->
	`¥öt
("hello\n");

73 
	`STRCMP_EQUAL
("hñlohñlo\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

74 
	}
}

76 
	$TEST
(
Te°Ouçut
, 
PrötL⁄g
)

78 
¥öãr
->
	`¥öt
(1234);

79 
	`STRCMP_EQUAL
("1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
Te°Ouçut
, 
PrötDoubÀ
)

84 
¥öãr
->
	`¥ötDoubÀ
(12.34);

85 
	`STRCMP_EQUAL
("12.340", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

86 
	}
}

88 
	$TEST
(
Te°Ouçut
, 
SåómO≥øt‹s
)

90 *
¥öãr
 << "n=" << 1234;

91 
	`STRCMP_EQUAL
("n=1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Te°Ouçut
, 
PrötTe°Ended
)

96 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

97 
	`STRCMP_EQUAL
(".", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

98 
	}
}

100 
	$TEST
(
Te°Ouçut
, 
PrötTe°ALŸ
)

102 
i
 = 0; i < 60; ++i) {

103 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

105 
	`STRCMP_EQUAL
("..................................................\n..........", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

106 
	}
}

108 
	$TEST
(
Te°Ouçut
, 
SëProgªssIndiˇt‹
)

110 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

111 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

112 
ªsu…
->
	`£tProgªssIndiˇt‹
("!");

113 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

114 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

115 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

117 
	`STRCMP_EQUAL
(".!.", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

118 
	}
}

120 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Sèπed
)

122 
mock
->
	`vîbo£
();

123 
¥öãr
->
	`¥ötCuºítTe°Sèπed
(*
t°
);

124 
	`STRCMP_EQUAL
("TEST(group,Åe°)", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

125 
	}
}

127 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Ended
)

129 
mock
->
	`vîbo£
();

130 
ªsu…
->
	`cuºítTe°Sèπed
(
t°
);

131 
mûlisTime
 = 5;

132 
ªsu…
->
	`cuºítTe°Ended
(
t°
);

133 
	`STRCMP_EQUAL
("TEST(group,Åe°Ë- 5 ms\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

134 
	}
}

136 
	$TEST
(
Te°Ouçut
, 
PrötTe°Run
)

138 
¥öãr
->
	`¥ötTe°Run
(2, 3);

139 
	`STRCMP_EQUAL
("Te°Ñu¿2 o‡3\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

140 
	}
}

142 
	$TEST
(
Te°Ouçut
, 
PrötTe°RunO∆yO√
)

144 
¥öãr
->
	`¥ötTe°Run
(1, 1);

145 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Te°Ouçut
, 
PrötFaûuª
)

150 
¥öãr
->
	`¥öt
(*
f
);

151 
	`STRCMP_EQUAL
("\nÁûfûe:2:Éº‹: Faûuª i¿TEST(group,Åe°)\n\tmesßge\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

152 
	}
}

154 
	$TEST
(
Te°Ouçut
, 
PrötTe°Sèπs
)

156 
¥öãr
->
	`¥ötTe°sSèπed
();

157 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

158 
	}
}

160 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEnded
)

162 
ªsu…
->
	`cou¡Te°
();

163 
ªsu…
->
	`cou¡Check
();

164 
ªsu…
->
	`cou¡Ign‹ed
();

165 
ªsu…
->
	`cou¡Ign‹ed
();

166 
ªsu…
->
	`cou¡Run
();

167 
ªsu…
->
	`cou¡Run
();

168 
ªsu…
->
	`cou¡Run
();

169 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

170 
	`STRCMP_EQUAL
("\nOK (1Åe°s, 3Ñ™, 1 checks, 2 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

171 
	}
}

173 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEndedWôhFaûuªs
)

175 
ªsu…
->
	`addFaûuª
(*
f
);

176 
¥öãr
->
	`Êush
();

177 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

178 
	`STRCMP_EQUAL
("\nEº‹†(1 faûuªs, 0Åe°s, 0Ñ™, 0 checks, 0 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

179 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestRegistryTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	g«me•a˚


34 
°ub
()

37 c⁄° 
	gã°LöeNumbî
 = 1;

40 ˛as†
	cMockTe°
: 
public
 
Uã°


42 
public
:

43 
MockTe°
(c⁄° * 
group
 = "Group") :

44 
Uã°
(
group
, "Name", "Fûe", 
ã°LöeNumbî
), 
	$hasRun_
(
Ál£
)

47 
	$ã°Body
()

49 
hasRun_
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	ghasRun_
;

55 ˛as†
	cMockTe°Resu…
: 
public
 
Te°Resu…


57 
public
:

59 
cou¡Te°sSèπed
;

60 
	mcou¡Te°sEnded
;

61 
	mcou¡CuºítTe°Sèπed
;

62 
	mcou¡CuºítTe°Ended
;

63 
	mcou¡CuºítGroupSèπed
;

64 
	mcou¡CuºítGroupEnded
;

66 
	$MockTe°Resu…
(
Te°Ouçut
& 
p
) :

67 
	$Te°Resu…
(
p
)

69 
	`ª£tCou¡
();

72 
vútuÆ
 ~
	$MockTe°Resu…
()

74 
	}
}

77 
	$ª£tCou¡
()

79 
cou¡Te°sSèπed
 = 0;

80 
cou¡Te°sEnded
 = 0;

81 
cou¡CuºítTe°Sèπed
 = 0;

82 
cou¡CuºítTe°Ended
 = 0;

83 
cou¡CuºítGroupSèπed
 = 0;

84 
cou¡CuºítGroupEnded
 = 0;

85 
	}
}

87 
vútuÆ
 
	$ã°sSèπed
()

89 
cou¡Te°sSèπed
++;

90 
	}
}

91 
vútuÆ
 
	$ã°sEnded
()

93 
cou¡Te°sEnded
++;

94 
	}
}

95 
vútuÆ
 
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

97 
cou¡CuºítTe°Sèπed
++;

98 
	}
}

99 
vútuÆ
 
	$cuºítTe°Ended
(
Uã°
* 
ã°
)

101 
cou¡CuºítTe°Ended
++;

102 
	}
}

103 
vútuÆ
 
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

105 
cou¡CuºítGroupSèπed
++;

106 
	}
}

107 
vútuÆ
 
	$cuºítGroupEnded
(
Uã°
* 
ã°
)

109 
cou¡CuºítGroupEnded
++;

110 
	}
}

114 
	$TEST_GROUP
(
Te°Regi°ry
)

116 
Te°Regi°ry
* 
myRegi°ry
;

117 
SåögBuf„rTe°Ouçut
* 
ouçut
;

118 
MockTe°
* 
ã°1
;

119 
MockTe°
* 
ã°2
;

120 
MockTe°
* 
ã°3
;

121 
Te°Resu…
 *
ªsu…
;

122 
MockTe°Resu…
 *
mockResu…
;

123 
	`TEST_SETUP
()

125 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

126 
mockResu…
 = 
√w
 
	`MockTe°Resu…
(*
ouçut
);

127 
ªsu…
 = 
mockResu…
;

128 
ã°1
 = 
√w
 
	`MockTe°
();

129 
ã°2
 = 
√w
 
	`MockTe°
();

130 
ã°3
 = 
√w
 
	`MockTe°
("group2");

131 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

132 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

135 
	`TEST_TEARDOWN
()

137 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

138 
dñëe
 
myRegi°ry
;

139 
dñëe
 
ã°1
;

140 
dñëe
 
ã°2
;

141 
dñëe
 
ã°3
;

142 
dñëe
 
ªsu…
;

143 
dñëe
 
ouçut
;

145 
	}
};

147 
	$TEST
(
Te°Regi°ry
, 
ªgi°ryMyRegi°ryAndRe£t
)

149 
	`CHECK
(
myRegi°ry
->
	`gëCuºítRegi°ry
() == myRegistry);

150 
	}
}

152 
	$TEST
(
Te°Regi°ry
, 
em±yRegi°ryIsEm±y
)

154 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

155 
	}
}

157 
	$TEST
(
Te°Regi°ry
, 
addO√Te°IsNŸEm±y
)

159 
myRegi°ry
->
	`addTe°
(
ã°1
);

160 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

161 
	}
}

163 
	$TEST
(
Te°Regi°ry
, 
addO√TwoTe°s
)

165 
myRegi°ry
->
	`addTe°
(
ã°1
);

166 
myRegi°ry
->
	`addTe°
(
ã°2
);

167 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

168 
	}
}

170 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°s
)

172 
myRegi°ry
->
	`addTe°
(
ã°1
);

173 
myRegi°ry
->
	`addTe°
(
ã°2
);

174 
	`CHECK
(!
ã°1
->
hasRun_
);

175 
	`CHECK
(!
ã°2
->
hasRun_
);

176 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

177 
	`CHECK
(
ã°1
->
hasRun_
);

178 
	`CHECK
(
ã°2
->
hasRun_
);

179 
	}
}

181 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°sCheckResu…Fun˘i⁄sCÆÀd
)

183 
myRegi°ry
->
	`addTe°
(
ã°1
);

184 
myRegi°ry
->
	`addTe°
(
ã°2
);

185 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

186 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sSèπed
);

187 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sEnded
);

188 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupSèπed
);

189 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupEnded
);

190 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

191 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Ended
);

192 
	}
}

194 
	$TEST
(
Te°Regi°ry
, 
runThªeTe°ßndTwoGroupsCheckResu…Fun˘i⁄sCÆÀd
)

196 
myRegi°ry
->
	`addTe°
(
ã°1
);

197 
myRegi°ry
->
	`addTe°
(
ã°2
);

198 
myRegi°ry
->
	`addTe°
(
ã°3
);

199 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

200 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupSèπed
);

201 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupEnded
);

202 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

203 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Ended
);

204 
	}
}

206 
	$TEST
(
Te°Regi°ry
, 
unDoTe°
)

208 
myRegi°ry
->
	`addTe°
(
ã°1
);

209 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

210 
myRegi°ry
->
	`unDoLa°AddTe°
();

211 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

212 
	}
}

214 
	$TEST
(
Te°Regi°ry
, 
unDoButNoTe°
)

216 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

217 
myRegi°ry
->
	`unDoLa°AddTe°
();

218 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

219 
	}
}

221 
	$TEST
(
Te°Regi°ry
, 
ªÆlyUndoLa°Te°
)

223 
myRegi°ry
->
	`addTe°
(
ã°1
);

224 
myRegi°ry
->
	`addTe°
(
ã°2
);

225 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

226 
myRegi°ry
->
	`unDoLa°AddTe°
();

227 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

228 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

229 
	`CHECK
(
ã°1
->
hasRun_
);

230 
	`CHECK
(!
ã°2
->
hasRun_
);

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestResultTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

35 
	}
}

37 
	$TEST_GROUP
(
Te°Resu…
)

39 
Te°Ouçut
* 
¥öãr
;

40 
SåögBuf„rTe°Ouçut
* 
mock
;

42 
Te°Resu…
* 
ªs
;

44 
	`TEST_SETUP
()

46 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
¥öãr
 = 
mock
;

48 
ªs
 = 
√w
 
	`Te°Resu…
(*
¥öãr
);

49 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

51 
	`TEST_TEARDOWN
()

53 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

54 
dñëe
 
¥öãr
;

55 
dñëe
 
ªs
;

57 
	}
};

59 
	$TEST
(
Te°Resu…
, 
Te°EndedWûlPrötResu…sAndExecuti⁄Time
)

61 
ªs
->
	`ã°sEnded
();

62 
	`CHECK
(
mock
->
	`gëOuçut
().
	`c⁄èös
("10 ms"));

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\UtestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
boﬁ
 
	ga·îCheck
;

35 
	$TEST_GROUP
(
Uã°
)

37 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
	`£tup
()

40 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

41 
a·îCheck
 = 
Ál£
;

43 
	`ã¨down
()

45 
dñëe
 
fixtuª
;

48 
	`ã°FaûuªWôh
((*
mëhod
)())

50 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

51 
fixtuª
->
	`runAŒTe°s
();

52 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

53 
	`CHECK
(!
a·îCheck
);

56 
	}
};

58 
	$_∑ssMëhod
()

60 
	`CHECK
(
åue
);

61 
a·îCheck
 = 
åue
;

62 
	}
}

64 
	$_∑ssPröt
()

66 
	`UT_PRINT
("Hello World!");

67 
	}
}

69 
	$_∑ssPrötF
()

71 
	`UT_PRINT
(
	`SåögFromF‹m©
("Hello %s %d", "World!", 2009));

72 
	}
}

74 
	$_ÁûMëhod
()

76 
	`FAIL
("ThisÅest fails");

77 
a·îCheck
 = 
åue
;

78 
	}
}

80 
	$_ÁûMëhodFAIL_TEST
()

82 
	`FAIL_TEST
("ThisÅest fails");

83 
a·îCheck
 = 
åue
;

84 
	}
}

86 
	$_ÁûMëhodCHECK
()

88 
	`CHECK
(
Ál£
);

89 
a·îCheck
 = 
åue
;

90 
	}
}

92 
	$_ÁûMëhodCHECK_EQUAL
()

94 
	`CHECK_EQUAL
(1, 2);

95 
a·îCheck
 = 
åue
;

96 
	}
}

98 
	$_ÁûMëhodSTRCMP_EQUAL
()

100 
	`STRCMP_EQUAL
("a", "b");

101 
a·îCheck
 = 
åue
;

102 
	}
}

104 
	$_ÁûMëhodSTRCMP_CONTAINS
()

106 
	`STRCMP_CONTAINS
("hello", "world");

107 
a·îCheck
 = 
åue
;

108 
	}
}

110 
	$_ÁûMëhodLONGS_EQUAL
()

112 
	`LONGS_EQUAL
(1, 0xff);

113 
a·îCheck
 = 
åue
;

114 
	}
}

115 
	$_ÁûMëhodBYTES_EQUAL
()

117 
	`BYTES_EQUAL
('a', 'b');

118 
a·îCheck
 = 
åue
;

119 
	}
}

121 
	$_ÁûMëhodPOINTERS_EQUAL
()

123 
	`POINTERS_EQUAL
((*)0xa5a5, (*)0xf0f0);

124 
a·îCheck
 = 
åue
;

125 
	}
}

127 
	$_ÁûMëhodDOUBLES_EQUAL
()

129 
	`DOUBLES_EQUAL
(0.12, 44.1, 0.3);

130 
a·îCheck
 = 
åue
;

131 
	}
}

133 
	$TEST
(
Uã°
, 
FaûuªPrötsSomëhög
)

135 
	`ã°FaûuªWôh
(
_ÁûMëhod
);

136 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

137 
fixtuª
->
	`as£πPrötC⁄èös
("ThisÅest fails");

138 
	}
}

140 
	$TEST
(
Uã°
, 
FaûuªWôhFaûTe°
)

142 
	`ã°FaûuªWôh
(
_ÁûMëhodFAIL_TEST
);

143 
	}
}

145 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹L⁄gI¡s
)

147 
	`ã°FaûuªWôh
(
_ÁûMëhodLONGS_EQUAL
);

148 
fixtuª
->
	`as£πPrötC⁄èös
("expected < 1 0x01>");

149 
fixtuª
->
	`as£πPrötC⁄èös
("but was <255 0xff>");

150 
	}
}

152 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹Poöãrs
)

154 
	`ã°FaûuªWôh
(
_ÁûMëhodPOINTERS_EQUAL
);

155 
fixtuª
->
	`as£πPrötC⁄èös
("expected <0xa5a5>");

156 
fixtuª
->
	`as£πPrötC⁄èös
("but was <0xf0f0>");

157 
	}
}

159 
	$TEST
(
Uã°
, 
FaûuªWôhDOUBLES_EQUAL
)

161 
	`ã°FaûuªWôh
(
_ÁûMëhodDOUBLES_EQUAL
);

162 
	}
}

164 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK
)

166 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK
);

167 
	}
}

169 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK_EQUAL
)

171 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK_EQUAL
);

172 
	}
}

174 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_EQUAL
)

176 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_EQUAL
);

177 
	}
}

179 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_CONTAINS
)

181 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_CONTAINS
);

182 
	}
}

184 
	$TEST
(
Uã°
, 
FaûuªWôhBYTES_EQUAL
)

186 
	`ã°FaûuªWôh
(
_ÁûMëhodBYTES_EQUAL
);

187 
	}
}

189 
	$TEST
(
Uã°
, 
Suc˚ssPrötsNŸhög
)

191 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

192 
fixtuª
->
	`runAŒTe°s
();

193 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

194 
fixtuª
->
	`as£πPrötC⁄èös
(".\nOK (1Åests");

195 
	`CHECK
(
a·îCheck
);

196 
	}
}

198 
	$TEST
(
Uã°
, 
PrötPrötsWh©evîPrötPröts
)

200 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPröt
);

201 
fixtuª
->
	`runAŒTe°s
();

202 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

203 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World!");

204 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

205 
	}
}

207 
	$TEST
(
Uã°
, 
PrötPrötsPrötf
)

209 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPrötF
);

210 
fixtuª
->
	`runAŒTe°s
();

211 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

212 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World! 2009");

213 
	}
}

215 
	$TEST
(
Uã°
, 
ÆlMa¸os
)

217 
	`CHECK
(0 == 0);

218 
	`LONGS_EQUAL
(1,1);

219 
	`BYTES_EQUAL
(0xab,0xab);

220 
	`CHECK_EQUAL
(100,100);

221 
	`STRCMP_EQUAL
("THIS", "THIS");

222 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

223 
	`POINTERS_EQUAL
(
this
,Åhis);

224 
	}
}

226 
	$fun˘i⁄Th©Rëu∫sAVÆue
()

228 
	`CHECK
(0 == 0);

229 
	`LONGS_EQUAL
(1,1);

230 
	`BYTES_EQUAL
(0xab,0xab);

231 
	`CHECK_EQUAL
(100,100);

232 
	`STRCMP_EQUAL
("THIS", "THIS");

233 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

234 
	`POINTERS_EQUAL
(0, 0);

236 
	}
}

238 
	$TEST
(
Uã°
, 
ÆlMa¸osFromFun˘i⁄Th©Rëu∫sAVÆue
)

240 
	`fun˘i⁄Th©Rëu∫sAVÆue
();

241 
	}
}

243 
	$TEST
(
Uã°
, 
As£πsA˘LikeSèãmíts
)

245 i‡(
fixtuª
 !0)
	`CHECK
(
åue
)

246 
	`CHECK
(
Ál£
)

248 i‡(
fixtuª
 != 0)

249 
	`CHECK_EQUAL
(
åue
,Årue)

251 
	`CHECK_EQUAL
(
Ál£
, false)

253 i‡(
fixtuª
 != 0)

254 
	`STRCMP_EQUAL
("", "")

256 
	`STRCMP_EQUAL
("", " ")

258 i‡(
fixtuª
 != 0)

259 
	`STRCMP_CONTAINS
("con", "contains")

261 
	`STRCMP_CONTAINS
("hello", "world")

263 i‡(
fixtuª
 != 0)

264 
	`LONGS_EQUAL
(1, 1)

266 
	`LONGS_EQUAL
(1, 0)

268 i‡(
fixtuª
 != 0)

269 
	`DOUBLES_EQUAL
(1, 1, 0.01)

271 
	`DOUBLES_EQUAL
(1, 0, 0.01)

273 i‡(
Ál£
)

274 
	`FAIL
("")

278 i‡(
åue
)

281 
	`FAIL
("")

283 
	}
}

285 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Suµ‹tsAŒMa¸os
)

287 
	`CHECK
(
åue
);

288 
	`CHECK_EQUAL
(
åue
,Årue);

289 
	`STRCMP_EQUAL
("", "");

290 
	`LONGS_EQUAL
(1, 1);

291 
	`DOUBLES_EQUAL
(1, 1, 0.01);

292 
	`FAIL
("");

293 
	}
}

295 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Ac˚ssögFixtuª
)

297 
	`CHECK
(
fixtuª
 != 0);

298 
	}
}

300 
	$TEST
(
Uã°
, 
Ma¸osU£dInSëup
)

302 
	`IGNORE_ALL_LEAKS_IN_TEST
();

303 
fixtuª
->
	`£tSëup
(
_ÁûMëhod
);

304 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

305 
fixtuª
->
	`runAŒTe°s
();

306 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

307 
	}
}

309 
	$TEST
(
Uã°
, 
Ma¸osU£dInTórDown
)

311 
	`IGNORE_ALL_LEAKS_IN_TEST
();

312 
fixtuª
->
	`£tTórdown
(
_ÁûMëhod
);

313 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

314 
fixtuª
->
	`runAŒTe°s
();

315 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

316 
	}
}

318 
	gã¨downCÆÀd
 = 0;

320 
	$_ã¨downMëhod
()

322 
ã¨downCÆÀd
++;

323 
	}
}

325 
	$TEST
(
Uã°
, 
TórdownCÆÀdA·îTe°Faûuª
)

327 
	`IGNORE_ALL_LEAKS_IN_TEST
();

328 
fixtuª
->
	`£tTórdown
(
_ã¨downMëhod
);

329 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

330 
fixtuª
->
	`runAŒTe°s
();

331 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

332 
	`LONGS_EQUAL
(1, 
ã¨downCÆÀd
);

333 
	}
}

335 
	g°›A·îFaûuª
 = 0;

336 
	$_°›A·îFaûuªMëhod
()

338 
	`FAIL
("fail");

339 
°›A·îFaûuª
++;

340 
	}
}

342 
	$TEST
(
Uã°
, 
Te°St›sA·îTe°Faûuª
)

344 
	`IGNORE_ALL_LEAKS_IN_TEST
();

345 
°›A·îFaûuª
 = 0;

346 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_°›A·îFaûuªMëhod
);

347 
fixtuª
->
	`runAŒTe°s
();

348 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

349 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

350 
	}
}

352 
	$TEST
(
Uã°
, 
Te°St›sA·îSëupFaûuª
)

354 
°›A·îFaûuª
 = 0;

355 
fixtuª
->
	`£tSëup
(
_°›A·îFaûuªMëhod
);

356 
fixtuª
->
	`£tTórdown
(
_°›A·îFaûuªMëhod
);

357 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

358 
fixtuª
->
	`runAŒTe°s
();

359 
	`LONGS_EQUAL
(2, 
fixtuª
->
	`gëFaûuªCou¡
());

360 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

361 
	}
}

363 
	$TEST_BASE
(
MyOwnTe°
){

364 
	`MyOwnTe°
(Ë: 
	`öTe°
(
Ál£
) {}

365 
boﬁ
 
öTe°
;

367 
	`£tup
()

369 
	`CHECK
(!
öTe°
);

370 
öTe°
 = 
åue
;

372 
	`ã¨down
()

374 
	`CHECK
(
öTe°
);

375 
öTe°
 = 
Ál£
;

377 
	}
};

379 
	$TEST_GROUP_BASE
(
Uã°MyOwn
, 
MyOwnTe°
)

381 
	}
};

383 
	$TEST
(
Uã°MyOwn
, 
ã°
)

385 
	`CHECK
(
öTe°
);

386 
	}
}

388 ˛as†
	cNuŒP¨amëîTe°
: 
public
 
Uã°


392 
	$TEST
(
Uã°MyOwn
, 
NuŒP¨amëîs
)

394 
NuŒP¨amëîTe°
 
nuŒTe°
;

395 
Te°Regi°ry
* 
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

396 
nuŒTe°
.
	`shouldRun
(
ªg
->
	`gëGroupFûãr
(),Ñeg->
	`gëNameFûãr
());

397 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\AllTests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

33 ˛as†
	cMyDummyCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


35 
public
:

36 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

38  
obje˘1
 =
obje˘2
;

41 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

43  
	`SåögFrom
(
obje˘
);

44 
	}
}

47 
	$maö
(
ac
, ** 
av
)

49 
MyDummyCom∑øt‹
 
dummyCom∑øt‹
;

50 
MockSuµ‹tPlugö
 
mockPlugö
;

52 
mockPlugö
.
	`ö°ÆlCom∑øt‹
("MyDummyTy≥", 
dummyCom∑øt‹
);

53 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
mockPlugö
);

54  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

55 
	}
}

57 
	~"Aµliˇti⁄Lib/AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\AllTests.h

28 
IMPORT_TEST_GROUP
–
Pröãr
);

29 
IMPORT_TEST_GROUP
–
CúcuœrBuf„r
);

30 
IMPORT_TEST_GROUP
–
HñloW‹ld
);

31 
IMPORT_TEST_GROUP
–
EvítDi•©chî
);

32 
IMPORT_TEST_GROUP
–
MockDocumíèti⁄
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBuffer.cpp

28 
	~"CúcuœrBuf„r.h
"

29 
	~"Pröãr.h
"

31 
	gCúcuœrBuf„r
::
	$CúcuœrBuf„r
(
_ˇ∑côy
) :

32 
	`ödex
(0), 
	`outdex
(0), 
	`ˇ∑côy
(
_ˇ∑côy
), 
	`em±y
(
åue
), 
	$fuŒ
(
Ál£
)

34 
buf„r
 = 
√w
 [
this
->
ˇ∑côy
];

35 
	}
}

37 
	gCúcuœrBuf„r
::~
	$CúcuœrBuf„r
()

39 
dñëe
[] 
buf„r
;

40 
	}
}

42 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsEm±y
()

44  
em±y
;

45 
	}
}

47 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsFuŒ
()

49  
fuŒ
;

50 
	}
}

52 
	gCúcuœrBuf„r
::
	$Put
(
i
)

54 
em±y
 = 
Ál£
;

55 
buf„r
[
ödex
] = 
i
;

56 
ödex
 = 
	`Next
(index);

57 i‡(
fuŒ
Ë
outdex
 = 
	`Next
(outdex);

58 i‡(
ödex
 =
outdex
Ë
fuŒ
 = 
åue
;

59 
	}
}

61 
	gCúcuœrBuf„r
::
	$Gë
()

63 
ªsu…
 = -1;

64 
fuŒ
 = 
Ál£
;

66 i‡(!
em±y
) {

67 
ªsu…
 = 
buf„r
[
outdex
];

68 
outdex
 = 
	`Next
(outdex);

69 i‡(
outdex
 =
ödex
Ë
em±y
 = 
åue
;

71  
ªsu…
;

72 
	}
}

74 
	gCúcuœrBuf„r
::
	$C≠acôy
()

76  
ˇ∑côy
;

77 
	}
}

79 
	gCúcuœrBuf„r
::
	$Next
(
i
)

81 i‡(++
i
 >
ˇ∑côy
) i = 0;

82  
i
;

83 
	}
}

85 
	gCúcuœrBuf„r
::
	$Pröt
(
Pröãr
* 
p
)

87 
p
->
	`Pröt
("Circular buffer content:\n<");

89 
¥ötIndex
 = 
outdex
;

90 
cou¡
 = 
ödex
 - 
outdex
;

92 i‡(!
em±y
 && (
ödex
 <
outdex
)Ë
cou¡
 = 
ˇ∑côy
 - (outdex - index);

94 
i
 = 0; i < 
cou¡
; i++) {

95 
p
->
	`Pröt
(
buf„r
[
¥ötIndex
]);

96 
¥ötIndex
 = 
	`Next
(printIndex);

97 i‡(
i
 + 1 !
cou¡
Ë
p
->
	`Pröt
(", ");

99 
p
->
	`Pröt
(">\n");

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBuffer.h

28 #i‚de‡
D_CúcuœrBuf„r_H


29 
	#D_CúcuœrBuf„r_H


	)

38 
˛ass
 
	gPröãr
;

40 ˛as†
	cCúcuœrBuf„r


42 
	mpublic
:

43 
ex∂icô
 
CúcuœrBuf„r
(
ˇ∑côy
 = 
CAPACITY
);

44 
	mvútuÆ
 ~
CúcuœrBuf„r
();

46 
Put
();

47 
Gë
();

48 
boﬁ
 
IsEm±y
();

49 
boﬁ
 
IsFuŒ
();

50 
C≠acôy
();

51 
Next
(
i
);

52 
Pröt
(
Pröãr
*);

54 
	m¥iv©e
:

56 
ödex
;

57 
	moutdex
;

58 * 
	mbuf„r
;

59 
	mˇ∑côy
;

62 
	mCAPACITY
 = 5

64 
boﬁ
 
	gem±y
;

65 
boﬁ
 
	gfuŒ
;

67 
CúcuœrBuf„r
(const CircularBuffer&);

68 
	gCúcuœrBuf„r
& 
	g›î©‹
=(c⁄° 
CúcuœrBuf„r
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBufferTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"MockPröãr.h
"

30 
	~"CúcuœrBuf„r.h
"

32 
	$TEST_GROUP
(
CúcuœrBuf„r
)

33 { 
CúcuœrBuf„r
* 
buf„r
;

35 
	`£tup
()

37 
buf„r
 = 
√w
 
	`CúcuœrBuf„r
();

39 
	`ã¨down
()

41 
dñëe
 
buf„r
;

44 
	`fûlTheQueue
(
£ed
, 
howM™y
)

46 
i
 = 0; i < 
howM™y
; i++)

47 
buf„r
->
	`Put
(
£ed
 + 
i
);

49 
	`ªmoveFromQueue
(
howM™y
)

51 
i
 = 0; i < 
howM™y
; i++)

52 
buf„r
->
	`Gë
();

54 
	}
};

56 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

58 
	`CHECK
(
buf„r
->
	`IsEm±y
());

59 
	}
}

61 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

63 
buf„r
->
	`Put
(10046);

64 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

65 
	}
}

67 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

69 
buf„r
->
	`Put
(4567);

70 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

71 
buf„r
->
	`Gë
();

72 
	`CHECK
(
buf„r
->
	`IsEm±y
());

73 
	}
}

75 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

77 
buf„r
->
	`Put
(4567);

78 
	`LONGS_EQUAL
(4567, 
buf„r
->
	`Gë
());

79 
	}
}

81 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

83 
buf„r
->
	`Put
(1);

84 
buf„r
->
	`Put
(2);

85 
buf„r
->
	`Put
(3);

86 
	`LONGS_EQUAL
(1, 
buf„r
->
	`Gë
());

87 
	`LONGS_EQUAL
(2, 
buf„r
->
	`Gë
());

88 
	`LONGS_EQUAL
(3, 
buf„r
->
	`Gë
());

89 
	}
}

91 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

93 
CúcuœrBuf„r
 
	`b
(2);

94 
	`LONGS_EQUAL
(2, 
b
.
	`C≠acôy
());

95 
	}
}

97 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

99 
	`fûlTheQueue
(0, 
buf„r
->
	`C≠acôy
());

100 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

101 
	}
}

103 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

105 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

107 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

109 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

111 
	`CHECK
(
buf„r
->
	`IsEm±y
());

112 
	}
}

114 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

116 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

118 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

119 
	`LONGS_EQUAL
(100, 
buf„r
->
	`Gë
());

120 
	`CHECK
(!
buf„r
->
	`IsFuŒ
());

121 
buf„r
->
	`Put
(1000);

122 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

124 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 1);

126 
	`LONGS_EQUAL
(1000, 
buf„r
->
	`Gë
());

127 
	`CHECK
(
buf„r
->
	`IsEm±y
());

128 
	}
}

130 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒ
)

132 
ˇ∑côy
 = 
buf„r
->
	`C≠acôy
();

133 
	`fûlTheQueue
(900, 
ˇ∑côy
);

134 
buf„r
->
	`Put
(9999);

136 
i
 = 0; i < 
buf„r
->
	`C≠acôy
() - 1; i++)

137 
	`LONGS_EQUAL
(
i
+900+1, 
buf„r
->
	`Gë
());

139 
	`LONGS_EQUAL
(9999, 
buf„r
->
	`Gë
());

140 
	`CHECK
(
buf„r
->
	`IsEm±y
());

141 
	}
}

147 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±y
)

149 
	`LONGS_EQUAL
(-1, 
buf„r
->
	`Gë
());

150 
	`CHECK
(
buf„r
->
	`IsEm±y
());

151 
	}
}

159 
	$TEST
(
CúcuœrBuf„r
, 
PrötEm±y
)

161 
MockPröãr
 
mock
;

162 
Pröãr
* 
p
 = &
mock
;

164 
buf„r
->
	`Pröt
(
p
);

165 
	`CHECK_EQUAL
("Circular buffer content:\n<>\n",

166 
mock
.
	`gëOuçut
());

167 
	}
}

169 
	$TEST
(
CúcuœrBuf„r
, 
PrötA·îO√Put
)

171 
MockPröãr
 
mock
;

173 
buf„r
->
	`Put
(1);

174 
buf„r
->
	`Pröt
(&
mock
);

175 
	`CHECK_EQUAL
("Circular buffer content:\n<1>\n",

176 
mock
.
	`gëOuçut
());

177 
	}
}

179 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedOrFuŒ
)

181 
MockPröãr
 
mock
;

183 
buf„r
->
	`Put
(1);

184 
buf„r
->
	`Put
(2);

185 
buf„r
->
	`Put
(3);

186 
buf„r
->
	`Pröt
(&
mock
);

187 
	`CHECK_EQUAL
("Circular buffer content:\n<1, 2, 3>\n",

188 
mock
.
	`gëOuçut
());

189 
	}
}

191 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedAndIsFuŒ
)

193 
MockPröãr
 
mock
;

195 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

197 
buf„r
->
	`Pröt
(&
mock
);

198 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

201 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

202 
	}
}

204 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

206 
MockPröãr
 
mock
;

208 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

209 
buf„r
->
	`Gë
();

210 
buf„r
->
	`Put
(999);

212 
buf„r
->
	`Pröt
(&
mock
);

213 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

216 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

217 
	}
}

219 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndFuŒOvîwrôeOlde°
)

221 
MockPröãr
 
mock
;

223 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

224 
buf„r
->
	`Put
(9999);

226 
buf„r
->
	`Pröt
(&
mock
);

227 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

230 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

231 
	}
}

233 
	$TEST
(
CúcuœrBuf„r
, 
PrötBound¨y
)

235 
MockPröãr
 
mock
;

237 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

238 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 2);

239 
buf„r
->
	`Put
(888);

240 
	`fûlTheQueue
(300, 
buf„r
->
	`C≠acôy
() - 1);

242 
buf„r
->
	`Pröt
(&
mock
);

243 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

246 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

247 
	}
}

249 
	$TEST
(
CúcuœrBuf„r
, 
FûlEm±yThíPröt
)

251 
MockPröãr
 
mock
;

253 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

254 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

255 
buf„r
->
	`Pröt
(&
mock
);

256 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

259 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

260 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcher.cpp

28 
	~"EvítDi•©chî.h
"

30 
	gEvítDi•©chî
::
	$EvítDi•©chî
()

32 
	}
}

34 
EvítDi•©chî
::
	$ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
)

36 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

37 
i
->
£c⁄d
->
	`nŸifyRegi°øti⁄
(
ob£rvî
);

39 
ob£rvîLi°_
.
	`push_back
(
	`make_∑ú
(
ty≥
, 
ob£rvî
));

40 
	}
}

42 
	gEvítDi•©chî
::
	$di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
)

44 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

46 i‡(
i
->
fú°
 =
evít
.
ty≥
)

47 
i
->
£c⁄d
->
	`nŸify
(
evít
, 
timeoutSec⁄ds
);

49 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcher.h

28 #i‚de‡
EVENTDISPATCHER__H


29 
	#EVENTDISPATCHER__H


	)

31 
	~<li°
>

32 
usög
 
«me•a˚
 
	g°d
;

34 
	eEvítTy≥


36 
	mIMPORTANT_EVENT
,

37 
	mLESS_IMPORTANT_EVENT


40 ˛as†
	cEvít


42 
	mpublic
:

43 
EvítTy≥
 
ty≥
;

46 ˛as†
	cEvítOb£rvî


48 
	mpublic
:

49 
vútuÆ
 
nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)=0;

50 
vútuÆ
 
nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)=0;

53 ˛as†
	cEvítDi•©chî


55 
	mli°
<
	m∑ú
<
	mEvítTy≥
, 
	mEvítOb£rvî
*> > 
	mob£rvîLi°_
;

56 
	mpublic
:

57 
EvítDi•©chî
();

59 
ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
);

60 
di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcherTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"EvítDi•©chî.h
"

32 ˛as†
	cOb£rvîMock
 : 
public
 
EvítOb£rvî


34 
public
:

35 
vútuÆ
 
	$nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)

37 
	`mock
().
	`a˘uÆCÆl
("nŸify").
	`⁄Obje˘
(
this
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", (*Ë&
evít
).
	`wôhP¨amëî
("timeOutInSec⁄ds", 
timeOutInSec⁄ds
);

39 
vútuÆ
 
	$nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)

41 
	`mock
().
	`a˘uÆCÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("√wOb£rvî", 
√wOb£rvî
);

42 
	}
}

45 ˛as†
	cEvítCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

50  ((
Evít
*)
obje˘1
)->
ty≥
 =((Evít*)
obje˘2
)->type;

52 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

54  
	`SåögFrom
(((
Evít
*)
obje˘
)->
ty≥
);

55 
	}
}

59 
	$TEST_GROUP
(
EvítDi•©chî
)

61 
Evít
 
evít
;

62 
EvítDi•©chî
* 
di•©chî
;

63 
Ob£rvîMock
 
ob£rvî
;

64 
Ob£rvîMock
 
ob£rvî2
;

65 
EvítCom∑øt‹
 
evítCom∑øt‹
;

67 
	`£tup
()

69 
di•©chî
 = 
√w
 
EvítDi•©chî
;

70 
	`mock
().
	`ö°ÆlCom∑øt‹
("Evít", 
evítCom∑øt‹
);

72 
	`ã¨down
()

74 
dñëe
 
di•©chî
;

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

77 
	}
};

80 
	$TEST
(
EvítDi•©chî
, 
EvítWôhoutRegi°øti⁄sResu…sI¡oNoCÆls
)

82 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

83 
	}
}

85 
	$TEST
(
EvítDi•©chî
, 
EvítWôhRegi°øti⁄F‹EvítResu…sI¡oCÆlback
)

87 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

88 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

90 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

91 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

92 
	}
}

94 
	$TEST
(
EvítDi•©chî
, 
Dif„ª¡EvítWôhRegi°øti⁄D€sNŸResu…I¡oCÆlback
)

96 
evít
.
ty≥
 = 
LESS_IMPORTANT_EVENT
;

97 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

98 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

99 
	}
}

101 
	$TEST
(
EvítDi•©chî
, 
Regi°îTwoOb£rvîsResu…I¡oTwoCÆlsAndARegi°øti⁄NŸifiˇti⁄
)

103 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

104 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî2
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

105 
	`mock
().
	`ex≥˘O√CÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëî
("√wOb£rvî", &
ob£rvî2
);

107 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

108 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

109 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî2
);

110 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

111 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\ExamplesNewOverrides.h

28 
	~<li°
>

29 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\HelloTest.cpp

30 
	~"hñlo.h
"

33 
	~<°dio.h
>

34 
	~<°d¨g.h
>

35 
	~"CµUTe°/Te°H¨√ss.h
"

37 
Sim∂eSåög
* 
buf„r
;

39 
	$TEST_GROUP
(
HñloW‹ld
)

40 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

42 
va_li°
 
¨gumíts
;

43 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

44 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

45 
	`va_íd
(
¨gumíts
);

48 
	`£tup
()

50 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

51 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

53 
	`ã¨down
()

55 
dñëe
 
buf„r
;

57 
	}
};

59 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

61 
	`¥ötHñloW‹ld
();

62 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\MockDocumentationTest.cpp

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

36 
	$TEST_GROUP
(
Fú°Te°Group
)

38 
	}
};

40 
	$TEST
(
Fú°Te°Group
, 
FúsTe°
)

43 
	}
}

45 
	$TEST
(
Fú°Te°Group
, 
Sec⁄dTe°
)

48 
	}
}

51 
	$TEST_GROUP
(
MockDocumíèti⁄
)

53 
	}
};

55 
	$¥odu˘i⁄Code
()

57 
	`mock
().
	`a˘uÆCÆl
("productionCode");

58 
	}
}

60 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rio
)

62 
	`mock
().
	`ex≥˘O√CÆl
("productionCode");

63 
	`¥odu˘i⁄Code
();

64 
	`mock
().
	`checkEx≥˘©i⁄s
();

65 
	}
}

67 ˛as†
	cCœssFromProdu˘i⁄Code


69 
	mpublic
:

70 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
(){}

71 
	}
};

73 ˛as†
	cCœssFromProdu˘i⁄CodeMock
 : 
public
 
CœssFromProdu˘i⁄Code


75 
public
:

76 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
()

78 
	`mock
().
	`a˘uÆCÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
this
);

80 
	}
};

82 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rioObje˘
)

84 
CœssFromProdu˘i⁄Code
* 
obje˘
 = 
√w
 
CœssFromProdu˘i⁄CodeMock
;

86 
	`mock
().
	`ex≥˘O√CÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
obje˘
);

87 
obje˘
->
	`imp‹è¡Fun˘i⁄
();

88 
	`mock
().
	`checkEx≥˘©i⁄s
();

90 
dñëe
 
obje˘
;

91 
	}
}

93 
	$∑ømëîs_fun˘i⁄
(
p1
, c⁄° * 
p2
)

95 * 
obje˘
 = (*) 1;

96 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 
p1
).wôhP¨amëî("p2", 
p2
);

97 
	}
}

99 
	$TEST
(
MockDocumíèti⁄
, 
∑ømëîs
)

101 * 
obje˘
 = (*) 1;

102 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 2).withParameter("p2", "hah");

103 
	`∑ømëîs_fun˘i⁄
(2, "hah");

104 
	}
}

106 ˛as†
	cMyTy≥Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


108 
public
:

109 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

111  
obje˘1
 =
obje˘2
;

113 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

115  
	`SåögFrom
(
obje˘
);

116 
	}
}

119 
	$TEST
(
MockDocumíèti⁄
, 
Obje˘P¨amëîs
)

121 * 
obje˘
 = (*) 1;

122 
MyTy≥Com∑øt‹
 
com∑øt‹
;

123 
	`mock
().
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

124 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("myTy≥", "∑ømëîName", 
obje˘
);

125 
	`mock
().
	`˛ór
();

126 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

127 
	}
}

129 
	$TEST
(
MockDocumíèti⁄
, 
ªtu∫VÆue
)

131 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`™dRëu∫VÆue
(10);

132 
vÆue
 = 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

133 
vÆue
 = 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

134 
	}
}

136 
	$TEST
(
MockDocumíèti⁄
, 
£tD©a
)

138 
CœssFromProdu˘i⁄Code
 
obje˘
;

139 
	`mock
().
	`£tD©a
("importantValue", 10);

140 
	`mock
().
	`£tD©aObje˘
("imp‹è¡Obje˘", "CœssFromProdu˘i⁄Code", &
obje˘
);

142 
CœssFromProdu˘i⁄Code
 * 
pobje˘
;

143 
vÆue
 = 
	`mock
().
	`gëD©a
("imp‹è¡VÆue").
	`gëI¡VÆue
();

144 
pobje˘
 = (
CœssFromProdu˘i⁄Code
*Ë
	`mock
().
	`gëD©a
("imp‹è¡Obje˘").
	`gëObje˘Poöãr
();

146 
	`LONGS_EQUAL
(10, 
vÆue
);

147 
	`POINTERS_EQUAL
(
pobje˘
, &
obje˘
);

148 
	}
}

150 
	$doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
()

152 
	}
}

154 
	$TEST
(
MockDocumíèti⁄
, 
ŸhîMockSuµ‹t
)

156 
	`mock
().
	`¸ashOnFaûuª
();

159 
	`mock
().
	`ex≥˘O√CÆl
("foo");

160 
	`mock
().
	`ign‹eOthîCÆls
();

162 
	`mock
().
	`dißbÀ
();

163 
	`doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
();

164 
	`mock
().
	`íabÀ
();

166 
	`mock
().
	`˛ór
();

168 
	}
}

170 
	$TEST
(
MockDocumíèti⁄
, 
sc›e
)

172 
	`mock
("xmÕ¨£r").
	`ex≥˘O√CÆl
("open");

173 
	`mock
("fûesy°em").
	`ign‹eOthîCÆls
();

175 
	`mock
("xmÕ¨£r").
	`a˘uÆCÆl
("open");

176 
	}
}

178 
	$equÆMëhod
(* 
obje˘1
, * 
obje˘2
)

180  
obje˘1
 =
obje˘2
;

181 
	}
}

183 * 
	$toSåögMëhod
(*)

186 
	}
}

188 
	$TEST
(
MockDocumíèti⁄
, 
CI¡îÁ˚
)

190 * 
obje˘
 = (*) 0x1;

192 
	`mock_c
()->
	`ex≥˘O√CÆl
("foo")->
	`wôhI¡P¨am©îs
("öãgî", 10)->
	`™dRëu∫DoubÀVÆue
(1.11);

193 
	`mock_c
()->
	`a˘uÆCÆl
("foo")->
	`wôhI¡P¨am©îs
("öãgî", 10)->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
;

195 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥", 
equÆMëhod
, 
toSåögMëhod
);

196 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

197 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

198 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

200 
	`mock_c
()->
	`£tI¡D©a
("important", 10);

201 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

202 
	`mock_c
()->
	`˛ór
();

203 
	}
}

205 
	$TEST_GROUP
(
FooTe°Group
)

207 
	`£tup
()

212 
	`ã¨down
()

216 
	}
};

218 
	$TEST
(
FooTe°Group
, 
Foo
)

221 
	}
}

223 
	$TEST
(
FooTe°Group
, 
M‹eFoo
)

226 
	}
}

228 
	$TEST_GROUP
(
B¨Te°Group
)

230 
	`£tup
()

234 
	}
};

236 
	$TEST
(
B¨Te°Group
, 
B¨
)

239 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\MockPrinter.h

28 #i‚de‡
D_MockPröãr_H


29 
	#D_MockPröãr_H


	)

38 
	~"Pröãr.h
"

39 
	~"CµUTe°/Sim∂eSåög.h
"

40 
	~<°dlib.h
>

41 
	~<°rög
>

43 ˛as†
	cMockPröãr
: 
public
 
Pröãr


45 
public
:

46 
ex∂icô
 
	$MockPröãr
()

49 
vútuÆ
 ~
	$MockPröãr
()

51 
	}
}

53 
vútuÆ
 
	$Pröt
(c⁄° * 
s
)

55 
ßvedOuçut
.
	`≠≥nd
(
s
);

56 
	}
}

58 
vútuÆ
 
	$Pröt
(
vÆue
)

60 
Sim∂eSåög
 
buf„r
;

61 
buf„r
 = 
	`SåögFromF‹m©
("%ld", 
vÆue
);

62 
ßvedOuçut
.
	`≠≥nd
(
buf„r
.
	`asCh¨Såög
());

63 
	}
}

65 
	g°d
::
°rög
 
	$gëOuçut
() const

67  
ßvedOuçut
;

68 
	}
}

70 
	g¥iv©e
:

72 
°d
::
°rög
 
ßvedOuçut
;

74 
MockPröãr
(const MockPrinter&);

75 
	gMockPröãr
& 
	g›î©‹
=(c⁄° 
MockPröãr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\Printer.cpp

28 
	~"Pröãr.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Sim∂eSåög.h
"

31 
	~<°dio.h
>

33 
	gPröãr
::
	$Pröãr
()

35 
	}
}

37 
Pröãr
::~
	$Pröãr
()

39 
	}
}

41 
Pröãr
::
	$Pröt
(c⁄° * 
s
)

43 c⁄° * 
p
 = 
s
; *p;Ö++)

44 
	`putch¨
(*
p
);

45 
	}
}

47 
	gPröãr
::
	$Pröt
(
n
)

49 
	`Pröt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

50 
	}
}

52 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, c⁄° * 
	gs
)

54 
	gp
.
Pröt
(
s
);

55  
	gp
;

58 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, 
	gi
)

60 
	gp
.
Pröt
(
i
);

61  
	gp
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\Printer.h

28 #i‚de‡
D_Pröãr_H


29 
	#D_Pröãr_H


	)

37 ˛as†
	cPröãr


39 
	mpublic
:

40 
ex∂icô
 
Pröãr
();

41 
	mvútuÆ
 ~
Pröãr
();

43 
vútuÆ
 
Pröt
(const *);

44 
vútuÆ
 
Pröt
();

46 
	m¥iv©e
:

48 
Pröãr
(const Printer&);

49 
	mPröãr
& 
	m›î©‹
=(c⁄° 
Pröãr
&);

53 
	gPröãr
& 
	g›î©‹
<<(Printer&, const *);

54 
	gPröãr
& 
	g›î©‹
<<(Printer&, );

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\PrinterTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"Pröãr.h
"

30 
	~"MockPröãr.h
"

32 
	$TEST_GROUP
(
Pröãr
)

33 { 
Pröãr
* 
¥öãr
;

34 
MockPröãr
* 
mockPröãr
;

36 
	`£tup
()

38 
mockPröãr
 = 
√w
 
	`MockPröãr
();

39 
¥öãr
 = 
mockPröãr
;

41 
	`ã¨down
()

43 
dñëe
 
¥öãr
;

45 
	}
};

47 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

49 
¥öãr
->
	`Pröt
("hello");

50 
¥öãr
->
	`Pröt
("hello\n");

51 
	`CHECK_EQUAL
("hñlohñlo\n", 
mockPröãr
->
	`gëOuçut
());

52 
	}
}

54 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

56 
¥öãr
->
	`Pröt
(1234);

57 
	`CHECK_EQUAL
("1234", 
mockPröãr
->
	`gëOuçut
());

58 
	}
}

60 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

62 *
¥öãr
 << "n=" << 1234;

63 
	`CHECK_EQUAL
("n=1234", 
mockPröãr
->
	`gëOuçut
());

64 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\hello.c

28 
	~<°dio.h
>

29 
	~"hñlo.h
"

31 
	$¥ötHñloW‹ld
()

33 
	`PrötF‹m©ed
("Hello World!\n");

34 
	}
}

36 (*
PrötF‹m©ed
)(c⁄° *, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\hello.h

28 #i‚de‡
HELLO_H_


29 
	#HELLO_H_


	)

31 
¥ötHñloW‹ld
();

33 (*
PrötF‹m©ed
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\CodeMemoryReportFormatter.h

28 #i‚de‡
D_CodeMem‹yRï‹tF‹m©ãr_h


29 
	#D_CodeMem‹yRï‹tF‹m©ãr_h


	)

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
˛ass
 
	gCodeRï‹tögAŒoˇti⁄Node
;

34 ˛as†
	cCodeMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


36 
¥iv©e
:

37 
CodeRï‹tögAŒoˇti⁄Node
* 
codeRï‹tögLi°_
;

38 
Mem‹yLókAŒoˇt‹
* 
	möã∫ÆAŒoˇt‹_
;

40 
	mpublic
:

41 
CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
);

42 
	mvútuÆ
 ~
CodeMem‹yRï‹tF‹m©ãr
();

44 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

45 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

47 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

48 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

50 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

51 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

53 
¥iv©e
:

55 
	`addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
);

56 
CodeRï‹tögAŒoˇti⁄Node
* 
	`födNode
(* 
mem‹y
);

57 
boﬁ
 
	`v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
);

58 
	`˛órRï‹tög
();

60 
boﬁ
 
	`isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

61 
Sim∂eSåög
 
	`¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
);

63 
Sim∂eSåög
 
	`gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, 
size_t
 
size
);

64 
Sim∂eSåög
 
	`gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
);

65 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReportAllocator.h

28 #i‚de‡
D_Mem‹yRï‹tAŒoˇt‹_h


29 
	#D_Mem‹yRï‹tAŒoˇt‹_h


	)

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

33 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

35 ˛as†
	cMem‹yRï‹tAŒoˇt‹
 : 
public
 
Mem‹yLókAŒoˇt‹


37 
¥Ÿe˘ed
:

38 
Te°Resu…
* 
ªsu…_
;

39 
Mem‹yLókAŒoˇt‹
* 
	mªÆAŒoˇt‹_
;

40 
Mem‹yRï‹tF‹m©ãr
* 
	mf‹m©ãr_
;

41 
	mpublic
:

42 
Mem‹yRï‹tAŒoˇt‹
();

43 
	mvútuÆ
 ~
Mem‹yRï‹tAŒoˇt‹
();

45 
vútuÆ
 
£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

46 
vútuÆ
 
£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

47 
vútuÆ
 
£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

49 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

50 
vútuÆ
 
Mem‹yLókAŒoˇt‹
* 
gëRólAŒoˇt‹
();

52 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

53 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

55 
vútuÆ
 c⁄° * 
«me
();

56 
vútuÆ
 c⁄° * 
Æloc_«me
();

57 
vútuÆ
 c⁄° * 
‰ì_«me
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReportFormatter.h

28 #i‚de‡
D_Mem‹yRï‹tF‹m©ãr_h


29 
	#D_Mem‹yRï‹tF‹m©ãr_h


	)

31 
˛ass
 
	gTe°Ouçut
;

32 
˛ass
 
	gUã°
;

34 ˛as†
	cMem‹yRï‹tF‹m©ãr


36 
	mpublic
:

37 
vútuÆ
 ~
	$Mem‹yRï‹tF‹m©ãr
(){}

39 
vútuÆ
 
	`ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

40 
vútuÆ
 
	`ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

42 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

43 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

45 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

46 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

47 
	}
};

49 ˛as†
	cN‹mÆMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


51 
public
:

52 
N‹mÆMem‹yRï‹tF‹m©ãr
();

53 
	mvútuÆ
 ~
N‹mÆMem‹yRï‹tF‹m©ãr
();

55 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* , 
Uã°
& );

56 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

58 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

59 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

61 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

63 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReporterPlugin.h

28 #i‚de‡
D_Mem‹yRï‹ãrPlugö_h


29 
	#D_Mem‹yRï‹ãrPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

34 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

36 ˛as†
	cMem‹yRï‹ãrPlugö
 : 
public
 
Te°Plugö


38 
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr_
;

40 
Mem‹yRï‹tAŒoˇt‹
 
	mmÆlocAŒoˇt‹
;

41 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAŒoˇt‹
;

42 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAºayAŒoˇt‹
;

44 
Sim∂eSåög
 
	mcuºítTe°Group_
;

45 
	mpublic
:

46 
Mem‹yRï‹ãrPlugö
();

47 
	mvútuÆ
 ~
Mem‹yRï‹ãrPlugö
();

49 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

50 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

51 
vútuÆ
 
boﬁ
 
∑r£Argumíts
(, const **, );

53 
	m¥Ÿe˘ed
:

54 
vútuÆ
 
Mem‹yRï‹tF‹m©ãr
* 
¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
);

56 
	m¥iv©e
:

57 
de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

59 
£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

60 
ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

62 
öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockActualFunctionCall.h

28 #i‚de‡
D_MockA˘uÆFun˘i⁄CÆl_h


29 
	#D_MockA˘uÆFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

34 
˛ass
 
	gMockFaûuªRï‹ãr
;

35 
˛ass
 
	gMockFaûuª
;

36 
˛ass
 
	gMockNamedVÆue
;

38 ˛as†
	cMockA˘uÆFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


40 
public
:

41 
MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

42 
	mvútuÆ
 ~
MockA˘uÆFun˘i⁄CÆl
();

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
boﬁ
 
	$isFulfûÀd
() const;

61 
vútuÆ
 
boﬁ
 
	$hasFaûed
() const;

63 
vútuÆ
 
	`checkEx≥˘©i⁄s
();

65 
vútuÆ
 
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

66 
¥Ÿe˘ed
:

67 
vútuÆ
 
Uã°
* 
	$gëTe°
() const;

68 
vútuÆ
 
	`ˇŒHasSuc˚eded
();

69 
vútuÆ
 
	`ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

70 
vútuÆ
 
	`checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
);

72 
	eA˘uÆCÆlSèã
 {

73 
CALL_IN_PROGESS
,

74 
CALL_FAILED
,

75 
CALL_SUCCEED


77 
vútuÆ
 c⁄° * 
	`°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
);

78 
vútuÆ
 
	`£tSèã
(
A˘uÆCÆlSèã
 
°©e
);

79 
vútuÆ
 
	`checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
);

81 
¥iv©e
:

82 
MockFaûuªRï‹ãr
* 
ªp‹ãr_
;

84 
A˘uÆCÆlSèã
 
°©e_
;

86 
MockEx≥˘edFun˘i⁄sLi°
 
unfulfûÀdEx≥˘©i⁄s_
;

87 c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s_
;

88 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockExpectedFunctionCall.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄CÆl_h


29 
	#D_MockEx≥˘edFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 
Sim∂eSåög
 
SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

36 ˛as†
	cMockEx≥˘edFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


39 
public
:

40 
MockEx≥˘edFun˘i⁄CÆl
();

41 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄CÆl
();

43 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

49 
vútuÆ
 
ign‹eOthîP¨amëîs
();

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
MockNamedVÆue
 
gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

61 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîTy≥
(c⁄° Sim∂eSåög& 
«me
);

62 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîVÆueSåög
(c⁄° Sim∂eSåög& 
«me
);

64 
vútuÆ
 
boﬁ
 
hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

65 
vútuÆ
 
boﬁ
 
hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

66 
vútuÆ
 
boﬁ
 
ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

67 
vútuÆ
 
boﬁ
 
	$ªœãsToObje˘
(*
obje˘På
) const;

69 
vútuÆ
 
boﬁ
 
	`isFulfûÀd
();

70 
vútuÆ
 
boﬁ
 
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
();

71 
vútuÆ
 
boﬁ
 
	`¨eP¨amëîsFulfûÀd
();

72 
vútuÆ
 
boﬁ
 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

74 
vútuÆ
 
	`ˇŒWasMade
();

75 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
);

76 
vútuÆ
 
	`∑ømëîsWîeIgn‹ed
();

77 
vútuÆ
 
	`wasPas£dToObje˘
();

78 
vútuÆ
 
	`ª£tEx≥˘©i⁄
();

80 
vútuÆ
 
Sim∂eSåög
 
	`ˇŒToSåög
();

81 
vútuÆ
 
Sim∂eSåög
 
	`missögP¨amëîsToSåög
();

83 
¥iv©e
:

85 ˛as†
	cMockEx≥˘edFun˘i⁄P¨amëî
 : 
public
 
MockNamedVÆue


87 
public
:

88 
	`MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

89 
	`£tFulfûÀd
(
boﬁ
 
b
);

90 
boﬁ
 
	`isFulfûÀd
() const;

92 
¥iv©e
:

93 
boﬁ
 
fulfûÀd_
;

96 
MockEx≥˘edFun˘i⁄P¨amëî
* 
	`ôem
(
MockNamedVÆueLi°Node
* 
node
);

98 
boﬁ
 
ign‹eOthîP¨amëîs_
;

99 
boﬁ
 
∑ømëîsWîeIgn‹ed_
;

100 
boﬁ
 
wasCÆlMade_
;

101 
MockNamedVÆueLi°
* 
∑ømëîs_
;

102 
MockNamedVÆue
 
ªtu∫VÆue_
;

103 * 
obje˘På_
;

104 
boﬁ
 
wasPas£dToObje˘_
;

105 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockExpectedFunctionsList.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄sLi°_h


29 
	#D_MockEx≥˘edFun˘i⁄sLi°_h


	)

31 
˛ass
 
	gMockEx≥˘edFun˘i⁄CÆl
;

32 
˛ass
 
	gMockNamedVÆue
;

34 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°


37 
	mpublic
:

38 
MockEx≥˘edFun˘i⁄sLi°
();

39 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄sLi°
();

40 
vútuÆ
 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

42 
vútuÆ
 
	$size
() const;

43 
vútuÆ
 
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const;

44 
vútuÆ
 
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const;

45 
vútuÆ
 
boﬁ
 
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const;

46 
vútuÆ
 
boﬁ
 
	$hasFulfûÀdEx≥˘©i⁄s
() const;

47 
vútuÆ
 
boﬁ
 
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const;

48 
vútuÆ
 
boﬁ
 
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const;

49 
vútuÆ
 
boﬁ
 
	$isEm±y
() const;

51 
vútuÆ
 
	`addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
);

52 
vútuÆ
 
	`addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

53 
vútuÆ
 
	`addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

54 
vútuÆ
 
	`addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

56 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

57 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

58 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

60 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

61 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

63 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

65 
vútuÆ
 
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

66 
vútuÆ
 
boﬁ
 
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
();

68 
vútuÆ
 
	`ª£tEx≥˘©i⁄s
();

69 
vútuÆ
 
	`ˇŒWasMade
();

70 
vútuÆ
 
	`wasPas£dToObje˘
();

71 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
);

73 
vútuÆ
 
boﬁ
 
	$hasDu∂iˇãRëu∫VÆueF‹
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const;

74 
vútuÆ
 
MockNamedVÆue
 
	$ªtu∫VÆueF‹Fun˘i⁄
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const;

75 
vútuÆ
 
Sim∂eSåög
 
	`unfulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

76 
vútuÆ
 
Sim∂eSåög
 
	`fulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

77 
vútuÆ
 
Sim∂eSåög
 
	$missögP¨amëîsToSåög
() const;

79 
¥Ÿe˘ed
:

80 
vútuÆ
 
	`¥u√Em±yNodeFromLi°
();

81 
vútuÆ
 
Sim∂eSåög
 
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const;

83 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°Node


85 
public
:

86 
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl_
;

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt_
;

89 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl
)

90 : 
	`ex≥˘edCÆl_
(
ex≥˘edCÆl
), 
	`√xt_
(
NULL
) {};

92 
¥iv©e
:

93 
MockEx≥˘edFun˘i⁄sLi°Node
* 
hód_
;

95 
	`MockEx≥˘edFun˘i⁄sLi°
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
&);

96 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockFailure.h

29 #i‚de‡
D_MockFaûuª_h


30 
	#D_MockFaûuª_h


	)

32 
	~"CµUTe°/Te°Faûuª.h
"

34 
˛ass
 
	gMockEx≥˘edFun˘i⁄sLi°
;

35 
˛ass
 
	gMockA˘uÆFun˘i⁄CÆl
;

36 
˛ass
 
	gMockNamedVÆue
;

37 
˛ass
 
	gMockFaûuª
;

39 ˛as†
	cMockFaûuªRï‹ãr


41 
	m¥Ÿe˘ed
:

42 
boﬁ
 
¸ashOnFaûuª_
;

43 
	mpublic
:

44 
	$MockFaûuªRï‹ãr
(Ë: 
	$¸ashOnFaûuª_
(
Ál£
){};

45 
vútuÆ
 ~
	$MockFaûuªRï‹ãr
(Ë{
	}
};

47 
vútuÆ
 
ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

48 
vútuÆ
 
Uã°
* 
gëTe°ToFaû
();

50 
vútuÆ
 
	$¸ashOnFaûuª
(Ë{
¸ashOnFaûuª_
 = 
åue
; 
	}
}

53 ˛as†
	cMockFaûuª
 : 
public
 
Te°Faûuª


55 
public
:

56 
MockFaûuª
(
Uã°
* 
ã°
);

57 
	mvútuÆ
 ~
	$MockFaûuª
(){};

58 
¥Ÿe˘ed
:

59 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

60 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

61 
	}
};

63 ˛as†
	cMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


65 
public
:

66 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

67 
	mvútuÆ
 ~
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(){};

68 
	}
};

70 ˛as†
	cMockU√x≥˘edCÆlH≠≥√dFaûuª
 : 
public
 
MockFaûuª


72 
public
:

73 
MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

74 
	mvútuÆ
 ~
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(){};

75 
	}
};

77 ˛as†
	cMockU√x≥˘edP¨amëîFaûuª
 : 
public
 
MockFaûuª


79 
public
:

80 
MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

81 
	mvútuÆ
 ~
	$MockU√x≥˘edP¨amëîFaûuª
(){};

82 
	}
};

84 ˛as†
	cMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


86 
public
:

87 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

88 
	mvútuÆ
 ~
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(){};

89 
	}
};

91 ˛as†
	cMockNoWayToCom∑ªCu°omTy≥Faûuª
 : 
public
 
MockFaûuª


93 
public
:

94 
MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
);

95 
	mvútuÆ
 ~
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(){};

96 
	}
};

98 ˛as†
	cMockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 : 
public
 
MockFaûuª


100 
public
:

101 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

102 
	mvútuÆ
 ~
	$MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(){}

103 
	}
};

105 ˛as†
	cMockU√x≥˘edObje˘Faûuª
 : 
public
 
MockFaûuª


107 
public
:

108 
MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
ex≥˘ed
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

109 
	mvútuÆ
 ~
	$MockU√x≥˘edObje˘Faûuª
(){}

110 
	}
};

112 ˛as†
	cMockEx≥˘edObje˘Did¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


114 
public
:

115 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

116 
	mvútuÆ
 ~
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(){}

117 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockFunctionCall.h

28 #i‚de‡
D_MockFun˘i⁄CÆl_h


29 
	#D_MockFun˘i⁄CÆl_h


	)

35 
˛ass
 
	gMockNamedVÆueCom∑øt‹
;

36 
˛ass
 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
;

38 
	~"CµUTe°Ext/MockNamedVÆue.h
"

40 ˛as†
	cMockFun˘i⁄CÆl


42 
	mpublic
:

43 
MockFun˘i⁄CÆl
();

44 
	mvútuÆ
 ~
MockFun˘i⁄CÆl
();

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)=0;

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)=0;

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)=0;

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)=0;

52 
vútuÆ
 
	$ign‹eOthîP¨amëîs
() {};

54 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

55 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

56 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(c⁄° * 
vÆue
)=0;

57 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(* 
vÆue
)=0;

58 
vútuÆ
 
boﬁ
 
	`hasRëu∫VÆue
()=0;

59 
vútuÆ
 
MockNamedVÆue
 
	`ªtu∫VÆue
()=0;

61 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`⁄Obje˘
(* 
obje˘På
)=0;

63 
vútuÆ
 
	`£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
);

65 
¥Ÿe˘ed
:

66 
	`£tName
(c⁄° 
Sim∂eSåög
& 
«me
);

67 
Sim∂eSåög
 
	$gëName
() const;

68 
MockNamedVÆueCom∑øt‹
* 
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const;

69 
¥iv©e
:

70 
Sim∂eSåög
 
fun˘i⁄Name_
;

71 
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
com∑øt‹Rïosô‹y_
;

72 
	}
};

74 
	gMockFun˘i⁄CÆlComposôeNode
;

75 ˛as†
	cMockFun˘i⁄CÆlComposôe
 : 
public
 
MockFun˘i⁄CÆl


77 
public
:

78 
MockFun˘i⁄CÆlComposôe
();

79 
	mvútuÆ
 ~
MockFun˘i⁄CÆlComposôe
();

81 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
&);

82 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

83 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

84 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, const *);

85 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *);

86 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, const SimpleString&, *);

87 
vútuÆ
 
ign‹eOthîP¨amëîs
();

89 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

90 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

91 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(const *);

92 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(*);

93 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

94 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

96 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* );

98 
vútuÆ
 
add
(
MockFun˘i⁄CÆl
& 
ˇŒ
);

99 
vútuÆ
 
˛ór
();

100 
	m¥iv©e
:

101 
MockFun˘i⁄CÆlComposôeNode
* 
hód_
;

104 ˛as†
	cMockIgn‹edCÆl
 : 
public
 
MockFun˘i⁄CÆl


106 
public
:

107 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhName
(c⁄° 
Sim∂eSåög
&Ë{  *
this
;}

108 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

109 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

110 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, c⁄° *Ë{  *
this
; 
	}
}

111 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *Ë{  *
this
; 
	}
}

112 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, c⁄° Sim∂eSåög&, *Ë{  *
this
; 
	}
}

114 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
; 
	}
}

115 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
;
	}
}

116 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(c⁄° *Ë{  *
this
; 
	}
}

117 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(*Ë{  *
this
; 
	}
}

118 
vútuÆ
 
boﬁ
 
	$hasRëu∫VÆue
(Ë{  
Ál£
; 
	}
}

119 
vútuÆ
 
MockNamedVÆue
 
	$ªtu∫VÆue
(Ë{  
	`MockNamedVÆue
(""); 
	}
}

121 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$⁄Obje˘
(* ) {  *
this
; 
	}
}

123 
	gMockFun˘i⁄CÆl
& 
	$ö°™˚
(Ë{ 
MockIgn‹edCÆl
 
ˇŒ
;  cÆl; 
	}
};

126 ˛as†
	cMockFun˘i⁄CÆlTø˚
 : 
public
 
MockFun˘i⁄CÆl


128 
public
:

129 
MockFun˘i⁄CÆlTø˚
();

130 
	mvútuÆ
 ~
MockFun˘i⁄CÆlTø˚
();

132 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

133 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

134 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

135 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

136 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

137 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

138 
vútuÆ
 
ign‹eOthîP¨amëîs
();

140 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

141 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

142 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

143 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

144 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

145 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

147 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

149 c⁄° * 
gëTø˚Ouçut
();

150 
˛ór
();

151 
	mMockFun˘i⁄CÆlTø˚
& 
ö°™˚
();

153 
	m¥iv©e
:

154 
Sim∂eSåög
 
åa˚Buf„r_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockNamedValue.h

28 #i‚de‡
D_MockNamedVÆue_h


29 
	#D_MockNamedVÆue_h


	)

35 ˛as†
	cMockNamedVÆueCom∑øt‹


37 
	mpublic
:

38 
	$MockNamedVÆueCom∑øt‹
() {};

39 
vútuÆ
 ~
	$MockNamedVÆueCom∑øt‹
(Ë{
	}
};

41 
vútuÆ
 
boﬁ
 
isEquÆ
(* 
obje˘1
, * 
obje˘2
)=0;

42 
vútuÆ
 
Sim∂eSåög
 
vÆueToSåög
(* 
obje˘
)=0;

45 ˛as†
	cMockFun˘i⁄Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
	$boﬁ
 (*
	tisEquÆFun˘i⁄
)(*, *);

49 
	$Sim∂eSåög
 (*
	tvÆueToSåögFun˘i⁄
)(*);

51 
	$MockFun˘i⁄Com∑øt‹
(
isEquÆFun˘i⁄
 
equÆ
, 
vÆueToSåögFun˘i⁄
 
vÆToSåög
)

52 : 
	`equÆ_
(
equÆ
), 
	$vÆueToSåög_
(
vÆToSåög
) {}

53 
vútuÆ
 ~
	$MockFun˘i⁄Com∑øt‹
(){
	}
};

55 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
){  
	`equÆ_
(obje˘1, obje˘2); 
	}
}

56 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
Ë{  
	`vÆueToSåög_
(obje˘); 
	}
}

57 
	g¥iv©e
:

58 
isEquÆFun˘i⁄
 
equÆ_
;

59 
vÆueToSåögFun˘i⁄
 
	gvÆueToSåög_
;

69 ˛as†
	cMockNamedVÆue


71 
	mpublic
:

72 
MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
);

73 
	mvútuÆ
 ~
MockNamedVÆue
();

75 
vútuÆ
 
£tVÆue
(
vÆue
);

76 
vútuÆ
 
£tVÆue
(
vÆue
);

77 
vútuÆ
 
£tVÆue
(* 
vÆue
);

78 
vútuÆ
 
£tVÆue
(c⁄° * 
vÆue
);

79 
vútuÆ
 
£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
);

81 
vútuÆ
 
£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
);

82 
vútuÆ
 
£tName
(c⁄° * 
«me
);

84 
vútuÆ
 
boﬁ
 
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const;

86 
vútuÆ
 
Sim∂eSåög
 
	$toSåög
() const;

88 
vútuÆ
 
Sim∂eSåög
 
	$gëName
() const;

89 
vútuÆ
 
Sim∂eSåög
 
	$gëTy≥
() const;

91 
vútuÆ
 
	$gëI¡VÆue
() const;

92 
vútuÆ
 
	$gëDoubÀVÆue
() const;

93 
vútuÆ
 c⁄° * 
	$gëSåögVÆue
() const;

94 
vútuÆ
 * 
	$gëPoöãrVÆue
() const;

95 
vútuÆ
 * 
	$gëObje˘Poöãr
() const;

96 
¥iv©e
:

97 
Sim∂eSåög
 
«me_
;

98 
Sim∂eSåög
 
ty≥_
;

100 
ötVÆue_
;

101 
doubÀVÆue_
;

102 c⁄° * 
°rögVÆue_
;

103 * 
poöãrVÆue_
;

104 * 
obje˘PoöãrVÆue_
;

105 } 
vÆue_
;

106 
MockNamedVÆueCom∑øt‹
* 
com∑øt‹_
;

107 
	}
};

109 ˛as†
	cMockNamedVÆueLi°Node


111 
	mpublic
:

112 
MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
);

114 
Sim∂eSåög
 
	$gëName
() const;

115 
Sim∂eSåög
 
	$gëTy≥
() const;

117 
MockNamedVÆueLi°Node
* 
	`√xt
();

118 
MockNamedVÆue
* 
	`ôem
();

120 
	`de°roy
();

121 
	`£tNext
(
MockNamedVÆueLi°Node
* 
node
);

122 
¥iv©e
:

123 
MockNamedVÆue
* 
d©a_
;

124 
MockNamedVÆueLi°Node
* 
√xt_
;

127 ˛as†
	cMockNamedVÆueLi°


129 
public
:

130 
	`MockNamedVÆueLi°
();

132 
MockNamedVÆueLi°Node
* 
	`begö
();

134 
	`add
(
MockNamedVÆue
* 
√wVÆue
);

135 
	`˛ór
();

137 
MockNamedVÆue
* 
	`gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
);

139 
¥iv©e
:

140 
MockNamedVÆueLi°Node
* 
hód_
;

148 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
;

149 ˛as†
	cMockNamedVÆueCom∑øt‹Rïosô‹y


151 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
hód_
;

152 
public
:

153 
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

154 
vútuÆ
 ~
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

156 
vútuÆ
 
	`ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

157 
vútuÆ
 
	`ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

158 
vútuÆ
 
MockNamedVÆueCom∑øt‹
* 
	`gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
);

160 
	`˛ór
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupport.h

28 #i‚de‡
D_MockSuµ‹t_h


29 
	#D_MockSuµ‹t_h


	)

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

33 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

34 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

36 
˛ass
 
	gUã°
;

37 
˛ass
 
	gMockSuµ‹t
;

40 
	gMockSuµ‹t
& 
mock
(c⁄° 
Sim∂eSåög
& 
mockName
 = "");

42 ˛as†
	cMockSuµ‹t


44 
	mpublic
:

45 
MockSuµ‹t
();

46 
	mvútuÆ
 ~
MockSuµ‹t
();

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

51 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

52 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

53 
vútuÆ
 
ötRëu∫VÆue
();

54 
vútuÆ
 c⁄° * 
°rögRëu∫VÆue
();

55 
vútuÆ
 
doubÀRëu∫VÆue
();

56 
vútuÆ
 * 
poöãrRëu∫VÆue
();

58 
boﬁ
 
hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

60 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

61 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

62 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

63 
£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
);

64 
MockNamedVÆue
 
gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

66 
MockSuµ‹t
* 
gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
);

68 c⁄° * 
gëTø˚Ouçut
();

74 
vútuÆ
 
dißbÀ
();

75 
vútuÆ
 
íabÀ
();

76 
vútuÆ
 
åacög
(
boﬁ
 
íabÀd
);

77 
vútuÆ
 
ign‹eOthîCÆls
();

79 
vútuÆ
 
checkEx≥˘©i⁄s
();

80 
vútuÆ
 
boﬁ
 
ex≥˘edCÆlsLe·
();

82 
vútuÆ
 
˛ór
();

83 
vútuÆ
 
£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

84 
vútuÆ
 
¸ashOnFaûuª
();

86 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

87 
vútuÆ
 
ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

88 
vútuÆ
 
ªmoveAŒCom∑øt‹s
();

90 
	m¥Ÿe˘ed
:

91 
vútuÆ
 
MockA˘uÆFun˘i⁄CÆl
 *
¸óãA˘uÆFun˘i⁄CÆl
();

92 
	m¥iv©e
:

94 
MockFaûuªRï‹ãr
 *
ªp‹ãr_
;

95 
MockFaûuªRï‹ãr
 
	mdeÁu…Rï‹ãr_
;

96 
MockEx≥˘edFun˘i⁄sLi°
 
	mex≥˘©i⁄s_
;

97 
boﬁ
 
	mign‹eOthîCÆls_
;

98 
boﬁ
 
	míabÀd_
;

99 
MockA˘uÆFun˘i⁄CÆl
 *
	mœ°A˘uÆFun˘i⁄CÆl_
;

100 
MockFun˘i⁄CÆlComposôe
 
	mcomposôeCÆls_
;

101 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
	mcom∑øt‹Rïosô‹y_
;

102 
MockNamedVÆueLi°
 
	md©a_
;

104 
boﬁ
 
	måacög_
;

106 
checkEx≥˘©i⁄sOfLa°CÆl
();

107 
boﬁ
 
wasLa°CÆlFulfûÀd
();

108 
ÁûTe°WôhF‹U√x≥˘edCÆls
();

110 
MockNamedVÆue
* 
¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

112 
MockSuµ‹t
* 
gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupportPlugin.h

28 #i‚de‡
D_MockSuµ‹tPlugö_h


29 
	#D_MockSuµ‹tPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 ˛as†
	cMockSuµ‹tPlugö
 : 
public
 
Te°Plugö


36 
public
:

37 
MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
 = "MockSupportPLugin");

38 
	mvútuÆ
 ~
MockSuµ‹tPlugö
();

40 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

41 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

43 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

44 
	m¥iv©e
:

45 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupport_c.h

28 #i‚de‡
D_MockSuµ‹t_c_h


29 
	#D_MockSuµ‹t_c_h


	)

32 
	mMOCKVALUETYPE_INTEGER
,

33 
	mMOCKVALUETYPE_DOUBLE
,

34 
	mMOCKVALUETYPE_STRING
,

35 
	mMOCKVALUETYPE_POINTER
,

36 
	mMOCKVALUETYPE_OBJECT


37 } 
	tMockVÆueTy≥_c
;

39 
	sSMockVÆue_c


41 
MockVÆueTy≥_c
 
	mty≥
;

43 
	mötVÆue
;

44 
	mdoubÀVÆue
;

45 c⁄° * 
	m°rögVÆue
;

46 * 
	mpoöãrVÆue
;

47 * 
	mobje˘VÆue
;

48 } 
	mvÆue
;

49 } 
	tMockVÆue_c
;

51 
SMockFun˘i⁄CÆl_c
 
	tMockFun˘i⁄CÆl_c
;

52 
	sSMockFun˘i⁄CÆl_c


54 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhI¡P¨am©îs
)(c⁄° * 
	m«me
, 
	mvÆue
);

55 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhDoubÀP¨amëîs
)(c⁄° * 
	m«me
, 
	mvÆue
);

56 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhSåögP¨amëîs
)(c⁄° * 
	m«me
, c⁄° * 
	mvÆue
);

57 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhPoöãrP¨amëîs
)(c⁄° * 
	m«me
, * 
	mvÆue
);

58 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhP¨amëîOfTy≥
)(c⁄° * 
	mty≥
, c⁄° * 
	m«me
, * 
	mvÆue
);

60 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫I¡VÆue
)(
	mvÆue
);

61 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫DoubÀVÆue
)(
	mvÆue
);

62 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫SåögVÆue
)(c⁄° * 
	mvÆue
);

63 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫PoöãrVÆue
)(* 
	mvÆue
);

65 
MockVÆue_c
 (*
ªtu∫VÆue
)();

69 (*
	tMockTy≥EquÆFun˘i⁄_c
)(* 
	tobje˘1
, * 
	tobje˘2
);

70 * (*
	tMockTy≥VÆueToSåögFun˘i⁄_c
)(* 
	tobje˘1
);

72 
SMockSuµ‹t_c
 
	tMockSuµ‹t_c
;

73 
	sSMockSuµ‹t_c


75 
MockFun˘i⁄CÆl_c
* (*
ex≥˘O√CÆl
)(c⁄° * 
«me
);

76 
MockFun˘i⁄CÆl_c
* (*
a˘uÆCÆl
)(c⁄° * 
«me
);

77 
	`MockVÆue_c
 (*
ªtu∫VÆue
)();

79 (*
£tI¡D©a
Ë(c⁄° * 
«me
, 
vÆue
);

80 (*
£tDoubÀD©a
Ë(c⁄° * 
«me
, 
vÆue
);

81 (*
£tSåögD©a
Ë(c⁄° * 
«me
, c⁄° * 
vÆue
);

82 (*
£tPoöãrD©a
Ë(c⁄° * 
«me
, * 
vÆue
);

83 (*
£tD©aObje˘
Ë(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

84 
	`MockVÆue_c
 (*
gëD©a
)(c⁄° * 
«me
);

86 (*
checkEx≥˘©i⁄s
)();

87 (*
ex≥˘edCÆlsLe·
)();

89 (*
˛ór
)();

91 (*
ö°ÆlCom∑øt‹
Ë(c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
);

92 (*
ªmoveAŒCom∑øt‹s
)();

96 
MockSuµ‹t_c
* 
	`mock_c
();

97 
MockSuµ‹t_c
* 
	`mock_sc›e_c
(c⁄° * 
sc›e
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\OrderedTest.h

28 #i‚de‡
D_OrdîedTe°_h


29 
	#D_OrdîedTe°_h


	)

31 ˛as†
	cOrdîedTe°
 : 
public
 
Uã°


33 
public
:

34 
OrdîedTe°
();

35 
	mvútuÆ
 ~
OrdîedTe°
();

37 
vútuÆ
 
OrdîedTe°
* 
addOrdîedTe°
(OrdîedTe°* 
ã°
);

38 
vútuÆ
 
OrdîedTe°
* 
gëNextOrdîedTe°
();

40 
gëLevñ
();

41 
£tLevñ
(
Àvñ
);

43 
addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
);

44 
OrdîedTe°
* 
gëOrdîedTe°Hód
();

45 
boﬁ
 
fú°OrdîedTe°
();

47 
£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
);

48 
	m¥iv©e
:

49 
OrdîedTe°
* 
_‹dîedTe°sHód
;

50 
OrdîedTe°
* 
	m_√xtOrdîedTe°
;

52 
	m_Àvñ
;

56 ˛as†
	cOrdîedTe°In°ÆÀr


58 
	mpublic
:

59 
ex∂icô
 
OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Àvñ
);

60 
	mvútuÆ
 ~
OrdîedTe°In°ÆÀr
();

62 
	m¥iv©e
:

63 
addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
);

64 
addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
OrdîedTe°
* 
ã°
);

68 
	#TEST_ORDERED
(
ã°Group
, 
ã°Name
, 
ã°Levñ
) \

69 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

70 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

71 
	`ã°Body
(); } \

72 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

73 
OrdîedTe°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
, 
ã°Levñ
); \

74 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\CommandLineArguments.h

1 #i‚de‡
D_Comm™dLöeArgumíts_H


2 
	#D_Comm™dLöeArgumíts_H


	)

9 
	~"Sim∂eSåög.h
"

10 
	~"Te°Ouçut.h
"

12 
˛ass
 
	gTe°Plugö
;

14 ˛as†
	cComm™dLöeArgumíts


16 
	mpublic
:

17 
ex∂icô
 
Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
);

18 
	mvútuÆ
 ~
Comm™dLöeArgumíts
();

20 
boﬁ
 
∑r£
(
Te°Plugö
* 
∂ugö
);

21 
boﬁ
 
	$isVîbo£
() const;

22 
	$gëRïótCou¡
() const;

23 
Sim∂eSåög
 
	$gëGroupFûãr
() const;

24 
Sim∂eSåög
 
	$gëNameFûãr
() const;

25 
boﬁ
 
	$isJUnôOuçut
() const;

26 
boﬁ
 
	$isE˛ù£Ouçut
() const;

27 c⁄° * 
	$ußge
() const;

29 
¥iv©e
:

31 
	eOuçutTy≥


33 
OUTPUT_ECLIPSE
, 
OUTPUT_JUNIT


35 
ac_
;

36 c⁄° ** 
av_
;

38 
boﬁ
 
vîbo£_
;

39 
ª≥©_
;

40 
Sim∂eSåög
 
groupFûãr_
;

41 
Sim∂eSåög
 
«meFûãr_
;

42 
OuçutTy≥
 
ouçutTy≥_
;

44 
Sim∂eSåög
 
	`gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
);

45 
	`SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
ödex
);

46 
	`SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

47 
	`SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

48 
boﬁ
 
	`SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
ödex
);

50 
	`Comm™dLöeArgumíts
(c⁄° 
Comm™dLöeArgumíts
&);

51 
Comm™dLöeArgumíts
& 
›î©‹
=(const CommandLineArguments&);

53 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\CommandLineTestRunner.h

28 #i‚de‡
D_Comm™dLöeTe°Ru¬î_H


29 
	#D_Comm™dLöeTe°Ru¬î_H


	)

31 
	~"Te°H¨√ss.h
"

32 
	~"Te°Ouçut.h
"

33 
	~"Comm™dLöeArgumíts.h
"

41 
˛ass
 
	gJUnôTe°Ouçut
;

43 
	#DEF_PLUGIN_MEM_LEAK
 "Mem‹yLókPlugö"

	)

44 
	#DEF_PLUGIN_SET_POINTER
 "SëPoöãrPlugö"

	)

46 ˛as†
	cComm™dLöeTe°Ru¬î


48 
	mpublic
:

49 
	eOuçutTy≥


51 
OUTPUT_NORMAL
, 
	mOUTPUT_JUNIT


54 
RunAŒTe°s
(
ac
, c⁄° ** 
av
);

55 
RunAŒTe°s
(
ac
, ** 
av
);

56 
Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
*);

58 
	gvútuÆ
 ~
Comm™dLöeTe°Ru¬î
();

59 
runAŒTe°sMaö
();

61 
	g¥iv©e
:

62 
Te°Ouçut
* 
ouçut_
;

63 
JUnôTe°Ouçut
* 
	gjUnôOuçut_
;

64 
Comm™dLöeArgumíts
* 
	g¨gumíts_
;

66 
boﬁ
 
∑r£Argumíts
(
Te°Plugö
*);

67 
runAŒTe°s
();

68 
öôülizeTe°Run
();

69 
boﬁ
 
isVîbo£
();

70 
gëRïótCou¡
();

71 
Sim∂eSåög
 
gëGroupFûãr
();

72 
Sim∂eSåög
 
gëNameFûãr
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\JUnitTestOutput.h

28 #i‚de‡
D_JUnôTe°Ouçut_h


29 
	#D_JUnôTe°Ouçut_h


	)

31 
	~"Te°Ouçut.h
"

32 
	~"Sim∂eSåög.h
"

34 
	gJUnôTe°OuçutIm∂
;

35 
	gJUnôTe°Ca£Resu…Node
;

37 ˛as†
	cJUnôTe°Ouçut
: 
public
 
Te°Ouçut


39 
public
:

40 
JUnôTe°Ouçut
();

41 
	mvútuÆ
 ~
JUnôTe°Ouçut
();

43 
vútuÆ
 
¥ötTe°sSèπed
();

44 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

45 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

46 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

47 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

48 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

50 
vútuÆ
 
vîbo£
();

51 
vútuÆ
 
¥öt
(const *);

52 
vútuÆ
 
¥öt
();

53 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

54 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

56 
vútuÆ
 
Êush
();

58 
	m¥Ÿe˘ed
:

60 
JUnôTe°OuçutIm∂
* 
im∂_
;

61 
ª£tTe°GroupResu…
();

63 
vútuÆ
 
›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
);

64 
vútuÆ
 
wrôeTe°GroupToFûe
();

65 
vútuÆ
 
wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
);

66 
vútuÆ
 
˛o£Fûe
();

68 
vútuÆ
 
wrôeXmlHódî
();

69 
vútuÆ
 
wrôeTe°SuôeSummîy
();

70 
vútuÆ
 
wrôePr›îtõs
();

71 
vútuÆ
 
wrôeTe°Ca£s
();

72 
vútuÆ
 
wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
);

73 
vútuÆ
 
wrôeFûeEndög
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakAllocator.h

1 #i‚de‡
D_Mem‹yLókAŒoˇt‹_h


2 
	#D_Mem‹yLókAŒoˇt‹_h


	)

4 
	gMem‹yLókNode
;

6 ˛as†
	cMem‹yLókAŒoˇt‹


8 
	mpublic
:

9 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)=0;

10 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

12 
vútuÆ
 c⁄° * 
«me
()=0;

13 
vútuÆ
 c⁄° * 
Æloc_«me
()=0;

14 
vútuÆ
 c⁄° * 
‰ì_«me
()=0;

16 
vútuÆ
 
boﬁ
 
isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

17 
	mvútuÆ
 ~
	$Mem‹yLókAŒoˇt‹
()

21 
vútuÆ
 
boﬁ
 
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

22 
vútuÆ
 * 
	`ÆlocMem‹yLókNode
(
size_t
 
size
);

23 
vútuÆ
 
	`‰ìMem‹yLókNode
(* 
mem‹y
);

25 
	`£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

26 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAŒoˇt‹
();

27 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

29 
	`£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

30 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAºayAŒoˇt‹
();

31 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

33 
	`£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

34 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítMÆlocAŒoˇt‹
();

35 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

37 
¥iv©e
:

38 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAºayAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
cuºítMÆlocAŒoˇt‹
;

41 
	}
};

43 ˛as†
	cSènd¨dMÆlocAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


45 
public
:

46 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

47 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

49 c⁄° * 
«me
();

50 c⁄° * 
Æloc_«me
();

51 c⁄° * 
‰ì_«me
();

53 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

55 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

58 ˛as†
	cSènd¨dNewAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


60 
public
:

61 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

64 c⁄° * 
«me
();

65 c⁄° * 
Æloc_«me
();

66 c⁄° * 
‰ì_«me
();

68 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

71 ˛as†
	cSènd¨dNewAºayAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


73 
public
:

74 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

75 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

77 c⁄° * 
«me
();

78 c⁄° * 
Æloc_«me
();

79 c⁄° * 
‰ì_«me
();

81 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

84 ˛as†
	cNuŒUnknownAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


86 
public
:

87 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

88 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

90 c⁄° * 
«me
();

91 c⁄° * 
Æloc_«me
();

92 c⁄° * 
‰ì_«me
();

94 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetector.h

1 #i‚de‡
D_Mem‹yLókDëe˘‹_h


2 
	#D_Mem‹yLókDëe˘‹_h


	)

4 
	#MEM_LEAK_NONE
 "Nÿmem‹yÜók†wîêdëe˘ed."

	)

5 
	#MEM_LEAK_HEADER
 "Mem‹yÜók(sËfound.\n"

	)

6 
	#MEM_LEAK_LEAK
 "Lók size: %d AŒoˇãdát: %†™dÜöe: %d. Ty≥: \"%s\" C⁄ã¡: \"%.15s\"\n"

	)

7 
	#MEM_LEAK_TOO_MUCH
 "\√t¯ë¯ë¯ëc. !!!! Toÿmuch mem‹yÜók†tÿªp‹t. Baûög out\n"

	)

8 
	#MEM_LEAK_FOOTER
 "TŸÆÇumbî o‡Àaks: "

	)

9 
	#MEM_LEAK_ADDITION_MALLOC_WARNING
 "NOTE:\n" \

12 "\tI‡thi†i†thêˇ£, check whëhî you∏mÆloc/‰ìÑïœ˚mít†¨êw‹kög (#deföêmÆlo¯˝puã°_mÆlo¯ëc).\n"

	)

14 
	#MEM_LEAK_NORMAL_FOOTER_SIZE
 ((
MEM_LEAK_FOOTER
Ë+ 10 + (
MEM_LEAK_TOO_MUCH
)Ë

	)

15 
	#MEM_LEAK_NORMAL_MALLOC_FOOTER_SIZE
 (
MEM_LEAK_NORMAL_FOOTER_SIZE
 + (
MEM_LEAK_ADDITION_MALLOC_WARNING
))

	)

18 
	#MEM_LEAK_ALLOC_DEALLOC_MISMATCH
 "AŒoˇti⁄/dóŒoˇti⁄Åy≥ mism©ch\n"

	)

19 
	#MEM_LEAK_MEMORY_CORRUPTION
 "Mem‹y c‹ru±i⁄ (wrôã¿ouào‡bounds?)\n"

	)

20 
	#MEM_LEAK_ALLOC_LOCATION
 "áŒoˇãdáàfûe: %†löe: %d size: %dÅy≥: %s\n"

	)

21 
	#MEM_LEAK_DEALLOC_LOCATION
 " dóŒoˇãdáàfûe: %†löe: %dÅy≥: %s\n"

	)

22 
	#MEM_LEAK_DEALLOC_NON_ALLOCATED
 "DóŒoˇtögÇ⁄-Æloˇãd mem‹y\n"

	)

24 
	eMemLókPîiod


26 
	mmem_Àak_≥riod_Æl
,

27 
	mmem_Àak_≥riod_dißbÀd
,

28 
	mmem_Àak_≥riod_íabÀd
,

29 
	mmem_Àak_≥riod_checkög


32 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

34 
	~<°dlib.h
>

36 ˛as†
	cMem‹yLókFaûuª


38 
	mpublic
:

39 
vútuÆ
 ~
	$Mem‹yLókFaûuª
()

43 
vútuÆ
 
	`Áû
(* 
Áû_°rög
)=0;

44 
	}
};

46 
	sSim∂eSåögBuf„r


50 
	mSIMPLE_STRING_BUFFER_LEN
 = 4096

53 
Sim∂eSåögBuf„r
();

54 
˛ór
();

55 
add
(c⁄° * 
f‹m©
, ...);

56 * 
toSåög
();

58 
£tWrôeLimô
(
wrôe_limô
);

59 
ª£tWrôeLimô
();

60 
boﬁ
 
ªachedItsC≠acôy
();

61 
	m¥iv©e
:

62 
buf„r_
[
SIMPLE_STRING_BUFFER_LEN
];

63 
	mposôi⁄s_fûÀd_
;

64 
	mwrôe_limô_
;

67 
	sMem‹yLókDëe˘‹Node


69 
Mem‹yLókDëe˘‹Node
() :

70 
size_
(0), 
√xt_
(0)

74 
öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
);

76 
size_t
 
	msize_
;

77 * 
	mmem‹y_
;

78 c⁄° * 
	mfûe_
;

79 
	mlöe_
;

80 
Mem‹yLókAŒoˇt‹
* 
	mÆloˇt‹_
;

81 
MemLókPîiod
 
	m≥riod_
;

83 
	m¥iv©e
:

84 
‰õnd
 
Mem‹yLókDëe˘‹Li°
;

85 
Mem‹yLókDëe˘‹Node
* 
	m√xt_
;

88 
	sMem‹yLókDëe˘‹Li°


90 
Mem‹yLókDëe˘‹Li°
() :

91 
hód_
(0)

94 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

95 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

97 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

98 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
node
,

99 
MemLókPîiod
 
≥riod
);

100 
Mem‹yLókDëe˘‹Node
* 
gëLókFrom
(Mem‹yLókDëe˘‹Node* 
node
,

101 
MemLókPîiod
 
≥riod
);

103 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

104 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

105 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

107 
boﬁ
 
isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
);

109 
	m¥iv©e
:

110 
Mem‹yLókDëe˘‹Node
* 
hód_
;

113 
	sMem‹yLókDëe˘‹TabÀ


115 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

117 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

118 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

120 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

121 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

123 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

124 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
Àak
,

125 
MemLókPîiod
 
≥riod
);

127 
	m¥iv©e
:

128 
hash
(* 
mem‹y
);

132 
	mhash_¥ime
 = 
MEMORY_LEAK_HASH_TABLE_SIZE


134 
Mem‹yLókDëe˘‹Li°
 
	mèbÀ_
[
hash_¥ime
];

137 ˛as†
	cMem‹yLókDëe˘‹


139 
	mpublic
:

140 
Mem‹yLókDëe˘‹
();

141 ~
	$Mem‹yLókDëe˘‹
()

145 
	`öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
);

147 
	`íabÀ
();

148 
	`dißbÀ
();

150 
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

151 
	`íabÀAŒoˇti⁄Ty≥Checkög
();

153 
	`°¨tCheckög
();

154 
	`°›Checkög
();

156 c⁄° * 
	`ªp‹t
(
MemLókPîiod
 
≥riod
);

157 
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

158 
	`tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
);

159 
	`˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

161 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
);

162 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
,

163 c⁄° * 
fûe
, 
löe
);

164 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
);

165 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

166 * 
	`ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

168 
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
);

171 
mem‹y_c‹ru±i⁄_buf„r_size
 = 3

172 
	}
};

173 
	g¥iv©e
:

174 
Mem‹yLókFaûuª
* 
ªp‹ãr_
;

175 
MemLókPîiod
 
	gcuºít_≥riod_
;

176 
Sim∂eSåögBuf„r
 
	gouçut_buf„r_
;

177 
Mem‹yLókDëe˘‹TabÀ
 
	gmem‹yTabÀ_
;

178 
boﬁ
 
	gdoAŒoˇti⁄Ty≥Checkög_
;

180 
boﬁ
 
vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

181 
boﬁ
 
m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
);

183 
°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
);

184 
C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
);

185 
ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
,

186 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

187 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

188 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
);

190 
size_t
 
sizeOfMem‹yWôhC‹ru±i⁄Info
(size_à
size
);

191 
Mem‹yLókDëe˘‹Node
* 
gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
size
);

193 * 
ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

195 
addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

196 
checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetectorMallocMacros.h

18 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


19 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


20 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

22 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

26 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


29 #i‚de‡
CPPUTEST_USE_MALLOC_MACROS


31 
	~<°dlib.h
>

33 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

34 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

51 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

52 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

53 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

54 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

56 
	#CPPUTEST_USE_MALLOC_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetectorNewMacros.h

28 
	~<°dlib.h
>

30 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


31 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


32 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

34 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

38 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


40 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


41 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


42 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

44 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

49 #i‚de‡
CPPUTEST_USE_NEW_MACROS


51 #i‡
CPPUTEST_USE_STD_CPP_LIB


52 
	~<√w
>

54 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

55 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

61 * 
›î©‹
 
	`√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

69 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

71 #i‚de‡
CPPUTEST_USE_NEW_MACROS


74 
	~"Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

75 #i‚de‡
CPPUTEST_USE_NEW_MACROS


76 
	}
}

80 
	#CPPUTEST_USE_NEW_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakWarningPlugin.h

28 #i‚de‡
D_Mem‹yLókW¨nögPlugö_h


29 
	#D_Mem‹yLókW¨nögPlugö_h


	)

31 
	~"Te°Plugö.h
"

42 
	#IGNORE_ALL_LEAKS_IN_TEST
(Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ign‹eAŒLóksInTe°
();

	)

43 
	#EXPECT_N_LEAKS
(
n
Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ex≥˘LóksInTe°
“);

	)

46 
	~"Te°H¨√ss_c.h
"

49 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


51 #unde‡
√w


53 #i‡
CPPUTEST_USE_STD_CPP_LIB


55 
	~<√w
>

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

58 
›î©‹
 
	$dñëe
(* 
mem
Ë
	`throw
();

59 
›î©‹
 
dñëe
[](* 
mem
Ë
	`throw
();

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

65 
›î©‹
 
	`dñëe
(* 
mem
);

66 
›î©‹
 
dñëe
[](* 
mem
);

70 #i‡
CPPUTEST_USE_NEW_MACROS


71 
	~"Mem‹yLókDëe˘‹NewMa¸os.h
"

76 
˛ass
 
Mem‹yLókDëe˘‹
;

78 ˛as†
	cMem‹yLókW¨nögPlugö
: 
public
 
Te°Plugö


80 
public
:

81 
	`Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

82 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
 = 0);

83 
vútuÆ
 ~
	`Mem‹yLókW¨nögPlugö
();

85 
vútuÆ
 
	`¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

86 
vútuÆ
 
	`po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

88 
vútuÆ
 c⁄° * 
	`FöÆRï‹t
(
toBeDñëedLóks
 = 0);

90 
	`ign‹eAŒLóksInTe°
();

91 
	`ex≥˘LóksInTe°
(
n
);

93 
Mem‹yLókDëe˘‹
* 
	`gëMem‹yLókDëe˘‹
();

94 
Mem‹yLókW¨nögPlugö
* 
	`gëFú°Plugö
();

96 
Mem‹yLókDëe˘‹
* 
	`gëGlobÆDëe˘‹
();

97 
¥iv©e
:

98 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹_
;

99 
boﬁ
 
ign‹eAŒW¨nögs_
;

100 
ex≥˘edLóks_
;

101 
ÁûuªCou¡_
;

103 
Mem‹yLókW¨nögPlugö
* 
fú°Plugö_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\PlatformSpecificFunctions.h

28 #i‚de‡
PLATFORMSPECIFICFUNCTIONS_H_


29 
	#PLATFORMSPECIFICFUNCTIONS_H_


	)

46 
GëPœtf‹mS≥cificTimeInMûlis
();

47 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
)());

49 c⁄° * 
GëPœtf‹mS≥cificTimeSåög
();

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
)());

53 
Pœtf‹mS≥cificAtoI
(c⁄° *
°r
);

54 
size_t
 
Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
);

55 * 
Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
);

56 * 
Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
);

57 * 
Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

58 
Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
);

59 
Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

60 * 
Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
);

61 
Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
,

62 
va_li°
 
va_¨gs_li°
);

63 
Pœtf‹mS≥cificToLowî
(
c
);

66 
Pœtf‹mS≥cificFabs
(
d
);

67 
Pœtf‹mS≥cificIsN™
(
d
);

68 
Pœtf‹mS≥cificAtExô
((*
func
)());

71 * 
	tPœtf‹mS≥cificFûe
;

73 
Pœtf‹mS≥cificFûe
 
Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
,

74 c⁄° * 
Êag
);

75 
Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
);

76 
Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
);

78 
Pœtf‹mS≥cificPutch¨
(
c
);

79 
Pœtf‹mS≥cificFlush
();

82 * 
Pœtf‹mS≥cificMÆloc
(
size_t
 
size
);

83 * 
Pœtf‹mS≥cificRóŒoc
(* 
mem‹y
, 
size_t
 
size
);

84 
Pœtf‹mS≥cificFªe
(* 
mem‹y
);

85 * 
Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

86 * 
Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\SimpleString.h

38 #i‚de‡
D_Sim∂eSåög_h


39 
	#D_Sim∂eSåög_h


	)

41 
	~<°d¨g.h
>

42 
	~<°ddef.h
>

44 
˛ass
 
	gSim∂eSåögCﬁÀ˘i⁄
;

45 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

47 ˛as†
	cSim∂eSåög


49 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

50 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

52 
	mpublic
:

53 
Sim∂eSåög
(c⁄° *
vÆue
 = "");

54 
Sim∂eSåög
(c⁄° *
vÆue
, 
size_t
 
ª≥©Cou¡
);

55 
Sim∂eSåög
(c⁄° Sim∂eSåög& 
Ÿhî
);

56 ~
Sim∂eSåög
();

58 
	mSim∂eSåög
& 
	m›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
);

59 
Sim∂eSåög
 
	m›î©‹
+(c⁄° 
	mSim∂eSåög
&);

60 
	mSim∂eSåög
& 
	m›î©‹
+=(c⁄° 
Sim∂eSåög
&);

61 
	mSim∂eSåög
& 
	m›î©‹
+=(const *);

63 
boﬁ
 
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

64 
boﬁ
 
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

65 
boﬁ
 
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

66 
boﬁ
 
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

67 
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
,

68 
Sim∂eSåögCﬁÀ˘i⁄
& 
outCﬁÀ˘i⁄
) const;

69 
boﬁ
 
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const;

71 
size_t
 
	$cou¡
(c⁄° 
Sim∂eSåög
& 
°r
) const;

73 
	`ª∂a˚
(
to
, 
wôh
);

74 
	`ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
);

76 
Sim∂eSåög
 
	$toLowî
() const;

77 
Sim∂eSåög
 
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const;

78 
	$c›yToBuf„r
(* 
buf„r
, 
size_t
 
buf„rSize
) const;

80 c⁄° *
	$asCh¨Såög
() const;

81 
size_t
 
	$size
() const;

82 
boﬁ
 
	$isEm±y
() const;

84 
	`∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
ch
);

86 
Mem‹yLókAŒoˇt‹
* 
	`gëSåögAŒoˇt‹
();

87 
	`£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

89 * 
	`ÆlocSåögBuf„r
(
size_t
 
size
);

90 
	`dóŒocSåögBuf„r
(* 
°r
);

91 
¥iv©e
:

92 *
buf„r_
;

94 
Mem‹yLókAŒoˇt‹
* 
°rögAŒoˇt‹_
;

96 * 
	$gëEm±ySåög
() const;

99 ˛as†
	cSim∂eSåögCﬁÀ˘i⁄


101 
public
:

102 
	`Sim∂eSåögCﬁÀ˘i⁄
();

103 ~
	`Sim∂eSåögCﬁÀ˘i⁄
();

105 
	`Æloˇã
(
size_t
 
size
);

107 
size_t
 
	$size
() const;

108 
Sim∂eSåög
& 
›î©‹
[](
size_t
 
ödex
);

110 
¥iv©e
:

111 
Sim∂eSåög
* 
cﬁÀ˘i⁄_
;

112 
Sim∂eSåög
 
em±y_
;

113 
size_t
 
size_
;

115 
›î©‹
 =(
Sim∂eSåögCﬁÀ˘i⁄
&);

116 
	`Sim∂eSåögCﬁÀ˘i⁄
(
Sim∂eSåögCﬁÀ˘i⁄
&);

119 
Sim∂eSåög
 
	`SåögFrom
(
boﬁ
 
vÆue
);

120 
Sim∂eSåög
 
	`SåögFrom
(c⁄° * 
vÆue
);

121 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

122 
Sim∂eSåög
 
	`SåögFrom
(c⁄° *
vÆue
);

123 
Sim∂eSåög
 
	`SåögFromOrNuŒ
(c⁄° * 
vÆue
);

124 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

125 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

126 
Sim∂eSåög
 
	`HexSåögFrom
(
vÆue
);

127 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
, 
¥ecisi⁄
 = 6);

128 
Sim∂eSåög
 
	`SåögFrom
(c⁄° Sim∂eSåög& 
Ÿhî
);

129 
Sim∂eSåög
 
	`SåögFromF‹m©
(c⁄° * 
f‹m©
, ...);

130 
Sim∂eSåög
 
	`VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
);

132 #i‡
CPPUTEST_USE_STD_CPP_LIB


134 #unde‡
√w


135 
	~<°rög
>

136 #i‡
CPPUTEST_USE_NEW_MACROS


137 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

140 
	~<°döt.h
>

142 
Sim∂eSåög
 
	`SåögFrom
(c⁄° 
°d
::
°rög
& 
Ÿhî
);

143 
Sim∂eSåög
 
	`SåögFrom
(
uöt32_t
);

144 
Sim∂eSåög
 
	`SåögFrom
(
uöt16_t
);

145 
Sim∂eSåög
 
	`SåögFrom
(
uöt8_t
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestFailure.h

38 #i‚de‡
D_Te°Faûuª_H


39 
	#D_Te°Faûuª_H


	)

41 
	~"Sim∂eSåög.h
"

43 
˛ass
 
	gUã°
;

44 
˛ass
 
	gTe°Ouçut
;

46 ˛as†
	cTe°Faûuª


49 
	mpublic
:

50 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

51 c⁄° 
Sim∂eSåög
& 
theMesßge
);

52 
Te°Faûuª
(
Uã°
*, c⁄° 
Sim∂eSåög
& 
theMesßge
);

53 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
);

54 
Te°Faûuª
(const TestFailure&);

55 
	mvútuÆ
 ~
Te°Faûuª
();

57 
vútuÆ
 
Sim∂eSåög
 
	$gëFûeName
() const;

58 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°Name
() const;

59 
vútuÆ
 
	$gëFaûuªLöeNumbî
() const;

60 
vútuÆ
 
Sim∂eSåög
 
	$gëMesßge
() const;

61 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°FûeName
() const;

62 
vútuÆ
 
	$gëTe°LöeNumbî
() const;

63 
boﬁ
 
	$isOutsideTe°Fûe
() const;

64 
boﬁ
 
	$isInHñ≥rFun˘i⁄
() const;

67 
¥Ÿe˘ed
:

69 
Sim∂eSåög
 
	`¸óãButWasSåög
(c⁄° Sim∂eSåög& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

70 
Sim∂eSåög
 
	`¸óãDif„ªn˚AtPosSåög
(c⁄° Sim∂eSåög& 
a˘uÆ
, 
posôi⁄
);

72 
Sim∂eSåög
 
ã°Name_
;

73 
Sim∂eSåög
 
fûeName_
;

74 
löeNumbî_
;

75 
Sim∂eSåög
 
ã°FûeName_
;

76 
ã°LöeNumbî_
;

77 
Sim∂eSåög
 
mesßge_
;

79 
Te°Faûuª
& 
›î©‹
=(const TestFailure&);

83 ˛as†
	cEquÆsFaûuª
: 
public
 
Te°Faûuª


85 
public
:

86 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

87 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

90 ˛as†
	cDoubÀsEquÆFaûuª
: 
public
 
Te°Faûuª


92 
public
:

93 
	`DoubÀsEquÆFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
);

96 ˛as†
	cCheckEquÆFaûuª
 : 
public
 
Te°Faûuª


98 
public
:

99 
	`CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

102 ˛as†
	cC⁄èösFaûuª
: 
public
 
Te°Faûuª


104 
public
:

105 
	`C⁄èösFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

109 ˛as†
	cCheckFaûuª
 : 
public
 
Te°Faûuª


111 
public
:

112 
	`CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
);

115 ˛as†
	cFaûFaûuª
 : 
public
 
Te°Faûuª


117 
public
:

118 
	`FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
);

121 ˛as†
	cL⁄gsEquÆFaûuª
 : 
public
 
Te°Faûuª


123 
public
:

124 
	`L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

127 ˛as†
	cSåögEquÆFaûuª
 : 
public
 
Te°Faûuª


129 
public
:

130 
	`SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

133 ˛as†
	cSåögEquÆNoCa£Faûuª
 : 
public
 
Te°Faûuª


135 
public
:

136 
	`SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestHarness.h

28 #i‚de‡
D_Te°H¨√ss_h


29 
	#D_Te°H¨√ss_h


	)

37 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


38 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


39 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

41 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

45 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


46 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


47 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

49 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

57 
	#MEMORY_LEAK_HASH_TABLE_SIZE
 73

	)

71 
	~"Uã°.h
"

72 
	~"Uã°Ma¸os.h
"

73 
	~"Sim∂eSåög.h
"

74 
	~"Te°Resu….h
"

75 
	~"Te°Faûuª.h
"

76 
	~"Te°Plugö.h
"

77 
	~"Mem‹yLókW¨nögPlugö.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestHarness_c.h

38 #i‚de‡
D_Te°H¨√ss_c_h


39 
	#D_Te°H¨√ss_c_h


	)

41 
	#CHECK_EQUAL_C_INT
(
ex≥˘ed
,
a˘uÆ
) \

42 
	`CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

44 
	#CHECK_EQUAL_C_REAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
) \

45 
	`CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

47 
	#CHECK_EQUAL_C_CHAR
(
ex≥˘ed
,
a˘uÆ
) \

48 
	`CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

50 
	#CHECK_EQUAL_C_STRING
(
ex≥˘ed
,
a˘uÆ
) \

51 
	`CHECK_EQUAL_C_STRING_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

53 
	#FAIL_TEXT_C
(
ãxt
) \

54 
	`FAIL_TEXT_C_LOCATION
(
ãxt
,
__FILE__
,
__LINE__
)

	)

56 
	#FAIL_C
() \

57 
	`FAIL_C_LOCATION
(
__FILE__
,
__LINE__
)

	)

59 
	#CHECK_C
(
c⁄dôi⁄
) \

60 
	`CHECK_C_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
,
__LINE__
)

	)

63 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

64 c⁄° * 
fûeName
, 
löeNumbî
);

65 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

66 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

67 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

68 c⁄° * 
fûeName
, 
löeNumbî
);

69 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
,

70 c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
);

71 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

72 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

75 c⁄° * 
fûeName
, 
löeNumbî
);

77 
	~<°ddef.h
>

79 * 
˝puã°_mÆloc
(
size_t
 
size
);

80 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
);

81 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
);

82 
˝puã°_‰ì
(* 
buf„r
);

84 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

85 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
,

86 c⁄° * 
fûe
, 
löe
);

87 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
,

88 c⁄° * 
fûe
, 
löe
);

89 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

91 
˝puã°_mÆloc_£t_out_of_mem‹y
();

92 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

99 #i‚de‡
PUNUSED


100 #i‡
deföed
(
__GNUC__
)

101 
	#PUNUSED
(
x
Ë
PUNUSED_
 ##x 
	`__©åibuã__
((
unu£d
))

	)

103 
	#PUNUSED
(
x
Ë
	)
x

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestOutput.h

28 #i‚de‡
D_Te°Ouçut_h


29 
	#D_Te°Ouçut_h


	)

42 
˛ass
 
	gUã°
;

43 
˛ass
 
	gTe°Faûuª
;

44 
˛ass
 
	gTe°Resu…
;

46 ˛as†
	cTe°Ouçut


48 
	mpublic
:

49 
ex∂icô
 
Te°Ouçut
();

50 
	mvútuÆ
 ~
Te°Ouçut
();

52 
vútuÆ
 
¥ötTe°sSèπed
();

53 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

54 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

55 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

56 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

57 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

59 
vútuÆ
 
vîbo£
();

60 
vútuÆ
 
¥öt
(const *)=0;

61 
vútuÆ
 
¥öt
();

62 
vútuÆ
 
¥ötDoubÀ
();

63 
vútuÆ
 
¥ötHex
();

64 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

65 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

66 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

68 
vútuÆ
 
Êush
();

70 
	m¥iv©e
:

72 
vútuÆ
 
¥ötProgªssIndiˇt‹
();

73 
¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

74 
¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

75 
¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
);

76 
¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
);

77 
¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
ã°Fûe
, 
löeNumbî
);

79 
Te°Ouçut
(const TestOutput&);

80 
	mTe°Ouçut
& 
	m›î©‹
=(c⁄° 
Te°Ouçut
&);

82 
	mdŸCou¡_
;

83 
boﬁ
 
	mvîbo£_
;

84 c⁄° * 
	m¥ogªssIndiˇti⁄_
;

87 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, const *);

88 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, );

98 ˛as†
	cC⁄sﬁeTe°Ouçut
: 
public
 
Te°Ouçut


100 
public
:

101 
ex∂icô
 
	$C⁄sﬁeTe°Ouçut
()

105 
vútuÆ
 ~
	$C⁄sﬁeTe°Ouçut
()

107 
	}
}

110 
vútuÆ
 
¥öt
(c⁄° * 
s
);

111 
vútuÆ
 
Êush
();

113 
	g¥iv©e
:

114 
C⁄sﬁeTe°Ouçut
(const ConsoleTestOutput&);

115 
	gC⁄sﬁeTe°Ouçut
& 
	g›î©‹
=(c⁄° 
C⁄sﬁeTe°Ouçut
&);

127 ˛as†
	cSåögBuf„rTe°Ouçut
: 
public
 
Te°Ouçut


129 
public
:

130 
ex∂icô
 
	$SåögBuf„rTe°Ouçut
()

134 
vútuÆ
 ~
	$SåögBuf„rTe°Ouçut
()

136 
	}
}

139 
	$¥öt
(c⁄° * 
s
)

141 
ouçut
 +
s
;

142 
	}
}

144 
	$Êush
()

146 
ouçut
 = "";

147 
	}
}

149 c⁄° 
	gSim∂eSåög
& 
	$gëOuçut
()

151  
ouçut
;

152 
	}
}

154 
	g¥iv©e
:

155 
Sim∂eSåög
 
ouçut
;

157 
SåögBuf„rTe°Ouçut
(const StringBufferTestOutput&);

158 
	gSåögBuf„rTe°Ouçut
& 
	g›î©‹
=(c⁄° 
SåögBuf„rTe°Ouçut
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestPlugin.h

36 #i‚de‡
D_Te°Plugö_h


37 
	#D_Te°Plugö_h


	)

39 
˛ass
 
	gUã°
;

40 
˛ass
 
	gTe°Resu…
;

42 ˛as†
	cTe°Plugö


44 
	mpublic
:

46 
Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
);

47 
	mvútuÆ
 ~
Te°Plugö
();

49 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

55 
	}
}

57 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

59  
Ál£
;

60 
	}
}

62 
vútuÆ
 
runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

63 
vútuÆ
 
runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

64 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
);

65 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
);

67 
vútuÆ
 
Te°Plugö
* 
addPlugö
(TestPlugin*);

68 
vútuÆ
 
Te°Plugö
* 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

69 
vútuÆ
 
Te°Plugö
* 
gëNext
();

71 
vútuÆ
 
dißbÀ
();

72 
vútuÆ
 
íabÀ
();

73 
vútuÆ
 
boﬁ
 
isE«bÀd
();

75 c⁄° 
	gSim∂eSåög
& 
gëName
();

76 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

78 
	g¥Ÿe˘ed
:

79 
Te°Plugö
(Te°Plugö* 
√xt_
);

81 
	g¥iv©e
:

82 
Te°Plugö
* 
√xt_
;

83 
Sim∂eSåög
 
	g«me_
;

84 
boﬁ
 
	gíabÀd_
;

95 
CµUTe°St‹e
(**
loˇti⁄
, *
vÆue
);

97 ˛as†
	cSëPoöãrPlugö
: 
public
 
Te°Plugö


99 
public
:

100 
SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
);

101 
	mvútuÆ
 ~
SëPoöãrPlugö
();

102 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

106 
	mMAX_SET
 = 1024

111 
	#UT_PTR_SET
(
a
, 
b
Ë{ 
	`CµUTe°St‹e
–(**)&a, *((**Ë&a));á = b; }

	)

115 ˛as†
	cNuŒTe°Plugö
: 
public
 
Te°Plugö


117 
public
:

119 
NuŒTe°Plugö
();

120 
	mvútuÆ
 ~
	$NuŒTe°Plugö
()

124 
vútuÆ
 
	`runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

125 
vútuÆ
 
	`runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

127 
NuŒTe°Plugö
* 
	`ö°™˚
();

128 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestRegistry.h

36 #i‚de‡
D_Te°Regi°ry_h


37 
	#D_Te°Regi°ry_h


	)

39 
	~"Sim∂eSåög.h
"

41 
˛ass
 
	gUã°
;

42 
˛ass
 
	gTe°Resu…
;

43 
˛ass
 
	gTe°Plugö
;

45 ˛as†
	cTe°Regi°ry


47 
	mpublic
:

48 
Te°Regi°ry
();

49 
	mvútuÆ
 ~
Te°Regi°ry
();

51 
vútuÆ
 
addTe°
(
Uã°
 *
ã°
);

52 
vútuÆ
 
unDoLa°AddTe°
();

53 
vútuÆ
 
cou¡Te°s
();

54 
vútuÆ
 
runAŒTe°s
(
Te°Resu…
& 
ªsu…
);

55 
vútuÆ
 
«meFûãr
(
Sim∂eSåög
);

56 
vútuÆ
 
groupFûãr
(
Sim∂eSåög
);

58 
vútuÆ
 
ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
);

59 
vútuÆ
 
ª£tPlugös
();

60 
vútuÆ
 
Te°Plugö
* 
gëFú°Plugö
();

61 
vútuÆ
 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

64 
Sim∂eSåög
 
gëGroupFûãr
();

65 
Sim∂eSåög
 
gëNameFûãr
();

67 
vútuÆ
 
Uã°
* 
gëFú°Te°
();

68 
vútuÆ
 
Uã°
* 
gëLa°Te°
();

69 
vútuÆ
 
Uã°
* 
gëTe°WôhNext
(Uã°* 
ã°
);

71 
Te°Regi°ry
* 
gëCuºítRegi°ry
();

72 
vútuÆ
 
£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
);

73 
˛ónup
();

74 
	m¥iv©e
:

76 
boﬁ
 
ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
);

77 
boﬁ
 
ídOfGroup
(
Uã°
* 
ã°
);

79 
Uã°
 * 
	mã°s_
;

80 
Sim∂eSåög
* 
	m«meFûãr_
;

81 
Sim∂eSåög
* 
	mgroupFûãr_
;

82 
Te°Plugö
* 
	mfú°Plugö_
;

83 
Te°Regi°ry
* 
	mcuºítRegi°ry_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestResult.h

38 #i‚de‡
D_Te°Resu…_h


39 
	#D_Te°Resu…_h


	)

41 
˛ass
 
	gTe°Faûuª
;

42 
˛ass
 
	gTe°Ouçut
;

43 
˛ass
 
	gUã°
;

45 ˛as†
	cTe°Resu…


47 
	mpublic
:

48 
Te°Resu…
(
Te°Ouçut
&);

49 
	mvútuÆ
 ~
Te°Resu…
();

51 
vútuÆ
 
ã°sSèπed
();

52 
vútuÆ
 
ã°sEnded
();

53 
vútuÆ
 
cuºítGroupSèπed
(
Uã°
* 
ã°
);

54 
vútuÆ
 
cuºítGroupEnded
(
Uã°
* 
ã°
);

55 
vútuÆ
 
cuºítTe°Sèπed
(
Uã°
* 
ã°
);

56 
vútuÆ
 
cuºítTe°Ended
(
Uã°
* 
ã°
);

58 
vútuÆ
 
cou¡Te°
();

59 
vútuÆ
 
cou¡Run
();

60 
vútuÆ
 
cou¡Check
();

61 
vútuÆ
 
cou¡FûãªdOut
();

62 
vútuÆ
 
cou¡Ign‹ed
();

63 
vútuÆ
 
addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

64 
vútuÆ
 
¥öt
(c⁄° * 
ãxt
);

65 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

67 
	$gëTe°Cou¡
() const

69  
ã°Cou¡_
;

71 
	$gëRunCou¡
() const

73  
runCou¡_
;

74 
	}
}

75 
	$gëCheckCou¡
() const

77  
checkCou¡_
;

78 
	}
}

79 
	$gëFûãªdOutCou¡
() const

81  
fûãªdOutCou¡_
;

82 
	}
}

83 
	$gëIgn‹edCou¡
() const

85  
ign‹edCou¡_
;

86 
	}
}

87 
	$gëFaûuªCou¡
() const

89  
ÁûuªCou¡_
;

90 
	}
}

92 
	$gëTŸÆExecuti⁄Time
() const;

93 
	`£tTŸÆExecuti⁄Time
(
exTime
);

95 
	$gëCuºítTe°TŸÆExecuti⁄Time
() const;

96 
	$gëCuºítGroupTŸÆExecuti⁄Time
() const;

97 
¥iv©e
:

99 
Te°Ouçut
& 
ouçut_
;

100 
ã°Cou¡_
;

101 
runCou¡_
;

102 
checkCou¡_
;

103 
ÁûuªCou¡_
;

104 
fûãªdOutCou¡_
;

105 
ign‹edCou¡_
;

106 
tŸÆExecuti⁄Time_
;

107 
timeSèπed_
;

108 
cuºítTe°TimeSèπed_
;

109 
cuºítTe°TŸÆExecuti⁄Time_
;

110 
cuºítGroupTimeSèπed_
;

111 
cuºítGroupTŸÆExecuti⁄Time_
;

112 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestTestingFixture.h

28 #i‚de‡
D_Te°Te°ögFixtuª_H


29 
	#D_Te°Te°ögFixtuª_H


	)

31 ˛as†
	cTe°Te°ögFixtuª


33 
	mpublic
:

35 
	$Te°Te°ögFixtuª
()

37 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

38 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

39 
gíTe°_
 = 
√w
 
	`ExecFun˘i⁄Te°
();

40 
ªgi°ry_
 = 
√w
 
	`Te°Regi°ry
();

42 
ªgi°ry_
->
	`£tCuºítRegi°ry
(registry_);

43 
ªgi°ry_
->
	`addTe°
(
gíTe°_
);

47 
vútuÆ
 ~
	$Te°Te°ögFixtuª
()

49 
ªgi°ry_
->
	`£tCuºítRegi°ry
(0);

50 
dñëe
 
ªgi°ry_
;

51 
dñëe
 
ªsu…_
;

52 
dñëe
 
ouçut_
;

53 
dñëe
 
gíTe°_
;

54 
	}
}

56 
£tTe°Fun˘i⁄
((*
ã°Fun˘i⁄
)())

58 
gíTe°_
->
ã°Fun˘i⁄_
 = 
ã°Fun˘i⁄
;

59 
	}
}

61 
£tSëup
((*
£tupFun˘i⁄
)())

63 
gíTe°_
->
£tup_
 = 
£tupFun˘i⁄
;

64 
	}
}

66 
£tTórdown
((*
ã¨downFun˘i⁄
)())

68 
gíTe°_
->
ã¨down_
 = 
ã¨downFun˘i⁄
;

69 
	}
}

71 
	$runAŒTe°s
()

73 
ªgi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

74 
	}
}

76 
	$gëFaûuªCou¡
()

78  
ªsu…_
->
	`gëFaûuªCou¡
();

79 
	}
}

81 
	$as£πPrötC⁄èös
(c⁄° 
Sim∂eSåög
& 
c⁄èös
)

83 
	`as£πPrötC⁄èös
(
ouçut_
, 
c⁄èös
);

84 
	}
}

86 
	$as£πPrötC⁄èös
(
SåögBuf„rTe°Ouçut
* 
ouçut
,

87 c⁄° 
Sim∂eSåög
& 
c⁄èös
)

89 i‡(
ouçut
->
	`gëOuçut
().
	`c⁄èös
(
c⁄èös
)) ;

90 
Sim∂eSåög
 
	`mesßge
("\tActual <");

91 
mesßge
 +
ouçut
->
	`gëOuçut
().
	`asCh¨Såög
();

92 
mesßge
 += ">\n";

93 
mesßge
 += "\tdidÇot contain <";

94 
mesßge
 +
c⁄èös
.
	`asCh¨Såög
();

95 
mesßge
 += ">\n";

96 
	`FAIL
(
mesßge
.
	`asCh¨Såög
());

98 
	}
}

100 
Te°Regi°ry
* 
	gªgi°ry_
;

101 
ExecFun˘i⁄Te°
* 
	ggíTe°_
;

102 
SåögBuf„rTe°Ouçut
* 
	gouçut_
;

103 
Te°Resu…
 * 
	gªsu…_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\Utest.h

31 #i‚de‡
D_UTe°_h


32 
	#D_UTe°_h


	)

34 
	~"Sim∂eSåög.h
"

45 
˛ass
 
	gTe°Resu…
;

46 
˛ass
 
	gTe°Plugö
;

47 
˛ass
 
	gTe°Faûuª
;

49 
boﬁ
 
doubÀs_equÆ
(
d1
, 
d2
, 
thªshﬁd
);

51 ˛as†
	cUã°


53 
	mpublic
:

54 
Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

55 
löeNumbî
);

56 
	mvútuÆ
 ~
Uã°
();

58 
vútuÆ
 
run
(
Te°Resu…
& 
ªsu…
);

59 
vútuÆ
 
runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

60 
vútuÆ
 
Sim∂eSåög
 
	$gëF‹m©ãdName
() const;

62 
vútuÆ
 
Uã°
* 
	`addTe°
(Uã°* 
ã°
);

63 
vútuÆ
 
Uã°
 *
	$gëNext
() const;

64 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

65 
vútuÆ
 
	`cou¡Te°s
();

67 
boﬁ
 
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const;

68 c⁄° 
Sim∂eSåög
 
	$gëName
() const;

69 c⁄° 
Sim∂eSåög
 
	$gëGroup
() const;

70 c⁄° 
Sim∂eSåög
 
	$gëFûe
() const;

71 
	$gëLöeNumbî
() const;

72 c⁄° 
vútuÆ
 *
	$gëProgªssIndiˇt‹
() const;

74 
vútuÆ
 
	`£tup
();

75 
vútuÆ
 
	`ã¨down
();

76 
vútuÆ
 
	`ã°Body
();

78 
Te°Resu…
 *
	`gëTe°Resu…
();

79 
Uã°
 *
	`gëCuºít
();

81 
vútuÆ
 
	`as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄Såög
, c⁄° *
fûeName
, 
löeNumbî
);

82 
vútuÆ
 
	`as£πC°rEquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

83 
vútuÆ
 
	`as£πC°rNoCa£EquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

84 
vútuÆ
 
	`as£πC°rC⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

85 
vútuÆ
 
	`as£πC°rNoCa£C⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

86 
vútuÆ
 
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

87 
vútuÆ
 
	`as£πPoöãrsEquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

88 
vútuÆ
 
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° *
fûeName
, 
löeNumbî
);

89 
vútuÆ
 
	`Áû
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

91 
vútuÆ
 
	`¥öt
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

92 
vútuÆ
 
	`¥öt
(c⁄° 
Sim∂eSåög
 & 
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

94 
	`£tFûeName
(c⁄° *
fûeName
);

95 
	`£tLöeNumbî
(
löeNumbî
);

96 
	`£tGroupName
(c⁄° *
groupName
);

97 
	`£tTe°Name
(c⁄° *
ã°Name
);

99 
vútuÆ
 
	`exôCuºítTe°
();

100 
¥Ÿe˘ed
:

101 
vútuÆ
 
	`runO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

102 
vútuÆ
 
	`execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

103 
vútuÆ
 
boﬁ
 
	`execuãPœtf‹mS≥cificSëup
();

104 
vútuÆ
 
	`execuãPœtf‹mS≥cificTe°Body
();

105 
vútuÆ
 
	`execuãPœtf‹mS≥cificTórdown
();

106 
vútuÆ
 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

108 
	`Uã°
();

109 
	`Uã°
(c⁄° *
groupName
, c⁄° *
ã°Name
, c⁄° *
fûeName
, 
löeNumbî
, 
Uã°
 *
√xtTe°
);

111 
vútuÆ
 
Sim∂eSåög
 
	$gëMa¸oName
() const;

112 
¥iv©e
:

113 c⁄° *
group_
;

114 c⁄° *
«me_
;

115 c⁄° *
fûe_
;

116 
löeNumbî_
;

117 
Uã°
 *
√xt_
;

119 
	`£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

120 
	`£tCuºítTe°
(
Uã°
* 
ã°
);

122 
Uã°
* 
cuºítTe°_
;

123 
Te°Resu…
* 
ã°Resu…_
;

125 
	`ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
);

130 ˛as†
	cNuŒTe°
: 
public
 
Uã°


132 
public
:

133 
ex∂icô
 
	`NuŒTe°
();

134 
ex∂icô
 
	`NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
);

135 
vútuÆ
 ~
	`NuŒTe°
();

137 
	$ã°Body
()

141 
NuŒTe°
& 
	`ö°™˚
();

143 
vútuÆ
 
	`cou¡Te°s
();

144 
vútuÆ
 
Uã°
*
	$gëNext
() const;

145 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

146 
¥iv©e
:

148 
	`NuŒTe°
(c⁄° 
NuŒTe°
&);

149 
NuŒTe°
& 
›î©‹
=(const NullTest&);

151 
	}
};

155 ˛as†
	cExecFun˘i⁄Te°
: 
public
 
Uã°


157 
public
:

158 (*
£tup_
)();

159 (*
	mã¨down_
)();

160 (*
	mã°Fun˘i⁄_
)();

161 
ExecFun˘i⁄Te°
((*
£t
)(Ë0, (*
ã¨
)() = 0) :

162 
Uã°
("Gíîic", "Gíîic", "Gíîic", 1), 
£tup_
(
£t
), 
ã¨down_
(

163 
ã¨
), 
	$ã°Fun˘i⁄_
(0)

166 
	$ã°Body
()

168 i‡(
ã°Fun˘i⁄_
Ë
	`ã°Fun˘i⁄_
();

169 
	}
}

170 
vútuÆ
 
	$£tup
()

172 i‡(
£tup_
Ë
	`£tup_
();

173 
	}
}

174 
vútuÆ
 
	$ã¨down
()

176 i‡(
ã¨down_
Ë
	`ã¨down_
();

177 
	}
}

182 ˛as†
	cTe°In°ÆÀr


184 
	mpublic
:

185 
ex∂icô
 
Te°In°ÆÀr
(
Uã°
*, c⁄° * 
groupName
, c⁄° * 
ã°Name
,

186 c⁄° * 
fûeName
, 
löeNumbî
);

187 
	mvútuÆ
 ~
Te°In°ÆÀr
();

189 
unDo
();

191 
	m¥iv©e
:

193 
Te°In°ÆÀr
(const TestInstaller&);

194 
	mTe°In°ÆÀr
& 
	m›î©‹
=(c⁄° 
Te°In°ÆÀr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\UtestMacros.h

28 #i‚de‡
D_UTe°Ma¸os_h


29 
	#D_UTe°Ma¸os_h


	)

40 
	#TEST_GROUP_BASE
(
ã°Group
, 
ba£˛ass
) \

41 
exã∫Te°Group
##
ã°Group
 = 0; \

42 
TEST_GROUP_
##
CµUTe°Group
##
ã°Group
 : 
public
 
ba£˛ass


	)

44 
	#TEST_BASE
(
ã°Ba£Cœss
) \

45 
ã°Ba£Cœss
 : 
public
 
Uã°


	)

47 
	#TEST_GROUP
(
ã°Group
) \

48 
	`TEST_GROUP_BASE
(
ã°Group
, 
Uã°
)

	)

50 
	#TEST_SETUP
() \

51 
vútuÆ
 
	`£tup
()

	)

53 
	#TEST_TEARDOWN
() \

54 
vútuÆ
 
	`ã¨down
()

	)

56 
	#TEST
(
ã°Group
, 
ã°Name
) \

57 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

58 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

59 
	`ã°Body
(); } \

60 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

61 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

62 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

64 
	#IGNORE_TEST
(
ã°Group
, 
ã°Name
)\

65 
˛ass
 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

66 { 
public
: 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

67 
vútuÆ
 
	`run
 (
Te°Resu…
& 
ªsu…_∑ømëî
) { \

68 
ªsu…_∑ømëî
.
	`cou¡Ign‹ed
(); } \

69 
vútuÆ
 c⁄° * 
	`gëProgªssIndiˇt‹
() const { "!";} \

70 
¥Ÿe˘ed
: 
vútuÆ
 
Sim∂eSåög
 
	`gëMa¸oName
() const \

72 
public
: 
	`ã°BodyTh©NevîRuns
 (); } \

73 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

74 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##
_
##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

75 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°BodyTh©NevîRuns
 ()

	)

77 
	#IMPORT_TEST_GROUP
(
ã°Group
) \

78 
exã∫Te°Group
##
ã°Group
;\

79 * 
p
##
ã°Group
 = &
exã∫Te°Group
##
	)
testGroup

83 
	#CHECK
(
c⁄dôi⁄
)\

84 
	`CHECK_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
, 
__LINE__
)

	)

86 
	#CHECK_LOCATION
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)\

87 { 
Uã°
::
	`gëCuºít
()->
	`as£πTrue
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
); }

	)

90 
	#CHECK_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

91 
	`CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

93 
	#CHECK_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

94 i‡((
ex≥˘ed
Ë!(
a˘uÆ
))\

97 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();\

98 
CheckEquÆFaûuª
 
	`_f
(
Uã°
::
	`gëCuºít
(), 
fûe
, 
löe
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)); \

99 
Uã°
::
	`gëTe°Resu…
()->
	`addFaûuª
(
_f
);\

101 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
(); \

104 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();

	)

108 
	#STRCMP_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

109 
	`STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

111 
	#STRCMP_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

112 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

114 
	#STRCMP_NOCASE_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

115 
	`STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

117 
	#STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

118 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£EquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

120 
	#STRCMP_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

121 
	`STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

123 
	#STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

124 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rC⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

126 
	#STRCMP_NOCASE_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

127 
	`STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

129 
	#STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

130 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£C⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

133 
	#LONGS_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

134 
	`LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
, 
__LINE__
)

	)

136 
	#LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

137 { 
Uã°
::
	`gëCuºít
()->
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

139 
	#BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

140 
	`LONGS_EQUAL
((
ex≥˘ed
Ë& 0xff,(
a˘uÆ
Ë& 0xff)

	)

142 
	#POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

143 
	`POINTERS_EQUAL_LOCATION
((
ex≥˘ed
),(
a˘uÆ
), 
__FILE__
, 
__LINE__
)

	)

145 
	#POINTERS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

146 { 
Uã°
::
	`gëCuºít
()->
	`as£πPoöãrsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

149 
	#DOUBLES_EQUAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
)\

150 
	`DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

152 
	#DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
fûe
,
löe
)\

153 { 
Uã°
::
	`gëCuºít
()->
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûe
, 
löe
); }

	)

157 #i‚de‡
FAIL


158 
	#FAIL
(
ãxt
)\

159 
	`FAIL_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

161 
	#FAIL_LOCATION
(
ãxt
, 
fûe
, 
löe
)\

162 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

165 #i‚de‡
SUCCESS


166 
	#SUCCESS
(Ë
	`CHECK
(1)

	)

169 
	#FAIL_TEST
(
ãxt
)\

170 
	`FAIL_TEST_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

172 
	#FAIL_TEST_LOCATION
(
ãxt
, 
fûe
,
löe
)\

173 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

175 
	#UT_PRINT_LOCATION
(
ãxt
, 
fûe
, 
löe
) \

176 { 
Uã°
::
	`gëCuºít
()->
	`¥öt
(
ãxt
, 
fûe
, 
löe
); }

	)

178 
	#UT_PRINT
(
ãxt
) \

179 
	`UT_PRINT_LOCATION
(
ãxt
, 
__FILE__
, 
__LINE__
)

	)

181 
	#UT_CRASH
(Ë{ 
	`UT_PRINT
("GoögÅÿ¸ash hîe\n"); 
Uã°
* 
±r
 = (Uã°*Ë0x0;Öå->
	`cou¡Te°s
(); }

	)

182 
	#RUN_ALL_TESTS
(
ac
, 
av
Ë
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
◊c,áv)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\VirtualCall.h

1 #i‚de‡
D_VútuÆCÆl_H


2 
	#D_VútuÆCÆl_H


	)

4 
	#£nd
(
obj
,
msg
)\

5 ((
obj
)->
	`msg
(obj))

	)

7 
	#£nd1
(
obj
,
msg
,
¨g0
)\

8 ((
obj
)->
	`msg
((obj),(
¨g0
)))

	)

10 
	#£nd2
(
obj
,
msg
,
¨g0
,
¨g1
)\

11 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
)))

	)

13 
	#£nd3
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
)\

14 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
)))

	)

16 
	#£nd4
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
,
¨g3
)\

17 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
),(
¨g3
)))

	)

19 
	#vBöd
(
obj
,
msg
,
√wMëhod
)\

20 (
obj
->
msg
=&
√wMëhod
)

	)

22 
	#ˇ°ToDe°royî
(
Cœss
Ë(Cœss* (*)(Cœss*))

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\Gcc\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\StarterKit\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\Symbian\Platform.h

2 #i‚de‡
PLATFORM_H_


3 
	#PLATFORM_H_


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\VisualCpp\Platform.h

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4786)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\VisualCpp\stdint.h

20 #i‚de‡
_STDINT_H


21 
	#_STDINT_H


	)

22 
	#__√ed_wöt_t


	)

23 
	#__√ed_wch¨_t


	)

24 
	~<°ddef.h
>

27 sig√d 
	töt8_t
;

28 
	tuöt8_t
;

29 
	töt16_t
;

30 
	tuöt16_t
;

31 
	töt32_t
;

32 
	tuöt32_t
;

37 sig√d 
	töt_Àa°8_t
;

38 
	tuöt_Àa°8_t
;

39 
	töt_Àa°16_t
;

40 
	tuöt_Àa°16_t
;

41 
	töt_Àa°32_t
;

42 
	tuöt_Àa°32_t
;

50 sig√d 
	töt_Á°8_t
;

51 
	tuöt_Á°8_t
;

52 
	töt_Á°16_t
;

53 
	tuöt_Á°16_t
;

54 
	töt_Á°32_t
;

55 
	tuöt_Á°32_t
;

61 #i‚de‡
_INTPTR_T_DEFINED


62 
	#_INTPTR_T_DEFINED


	)

63 #ifde‡
_WIN64


64 
__öt64
 
	töçå_t
;

66 
	töçå_t
;

70 #i‚de‡
_UINTPTR_T_DEFINED


71 
	#_UINTPTR_T_DEFINED


	)

72 #ifde‡
_WIN64


73 
	t__öt64
 
	tuöçå_t
;

75 
	tuöçå_t
;

84 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_LIMIT_MACROS
)

87 
	#INT8_MIN
 (-128)

	)

88 
	#INT16_MIN
 (-32768)

	)

89 
	#INT32_MIN
 (-2147483647 - 1)

	)

90 
	#INT64_MIN
 (-9223372036854775807LL - 1)

	)

92 
	#INT8_MAX
 127

	)

93 
	#INT16_MAX
 32767

	)

94 
	#INT32_MAX
 2147483647

	)

95 
	#INT64_MAX
 9223372036854775807LL

	)

97 
	#UINT8_MAX
 0xf‡

	)

98 
	#UINT16_MAX
 0xfff‡

	)

99 
	#UINT32_MAX
 0xfffffff‡

	)

100 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

108 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

109 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

110 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

111 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

113 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

114 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

115 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

116 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

119 
	#INT_FAST8_MIN
 
INT8_MIN


	)

120 
	#INT_FAST16_MIN
 
INT16_MIN


	)

121 
	#INT_FAST32_MIN
 
INT32_MIN


	)

122 
	#INT_FAST64_MIN
 
INT64_MIN


	)

124 
	#INT_FAST8_MAX
 
INT8_MAX


	)

125 
	#INT_FAST16_MAX
 
INT16_MAX


	)

126 
	#INT_FAST32_MAX
 
INT32_MAX


	)

127 
	#INT_FAST64_MAX
 
INT64_MAX


	)

129 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

130 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

131 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

132 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

136 #ifde‡
_WIN64


137 
	#INTPTR_MIN
 
INT64_MIN


	)

138 
	#INTPTR_MAX
 
INT64_MAX


	)

139 
	#UINTPTR_MAX
 
UINT64_MAX


	)

141 
	#INTPTR_MIN
 
INT32_MIN


	)

142 
	#INTPTR_MAX
 
INT32_MAX


	)

143 
	#UINTPTR_MAX
 
UINT32_MAX


	)

147 
	#INTMAX_MIN
 
INT64_MIN


	)

148 
	#INTMAX_MAX
 
INT64_MAX


	)

149 
	#UINTMAX_MAX
 
UINT64_MAX


	)

152 
	#PTRDIFF_MIN
 
INTPTR_MIN


	)

153 
	#PTRDIFF_MAX
 
INTPTR_MAX


	)

155 
	#SIG_ATOMIC_MIN
 
INTPTR_MIN


	)

156 
	#SIG_ATOMIC_MAX
 
INTPTR_MAX


	)

158 
	#SIZE_MAX
 
UINTPTR_MAX


	)

160 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 0

	)

162 
	#WCHAR_MAX
 0xfff‡

	)

168 
	#WINT_MIN
 0

	)

169 
	#WINT_MAX
 0xfff‡

	)

175 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_CONSTANT_MACROS
)

190 
	#INT8_C
(
vÆ
Ë
	)
val

191 
	#UINT8_C
(
vÆ
Ë
	)
val

192 
	#INT16_C
(
vÆ
Ë
	)
val

193 
	#UINT16_C
(
vÆ
Ë
	)
val

195 
	#INT32_C
(
vÆ
Ë
	)
val

196 
	#UINT32_C
(
vÆ
ËvÆ##
U


	)

197 
	#INT64_C
(
vÆ
ËvÆ##
LL


	)

198 
	#UINT64_C
(
vÆ
ËvÆ##
ULL


	)

201 
	#INTMAX_C
(
vÆ
Ë
	`INT64_C
(vÆ)

	)

202 
	#UINTMAX_C
(
vÆ
Ë
	`UINT64_C
(vÆ)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢ame
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

14 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	gÁkeR™
 = 0;

7 
	~"CœssName.h
"

8 
vútuÆFun˘i⁄_ª«meThis_Áke
(
CœssName
*)

10 
ÁkeR™
 = 1;

14 
	$TEST_GROUP
(
CœssName
)

16 
CœssName
* 
aCœssName
;

18 
	`£tup
()

20 
aCœssName
 = 
	`CœssName_Cª©e
();

21 
ÁkeR™
 = 0;

22 
aCœssName
->
vútuÆFun˘i⁄_ª«meThis
 = 
vútuÆFun˘i⁄_ª«meThis_Áke
;

25 
	`ã¨down
()

27 
	`CœssName_De°roy
(
aCœssName
);

29 
	}
};

31 
	$TEST
(
CœssName
, 
Fake
)

33 
aCœssName
->
	`vútuÆFun˘i⁄_ª«meThis
(aClassName);

34 
	`LONGS_EQUAL
(1, 
ÁkeR™
);

35 
	}
}

37 
	$TEST
(
CœssName
, 
Cª©e
)

39 
	`FAIL
("Start here");

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢amePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"CœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

5 ˛as†
	cCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


7 
CPPUNIT_TEST_SUITE
(
CœssNameTe°
);

8 
CPPUNIT_TEST
(
ã°Cª©e
);

9 
CPPUNIT_TEST_SUITE_END
();

11 
CœssName
* 
	maCœssName
;

13 
	mpublic
:

15 
	$£tUp
()

17 
aCœssName
 = 
√w
 
	`CœssName
();

20 
	$ã¨Down
()

22 
dñëe
 
aCœssName
;

23 
	}
}

25 
	$ã°Cª©e
()

27 
	`CPPUNIT_FAIL
("Start here");

28 
	}
}

31 
CPPUNIT_TEST_SUITE_REGISTRATION
(
CœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\InterfaceCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeCœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\InterfaceTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

4 
	~"MockCœssName.h
"

6 ˛as†
	cMockCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


8 
CPPUNIT_TEST_SUITE
(
MockCœssNameTe°
);

9 
CPPUNIT_TEST
(
ã°Cª©e
);

10 
CPPUNIT_TEST_SUITE_END
();

12 
CœssName
* 
	maCœssName
;

13 
MockCœssName
* 
	mmockCœssName
;

15 
	mpublic
:

17 
	$£tUp
()

19 
mockCœssName
 = 
√w
 
	`MockCœssName
();

20 
aCœssName
 = 
mockCœssName
;

23 
	$ã¨Down
()

25 
dñëe
 
aCœssName
;

26 
	}
}

28 
	$ã°Cª©e
()

30 
	`CPPUNIT_FAIL
("Start here");

31 
	}
}

34 
CPPUNIT_TEST_SUITE_REGISTRATION
(
MockCœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriver.c

1 
	~"CœssName.h
"

2 
	~"IO.h
"

6 
	$CœssName_Cª©e
()

8 
	}
}

10 
	$CœssName_De°roy
()

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriver.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
	~<°döt.h
>

11 
CœssName_Cª©e
();

12 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssName
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssNamePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameTest.cpp

1 
	~"CœssName.h
"

4 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	$TEST_GROUP
(
CœssName
)

8 
CœssName
* 
aCœssName
;

10 
	`£tup
()

12 
aCœssName
 = 
√w
 
	`CœssName
();

14 
	`ã¨down
()

16 
dñëe
 
aCœssName
;

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameC.c

1 
	~"CœssName.h
"

4 
	$CœssName
()

6 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\InterfaceTest.cpp

1 
	~"CœssName.h
"

2 
	~"MockCœssName.h
"

5 
	~"CµUTe°/Te°H¨√ss.h
"

7 
	$TEST_GROUP
(
CœssName
)

9 
CœssName
* 
aCœssName
;

10 
MockCœssName
* 
mockCœssName
;

12 
	`£tup
()

14 
mockCœssName
 = 
√w
 
	`MockCœssName
();

15 
aCœssName
 = 
mockCœssName
;

17 
	`ã¨down
()

19 
dñëe
 
aCœssName
;

21 
	}
};

23 
	$TEST
(
CœssName
, 
Cª©e
)

25 
	`FAIL
("Start here");

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\CodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	#MAX_VARIABLE_NAME_LINE_PART
 10

	)

35 
	#MAX_VARIABLE_NAME_FILE_PART
 53

	)

36 
	#MAX_VARIABLE_NAME_SEPERATOR_PART
 1

	)

37 
	#MAX_VARIABLE_NAME_LENGTH
 
MAX_VARIABLE_NAME_FILE_PART
 + 
MAX_VARIABLE_NAME_SEPERATOR_PART
 + 
MAX_VARIABLE_NAME_LINE_PART


	)

39 
	sCodeRï‹tögAŒoˇti⁄Node


41 
	mv¨übÀName_
[
MAX_VARIABLE_NAME_LENGTH
 + 1];

42 * 
	mmem‹y_
;

43 
CodeRï‹tögAŒoˇti⁄Node
* 
	m√xt_
;

46 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
)

47 : 
	`codeRï‹tögLi°_
(
NULL
), 
	$öã∫ÆAŒoˇt‹_
(
öã∫ÆAŒoˇt‹
)

49 
	}
}

51 
	gCodeMem‹yRï‹tF‹m©ãr
::~
	$CodeMem‹yRï‹tF‹m©ãr
()

53 
	`˛órRï‹tög
();

54 
	}
}

56 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$˛órRï‹tög
()

58 
codeRï‹tögLi°_
) {

59 
CodeRï‹tögAŒoˇti⁄Node
* 
ﬁdNode
 = 
codeRï‹tögLi°_
;

60 
codeRï‹tögLi°_
 = codeRï‹tögLi°_->
√xt_
;

61 
öã∫ÆAŒoˇt‹_
->
	`‰ì_mem‹y
((*Ë
ﬁdNode
, 
__FILE__
, 
__LINE__
);

63 
	}
}

65 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
)

67 
CodeRï‹tögAŒoˇti⁄Node
* 
√wNode
 = (CodeRï‹tögAŒoˇti⁄Node*Ë
öã∫ÆAŒoˇt‹_
->
	`Æloc_mem‹y
((CodeRï‹tögAŒoˇti⁄Node), 
__FILE__
, 
__LINE__
);

68 
√wNode
->
mem‹y_
 = 
mem‹y
;

69 
√wNode
->
√xt_
 = 
√xt
;

70 
	`Pœtf‹mS≥cificSåNCpy
(
√wNode
->
v¨übÀName_
, 
v¨übÀName
, 
MAX_VARIABLE_NAME_LENGTH
);

71 
codeRï‹tögLi°_
 = 
√wNode
;

72 
	}
}

74 
CodeRï‹tögAŒoˇti⁄Node
* 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$födNode
(* 
mem‹y
)

77 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

78 
cuºít
 && cuºít->
mem‹y_
 !
mem‹y
) {

79 
cuºít
 = cuºít->
√xt_
;

81  
cuºít
;

82 
	}
}

84 
Sim∂eSåög
 
	$exåa˘FûeNameFromP©h
(c⁄° * 
fûe
)

86 c⁄° * 
fûeNameO∆y
 = 
fûe
 + 
	`Pœtf‹mS≥cificSåLí
(file);

87 
fûeNameO∆y
 !
fûe
 && *fileNameOnly != '/')

88 
fûeNameO∆y
--;

89 i‡(*
fûeNameO∆y
 == '/') fileNameOnly++;

90  
fûeNameO∆y
;

91 
	}
}

93 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
)

95 
Sim∂eSåög
 
fûeNameO∆y
 = 
	`exåa˘FûeNameFromP©h
(
fûe
);

96 
fûeNameO∆y
.
	`ª∂a˚
(".", "_");

98 
i
 = 1; i < 100000; i++) {

99 
Sim∂eSåög
 
v¨übÀName
 = 
	`SåögFromF‹m©
("%s_%d_%d", 
fûeNameO∆y
.
	`asCh¨Såög
(), 
löe
, 
i
);

100 i‡(!
	`v¨übÀExi°s
(
v¨übÀName
))

101  
v¨übÀName
;

104 
	}
}

106 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

108  
	`Pœtf‹mS≥cificSåCmp
(
Æloˇt‹
->
	`Æloc_«me
(), 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
()->Æloc_«me()Ë=0 || Pœtf‹mS≥cificSåCmp◊Œoˇt‹->Æloc_«me(), 
Sènd¨dNewAºayAŒoˇt‹
::defaultAllocator()->alloc_name()) == 0;

109 
	}
}

111 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
)

113 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

114 
cuºít
) {

115 i‡(
v¨übÀName
 =
cuºít
->
v¨übÀName_
)

116  
åue
;

117 
cuºít
 = cuºít->
√xt_
;

119  
Ál£
;

120 
	}
}

122 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, 
size_t
 
size
)

124 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

125  
	`SåögFromF‹m©
("ch¨* %†√w ch¨[%d]; /* usög %†*/", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
, 
Æloˇt‹
->
	`Æloc_«me
());

127  
	`SåögFromF‹m©
("void* %†mÆloc(%d);", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
);

128 
	}
}

130 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
)

132 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

133  
	`SåögFromF‹m©
("dñëê[] %s; /* usög %†© %s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
Æloˇt‹
->
	`‰ì_«me
(), 
fûe
, 
löe
);

135  
	`SåögFromF‹m©
("‰ì(%s); /*áà%s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

136 
	}
}

138 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

140 
	`˛órRï‹tög
();

141 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/\nTEST(%s_memoryReport, %s)\n{ /*át %s:%d */\n",

142 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCh¨Såög(),Åe°.
	`gëFûe
().asCh¨Såög(),Åe°.
	`gëLöeNumbî
()).asCharString());

143 
	}
}

145 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
&)

147 
ªsu…
->
	`¥öt
("}/*");

148 
	}
}

150 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

152 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/TEST_GROUP(%s_memoryReport)\n{\n};\n/*",

153 
ã°
.
	`gëGroup
().
	`asCh¨Såög
()).asCharString());

154 
	}
}

156 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

158 
Sim∂eSåög
 
v¨übÀName
 = 
	`¸óãV¨übÀNameFromFûeLöeInfo
(
fûe
, 
löe
);

159 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëAŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
size
).
	`asCh¨Såög
()).asCharString());

160 
	`addNodeToLi°
(
v¨übÀName
.
	`asCh¨Såög
(), 
mem‹y
, 
codeRï‹tögLi°_
);

161 
	}
}

163 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

165 
Sim∂eSåög
 
v¨übÀName
;

166 
CodeRï‹tögAŒoˇti⁄Node
* 
node
 = 
	`födNode
(
mem‹y
);

168 i‡(
mem‹y
 =
NULL
Ë
v¨übÀName
 = "NULL";

169 
v¨übÀName
 = 
node
->
v¨übÀName_
;

171 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëDóŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
fûe
, 
löe
).
	`asCh¨Såög
()).asCharString());

172 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gMem‹yRï‹tAŒoˇt‹
::
	$Mem‹yRï‹tAŒoˇt‹
(Ë: 
	`ªsu…_
(
NULL
), 
	`ªÆAŒoˇt‹_
(NULL), 
	$f‹m©ãr_
(
NULL
)

34 
	}
}

36 
	gMem‹yRï‹tAŒoˇt‹
::~
	$Mem‹yRï‹tAŒoˇt‹
()

38 
	}
}

40 c⁄° * 
Mem‹yRï‹tAŒoˇt‹
::
	$«me
()

42  
ªÆAŒoˇt‹_
->
	`«me
();

43 
	}
}

45 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_«me
()

47  
ªÆAŒoˇt‹_
->
	`Æloc_«me
();

48 
	}
}

50 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_«me
()

52  
ªÆAŒoˇt‹_
->
	`‰ì_«me
();

53 
	}
}

55 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

57 
ªÆAŒoˇt‹_
 = 
Æloˇt‹
;

58 
	}
}

60 
boﬁ
 
	gMem‹yRï‹tAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

62  
ªÆAŒoˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

63 
	}
}

65 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yRï‹tAŒoˇt‹
::
	$gëRólAŒoˇt‹
()

67  
ªÆAŒoˇt‹_
;

68 
	}
}

70 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

72 
ªsu…_
 = 
ªsu…
;

73 
	}
}

75 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

77 
f‹m©ãr_
 = 
f‹m©ãr
;

78 
	}
}

80 * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

82 * 
mem‹y
 = 
ªÆAŒoˇt‹_
->
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

83 i‡(
ªsu…_
 && 
f‹m©ãr_
)

84 
f‹m©ãr_
->
	`ªp‹t_Æloc_mem‹y
(
ªsu…_
, 
this
, 
size
, 
mem‹y
, 
fûe
, 
löe
);

85  
mem‹y
;

86 
	}
}

88 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

90 
ªÆAŒoˇt‹_
->
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 i‡(
ªsu…_
 && 
f‹m©ãr_
)

92 
f‹m©ãr_
->
	`ªp‹t_‰ì_mem‹y
(
ªsu…_
, 
this
, 
mem‹y
, 
fûe
, 
löe
);

93 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

34 
	}
}

36 
N‹mÆMem‹yRï‹tF‹m©ãr
::~
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

38 
	}
}

40 
N‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

42 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("TEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

43 
	}
}

45 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

47 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("ENDTEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

48 
	}
}

50 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

52 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög %†o‡size: %dÖoöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`Æloc_«me
(), 
size
, 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

53 
	}
}

55 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

57 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög %†o‡poöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`‰ì_«me
(), 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

58 
	}
}

60 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

62 c⁄° 
size_t
 
löe_size
 = 80;

64 
Sim∂eSåög
 
groupName
 = 
	`SåögFromF‹m©
("TEST GROUP(%s)", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
());

65 
size_t
 
begöPos
 = (
löe_size
/2Ë- (
groupName
.
	`size
()/2);

67 
Sim∂eSåög
 
	`löe
("-", 
begöPos
);

68 
löe
 +
groupName
;

69 
löe
 +
	`Sim∂eSåög
("-", 
löe_size
 -Üöe.
	`size
());

70 
löe
 += "\n";

71 
ªsu…
->
	`¥öt
(
löe
.
	`asCh¨Såög
());

72 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	gMem‹yRï‹ãrPlugö
::
	$Mem‹yRï‹ãrPlugö
()

34 : 
	`Te°Plugö
("Mem‹yRï‹ãrPlugö"), 
	$f‹m©ãr_
(
NULL
)

36 
	}
}

38 
	gMem‹yRï‹ãrPlugö
::~
	$Mem‹yRï‹ãrPlugö
()

40 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

41 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

42 
	}
}

44 
boﬁ
 
	gMem‹yRï‹ãrPlugö
::
	$∑r£Argumíts
(, c⁄° ** 
av
, 
ödex
)

46 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

47 i‡(
¨gumít
.
	`c⁄èös
("-pmemoryreport=")) {

48 
¨gumít
.
	`ª∂a˚
("-pmemoryreport=", "");

50 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

51 
f‹m©ãr_
 = 
	`¸óãMem‹yF‹m©ãr
(
¨gumít
);

52  
åue
;

54  
Ál£
;

55 
	}
}

57 
Mem‹yRï‹tF‹m©ãr
* 
	gMem‹yRï‹ãrPlugö
::
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

59 i‡(
ty≥
 == "normal") {

60  
√w
 
N‹mÆMem‹yRï‹tF‹m©ãr
;

62 i‡(
ty≥
 == "code") {

63  
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

65  
NULL
;

66 
	}
}

68 
	gMem‹yRï‹ãrPlugö
::
	$de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

70 
dñëe
 
f‹m©ãr
;

71 
	}
}

74 
	gMem‹yRï‹ãrPlugö
::
	$£tGlobÆMem‹yRï‹tAŒoˇt‹s
()

76 
mÆlocAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

77 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(&
mÆlocAŒoˇt‹
);

79 
√wAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

80 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(&
√wAŒoˇt‹
);

82 
√wAºayAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

83 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(&
√wAºayAŒoˇt‹
);

84 
	}
}

86 
	gMem‹yRï‹ãrPlugö
::
	$ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
()

88 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(Ë=&
√wAŒoˇt‹
)

89 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

91 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(Ë=&
√wAºayAŒoˇt‹
)

92 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
√wAºayAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

94 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
(Ë=&
mÆlocAŒoˇt‹
)

95 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
mÆlocAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

96 
	}
}

99 
	gMem‹yRï‹ãrPlugö
::
	$öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
)

101 
Æloˇt‹
->
	`£tF‹m©ãr
(
f‹m©ãr_
);

102 
Æloˇt‹
->
	`£tTe°Resu…
((&
ªsu…
));

103 
	}
}

105 
	gMem‹yRï‹ãrPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

107 i‡(
f‹m©ãr_
 =
NULL
) ;

109 
	`öôülizeAŒoˇt‹
(&
mÆlocAŒoˇt‹
, 
ªsu…
);

110 
	`öôülizeAŒoˇt‹
(&
√wAŒoˇt‹
, 
ªsu…
);

111 
	`öôülizeAŒoˇt‹
(&
√wAºayAŒoˇt‹
, 
ªsu…
);

113 
	`£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

115 i‡(
ã°
.
	`gëGroup
(Ë!
cuºítTe°Group_
) {

116 
f‹m©ãr_
->
	`ªp‹t_ã°group_°¨t
(&
ªsu…
, 
ã°
);

117 
cuºítTe°Group_
 = 
ã°
.
	`gëGroup
();

120 
f‹m©ãr_
->
	`ªp‹t_ã°_°¨t
(&
ªsu…
, 
ã°
);

121 
	}
}

123 
	gMem‹yRï‹ãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

125 i‡(
f‹m©ãr_
 =
NULL
) ;

127 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

128 
f‹m©ãr_
->
	`ªp‹t_ã°_íd
(&
ªsu…
, 
ã°
);

130 i‡(
ã°
.
	`gëNext
()->
	`gëGroup
(Ë!
cuºítTe°Group_
)

131 
f‹m©ãr_
->
	`ªp‹t_ã°group_íd
(&
ªsu…
, 
ã°
);

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	gMockA˘uÆFun˘i⁄CÆl
::
	$MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s
)

35 : 
	`ªp‹ãr_
(
ªp‹ãr
), 
	`°©e_
(
CALL_SUCCEED
), 
	$ÆlEx≥˘©i⁄s_
(
ÆlEx≥˘©i⁄s
)

37 
unfulfûÀdEx≥˘©i⁄s_
.
	`addUnfûfûÀdEx≥˘©i⁄s
(
ÆlEx≥˘©i⁄s
);

38 
	}
}

40 
	gMockA˘uÆFun˘i⁄CÆl
::~
	$MockA˘uÆFun˘i⁄CÆl
()

42 
	}
}

44 
MockA˘uÆFun˘i⁄CÆl
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

46 
ªp‹ãr_
 = 
ªp‹ãr
;

47 
	}
}

50 
Uã°
* 
	gMockA˘uÆFun˘i⁄CÆl
::
	$gëTe°
() const

52  
ªp‹ãr_
->
	`gëTe°ToFaû
();

53 
	}
}

55 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

57 
	`£tSèã
(
CALL_FAILED
);

58 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

59 
	}
}

61 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ˇŒHasSuc˚eded
()

63 
	`£tSèã
(
CALL_SUCCEED
);

64 
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

65 
unfulfûÀdEx≥˘©i⁄s_
.
	`ª£tEx≥˘©i⁄s
();

66 
	}
}

68 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

70 
	`£tName
(
«me
);

71 
	`£tSèã
(
CALL_IN_PROGESS
);

73 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(
«me
);

74 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

75 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
«me
, 
ÆlEx≥˘©i⁄s_
);

76 
	`ÁûTe°
(
Áûuª
);

77  *
this
;

80 
unfulfûÀdEx≥˘©i⁄s_
.
	`ˇŒWasMade
();

82 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

83 
	`ˇŒHasSuc˚eded
();

85  *
this
;

86 
	}
}

88 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
)

90 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
a˘uÆP¨amëî
);

92 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

93 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
a˘uÆP¨amëî
, 
ÆlEx≥˘©i⁄s_
);

94 
	`ÁûTe°
(
Áûuª
);

98 
unfulfûÀdEx≥˘©i⁄s_
.
	`∑ømëîWasPas£d
(
a˘uÆP¨amëî
.
	`gëName
());

99 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

100 
	`ˇŒHasSuc˚eded
();

101 
	}
}

103 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

105 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

106 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

107 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

108  *
this
;

109 
	}
}

111 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

113 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

114 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

115 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

116  *
this
;

117 
	}
}

119 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

121 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

122 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

123 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

124  *
this
;

125 
	}
}

127 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

129 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

130 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

131 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

132  *
this
;

133 
	}
}

135 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

137 i‡(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
Ë=
NULL
) {

138 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
ty≥
);

139 
	`ÁûTe°
(
Áûuª
);

140  *
this
;

142 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

143 
a˘uÆP¨amëî
.
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

144 
a˘uÆP¨amëî
.
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

145 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

146  *
this
;

147 
	}
}

149 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$isFulfûÀd
() const

151  
°©e_
 =
CALL_SUCCEED
;

152 
	}
}

154 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasFaûed
() const

156  
°©e_
 =
CALL_FAILED
;

157 
	}
}

159 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkEx≥˘©i⁄s
()

161 i‡(
°©e_
 !
CALL_IN_PROGESS
) ;

163 i‡(! 
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
())

164 
	`FAIL
("Actual call is inÖrogress. CheckingÉxpectations. ButÇo unfulfilledÉxpectations. Cannot happen.")

166 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
()) {

167 
	`ˇŒHasSuc˚eded
();

171 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
()) {

172 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

173 
	`ÁûTe°
(
Áûuª
);

176 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

177 
	`ÁûTe°
(
Áûuª
);

179 
	}
}

181 c⁄° * 
	gMockA˘uÆFun˘i⁄CÆl
::
	$°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
)

183 
°©e
) {

184 
CALL_IN_PROGESS
:  "InÖrogress";

185 
CALL_FAILED
:  "Failed";

186 
CALL_SUCCEED
:  "Succeed";

190 
	}
}

192 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
)

194 i‡(
ﬁdSèã
 =
√wSèã
)

195 
	`FAIL
(
	`SåögFromF‹m©
("Sèã ch™gêtÿthêßmê°©e: %s.", 
	`°rögFromSèã
(
√wSèã
)).
	`asCh¨Såög
());

196 i‡(
ﬁdSèã
 =
CALL_FAILED
)

197 
	`FAIL
("State wasálready failed. Cannot change stateágain.");

198 
	}
}

200 
	gMockA˘uÆFun˘i⁄CÆl
::
	$£tSèã
(
A˘uÆCÆlSèã
 
°©e
)

202 
	`checkSèãC⁄si°ícy
(
°©e_
, 
°©e
);

203 
°©e_
 = 
°©e
;

204 
	}
}

206 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

208 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

209  *
this
;

210 
	}
}

212 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(const *)

214 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

215  *
this
;

216 
	}
}

218 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

220 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

221  *
this
;

222 
	}
}

224 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(*)

226 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

227  *
this
;

228 
	}
}

230 
MockNamedVÆue
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

232 i‡(
ÆlEx≥˘©i⁄s_
.
	`hasDu∂iˇãRëu∫VÆueF‹
(
	`gëName
())) {

233 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
());

234 
	`ÁûTe°
(
Áûuª
);

235  
	`MockNamedVÆue
("");

237  
ÆlEx≥˘©i⁄s_
.
	`ªtu∫VÆueF‹Fun˘i⁄
(
	`gëName
());

238 
	}
}

240 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

242  ! 
	`ªtu∫VÆue
().
	`gëName
().
	`isEm±y
();

243 
	}
}

245 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

247 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(
obje˘På
);

249 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

250 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
obje˘På
, 
ÆlEx≥˘©i⁄s_
);

251 
	`ÁûTe°
(
Áûuª
);

252  *
this
;

255 
unfulfûÀdEx≥˘©i⁄s_
.
	`wasPas£dToObje˘
();

257 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

258 
	`ˇŒHasSuc˚eded
();

259  *
this
;

260 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

33  
∑ømëî
.
	`toSåög
();

34 
	}
}

36 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$MockEx≥˘edFun˘i⁄CÆl
()

37 : 
	`ign‹eOthîP¨amëîs_
(
Ál£
), 
	`∑ømëîsWîeIgn‹ed_
(Ál£), 
	`wasCÆlMade_
(
åue
), 
	`ªtu∫VÆue_
(""), 
	`obje˘På_
(
NULL
), 
	$wasPas£dToObje˘_
(
åue
)

39 
∑ømëîs_
 = 
√w
 
	`MockNamedVÆueLi°
();

40 
	}
}

42 
	gMockEx≥˘edFun˘i⁄CÆl
::~
	$MockEx≥˘edFun˘i⁄CÆl
()

44 
∑ømëîs_
->
	`˛ór
();

45 
dñëe
 
∑ømëîs_
;

46 
	}
}

48 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

50 
	`£tName
(
«me
);

51 
wasCÆlMade_
 = 
Ál£
;

52  *
this
;

53 
	}
}

55 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

57 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

58 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

59 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

60  *
this
;

61 
	}
}

63 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

65 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

66 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

67 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

68  *
this
;

69 
	}
}

71 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

73 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

74 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

75 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

76  *
this
;

77 
	}
}

79 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

81 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

82 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

83 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

84  *
this
;

85 
	}
}

87 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

89 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

90 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

91 
√wP¨amëî
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

92 
√wP¨amëî
->
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

93  *
this
;

94 
	}
}

96 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîTy≥
(c⁄° 
Sim∂eSåög
& 
«me
)

98 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

99  (
p
Ë?Ö->
	`gëTy≥
() : "";

100 
	}
}

102 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

104 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

105  
p
 !
NULL
;

106 
	}
}

108 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

110 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

111  (
p
Ë? *∞: 
	`MockNamedVÆue
("");

112 
	}
}

114 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eP¨amëîsFulfûÀd
()

116 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

117 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
())

118  
Ál£
;

119  
åue
;

120 
	}
}

122 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eIgn‹edP¨amëîsFulfûÀd
()

124 i‡(
ign‹eOthîP¨amëîs_
)

125  
∑ømëîsWîeIgn‹ed_
;

126  
åue
;

127 
	}
}

129 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ign‹eOthîP¨amëîs
()

131 
ign‹eOthîP¨amëîs_
 = 
åue
;

132 
	}
}

134 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀd
()

136  
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
(Ë&& 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

137 
	}
}

139 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀdWôhoutIgn‹edP¨amëîs
()

141  
wasCÆlMade_
 && 
	`¨eP¨amëîsFulfûÀd
(Ë&& 
wasPas£dToObje˘_
;

142 
	}
}

145 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒWasMade
()

147 
wasCÆlMade_
 = 
åue
;

148 
	}
}

150 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîsWîeIgn‹ed
()

152 
∑ømëîsWîeIgn‹ed_
 = 
åue
;

153 
	}
}

156 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wasPas£dToObje˘
()

158 
wasPas£dToObje˘_
 = 
åue
;

159 
	}
}

161 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ª£tEx≥˘©i⁄
()

163 
wasCÆlMade_
 = 
Ál£
;

164 
wasPas£dToObje˘_
 = (
obje˘På_
 =
NULL
);

165 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

166 
	`ôem
(
p
)->
	`£tFulfûÀd
(
Ál£
);

167 
	}
}

169 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
)

171 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

172 i‡(
p
->
	`gëName
(Ë=
«me
)

173 
	`ôem
(
p
)->
	`£tFulfûÀd
(
åue
);

175 
	}
}

177 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîVÆueSåög
(c⁄° 
Sim∂eSåög
& 
«me
)

179 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

180  (
p
Ë? 
	`SåögFrom
(*p) : "failed";

181 
	}
}

183 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

185 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
∑ømëî
.
	`gëName
());

186  (
p
Ë?Ö->
	`equÆs
(
∑ømëî
Ë: 
ign‹eOthîP¨amëîs_
;

187 
	}
}

189 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒToSåög
()

191 
Sim∂eSåög
 
°r
;

192 i‡(
obje˘På_
)

193 
°r
 = 
	`SåögFromF‹m©
("(obje˘áddªss: %p)::", 
obje˘På_
);

195 
°r
 +
	`gëName
();

196 
°r
 += " -> ";

197 i‡(
∑ømëîs_
->
	`begö
(Ë=
NULL
) {

198 
°r
 +(
ign‹eOthîP¨amëîs_
) ? "allÖarameters ignored" : "noÖarameters";

199  
°r
;

202 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

203 
°r
 +
	`SåögFromF‹m©
("%†%s: <%s>", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCh¨Såög(), 
	`gëP¨amëîVÆueSåög
(p->getName()).asCharString());

204 i‡(
p
->
	`√xt
()Ë
°r
 += ", ";

206 i‡(
ign‹eOthîP¨amëîs_
)

207 
°r
 += ", otherÖarametersáre ignored";

208  
°r
;

209 
	}
}

211 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$missögP¨amëîsToSåög
()

213 
Sim∂eSåög
 
°r
;

214 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

215 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
()) {

216 i‡(
°r
 != "") str += ", ";

217 
°r
 +
	`SåögFromF‹m©
("%†%s", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCharString());

220  
°r
;

221 
	}
}

223 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

225  
fun˘i⁄Name
 =
	`gëName
();

226 
	}
}

228 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsToObje˘
(*
obje˘På
) const

230  
obje˘På_
 =
obje˘På
;

231 
	}
}

233 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
* 
MockEx≥˘edFun˘i⁄CÆl
::
	$ôem
(
MockNamedVÆueLi°Node
* 
node
)

235  (
MockEx≥˘edFun˘i⁄P¨amëî
*Ë
node
->
	`ôem
();

236 
	}
}

238 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

239 : 
	`MockNamedVÆue
(
«me
), 
	$fulfûÀd_
(
Ál£
)

241 
	}
}

243 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$£tFulfûÀd
(
boﬁ
 
b
)

245 
fulfûÀd_
 = 
b
;

246 
	}
}

248 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$isFulfûÀd
() const

250  
fulfûÀd_
;

251 
	}
}

253 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

255 
ªtu∫VÆue_
.
	`£tName
("returnValue");

256 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

257  *
this
;

258 
	}
}

260 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

262 
ªtu∫VÆue_
.
	`£tName
("returnValue");

263 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

264  *
this
;

265 
	}
}

267 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

269 
ªtu∫VÆue_
.
	`£tName
("returnValue");

270 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

271  *
this
;

272 
	}
}

274 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(* 
vÆue
)

276 
ªtu∫VÆue_
.
	`£tName
("returnValue");

277 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

278  *
this
;

279 
	}
}

281 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

283 
wasPas£dToObje˘_
 = 
Ál£
;

284 
obje˘På_
 = 
obje˘På
;

285  *
this
;

286 
	}
}

288 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

290  ! 
ªtu∫VÆue_
.
	`gëName
().
	`isEm±y
();

291 
	}
}

293 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

295  
ªtu∫VÆue_
;

296 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$MockEx≥˘edFun˘i⁄sLi°
(Ë: 
	$hód_
(
NULL
)

34 
	}
}

36 
MockEx≥˘edFun˘i⁄sLi°
::~
	$MockEx≥˘edFun˘i⁄sLi°
()

38 
hód_
) {

39 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

40 
dñëe
 
hód_
;

41 
hód_
 = 
√xt
;

43 
	}
}

45 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$size
() const

47 
cou¡
 = 0;

48 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

49 
cou¡
++;

50  
cou¡
;

51 
	}
}

53 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$isEm±y
() const

55  
	`size
() == 0;

56 
	}
}

59 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const

61 
cou¡
 = 0;

62 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

63 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
)Ë
cou¡
++;

64  
cou¡
;

66 
	}
}

68 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const

70 
cou¡
 = 0;

71 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

72 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()Ë
cou¡
++;

73  
cou¡
;

74 
	}
}

76 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasFulfûÀdEx≥˘©i⁄s
() const

78  (
	`size
(Ë- 
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
()) != 0;

79 
	}
}

81 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const

83  
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
() != 0;

84 
	}
}

86 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

89 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

90  
åue
;

91  
Ál£
;

92 
	}
}

94 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
)

96 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√wCÆl
 = 
√w
 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
ˇŒ
);

98 i‡(
hód_
 =
NULL
)

99 
hód_
 = 
√wCÆl
;

101 
MockEx≥˘edFun˘i⁄sLi°Node
* 
œ°CÆl
 = 
hód_
;

102 
œ°CÆl
->
√xt_
)ÜastCall =ÜastCall->next_;

103 
œ°CÆl
->
√xt_
 = 
√wCÆl
;

105 
	}
}

107 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

109 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

110 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

111 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

112 
	}
}

114 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

116 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

117 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

118 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

119 
	}
}

121 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

123 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

124 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

125 
	}
}

127 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

129 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

130 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

131 
p
->
ex≥˘edCÆl_
 = 
NULL
;

133 
	`¥u√Em±yNodeFromLi°
();

134 
	}
}

136 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
()

138 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

139 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

140 
p
->
ex≥˘edCÆl_
 = 
NULL
;

142 
	`¥u√Em±yNodeFromLi°
();

143 
	}
}

145 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

147 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

148 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(
«me
);

149 
	}
}

151 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
)

153 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

154 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëîWôhName
(
«me
))

155 
p
->
ex≥˘edCÆl_
 = 
NULL
;

156 
	`¥u√Em±yNodeFromLi°
();

157 
	}
}

159 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

161 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

162 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëî
(
∑ømëî
))

163 
p
->
ex≥˘edCÆl_
 = 
NULL
;

164 
	`¥u√Em±yNodeFromLi°
();

165 
	}
}

167 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

169 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

170 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsToObje˘
(
obje˘På
))

171 
p
->
ex≥˘edCÆl_
 = 
NULL
;

172 
	`¥u√Em±yNodeFromLi°
();

173 
	}
}

176 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

178 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

179 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

180 
	}
}

182 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

184 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

185 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(
obje˘På
);

186 
	}
}

188 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄
()

190 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

191 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

192 
p
->
ex≥˘edCÆl_
 = 
NULL
;

196 
	`¥u√Em±yNodeFromLi°
();

197 
	}
}

199 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
()

201 
boﬁ
 
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
 = 
Ál£
;

202 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

203 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
()) {

204 
p
->
ex≥˘edCÆl_
->
	`∑ømëîsWîeIgn‹ed
();

205 
p
->
ex≥˘edCÆl_
 = 
NULL
;

206 
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
 = 
åue
;

210 
	`¥u√Em±yNodeFromLi°
();

211  
foundO√Ign‹edP¨amëîEx≥˘edFun˘i⁄
;

212 
	}
}

215 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$¥u√Em±yNodeFromLi°
()

217 
MockEx≥˘edFun˘i⁄sLi°Node
* 
cuºít
 = 
hód_
;

218 
MockEx≥˘edFun˘i⁄sLi°Node
* 
¥evious
 = 
NULL
;

219 
MockEx≥˘edFun˘i⁄sLi°Node
* 
toBeDñëed
 = 
NULL
;

221 
cuºít
) {

222 i‡(
cuºít
->
ex≥˘edCÆl_
 =
NULL
) {

223 
toBeDñëed
 = 
cuºít
;

224 i‡(
¥evious
 =
NULL
)

225 
hód_
 = 
cuºít
 = cuºít->
√xt_
;

227 
cuºít
 = 
¥evious
->
√xt_
 = current->next_;

228 
dñëe
 
toBeDñëed
;

231 
¥evious
 = 
cuºít
;

232 
cuºít
 = cuºít->
√xt_
;

235 
	}
}

237 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
()

239 
hód_
) {

240 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

241 
dñëe
 
hód_
->
ex≥˘edCÆl_
;

242 
dñëe
 
hód_
;

243 
hód_
 = 
√xt
;

245 
	}
}

247 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ª£tEx≥˘©i⁄s
()

249 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

250 
p
->
ex≥˘edCÆl_
->
	`ª£tEx≥˘©i⁄
();

251 
	}
}

253 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ˇŒWasMade
()

255 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

256 
p
->
ex≥˘edCÆl_
->
	`ˇŒWasMade
();

257 
	}
}

259 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$wasPas£dToObje˘
()

261 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

262 
p
->
ex≥˘edCÆl_
->
	`wasPas£dToObje˘
();

263 
	}
}

266 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
)

268 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

269 
p
->
ex≥˘edCÆl_
->
	`∑ømëîWasPas£d
(
∑ømëîName
);

270 
	}
}

272 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const

274 
Sim∂eSåög
 
°r
;

275 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

276 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
(Ë=
wasFulfûÀd
) {

277 i‡(
°r
 != "") str += "\n";

278 
°r
 +
löePªfix
;

279 
°r
 +
p
->
ex≥˘edCÆl_
->
	`ˇŒToSåög
();

282 i‡(
°r
 == "") {

283 
°r
 +
löePªfix
;

284 
°r
 += "<none>";

286  
°r
;

288 
	}
}

290 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$unfulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

292  
	`fun˘i⁄sToSåög
(
löePªfix
, 
Ál£
);

293 
	}
}

295 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

297  
	`fun˘i⁄sToSåög
(
löePªfix
, 
åue
);

298 
	}
}

300 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$missögP¨amëîsToSåög
() const

302 
Sim∂eSåög
 
°r
;

303 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

304 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

305 i‡(
°r
 != "") str += "\n";

306 
°r
 +
p
->
ex≥˘edCÆl_
->
	`missögP¨amëîsToSåög
();

310 i‡(
°r
 == "")

311 
°r
 = "<none>";

312  
°r
;

313 
	}
}

315 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasDu∂iˇãRëu∫VÆueF‹
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const

317 
MockEx≥˘edFun˘i⁄CÆl
* 
fun˘i⁄WôhRëu∫VÆue
 = 
NULL
;

319 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

320 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
fun˘i⁄Name
)) {

321 i‡(
fun˘i⁄WôhRëu∫VÆue
 && !
p
->
ex≥˘edCÆl_
->
	`ªtu∫VÆue
().
	`equÆs
(functionWithReturnValue->returnValue()))

322  
åue
;

324 
fun˘i⁄WôhRëu∫VÆue
 = 
p
->
ex≥˘edCÆl_
;

327  
Ál£
;

328 
	}
}

330 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const

332 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

333 i‡(! 
p
->
ex≥˘edCÆl_
->
	`¨eP¨amëîsFulfûÀd
())

334  
åue
;

335  
Ál£
;

336 
	}
}

338 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªtu∫VÆueF‹Fun˘i⁄
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
) const

340 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

341 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
fun˘i⁄Name
))

342  
p
->
ex≥˘edCÆl_
->
	`ªtu∫VÆue
();

343  
	`MockNamedVÆue
("");

344 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

33 
	gMockFaûuªRï‹ãr
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

35 
	`gëTe°ToFaû
()->
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

36 i‡(
¸ashOnFaûuª_
)

37 
	`UT_CRASH
();

39 
	`gëTe°ToFaû
()->
	`exôCuºítTe°
();

40 
	}
}

42 
Uã°
* 
	gMockFaûuªRï‹ãr
::
	$gëTe°ToFaû
()

44  
Uã°
::
	`gëCuºít
();

45 
	}
}

47 
	gMockFaûuª
::
	$MockFaûuª
(
Uã°
* 
ã°
Ë: 
	`Te°Faûuª
(test, "Test failed with MockFailure withoutánÉrror! Something went seriously wrong.")

49 
	}
}

51 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

53 
mesßge_
 += "\tEXPECTED callsÅhat did NOT happen:\n";

54 
mesßge_
 +
ex≥˘©i⁄s
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

55 
mesßge_
 += "\n\tACTUAL callsÅhat did happen:\n";

56 
mesßge_
 +
ex≥˘©i⁄s
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

57 
	}
}

59 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

61 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

62 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
«me
, 
ex≥˘©i⁄s
);

64 
mesßge_
 += "\tEXPECTED callsÅhat DID NOT happenÑelatedÅo function: ";

65 
mesßge_
 +
«me
;

66 
mesßge_
 += "\n";

68 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

70 
mesßge_
 += "\n\tACTUAL callsÅhat DID happenÑelatedÅo function: ";

71 
mesßge_
 +
«me
;

72 
mesßge_
 += "\n";

74 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

75 
	}
}

78 
	gMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
::
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

80 
mesßge_
 = "Mock Failure: Expected call didÇot happen.\n";

81 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

82 
	}
}

84 
	gMockU√x≥˘edCÆlH≠≥√dFaûuª
::
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

86 
amou¡OfEx≥˘©i⁄s
 = 
ex≥˘©i⁄s
.
	`amou¡OfEx≥˘©i⁄sF‹
(
«me
);

87 i‡(
amou¡OfEx≥˘©i⁄s
)

88 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (%dthËˇŒÅÿfun˘i⁄: ", 
amou¡OfEx≥˘©i⁄s
+1);

90 
mesßge_
 = "Mock Failure: Unexpected callÅo function: ";

91 
mesßge_
 +
«me
;

92 
mesßge_
 += "\n";

93 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

94 
	}
}

96 
	gMockU√x≥˘edP¨amëîFaûuª
::
	$MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

98 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
;

99 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

100 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(
∑ømëî
.
	`gëName
());

102 i‡(
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`isEm±y
()) {

103 
mesßge_
 = "Mock Failure: UnexpectedÖarameterÇameÅo function \"";

104 
mesßge_
 +
fun˘i⁄Name
;

105 
mesßge_
 += "\": ";

106 
mesßge_
 +
∑ømëî
.
	`gëName
();

109 
mesßge_
 = "Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"";

110 
mesßge_
 +
∑ømëî
.
	`gëName
();

111 
mesßge_
 += "\"Åo function \"";

112 
mesßge_
 +
fun˘i⁄Name
;

113 
mesßge_
 += "\": <";

114 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

115 
mesßge_
 += ">";

118 
mesßge_
 += "\n";

119 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

121 
mesßge_
 += "\n\tACTUAL unexpectedÖarameterÖassedÅo function: ";

122 
mesßge_
 +
fun˘i⁄Name
;

123 
mesßge_
 += "\n";

125 
mesßge_
 += "\t\t";

126 
mesßge_
 +
∑ømëî
.
	`gëTy≥
();

127 
mesßge_
 += " ";

128 
mesßge_
 +
∑ømëî
.
	`gëName
();

129 
mesßge_
 += ": <";

130 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

131 
mesßge_
 += ">";

132 
	}
}

134 
	gMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
::
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

136 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

137 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

139 
mesßge_
 = "Mock Failure: ExpectedÖarameter for function \"";

140 
mesßge_
 +
fun˘i⁄Name
;

141 
mesßge_
 += "\" didÇot happen.\n";

143 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

145 
mesßge_
 += "\n\tMISSINGÖarametersÅhat didn't happen:\n";

146 
mesßge_
 += "\t\t";

147 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`missögP¨amëîsToSåög
();

148 
	}
}

150 
	gMockNoWayToCom∑ªCu°omTy≥Faûuª
::
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
Ë: 
	$MockFaûuª
(
ã°
)

152 
mesßge_
 = 
	`SåögFromF‹m©
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <%s>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
ty≥Name
.
	`asCh¨Såög
());

153 
	}
}

155 
	gMockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
::
	$MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
Ë: 
	$MockFaûuª
(
ã°
)

157 
mesßge_
 = 
	`SåögFromF‹m©
("MockFailure: Cannot set differentÑeturn valuesÅoÅhe same function: %s\n"

159 "\tYou c™Örobablyáchõvêthêßmêthög usög MockSuµ‹t::£tD©a", 
fun˘i⁄Name
.
	`asCh¨Såög
());

160 
	}
}

162 
	gMockU√x≥˘edObje˘Faûuª
::
	$MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
a˘uÆ
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

164 
mesßge_
 = 
	`SåögFromF‹m©
 ("MockFailure: Function called oná unexpected object: %s\n"

165 "\tA˘uÆ obje˘ f‹ cÆ»ha†addªss: <%p>\n", 
fun˘i⁄Name
.
	`asCh¨Såög
(),
a˘uÆ
);

166 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

167 
	}
}

169 
	gMockEx≥˘edObje˘Did¡H≠≥nFaûuª
::
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

171 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: Ex≥˘ed cÆ»⁄ obje˘ f‹ fun˘i⁄ \"%s\" buàô didÇŸ h≠≥n.\n", 
fun˘i⁄Name
.
	`asCh¨Såög
());

172 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockNamedVÆue.h
"

32 
	gMockFun˘i⁄CÆl
::
	$MockFun˘i⁄CÆl
(Ë: 
	$com∑øt‹Rïosô‹y_
(
NULL
)

34 
	}
}

36 
MockFun˘i⁄CÆl
::~
	$MockFun˘i⁄CÆl
()

38 
	}
}

40 
MockFun˘i⁄CÆl
::
	$£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
)

42 
com∑øt‹Rïosô‹y_
 = 
ªposô‹y
;

43 
	}
}

45 
	gMockFun˘i⁄CÆl
::
	$£tName
(c⁄° 
Sim∂eSåög
& 
«me
)

47 
fun˘i⁄Name_
 = 
«me
;

48 
	}
}

50 
Sim∂eSåög
 
	gMockFun˘i⁄CÆl
::
	$gëName
() const

52  
fun˘i⁄Name_
;

53 
	}
}

55 
MockNamedVÆueCom∑øt‹
* 
	gMockFun˘i⁄CÆl
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const

57 i‡(
com∑øt‹Rïosô‹y_
)

58  
com∑øt‹Rïosô‹y_
->
	`gëCom∑øt‹F‹Ty≥
(
ty≥
);

59  
NULL
;

60 
	}
}

62 
	sMockFun˘i⁄CÆlComposôeNode


64 
MockFun˘i⁄CÆlComposôeNode
(
MockFun˘i⁄CÆl
& 
fun˘i⁄CÆl
, MockFun˘i⁄CÆlComposôeNode* 
√xt
Ë: 
√xt_
“ext), 
ˇŒ_
(functionCall){}

66 
MockFun˘i⁄CÆlComposôeNode
* 
	m√xt_
;

67 
	mMockFun˘i⁄CÆl
& 
	mˇŒ_
;

70 
	gMockFun˘i⁄CÆlComposôe
::
	$MockFun˘i⁄CÆlComposôe
(Ë: 
	$hód_
(
NULL
)

72 
	}
}

74 
MockFun˘i⁄CÆlComposôe
::~
	$MockFun˘i⁄CÆlComposôe
()

77 
	}
}

79 
MockFun˘i⁄CÆlComposôe
::
	$add
(
MockFun˘i⁄CÆl
& 
ˇŒ
)

81 
hód_
 = 
√w
 
	`MockFun˘i⁄CÆlComposôeNode
(
ˇŒ
, head_);

82 
	}
}

84 
	gMockFun˘i⁄CÆlComposôe
::
	$˛ór
()

86 
hód_
) {

87 
MockFun˘i⁄CÆlComposôeNode
* 
√xt
 = 
hód_
->
√xt_
;

88 
dñëe
 
hód_
;

89 
hód_
 = 
√xt
;

91 
	}
}

93 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

95 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

96 
node
->
ˇŒ_
.
	`wôhName
(
«me
);

97  *
this
;

98 
	}
}

100 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

102 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

103 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

104  *
this
;

105 
	}
}

107 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

109 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

110 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

111  *
this
;

113 
	}
}

115 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

117 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

118 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

119  *
this
;

120 
	}
}

122 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

124 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

125 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

126  *
this
;

127 
	}
}

129 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

131 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

132 
node
->
ˇŒ_
.
	`wôhP¨amëîOfTy≥
(
ty≥Name
, 
«me
, 
vÆue
);

133  *
this
;

135 
	}
}

137 
	gMockFun˘i⁄CÆlComposôe
::
	$ign‹eOthîP¨amëîs
()

139 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

140 
node
->
ˇŒ_
.
	`ign‹eOthîP¨amëîs
();

141 
	}
}

143 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

145 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

146 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

147  *
this
;

148 
	}
}

150 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
MockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

152 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

153 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

154  *
this
;

155 
	}
}

157 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

159 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

160 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

161  *
this
;

162 
	}
}

164 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(* 
vÆue
)

166 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

167 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

168  *
this
;

169 
	}
}

171 
boﬁ
 
	gMockFun˘i⁄CÆlComposôe
::
	$hasRëu∫VÆue
()

173  
hód_
->
ˇŒ_
.
	`hasRëu∫VÆue
();

174 
	}
}

176 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlComposôe
::
	$ªtu∫VÆue
()

178  
hód_
->
ˇŒ_
.
	`ªtu∫VÆue
();

179 
	}
}

181 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$⁄Obje˘
(* 
obje˘
)

183 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

184 
node
->
ˇŒ_
.
	`⁄Obje˘
(
obje˘
);

185  *
this
;

186 
	}
}

189 
	gMockFun˘i⁄CÆlTø˚
::
	$MockFun˘i⁄CÆlTø˚
()

191 
	}
}

193 
MockFun˘i⁄CÆlTø˚
::~
	$MockFun˘i⁄CÆlTø˚
()

195 
	}
}

197 
MockFun˘i⁄CÆl
& 
MockFun˘i⁄CÆlTø˚
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

199 
åa˚Buf„r_
 += "\nFunctionÇame: ";

200 
åa˚Buf„r_
 +
«me
;

201  *
this
;

202 
	}
}

204 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

206 
åa˚Buf„r_
 += " ";

207 
åa˚Buf„r_
 +
«me
;

208 
åa˚Buf„r_
 += ":";

209 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

210  *
this
;

211 
	}
}

213 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

215 
åa˚Buf„r_
 += " ";

216 
åa˚Buf„r_
 +
«me
;

217 
åa˚Buf„r_
 += ":";

218 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

219  *
this
;

220 
	}
}

222 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

224 
åa˚Buf„r_
 += " ";

225 
åa˚Buf„r_
 +
«me
;

226 
åa˚Buf„r_
 += ":";

227 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

228  *
this
;

229 
	}
}

231 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

233 
åa˚Buf„r_
 += " ";

234 
åa˚Buf„r_
 +
«me
;

235 
åa˚Buf„r_
 += ":";

236 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

237  *
this
;

238 
	}
}

240 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

242 
åa˚Buf„r_
 += " ";

243 
åa˚Buf„r_
 +
ty≥Name
;

244 
åa˚Buf„r_
 += " ";

245 
åa˚Buf„r_
 +
«me
;

246 
åa˚Buf„r_
 += ":";

247 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

248  *
this
;

249 
	}
}

251 
	gMockFun˘i⁄CÆlTø˚
::
	$ign‹eOthîP¨amëîs
()

253 
	}
}

255 
MockFun˘i⁄CÆl
& 
MockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

257  *
this
;

258 
	}
}

260 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

262  *
this
;

263 
	}
}

265 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(const *)

267  *
this
;

268 
	}
}

270 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(*)

272  *
this
;

273 
	}
}

275 
boﬁ
 
	gMockFun˘i⁄CÆlTø˚
::
	$hasRëu∫VÆue
()

277  
Ál£
;

278 
	}
}

280 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlTø˚
::
	$ªtu∫VÆue
()

282  
	`MockNamedVÆue
("");

283 
	}
}

285 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$⁄Obje˘
(* 
obje˘På
)

287 
åa˚Buf„r_
 +
	`SåögFrom
(
obje˘På
);

288  *
this
;

289 
	}
}

291 
	gMockFun˘i⁄CÆlTø˚
::
	$˛ór
()

293 
åa˚Buf„r_
 = "";

294 
	}
}

296 c⁄° * 
	gMockFun˘i⁄CÆlTø˚
::
	$gëTø˚Ouçut
()

298  
åa˚Buf„r_
.
	`asCh¨Såög
();

299 
	}
}

301 
	gMockFun˘i⁄CÆlTø˚
& MockFun˘i⁄CÆlTø˚::
	$ö°™˚
()

303 
MockFun˘i⁄CÆlTø˚
 
ˇŒ
;

304  
ˇŒ
;

305 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockNamedValue.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockNamedVÆue.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gMockNamedVÆue
::
	$MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
Ë: 
	`«me_
“ame), 
	`ty≥_
("öt"), 
	$com∑øt‹_
(
NULL
)

35 
vÆue_
.
ötVÆue_
 = 0;

36 
	}
}

38 
	gMockNamedVÆue
::~
	$MockNamedVÆue
()

40 
	}
}

42 
MockNamedVÆue
::
	$£tVÆue
(
vÆue
)

44 
ty≥_
 = "int";

45 
vÆue_
.
ötVÆue_
 = 
vÆue
;

46 
	}
}

48 
	gMockNamedVÆue
::
	$£tVÆue
(
vÆue
)

50 
ty≥_
 = "double";

51 
vÆue_
.
doubÀVÆue_
 = 
vÆue
;

52 
	}
}

54 
	gMockNamedVÆue
::
	$£tVÆue
(* 
vÆue
)

56 
ty≥_
 = "void*";

57 
vÆue_
.
poöãrVÆue_
 = 
vÆue
;

58 
	}
}

60 
	gMockNamedVÆue
::
	$£tVÆue
(c⁄° * 
vÆue
)

62 
ty≥_
 = "char*";

63 
vÆue_
.
°rögVÆue_
 = 
vÆue
;

64 
	}
}

66 
	gMockNamedVÆue
::
	$£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
)

68 
ty≥_
 = 
ty≥
;

69 
vÆue_
.
obje˘PoöãrVÆue_
 = 
obje˘På
;

70 
	}
}

72 
	gMockNamedVÆue
::
	$£tName
(c⁄° * 
«me
)

74 
«me_
 = 
«me
;

75 
	}
}

77 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëName
() const

79  
«me_
;

80 
	}
}

82 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëTy≥
() const

84  
ty≥_
;

85 
	}
}

87 
	gMockNamedVÆue
::
	$gëI¡VÆue
() const

89 
	`STRCMP_EQUAL
("öt", 
ty≥_
.
	`asCh¨Såög
());

90  
vÆue_
.
ötVÆue_
;

91 
	}
}

93 
	gMockNamedVÆue
::
	$gëDoubÀVÆue
() const

95 
	`STRCMP_EQUAL
("doubÀ", 
ty≥_
.
	`asCh¨Såög
());

96  
vÆue_
.
doubÀVÆue_
;

97 
	}
}

99 c⁄° * 
	gMockNamedVÆue
::
	$gëSåögVÆue
() const

101 
	`STRCMP_EQUAL
("ch¨*", 
ty≥_
.
	`asCh¨Såög
());

102  
vÆue_
.
°rögVÆue_
;

103 
	}
}

105 * 
	gMockNamedVÆue
::
	$gëPoöãrVÆue
() const

107 
	`STRCMP_EQUAL
("void*", 
ty≥_
.
	`asCh¨Såög
());

108  
vÆue_
.
poöãrVÆue_
;

109 
	}
}

111 * 
	gMockNamedVÆue
::
	$gëObje˘Poöãr
() const

113  
vÆue_
.
obje˘PoöãrVÆue_
;

114 
	}
}

116 
	gMockNamedVÆue
::
	$£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
)

118 
com∑øt‹_
 = 
com∑øt‹
;

119 
	}
}

121 
boﬁ
 
	gMockNamedVÆue
::
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const

123 i‡(
ty≥_
 !
p
.ty≥_Ë 
Ál£
;

125 i‡(
ty≥_
 == "int")

126  
vÆue_
.
ötVÆue_
 =
p
.value_.intValue_;

127 i‡(
ty≥_
 == "char*")

128  
	`Sim∂eSåög
(
vÆue_
.
°rögVÆue_
Ë=Sim∂eSåög(
p
.value_.stringValue_);

129 i‡(
ty≥_
 == "void*")

130  
vÆue_
.
poöãrVÆue_
 =
p
.value_.pointerValue_;

131 i‡(
ty≥_
 == "double")

132  (
	`doubÀs_equÆ
(
vÆue_
.
doubÀVÆue_
, 
p
.value_.doubleValue_, 0.005));

134 i‡(
com∑øt‹_
)

135  
com∑øt‹_
->
	`isEquÆ
(
vÆue_
.
obje˘PoöãrVÆue_
, 
p
.value_.objectPointerValue_);

137  
Ál£
;

138 
	}
}

140 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$toSåög
() const

142 i‡(
ty≥_
 == "int")

143  
	`SåögFrom
(
vÆue_
.
ötVÆue_
);

144 i‡(
ty≥_
 == "char*")

145  
vÆue_
.
°rögVÆue_
;

146 i‡(
ty≥_
 == "void*")

147  
	`SåögFrom
(
vÆue_
.
poöãrVÆue_
);

148 i‡(
ty≥_
 == "double")

149  
	`SåögFrom
(
vÆue_
.
doubÀVÆue_
);

151 i‡(
com∑øt‹_
)

152  
com∑øt‹_
->
	`vÆueToSåög
(
vÆue_
.
obje˘PoöãrVÆue_
);

154  
	`SåögFromF‹m©
("Nÿcom∑øt‹ found f‹Åy≥: \"%s\"", 
ty≥_
.
	`asCh¨Såög
());

156 
	}
}

158 
	gMockNamedVÆueLi°Node
::
	$£tNext
(
MockNamedVÆueLi°Node
* 
node
)

160 
√xt_
 = 
node
;

161 
	}
}

163 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°Node
::
	$√xt
()

165  
√xt_
;

166 
	}
}

168 
MockNamedVÆue
* 
	gMockNamedVÆueLi°Node
::
	$ôem
()

170  
d©a_
;

171 
	}
}

173 
	gMockNamedVÆueLi°Node
::
	$de°roy
()

175 
dñëe
 
d©a_
;

176 
	}
}

178 
	gMockNamedVÆueLi°Node
::
	$MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
)

179 : 
	`d©a_
(
√wVÆue
), 
	$√xt_
(
NULL
)

181 
	}
}

183 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëName
() const

185  
d©a_
->
	`gëName
();

186 
	}
}

188 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëTy≥
() const

190  
d©a_
->
	`gëTy≥
();

191 
	}
}

193 
	gMockNamedVÆueLi°
::
	$MockNamedVÆueLi°
(Ë: 
	$hód_
(
NULL
)

195 
	}
}

197 
MockNamedVÆueLi°
::
	$˛ór
()

199 
hód_
) {

200 
MockNamedVÆueLi°Node
* 
n
 = 
hód_
->
	`√xt
();

201 
hód_
->
	`de°roy
();

202 
dñëe
 
hód_
;

203 
hód_
 = 
n
;

205 
	}
}

207 
	gMockNamedVÆueLi°
::
	$add
(
MockNamedVÆue
* 
√wVÆue
)

209 
MockNamedVÆueLi°Node
* 
√wNode
 = 
√w
 
	`MockNamedVÆueLi°Node
(
√wVÆue
);

210 i‡(
hód_
 =
NULL
)

211 
hód_
 = 
√wNode
;

213 
MockNamedVÆueLi°Node
* 
œ°Node
 = 
hód_
;

214 
œ°Node
->
	`√xt
())ÜastNode =ÜastNode->next();

215 
œ°Node
->
	`£tNext
(
√wNode
);

217 
	}
}

219 
MockNamedVÆue
* 
	gMockNamedVÆueLi°
::
	$gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
)

221 
MockNamedVÆueLi°Node
 * 
p
 = 
hód_
;Ö;Ö =Ö->
	`√xt
())

222 i‡(
p
->
	`gëName
(Ë=
«me
)

223  
p
->
	`ôem
();

224  
NULL
;

225 
	}
}

227 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°
::
	$begö
()

229  
hód_
;

230 
	}
}

232 
	sMockNamedVÆueCom∑øt‹Rïosô‹yNode


234 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
, MockNamedVÆueCom∑øt‹Rïosô‹yNode* 
√xt
)

235 : 
«me_
(
«me
), 
com∑øt‹_
(
com∑øt‹
), 
√xt_
(
√xt
) {};

236 
Sim∂eSåög
 
	m«me_
;

237 
	mMockNamedVÆueCom∑øt‹
& 
	mcom∑øt‹_
;

238 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
	m√xt_
;

241 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$MockNamedVÆueCom∑øt‹Rïosô‹y
(Ë: 
	$hód_
(
NULL
)

244 
	}
}

246 
MockNamedVÆueCom∑øt‹Rïosô‹y
::~
	$MockNamedVÆueCom∑øt‹Rïosô‹y
()

248 
	`˛ór
();

249 
	}
}

251 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$˛ór
()

253 
hód_
) {

254 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
√xt
 = 
hód_
->
√xt_
;

255 
dñëe
 
hód_
;

256 
hód_
 = 
√xt
;

258 
	}
}

260 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

262 
hód_
 = 
√w
 
	`MockNamedVÆueCom∑øt‹Rïosô‹yNode
(
«me
, 
com∑øt‹
, head_);

263 
	}
}

265 
MockNamedVÆueCom∑øt‹
* 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
)

267 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

268 i‡(
p
->
«me_
 =
«me
Ë &p->
com∑øt‹_
;

269  
NULL
;;

270 
	}
}

272 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

274 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
ªposô‹y
.
hód_
;Ö;Ö =Ö->
√xt_
)

275 
	`ö°ÆlCom∑øt‹
(
p
->
«me_
,Ö->
com∑øt‹_
);

276 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	#MOCK_SUPPORT_SCOPE_PREFIX
 "!!!$$$MockögSuµ‹tSc›e$$$!!!"

	)

36 
MockSuµ‹t
 
	gglobÆ_mock
;

38 
	gMockSuµ‹t
& 
	$mock
(c⁄° 
Sim∂eSåög
& 
mockName
)

40 i‡(
mockName
 != "")

41  *
globÆ_mock
.
	`gëMockSuµ‹tSc›e
(
mockName
);

42  
globÆ_mock
;

43 
	}
}

45 
	gMockSuµ‹t
::
	$MockSuµ‹t
()

46 : 
	`ªp‹ãr_
(&
deÁu…Rï‹ãr_
), 
	`ign‹eOthîCÆls_
(
Ál£
), 
	`íabÀd_
(
åue
), 
	`œ°A˘uÆFun˘i⁄CÆl_
(
NULL
), 
	$åacög_
(
Ál£
)

48 
	}
}

50 
	gMockSuµ‹t
::~
	$MockSuµ‹t
()

52 
	}
}

54 
MockSuµ‹t
::
	$¸ashOnFaûuª
()

56 
ªp‹ãr_
->
	`¸ashOnFaûuª
();

57 
	}
}

59 
	gMockSuµ‹t
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

61 
ªp‹ãr_
 = (
ªp‹ãr
 !
NULL
Ë?Ñï‹ã∏: &
deÁu…Rï‹ãr_
;

63 i‡(
œ°A˘uÆFun˘i⁄CÆl_
)

64 
œ°A˘uÆFun˘i⁄CÆl_
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

66 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

67 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

68 
	}
}

70 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

72 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

74 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

75 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

76 
	}
}

78 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

80 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

82 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

83 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

84 
	}
}

86 
	gMockSuµ‹t
::
	$ªmoveAŒCom∑øt‹s
()

88 
com∑øt‹Rïosô‹y_
.
	`˛ór
();

89 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

90 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ªmoveAŒCom∑øt‹s
();

91 
	}
}

93 
	gMockSuµ‹t
::
	$˛ór
()

95 
dñëe
 
œ°A˘uÆFun˘i⁄CÆl_
;

96 
œ°A˘uÆFun˘i⁄CÆl_
 = 
NULL
;

98 
åacög_
 = 
Ál£
;

99 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`˛ór
();

101 
ex≥˘©i⁄s_
.
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

102 
composôeCÆls_
.
	`˛ór
();

103 
ign‹eOthîCÆls_
 = 
Ál£
;

104 
íabÀd_
 = 
åue
;

106 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

107 
MockSuµ‹t
* 
suµ‹t
 = 
	`gëMockSuµ‹t
(
p
);

108 i‡(
suµ‹t
) {

109 
suµ‹t
->
	`˛ór
();

110 
dñëe
 
suµ‹t
;

113 
d©a_
.
	`˛ór
();

114 
	}
}

116 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

118 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

120 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
 = 
√w
 MockExpectedFunctionCall;

121 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

122 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

123 
ex≥˘©i⁄s_
.
	`addEx≥˘edCÆl
(
ˇŒ
);

124  *
ˇŒ
;

125 
	}
}

127 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

129 
composôeCÆls_
.
	`˛ór
();

131 
i
 = 0; i < 
amou¡
; i++)

132 
composôeCÆls_
.
	`add
(
	`ex≥˘O√CÆl
(
fun˘i⁄Name
));

133  
composôeCÆls_
;

134 
	}
}

137 
MockA˘uÆFun˘i⁄CÆl
* 
	gMockSuµ‹t
::
	$¸óãA˘uÆFun˘i⁄CÆl
()

139 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ë
dñëe
ÜastActualFunctionCall_;

141 
œ°A˘uÆFun˘i⁄CÆl_
 = 
√w
 
	`MockA˘uÆFun˘i⁄CÆl
(
ªp‹ãr_
, 
ex≥˘©i⁄s_
);

142  
œ°A˘uÆFun˘i⁄CÆl_
;

143 
	}
}

145 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

147 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

148 i‡(
åacög_
Ë 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`wôhName
(
fun˘i⁄Name
);

150 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ëœ°A˘uÆFun˘i⁄CÆl_->
	`checkEx≥˘©i⁄s
();

152 i‡(!
ex≥˘©i⁄s_
.
	`hasEx≥˘©i⁄WôhName
(
fun˘i⁄Name
Ë&& 
ign‹eOthîCÆls_
) {

153  
MockIgn‹edCÆl
::
	`ö°™˚
();

156 
MockA˘uÆFun˘i⁄CÆl
* 
ˇŒ
 = 
	`¸óãA˘uÆFun˘i⁄CÆl
();

157 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

158 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

159  *
ˇŒ
;

160 
	}
}

162 
	gMockSuµ‹t
::
	$ign‹eOthîCÆls
()

164 
ign‹eOthîCÆls_
 = 
åue
;

166 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

167 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ign‹eOthîCÆls
();

168 
	}
}

170 
	gMockSuµ‹t
::
	$dißbÀ
()

172 
íabÀd_
 = 
Ál£
;

174 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

175 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`dißbÀ
();

176 
	}
}

178 
	gMockSuµ‹t
::
	$íabÀ
()

180 
íabÀd_
 = 
åue
;

182 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

183 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`íabÀ
();

184 
	}
}

186 
	gMockSuµ‹t
::
	$åacög
(
boﬁ
 
íabÀd
)

188 
åacög_
 = 
íabÀd
;

190 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

191 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`åacög
(
íabÀd
);

192 
	}
}

194 c⁄° * 
	gMockSuµ‹t
::
	$gëTø˚Ouçut
()

196  
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`gëTø˚Ouçut
();

197 
	}
}

199 
boﬁ
 
	gMockSuµ‹t
::
	$ex≥˘edCÆlsLe·
()

201 
ˇŒsLe·
 = 
ex≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
();

203 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

204 i‡(
	`gëMockSuµ‹t
(
p
)Ë
ˇŒsLe·
 +gëMockSuµ‹t’)->
	`ex≥˘edCÆlsLe·
();

206  
ˇŒsLe·
;

207 
	}
}

209 
boﬁ
 
	gMockSuµ‹t
::
	$wasLa°CÆlFulfûÀd
()

211 i‡(
œ°A˘uÆFun˘i⁄CÆl_
 && !œ°A˘uÆFun˘i⁄CÆl_->
	`isFulfûÀd
())

212  
Ál£
;

214 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

215 i‡(
	`gëMockSuµ‹t
(
p
Ë&& !gëMockSuµ‹t’)->
	`wasLa°CÆlFulfûÀd
())

216  
Ál£
;

218  
åue
;

219 
	}
}

221 
	gMockSuµ‹t
::
	$ÁûTe°WôhF‹U√x≥˘edCÆls
()

223 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sLi°
;

224 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
ex≥˘©i⁄s_
);

226 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

227 if(
	`gëMockSuµ‹t
(
p
))

228 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
	`gëMockSuµ‹t
(
p
)->
ex≥˘©i⁄s_
);

230 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
ªp‹ãr_
->
	`gëTe°ToFaû
(), 
ex≥˘©i⁄sLi°
);

231 
	`˛ór
();

232 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

233 
	}
}

235 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄sOfLa°CÆl
()

237 if(
œ°A˘uÆFun˘i⁄CÆl_
)

238 
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

240 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

241 if(
	`gëMockSuµ‹t
(
p
Ë&& gëMockSuµ‹t’)->
œ°A˘uÆFun˘i⁄CÆl_
)

242 
	`gëMockSuµ‹t
(
p
)->
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

243 
	}
}

245 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄s
()

247 i‡(!
	`wasLa°CÆlFulfûÀd
())

248 
	`checkEx≥˘©i⁄sOfLa°CÆl
();

249 i‡(
	`ex≥˘edCÆlsLe·
())

250 
	`ÁûTe°WôhF‹U√x≥˘edCÆls
();

251 
	}
}

253 
boﬁ
 
	gMockSuµ‹t
::
	$hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

255  
d©a_
.
	`gëVÆueByName
(
«me
Ë!
NULL
;

256 
	}
}

258 
MockNamedVÆue
* 
	gMockSuµ‹t
::
	$¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

260 
MockNamedVÆue
* 
√wD©a
 = 
√w
 
	`MockNamedVÆue
(
«me
);

261 
d©a_
.
	`add
(
√wD©a
);

262  
√wD©a
;

263 
	}
}

265 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

267 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

268 
√wD©a
->
	`£tVÆue
(
vÆue
);

269 
	}
}

271 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

273 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

274 
√wD©a
->
	`£tVÆue
(
vÆue
);

275 
	}
}

277 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

279 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

280 
√wD©a
->
	`£tVÆue
(
vÆue
);

281 
	}
}

283 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

285 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

286 
√wD©a
->
	`£tVÆue
(
vÆue
);

287 
	}
}

289 
	gMockSuµ‹t
::
	$£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
)

291 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

292 
√wD©a
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

293 
	}
}

295 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

297 
MockNamedVÆue
* 
vÆue
 = 
d©a_
.
	`gëVÆueByName
(
«me
);

298 i‡(
vÆue
 =
NULL
)

299  
	`MockNamedVÆue
("");

300  *
vÆue
;

301 
	}
}

303 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
)

305 
Sim∂eSåög
 
mockögSuµ‹tName
 = 
MOCK_SUPPORT_SCOPE_PREFIX
;

306 
mockögSuµ‹tName
 +
«me
;

308 i‡(
	`hasD©a
(
mockögSuµ‹tName
)) {

309 
	`STRCMP_EQUAL
("MockSuµ‹t", 
	`gëD©a
(
mockögSuµ‹tName
).
	`gëTy≥
().
	`asCh¨Såög
());

310  (
MockSuµ‹t
*Ë
	`gëD©a
(
mockögSuµ‹tName
).
	`gëObje˘Poöãr
();

313 
MockSuµ‹t
 *
√wMock
 = 
√w
 MockSupport;

315 
√wMock
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

316 i‡(
ign‹eOthîCÆls_
Ë
√wMock
->
	`ign‹eOthîCÆls
();

317 i‡(!
íabÀd_
Ë
√wMock
->
	`dißbÀ
();

318 
√wMock
->
	`åacög
(
åacög_
);

319 
√wMock
->
	`ö°ÆlCom∑øt‹s
(
com∑øt‹Rïosô‹y_
);

321 
	`£tD©aObje˘
(
mockögSuµ‹tName
, "MockSuµ‹t", 
√wMock
);

322  
√wMock
;

323 
	}
}

325 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
)

327 i‡(
node
->
	`gëTy≥
(Ë="MockSuµ‹t" &&Çode->
	`gëName
().
	`c⁄èös
(
MOCK_SUPPORT_SCOPE_PREFIX
))

328  (
MockSuµ‹t
*Ë
node
->
	`ôem
()->
	`gëObje˘Poöãr
();

329  
NULL
;

330 
	}
}

332 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$ªtu∫VÆue
()

334 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`ªtu∫VÆue
();

335  
	`MockNamedVÆue
("");

336 
	}
}

338 
	gMockSuµ‹t
::
	$ötRëu∫VÆue
()

340  
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

341 
	}
}

343 c⁄° * 
	gMockSuµ‹t
::
	$°rögRëu∫VÆue
()

345  
	`ªtu∫VÆue
().
	`gëSåögVÆue
();

346 
	}
}

348 
	gMockSuµ‹t
::
	$doubÀRëu∫VÆue
()

350  
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
();

351 
	}
}

353 * 
	gMockSuµ‹t
::
	$poöãrRëu∫VÆue
()

355  
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
();

356 
	}
}

358 
boﬁ
 
	gMockSuµ‹t
::
	$hasRëu∫VÆue
()

360 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`hasRëu∫VÆue
();

361  
Ál£
;

362 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupportPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

32 ˛as†
	cMockSuµ‹tPlugöRï‹ãr
 : 
public
 
MockFaûuªRï‹ãr


34 
Uã°
& 
ã°_
;

35 
	mTe°Resu…
& 
	mªsu…_
;

36 
	mpublic
:

37 
	$MockSuµ‹tPlugöRï‹ãr
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

38 : 
	`ã°_
(
ã°
), 
	$ªsu…_
(
ªsu…
)

42 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

44 
ªsu…_
.
	`addFaûuª
(
Áûuª
);

45 
	}
}

47 
vútuÆ
 
Uã°
* 
	$gëTe°ToFaû
()

49  &
ã°_
;

50 
	}
}

53 
	gMockSuµ‹tPlugö
::
	$MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
)

54 : 
	$Te°Plugö
(
«me
)

56 
	}
}

58 
MockSuµ‹tPlugö
::~
	$MockSuµ‹tPlugö
()

60 
ªposô‹y_
.
	`˛ór
();

61 
	}
}

63 
	gMockSuµ‹tPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

65 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªposô‹y_
);

66 
	}
}

68 
	gMockSuµ‹tPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

70 
MockSuµ‹tPlugöRï‹ãr
 
	`ªp‹ãr
(
ã°
, 
ªsu…
);

71 
	`mock
().
	`£tMockFaûuªRï‹ãr
(&
ªp‹ãr
);

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	`mock
().
	`˛ór
();

74 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

76 
	}
}

78 
	gMockSuµ‹tPlugö
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

80 
ªposô‹y_
.
	`ö°ÆlCom∑øt‹
(
«me
, 
com∑øt‹
);

81 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupport_c.cpp

28 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

32 
	~<°rög.h
>

34 
MockSuµ‹t
* 
cuºítMockSuµ‹t
 = 
NULL
;

35 
MockFun˘i⁄CÆl
* 
	gcuºítCÆl
 = 
NULL
;

37 ˛as†
	cMockCFun˘i⁄Com∑øt‹Node
 : 
public
 
MockNamedVÆueCom∑øt‹


39 
public
:

40 
	$MockCFun˘i⁄Com∑øt‹Node
(
MockCFun˘i⁄Com∑øt‹Node
* 
√xt
, 
MockTy≥EquÆFun˘i⁄_c
 
equÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
toSåög
)

41 : 
	`√xt_
(
√xt
), 
	`equÆ_
(
equÆ
), 
	$toSåög_
(
toSåög
) {}

42 
vútuÆ
 ~
	$MockCFun˘i⁄Com∑øt‹Node
(Ë{
	}
};

44 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

46  (
boﬁ
Ë
	`equÆ_
(
obje˘1
, 
obje˘2
);

47 
	}
}

48 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

50  
	`Sim∂eSåög
(
	`toSåög_
(
obje˘
));

51 
	}
}

53 
MockCFun˘i⁄Com∑øt‹Node
* 
	g√xt_
;

54 
MockTy≥EquÆFun˘i⁄_c
 
	gequÆ_
;

55 
MockTy≥VÆueToSåögFun˘i⁄_c
 
	gtoSåög_
;

58 
MockCFun˘i⁄Com∑øt‹Node
* 
	gcom∑øt‹Li°_
 = 
NULL
;

62 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
);

63 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
);

64 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
);

65 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
);

66 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

67 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
);

68 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

69 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
);

71 
checkEx≥˘©i⁄s_c
();

72 
ex≥˘edCÆlsLe·_c
();

73 
˛ór_c
();

75 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨am©îs_c
(c⁄° * 
«me
, 
vÆue
);

76 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
);

77 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

78 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
);

79 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
);

80 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
);

81 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
);

82 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
);

83 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
);

84 
MockVÆue_c
 
ªtu∫VÆue_c
();

87 
ö°ÆlCom∑øt‹_c
 (c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
)

89 
com∑øt‹Li°_
 = 
√w
 
MockCFun˘i⁄Com∑øt‹Node
(com∑øt‹Li°_, 
isEquÆ
, 
vÆueToSåög
);

90 
cuºítMockSuµ‹t
->
ö°ÆlCom∑øt‹
(
ty≥Name
, *
com∑øt‹Li°_
);

93 
ªmoveAŒCom∑øt‹s_c
()

95 
com∑øt‹Li°_
) {

96 
MockCFun˘i⁄Com∑øt‹Node
 *
√xt
 = 
com∑øt‹Li°_
->
√xt_
;

97 
dñëe
 
com∑øt‹Li°_
;

98 
com∑øt‹Li°_
 = 
√xt
;

100 
cuºítMockSuµ‹t
->
ªmoveAŒCom∑øt‹s
();

103 
MockFun˘i⁄CÆl_c
 
gFun˘i⁄CÆl
 = {

104 
wôhI¡P¨am©îs_c
,

105 
wôhDoubÀP¨amëîs_c
,

106 
wôhSåögP¨amëîs_c
,

107 
wôhPoöãrP¨amëîs_c
,

108 
wôhP¨amëîOfTy≥_c
,

109 
™dRëu∫I¡VÆue_c
,

110 
™dRëu∫DoubÀVÆue_c
,

111 
™dRëu∫SåögVÆue_c
,

112 
™dRëu∫PoöãrVÆue_c
,

113 
ªtu∫VÆue_c


116 
MockSuµ‹t_c
 
gMockSuµ‹t
 = {

117 
ex≥˘O√CÆl_c
,

118 
a˘uÆCÆl_c
,

119 
ªtu∫VÆue_c
,

120 
£tI¡D©a_c
,

121 
£tDoubÀD©a_c
,

122 
£tSåögD©a_c
,

123 
£tPoöãrD©a_c
,

124 
£tD©aObje˘_c
,

125 
gëD©a_c
,

126 
checkEx≥˘©i⁄s_c
,

127 
ex≥˘edCÆlsLe·_c
,

128 
˛ór_c
,

129 
ö°ÆlCom∑øt‹_c
,

130 
ªmoveAŒCom∑øt‹s_c


133 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨am©îs_c
(c⁄° * 
«me
, 
vÆue
)

135 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

136  &
gFun˘i⁄CÆl
;

139 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
)

141 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

142  &
gFun˘i⁄CÆl
;

145 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

147 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

148  &
gFun˘i⁄CÆl
;

151 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
)

153 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

154  &
gFun˘i⁄CÆl
;

157 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
)

159 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëîOfTy≥
(
ty≥
, 
«me
, 
vÆue
);

160  &
gFun˘i⁄CÆl
;

163 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
)

165 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

166  &
gFun˘i⁄CÆl
;

169 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
)

171 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

172  &
gFun˘i⁄CÆl
;

175 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
)

177 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

178  &
gFun˘i⁄CÆl
;

181 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
)

183 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

184  &
gFun˘i⁄CÆl
;

187 
MockVÆue_c
 
gëMockVÆueCFromNamedVÆue
(c⁄° 
MockNamedVÆue
& 
«medVÆue
)

189 
MockVÆue_c
 
ªtu∫VÆue
;

190 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "int") == 0) {

191 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_INTEGER
;

192 
ªtu∫VÆue
.
vÆue
.
ötVÆue
 = 
«medVÆue
.
gëI¡VÆue
();

194 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "double") == 0) {

195 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_DOUBLE
;

196 
ªtu∫VÆue
.
vÆue
.
doubÀVÆue
 = 
«medVÆue
.
gëDoubÀVÆue
();

198 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "char*") == 0) {

199 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_STRING
;

200 
ªtu∫VÆue
.
vÆue
.
°rögVÆue
 = 
«medVÆue
.
gëSåögVÆue
();

202 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "void*") == 0) {

203 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_POINTER
;

204 
ªtu∫VÆue
.
vÆue
.
poöãrVÆue
 = 
«medVÆue
.
gëPoöãrVÆue
();

207 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_OBJECT
;

208 
ªtu∫VÆue
.
vÆue
.
obje˘VÆue
 = 
«medVÆue
.
gëObje˘Poöãr
();

210  
ªtu∫VÆue
;

213 
MockVÆue_c
 
ªtu∫VÆue_c
()

215  
gëMockVÆueCFromNamedVÆue
(
cuºítCÆl
->
ªtu∫VÆue
());

218 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
)

220 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
ex≥˘O√CÆl
(
«me
);

221  &
gFun˘i⁄CÆl
;

224 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
)

226 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
a˘uÆCÆl
(
«me
);

227  &
gFun˘i⁄CÆl
;

230 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
)

232  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

235 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
)

237  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

240 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

242  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

245 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
)

247  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

250 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
)

252  
cuºítMockSuµ‹t
->
£tD©aObje˘
(
«me
, 
ty≥
, 
vÆue
);

255 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
)

257  
gëMockVÆueCFromNamedVÆue
(
cuºítMockSuµ‹t
->
gëD©a
(
«me
));

260 
checkEx≥˘©i⁄s_c
()

262 
cuºítMockSuµ‹t
->
checkEx≥˘©i⁄s
();

265 
ex≥˘edCÆlsLe·_c
()

267  
cuºítMockSuµ‹t
->
ex≥˘edCÆlsLe·
();

270 
˛ór_c
()

272 
cuºítMockSuµ‹t
->
˛ór
();

275 
MockSuµ‹t_c
* 
mock_c
()

277 
cuºítMockSuµ‹t
 = &
mock
();

278  &
gMockSuµ‹t
;

281 
MockSuµ‹t_c
* 
mock_sc›e_c
(c⁄° * 
sc›e
)

283 
cuºítMockSuµ‹t
 = &
mock
(
sc›e
);

284  &
gMockSuµ‹t
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\OrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/OrdîedTe°.h
"

32 
OrdîedTe°
* 
	gOrdîedTe°
::
_‹dîedTe°sHód
 = 0;

34 
	gOrdîedTe°
::
	$OrdîedTe°
() :

35 
	$_√xtOrdîedTe°
(0)

37 
	}
}

39 
OrdîedTe°
::~
	$OrdîedTe°
()

41 
	}
}

43 
OrdîedTe°
::
	$gëLevñ
()

45  
_Àvñ
;

46 
	}
}

48 
	gOrdîedTe°
::
	$£tLevñ
(
Àvñ
)

50 
_Àvñ
 = 
Àvñ
;

51 
	}
}

53 
	gOrdîedTe°
::
	$£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
)

55 
_‹dîedTe°sHód
 = 
ã°
;

56 
	}
}

58 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëOrdîedTe°Hód
()

60  
_‹dîedTe°sHód
;

61 
	}
}

63 
boﬁ
 
	gOrdîedTe°
::
	$fú°OrdîedTe°
()

65  (
	`gëOrdîedTe°Hód
() == 0);

66 
	}
}

68 
OrdîedTe°
* 
	gOrdîedTe°
::
	$addOrdîedTe°
(
OrdîedTe°
* 
ã°
)

70 
Uã°
::
	`addTe°
(
ã°
);

71 
_√xtOrdîedTe°
 = 
ã°
;

72  
this
;

73 
	}
}

75 
	gOrdîedTe°
::
	$addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
)

77 
Te°Regi°ry
 *
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

79 i‡(
ªg
->
	`gëFú°Te°
()->
	`isNuŒ
(Ë|| 
	`gëOrdîedTe°Hód
()

80 =
ªg
->
	`gëFú°Te°
()Ëªg->
	`addTe°
(
ã°
);

81 
ªg
->
	`gëTe°WôhNext
(
	`gëOrdîedTe°Hód
())->
	`addTe°
(
ã°
);

83 
ã°
->
_√xtOrdîedTe°
 = 
	`gëOrdîedTe°Hód
();

84 
	`£tOrdîedTe°Hód
(
ã°
);

85 
	}
}

87 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëNextOrdîedTe°
()

89  
_√xtOrdîedTe°
;

90 
	}
}

92 
	gOrdîedTe°In°ÆÀr
::
	$OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
,

93 c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

94 
löeNumbî
, 
Àvñ
)

96 
ã°
->
	`£tTe°Name
(
ã°Name
);

97 
ã°
->
	`£tGroupName
(
groupName
);

98 
ã°
->
	`£tFûeName
(
fûeName
);

99 
ã°
->
	`£tLöeNumbî
(
löeNumbî
);

100 
ã°
->
	`£tLevñ
(
Àvñ
);

102 i‡(
OrdîedTe°
::
	`fú°OrdîedTe°
()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(
ã°
);

103 
	`addOrdîedTe°InOrdî
(
ã°
);

104 
	}
}

106 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
)

108 i‡(
ã°
->
	`gëLevñ
(Ë< 
OrdîedTe°
::
	`gëOrdîedTe°Hód
()->gëLevñ()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(

109 
ã°
);

110 
	`addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
ã°
);

111 
	}
}

113 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(

114 
OrdîedTe°
* 
ã°
)

116 
OrdîedTe°
* 
cuºít
 = OrdîedTe°::
	`gëOrdîedTe°Hód
();

117 
cuºít
->
	`gëNextOrdîedTe°
()) {

119 i‡(
cuºít
->
	`gëNextOrdîedTe°
()->
	`gëLevñ
(Ë> 
ã°
->getLevel()) {

120 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

121 
cuºít
->
	`addOrdîedTe°
(
ã°
);

124 
cuºít
 = cuºít->
	`gëNextOrdîedTe°
();

126 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

127 
cuºít
->
	`addOrdîedTe°
(
ã°
);

128 
	}
}

130 
	gOrdîedTe°In°ÆÀr
::~
	$OrdîedTe°In°ÆÀr
()

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\CommandLineArguments.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gComm™dLöeArgumíts
::
	$Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
) :

33 
	`ac_
(
ac
), 
	`av_
(
av
), 
	`vîbo£_
(
Ál£
), 
	`ª≥©_
(1), 
	`groupFûãr_
(""), 
	`«meFûãr_
(""), 
	$ouçutTy≥_
(
OUTPUT_ECLIPSE
)

35 
	}
}

37 
	gComm™dLöeArgumíts
::~
	$Comm™dLöeArgumíts
()

39 
	}
}

41 
boﬁ
 
Comm™dLöeArgumíts
::
	$∑r£
(
Te°Plugö
* 
∂ugö
)

43 
boﬁ
 
c‹ª˘P¨amëîs
 = 
åue
;

44 
i
 = 1; i < 
ac_
; i++) {

45 
Sim∂eSåög
 
¨gumít
 = 
av_
[
i
];

46 i‡(
¨gumít
 ="-v"Ë
vîbo£_
 = 
åue
;

47 i‡(
¨gumít
.
	`°¨tsWôh
("-r")Ë
	`SëRïótCou¡
(
ac_
, 
av_
, 
i
);

48 i‡(
¨gumít
.
	`°¨tsWôh
("-g")Ë
	`SëGroupFûãr
(
ac_
, 
av_
, 
i
);

49 i‡(
¨gumít
.
	`°¨tsWôh
("-n")Ë
	`SëNameFûãr
(
ac_
, 
av_
, 
i
);

50 i‡(
¨gumít
.
	`°¨tsWôh
("-o")Ë
c‹ª˘P¨amëîs
 = 
	`SëOuçutTy≥
(
ac_
, 
av_
, 
i
);

51 i‡(
¨gumít
.
	`°¨tsWôh
("-p")Ë
c‹ª˘P¨amëîs
 = 
∂ugö
->
	`∑r£AŒArgumíts
(
ac_
, 
av_
, 
i
);

52 
c‹ª˘P¨amëîs
 = 
Ál£
;

54 i‡(
c‹ª˘P¨amëîs
 =
Ál£
) {

55  
Ál£
;

58  
åue
;

59 
	}
}

61 c⁄° * 
	gComm™dLöeArgumíts
::
	$ußge
() const

64 
	}
}

66 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isVîbo£
() const

68  
vîbo£_
;

69 
	}
}

71 
	gComm™dLöeArgumíts
::
	$gëRïótCou¡
() const

73  
ª≥©_
;

74 
	}
}

76 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëGroupFûãr
() const

78  
groupFûãr_
;

79 
	}
}

81 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëNameFûãr
() const

83  
«meFûãr_
;

84 
	}
}

86 
	gComm™dLöeArgumíts
::
	$SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
i
)

88 
ª≥©_
 = 0;

90 
Sim∂eSåög
 
	`ª≥©P¨amëî
(
av
[
i
]);

91 i‡(
ª≥©P¨amëî
.
	`size
(Ë> 2Ë
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
] + 2);

92 i‡(
i
 + 1 < 
ac
) {

93 
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
 + 1]);

94 i‡(
ª≥©_
 !0Ë
i
++;

97 i‡(0 =
ª≥©_
)Ñepeat_ = 2;

99 
	}
}

101 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
)

103 
Sim∂eSåög
 
	`∑ømëî
(
av
[
i
]);

104 i‡(
∑ømëî
.
	`size
(Ë> 2Ë 
av
[
i
] + 2;

105 i‡(
i
 + 1 < 
ac
Ë 
av
[++i];

107 
	}
}

109 
	gComm™dLöeArgumíts
::
	$SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

111 
Sim∂eSåög
 
gf
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

112 
groupFûãr_
 = 
gf
;

113 
	}
}

115 
	gComm™dLöeArgumíts
::
	$SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

117 
«meFûãr_
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

118 
	}
}

120 
boﬁ
 
	gComm™dLöeArgumíts
::
	$SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
i
)

122 
Sim∂eSåög
 
ouçutTy≥
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

123 i‡(
ouçutTy≥
.
	`size
(Ë=0Ë 
Ál£
;

125 i‡(
ouçutTy≥
 == "normal" || outputType == "eclipse") {

126 
ouçutTy≥_
 = 
OUTPUT_ECLIPSE
;

127  
åue
;

129 i‡(
ouçutTy≥
 == "junit") {

130 
ouçutTy≥_
 = 
OUTPUT_JUNIT
;

131  
åue
;

133  
Ál£
;

134 
	}
}

136 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isE˛ù£Ouçut
() const

138  
ouçutTy≥_
 =
OUTPUT_ECLIPSE
;

139 
	}
}

141 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isJUnôOuçut
() const

143  
ouçutTy≥_
 =
OUTPUT_JUNIT
;

144 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\CommandLineTestRunner.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/JUnôTe°Ouçut.h
"

32 
	~"CµUTe°/Te°Regi°ry.h
"

34 
	gComm™dLöeTe°Ru¬î
::
	$Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
* 
ouçut
) :

35 
	`ouçut_
(
ouçut
), 
	$jUnôOuçut_
(
√w
 
JUnôTe°Ouçut
)

37 
¨gumíts_
 = 
√w
 
	`Comm™dLöeArgumíts
(
ac
, 
av
);

38 
	}
}

40 
	gComm™dLöeTe°Ru¬î
::~
	$Comm™dLöeTe°Ru¬î
()

42 
dñëe
 
¨gumíts_
;

43 
dñëe
 
jUnôOuçut_
;

44 
	}
}

46 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, ** 
av
)

48  
	`RunAŒTe°s
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
));

49 
	}
}

51 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, c⁄° ** 
av
)

53 
ªsu…
 = 0;

54 
C⁄sﬁeTe°Ouçut
 
ouçut
;

56 
Mem‹yLókW¨nögPlugö
 
	`memLókW¨n
(
DEF_PLUGIN_MEM_LEAK
);

57 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
memLókW¨n
);

60 
Comm™dLöeTe°Ru¬î
 
	`ru¬î
(
ac
, 
av
, &
ouçut
);

61 
ªsu…
 = 
ru¬î
.
	`runAŒTe°sMaö
();

64 i‡(
ªsu…
 == 0) {

65 
ouçut
 << 
memLókW¨n
.
	`FöÆRï‹t
(0);

67  
ªsu…
;

68 
	}
}

70 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°sMaö
()

72 
ã°Resu…
 = 0;

74 
SëPoöãrPlugö
 
	`pPlugö
(
DEF_PLUGIN_SET_POINTER
);

75 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
pPlugö
);

77 i‡(!
	`∑r£Argumíts
(
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`gëFú°Plugö
()))  1;

79 
ã°Resu…
 = 
	`runAŒTe°s
();

81 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`˛ónup
();

82  
ã°Resu…
;

83 
	}
}

85 
	gComm™dLöeTe°Ru¬î
::
	$öôülizeTe°Run
()

87 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`groupFûãr
(
¨gumíts_
->
	`gëGroupFûãr
());

88 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`«meFûãr
(
¨gumíts_
->
	`gëNameFûãr
());

89 i‡(
¨gumíts_
->
	`isVîbo£
()Ë
ouçut_
->
	`vîbo£
();

90 
	}
}

92 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°s
()

94 
	`öôülizeTe°Run
();

95 
lo›Cou¡
 = 0;

96 
ÁûuªCou¡
 = 0;

97 
ª≥©_
 = 
¨gumíts_
->
	`gëRïótCou¡
();

99 
lo›Cou¡
++ < 
ª≥©_
) {

100 
ouçut_
->
	`¥ötTe°Run
(
lo›Cou¡
, 
ª≥©_
);

101 
Te°Resu…
 
	`å
(*
ouçut_
);

102 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`runAŒTe°s
(
å
);

103 
ÁûuªCou¡
 +
å
.
	`gëFaûuªCou¡
();

106  
ÁûuªCou¡
;

107 
	}
}

109 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$∑r£Argumíts
(
Te°Plugö
* 
∂ugö
)

111 i‡(
¨gumíts_
->
	`∑r£
(
∂ugö
)) {

112 i‡(
¨gumíts_
->
	`isJUnôOuçut
()) {

113 
ouçut_
 = 
jUnôOuçut_
;

115  
åue
;

118 
ouçut_
->
	`¥öt
(
¨gumíts_
->
	`ußge
());

119  
Ál£
;

121 
	}
}

123 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$isVîbo£
()

125  
¨gumíts_
->
	`isVîbo£
();

126 
	}
}

128 
	gComm™dLöeTe°Ru¬î
::
	$gëRïótCou¡
()

130  
¨gumíts_
->
	`gëRïótCou¡
();

131 
	}
}

133 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëGroupFûãr
()

135  
¨gumíts_
->
	`gëGroupFûãr
();

136 
	}
}

138 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëNameFûãr
()

140  
¨gumíts_
->
	`gëNameFûãr
();

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\JUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Te°Faûuª.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	sJUnôTe°Ca£Resu…Node


36 
JUnôTe°Ca£Resu…Node
() :

37 
execTime_
(0), 
Áûuª_
(0), 
√xt_
(0)

41 
Sim∂eSåög
 
	m«me_
;

42 
	mexecTime_
;

43 
Te°Faûuª
* 
	mÁûuª_
;

44 
JUnôTe°Ca£Resu…Node
* 
	m√xt_
;

47 
	sJUnôTe°GroupResu…


49 
JUnôTe°GroupResu…
() :

50 
ã°Cou¡_
(0), 
ÁûuªCou¡_
(0), 
groupExecTime_
(0), 
hód_
(0), 
èû_
(0)

54 
	mã°Cou¡_
;

55 
	mÁûuªCou¡_
;

56 
	m°¨tTime_
;

57 
	mgroupExecTime_
;

58 
Sim∂eSåög
 
	mgroup_
;

59 
JUnôTe°Ca£Resu…Node
* 
	mhód_
;

60 
JUnôTe°Ca£Resu…Node
* 
	mèû_
;

63 
	sJUnôTe°OuçutIm∂


65 
JUnôTe°GroupResu…
 
	mªsu…s_
;

66 
Pœtf‹mS≥cificFûe
 
	mfûe_
;

69 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

70 
	$im∂_
(
√w
 
JUnôTe°OuçutIm∂
)

72 
	}
}

74 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

76 
	`ª£tTe°GroupResu…
();

77 
dñëe
 
im∂_
;

78 
	}
}

80 
	gJUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

82 
im∂_
->
ªsu…s_
.
ã°Cou¡_
 = 0;

83 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
 = 0;

84 
im∂_
->
ªsu…s_
.
group_
 = "";

85 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

86 
cur
) {

87 
JUnôTe°Ca£Resu…Node
* 
tmp
 = 
cur
->
√xt_
;

89 i‡(
cur
->
Áûuª_
Ë
dñëe
 cur->failure_;

90 
dñëe
 
cur
;

91 
cur
 = 
tmp
;

93 
im∂_
->
ªsu…s_
.
hód_
 = 0;

94 
im∂_
->
ªsu…s_
.
èû_
 = 0;

95 
	}
}

97 
	gJUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

99 
	}
}

101 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

103 
	}
}

105 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

107 
im∂_
->
ªsu…s_
.
èû_
->
execTime_


108 
ªsu…
.
	`gëCuºítTe°TŸÆExecuti⁄Time
();

109 
	}
}

111 
	gJUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& )

113 
	}
}

115 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

117 
im∂_
->
ªsu…s_
.
groupExecTime_
 = 
ªsu…
.
	`gëCuºítGroupTŸÆExecuti⁄Time
();

118 
	`wrôeTe°GroupToFûe
();

119 
	`ª£tTe°GroupResu…
();

120 
	}
}

122 
	gJUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

124 
im∂_
->
ªsu…s_
.
ã°Cou¡_
++;

125 
im∂_
->
ªsu…s_
.
group_
 = 
ã°
.
	`gëGroup
();

126 
im∂_
->
ªsu…s_
.
°¨tTime_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

128 i‡(
im∂_
->
ªsu…s_
.
èû_
 == 0) {

129 
im∂_
->
ªsu…s_
.
hód_
 = im∂_->ªsu…s_.
èû_


130 
√w
 
JUnôTe°Ca£Resu…Node
;

133 
im∂_
->
ªsu…s_
.
èû_
->
√xt_
 = 
√w
 
JUnôTe°Ca£Resu…Node
;

134 
im∂_
->
ªsu…s_
.
èû_
 = im∂_->ªsu…s_.èû_->
√xt_
;

136 
im∂_
->
ªsu…s_
.
èû_
->
«me_
 = 
ã°
.
	`gëName
();

137 
	}
}

139 
Sim∂eSåög
 
	$¸óãFûeName
(c⁄° 
Sim∂eSåög
& 
group
)

141 
Sim∂eSåög
 
fûeName
 = "cpputest_";

142 
fûeName
 +
group
;

143 
fûeName
 += ".xml";

144  
fûeName
;

145 
	}
}

147 
	gJUnôTe°Ouçut
::
	$wrôeXmlHódî
()

149 
	`wrôeToFûe
("<?xml version=\"1.0\"Éncoding=\"UTF-8\" ?>\n");

150 
	}
}

152 
	gJUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

154 
Sim∂eSåög


155 
buf
 =

156 
	`SåögFromF‹m©
(

158 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
,

159 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

160 
im∂_
->
ªsu…s_
.
ã°Cou¡_
,

161 (Ë(
im∂_
->
ªsu…s_
.
groupExecTime_
 / 1000), () (impl_->results_.groupExecTime_ % 1000),

162 
	`GëPœtf‹mS≥cificTimeSåög
());

163 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

164 
	}
}

166 
	gJUnôTe°Ouçut
::
	$wrôePr›îtõs
()

168 
	`wrôeToFûe
("<properties>\n");

169 
	`wrôeToFûe
("</properties>\n");

170 
	}
}

172 
	gJUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

174 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

175 
cur
) {

176 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

178 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

179 
cur
->
«me_
.
	`asCh¨Såög
(), (Ë(cur->
execTime_
 / 1000), ()(cur->execTime_ % 1000));

180 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

182 i‡(
cur
->
Áûuª_
) {

183 
	`wrôeFaûuª
(
cur
);

185 
	`wrôeToFûe
("</testcase>\n");

186 
cur
 = cur->
√xt_
;

188 
	}
}

190 
	gJUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

192 
Sim∂eSåög
 
mesßge
 = 
node
->
Áûuª_
->
	`gëMesßge
().
	`asCh¨Såög
();

193 
mesßge
.
	`ª∂a˚
('"', '\'');

194 
mesßge
.
	`ª∂a˚
('<', '[');

195 
mesßge
.
	`ª∂a˚
('>', ']');

196 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

197 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

199 
node
->
Áûuª_
->
	`gëFûeName
().
	`asCh¨Såög
(),

200 
node
->
Áûuª_
->
	`gëFaûuªLöeNumbî
(), 
mesßge
.
	`asCh¨Såög
());

201 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

202 
	`wrôeToFûe
("</failure>\n");

203 
	}
}

205 
	gJUnôTe°Ouçut
::
	$wrôeFûeEndög
()

207 
	`wrôeToFûe
("<system-out></system-out>\n");

208 
	`wrôeToFûe
("<system-err></system-err>\n");

209 
	`wrôeToFûe
("</testsuite>");

210 
	}
}

212 
	gJUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

214 
	`›íFûeF‹Wrôe
(
	`¸óãFûeName
(
im∂_
->
ªsu…s_
.
group_
));

215 
	`wrôeXmlHódî
();

216 
	`wrôeTe°SuôeSummîy
();

217 
	`wrôePr›îtõs
();

218 
	`wrôeTe°Ca£s
();

219 
	`wrôeFûeEndög
();

220 
	`˛o£Fûe
();

221 
	}
}

223 
	gJUnôTe°Ouçut
::
	$vîbo£
()

225 
	}
}

227 
JUnôTe°Ouçut
::
	$¥öt
(const *)

229 
	}
}

231 
JUnôTe°Ouçut
::
	$¥öt
()

233 
	}
}

235 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

237 i‡(
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 == 0) {

238 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
++;

239 
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 = 
√w
 
	`Te°Faûuª
(
Áûuª
);

241 
	}
}

243 
	gJUnôTe°Ouçut
::
	$¥ötTe°Run
(, )

245 
	}
}

247 
	gJUnôTe°Ouçut
::
	$Êush
()

249 
	}
}

251 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

253 
im∂_
->
fûe_
 = 
	`Pœtf‹mS≥cificFO≥n
(
fûeName
.
	`asCh¨Såög
(), "w");

254 
	}
}

256 
	gJUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

258 
	`Pœtf‹mS≥cificFPuts
(
buf„r
.
	`asCh¨Såög
(), 
im∂_
->
fûe_
);

259 
	}
}

261 
	gJUnôTe°Ouçut
::
	$˛o£Fûe
()

263 
	`Pœtf‹mS≥cificFClo£
(
im∂_
->
fûe_
);

264 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$checkedMÆloc
(
size_t
 
size
)

34 * 
mem
 = (*Ë
	`Pœtf‹mS≥cificMÆloc
(
size
);

35 i‡(
mem
 == 0)

36 
	`FAIL
("mallocÑeturnedÇulÖointer");

37  
mem
;

38 
	}
}

40 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAŒoˇt‹
 = 0;

41 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAºayAŒoˇt‹
 = 0;

42 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítMÆlocAŒoˇt‹
 = 0;

44 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

46  
	`Pœtf‹mS≥cificSåCmp
(
this
->
	`«me
(), 
Æloˇt‹
->name()) == 0;

47 
	}
}

49 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

51 
cuºítNewAŒoˇt‹
 = 
Æloˇt‹
;

52 
	}
}

54 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAŒoˇt‹
()

56 i‡(
cuºítNewAŒoˇt‹
 =0Ë
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

57  
cuºítNewAŒoˇt‹
;

58 
	}
}

60 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹ToDeÁu…
()

62 
cuºítNewAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

63 
	}
}

65 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

67 
cuºítNewAºayAŒoˇt‹
 = 
Æloˇt‹
;

68 
	}
}

70 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAºayAŒoˇt‹
()

72 i‡(
cuºítNewAºayAŒoˇt‹
 =0Ë
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

73  
cuºítNewAºayAŒoˇt‹
;

74 
	}
}

76 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹ToDeÁu…
()

78 
cuºítNewAºayAŒoˇt‹
 = 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

79 
	}
}

81 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

83 
cuºítMÆlocAŒoˇt‹
 = 
Æloˇt‹
;

84 
	}
}

86 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítMÆlocAŒoˇt‹
()

88 i‡(
cuºítMÆlocAŒoˇt‹
 =0Ë
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89  
cuºítMÆlocAŒoˇt‹
;

90 
	}
}

92 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹ToDeÁu…
()

94 
cuºítMÆlocAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

95 
	}
}

97 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

99  
Ál£
;

100 
	}
}

102 * 
	gMem‹yLókAŒoˇt‹
::
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

104  
	`Æloc_mem‹y
(
size
, "MemoryLeakNode", 1);

105 
	}
}

107 
	gMem‹yLókAŒoˇt‹
::
	$‰ìMem‹yLókNode
(* 
mem‹y
)

109 
	`‰ì_mem‹y
(
mem‹y
, "MemoryLeakNode", 1);

110 
	}
}

112 * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

114  
	`checkedMÆloc
(
size
);

115 
	}
}

117 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

119 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

120 
	}
}

122 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$«me
()

125 
	}
}

127 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_«me
()

130 
	}
}

132 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_«me
()

135 
	}
}

137 
boﬁ
 
	gSènd¨dMÆlocAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

139  
åue
;

140 
	}
}

142 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dMÆlocAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

144 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

145  &
Æloˇt‹
;

146 
	}
}

148 * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

150  
	`checkedMÆloc
(
size
);

151 
	}
}

153 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

155 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

156 
	}
}

158 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$«me
()

161 
	}
}

163 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_«me
()

166 
	}
}

168 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_«me
()

171 
	}
}

173 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

175 
Sènd¨dNewAŒoˇt‹
 
Æloˇt‹
;

176  &
Æloˇt‹
;

177 
	}
}

179 * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

181  
	`checkedMÆloc
(
size
);

182 
	}
}

184 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

186 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

187 
	}
}

189 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$«me
()

192 
	}
}

194 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_«me
()

197 
	}
}

199 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_«me
()

202 
	}
}

204 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAºayAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

206 
Sènd¨dNewAºayAŒoˇt‹
 
Æloˇt‹
;

207  &
Æloˇt‹
;

208 
	}
}

209 * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 , const *, )

212 
	}
}

214 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_mem‹y
(* , const *, )

216 
	}
}

218 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$«me
()

221 
	}
}

223 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_«me
()

226 
	}
}

228 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_«me
()

231 
	}
}

233 
Mem‹yLókAŒoˇt‹
* 
	gNuŒUnknownAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

235 
NuŒUnknownAŒoˇt‹
 
Æloˇt‹
;

236  &
Æloˇt‹
;

237 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakDetector.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	#UNKNOWN
 ((*)("<unknown>"))

	)

34 
	gSim∂eSåögBuf„r
::
	$Sim∂eSåögBuf„r
() :

35 
	`posôi⁄s_fûÀd_
(0), 
	`wrôe_limô_
(
SIMPLE_STRING_BUFFER_LEN
-1)

37 
	}
}

39 
	gSim∂eSåögBuf„r
::
	$˛ór
()

41 
posôi⁄s_fûÀd_
 = 0;

42 
buf„r_
[0] = '\0';

43 
	}
}

45 
	gSim∂eSåögBuf„r
::
	$add
(c⁄° * 
f‹m©
, ...)

47 
cou¡
 = 0;

48 
posôi⁄s_À·
 = 
wrôe_limô_
 - 
posôi⁄s_fûÀd_
;

49 i‡(
posôi⁄s_À·
 <= 0) ;

51 
va_li°
 
¨gumíts
;

52 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

53 
cou¡
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf„r_
 + 
posôi⁄s_fûÀd_
, 
posôi⁄s_À·
+1, 
f‹m©
, 
¨gumíts
);

54 i‡(
cou¡
 > 0Ë
posôi⁄s_fûÀd_
 += count;

55 i‡(
posôi⁄s_fûÀd_
 > 
wrôe_limô_
)Öositions_filled_ = write_limit_;

56 
	`va_íd
(
¨gumíts
);

57 
	}
}

59 * 
	gSim∂eSåögBuf„r
::
	$toSåög
()

61  
buf„r_
;

62 
	}
}

64 
	gSim∂eSåögBuf„r
::
	$£tWrôeLimô
(
wrôe_limô
)

66 
wrôe_limô_
 = 
wrôe_limô
;

67 i‡(
wrôe_limô_
 > 
SIMPLE_STRING_BUFFER_LEN
-1)

68 
wrôe_limô_
 = 
SIMPLE_STRING_BUFFER_LEN
-1;

69 
	}
}

70 
	gSim∂eSåögBuf„r
::
	$ª£tWrôeLimô
()

72 
wrôe_limô_
 = 
SIMPLE_STRING_BUFFER_LEN
-1;

73 
	}
}

75 
boﬁ
 
	gSim∂eSåögBuf„r
::
	$ªachedItsC≠acôy
()

77  
posôi⁄s_fûÀd_
 >
wrôe_limô_
;

78 
	}
}

81 
	gMem‹yLókDëe˘‹Node
::
	$öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
)

83 
mem‹y_
 = 
mem‹y
;

84 
size_
 = 
size
;

85 
Æloˇt‹_
 = 
Æloˇt‹
;

86 
≥riod_
 = 
≥riod
;

87 
fûe_
 = 
fûe
;

88 
löe_
 = 
löe
;

89 
	}
}

93 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

95  
≥riod
 =
mem_Àak_≥riod_Æl
 || 
node
->
≥riod_
 =≥riod || (node->≥riod_ !
mem_Àak_≥riod_dißbÀd
 &&Öîiod =
mem_Àak_≥riod_íabÀd
);

96 
	}
}

98 
	gMem‹yLókDëe˘‹Li°
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

100 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

101 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

103 
cur
) {

104 i‡(
	`isInPîiod
(
cur
, 
≥riod
)) {

105 i‡(
¥ev
) {

106 
¥ev
->
√xt_
 = 
cur
->next_;

107 
cur
 = 
¥ev
;

110 
hód_
 = 
cur
->
√xt_
;

111 
cur
 = 
hód_
;

115 
¥ev
 = 
cur
;

116 
cur
 = cur->
√xt_
;

118 
	}
}

120 
	gMem‹yLókDëe˘‹Li°
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

122 
node
->
√xt_
 = 
hód_
;

123 
hód_
 = 
node
;

124 
	}
}

126 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$ªmoveNode
(* 
mem‹y
)

128 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

129 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

130 
cur
) {

131 i‡(
cur
->
mem‹y_
 =
mem‹y
) {

132 i‡(
¥ev
) {

133 
¥ev
->
√xt_
 = 
cur
->next_;

134  
cur
;

137 
hód_
 = 
cur
->
√xt_
;

138  
cur
;

141 
¥ev
 = 
cur
;

142 
cur
 = cur->
√xt_
;

145 
	}
}

147 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëLókFrom
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

149 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
node
; cur; cu∏cur->
√xt_
)

150 i‡(
	`isInPîiod
(
cur
, 
≥riod
))  cur;

152 
	}
}

154 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

156  
	`gëLókFrom
(
hód_
, 
≥riod
);

157 
	}
}

159 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

161  
	`gëLókFrom
(
node
->
√xt_
, 
≥riod
);

162 
	}
}

164 
	gMem‹yLókDëe˘‹Li°
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

166 
tŸÆ_Àaks
 = 0;

167 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
) {

168 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë
tŸÆ_Àaks
++;

170  
tŸÆ_Àaks
;

171 
	}
}

173 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

175 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
)

176 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë 
åue
;

177  
Ál£
;

178 
	}
}

182 
	gMem‹yLókDëe˘‹TabÀ
::
	$hash
(* 
mem‹y
)

184  ((Ë
mem‹y
Ë% 
hash_¥ime
;

185 
	}
}

187 
	gMem‹yLókDëe˘‹TabÀ
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

189 
i
 = 0; i < 
hash_¥ime
; i++)

190 
èbÀ_
[
i
].
	`˛órAŒAccou¡ög
(
≥riod
);

191 
	}
}

193 
	gMem‹yLókDëe˘‹TabÀ
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

195 
èbÀ_
[
	`hash
(
node
->
mem‹y_
)].
	`addNewNode
(node);

196 
	}
}

198 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$ªmoveNode
(* 
mem‹y
)

200  
èbÀ_
[
	`hash
(
mem‹y
)].
	`ªmoveNode
(memory);

201 
	}
}

203 
boﬁ
 
	gMem‹yLókDëe˘‹TabÀ
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

205 
i
 = 0; i < 
hash_¥ime
; i++)

206 i‡(
èbÀ_
[
i
].
	`hasLóks
(
≥riod
)Ë 
åue
;

207  
Ál£
;

208 
	}
}

210 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

212 
tŸÆ_Àaks
 = 0;

213 
i
 = 0; i < 
hash_¥ime
; i++)

214 
tŸÆ_Àaks
 +
èbÀ_
[
i
].
	`gëTŸÆLóks
(
≥riod
);

215  
tŸÆ_Àaks
;

216 
	}
}

218 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

220 
i
 = 0; i < 
hash_¥ime
; i++) {

221 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

222 i‡(
node
) Çode;

225 
	}
}

227 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
Àak
, 
MemLókPîiod
 
≥riod
)

229 
i
 = 
	`hash
(
Àak
->
mem‹y_
);

230 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëNextLók
(
Àak
, 
≥riod
);

231 i‡(
node
) Çode;

233 ++
i
; i < 
hash_¥ime
; i++) {

234 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

235 i‡(
node
) Çode;

238 
	}
}

242 
	gMem‹yLókDëe˘‹
::
	$Mem‹yLókDëe˘‹
()

244 
	}
}

246 
Mem‹yLókDëe˘‹
::
	$öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
)

248 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

249 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

250 
ªp‹ãr_
 = 
ªp‹ãr
;

251 
ouçut_buf„r_
 = 
	`Sim∂eSåögBuf„r
();

252 
mem‹yTabÀ_
 = 
	`Mem‹yLókDëe˘‹TabÀ
();

253 
	}
}

255 
	gMem‹yLókDëe˘‹
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

257 
mem‹yTabÀ_
.
	`˛órAŒAccou¡ög
(
≥riod
);

258 
	}
}

260 
	gMem‹yLókDëe˘‹
::
	$°¨tCheckög
()

262 
ouçut_buf„r_
.
	`˛ór
();

263 
cuºít_≥riod_
 = 
mem_Àak_≥riod_checkög
;

264 
	}
}

266 
	gMem‹yLókDëe˘‹
::
	$°›Checkög
()

268 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

269 
	}
}

271 
	gMem‹yLókDëe˘‹
::
	$íabÀ
()

273 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

274 
	}
}

276 
	gMem‹yLókDëe˘‹
::
	$dißbÀ
()

278 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

279 
	}
}

281 
	gMem‹yLókDëe˘‹
::
	$dißbÀAŒoˇti⁄Ty≥Checkög
()

283 
doAŒoˇti⁄Ty≥Checkög_
 = 
Ál£
;

284 
	}
}

286 
	gMem‹yLókDëe˘‹
::
	$íabÀAŒoˇti⁄Ty≥Checkög
()

288 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

289 
	}
}

291 
	gMem‹yLókDëe˘‹
::
	$ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
, 
ÆlocLöe
, 
size_t
 
ÆlocSize
, 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
, 
‰ìLöe
,

292 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
)

294 
ouçut_buf„r_
.
	`add
(
mesßge
);

295 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_ALLOC_LOCATION
, 
ÆlocFûe
, 
ÆlocLöe
, 
ÆlocSize
, 
ÆlocAŒoˇt‹
->
	`Æloc_«me
());

296 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_DEALLOC_LOCATION
, 
‰ìFûe
, 
‰ìLöe
, 
‰ìAŒoˇt‹
->
	`‰ì_«me
());

297 
ªp‹ãr_
->
	`Áû
(
ouçut_buf„r_
.
	`toSåög
());

298 
	}
}

300 
size_t
 
	$ˇlcuœãI¡Alig√dSize
(
size_t
 
size
)

302  ((Ë- (
size
 % ())) + size;

303 
	}
}

305 
size_t
 
	gMem‹yLókDëe˘‹
::
	$sizeOfMem‹yWôhC‹ru±i⁄Info
(
size_t
 
size
)

307  
	`ˇlcuœãI¡Alig√dSize
(
size
 + 
mem‹y_c‹ru±i⁄_buf„r_size
);

308 
	}
}

310 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹
::
	$gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
mem‹y_size
)

312  (
Mem‹yLókDëe˘‹Node
*Ë(
mem‹y
 + 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
mem‹y_size
));

313 
	}
}

315 
	gMem‹yLókDëe˘‹
::
	$°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
)

317 
node
->
	`öô
(
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
cuºít_≥riod_
, 
fûe
, 
löe
);

318 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
);

319 
mem‹yTabÀ_
.
	`addNewNode
(
node
);

320 
	}
}

322 * 
	gMem‹yLókDëe˘‹
::
	$ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

324 * 
√w_mem‹y
 = (*Ë(
	`Pœtf‹mS≥cificRóŒoc
(
mem‹y
, 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
)));

325 i‡(
√w_mem‹y
 =
NULL
)  NULL;

326 
Mem‹yLókDëe˘‹Node
 *
node
 = (Mem‹yLókDëe˘‹Node*Ë(
Æloˇt‹
->
	`ÆlocMem‹yLókNode
((MemoryLeakDetectorNode)));

327 
	`°‹eLókInf‹m©i⁄
(
node
, 
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

328  
node
->
mem‹y_
;

329 
	}
}

331 
	gMem‹yLókDëe˘‹
::
	$addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

333 
mem‹y
[0] = 'B';

334 
mem‹y
[1] = 'A';

335 
mem‹y
[2] = 'S';

336 
	}
}

338 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

340  
mem‹y
[0] == 'B' && memory[1] == 'A' && memory[2] == 'S';

341 
	}
}

343 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
)

345 i‡(
Æloc_Æloˇt‹
 =
‰ì_Æloˇt‹
Ë 
åue
;

346 i‡(!
doAŒoˇti⁄Ty≥Checkög_
Ë 
åue
;

347  
‰ì_Æloˇt‹
->
	`isOfEquÆTy≥
(
Æloc_Æloˇt‹
);

348 
	}
}

350 
	gMem‹yLókDëe˘‹
::
	$checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

352 i‡(!
	`m©chögAŒoˇti⁄
(
node
->
Æloˇt‹_
, 
Æloˇt‹
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
,Çode->
fûe_
,Çode->
löe_
,Çode->
size_
,Çode->Æloˇt‹_, 
fûe
, 
löe
,állocator);

353 i‡(!
	`vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_MEMORY_CORRUPTION
,Çode->
fûe_
,Çode->
löe_
,Çode->size_,Çode->
Æloˇt‹_
, 
fûe
, 
löe
, 
Æloˇt‹
);

354 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()ËÆloˇt‹->
	`‰ìMem‹yLókNode
((*Ë
node
);

355 
	}
}

357 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
)

359  
	`ÆlocMem‹y
(
Æloˇt‹
, 
size
, 
UNKNOWN
, 0);

360 
	}
}

362 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

370 * 
mem‹y
;

371 
Mem‹yLókDëe˘‹Node
* 
node
;

372 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()) {

373 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
), 
fûe
, 
löe
);

374 i‡(
mem‹y
 =
NULL
)  NULL;

375 
node
 = (
Mem‹yLókDëe˘‹Node
*Ë
Æloˇt‹
->
	`ÆlocMem‹yLókNode
((MemoryLeakDetectorNode));

378 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
Ë+ (
Mem‹yLókDëe˘‹Node
), 
fûe
, 
löe
);

379 i‡(
mem‹y
 =
NULL
)  NULL;

380 
node
 = 
	`gëNodeFromMem‹yPoöãr
(
mem‹y
, 
size
);

383 
	`°‹eLókInf‹m©i⁄
(
node
, 
mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

384  
node
->
mem‹y_
;

385 
	}
}

387 
	gMem‹yLókDëe˘‹
::
	$ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
)

389 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

390 
	}
}

392 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

394 i‡(
mem‹y
 == 0) ;

396 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

397 i‡(
node
 =
NULL
) {

398 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

401 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

402 
Æloˇt‹
->
	`‰ì_mem‹y
((*Ë
mem‹y
, 
fûe
, 
löe
);

403 
	}
}

405 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
)

407 
	`dóŒocMem‹y
(
Æloˇt‹
, (*Ë
mem‹y
, 
UNKNOWN
, 0);

408 
	}
}

410 * 
	gMem‹yLókDëe˘‹
::
	$ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

412 i‡(
mem‹y
) {

413 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
(
mem‹y
);

414 i‡(
node
 =
NULL
) {

415 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

416  
NULL
;

418 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

420  
	`ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Æloˇt‹
, 
mem‹y
, 
size
, 
fûe
, 
löe
);

421 
	}
}

423 
	gMem‹yLókDëe˘‹
::
	$C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
)

425 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
≥riod
);

426 
tŸÆ_Àaks
 = 0;

427 
boﬁ
 
giveW¨nögOnUsögMÆloc
 = 
Ál£
;

428 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_HEADER
);

429 
ouçut_buf„r_
.
	`£tWrôeLimô
(
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 - 
MEM_LEAK_NORMAL_MALLOC_FOOTER_SIZE
);

431 
Àak
) {

432 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_LEAK
, 
Àak
->
size_
,Üók->
fûe_
,Üók->
löe_
,Üók->
Æloˇt‹_
->
	`Æloc_«me
(),Üók->
mem‹y_
);

433 i‡(
Àak
->
Æloˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
())

434 
giveW¨nögOnUsögMÆloc
 = 
åue
;

435 
tŸÆ_Àaks
++;

436 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
≥riod
);

438 
boﬁ
 
buf„r_ªached_ôs_ˇ∑côy
 = 
ouçut_buf„r_
.
	`ªachedItsC≠acôy
();

439 
ouçut_buf„r_
.
	`ª£tWrôeLimô
();

440 i‡(
buf„r_ªached_ôs_ˇ∑côy
)

441 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_TOO_MUCH
);

442 
ouçut_buf„r_
.
	`add
("%†%d\n", 
MEM_LEAK_FOOTER
, 
tŸÆ_Àaks
);

443 i‡(
giveW¨nögOnUsögMÆloc
)

444 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_ADDITION_MALLOC_WARNING
);

445 
	}
}

447 c⁄° * 
	gMem‹yLókDëe˘‹
::
	$ªp‹t
(
MemLókPîiod
 
≥riod
)

449 i‡(!
mem‹yTabÀ_
.
	`hasLóks
(
≥riod
)Ë 
MEM_LEAK_NONE
;

451 
ouçut_buf„r_
.
	`˛ór
();

452 
	`C⁄°ru˘Mem‹yLókRï‹t
(
≥riod
);

454  
ouçut_buf„r_
.
	`toSåög
();

455 
	}
}

457 
	gMem‹yLókDëe˘‹
::
	$m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
()

459 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
mem_Àak_≥riod_checkög
);

460 
Àak
) {

461 i‡(
Àak
->
≥riod_
 =
mem_Àak_≥riod_checkög
ËÀak->≥riod_ = 
mem_Àak_≥riod_íabÀd
;

462 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
mem_Àak_≥riod_checkög
);

464 
	}
}

466 
	gMem‹yLókDëe˘‹
::
	$tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
)

468  
mem‹yTabÀ_
.
	`gëTŸÆLóks
(
≥riod
);

469 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakWarningPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

30 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 ˛as†
	cMem‹yLókW¨nögRï‹ãr
: 
public
 
Mem‹yLókFaûuª


36 
public
:

37 
vútuÆ
 ~
	$Mem‹yLókW¨nögRï‹ãr
()

41 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

43 
	`FAIL
(
Áû_°rög
);

44 
	}
}

47 
Mem‹yLókW¨nögRï‹ãr
* 
	gglobÆRï‹ãr
 = 0;

48 
Mem‹yLókDëe˘‹
* 
	gglobÆDëe˘‹
 = 0;

50 
	$de°royDëe˘‹
()

52 
	`Pœtf‹mS≥cificFªe
(
globÆDëe˘‹
);

53 
globÆRï‹ãr
->~
	`Mem‹yLókW¨nögRï‹ãr
();

54 
	`Pœtf‹mS≥cificFªe
(
globÆRï‹ãr
);

55 
globÆRï‹ãr
 = 0;

56 
globÆDëe˘‹
 = 0;

57 
	}
}

59 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëGlobÆDëe˘‹
()

61 i‡(
globÆDëe˘‹
 == 0) {

66 
Mem‹yLókW¨nögRï‹ãr
 
ªp‹ãr
;

67 
globÆRï‹ãr
 = (
Mem‹yLókW¨nögRï‹ãr
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakWarningReporter));

68 
	`Pœtf‹mS≥cificMemCpy
(
globÆRï‹ãr
, &
ªp‹ãr
, (
Mem‹yLókW¨nögRï‹ãr
));

70 
globÆDëe˘‹
 = (
Mem‹yLókDëe˘‹
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakDetector));

71 i‡(
globÆDëe˘‹
 == 0)

72 
	`FAIL
("operatorÇew(size, bool)ÇotÉnough memory");

73 
globÆDëe˘‹
->
	`öô
(
globÆRï‹ãr
);

75  
globÆDëe˘‹
;

76 
	}
}

78 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
fú°Plugö_
 = 0;

80 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
	$gëFú°Plugö
()

82  
fú°Plugö_
;

83 
	}
}

85 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëMem‹yLókDëe˘‹
()

87  
memLókDëe˘‹_
;

88 
	}
}

90 
	gMem‹yLókW¨nögPlugö
::
	$ign‹eAŒLóksInTe°
()

92 
ign‹eAŒW¨nögs_
 = 
åue
;

93 
	}
}

95 
	gMem‹yLókW¨nögPlugö
::
	$ex≥˘LóksInTe°
(
n
)

97 
ex≥˘edLóks_
 = 
n
;

98 
	}
}

100 
	gMem‹yLókW¨nögPlugö
::
	$Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
, 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
) :

101 
	`Te°Plugö
(
«me
), 
	`ign‹eAŒW¨nögs_
(
Ál£
), 
	$ex≥˘edLóks_
(0)

103 i‡(
fú°Plugö_
 =0Ëfú°Plugö_ = 
this
;

105 i‡(
loˇlDëe˘‹
Ë
memLókDëe˘‹_
 =ÜocalDetector;

106 
memLókDëe˘‹_
 = 
	`gëGlobÆDëe˘‹
();

108 
memLókDëe˘‹_
->
	`íabÀ
();

109 
	}
}

111 
	gMem‹yLókW¨nögPlugö
::~
	$Mem‹yLókW¨nögPlugö
()

113 i‡(
this
 =
fú°Plugö_
) firstPlugin_ = 0;

114 
	}
}

116 
	gMem‹yLókW¨nögPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& , 
Te°Resu…
& 
ªsu…
)

118 
memLókDëe˘‹_
->
	`°¨tCheckög
();

119 
ÁûuªCou¡_
 = 
ªsu…
.
	`gëFaûuªCou¡
();

120 
	}
}

122 
	gMem‹yLókW¨nögPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

124 
memLókDëe˘‹_
->
	`°›Checkög
();

125 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

127 i‡(!
ign‹eAŒW¨nögs_
 && 
ex≥˘edLóks_
 !
Àaks
 && 
ÁûuªCou¡_
 =
ªsu…
.
	`gëFaûuªCou¡
()) {

128 
Te°Faûuª
 
	`f
(&
ã°
, 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

129 
ªsu…
.
	`addFaûuª
(
f
);

131 
memLókDëe˘‹_
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

132 
ign‹eAŒW¨nögs_
 = 
Ál£
;

133 
ex≥˘edLóks_
 = 0;

134 
	}
}

136 c⁄° * 
	gMem‹yLókW¨nögPlugö
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

138 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
);

139 i‡(
Àaks
 !
toBeDñëedLóks
Ë 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_íabÀd
);

141 
	}
}

143 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


144 #unde‡
√w


146 #i‡
CPPUTEST_USE_STD_CPP_LIB


147 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
Ëi‡(mem‹y =
NULL
Ë
throw
 
°d
::
	`bad_Æloc
();

	)

148 
	#UT_THROW
(
ex˚±
Ë
	`throw
 (ex˚±)

	)

149 
	#UT_THROW_EMPTY
(Ë
	`throw
 ()

	)

151 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
)

	)

152 
	#UT_THROW
(
ex˚±
)

	)

153 
	#UT_THROW_EMPTY
()

	)

156 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

158 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
);

159 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

160  
mem‹y
;

161 
	}
}

163 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

165 *
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

166 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

167  
mem‹y
;

168 
	}
}

170 
›î©‹
 
	$dñëe
(* 
mem
Ë
	$UT_THROW_EMPTY
()

172 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

173 
	}
}

175 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
Ë
UT_THROW
(
°d
::
bad_Æloc
)

177 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
);

178 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

179  
	gmem‹y
;

182 * 
›î©‹
 
	g√w
 [](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
Ë
UT_THROW
(
°d
::
bad_Æloc
)

184 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

185 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

186  
	gmem‹y
;

189 
›î©‹
 
	gdñëe
[](* 
	gmem
Ë
	$UT_THROW_EMPTY
()

191 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\Nulls\NullJUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

39 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

40 
	$im∂_
(0)

42 
	}
}

44 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

46 
	}
}

48 
JUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

50 
	}
}

52 
JUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

54 
	}
}

56 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

58 
	}
}

60 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

62 
	}
}

64 
JUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

66 
	}
}

68 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

70 
	}
}

72 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

74 
	}
}

76 
JUnôTe°Ouçut
::
	$wrôeXmlHódî
()

78 
	}
}

80 
JUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

82 
	}
}

84 
JUnôTe°Ouçut
::
	$wrôePr›îtõs
()

86 
	}
}

88 
JUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

90 
	}
}

92 
JUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

94 
	}
}

96 
JUnôTe°Ouçut
::
	$wrôeFûeEndög
()

98 
	}
}

100 
JUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

102 
	}
}

104 
JUnôTe°Ouçut
::
	$vîbo£
()

106 
	}
}

108 
JUnôTe°Ouçut
::
	$¥öt
(const *)

110 
	}
}

112 
JUnôTe°Ouçut
::
	$¥öt
()

114 
	}
}

116 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

118 
	}
}

120 
JUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

122 
	}
}

124 
	gJUnôTe°Ouçut
::
	$Êush
()

126 
	}
}

128 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

130 
	}
}

132 
JUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

134 
	}
}

136 
JUnôTe°Ouçut
::
	$˛o£Fûe
()

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\SimpleString.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
°rögAŒoˇt‹_
 = 
NULL
;

36 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
	$gëSåögAŒoˇt‹
()

38 i‡(
°rögAŒoˇt‹_
 =
NULL
)

39  
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

40  
°rögAŒoˇt‹_
;

41 
	}
}

43 
	gSim∂eSåög
::
	$£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

45 
°rögAŒoˇt‹_
 = 
Æloˇt‹
;

46 
	}
}

49 * 
	gSim∂eSåög
::
	$ÆlocSåögBuf„r
(
size_t
 
_size
)

51  
	`gëSåögAŒoˇt‹
()->
	`Æloc_mem‹y
(
_size
, 
__FILE__
, 
__LINE__
);

52 
	}
}

54 
	gSim∂eSåög
::
	$dóŒocSåögBuf„r
(* 
°r
)

56 
	`gëSåögAŒoˇt‹
()->
	`‰ì_mem‹y
(
°r
, 
__FILE__
, 
__LINE__
);

57 
	}
}

59 * 
	gSim∂eSåög
::
	$gëEm±ySåög
() const

61 * 
em±y
 = 
	`ÆlocSåögBuf„r
(1);

62 
em±y
[0] = '\0';

63  
em±y
;

64 
	}
}

65 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
ŸhîBuf„r
)

67 i‡(
ŸhîBuf„r
 == 0) {

68 
buf„r_
 = 
	`gëEm±ySåög
();

71 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
ŸhîBuf„r
) + 1;

72 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

73 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
ŸhîBuf„r
);

75 
	}
}

77 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
Ÿhî
, 
size_t
 
ª≥©Cou¡
)

79 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
Ë* 
ª≥©Cou¡
 + 1;

80 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

81 * 
√xt
 = 
buf„r_
;

82 
size_t
 
i
 = 0; i < 
ª≥©Cou¡
; i++) {

83 
	`Pœtf‹mS≥cificSåCpy
(
√xt
, 
Ÿhî
);

84 
√xt
 +
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
);

86 *
√xt
 = 0;

88 
	}
}

89 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

91 
size_t
 
Àn
 = 
Ÿhî
.
	`size
() + 1;

92 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

93 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

94 
	}
}

96 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

98 i‡(
this
 !&
Ÿhî
) {

99 
dóŒocSåögBuf„r
(
buf„r_
);

100 
size_t
 
	gÀn
 = 
Ÿhî
.
size
() + 1;

101 
	gbuf„r_
 = 
ÆlocSåögBuf„r
(
Àn
);

102 
Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

104  *
	gthis
;

107 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

111 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

112 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

113  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) != 0;

114 
	}
}

116 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

118  
	`toLowî
().
	`c⁄èös
(
Ÿhî
.toLower());

119 
	}
}

122 
boﬁ
 
	gSim∂eSåög
::
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

124 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

125 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

126  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) == buffer_;

127 
	}
}

129 
boﬁ
 
	gSim∂eSåög
::
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

131 
size_t
 
buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

132 
size_t
 
Ÿhî_buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
);

133 i‡(
Ÿhî_buf„r_Àngth
 =0Ë 
åue
;

134 i‡(
buf„r_Àngth
 =0Ë 
Ál£
;

135 i‡(
buf„r_Àngth
 < 
Ÿhî_buf„r_Àngth
Ë 
Ál£
;

136  
	`Pœtf‹mS≥cificSåCmp
(
buf„r_
 + 
buf„r_Àngth
 - 
Ÿhî_buf„r_Àngth
, 
Ÿhî
.buffer_) == 0;

137 
	}
}

139 
size_t
 
	gSim∂eSåög
::
	$cou¡
(c⁄° 
Sim∂eSåög
& 
sub°r
) const

141 
size_t
 
num
 = 0;

142 * 
°r
 = 
buf„r_
;

143 (
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
sub°r
.
buf„r_
))) {

144 
num
++;

145 
°r
++;

147  
num
;

148 
	}
}

150 
	gSim∂eSåög
::
	$•lô
(c⁄° 
Sim∂eSåög
& 
dñimôî
, 
Sim∂eSåögCﬁÀ˘i⁄
& 
cﬁ
) const

152 
size_t
 
num
 = 
	`cou¡
(
dñimôî
);

153 
size_t
 
exåaEndTokí
 = (
	`ídsWôh
(
dñimôî
)) ? 0 : 1;

154 
cﬁ
.
	`Æloˇã
(
num
 + 
exåaEndTokí
);

156 * 
°r
 = 
buf„r_
;

157 * 
¥ev
;

158 
size_t
 
i
 = 0; i < 
num
; ++i) {

159 
¥ev
 = 
°r
;

160 
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
dñimôî
.
buf„r_
) + 1;

161 
size_t
 
Àn
 = 
°r
 - 
¥ev
;

162 * 
sub
 = 
	`ÆlocSåögBuf„r
(
Àn
 + 1);

163 
	`Pœtf‹mS≥cificSåNCpy
(
sub
, 
¥ev
, 
Àn
);

164 
sub
[
Àn
] = '\0';

165 
cﬁ
[
i
] = 
sub
;

166 
	`dóŒocSåögBuf„r
(
sub
);

168 i‡(
exåaEndTokí
) {

169 
cﬁ
[
num
] = 
°r
;

171 
	}
}

173 
	gSim∂eSåög
::
	$ª∂a˚
(
to
, 
wôh
)

175 
size_t
 
s
 = 
	`size
();

176 
size_t
 
i
 = 0; i < 
s
; i++) {

177 i‡(
buf„r_
[
i
] =
to
Ëbuf„r_[i] = 
wôh
;

179 
	}
}

181 
	gSim∂eSåög
::
	$ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
)

183 
size_t
 
c
 = 
	`cou¡
(
to
);

184 
size_t
 
Àn
 = 
	`size
();

185 
size_t
 
tﬁí
 = 
	`Pœtf‹mS≥cificSåLí
(
to
);

186 
size_t
 
wôhÀn
 = 
	`Pœtf‹mS≥cificSåLí
(
wôh
);

188 
size_t
 
√wsize
 = 
Àn
 + (
wôhÀn
 * 
c
Ë- (
tﬁí
 * c) + 1;

190 i‡(
√wsize
) {

191 * 
√wbuf
 = 
	`ÆlocSåögBuf„r
(
√wsize
);

192 
size_t
 
i
 = 0, 
j
 = 0; i < 
Àn
;) {

193 i‡(
	`Pœtf‹mS≥cificSåNCmp
(&
buf„r_
[
i
], 
to
, 
tﬁí
) == 0) {

194 
	`Pœtf‹mS≥cificSåNCpy
(&
√wbuf
[
j
], 
wôh
, 
wôhÀn
);

195 
j
 +
wôhÀn
;

196 
i
 +
tﬁí
;

199 
√wbuf
[
j
] = 
buf„r_
[
i
];

200 
j
++;

201 
i
++;

204 
	`dóŒocSåögBuf„r
(
buf„r_
);

205 
buf„r_
 = 
√wbuf
;

206 
buf„r_
[
√wsize
 - 1] = '\0';

209 
buf„r_
 = 
	`gëEm±ySåög
();

210 
buf„r_
[0] = '\0';

212 
	}
}

214 
Sim∂eSåög
 
	gSim∂eSåög
::
	$toLowî
() const

216 
Sim∂eSåög
 
	`°r
(*
this
);

218 
size_t
 
°r_size
 = 
°r
.
	`size
();

219 
size_t
 
i
 = 0; i < 
°r_size
; i++)

220 
°r
.
buf„r_
[
i
] = 
	`Pœtf‹mS≥cificToLowî
(str.buffer_[i]);

222  
°r
;

223 
	}
}

225 c⁄° *
	gSim∂eSåög
::
	$asCh¨Såög
() const

227  
buf„r_
;

228 
	}
}

230 
size_t
 
	gSim∂eSåög
::
	$size
() const

232  
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

233 
	}
}

235 
boﬁ
 
	gSim∂eSåög
::
	$isEm±y
() const

237  
	`size
() == 0;

238 
	}
}

242 
	gSim∂eSåög
::~
	$Sim∂eSåög
()

244 
	`dóŒocSåögBuf„r
(
buf„r_
);

245 
	}
}

247 
boﬁ
 
	g›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

249  0 =
Pœtf‹mS≥cificSåCmp
(
À·
.
asCh¨Såög
(), 
right
.asCharString());

252 
boﬁ
 
	gSim∂eSåög
::
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const

254  
	`toLowî
(Ë=
°r
.toLower();

255 
	}
}

258 
boﬁ
 
	g›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

260  !(
	gÀ·
 =
right
);

263 
Sim∂eSåög
 
	gSim∂eSåög
::
›î©‹
+(c⁄° Sim∂eSåög& 
rhs
)

265 
Sim∂eSåög
 
t
(
buf„r_
);

266 
	gt
 +
rhs
.
buf„r_
;

267  
	gt
;

270 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° 
Sim∂eSåög
& 
rhs
)

272  
›î©‹
+=(
rhs
.
buf„r_
);

275 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° * 
rhs
)

277 
size_t
 
Àn
 = 
this
->
size
(Ë+ 
Pœtf‹mS≥cificSåLí
(
rhs
) + 1;

278 * 
	gtbuf„r
 = 
ÆlocSåögBuf„r
(
Àn
);

279 
Pœtf‹mS≥cificSåCpy
(
tbuf„r
, 
this
->
buf„r_
);

280 
Pœtf‹mS≥cificSåC©
(
tbuf„r
, 
rhs
);

281 
dóŒocSåögBuf„r
(
buf„r_
);

282 
	gbuf„r_
 = 
tbuf„r
;

283  *
	gthis
;

286 
	gSim∂eSåög
::
	$∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
∑dCh¨a˘î
)

288 i‡(
°r1
.
	`size
(Ë> 
°r2
.size()) {

289 
	`∑dSåögsToSameLígth
(
°r2
, 
°r1
, 
∑dCh¨a˘î
);

293 
∑d
[2];

294 
∑d
[0] = 
∑dCh¨a˘î
;

295 
∑d
[1] = 0;

296 
°r1
 = 
	`Sim∂eSåög
(
∑d
, 
°r2
.
	`size
() - str1.size()) + str1;

297 
	}
}

299 
Sim∂eSåög
 
	gSim∂eSåög
::
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const

301 i‡(
begöPos
 > 
	`size
()-1)  "";

303 
Sim∂eSåög
 
√wSåög
 = 
buf„r_
 + 
begöPos
;

305 i‡(
√wSåög
.
	`size
(Ë> 
amou¡
)

306 
√wSåög
.
buf„r_
[
amou¡
] = '\0';

308  
√wSåög
;

309 
	}
}

311 
	gSim∂eSåög
::
	$c›yToBuf„r
(* 
buf„rToC›y
, 
size_t
 
buf„rSize
) const

313 i‡(
buf„rToC›y
 =
NULL
 || 
buf„rSize
 == 0) ;

315 
size_t
 
sizeToC›y
 = (
buf„rSize
-1 < 
	`size
()) ? bufferSize-1 : size();

317 
	`Pœtf‹mS≥cificSåNCpy
(
buf„rToC›y
, 
buf„r_
, 
sizeToC›y
);

318 
buf„rToC›y
[
sizeToC›y
] = '\0';

320 
	}
}

322 
Sim∂eSåög
 
	$SåögFrom
(
boﬁ
 
vÆue
)

324  
	`Sim∂eSåög
(
	`SåögFromF‹m©
("%s", 
vÆue
 ? "true" : "false"));

325 
	}
}

327 
Sim∂eSåög
 
	$SåögFrom
(c⁄° *
vÆue
)

329  
	`Sim∂eSåög
(
vÆue
);

330 
	}
}

332 
Sim∂eSåög
 
	$SåögFromOrNuŒ
(c⁄° * 
ex≥˘ed
)

334  (
ex≥˘ed
Ë? 
	`SåögFrom
(expected) : "(null)";

335 
	}
}

337 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

339  
	`SåögFromF‹m©
("%d", 
vÆue
);

340 
	}
}

342 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

344  
	`SåögFromF‹m©
("%ld", 
vÆue
);

345 
	}
}

347 
Sim∂eSåög
 
	$SåögFrom
(c⁄° * 
vÆue
)

349  
	`Sim∂eSåög
("0x"Ë+ 
	`HexSåögFrom
((Ë
vÆue
);

350 
	}
}

352 
Sim∂eSåög
 
	$HexSåögFrom
(
vÆue
)

354  
	`SåögFromF‹m©
("%lx", 
vÆue
);

355 
	}
}

357 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
, 
¥ecisi⁄
)

359 
Sim∂eSåög
 
f‹m©
 = 
	`SåögFromF‹m©
("%%.%df", 
¥ecisi⁄
);

360  
	`SåögFromF‹m©
(
f‹m©
.
	`asCh¨Såög
(), 
vÆue
);

361 
	}
}

363 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

365  
	`SåögFromF‹m©
("%c", 
vÆue
);

366 
	}
}

368 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
Sim∂eSåög
& 
vÆue
)

370  
	`Sim∂eSåög
(
vÆue
);

371 
	}
}

373 
Sim∂eSåög
 
	$SåögFromF‹m©
(c⁄° * 
f‹m©
, ...)

375 
Sim∂eSåög
 
ªsu…Såög
;

376 
va_li°
 
¨gumíts
;

377 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

379 
ªsu…Såög
 = 
	`VSåögFromF‹m©
(
f‹m©
, 
¨gumíts
);

380 
	`va_íd
(
¨gumíts
);

381  
ªsu…Såög
;

382 
	}
}

384 #i‡
CPPUTEST_USE_STD_CPP_LIB


386 
	~<°rög
>

388 
Sim∂eSåög
 
SåögFrom
(c⁄° 
°d
::
°rög
& 
vÆue
)

390  
Sim∂eSåög
(
vÆue
.
c_°r
());

393 
Sim∂eSåög
 
	$SåögFrom
(
uöt32_t
 
i
)

395  
	`SåögFromF‹m©
("%10u (0x%08x)", 
i
, i);

396 
	}
}

398 
Sim∂eSåög
 
	$SåögFrom
(
uöt16_t
 
i
)

400  
	`SåögFromF‹m©
("%5u (0x%04x)", 
i
, i);

401 
	}
}

403 
Sim∂eSåög
 
	$SåögFrom
(
uöt8_t
 
i
)

405  
	`SåögFromF‹m©
("%3u (0x%02x)", 
i
, i);

406 
	}
}

411 #i‚de‡
va_c›y


412 
	#va_c›y
(
c›y
, 
‹igöÆ
Ëc›y = origöÆ;

	)

415 
Sim∂eSåög
 
	$VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

417 
va_li°
 
¨gsC›y
;

418 
	`va_c›y
(
¨gsC›y
, 
¨gs
);

421 
sizeOfdeÁu…Buf„r
 = 100

423 
deÁu…Buf„r
[
sizeOfdeÁu…Buf„r
];

424 
Sim∂eSåög
 
ªsu…Såög
;

426 
size
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
deÁu…Buf„r
, 
sizeOfdeÁu…Buf„r
, 
f‹m©
, 
¨gs
);

427 i‡(
size
 < 
sizeOfdeÁu…Buf„r
) {

428 
ªsu…Såög
 = 
	`Sim∂eSåög
(
deÁu…Buf„r
);

431 * 
√wBuf„r
 = 
Sim∂eSåög
::
	`ÆlocSåögBuf„r
(
size
 + 1);

432 
	`Pœtf‹mS≥cificVSN¥ötf
(
√wBuf„r
, 
size
 + 1, 
f‹m©
, 
¨gsC›y
);

433 
ªsu…Såög
 = 
	`Sim∂eSåög
(
√wBuf„r
);

435 
Sim∂eSåög
::
	`dóŒocSåögBuf„r
(
√wBuf„r
);

437  
ªsu…Såög
;

438 
	}
}

440 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Sim∂eSåögCﬁÀ˘i⁄
()

442 
cﬁÀ˘i⁄_
 = 0;

443 
size_
 = 0;

444 
	}
}

446 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Æloˇã
(
size_t
 
_size
)

448 i‡(
cﬁÀ˘i⁄_
Ë
dñëe
[] collection_;

450 
size_
 = 
_size
;

451 
cﬁÀ˘i⁄_
 = 
√w
 
Sim∂eSåög
[
size_
];

452 
	}
}

454 
	gSim∂eSåögCﬁÀ˘i⁄
::~
	$Sim∂eSåögCﬁÀ˘i⁄
()

456 
dñëe
[] (
cﬁÀ˘i⁄_
);

457 
	}
}

459 
size_t
 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$size
() const

461  
size_
;

462 
	}
}

464 
	gSim∂eSåög
& 
	gSim∂eSåögCﬁÀ˘i⁄
::
›î©‹
[](
size_t
 
ödex
)

466 i‡(
ödex
 >
size_
) {

467 
em±y_
 = "";

468  
	gem±y_
;

471  
	gcﬁÀ˘i⁄_
[
ödex
];

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Faûuª.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	~<°dlib.h
>

34 
Sim∂eSåög
 
	$ªmoveAŒPröèbÀCh¨a˘îsFrom
(c⁄° 
Sim∂eSåög
& 
°r
)

36 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

37 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

38 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

40 
size_t
 
i
 = 0; i < 
buf„rSize
-1; i++)

41 i‡(
buf„r
[
i
] != '\t' && buffer[i] != '\n')

42 
buf„r
[
i
] = ' ';

44 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

45 
	`‰ì
(
buf„r
);

46  
ªsu…
;

47 
	}
}

49 
Sim∂eSåög
 
	$addM¨kîToSåög
(c⁄° 
Sim∂eSåög
& 
°r
, 
m¨kîPos
)

51 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

52 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

53 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

55 
buf„r
[
m¨kîPos
] = '^';

57 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

58 
	`‰ì
(
buf„r
);

59  
ªsu…
;

61 
	}
}

63 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

64 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	$mesßge_
(
theMesßge
)

66 
	}
}

68 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

69 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
—e°->
	`gëFûe
()), 
	`löeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`ã°FûeName_
—e°->gëFûe()), 
	`ã°LöeNumbî_
—e°->gëLöeNumbî()), 
	$mesßge_
(
theMesßge
)

71 
	}
}

73 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNum
) :

74 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNum
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`mesßge_
("no message")

76 
	}
}

78 
	gTe°Faûuª
::
	$Te°Faûuª
(c⁄° 
Te°Faûuª
& 
f
) :

79 
	`ã°Name_
(
f
.
ã°Name_
), 
	`fûeName_
(f.
fûeName_
), 
	`löeNumbî_
(f.
löeNumbî_
), 
	`ã°FûeName_
(f.
ã°FûeName_
), 
	`ã°LöeNumbî_
(f.
ã°LöeNumbî_
), 
	$mesßge_
(
f
.
mesßge_
)

81 
	}
}

84 
	gTe°Faûuª
::~
	$Te°Faûuª
()

86 
	}
}

88 
Sim∂eSåög
 
Te°Faûuª
::
	$gëFûeName
() const

90  
fûeName_
;

91 
	}
}

93 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°FûeName
() const

95  
ã°FûeName_
;

96 
	}
}

98 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°Name
() const

100  
ã°Name_
;

101 
	}
}

103 
	gTe°Faûuª
::
	$gëFaûuªLöeNumbî
() const

105  
löeNumbî_
;

106 
	}
}

108 
	gTe°Faûuª
::
	$gëTe°LöeNumbî
() const

110  
ã°LöeNumbî_
;

111 
	}
}

113 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëMesßge
() const

115  
mesßge_
;

116 
	}
}

118 
boﬁ
 
	gTe°Faûuª
::
	$isOutsideTe°Fûe
() const

120  
ã°FûeName_
 !
fûeName_
;

121 
	}
}

123 
boﬁ
 
	gTe°Faûuª
::
	$isInHñ≥rFun˘i⁄
() const

125  
löeNumbî_
 < 
ã°LöeNumbî_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãButWasSåög
(c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

130 c⁄° * 
f‹m©
 = "expected <%s>\n\tbut was <%s>";

131  
	`SåögFromF‹m©
(
f‹m©
, 
ex≥˘ed
.
	`asCh¨Såög
(), 
a˘uÆ
.asCharString());

132 
	}
}

134 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãDif„ªn˚AtPosSåög
(c⁄° 
Sim∂eSåög
& 
a˘uÆ
, 
posôi⁄
)

136 
Sim∂eSåög
 
ªsu…
;

137 c⁄° 
exåaCh¨a˘îsWödow
 = 20;

138 c⁄° 
hÆfOfExåaCh¨a˘îsWödow
 = 
exåaCh¨a˘îsWödow
 / 2;

140 
Sim∂eSåög
 
	`∑ddögF‹PªvítögOutOfBounds
 (" ", 
hÆfOfExåaCh¨a˘îsWödow
);

141 
Sim∂eSåög
 
a˘uÆSåög
 = 
∑ddögF‹PªvítögOutOfBounds
 + 
a˘uÆ
 +ÖaddingForPreventingOutOfBounds;

142 
Sim∂eSåög
 
dif„ª¡Såög
 = 
	`SåögFromF‹m©
("dif„ªn˚ sèπ†©Öosôi⁄ %dát: <", 
posôi⁄
);

144 
ªsu…
 += "\n";

145 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s>\n", 
dif„ª¡Såög
.
	`asCh¨Såög
(), 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
exåaCh¨a˘îsWödow
).asCharString());

147 
Sim∂eSåög
 
m¨kSåög
 = 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
hÆfOfExåaCh¨a˘îsWödow
+1);

148 
m¨kSåög
 = 
	`ªmoveAŒPröèbÀCh¨a˘îsFrom
(markString);

149 
m¨kSåög
 = 
	`addM¨kîToSåög
(m¨kSåög, 
hÆfOfExåaCh¨a˘îsWödow
);

151 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s", 
	`Sim∂eSåög
(" ", 
dif„ª¡Såög
.
	`size
()).
	`asCh¨Såög
(), 
m¨kSåög
.asCharString());

152  
ªsu…
;

153 
	}
}

155 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
) :

156 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

158 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrNuŒ
(
ex≥˘ed
), SåögFromOrNuŒ(
a˘uÆ
));

159 
	}
}

161 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

162 : 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

164 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

165 
	}
}

167 
Sim∂eSåög
 
	$SåögFromOrN™
(
d
)

169 i‡(
	`Pœtf‹mS≥cificIsN™
(
d
))

171  
	`SåögFrom
(
d
);

172 
	}
}

174 
	gDoubÀsEquÆFaûuª
::
	$DoubÀsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

176 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrN™
(
ex≥˘ed
), SåögFromOrN™(
a˘uÆ
));

177 
mesßge_
 += "Åhreshold used was <";

178 
mesßge_
 +
	`SåögFromOrN™
(
thªshﬁd
);

179 
mesßge_
 += ">";

181 i‡(
	`Pœtf‹mS≥cificIsN™
(
ex≥˘ed
Ë|| Pœtf‹mS≥cificIsN™(
a˘uÆ
Ë|| Pœtf‹mS≥cificIsN™(
thªshﬁd
))

182 
mesßge_
 += "\n\tCannot make comparisons with Nan";

183 
	}
}

185 
	gCheckEquÆFaûuª
::
	$CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

187 
ÁûSèπ
;

188 
ÁûSèπ
 = 0; 
a˘uÆ
.
	`asCh¨Såög
()[ÁûSèπ] =
ex≥˘ed
.asCharString()[failStart]; failStart++)

190 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

191 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

193 
	}
}

195 
	gC⁄èösFaûuª
::
	$C⁄èösFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
) :

196 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

198 c⁄° * 
f‹m©
 = "actual <%s>\n\tdidÇot contain <%s>";

199 
mesßge_
 = 
	`SåögFromF‹m©
(
f‹m©
, 
a˘uÆ
.
	`asCh¨Såög
(), 
ex≥˘ed
.asCharString());

200 
	}
}

202 
	gCheckFaûuª
::
	$CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

204 
mesßge_
 = "CHECK(";

205 
mesßge_
 +
c⁄dôi⁄Såög
;

206 
mesßge_
 += ") failed";

207 
	}
}

209 
	gFaûFaûuª
::
	$FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

211 
mesßge_
 = 
mesßge
;

212 
	}
}

214 
	gL⁄gsEquÆFaûuª
::
	$L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

216 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

217 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

218 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

219 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

221 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

222 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aHex
, 
eHex
, '0');

224 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

225 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

226 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘edRï‹ãd
, 
a˘uÆRï‹ãd
);

227 
	}
}

230 
	gSåögEquÆFaûuª
::
	$SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

232 
ÁûSèπ
;

233 
ÁûSèπ
 = 0; 
a˘uÆ
[ÁûSèπ] =
ex≥˘ed
[failStart]; failStart++)

235 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

236 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

237 
	}
}

239 
	gSåögEquÆNoCa£Faûuª
::
	$SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

241 
ÁûSèπ
;

242 
ÁûSèπ
 = 0; 
	`Pœtf‹mS≥cificToLowî
(
a˘uÆ
[ÁûSèπ]Ë=Pœtf‹mS≥cificToLowî(
ex≥˘ed
[failStart]); failStart++)

244 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

245 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

246 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestHarness_c.cpp

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

36 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

42 
	~"CµUTe°/Te°H¨√ss_c.h
"

44 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

46 
CHECK_EQUAL_LOCATION
(()
ex≥˘ed
, ()
a˘uÆ
, 
fûeName
, 
löeNumbî
);

49 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

51 
DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûeName
, 
löeNumbî
);

54 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

56 
CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

59 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

61 
STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

64 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

66 
FAIL_LOCATION
(
ãxt
, 
fûeName
, 
löeNumbî
);

69 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
)

71 
FAIL_LOCATION
("", 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

76 
CHECK_LOCATION
(((
c⁄dôi⁄
Ë=0 ? 
Ál£
 : 
åue
), 
c⁄dôi⁄Såög
, 
fûeName
, 
löeNumbî
);

79 
˝puã°_mÆloc_£t_out_of_mem‹y
()

81 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹
(
NuŒUnknownAŒoˇt‹
::
deÁu…AŒoˇt‹
());

84 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
()

86 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89 * 
˝puã°_mÆloc
(
size_t
 
size
)

91  
˝puã°_mÆloc_loˇti⁄
(
size
, "<unknown>", 0);

94 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
)

96  
˝puã°_ˇŒoc_loˇti⁄
(
num
, 
size
, "<unknown>", 0);

99 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
)

101  
˝puã°_ªÆloc_loˇti⁄
(
±r
, 
size
, "<unknown>", 0);

104 
˝puã°_‰ì
(* 
buf„r
)

106 
˝puã°_‰ì_loˇti⁄
(
buf„r
, "<unknown>", 0);

109 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

111  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), 
size
, 
fûe
, 
löe
);

114 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
, c⁄° * 
fûe
, 
löe
)

116 * 
mem
 = 
˝puã°_mÆloc_loˇti⁄
(
num
 * 
size
, 
fûe
, 
löe
);

117 
Pœtf‹mS≥cificMem£t
(
mem
, 0, 
num
*
size
);

118  
mem
;

121 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

123  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
mem‹y
, 
size
, 
fûe
, 
löe
);

126 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
)

128 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
buf„r
, 
fûe
, 
löe
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gTe°Ouçut
::
	$Te°Ouçut
() :

33 
	`dŸCou¡_
(0), 
	`vîbo£_
(
Ál£
), 
	`¥ogªssIndiˇti⁄_
(".")

35 
	}
}

37 
	gTe°Ouçut
::~
	$Te°Ouçut
()

39 
	}
}

41 
Te°Ouçut
::
	$vîbo£
()

43 
vîbo£_
 = 
åue
;

44 
	}
}

46 
	gTe°Ouçut
::
	$¥öt
(
n
)

48 
	`¥öt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

49 
	}
}

51 
	gTe°Ouçut
::
	$¥ötDoubÀ
(
d
)

53 
	`¥öt
(
	`SåögFrom
(
d
, 3).
	`asCh¨Såög
());

54 
	}
}

56 
	gTe°Ouçut
::
	$¥ötHex
(
n
)

58 
	`¥öt
(
	`HexSåögFrom
(
n
).
	`asCh¨Såög
());

59 
	}
}

61 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, c⁄° * 
	gs
)

63 
	gp
.
¥öt
(
s
);

64  
	gp
;

67 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, 
	gi
)

69 
	gp
.
¥öt
(
i
);

70  
	gp
;

73 
	gTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

75 i‡(
vîbo£_
Ë
	`¥öt
(
ã°
.
	`gëF‹m©ãdName
().
	`asCh¨Såög
());

76 
	}
}

78 
	gTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
)

80 i‡(
vîbo£_
) {

81 
	`¥öt
(" - ");

82 
	`¥öt
(
ªs
.
	`gëCuºítTe°TŸÆExecuti⁄Time
());

83 
	`¥öt
(" ms\n");

86 
	`¥ötProgªssIndiˇt‹
();

88 
	}
}

90 
	gTe°Ouçut
::
	$¥ötProgªssIndiˇt‹
()

92 
	`¥öt
(
¥ogªssIndiˇti⁄_
);

93 i‡(++
dŸCou¡_
 % 50 =0Ë
	`¥öt
("\n");

94 
	}
}

96 
	gTe°Ouçut
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

98 
¥ogªssIndiˇti⁄_
 = 
ödiˇt‹
;

99 
	}
}

101 
	gTe°Ouçut
::
	$¥ötTe°sSèπed
()

103 
	}
}

105 
Te°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

107 
	}
}

109 
Te°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& )

111 
	}
}

113 
Te°Ouçut
::
	$Êush
()

115 
	}
}

117 
Te°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

119 i‡(
ªsu…
.
	`gëFaûuªCou¡
() > 0) {

120 
	`¥öt
("\nErrors (");

121 
	`¥öt
(
ªsu…
.
	`gëFaûuªCou¡
());

122 
	`¥öt
(" failures, ");

125 
	`¥öt
("\nOK (");

127 
	`¥öt
(
ªsu…
.
	`gëTe°Cou¡
());

128 
	`¥öt
("Åests, ");

129 
	`¥öt
(
ªsu…
.
	`gëRunCou¡
());

130 
	`¥öt
("Ñan, ");

131 
	`¥öt
(
ªsu…
.
	`gëCheckCou¡
());

132 
	`¥öt
(" checks, ");

133 
	`¥öt
(
ªsu…
.
	`gëIgn‹edCou¡
());

134 
	`¥öt
(" ignored, ");

135 
	`¥öt
(
ªsu…
.
	`gëFûãªdOutCou¡
());

136 
	`¥öt
(" filtered out, ");

137 
	`¥öt
(
ªsu…
.
	`gëTŸÆExecuti⁄Time
());

138 
	`¥öt
(" ms)\n\n");

139 
	}
}

141 
	gTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

143 i‡(
tŸÆ
 > 1) {

144 
	`¥öt
("TestÑun ");

145 
	`¥öt
(
numbî
);

146 
	`¥öt
(" of ");

147 
	`¥öt
(
tŸÆ
);

148 
	`¥öt
("\n");

150 
	}
}

152 
	gTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

154 i‡(
Áûuª
.
	`isOutsideTe°Fûe
(Ë|| faûuª.
	`isInHñ≥rFun˘i⁄
())

155 
	`¥ötFûeAndLöeF‹Te°AndFaûuª
(
Áûuª
);

157 
	`¥ötFûeAndLöeF‹Faûuª
(
Áûuª
);

159 
	`¥ötFaûuªMesßge
(
Áûuª
.
	`gëMesßge
());

160 
	}
}

162 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

164 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëTe°FûeName
(), faûuª.
	`gëTe°LöeNumbî
());

165 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

166 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

167 
	}
}

169 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

171 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

172 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

173 
	}
}

175 
	gTe°Ouçut
::
	$¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
)

177 
	`¥öt
(" Failure in ");

178 
	`¥öt
(
ã°Name
.
	`asCh¨Såög
());

179 
	}
}

181 
	gTe°Ouçut
::
	$¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
)

183 
	`¥öt
("\n");

184 
	`¥öt
("\t");

185 
	`¥öt
(
ªas⁄
.
	`asCh¨Såög
());

186 
	`¥öt
("\n\n");

187 
	}
}

189 
	gTe°Ouçut
::
	$¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
fûe
, 
löeNumbî
)

191 
	`¥öt
("\n");

192 
	`¥öt
(
fûe
.
	`asCh¨Såög
());

193 
	`¥öt
(":");

194 
	`¥öt
(
löeNumbî
);

195 
	`¥öt
(":");

196 
	`¥öt
("Érror:");

197 
	}
}

199 
	gC⁄sﬁeTe°Ouçut
::
	$¥öt
(c⁄° * 
s
)

201 *
s
) {

202 i‡('\n' =*
s
Ë
	`Pœtf‹mS≥cificPutch¨
('\r');

203 
	`Pœtf‹mS≥cificPutch¨
(*
s
);

204 
s
++;

206 
	`Êush
();

207 
	}
}

209 
	gC⁄sﬁeTe°Ouçut
::
	$Êush
()

211 
	`Pœtf‹mS≥cificFlush
();

212 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	gTe°Plugö
::
	$Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

32 
	`√xt_
(
NuŒTe°Plugö
::
	`ö°™˚
()), 
	`«me_
(
«me
), 
	$íabÀd_
(
åue
)

34 
	}
}

36 
	gTe°Plugö
::
	$Te°Plugö
(
Te°Plugö
* 
√xt
) :

37 
	`√xt_
(
√xt
), 
	`«me_
("null")

39 
	}
}

41 
	gTe°Plugö
::~
	$Te°Plugö
()

43 
	}
}

45 
Te°Plugö
* Te°Plugö::
	$addPlugö
(
Te°Plugö
* 
∂ugö
)

47 
√xt_
 = 
∂ugö
;

48  
this
;

49 
	}
}

51 
	gTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

53 i‡(
íabÀd_
Ë
	`¥eTe°A˘i⁄
(
ã°
, 
ªsu…
);

54 
√xt_
->
	`runAŒPªTe°A˘i⁄
(
ã°
, 
ªsu…
);

55 
	}
}

57 
	gTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

59 
√xt_
 ->
	`runAŒPo°Te°A˘i⁄
(
ã°
, 
ªsu…
);

60 i‡(
íabÀd_
Ë
	`po°Te°A˘i⁄
(
ã°
, 
ªsu…
);

61 
	}
}

63 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
)

65  
	`∑r£AŒArgumíts
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
), 
ödex
);

66 
	}
}

68 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

70 i‡(
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
)Ë 
åue
;

71 i‡(
√xt_
ËÇext_->
	`∑r£AŒArgumíts
(
ac
, 
av
, 
ödex
);

72  
Ál£
;

73 
	}
}

75 c⁄° 
	gSim∂eSåög
& 
	gTe°Plugö
::
	$gëName
()

77  
«me_
;

78 
	}
}

80 
Te°Plugö
* 
	gTe°Plugö
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

82 i‡(
«me
 =
«me_
Ë 
this
;

83 i‡(
√xt_
ËÇext_->
	`gëPlugöByName
(
«me
);

84  (
√xt_
);

85 
	}
}

87 
Te°Plugö
* 
	gTe°Plugö
::
	$gëNext
()

89  
√xt_
;

90 
	}
}

91 
Te°Plugö
* 
	gTe°Plugö
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

93 
Te°Plugö
* 
ªmoved
 = 0;

94 i‡(
√xt_
 &&Çext_->
	`gëName
(Ë=
«me
) {

95 
ªmoved
 = 
√xt_
;

96 
√xt_
 =Çext_->next_;

98  
ªmoved
;

99 
	}
}

101 
	gTe°Plugö
::
	$dißbÀ
()

103 
íabÀd_
 = 
Ál£
;

104 
	}
}

106 
	gTe°Plugö
::
	$íabÀ
()

108 
íabÀd_
 = 
åue
;

109 
	}
}

111 
boﬁ
 
	gTe°Plugö
::
	$isE«bÀd
()

113  
íabÀd_
;

114 
	}
}

116 
	s˝puã°_∑ú


118 **
	m‹ig
;

119 *
	m‹ig_vÆue
;

124 
	gpoöãrTabÀIndex
;

125 
˝puã°_∑ú
 
	g£éi°
[
SëPoöãrPlugö
::
MAX_SET
];

127 
	gSëPoöãrPlugö
::
	$SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

128 
	$Te°Plugö
(
«me
)

130 
poöãrTabÀIndex
 = 0;

131 
	}
}

133 
	gSëPoöãrPlugö
::~
	$SëPoöãrPlugö
()

135 
	}
}

137 
	$CµUTe°St‹e
(**
fun˘i⁄
, *
vÆue
)

139 i‡(
poöãrTabÀIndex
 >
SëPoöãrPlugö
::
MAX_SET
) {

140 
	`FAIL
("MaximumÇumber of functionÖointers installed!");

142 
£éi°
[
poöãrTabÀIndex
].
‹ig_vÆue
 = 
vÆue
;

143 
£éi°
[
poöãrTabÀIndex
].
‹ig
 = 
fun˘i⁄
;

144 
poöãrTabÀIndex
++;

145 
	}
}

147 
	gSëPoöãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& , 
Te°Resu…
& )

149 
i
 = 
poöãrTabÀIndex
 - 1; i >= 0; i--)

150 *((**Ë
£éi°
[
i
].
‹ig
Ë£éi°[i].
‹ig_vÆue
;

151 
poöãrTabÀIndex
 = 0;

152 
	}
}

156 
	gNuŒTe°Plugö
::
	$NuŒTe°Plugö
() :

157 
	$Te°Plugö
(0)

159 
	}
}

161 
NuŒTe°Plugö
* NuŒTe°Plugö::
	$ö°™˚
()

163 
NuŒTe°Plugö
 
_ö°™˚
;

164  &
_ö°™˚
;

165 
	}
}

167 
	gNuŒTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

169 
	}
}

171 
	gNuŒTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestRegistry.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	gTe°Regi°ry
::
	$Te°Regi°ry
() :

32 
	`ã°s_
(&
NuŒTe°
::
	`ö°™˚
()), 
	`«meFûãr_
(0), 
	`groupFûãr_
(0), 
	`fú°Plugö_
(
NuŒTe°Plugö
::
	$ö°™˚
())

34 
	}
}

36 
Te°Regi°ry
::~
	$Te°Regi°ry
()

38 
	`˛ónup
();

39 
	}
}

41 
	gTe°Regi°ry
::
	$˛ónup
()

43 
dñëe
 
«meFûãr_
;

44 
dñëe
 
groupFûãr_
;

45 
«meFûãr_
 = 0;

46 
groupFûãr_
 = 0;

47 
	}
}

49 
	gTe°Regi°ry
::
	$addTe°
(
Uã°
 *
ã°
)

51 
ã°s_
 = 
ã°
->
	`addTe°
(tests_);

52 
	}
}

54 
	gTe°Regi°ry
::
	$runAŒTe°s
(
Te°Resu…
& 
ªsu…
)

56 
boﬁ
 
groupSèπ
 = 
åue
;

58 
ªsu…
.
	`ã°sSèπed
();

59 
Uã°
 *
ã°
 = 
ã°s_
; !ã°->
	`isNuŒ
();Åe° =Åe°->
	`gëNext
()) {

61 i‡(
groupSèπ
) {

62 
ªsu…
.
	`cuºítGroupSèπed
(
ã°
);

63 
groupSèπ
 = 
Ál£
;

66 
ªsu…
.
	`£tProgªssIndiˇt‹
(
ã°
->
	`gëProgªssIndiˇt‹
());

67 
ªsu…
.
	`cou¡Te°
();

68 i‡(
	`ã°ShouldRun
(
ã°
, 
ªsu…
)) {

69 
ªsu…
.
	`cuºítTe°Sèπed
(
ã°
);

70 
ã°
->
	`runO√Te°WôhPlugös
(
fú°Plugö_
, 
ªsu…
);

71 
ªsu…
.
	`cuºítTe°Ended
(
ã°
);

74 i‡(
	`ídOfGroup
(
ã°
)) {

75 
groupSèπ
 = 
åue
;

76 
ªsu…
.
	`cuºítGroupEnded
(
ã°
);

79 
ªsu…
.
	`ã°sEnded
();

80 
	}
}

82 
boﬁ
 
	gTe°Regi°ry
::
	$ídOfGroup
(
Uã°
* 
ã°
)

84  (
ã°
->
	`isNuŒ
(Ë||Åe°->
	`gëGroup
(Ë!ã°->
	`gëNext
()->getGroup());

85 
	}
}

87 
	gTe°Regi°ry
::
	$cou¡Te°s
()

89  
ã°s_
->
	`cou¡Te°s
();

90 
	}
}

92 
Te°Regi°ry
* 
	gTe°Regi°ry
::
cuºítRegi°ry_
 = 0;

94 
Te°Regi°ry
* 
	gTe°Regi°ry
::
	$gëCuºítRegi°ry
()

96 
Te°Regi°ry
 
ªgi°ry
;

97  (
cuºítRegi°ry_
 =0Ë? &
ªgi°ry
 : currentRegistry_;

98 
	}
}

100 
	gTe°Regi°ry
::
	$£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
)

102 
cuºítRegi°ry_
 = 
ªgi°ry
;

103 
	}
}

105 
	gTe°Regi°ry
::
	$unDoLa°AddTe°
()

107 
ã°s_
 =Åe°s_->
	`gëNext
();

109 
	}
}

111 
	gTe°Regi°ry
::
	$«meFûãr
(
Sim∂eSåög
 
f
)

113 
dñëe
 
«meFûãr_
;

114 
«meFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

115 
	}
}

117 
	gTe°Regi°ry
::
	$groupFûãr
(
Sim∂eSåög
 
f
)

119 
dñëe
 
groupFûãr_
;

120 
groupFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

121 
	}
}

123 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëGroupFûãr
()

125  *
groupFûãr_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëNameFûãr
()

130  *
«meFûãr_
;

131 
	}
}

133 
boﬁ
 
	gTe°Regi°ry
::
	$ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

135 i‡(
groupFûãr_
 =0ËgroupFûãr_ = 
√w
 
	`Sim∂eSåög
();

136 i‡(
«meFûãr_
 =0Ë«meFûãr_ = 
√w
 
	`Sim∂eSåög
();

137 i‡(
ã°
->
	`shouldRun
(*
groupFûãr_
, *
«meFûãr_
)Ë 
åue
;

139 
ªsu…
.
	`cou¡FûãªdOut
();

140  
Ál£
;

142 
	}
}

144 
	gTe°Regi°ry
::
	$ª£tPlugös
()

146 
fú°Plugö_
 = 
NuŒTe°Plugö
::
	`ö°™˚
();

147 
	}
}

149 
	gTe°Regi°ry
::
	$ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
)

151 
fú°Plugö_
 = 
∂ugö
->
	`addPlugö
(firstPlugin_);

152 
	}
}

154 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëFú°Plugö
()

156  
fú°Plugö_
;

157 
	}
}

159 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

161  
fú°Plugö_
->
	`gëPlugöByName
(
«me
);

162 
	}
}

164 
	gTe°Regi°ry
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

166 i‡(
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
Ë=fú°Plugö_Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

167 i‡(
fú°Plugö_
->
	`gëName
(Ë=
«me
Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

168 
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
);

169 
	}
}

171 
Uã°
* 
	gTe°Regi°ry
::
	$gëFú°Te°
()

173  
ã°s_
;

174 
	}
}

176 
Uã°
* 
	gTe°Regi°ry
::
	$gëLa°Te°
()

178 
Uã°
* 
cuºít
 = 
ã°s_
;

179 !
cuºít
->
	`gëNext
()->
	`isNuŒ
())

180 
cuºít
 = cuºít->
	`gëNext
();

181  
cuºít
;

182 
	}
}

184 
Uã°
* 
	gTe°Regi°ry
::
	$gëTe°WôhNext
(
Uã°
* 
ã°
)

186 
Uã°
* 
cuºít
 = 
ã°s_
;

187 !
cuºít
->
	`gëNext
()->
	`isNuŒ
(Ë&& cuºít->gëNext(Ë!
ã°
)

188 
cuºít
 = cuºít->
	`gëNext
();

189  
cuºít
;

190 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestResult.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Resu….h
"

30 
	~"CµUTe°/Te°Faûuª.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	gTe°Resu…
::
	$Te°Resu…
(
Te°Ouçut
& 
p
) :

35 
	`ouçut_
(
p
), 
	`ã°Cou¡_
(0), 
	`runCou¡_
(0), 
	`checkCou¡_
(0), 
	`ÁûuªCou¡_
(0), 
	`fûãªdOutCou¡_
(0), 
	`ign‹edCou¡_
(0), 
	`tŸÆExecuti⁄Time_
(0), 
	`timeSèπed_
(0), 
	`cuºítTe°TimeSèπed_
(0),

36 
	`cuºítTe°TŸÆExecuti⁄Time_
(0), 
	`cuºítGroupTimeSèπed_
(0), 
	$cuºítGroupTŸÆExecuti⁄Time_
(0)

38 
	}
}

40 
	gTe°Resu…
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

42 
ouçut_
.
	`£tProgªssIndiˇt‹
(
ödiˇt‹
);

43 
	}
}

45 
	gTe°Resu…
::~
	$Te°Resu…
()

47 
	}
}

49 
Te°Resu…
::
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

51 
ouçut_
.
	`¥ötCuºítGroupSèπed
(*
ã°
);

52 
cuºítGroupTimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

53 
	}
}

55 
	gTe°Resu…
::
	$cuºítGroupEnded
(
Uã°
* )

57 
cuºítGroupTŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítGroupTimeSèπed_
;

58 
ouçut_
.
	`¥ötCuºítGroupEnded
(*
this
);

59 
	}
}

61 
	gTe°Resu…
::
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

63 
ouçut_
.
	`¥ötCuºítTe°Sèπed
(*
ã°
);

64 
cuºítTe°TimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

65 
	}
}

67 
	gTe°Resu…
::
	$¥öt
(c⁄° * 
ãxt
)

69 
ouçut_
.
	`¥öt
(
ãxt
);

70 
	}
}

72 
	gTe°Resu…
::
	$cuºítTe°Ended
(
Uã°
* )

74 
cuºítTe°TŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítTe°TimeSèπed_
;

75 
ouçut_
.
	`¥ötCuºítTe°Ended
(*
this
);

77 
	}
}

79 
	gTe°Resu…
::
	$addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

81 
ouçut_
.
	`¥öt
(
Áûuª
);

82 
ÁûuªCou¡_
++;

83 
	}
}

85 
	gTe°Resu…
::
	$cou¡Te°
()

87 
ã°Cou¡_
++;

88 
	}
}

90 
	gTe°Resu…
::
	$cou¡Run
()

92 
runCou¡_
++;

93 
	}
}

95 
	gTe°Resu…
::
	$cou¡Check
()

97 
checkCou¡_
++;

98 
	}
}

100 
	gTe°Resu…
::
	$cou¡FûãªdOut
()

102 
fûãªdOutCou¡_
++;

103 
	}
}

105 
	gTe°Resu…
::
	$cou¡Ign‹ed
()

107 
ign‹edCou¡_
++;

108 
	}
}

110 
	gTe°Resu…
::
	$ã°sSèπed
()

112 
timeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

113 
ouçut_
.
	`¥ötTe°sSèπed
();

114 
	}
}

116 
	gTe°Resu…
::
	$ã°sEnded
()

118 
timeEnded
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

119 
tŸÆExecuti⁄Time_
 = 
timeEnded
 - 
timeSèπed_
;

120 
ouçut_
.
	`¥ötTe°sEnded
(*
this
);

121 
	}
}

123 
	gTe°Resu…
::
	$gëTŸÆExecuti⁄Time
() const

125  
tŸÆExecuti⁄Time_
;

126 
	}
}

128 
	gTe°Resu…
::
	$£tTŸÆExecuti⁄Time
(
exTime
)

130 
tŸÆExecuti⁄Time_
 = 
exTime
;

131 
	}
}

133 
	gTe°Resu…
::
	$gëCuºítTe°TŸÆExecuti⁄Time
() const

135  
cuºítTe°TŸÆExecuti⁄Time_
;

136 
	}
}

138 
	gTe°Resu…
::
	$gëCuºítGroupTŸÆExecuti⁄Time
() const

140  
cuºítGroupTŸÆExecuti⁄Time_
;

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\Utest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

33 
boﬁ
 
	$doubÀs_equÆ
(
d1
, 
d2
, 
thªshﬁd
)

35 i‡(
	`Pœtf‹mS≥cificIsN™
(
d1
Ë|| Pœtf‹mS≥cificIsN™(
d2
Ë|| Pœtf‹mS≥cificIsN™(
thªshﬁd
))

36  
Ál£
;

37  
	`Pœtf‹mS≥cificFabs
(
d1
 - 
d2
Ë< 
thªshﬁd
;

38 
	}
}

44 ˛as†
	cOutsideTe°Ru¬îUTe°
: 
public
 
Uã°


46 
public
:

47 
OutsideTe°Ru¬îUTe°
& 
	$ö°™˚
()

49 
OutsideTe°Ru¬îUTe°
 
ö°™˚_
;

50  
ö°™˚_
;

52 
vútuÆ
 
Te°Resu…
& 
	$gëTe°Resu…
()

54  
deÁu…Te°Resu…
;

55 
	}
}

56 
vútuÆ
 
	$exôCuºítTe°
()

58 
	}
}

59 
	gvútuÆ
 ~
	$OutsideTe°Ru¬îUTe°
()

61 
	}
}

62 
	g¥iv©e
:

63 
	$OutsideTe°Ru¬îUTe°
() :

64 
	`Uã°
("\n\t NOTE: Assertion happened without being ináÅestÑun (perhaps in main?)", "\n\t Something is very wrong. CheckÅhisássertionánd fix", "unknown file", 0),

65 
	$deÁu…Te°Resu…
(
deÁu…Ouçut
)

67 
	}
}

68 
C⁄sﬁeTe°Ouçut
 
	gdeÁu…Ouçut
;

69 
Te°Resu…
 
	gdeÁu…Te°Resu…
;

73 
	gUã°
::
	$Uã°
() :

74 
	`group_
("UndeföedTe°Group"), 
	`«me_
("UndeföedTe°"), 
	`fûe_
("UndeföedFûe"), 
	`löeNumbî_
(0), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

76 
	}
}

78 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
) :

79 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

81 
	}
}

83 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Uã°
* 
√xtTe°
) :

84 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	$√xt_
(
√xtTe°
)

86 
	}
}

88 
	gUã°
::~
	$Uã°
()

90 
	}
}

92 
Uã°
::
	$runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

94 
	`execuãPœtf‹mS≥cificRunO√Te°
(
∂ugö
, 
ªsu…
);

95 
	}
}

97 
	gUã°
::
	$runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

99 
∂ugö
->
	`runAŒPªTe°A˘i⁄
(*
this
, 
ªsu…
);

100 
	`run
(
ªsu…
);

101 
∂ugö
->
	`runAŒPo°Te°A˘i⁄
(*
this
, 
ªsu…
);

102 
	}
}

104 
	gUã°
::
	$run
(
Te°Resu…
& 
ªsu…
)

107 
Uã°
* 
ßvedTe°
 = 
	`gëCuºít
();

108 
Te°Resu…
* 
ßvedResu…
 = 
	`gëTe°Resu…
();

110 
ªsu…
.
	`cou¡Run
();

111 
	`£tTe°Resu…
(&
ªsu…
);

112 
	`£tCuºítTe°
(
this
);

114 i‡(
	`execuãPœtf‹mS≥cificSëup
()) {

115 
	`execuãPœtf‹mS≥cificTe°Body
();

117 
	`execuãPœtf‹mS≥cificTórdown
();

119 
	`£tCuºítTe°
(
ßvedTe°
);

120 
	`£tTe°Resu…
(
ßvedResu…
);

121 
	}
}

123 
	gUã°
::
	$exôCuºítTe°
()

125 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

126 
	}
}

128 
Uã°
 *
	gUã°
::
	$gëNext
() const

130  
√xt_
;

131 
	}
}

133 
Uã°
* 
	gUã°
::
	$addTe°
(
Uã°
 *
ã°
)

135 
√xt_
 = 
ã°
;

136  
this
;

137 
	}
}

139 
	gUã°
::
	$cou¡Te°s
()

141  
√xt_
->
	`cou¡Te°s
() + 1;

142 
	}
}

144 
boﬁ
 
	gUã°
::
	$isNuŒ
() const

146  
Ál£
;

147 
	}
}

149 
Sim∂eSåög
 
	gUã°
::
	$gëMa¸oName
() const

152 
	}
}

154 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëName
() const

156  
	`Sim∂eSåög
(
«me_
);

157 
	}
}

159 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëGroup
() const

161  
	`Sim∂eSåög
(
group_
);

162 
	}
}

164 
Sim∂eSåög
 
	gUã°
::
	$gëF‹m©ãdName
() const

166 
Sim∂eSåög
 
	`f‹m©ãdName
(
	`gëMa¸oName
());

167 
f‹m©ãdName
 += "(";

168 
f‹m©ãdName
 +
group_
;

169 
f‹m©ãdName
 += ", ";

170 
f‹m©ãdName
 +
«me_
;

171 
f‹m©ãdName
 += ")";

173  
f‹m©ãdName
;

174 
	}
}

176 c⁄° * 
	gUã°
::
	$gëProgªssIndiˇt‹
() const

179 
	}
}

181 
	gUã°
::
	$£tFûeName
(c⁄° * 
fûeName
)

183 
fûe_
 = 
fûeName
;

184 
	}
}

186 
	gUã°
::
	$£tLöeNumbî
(
löeNumbî
)

188 
löeNumbî_
 = 
löeNumbî
;

189 
	}
}

191 
	gUã°
::
	$£tGroupName
(c⁄° * 
groupName
)

193 
group_
 = 
groupName
;

194 
	}
}

196 
	gUã°
::
	$£tTe°Name
(c⁄° * 
ã°Name
)

198 
«me_
 = 
ã°Name
;

199 
	}
}

201 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëFûe
() const

203  
	`Sim∂eSåög
(
fûe_
);

204 
	}
}

206 
	gUã°
::
	$gëLöeNumbî
() const

208  
löeNumbî_
;

209 
	}
}

211 
	gUã°
::
	$£tup
()

213 
	}
}

215 
Uã°
::
	$ã°Body
()

217 
	}
}

219 
Uã°
::
	$ã¨down
()

221 
	}
}

223 
boﬁ
 
Uã°
::
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const

225 
Sim∂eSåög
 
	`group
(
group_
);

226 
Sim∂eSåög
 
	`«me
(
«me_
);

227 i‡(
group
.
	`c⁄èös
(
groupFûãr
Ë&& 
«me
.c⁄èös(
«meFûãr
)Ë 
åue
;

229  
Ál£
;

230 
	}
}

232 
	gUã°
::
	$ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
)

234 
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

235 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

236 
	}
}

238 
	gUã°
::
	$as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

240 
	`gëTe°Resu…
()->
	`cou¡Check
();

241 i‡(!
c⁄dôi⁄
)

242 
	`ÁûWôh
(
	`CheckFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
c⁄dôi⁄Såög
));

243 
	}
}

245 
	gUã°
::
	$Áû
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

247 
	`ÁûWôh
(
	`FaûFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ãxt
));

248 
	}
}

250 
	gUã°
::
	$as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

252 
	`gëTe°Resu…
()->
	`cou¡Check
();

253 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

254 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

255 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

256 i‡(
	`Pœtf‹mS≥cificSåCmp
(
ex≥˘ed
, 
a˘uÆ
) != 0)

257 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

258 
	}
}

260 
	gUã°
::
	$as£πC°rNoCa£EquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

262 
	`gëTe°Resu…
()->
	`cou¡Check
();

263 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

264 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

265 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

266 i‡(!
	`Sim∂eSåög
(
ex≥˘ed
).
	`equÆsNoCa£
(
a˘uÆ
))

267 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

268 
	}
}

270 
	gUã°
::
	$as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

272 
	`gëTe°Resu…
()->
	`cou¡Check
();

273 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

274 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

275 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

276 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èös
(
ex≥˘ed
))

277 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

278 
	}
}

280 
	gUã°
::
	$as£πC°rNoCa£C⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

282 
	`gëTe°Resu…
()->
	`cou¡Check
();

283 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

284 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

285 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

286 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èösNoCa£
(
ex≥˘ed
))

287 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

288 
	}
}

290 
	gUã°
::
	$as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

292 
	`gëTe°Resu…
()->
	`cou¡Check
();

293 i‡(
ex≥˘ed
 !
a˘uÆ
) {

294 
L⁄gsEquÆFaûuª
 
	`f
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

295 
	`gëTe°Resu…
()->
	`addFaûuª
(
f
);

296 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

298 
	}
}

300 
	gUã°
::
	$as£πPoöãrsEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

302 
	`gëTe°Resu…
()->
	`cou¡Check
();

303 i‡(
ex≥˘ed
 !
a˘uÆ
)

304 
	`ÁûWôh
(
	`EquÆsFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)));

305 
	}
}

307 
	gUã°
::
	$as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

309 
	`gëTe°Resu…
()->
	`cou¡Check
();

310 i‡(!
	`doubÀs_equÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
))

311 
	`ÁûWôh
(
	`DoubÀsEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
));

312 
	}
}

314 
	gUã°
::
	$¥öt
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

316 
Sim∂eSåög
 
°rögToPröt
 = "\n";

317 
°rögToPröt
 +
fûeName
;

318 
°rögToPröt
 += ":";

319 
°rögToPröt
 +
	`SåögFrom
(
löeNumbî
);

320 
°rögToPröt
 += " ";

321 
°rögToPröt
 +
ãxt
;

322 
	`gëTe°Resu…
()->
	`¥öt
(
°rögToPröt
.
	`asCh¨Såög
());

323 
	}
}

325 
	gUã°
::
	$¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

327 
	`¥öt
(
ãxt
.
	`asCh¨Såög
(), 
fûeName
, 
löeNumbî
);

328 
	}
}

330 
Te°Resu…
* 
	gUã°
::
ã°Resu…_
 = 
NULL
;

331 
Uã°
* 
	gUã°
::
cuºítTe°_
 = 
NULL
;

333 
	gUã°
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

335 
ã°Resu…_
 = 
ªsu…
;

336 
	}
}

338 
	gUã°
::
	$£tCuºítTe°
(
Uã°
* 
ã°
)

340 
cuºítTe°_
 = 
ã°
;

341 
	}
}

343 
Te°Resu…
* 
	gUã°
::
	$gëTe°Resu…
()

345 i‡(
ã°Resu…_
 =
NULL
)

346  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
().
	`gëTe°Resu…
();

347  
ã°Resu…_
;

348 
	}
}

350 
Uã°
* 
	gUã°
::
	$gëCuºít
()

352 i‡(
cuºítTe°_
 =
NULL
)

353  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
();

354  
cuºítTe°_
;

355 
	}
}

360 
	gNuŒTe°
::
	$NuŒTe°
() :

361 
	`Uã°
("NullGroup", "NullName", "NullFile", -1, 0)

363 
	}
}

365 
	gNuŒTe°
::
	$NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
) :

366 
	`Uã°
("NuŒGroup", "NuŒName", 
fûeName
, 
löeNumbî
, 0)

368 
	}
}

370 
	gNuŒTe°
::~
	$NuŒTe°
()

372 
	}
}

374 
NuŒTe°
& NuŒTe°::
	$ö°™˚
()

376 
NuŒTe°
 
_ö°™˚
;

377  
_ö°™˚
;

378 
	}
}

380 
	gNuŒTe°
::
	$cou¡Te°s
()

383 
	}
}

385 
Uã°
* 
	gNuŒTe°
::
	$gëNext
() const

387  &
	`ö°™˚
();

388 
	}
}

390 
boﬁ
 
	gNuŒTe°
::
	$isNuŒ
() const

392  
åue
;

393 
	}
}

397 
	gTe°In°ÆÀr
::
	$Te°In°ÆÀr
(
Uã°
* 
t
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
)

399 
t
->
	`£tGroupName
(
groupName
);

400 
t
->
	`£tTe°Name
(
ã°Name
);

401 
t
->
	`£tFûeName
(
fûeName
);

402 
t
->
	`£tLöeNumbî
(
löeNumbî
);

403 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`addTe°
(
t
);

404 
	}
}

406 
	gTe°In°ÆÀr
::~
	$Te°In°ÆÀr
()

408 
	}
}

410 
Te°In°ÆÀr
::
	$unDo
()

412 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`unDoLa°AddTe°
();

413 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Gcc\UtestPlatform.cpp

28 
	~<°dlib.h
>

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 #unde‡
mÆloc


31 #unde‡
‰ì


32 #unde‡
ˇŒoc


33 #unde‡
ªÆloc


35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~<sys/time.h
>

37 
	~<time.h
>

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~<£tjmp.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

43 
	~<˘y≥.h
>

45 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

47 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

48 
	gjmp_buf_ödex
 = 0;

50 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

52 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

53 
jmp_buf_ödex
++;

54 
	`£tup
();

55 
jmp_buf_ödex
--;

56  
åue
;

58  
Ál£
;

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

63 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

64 
jmp_buf_ödex
++;

65 
	`ã°Body
();

66 
jmp_buf_ödex
--;

68 
	}
}

70 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

72 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

73 
jmp_buf_ödex
++;

74 
	`ã¨down
();

75 
jmp_buf_ödex
--;

77 
	}
}

79 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

81 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

82 
jmp_buf_ödex
++;

83 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

84 
jmp_buf_ödex
--;

86 
	}
}

88 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

90 
jmp_buf_ödex
--;

91 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

92 
	}
}

96 
	$TimeInMûlisIm∂emíèti⁄
()

98 
timevÆ
 
tv
;

99 
timez⁄e
 
tz
;

100 
	`gëtimeofday
(&
tv
, &
tz
);

101  (
tv
.
tv_£c
 * 1000Ë+ ()((Èv.
tv_u£c
 * 0.001);

102 
	}
}

104 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

106 
	$GëPœtf‹mS≥cificTimeInMûlis
()

108  
	`timeInMûlisFp
();

109 
	}
}

111 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

113 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

114 
	}
}

118 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

120 
time_t
 
tm
 = 
	`time
(
NULL
);

121  
	`˘ime
(&
tm
);

122 
	}
}

124 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

126 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

128  
	`timeSåögFp
();

129 
	}
}

131 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

133 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

136 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

138  
	`©oi
(
°r
);

139 
	}
}

141 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

143  
	`°æí
(
°r
);

144 
	}
}

146 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

148  
	`°rˇt
(
s1
, 
s2
);

149 
	}
}

151 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

153  
	`°r˝y
(
s1
, 
s2
);

154 
	}
}

156 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

158  
	`°∫˝y
(
s1
, 
s2
, 
size
);

159 
	}
}

161 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

163  
	`°rcmp
(
s1
, 
s2
);

164 
	}
}

166 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

168  
	`°∫cmp
(
s1
, 
s2
, 
size
);

169 
	}
}

170 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

172  (*Ë
	`°r°r
(
s1
, 
s2
);

173 
	}
}

175 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

177  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

178 
	}
}

180 
	$Pœtf‹mS≥cificToLowî
(
c
)

182  (Ë
	`tﬁowî
((Ë
c
);

183 
	}
}

185 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187  
	`f›í
(
fûíame
, 
Êag
);

188 
	}
}

191 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

193 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

194 
	}
}

196 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

198 
	`f˛o£
((
FILE
*)
fûe
);

199 
	}
}

201 
	$Pœtf‹mS≥cificFlush
()

203 
	`fÊush
(
°dout
);

204 
	}
}

206 
	$Pœtf‹mS≥cificPutch¨
(
c
)

208  
	`putch¨
(
c
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

213  
	`mÆloc
(
size
);

214 
	}
}

216 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

218  
	`ªÆloc
(
mem‹y
, 
size
);

219 
	}
}

221 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

223 
	`‰ì
(
mem‹y
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

228  
	`mem˝y
(
s1
, 
s2
, 
size
);

229 
	}
}

231 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

233  
	`mem£t
(
mem
, 
c
, 
size
);

234 
	}
}

237 
	$Pœtf‹mS≥cificFabs
(
d
)

239  
	`Ábs
(
d
);

240 
	}
}

242 
	$Pœtf‹mS≥cificIsN™
(
d
)

244  
	`i¢™
(()
d
);

245 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Iar\UtestPlatform.cpp

29 
	~<time.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<£tjmp.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~"CµUTe°/Te°H¨√ss.h
"

37 #unde‡
mÆloc


38 #unde‡
ˇŒoc


39 #unde‡
ªÆloc


40 #unde‡
‰ì


41 
	~"CµUTe°/Te°Regi°ry.h
"

42 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

44 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

45 
	gjmp_buf_ödex
 = 0;

47 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

49 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

50 
jmp_buf_ödex
++;

51 
	`£tup
();

52 
jmp_buf_ödex
--;

53  
åue
;

55  
Ál£
;

56 
	}
}

58 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

60 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

61 
jmp_buf_ödex
++;

62 
	`ã°Body
();

63 
jmp_buf_ödex
--;

65 
	}
}

67 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

69 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

70 
jmp_buf_ödex
++;

71 
	`ã¨down
();

72 
jmp_buf_ödex
--;

74 
	}
}

76 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

78 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

79 
jmp_buf_ödex
++;

80 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

81 
jmp_buf_ödex
--;

83 
	}
}

85 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

87 
jmp_buf_ödex
--;

88 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

89 
	}
}

93 
	$TimeInMûlisIm∂emíèti⁄
()

95 
˛ock_t
 
t
 = 
	`˛ock
();

97 
t
 =Å * 10;

100 
	}
}

102 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

104 
	$GëPœtf‹mS≥cificTimeInMûlis
()

106  
	`timeInMûlisFp
();

107 
	}
}

109 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

111 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

112 
	}
}

116 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

118 
time_t
 
tm
 = 
	`time
(
NULL
);

119  
	`˘ime
(&
tm
);

120 
	}
}

122 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

124 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

126  
	`timeSåögFp
();

127 
	}
}

129 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

131 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

134 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

136  
	`©oi
(
°r
);

137 
	}
}

139 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

141  
	`°æí
(
°r
);

142 
	}
}

144 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

146  
	`°rˇt
(
s1
, 
s2
);

147 
	}
}

149 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

151  
	`°r˝y
(
s1
, 
s2
);

152 
	}
}

154 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

156  
	`°∫˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

161  
	`°rcmp
(
s1
, 
s2
);

162 
	}
}

164 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

166  
	`°∫cmp
(
s1
, 
s2
, 
size
);

167 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  
	`°r°r
((*)
s1
, (*)
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
	$Pœtf‹mS≥cificToLowî
(
c
)

181  
	`tﬁowî
(
c
);

182 
	}
}

184 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187 
	}
}

189 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

191 
	}
}

193 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

195 
	}
}

197 
	$Pœtf‹mS≥cificFlush
()

199 
	}
}

201 
	$Pœtf‹mS≥cificPutch¨
(
c
)

203  
	`putch¨
(
c
);

204 
	}
}

206 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

208  
	`mÆloc
(
size
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

213  
	`ªÆloc
(
mem‹y
, 
size
);

214 
	}
}

216 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

218 
	`‰ì
(
mem‹y
);

219 
	}
}

221 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

223  
	`mem˝y
(
s1
, 
s2
, 
size
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

228  
	`mem£t
(
mem
, 
c
, 
size
);

229 
	}
}

231 
	$Pœtf‹mS≥cificFabs
(
d
)

233  
	`Ábs
(
d
);

234 
	}
}

236 
	$Pœtf‹mS≥cificIsN™
(
d
)

238  
	`i¢™
(
d
);

239 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp

28 
	~"CµUTe°/Mem‹yLókW¨nög.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

34 
	gÆloˇãdBlocks
 = 0;

35 
	gÆloˇãdAºays
 = 0;

36 
	gfú°InôülBlocks
 = 0;

37 
	gfú°InôülAºays
 = 0;

38 
boﬁ
 
	gªp‹ãrRegi°îed
 = 
Ál£
;

40 ˛as†
	cMem‹yLókW¨nögD©a


42 
	mpublic
:

43 
Mem‹yLókW¨nögD©a
();

45 
	möôülBlocksU£d
;

46 
	möôülAºaysU£d
;

48 
	mblockUßgeCheckPoöt
;

49 
	m¨øyUßgeCheckPoöt
;

50 
	mex≥˘Cou¡
;

51 
	mmesßge
[100];

54 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

56 
_im∂
 = (
Mem‹yLókW¨nögD©a
*Ë
	`mÆloc
((MemoryLeakWarningData));

57 
_im∂
->
öôülBlocksU£d
 = 0;

58 
_im∂
->
öôülAºaysU£d
 = 0;

60 
_im∂
->
blockUßgeCheckPoöt
 = 0;

61 
_im∂
->
¨øyUßgeCheckPoöt
 = 0;

62 
_im∂
->
ex≥˘Cou¡
 = 0;

63 
_im∂
->
mesßge_
[0] = '\0';

64 
	}
}

66 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

68 
	`‰ì
(
_im∂
);

69 
	}
}

72 
ªp‹tMem‹yBÆœn˚
();

75 
	$ªp‹tMem‹yBÆœn˚
()

77 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
fú°InôülBlocks
;

78 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
fú°InôülAºays
;

79 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

81 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

82 
	`¥ötf
("NoÜeaks but someárrays were deleted without []\n");

85 i‡(
blockBÆ™˚
 > 0)

86 
	`¥ötf
("Mem‹yÜók! %d block†nŸ dñëed\n", 
blockBÆ™˚
);

87 i‡(
¨øyBÆ™˚
 > 0)

88 
	`¥ötf
("Mem‹yÜók! %dáºay†nŸ dñëed\n", 
¨øyBÆ™˚
);

89 i‡(
blockBÆ™˚
 < 0)

90 
	`¥ötf
("M‹êblock†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
blockBÆ™˚
);

91 i‡(
¨øyBÆ™˚
 < 0)

92 
	`¥ötf
("M‹ê¨øy†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
¨øyBÆ™˚
);

94 
	`¥ötf
("NOTE - some memoryÜeaksáppearÅo beállocated staticsÅhatáreÇotÑeleased\n"

100 
	}
}

103 
Mem‹yLókW¨nög
* Mem‹yLókW¨nög::
_œã°
 = 
NULL
;

105 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

107 
_œã°
 = 
this
;

108 
	`Cª©eD©a
();

109 
	}
}

111 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

113 
	`De°royD©a
();

114 
	}
}

116 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

118  
_œã°
;

119 
	}
}

121 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

123 
_œã°
 = 
œã°
;

124 
	}
}

126 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

128 
_im∂
->
öôülBlocksU£d
 = 
ÆloˇãdBlocks
;

129 
_im∂
->
öôülAºaysU£d
 = 
ÆloˇãdAºays
;

131 i‡(!
ªp‹ãrRegi°îed
) {

132 
fú°InôülBlocks
 = 
ÆloˇãdBlocks
;

133 
fú°InôülAºays
 = 
ÆloˇãdAºays
;

134 
ªp‹ãrRegi°îed
 = 
åue
;

137 
	}
}

139 c⁄° * 
	gMem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

141 i‡(
_im∂
->
öôülBlocksU£d
 !(
ÆloˇãdBlocks
-
toBeDñëedLóks
)

142 || 
_im∂
->
öôülAºaysU£d
 !
ÆloˇãdAºays
 )

144 
	`¥ötf
("initial blocks=%d,állocated blocks=%d\ninitialárrays=%d,állocatedárrays=%d\n",

145 
_im∂
->
öôülBlocksU£d
, 
ÆloˇãdBlocks
, _im∂->
öôülAºaysU£d
, 
ÆloˇãdAºays
);

151 
	}
}

153 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

155 
_im∂
->
blockUßgeCheckPoöt
 = 
ÆloˇãdBlocks
;

156 
_im∂
->
¨øyUßgeCheckPoöt
 = 
ÆloˇãdAºays
;

157 
	}
}

159 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

161 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
;

162 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
;

164 i‡(
_im∂
->
ex≥˘Cou¡
 !0 && 
blockBÆ™˚
 + 
¨øyBÆ™˚
 == _impl->expectCount)

165  
Ál£
;

166 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

167  
Ál£
;

168 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

169 
	`•rötf
(
_im∂
->
mesßge_
, "NoÜeaks but someárrays were deleted without []\n");

172 
nch¨s
 = 0;

173 i‡(
_im∂
->
blockUßgeCheckPoöt
 !
ÆloˇãdBlocks
)

174 
nch¨s
 = 
	`•rötf
(
_im∂
->
mesßge_
, "thisÅestÜeaks %d blocks",

175 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
);

177 i‡(
_im∂
->
¨øyUßgeCheckPoöt
 !
ÆloˇãdAºays
)

178 
	`•rötf
(
_im∂
->
mesßge_
 + 
nch¨s
, "thisÅestÜeaks %dárrays",

179 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
);

181  
åue
;

182 
	}
}

184 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

186  
_im∂
->
mesßge_
;

187 
	}
}

189 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

191 
_im∂
->
ex≥˘Cou¡
 = 
n
;

192 
	}
}

196 * 
›î©‹
 
	$√w
(
size_t
 
size
)

198 
ÆloˇãdBlocks
++;

199  
	`mÆloc
(
size
);

200 
	}
}

202 
›î©‹
 
	$dñëe
(* 
mem
)

204 
ÆloˇãdBlocks
--;

205 
	`‰ì
(
mem
);

206 
	}
}

208 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

210 
	gÆloˇãdAºays
++;

211  
mÆloc
(
size
);

214 
›î©‹
 
	gdñëe
[](* 
	gmem
)

216 
	gÆloˇãdAºays
--;

217 
‰ì
(
mem
);

220 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

222 
ÆloˇãdBlocks
++;

223  
	`mÆloc
(
size
);

225 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\StarterKit\UtestPlatform.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°/Te°Resu….h
"

4 
	~<time.h
>

5 
	~<sys/time.h
>

7 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

9 
	`ã°Body
();

10 
	}
}

15 
	$TimeInMûlisIm∂emíèti⁄
()

17 
timevÆ
 
tv
;

18 
timez⁄e
 
tz
;

19 ::
	`gëtimeofday
(&
tv
, &
tz
);

20  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

21 
	}
}

23 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

25 
	$GëPœtf‹mS≥cificTimeInMûlis
()

27  
	`timeInMûlisFp
();

28 
	}
}

30 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

32 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

33 
	}
}

37 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
()

39 
time_t
 
tm
 = 
	`time
(
NULL
);

40  
	`˘ime
(&
tm
);

41 
	}
}

43 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

45 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
()

47  
	`timeSåögFp
();

48 
	}
}

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ())

52 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

53 
	}
}

56 
	~<£tjmp.h
>

58 
jmp_buf
 
	gã°_exô_jmp_buf
;

60 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
))

63 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

64 
	}
}

66 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

68 
	`l⁄gjmp
(
ã°_exô_jmp_buf
, 1);

69 
	}
}

71 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

73 
	}
}

75 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp

28 
	~"Mem‹yLókW¨nög.h
"

30 
	~<e32ba£.h
>

32 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
_œã°
 = 
NULL
;

35 ˛as†
	cMem‹yLókW¨nögD©a
 : 
public
 
CBa£
 {

36 
public
:

37 
TI¡
 
iInôülAŒocCñls
;

38 
TI¡
 
	miEx≥˘edLóks
;

39 
TI¡
 
	miInôülThªadH™dÀCou¡
;

40 
TI¡
 
	miInôülPro˚ssH™dÀCou¡
;

43 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

45 
_œã°
 = 
this
;

46 
	`Cª©eD©a
();

47 
	}
}

49 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

51 
	`De°royD©a
();

52 
	}
}

54 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

56 
	}
}

58 c⁄° * 
Mem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

60 
TI¡
 
	`˚ŒDif„ªn˚
(
U£r
::
	`Cou¡AŒocCñls
(Ë- 
_im∂
->
iInôülAŒocCñls
);

61 if–
˚ŒDif„ªn˚
 !
toBeDñëedLóks
 ) {

65 
TI¡
 
¥o˚ssH™dÀs
;

66 
TI¡
 
thªadH™dÀs
;

67 
	`RThªad
().
	`H™dÀCou¡
(
¥o˚ssH™dÀs
, 
thªadH™dÀs
);

69 if(
_im∂
->
iInôülPro˚ssH™dÀCou¡
 !
¥o˚ssH™dÀs
 ||

70 
_im∂
->
iInôülThªadH™dÀCou¡
 !
thªadH™dÀs
) {

75 
	}
}

77 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

79 
_im∂
->
iInôülAŒocCñls
 = 
U£r
::
	`Cou¡AŒocCñls
();

80 
	`RThªad
().
	`H™dÀCou¡
(
_im∂
->
iInôülPro˚ssH™dÀCou¡
, _im∂->
iInôülThªadH™dÀCou¡
);

81 
	}
}

83 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

85 
TI¡
 
	`ÆloˇãdCñls
(
U£r
::
	`Cou¡AŒocCñls
());

86 if(
_im∂
->
iEx≥˘edLóks
 != 0) {

87 
TI¡
 
	`dif„ªn˚
(
	`Abs
(
_im∂
->
iInôülAŒocCñls
 - 
ÆloˇãdCñls
));

88  
dif„ªn˚
 !
_im∂
->
iEx≥˘edLóks
;

90  
ÆloˇãdCñls
 !
_im∂
->
iInôülAŒocCñls
;

91 
	}
}

93 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

96 
	}
}

98 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

100 
_im∂
->
iEx≥˘edLóks
 = 
n
;

101 
	}
}

104 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

106 
_im∂
 = 
	`√w
(
ELóve
Ë
	`Mem‹yLókW¨nögD©a
();

107 
	}
}

109 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

111 
dñëe
 
_im∂
;

112 
_im∂
 = 
NULL
;

113 
	}
}

115 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

117  
_œã°
;

118 
	}
}

120 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

122 
_œã°
 = 
œã°
;

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Symbian\UtestPlatform.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~<e32def.h
>

30 
	~<e32°d.h
>

31 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<°dlib.h
>

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

39 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

41 
TI¡
 
	`îr
(
KEºN⁄e
);

42 
	`TRAP
(
îr
, 
	`ã°Body
());

43 if(
îr
 !
KEºN⁄e
) {

44 
Uã°
::
	`gëCuºít
()->
	`Áû
("Leave inÅest method", "", 0);

46 
	}
}

48 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
() {

49 
U£r
::
	`Lóve
(
KEºN⁄e
);

50 
	}
}

52 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
() {

53 
	`£tup
();

54  
åue
;

55 
	}
}

57 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
) {

58 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
() {

62 
	`ã¨down
();

63 
	}
}

65 
	$TimeInMûlisIm∂emíèti⁄
() {

66 
timevÆ
 
tv
;

67 
timez⁄e
 
tz
;

68 ::
	`gëtimeofday
(&
tv
, &
tz
);

69  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

70 
	}
}

72 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

74 
	$GëPœtf‹mS≥cificTimeInMûlis
() {

75  
	`timeInMûlisFp
();

76 
	}
}

78 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ()) {

79 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

80 
	}
}

84 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
() {

85 
time_t
 
tm
 = 
	`time
(
NULL
);

86  
	`˘ime
(&
tm
);

87 
	}
}

89 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

91 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
() {

92  
	`timeSåögFp
();

93 
	}
}

95 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ()) {

96 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

97 
	}
}

99 
	$Pœtf‹mS≥cificVSN¥ötf
(* 
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
) {

100  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

101 
	}
}

103 
	$Pœtf‹mS≥cificToLowî
(
c
)

105  
	`tﬁowî
(
c
);

106 
	}
}

108 
	$Pœtf‹mS≥cificFlush
() {

109 
	`fÊush
(
°dout
);

110 
	}
}

112 
	$Pœtf‹mS≥cificPutch¨
(
c
) {

113  
	`putch¨
(
c
);

114 
	}
}

116 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
) {

117  
	`°r˝y
(
s1
, 
s2
);

118 
	}
}

120 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
s
) {

121  
	`°æí
(
s
);

122 
	}
}

124 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
) {

125  
	`°r°r
(
s1
, 
s2
);

126 
	}
}

128 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

129  
	`°rcmp
(
s1
, 
s2
);

130 
	}
}

132 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

137  
	`°∫cmp
(
s1
, 
s2
, 
size
);

138 
	}
}

140 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
) {

141  
	`°rˇt
(
s1
, 
s2
);

142 
	}
}

144 
	$Pœtf‹mS≥cificFabs
(
d
) {

145  
	`Ábs
(
d
);

146 
	}
}

148 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
) {

149  
	`mÆloc
(
size
);

150 
	}
}

152 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
) {

153  
	`ªÆloc
(
mem‹y
, 
size
);

154 
	}
}

156 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
) {

157 
	`‰ì
(
mem‹y
);

158 
	}
}

160 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

161  
	`mem˝y
(
s1
, 
s2
, 
size
);

162 
	}
}

164 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

166  
	`mem£t
(
mem
, 
c
, 
size
);

167 
	}
}

169 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
) {

170  
	`f›í
(
fûíame
, 
Êag
);

171 
	}
}

173 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
) {

174 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
) {

178 
	`f˛o£
((
FILE
*)
fûe
);

179 
	}
}

181 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
) {

182  
	`©oi
(
°r
);

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\VisualCpp\UtestPlatform.cpp

1 
	~<°dlib.h
>

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 #unde‡
mÆloc


4 #unde‡
‰ì


5 #unde‡
ˇŒoc


6 #unde‡
ªÆloc


8 
	~"CµUTe°/Te°Regi°ry.h
"

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<£tjmp.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

14 
	~<Êﬂt.h
>

15 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

17 
	~<wödows.h
>

18 
	~<mmsy°em.h
>

22 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

23 
	gjmp_buf_ödex
 = 0;

25 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

27 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

28 
jmp_buf_ödex
++;

29 
	`£tup
();

30 
jmp_buf_ödex
--;

31  
åue
;

33  
Ál£
;

34 
	}
}

36 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

38 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

39 
jmp_buf_ödex
++;

40 
	`ã°Body
();

41 
jmp_buf_ödex
--;

43 
	}
}

45 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

47 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

48 
jmp_buf_ödex
++;

49 
	`ã¨down
();

50 
jmp_buf_ödex
--;

52 
	}
}

54 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö_
, 
Te°Resu…
& 
ªsu…_
)

56 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

57 
jmp_buf_ödex
++;

58 
	`runO√Te°
(
∂ugö_
, 
ªsu…_
);

59 
jmp_buf_ödex
--;

61 
	}
}

63 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

65 
jmp_buf_ödex
--;

66 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

67 
	}
}

73 
	$TimeInMûlisIm∂emíèti⁄
()

75  
	`timeGëTime
()/1000;

76 
	}
}

78 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

80 
	$GëPœtf‹mS≥cificTimeInMûlis
()

82  
	`timeInMûlisFp
();

83 
	}
}

85 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

87 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

88 
	}
}

92 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

95 
	}
}

97 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

99 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

101  
	`timeSåögFp
();

102 
	}
}

104 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

106 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

112 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

114  
	`©oi
(
°r
);

115 
	}
}

117 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

119  
	`°æí
(
°r
);

120 
	}
}

122 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

124  
	`°rˇt
(
s1
, 
s2
);

125 
	}
}

127 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

129  
	`°r˝y
(
s1
, 
s2
);

130 
	}
}

132 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

134  
	`°∫˝y
(
s1
, 
s2
, 
size
);

135 
	}
}

137 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

139  
	`°rcmp
(
s1
, 
s2
);

140 
	}
}

142 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

144  
	`°∫cmp
(
s1
, 
s2
, 
size
);

145 
	}
}

146 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

148  (*Ë
	`°r°r
(
s1
, 
s2
);

149 
	}
}

151 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

153 * 
buf
 = 0;

154 
sizeGuess
 = 
size
;

156 
ªsu…
 = 
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

157 
°r
[
size
-1] = 0;

158 
ªsu…
 == -1)

160 i‡(
buf
 != 0)

161 
	`‰ì
(
buf
);

162 
sizeGuess
 += 10;

163 
buf
 = (*)
	`mÆloc
(
sizeGuess
);

164 
ªsu…
 = 
	`_v¢¥ötf
–
buf
, 
sizeGuess
, 
f‹m©
, 
¨gs
);

167 i‡(
buf
 != 0)

168 
	`‰ì
(
buf
);

169  
ªsu…
;

171 
	}
}

173 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

175  
	`f›í
(
fûíame
, 
Êag
);

176 
	}
}

178 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

180 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

181 
	}
}

183 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

185 
	`f˛o£
((
FILE
*)
fûe
);

186 
	}
}

188 
	$Pœtf‹mS≥cificFlush
()

190 
	`fÊush
(
°dout
);

191 
	}
}

193 
	$Pœtf‹mS≥cificPutch¨
(
c
)

195  
	`putch¨
(
c
);

196 
	}
}

198 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

200  
	`mÆloc
(
size
);

201 
	}
}

203 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

205  
	`ªÆloc
(
mem‹y
, 
size
);

206 
	}
}

208 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

210 
	`‰ì
(
mem‹y
);

211 
	}
}

213 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

215  
	`mem˝y
(
s1
, 
s2
, 
size
);

216 
	}
}

218 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

220  
	`mem£t
(
mem
, 
c
, 
size
);

221 
	}
}

223 
	$Pœtf‹mS≥cificFabs
(
d
)

225  
	`Ábs
(
d
);

226 
	}
}

228 
	$Pœtf‹mS≥cificIsN™
(
d
)

230  
	`_i¢™
(
d
);

231 
	}
}

240 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…_
)

242 
åy
 {

243 
	`runO√Te°
(
ã°
, 
ªsu…_
) ;

245 
	`ˇtch
 () {

249 
	}
}

251 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

253 
	`ã°Body
();

254 
	}
}

256 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

258 
	`throw
(1);

259 
	}
}

263 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, * 
¨gs
)

265  
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, (
va_li°
Ë
¨gs
);

266 
	}
}

268 
	$Pœtf‹mS≥cificToLowî
(
c
)

270  
	`tﬁowî
(
c
);

271 
	}
}

275 
	~<£tjmp.h
>

277 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

278 
	gjmp_buf_ödex
 = 0;

280 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

282 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

283 
jmp_buf_ödex
++;

284 
	`£tup
();

285 
jmp_buf_ödex
--;

286  
åue
;

288  
Ál£
;

289 
	}
}

291 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

293 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

294 
jmp_buf_ödex
++;

295 
	`ã°Body
();

296 
jmp_buf_ödex
--;

298 
	}
}

300 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

302 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

303 
jmp_buf_ödex
++;

304 
	`ã¨down
();

305 
jmp_buf_ödex
--;

307 
	}
}

309 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

311 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

312 
jmp_buf_ödex
++;

313 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

314 
jmp_buf_ödex
--;

316 
	}
}

319 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

321 
jmp_buf_ödex
--;

322 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

323 
	}
}

339 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

341 
åy
 {

342 
	`£tup
();

344 
	`ˇtch
 () {

345  
Ál£
;

347  
åue
;

348 
	}
}

350 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

352 
åy
 {

353 
	`ã°Body
();

355 
	`ˇtch
 () {

358 
	}
}

360 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

362 
åy
 {

363 
	`ã¨down
();

365 
	`ˇtch
 () {

368 
	}
}

370 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

372 
	`throw
(1);

373 
	}
}

376 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

378 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

380 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	$maö
(
ac
, c⁄° ** 
av
)

33 
	`CHECK
(
åue
);

34 
	`LONGS_EQUAL
(1, 1);

36  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllTests.h

29 
IMPORT_TEST_GROUP
–
Uã°
);

30 
IMPORT_TEST_GROUP
–
Faûuª
);

31 
IMPORT_TEST_GROUP
–
Te°Ouçut
);

32 
IMPORT_TEST_GROUP
–
Sim∂eSåög
);

33 
IMPORT_TEST_GROUP
–
Te°In°ÆÀr
);

34 
IMPORT_TEST_GROUP
–
NuŒTe°
);

35 
IMPORT_TEST_GROUP
–
Mem‹yLókW¨nögTe°
);

36 
IMPORT_TEST_GROUP
–
Te°H¨√ss_c
);

37 
IMPORT_TEST_GROUP
–
Comm™dLöeTe°Ru¬î
);

38 
IMPORT_TEST_GROUP
–
JUnôOuçutTe°
);

39 
IMPORT_TEST_GROUP
–
Mem‹yLókDëe˘‹Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCFile.c

1 
	~<°dlib.h
>

2 
	~"AŒoˇti⁄InCFûe.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

7 * 
	$mÆlocAŒoˇti⁄
()

9  
	`mÆloc
(10UL);

10 
	}
}

12 
	$‰ìAŒoˇti⁄
(* 
mem‹y
)

14 
	`‰ì
(
mem‹y
);

15 
	}
}

17 #unde‡
‰ì


19 
	$‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
)

21 
	`‰ì
(
mem‹y
);

22 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCFile.h

1 #i‚de‡
ALLOCATIONINCFILE_H


2 
	#ALLOCATIONINCFILE_H


	)

4 * 
mÆlocAŒoˇti⁄
();

5 
‰ìAŒoˇti⁄
(* 
mem‹y
);

6 
‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCppFile.cpp

4 #unde‡
√w


5 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

7 * 
	$√wAŒoˇti⁄
()

9  
√w
 ;

10 
	}
}

12 * 
	$√wAºayAŒoˇti⁄
()

14  
√w
 [100];

15 
	}
}

17 #unde‡
√w


19 * 
	$√wAŒoˇti⁄WôhoutMa¸o
()

21  
√w
 ;

22 
	}
}

24 * 
	$√wAºayAŒoˇti⁄WôhoutMa¸o
()

26  
√w
 [100];

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCppFile.h

1 #i‚de‡
ALLOCATIONINCPPFILE_H


2 
	#ALLOCATIONINCPPFILE_H


	)

4 * 
√wAŒoˇti⁄
();

5 * 
√wAºayAŒoˇti⁄
();

7 * 
√wAŒoˇti⁄WôhoutMa¸o
();

8 * 
√wAºayAŒoˇti⁄WôhoutMa¸o
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CommandLineArgumentsTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

32 ˛as†
	cO±i⁄sPlugö
: 
public
 
Te°Plugö


34 
public
:

35 
	$O±i⁄sPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

36 
	$Te°Plugö
(
«me
)

39 ~
	$O±i⁄sPlugö
()

41 
	}
}

42 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

44  
åue
;

45 
	}
}

48 
	$TEST_GROUP
(
Comm™dLöeArgumíts
)

50 
Comm™dLöeArgumíts
* 
¨gs
;

51 
O±i⁄sPlugö
* 
∂ugö
;

53 
	`£tup
()

55 
∂ugö
 = 
√w
 
	`O±i⁄sPlugö
("options");

57 
	`ã¨down
()

59 
dñëe
 
¨gs
;

60 
dñëe
 
∂ugö
;

63 
boﬁ
 
	`√wArgumítP¨£r
(
¨gc
, c⁄° ** 
¨gv
)

65 
¨gs
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
);

66  
¨gs
->
	`∑r£
(
∂ugö
);

68 
	}
};

70 
	$TEST
(
Comm™dLöeArgumíts
, 
Cª©e
)

72 
	}
}

74 
	$TEST
(
Comm™dLöeArgumíts
, 
vîbo£SëMu…ùÀP¨amëîs
)

76 c⁄° * 
¨gv
[] = { "tests.exe", "-v" };

77 
	`CHECK
(
	`√wArgumítP¨£r
(2, 
¨gv
));

78 
	`CHECK
(
¨gs
->
	`isVîbo£
());

79 
	}
}

81 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©Së
)

83 
¨gc
 = 2;

84 c⁄° * 
¨gv
[] = { "tests.exe", "-r3" };

85 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

86 
	`LONGS_EQUAL
(3, 
¨gs
->
	`gëRïótCou¡
());

87 
	}
}

89 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDif„ª¡P¨amëî
)

91 
¨gc
 = 3;

92 c⁄° * 
¨gv
[] = { "tests.exe", "-r", "4" };

93 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

94 
	`LONGS_EQUAL
(4, 
¨gs
->
	`gëRïótCou¡
());

95 
	}
}

97 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDeÁu…sToTwo
)

99 
¨gc
 = 2;

100 c⁄° * 
¨gv
[] = { "tests.exe", "-r" };

101 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

102 
	`LONGS_EQUAL
(2, 
¨gs
->
	`gëRïótCou¡
());

103 
	}
}

105 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãr
)

107 
¨gc
 = 3;

108 c⁄° * 
¨gv
[] = { "tests.exe", "-g", "group" };

109 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

110 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

111 
	}
}

113 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãrSameP¨amëî
)

115 
¨gc
 = 2;

116 c⁄° * 
¨gv
[] = { "tests.exe", "-ggroup" };

117 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

118 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

119 
	}
}

121 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãr
)

123 
¨gc
 = 3;

124 c⁄° * 
¨gv
[] = { "tests.exe", "-n", "name" };

125 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

126 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

127 
	}
}

129 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãrSameP¨amëî
)

131 
¨gc
 = 2;

132 c⁄° * 
¨gv
[] = { "tests.exe", "-nname" };

133 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

134 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

135 
	}
}

137 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçut
)

139 
¨gc
 = 2;

140 c⁄° * 
¨gv
[] = { "tests.exe", "-onormal" };

141 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

142 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

143 
	}
}

145 
	$TEST
(
Comm™dLöeArgumíts
, 
£tE˛sùeOuçut
)

147 
¨gc
 = 2;

148 c⁄° * 
¨gv
[] = { "tests.exe", "-oeclipse" };

149 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

150 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

151 
	}
}

153 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçutDif„ª¡P¨amëî
)

155 
¨gc
 = 3;

156 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "normal" };

157 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

158 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

159 
	}
}

161 
	$TEST
(
Comm™dLöeArgumíts
, 
£tJUnôOuçutDif„ª¡P¨amëî
)

163 
¨gc
 = 3;

164 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "junit" };

165 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

166 
	`CHECK
(
¨gs
->
	`isJUnôOuçut
());

167 
	}
}

169 
	$TEST
(
Comm™dLöeArgumíts
, 
£tOuçutToG¨bage
)

171 
¨gc
 = 3;

172 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "garbage" };

173 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

174 
	}
}

176 
	$TEST
(
Comm™dLöeArgumíts
, 
weúdP¨am©îsPrötsUßgeAndRëu∫sFÆ£
)

178 
¨gc
 = 2;

179 c⁄° * 
¨gv
[] = { "tests.exe", "-SomethingWeird" };

180 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

181 
	`STRCMP_EQUAL
("usage [-v] [-r#] [-g groupName] [-nÅestName] [-o{normal, junit}]\n",

182 
¨gs
->
	`ußge
());

183 
	}
}

185 
	$TEST
(
Comm™dLöeArgumíts
, 
∂ugöKnowsO±i⁄
)

187 
¨gc
 = 2;

188 c⁄° * 
¨gv
[] = { "tests.exe", "-pPluginOption" };

189 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(
∂ugö
);

190 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

191 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ªmovePlugöByName
("options");

192 
	}
}

194 
	$TEST
(
Comm™dLöeArgumíts
, 
checkDeÁu…Argumíts
)

196 
¨gc
 = 1;

197 c⁄° * 
¨gv
[] = { "tests.exe" };

198 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

199 
	`CHECK
(!
¨gs
->
	`isVîbo£
());

200 
	`LONGS_EQUAL
(1, 
¨gs
->
	`gëRïótCou¡
());

201 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

202 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

203 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

204 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CommandLineTestRunnerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Te°Plugö.h
"

34 
	$TEST_GROUP
(
Comm™dLöeTe°Ru¬î
)

36 
	`£tup
()

39 
	`ã¨down
()

42 
	}
};

44 
	$IGNORE_TEST
(
Comm™dLöeTe°Ru¬î
, 
HmmmmWh©ToWrôe
)

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

33 
	$maö
(
ac
, c⁄° ** 
av
)

35 
Mem‹yRï‹ãrPlugö
 
∂ugö
;

36 
MockSuµ‹tPlugö
 
mockPlugö
;

37 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
∂ugö
);

38 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
mockPlugö
);

39  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\AllTests.h

29 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
CodeMem‹yRï‹tF‹m©ãr
)

38 
Mem‹yLókAŒoˇt‹
* 
cAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
√wAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

41 * 
mem‹y01
;

42 * 
mem‹y02
;

44 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

45 
Te°Resu…
* 
ã°Resu…
;

46 
CodeMem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
;

48 
	`£tup
()

50 
cAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

51 
√wAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

52 
√wAºayAŒoˇt‹

Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

53 
mem‹y01
 = (*) 0x01;

54 
mem‹y02
 = (*) 0x02;

56 
f‹m©ãr
 = 
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
cAŒoˇt‹
);

57 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

60 
	`ã¨down
()

62 
dñëe
 
ã°Resu…
;

63 
dñëe
 
f‹m©ãr
;

65 
	}
};

68 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

70 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

71 
	`TESTOUPUT_EQUAL
("\tvoid* file_9_1 = malloc(10);\n");

72 
	}
}

74 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

76 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

77 
ã°Ouçut
.
	`Êush
();

78 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "boo", 6);

79 
	`TESTOUPUT_EQUAL
("\tfree(file_9_1); /*át boo:6 */\n");

80 
	}
}

82 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
twoMÆlocAndTwoFªe
)

84 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 2);

85 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "boo", 4);

86 
ã°Ouçut
.
	`Êush
();

87 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "foo", 6);

88 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y02
, "bar", 8);

89 
	`TESTOUPUT_CONTAINS
("\tfree(file_2_1); /*át foo:6 */\n");

90 
	`TESTOUPUT_CONTAINS
("\tfree(boo_4_1); /*át bar:8 */\n");

91 
	}
}

93 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöSœh£s
)

95 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "dir/file", 2);

96 
	`TESTOUPUT_CONTAINS
("\tvoid* file_2");

97 
	}
}

99 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöDŸButU£Undîsc‹e
)

101 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "foo.cpp", 2);

102 
	`TESTOUPUT_CONTAINS
("foo_cpp");

103 
	}
}

105 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayAŒoˇt‹Gíî©esNewAºayCode
)

107 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

108 
	`TESTOUPUT_CONTAINS
("char* file_8_1 =Çew char[10]; /* usingÇew [] */");

109 
	}
}

111 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayGíî©esNewCode
)

113 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 6, 
mem‹y01
, "file", 4);

114 
	`TESTOUPUT_CONTAINS
("new char[6]; /* usingÇew */");

115 
	}
}

117 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAŒoˇt‹Gíî©esDñëeCode
)

119 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

120 
ã°Ouçut
.
	`Êush
();

121 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
mem‹y01
, "boo", 4);

122 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using deleteát boo:4 */");

123 
	}
}

125 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
DñëeNuŒW‹ksFöe
)

127 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
NULL
, "boo", 4);

128 
	`TESTOUPUT_CONTAINS
("delete [] NULL; /* using deleteát boo:4 */");

129 
	}
}

131 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAºayAŒoˇt‹Gíî©esDñëeAºayCode
)

133 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

134 
ã°Ouçut
.
	`Êush
();

135 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 
mem‹y01
, "boo", 4);

136 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using delete []át boo:4 */");

137 
	}
}

139 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögMÆlocOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

141 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

142 
ã°Ouçut
.
	`Êush
();

143 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "file", 8);

144 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

145 
	}
}

147 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

149 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

150 
ã°Ouçut
.
	`Êush
();

151 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

152 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

153 
	}
}

155 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eV¨übÀTwi˚Ex˚±WhíInANewTe°
)

157 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

158 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, *
this
);

159 
ã°Ouçut
.
	`Êush
();

160 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

161 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("char*"));

162 
	}
}

164 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°SèπGíî©esTESTcode
)

166 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

167 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

168 
	`TESTOUPUT_EQUAL
("*/\nTEST(groupName_memoryReport,ÅestName)\n{ /*át fileName:1 */\n");

169 
	}
}

171 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°EndGíî©esTESTcode
)

173 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

174 
f‹m©ãr
->
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

175 
	`TESTOUPUT_EQUAL
("}/*");

176 
	}
}

178 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Te°GroupGíî©esTe°GroupCode
)

180 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

181 
f‹m©ãr
->
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

182 
	`TESTOUPUT_EQUAL
("*/TEST_GROUP(groupName_memoryReport)\n{\n};\n/*");

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	$TEST_GROUP
(
Mem‹yRï‹tAŒoˇt‹
)

35 
	}
};

37 
	$TEST
(
Mem‹yRï‹tAŒoˇt‹
, 
Fun˘i⁄sAªF‹w¨dedF‹MÆlocAŒoˇt‹
)

39 
Mem‹yRï‹tAŒoˇt‹
 
Æloˇt‹
;

40 
Æloˇt‹
.
	`£tRólAŒoˇt‹
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

42 
	`CHECK
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
(Ë=
Æloˇt‹
.allocateMemoryLeakNodeSeparately());

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
N‹mÆMem‹yRï‹tF‹m©ãr
)

38 * 
mem‹y01
;

40 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

41 
Te°Resu…
* 
ã°Resu…
;

42 
N‹mÆMem‹yRï‹tF‹m©ãr
 
f‹m©ãr
;

44 
	`£tup
()

46 
mem‹y01
 = (*) 0x01;

47 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

50 
	`ã¨down
()

52 
dñëe
 
ã°Resu…
;

54 
	}
};

57 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

59 
f‹m©ãr
.
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 10, 
mem‹y01
, "file", 9);

60 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög mÆlo¯o‡size: 10Öoöãr: %∞© fûe:9\n", 
mem‹y01
).
	`asCh¨Såög
());

61 
	}
}

63 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

65 
f‹m©ãr
.
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem‹y01
, "boo", 6);

66 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög fªêo‡poöãr: %∞© boo:6\n", 
mem‹y01
).
	`asCh¨Såög
());

67 
	}
}

69 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Sèπs
)

71 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

72 
f‹m©ãr
.
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

73 
	`TESTOUPUT_EQUAL
("TEST(groupName, TestName)\n");

74 
	}
}

76 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Ends
)

78 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

79 
f‹m©ãr
.
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

80 
	`TESTOUPUT_EQUAL
("ENDTEST(groupName, TestName)\n");

81 
	}
}

83 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°GroupSèπs
)

85 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

86 
f‹m©ãr
.
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

87 
	`TESTOUPUT_EQUAL
("------------------------------TEST GROUP(groupName)-----------------------------\n");

88 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockNamedVÆue.h
"

35 
Mem‹yLókAŒoˇt‹
* 
	g¥eviousNewAŒoˇt‹
;

37 ˛as†
	cTemp‹¨yDeÁu…NewAŒoˇt‹


39 
Mem‹yLókAŒoˇt‹
* 
	m√wAŒoˇt‹
;

40 
	mpublic
:

41 
	$Temp‹¨yDeÁu…NewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
ﬁdAŒoˇt‹
)

43 
√wAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

44 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
ﬁdAŒoˇt‹
);

46 ~
	$Temp‹¨yDeÁu…NewAŒoˇt‹
()

48 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
);

49 
	}
}

52 ˛as†
	cMockMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


54 
public
:

55 
vútuÆ
 
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

57 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

58 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

61 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

63 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

64 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

65 
	}
}

67 
vútuÆ
 
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

69 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

70 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

71 
	}
}

73 
vútuÆ
 
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

75 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

76 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

77 
	}
}

79 
vútuÆ
 
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
, * , const * , )

81 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

82 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

83 
	}
}

85 
vútuÆ
 
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * , const * , )

87 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

88 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

89 
	}
}

92 
MockMem‹yRï‹tF‹m©ãr
 
	gf‹m©ãrF‹PlugöTe°
;

94 ˛as†
	cMem‹yRï‹ãrPlugöUndîTe°
 : 
public
 
Mem‹yRï‹ãrPlugö


96 
public
:

97 
Mem‹yRï‹tF‹m©ãr
* 
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

99 
	`mock
("ªp‹ãr").
	`a˘uÆCÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("ty≥", 
ty≥
.
	`asCh¨Såög
());

100  
√w
 
MockMem‹yRï‹tF‹m©ãr
;

102 
	}
};

104 ˛as†
	cMem‹yLókAŒoˇt‹Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


106 
public
:

107 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

109  ((
Mem‹yLókAŒoˇt‹
*)
obje˘1
)->
	`«me
(Ë=((Mem‹yLókAŒoˇt‹*)
obje˘2
)->name();

111 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

113  ((
Mem‹yLókAŒoˇt‹
*)
obje˘
)->
	`«me
();

114 
	}
}

118 
	$TEST_GROUP
(
Mem‹yRï‹ãrPlugö
)

120 
Mem‹yRï‹ãrPlugöUndîTe°
* 
ªp‹ãr
;

121 
SåögBuf„rTe°Ouçut
 
ouçut
;

122 
Mem‹yLókAŒoˇt‹Com∑øt‹
 
memLókAŒoˇt‹Com∑øt‹
;

124 
Te°Resu…
* 
ªsu…
;

125 
Uã°
* 
ã°
;

127 
	`£tup
()

129 
¥eviousNewAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

130 
ªsu…
 = 
√w
 
	`Te°Resu…
(
ouçut
);

131 
ã°
 = 
√w
 
	`Uã°
("groupname", "testname", "filename", 1);

132 
ªp‹ãr
 = 
√w
 
Mem‹yRï‹ãrPlugöUndîTe°
;

134 
	`mock
("f‹m©ãr").
	`ö°ÆlCom∑øt‹
("Mem‹yLókAŒoˇt‹", 
memLókAŒoˇt‹Com∑øt‹
);

136 
	`mock
("ªp‹ãr").
	`dißbÀ
();

137 c⁄° *
cmd_löe
[] = {"-pmemoryreport=normal"};

138 
ªp‹ãr
->
	`∑r£Argumíts
(1, 
cmd_löe
, 0);

139 
	`mock
("ªp‹ãr").
	`íabÀ
();

143 
	`ã¨down
()

145 
dñëe
 
ªp‹ãr
;

146 
dñëe
 
ã°
;

147 
dñëe
 
ªsu…
;

149 
	}
};

151 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
offRï‹tsNŸhög
)

153 
Mem‹yRï‹ãrPlugöUndîTe°
 
‰eshRï‹ãr
;

154 
‰eshRï‹ãr
.
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

155 * 
mem‹y
 = 
√w
 ;

156 
dñëe
 
mem‹y
;

157 
‰eshRï‹ãr
.
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

158 
	}
}

160 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mónögÀssArgumítsAªIgn‹ed
)

162 c⁄° *
cmd_löe
[] = {"-nothing", "-pnotmemoryreport=normal", "alsomeaningless", "-pmemoryreportnonsensebutnotus"};

163 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1Ë=
Ál£
);

164 
	}
}

166 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
comm™dLöeP¨amëîTu∫sOnN‹mÆLoggög
)

168 
	`mock
("ªp‹ãr").
	`ex≥˘O√CÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
ªp‹ãr
).
	`wôhP¨amëî
("type", "normal");

170 c⁄° *
cmd_löe
[] = {"-nothing", "-pmemoryreport=normal", "alsomeaningless" };

171 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1));

172 
	}
}

174 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eTe°A˘i⁄Rï‹tsTe°
)

176 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

177 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

178 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

179 
	}
}

181 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°Te°A˘i⁄Rï‹tsTe°
)

183 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

184 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

186 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

187 
	}
}

189 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAŒoˇti⁄sAªRï‹ãdTe°
)

191 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

192 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

193 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

195 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

196 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

197 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

198 
	}
}

200 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
whíUsögO∆yMÆlocAŒoˇt‹NoOthîOfTheAŒoˇt‹sAªU£d
)

202 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

203 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

204 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

205 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

207 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

208 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

209 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

210 
	}
}

212 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAºayAŒoˇti⁄sAªRï‹ãdTe°
)

214 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

215 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

216 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

218 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

219 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

220 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

221 
	}
}

223 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mÆlocAŒoˇti⁄sAªRï‹ãdTe°
)

225 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

226 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

227 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

229 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

230 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

231 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

232 
	}
}

234 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
°¨tOfANewTe°WûlRï‹tTheTe°GroupSèπ
)

236 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

237 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

238 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

239 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

240 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

241 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

243 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

244 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

245 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

246 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

247 
	}
}

249 ˛as†
	cUã°F‹Mem‹yRï‹tögPlugögTe°
 : 
public
 
Uã°


251 
public
:

252 
	$Uã°F‹Mem‹yRï‹tögPlugögTe°
(c⁄° * 
grou≤ame
, 
Uã°
* 
ã°
Ë: 
	`Uã°
(groupname, "testname", "filename", 1,Åest)

256 
	}
};

258 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
ídOÁTe°GroupWûlRï‹tSo
)

260 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fouπhTe°
("dif„ª¡GroupName", 
NULL
);

261 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`thúdTe°
("dif„ª¡GroupName", &
fouπhTe°
);

262 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`£c⁄dTe°
("grou≤ame", &
thúdTe°
);

263 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fú°Te°
("grou≤ame", &
£c⁄dTe°
);

265 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
£c⁄dTe°
);

266 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

268 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
fú°Te°
, *
ªsu…
);

269 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
fú°Te°
, *
ªsu…
);

270 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

271 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

272 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
thúdTe°
, *
ªsu…
);

273 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
thúdTe°
, *
ªsu…
);

274 
	}
}

276 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eA˘i⁄Rïœ˚sAŒoˇt‹s
)

278 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

280 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

281 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

282 
	`CHECK
(
Æloˇt‹
 !
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

283 
	}
}

285 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°A˘i⁄Re°‹esAŒoˇt‹s
)

287 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

289 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

290 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

291 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

292 
	`CHECK
(
Æloˇt‹
 =
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

293 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

33 
	~"Te°MockFaûuª.h
"

35 
	$TEST_GROUP
(
MockA˘uÆFun˘i⁄CÆl
)

37 
MockEx≥˘edFun˘i⁄sLi°
* 
em±yLi°
;

38 
MockEx≥˘edFun˘i⁄sLi°
* 
li°
;

39 
MockFaûuªRï‹ãr
* 
ªp‹ãr
;

41 
	`£tup
()

43 
em±yLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

45 
ªp‹ãr
 = 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
();

48 
	`ã¨down
()

50 
	`CHECK_NO_MOCK_FAILURE
();

51 
dñëe
 
em±yLi°
;

52 
dñëe
 
li°
;

54 
	}
};

56 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edCÆl
)

58 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
em±yLi°
);

59 
a˘uÆCÆl
.
	`wôhName
("unexpected");

61 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "u√x≥˘ed", *
li°
);

62 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

63 
	}
}

65 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edP¨amëîName
)

67 
MockEx≥˘edFun˘i⁄CÆl
 
ˇŒ1
;

68 
ˇŒ1
.
	`wôhName
("func");

69 
li°
->
	`addEx≥˘edCÆl
(&
ˇŒ1
);

71 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
li°
);

72 
a˘uÆCÆl
.
	`wôhName
("func").
	`wôhP¨amëî
("integer", 1);

74 
MockNamedVÆue
 
	`∑ømëî
("integer");

75 
∑ømëî
.
	`£tVÆue
(1);

77 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", 
∑ømëî
, *
li°
);

78 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

79 
	}
}

81 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
mu…ùÀSameFun˘i⁄sEx≥˘ögAndH≠≥nGøduÆly
)

83 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

84 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

85 
ˇŒ1
->
	`wôhName
("func");

86 
ˇŒ2
->
	`wôhName
("func");

87 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

88 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

90 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl1
(
ªp‹ãr
, *
li°
);

91 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl2
(
ªp‹ãr
, *
li°
);

93 
	`LONGS_EQUAL
(2, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

94 
a˘uÆCÆl1
.
	`wôhName
("func");

95 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

96 
a˘uÆCÆl2
.
	`wôhName
("func");

97 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

99 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockFaûuª.h
"

31 
	~"Te°MockFaûuª.h
"

33 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆl


35 
	mpublic
:

36 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
(
vÆ
Ë: 
	$vÆue
(
vÆ
) {};

37 
vÆue
;

38 
	}
};

41 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


43 
public
:

44 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
() {}

45 
vútuÆ
 ~
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
(Ë{
	}
};

47 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

49  ((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘1
)->
vÆue
 =((Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl*)
obje˘2
)->value;

50 
	}
}

51 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

53  
	`SåögFrom
(((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘
)->
vÆue
);

54 
	}
}

58 
	$TEST_GROUP
(
MockNamedVÆueCom∑øt‹Rïosô‹y
)

60 
	`ã¨down
()

62 
	`CHECK_NO_MOCK_FAILURE
();

64 
	}
};

66 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
gëCom∑øt‹F‹N⁄Exi°ögName
)

68 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

69 
	`POINTERS_EQUAL
(
NULL
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

70 
	}
}

72 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlCom∑øt‹
)

74 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

75 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

76 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥Name", 
com∑øt‹
);

77 
	`POINTERS_EQUAL
(&
com∑øt‹
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

78 
	}
}

80 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlMu…ùÀCom∑øt‹
)

82 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹1
, 
com∑øt‹2
, 
com∑øt‹3
;

83 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

84 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥1", 
com∑øt‹1
);

85 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥2", 
com∑øt‹2
);

86 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥3", 
com∑øt‹3
);

87 
	`POINTERS_EQUAL
(&
com∑øt‹3
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type3"));

88 
	`POINTERS_EQUAL
(&
com∑øt‹2
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type2"));

89 
	`POINTERS_EQUAL
(&
com∑øt‹1
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type1"));

90 
	}
}

92 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄CÆl
)

94 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
;

95 
	`£tup
 ()

97 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

99 
	`ã¨down
()

101 
dñëe
 
ˇŒ
;

102 
	`CHECK_NO_MOCK_FAILURE
();

104 
	}
};

106 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhoutP¨amëîSëOrNŸFound
)

108 
	`STRCMP_EQUAL
("", 
ˇŒ
->
	`gëP¨amëîTy≥
("n⁄exi°ög").
	`asCh¨Såög
());

109 
	`LONGS_EQUAL
(0, 
ˇŒ
->
	`gëP¨amëî
("n⁄exi°ög").
	`gëI¡VÆue
());

110 
	`CHECK
(!
ˇŒ
->
	`hasP¨amëîWôhName
("nonexisting"));

111 
	}
}

113 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhI¡egîP¨amëî
)

115 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

116 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

117 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

118 
	`CHECK
(
ˇŒ
->
	`hasP¨amëîWôhName
("integer"));

119 
	}
}

121 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhDoubÀP¨amëî
)

123 
ˇŒ
->
	`wôhP¨amëî
("double", 1.2);

124 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

125 
	`DOUBLES_EQUAL
(1.2, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhSåögP¨amëî
)

130 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

131 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

132 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

133 
	}
}

135 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhPoöãrP¨amëî
)

137 * 
±r
 = (*) 0x123;

138 
ˇŒ
->
	`wôhP¨amëî
("poöãr", 
±r
);

139 
	`STRCMP_EQUAL
("void*", 
ˇŒ
->
	`gëP¨amëîTy≥
("poöãr").
	`asCh¨Såög
());

140 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("poöãr").
	`gëPoöãrVÆue
());

141 
	}
}

143 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëî
)

145 * 
±r
 = (*) 0x123;

146 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("˛ass", "obje˘", 
±r
);

147 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("obje˘").
	`gëObje˘Poöãr
());

148 
	`STRCMP_EQUAL
("˛ass", 
ˇŒ
->
	`gëP¨amëîTy≥
("obje˘").
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîU√quÆCom∑ris⁄
)

153 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`u√quÆTy≥
(2);

154 
MockNamedVÆue
 
	`∑ømëî
 ("name");

155 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
u√quÆTy≥
);

156 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

157 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutRïosô‹y
)

162 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

163 
MockNamedVÆue
 
	`∑ømëî
 ("name");

164 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

165 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

166 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

167 
	}
}

169 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutCom∑øt‹
)

171 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

172 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

174 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

175 
MockNamedVÆue
 
	`∑ømëî
 ("name");

176 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

177 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

178 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

179 
	}
}

181 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄
)

183 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

184 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

185 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

187 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

188 
MockNamedVÆue
 
	`∑ømëî
 ("name");

189 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

191 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

192 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

193 
	`CHECK
 (
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥
)

198 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

199 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

200 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

202 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

203 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

204 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

205 
	`POINTERS_EQUAL
(&
ty≥
, 
ˇŒ
->
	`gëP¨amëî
("«me").
	`gëObje˘Poöãr
());

206 
	`STRCMP_EQUAL
("1", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

207 
	}
}

209 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutRïosô‹y
)

211 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

212 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

213 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

214 
	}
}

216 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutCom∑øt‹
)

218 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

219 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

220 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

221 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

222 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

223 
	}
}

226 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhTwoI¡egîP¨amëî
)

228 
ˇŒ
->
	`wôhP¨amëî
("integer1", 1);

229 
ˇŒ
->
	`wôhP¨amëî
("integer2", 2);

230 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî1").
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî2").
	`asCh¨Såög
());

232 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî1").
	`gëI¡VÆue
());

233 
	`LONGS_EQUAL
(2, 
ˇŒ
->
	`gëP¨amëî
("öãgî2").
	`gëI¡VÆue
());

234 
	}
}

236 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhThªeDif„ª¡P¨amëî
)

238 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

239 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

240 
ˇŒ
->
	`wôhP¨amëî
("double", 0.12);

241 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

242 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

243 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

244 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

245 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

246 
	`DOUBLES_EQUAL
(0.12, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

247 
	}
}

249 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhoutANameItsFulfûÀd
)

251 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

252 
	}
}

254 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhANameItsNŸFulfûÀd
)

256 
ˇŒ
->
	`wôhName
("name");

257 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

258 
	}
}

260 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
a·îSëtögCÆlFulfûÀdItsFulFûÀd
)

262 
ˇŒ
->
	`wôhName
("name");

263 
ˇŒ
->
	`ˇŒWasMade
();

264 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

265 
	}
}

267 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸWôhP¨amëîIsNŸFulFûÀd
)

269 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

270 
ˇŒ
->
	`ˇŒWasMade
();

271 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

272 
	}
}

274 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedAndP¨amëîsAªFulfûÀd
)

276 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

277 
ˇŒ
->
	`ˇŒWasMade
();

278 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

279 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

280 
	}
}

282 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸAŒP¨amëîsAªFulfûÀd
)

284 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1).withParameter("two", 2);

285 
ˇŒ
->
	`ˇŒWasMade
();

286 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

287 
	`CHECK
(! 
ˇŒ
->
	`isFulfûÀd
());

288 
	}
}

290 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹NoP¨amëîs
)

292 
ˇŒ
->
	`wôhName
("name");

293 
	`STRCMP_EQUAL
("«mê->Çÿ∑ømëîs", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

294 
	}
}

296 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Ign‹edP¨amëîs
)

298 
ˇŒ
->
	`wôhName
("name");

299 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

300 
	`STRCMP_EQUAL
("«mê->áŒÖ¨amëî†ign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Mu…ùÀP¨amëîs
)

305 
ˇŒ
->
	`wôhName
("name");

306 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

307 
ˇŒ
->
	`wôhP¨amëî
("integer", 10);

308 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, i¡ i¡egî: <10>", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

309 
	}
}

311 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹P¨amëîAndIgn‹ed
)

313 
ˇŒ
->
	`wôhName
("name");

314 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

315 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

316 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, othîÖ¨amëî†¨êign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

317 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄sLi°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 * 
li°
;

37 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

38 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ4
;

41 
	`£tup
()

43 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

45 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

46 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ4
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ1
->
	`wôhName
("foo");

49 
ˇŒ2
->
	`wôhName
("bar");

50 
ˇŒ3
->
	`wôhName
("boo");

52 
	`ã¨down
()

54 
dñëe
 
ˇŒ1
;

55 
dñëe
 
ˇŒ2
;

56 
dñëe
 
ˇŒ3
;

57 
dñëe
 
ˇŒ4
;

58 
dñëe
 
li°
;

59 
	`CHECK_NO_MOCK_FAILURE
();

61 
	}
};

63 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
em±yLi°
)

65 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

66 
	`CHECK
(! 
li°
->
	`hasFulfûÀdEx≥˘©i⁄s
());

67 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

68 
	}
}

70 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addögCÆls
)

72 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

73 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

74 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

75 
	}
}

77 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

79 
ˇŒ1
->
	`ˇŒWasMade
();

80 
ˇŒ2
->
	`ˇŒWasMade
();

81 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

82 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

83 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

84 
	}
}

86 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhUnFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

88 
ˇŒ1
->
	`ˇŒWasMade
();

89 
ˇŒ3
->
	`ˇŒWasMade
();

90 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

91 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

92 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

93 
	`CHECK
(
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

94 
	}
}

96 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
)

98 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

99 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

100 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

101 
	}
}

103 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
)

105 
ˇŒ1
->
	`wôhName
("relate");

106 
ˇŒ2
->
	`wôhName
("unrelate");

107 
ˇŒ3
->
	`wôhName
("relate");

108 
ˇŒ3
->
	`ˇŒWasMade
();

109 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

110 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

111 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

112 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("relate");

113 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

114 
	}
}

116 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToTheWﬁeLi°
)

118 
ˇŒ1
->
	`wôhName
("relate");

119 
ˇŒ2
->
	`wôhName
("relate");

120 
ˇŒ3
->
	`wôhName
("relate");

121 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

122 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

123 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

124 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

125 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToFú°O√
)

130 
ˇŒ1
->
	`wôhName
("relate");

131 
ˇŒ2
->
	`wôhName
("unrelate");

132 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

133 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

134 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

135 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

136 
	}
}

138 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToLa°O√
)

140 
ˇŒ1
->
	`wôhName
("unrelate");

141 
ˇŒ2
->
	`wôhName
("relate");

142 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

143 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

144 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

145 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

146 
	}
}

148 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
)

150 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

151 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

152 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

153 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

154 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

155 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

156 
li°
->
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
("diffname");

157 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
)

162 
MockNamedVÆue
 
	`∑ømëî
("diffname");

163 
∑ømëî
.
	`£tVÆue
(1);

164 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

165 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

166 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

167 
ˇŒ4
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 2);

168 
ˇŒ3
->
	`ˇŒWasMade
();

169 
ˇŒ3
->
	`∑ømëîWasPas£d
("diffname");

170 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

171 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

172 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

173 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ4
);

174 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

175 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

176 
	}
}

178 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sWôhEm±yLi°
)

180 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

181 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

182 
	`LONGS_EQUAL
(0, 
√wLi°
.
	`size
());

183 
	}
}

185 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sMu…ùÀUnfulfûÀdEx≥˘©i⁄s
)

187 
ˇŒ2
->
	`ˇŒWasMade
();

188 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

189 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

190 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

191 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

192 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

193 
	`LONGS_EQUAL
(2, 
√wLi°
.
	`size
());

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹
)

198 
ˇŒ1
->
	`wôhName
("foo");

199 
ˇŒ2
->
	`wôhName
("bar");

200 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

201 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

202 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

203 
	}
}

205 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹HasN⁄e
)

207 
ˇŒ1
->
	`wôhName
("foo");

208 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

209 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

210 
	}
}

212 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ˇŒToSåög
)

214 
ˇŒ1
->
	`wôhName
("foo");

215 
ˇŒ2
->
	`wôhName
("bar");

216 
ˇŒ3
->
	`wôhName
("blah");

217 
ˇŒ3
->
	`ˇŒWasMade
();

219 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

220 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

221 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

223 
Sim∂eSåög
 
ex≥˘edSåög
;

224 
ex≥˘edSåög
 = 
	`SåögFromF‹m©
("%s\n%s", 
ˇŒ1
->
	`ˇŒToSåög
().
	`asCh¨Såög
(), 
ˇŒ2
->callToString().asCharString());

225 
	`STRCMP_EQUAL
(
ex≥˘edSåög
.
	`asCh¨Såög
(), 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().asCharString());

226 
	}
}

228 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
toSåögOnEm±yLi°
)

230 
	`STRCMP_EQUAL
("<n⁄e>", 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().
	`asCh¨Såög
());

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockFaûuªTe°
)

36 
MockFaûuªRï‹ãr
 
ªp‹ãr
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
li°
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

41 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

43 
	`£tup
 ()

45 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

46 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

50 
	`ã¨down
 ()

52 
dñëe
 
li°
;

53 
dñëe
 
ˇŒ1
;

54 
dñëe
 
ˇŒ2
;

55 
dñëe
 
ˇŒ3
;

56 
	`CHECK_NO_MOCK_FAILURE
();

58 
	`addAŒToLi°
()

60 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

61 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

62 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

64 
	}
};

66 
	$TEST
(
MockFaûuªTe°
, 
noEº‹FaûuªSomëhögG⁄eWr⁄g
)

68 
MockFaûuª
 
	`Áûuª
(
this
);

69 
	`STRCMP_EQUAL
("Te° faûed wôh MockFaûuª wôhouà™Éº‹! Somëhög wíà£riou¶y wr⁄g.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

70 
	}
}

72 
	$TEST
(
MockFaûuªTe°
, 
u√x≥˘edCÆlH≠≥√d
)

74 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "foob¨", *
li°
);

75 
	`STRCMP_EQUAL
("Mock Failure: Unexpected callÅo function: foobar\n"

79 "\t\t<n⁄e>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
MockFaûuªTe°
, 
ex≥˘edCÆlDidNŸH≠≥n
)

84 
ˇŒ1
->
	`wôhName
("foobar");

85 
ˇŒ2
->
	`wôhName
("w‹ld").
	`wôhP¨amëî
("boo", 2).withParameter("hello", "world");

86 
ˇŒ3
->
	`wôhName
("haphaphap");

87 
ˇŒ3
->
	`ˇŒWasMade
();

88 
	`addAŒToLi°
();

90 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, *
li°
);

91 
	`STRCMP_EQUAL
("Mock Failure: Expected call didÇot happen.\n"

96 "\t\th≠h≠h≠ ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

97 
	}
}

99 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edAddôi⁄ÆCÆlFaûuª
)

101 
ˇŒ1
->
	`wôhName
("bar");

102 
ˇŒ1
->
	`ˇŒWasMade
();

103 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

105 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "b¨", *
li°
);

106 
	`STRCMP_CONTAINS
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (2thËˇŒÅÿfun˘i⁄: b¨\n\tEXPECTED", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

107 
	}
}

109 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîFaûuª
)

111 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

112 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

113 
ˇŒ3
->
	`wôhName
("unrelated");

114 
	`addAŒToLi°
();

116 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("bar");

117 
a˘uÆP¨amëî
.
	`£tVÆue
(2);

119 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

120 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameterÇameÅo function \"foo\": bar\n"

127 "\t\töàb¨: <2>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

128 
	}
}

130 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîVÆueFaûuª
)

132 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

133 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

134 
ˇŒ3
->
	`wôhName
("unrelated");

135 
	`addAŒToLi°
();

137 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("boo");

138 
a˘uÆP¨amëî
.
	`£tVÆue
(20);

140 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

141 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"boo\"Åo function \"foo\": <20>\n"

148 "\t\töàboo: <20>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
)

153 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 2).withParameter("boo", "str");

154 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 10).withParameter("boo", "bleh");

155 
ˇŒ2
->
	`ˇŒWasMade
();

156 
ˇŒ2
->
	`∑ømëîWasPas£d
("bar");

157 
ˇŒ2
->
	`∑ømëîWasPas£d
("boo");

158 
ˇŒ3
->
	`wôhName
("unrelated");

159 
	`addAŒToLi°
();

161 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

162 
	`STRCMP_EQUAL
("Mock Failure: ExpectedÖarameter for function \"foo\" didÇot happen.\n"

168 "\t\töàb¨, ch¨* boo", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

169 
	}
}

171 
	$TEST
(
MockFaûuªTe°
, 
MockNoWayToCom∑ªCu°omTy≥Faûuª
)

173 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
this
, "myType");

174 
	`STRCMP_EQUAL
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <myTy≥>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

175 
	}
}

177 
	$TEST
(
MockFaûuªTe°
, 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
)

179 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`Áûuª
(
this
, "foo");

180 
	`STRCMP_EQUAL
("MockFailure: Cannot set differentÑeturn valuesÅoÅhe same function: foo\n"

182 "\tYou c™Örobablyáchõvêthêßmêthög usög MockSuµ‹t::£tD©a", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

183 
	}
}

185 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edObje˘Faûuª
)

187 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

188 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

189 
ˇŒ2
->
	`ˇŒWasMade
();

190 
ˇŒ2
->
	`wasPas£dToObje˘
();

191 
ˇŒ3
->
	`wôhName
("unrelated");

192 
	`addAŒToLi°
();

194 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
this
, "foo", (*)0x1, *
li°
);

195 
	`STRCMP_EQUAL
("MockFailure: Function called oná unexpected object: foo\n"

200 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

201 
	}
}

203 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
)

205 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

206 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

207 
ˇŒ2
->
	`ˇŒWasMade
();

208 
ˇŒ2
->
	`wasPas£dToObje˘
();

209 
ˇŒ3
->
	`wôhName
("unrelated");

210 
	`addAŒToLi°
();

212 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

213 
	`STRCMP_EQUAL
("Mock Failure: Expected call on object for function \"foo\" but it didÇot happen.\n"

217 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

218 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockFailure.h

29 #i‚de‡
D_Te°MockFaûuª_h


30 
	#D_Te°MockFaûuª_h


	)

32 
	#CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
Ë
	`CHECK_EXPECTED_MOCK_FAILURE_LOCATION
”x≥˘edFaûuª, 
__FILE__
, 
__LINE__
)

	)

33 
	#CHECK_NO_MOCK_FAILURE
(Ë
	`CHECK_NO_MOCK_FAILURE_LOCATION
(
__FILE__
, 
__LINE__
)

	)

35 ˛as†
	cMockFaûuªRï‹ãrF‹Te°
 : 
public
 
MockFaûuªRï‹ãr


37 
public
:

39 
Sim∂eSåög
 
mockFaûuªSåög
;

40 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

42 
mockFaûuªSåög
 = 
Áûuª
.
	`gëMesßge
();

44 
MockFaûuªRï‹ãrF‹Te°
* 
	$gëRï‹ãr
()

46 
MockFaûuªRï‹ãrF‹Te°
 
ªp‹ãr
;

47  &
ªp‹ãr
;

48 
	}
}

51 
ölöe
 
Uã°
* 
	$mockFaûuªTe°
()

53  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
	`gëTe°ToFaû
();

54 
	}
}

56 
ölöe
 
Sim∂eSåög
 
	$mockFaûuªSåög
()

58  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
;

59 
	}
}

61 
ölöe
 
	$CHECK_EXPECTED_MOCK_FAILURE_LOCATION
(c⁄° 
MockFaûuª
& 
ex≥˘edFaûuª
, c⁄° * 
fûe
, 
löe
)

63 
Sim∂eSåög
 
ex≥˘edFaûuªSåög
 = 
ex≥˘edFaûuª
.
	`gëMesßge
();

64 
Sim∂eSåög
 
a˘uÆFaûuªSåög
 = 
	`mockFaûuªSåög
();

65 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

66 i‡(
ex≥˘edFaûuªSåög
 !
a˘uÆFaûuªSåög
)

68 
Sim∂eSåög
 
îr‹
 = "MockFailuresáre different.\n";

69 
îr‹
 += "Expected MockFailure:\n\t";

70 
îr‹
 +
ex≥˘edFaûuªSåög
;

71 
îr‹
 += "\nActual MockFailure:\n\t";

72 
îr‹
 +
a˘uÆFaûuªSåög
;

73 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

75 
	}
}

77 
ölöe
 
	$CHECK_NO_MOCK_FAILURE_LOCATION
(c⁄° * 
fûe
, 
löe
)

79 i‡(
	`mockFaûuªSåög
() != "") {

80 
Sim∂eSåög
 
îr‹
 = "Unexpected mock failure:\n";

81 
îr‹
 +
	`mockFaûuªSåög
();

82 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

83 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

86 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

87 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockPlugin.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Te°Ouçut.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

31 
	~"Te°MockFaûuª.h
"

33 
	$TEST_GROUP
(
MockPlugö
)

35 
Uã°
 *
ã°
;

36 
SåögBuf„rTe°Ouçut
 *
ouçut
;

37 
Te°Resu…
 *
ªsu…
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

39 
MockEx≥˘edFun˘i⁄CÆl
 *
ˇŒ
;

41 
MockSuµ‹tPlugö
 *
∂ugö
;

43 
	`£tup
()

45 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

47 
ã°
 = 
√w
 
	`Uã°
("group", "name", "file", 1);

48 
ouçut
 = 
√w
 
SåögBuf„rTe°Ouçut
;

49 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

50 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

51 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

52 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
ˇŒ
);

53 
∂ugö
 = 
√w
 
MockSuµ‹tPlugö
;;

56 
	`ã¨down
()

58 
dñëe
 
ã°
;

59 
dñëe
 
ouçut
;

60 
dñëe
 
ªsu…
;

61 
dñëe
 
ex≥˘©i⁄sLi°
;

62 
dñëe
 
ˇŒ
;

63 
dñëe
 
∂ugö
;

65 
	`CHECK_NO_MOCK_FAILURE
();

66 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

68 
	}
};

70 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sAndCÀ¨AtEnd
)

72 
ˇŒ
->
	`wôhName
("foobar");

73 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, *
ex≥˘©i⁄sLi°
);

75 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

77 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

79 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

80 
	`LONGS_EQUAL
(0, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

82 
	}
}

84 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sW‹ksAlsoWôhHõøchiˇlObje˘s
)

86 
ˇŒ
->
	`wôhName
("foob¨").
	`⁄Obje˘
((*) 1);

87 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, "foob¨", *
ex≥˘©i⁄sLi°
);

89 
	`mock
("dif„ª¡Sc›e").
	`ex≥˘O√CÆl
("foob¨").
	`⁄Obje˘
((*) 1);

90 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

92 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

94 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

95 
	}
}

97 ˛as†
	cDummyCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


99 
public
:

100 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

102  
obje˘1
 =
obje˘2
;

104 
Sim∂eSåög
 
	$vÆueToSåög
(*)

107 
	}
}

111 
	$TEST
(
MockPlugö
, 
ö°ÆlCom∑øt‹Rec‹dsTheCom∑øt‹ButNŸIn°ÆlsItYë
)

113 
DummyCom∑øt‹
 
com∑øt‹
;

114 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

115 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

116 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

118 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
ã°
, "myType");

119 
	`CHECK_EXPECTED_MOCK_FAILURE
(
Áûuª
);

120 
	}
}

122 
	$TEST
(
MockPlugö
, 
¥eTe°A˘i⁄WûlE«bÀMu…ùÀCom∑øt‹sToTheGlobÆMockSuµ‹tS∑˚
)

124 
DummyCom∑øt‹
 
com∑øt‹
;

125 
DummyCom∑øt‹
 
com∑øt‹2
;

126 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

127 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myOthîTy≥", 
com∑øt‹2
);

129 
∂ugö
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

130 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

131 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

132 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

133 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

135 
	`CHECK_NO_MOCK_FAILURE
();

136 
	`LONGS_EQUAL
(0, 
ªsu…
->
	`gëFaûuªCou¡
());

137 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockSuµ‹tTe°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

38 
	`£tup
()

40 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

41 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
	`ã¨down
()

46 
	`mock
().
	`checkEx≥˘©i⁄s
();

47 
	`CHECK_NO_MOCK_FAILURE
();

48 
ex≥˘©i⁄sLi°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

49 
dñëe
 
ex≥˘©i⁄sLi°
;

52 
MockEx≥˘edFun˘i⁄CÆl
* 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
(c⁄° 
Sim∂eSåög
& 
«me
)

54 
MockEx≥˘edFun˘i⁄CÆl
* 
√wCÆl
 = 
√w
 MockExpectedFunctionCall;

55 
√wCÆl
->
	`wôhName
(
«me
);

56 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
√wCÆl
);

57  
√wCÆl
;

59 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

61 
	}
};

63 
	$TEST
(
MockSuµ‹tTe°
, 
˛ór
)

65 
	`mock
().
	`ex≥˘O√CÆl
("func");

66 
	`mock
().
	`˛ór
();

67 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

68 
	}
}

70 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sD€¢tFaû
)

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	}
}

75 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sCÀ¨sTheEx≥˘©i⁄s
)

77 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

78 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

80 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

81 
	`mock
().
	`checkEx≥˘©i⁄s
();

83 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

84 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

85 
	}
}

87 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlTh©H≠≥ns
)

89 
	`mock
().
	`ex≥˘O√CÆl
("func");

90 
	`mock
().
	`a˘uÆCÆl
("func");

91 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

92 
	}
}

94 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlIn˚a£sEx≥˘edCÆlsLe·
)

96 
	`mock
().
	`ex≥˘O√CÆl
("func");

97 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

98 
	`mock
().
	`˛ór
();

99 
	}
}

101 
	$TEST
(
MockSuµ‹tTe°
, 
u√x≥˘edCÆlH≠≥√d
)

103 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", *
ex≥˘©i⁄sLi°
);

105 
	`mock
().
	`a˘uÆCÆl
("func");

107 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

108 
	}
}

110 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsEx˚±F‹TheEx≥˘edO√
)

112 
	`mock
().
	`ex≥˘O√CÆl
("foo");

113 
	`mock
().
	`ign‹eOthîCÆls
();

114 
	`mock
().
	`a˘uÆCÆl
("b¨").
	`wôhP¨amëî
("foo", 1);;

116 
	`CHECK_NO_MOCK_FAILURE
();

118 
	`mock
().
	`˛ór
();

119 
	}
}

121 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsD€¢tIgn‹eMu…ùÀCÆlsOfTheSameFun˘i⁄
)

123 
	`mock
().
	`ex≥˘O√CÆl
("foo");

124 
	`mock
().
	`ign‹eOthîCÆls
();

125 
	`mock
().
	`a˘uÆCÆl
("bar");

126 
	`mock
().
	`a˘uÆCÆl
("foo");

127 
	`mock
().
	`a˘uÆCÆl
("foo");

129 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

130 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

131 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

132 
	}
}

134 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîStûlFaûsIfEx≥˘edO√Did¡H≠≥n
)

136 
	`mock
().
	`ex≥˘O√CÆl
("foo");

137 
	`mock
().
	`ign‹eOthîCÆls
();

138 
	`mock
().
	`checkEx≥˘©i⁄s
();

140 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo");

142 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

143 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

144 
	}
}

146 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsTh©H≠≥n
)

148 
	`mock
().
	`ex≥˘O√CÆl
("foo");

149 
	`mock
().
	`ex≥˘O√CÆl
("foo");

150 
	`mock
().
	`a˘uÆCÆl
("foo");

151 
	`mock
().
	`a˘uÆCÆl
("foo");

152 
	`mock
().
	`checkEx≥˘©i⁄s
();

153 
	`CHECK_NO_MOCK_FAILURE
();

154 
	}
}

156 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√CÆlHowevîMu…ùÀH≠≥√d
)

158 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

159 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

160 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

162 
	`mock
().
	`ex≥˘O√CÆl
("foo");

163 
	`mock
().
	`ex≥˘O√CÆl
("foo");

164 
	`mock
().
	`a˘uÆCÆl
("foo");

165 
	`mock
().
	`a˘uÆCÆl
("foo");

166 
	`mock
().
	`a˘uÆCÆl
("foo");

168 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

169 
	}
}

171 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndVÆue
)

173 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

174 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

175 
	`mock
().
	`checkEx≥˘©i⁄s
();

176 
	`CHECK_NO_MOCK_FAILURE
();

177 
	}
}

179 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√DoubÀP¨amëîAndVÆue
)

181 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

182 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

183 
	`mock
().
	`checkEx≥˘©i⁄s
();

184 
	`CHECK_NO_MOCK_FAILURE
();

185 
	}
}

187 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆue
)

189 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

190 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

191 
	`mock
().
	`checkEx≥˘©i⁄s
();

192 
	`CHECK_NO_MOCK_FAILURE
();

193 
	}
}

195 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√PoöãrP¨amëîAndVÆue
)

197 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

198 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

199 
	`mock
().
	`checkEx≥˘©i⁄s
();

200 
	`CHECK_NO_MOCK_FAILURE
();

201 
	}
}

203 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆueFaûs
)

205 
MockNamedVÆue
 
	`∑ømëî
("parameter");

206 
∑ømëî
.
	`£tVÆue
("different");

207 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", "string");

208 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

210 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

211 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "different");

213 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

214 
	}
}

216 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToP¨amëîName
)

218 
MockNamedVÆue
 
	`∑ømëî
("different");

219 
∑ømëî
.
	`£tVÆue
(10);

220 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

221 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

223 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

224 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("different", 10);

226 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

227 
	}
}

229 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToVÆue
)

231 
MockNamedVÆue
 
	`∑ømëî
("parameter");

232 
∑ømëî
.
	`£tVÆue
(8);

233 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

234 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

236 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

237 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 8);

239 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

240 
	}
}

242 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToTy≥s
)

244 
MockNamedVÆue
 
	`∑ømëî
("parameter");

245 
∑ømëî
.
	`£tVÆue
("heh");

246 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

247 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

249 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

250 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "heh");

252 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

253 
	}
}

255 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

257 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

258 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 2);

259 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 2);

260 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

261 
	`mock
().
	`checkEx≥˘©i⁄s
();

262 
	`CHECK_NO_MOCK_FAILURE
();

263 
	}
}

265 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhMu…ùÀDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

267 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

268 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

270 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

271 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

272 
	`mock
().
	`checkEx≥˘©i⁄s
();

273 
	`CHECK_NO_MOCK_FAILURE
();

274 
	}
}

276 
	$TEST
(
MockSuµ‹tTe°
, 
twi˚CÆÀdWôhSameP¨amëîs
)

278 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

279 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

280 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

281 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

282 
	`mock
().
	`checkEx≥˘©i⁄s
();

283 
	`CHECK_NO_MOCK_FAILURE
();

284 
	}
}

286 
	$TEST
(
MockSuµ‹tTe°
, 
ˇŒedWôhoutP¨amëîs
)

288 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

289 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

291 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

292 
	`mock
().
	`a˘uÆCÆl
("foo");

293 
	`mock
().
	`checkEx≥˘©i⁄s
();

295 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

297 
	}
}

299 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîs
)

301 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

302 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

303 
	`mock
().
	`checkEx≥˘©i⁄s
();

304 
	`CHECK_NO_MOCK_FAILURE
();

305 
	}
}

307 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButStûlPassAŒ
)

309 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

310 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

311 
	`mock
().
	`checkEx≥˘©i⁄s
();

312 
	`CHECK_NO_MOCK_FAILURE
();

313 
	}
}

315 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButEx≥˘edP¨amëîDid¡H≠≥n
)

317 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

318 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

320 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

321 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

322 
	`mock
().
	`checkEx≥˘©i⁄s
();

323 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

324 
	}
}

326 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsMu…ùÀCÆls
)

328 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

329 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

330 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

331 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

332 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

334 
	`mock
().
	`checkEx≥˘©i⁄s
();

335 
	`CHECK_NO_MOCK_FAILURE
();

336 
	}
}

338 
	$TEST
(
MockSuµ‹tTe°
, 
√wCÆlSèπsWhûeNŸAŒP¨amëîsWîePas£d
)

340 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

341 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

343 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

344 
	`mock
().
	`a˘uÆCÆl
("foo");

345 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);;

347 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

348 
	}
}

350 
	$TEST
(
MockSuµ‹tTe°
, 
thªeEx≥˘edAndA˘uÆ
)

352 
	`mock
().
	`ex≥˘O√CÆl
("function1");

353 
	`mock
().
	`ex≥˘O√CÆl
("function2");

354 
	`mock
().
	`ex≥˘O√CÆl
("function3");

355 
	`mock
().
	`a˘uÆCÆl
("function1");

356 
	`mock
().
	`a˘uÆCÆl
("function2");

357 
	`mock
().
	`a˘uÆCÆl
("function3");

358 
	`mock
().
	`checkEx≥˘©i⁄s
();

359 
	`CHECK_NO_MOCK_FAILURE
();

360 
	}
}

362 ˛as†
	cMyTy≥F‹Te°ög


364 
	mpublic
:

365 
	$MyTy≥F‹Te°ög
(
vÆ
Ë: 
	$vÆue
(
vÆ
){};

366 
vÆue
;

367 
	}
};

369 ˛as†
	cMyTy≥F‹Te°ögCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


371 
public
:

372 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

374  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

376 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

378  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

379 
	}
}

383 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîFaûsWhíNŸHavögACom∑ris⁄Rïosô‹y
)

385 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

386 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

387 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

389 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

390 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

391 
	}
}

393 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîSuc˚eds
)

395 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

396 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

397 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

398 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

399 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

400 
	`mock
().
	`checkEx≥˘©i⁄s
();

401 
	`CHECK_NO_MOCK_FAILURE
();

402 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

403 
	}
}

405 
boﬁ
 
	$myTy≥IsEquÆ
(* 
obje˘1
, * 
obje˘2
)

407  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

408 
	}
}

410 
Sim∂eSåög
 
	$myTy≥VÆueToSåög
(* 
obje˘
)

412  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

413 
	}
}

415 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘WôhFun˘i⁄Com∑øt‹
)

417 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

418 
MockFun˘i⁄Com∑øt‹
 
	`com∑øt‹
(
myTy≥IsEquÆ
, 
myTy≥VÆueToSåög
);

419 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

420 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

421 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

422 
	`mock
().
	`checkEx≥˘©i⁄s
();

423 
	`CHECK_NO_MOCK_FAILURE
();

424 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

425 
	}
}

427 
	$TEST
(
MockSuµ‹tTe°
, 
dißbÀE«bÀ
)

429 
	`mock
().
	`dißbÀ
();

430 
	`mock
().
	`ex≥˘O√CÆl
("function");

431 
	`mock
().
	`a˘uÆCÆl
("differenFunction");

432 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

433 
	`mock
().
	`íabÀ
();

434 
	`mock
().
	`ex≥˘O√CÆl
("function");

435 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

436 
	`mock
().
	`a˘uÆCÆl
("function");

437 
	`CHECK_NO_MOCK_FAILURE
();

438 
	}
}

440 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aF‹I¡egîVÆues
)

442 
	`mock
().
	`£tD©a
("data", 10);

443 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

444 
	}
}

446 
	$TEST
(
MockSuµ‹tTe°
, 
hasD©aBìnSë
)

448 
	`CHECK
(!
	`mock
().
	`hasD©a
("data"));

449 
	`mock
().
	`£tD©a
("data", 10);

450 
	`CHECK
(
	`mock
().
	`hasD©a
("data"));

451 
	}
}

453 
	$TEST
(
MockSuµ‹tTe°
, 
unöôülizedD©a
)

455 
	`LONGS_EQUAL
(0, 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëI¡VÆue
());

456 
	`STRCMP_EQUAL
("öt", 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëTy≥
().
	`asCh¨Såög
());

457 
	}
}

459 
	$TEST
(
MockSuµ‹tTe°
, 
£tMu…ùÀD©a
)

461 
	`mock
().
	`£tD©a
("data", 1);

462 
	`mock
().
	`£tD©a
("data2", 10);

463 
	`LONGS_EQUAL
(1, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

464 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a2").
	`gëI¡VÆue
());

465 
	}
}

467 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aSåög
)

469 
	`mock
().
	`£tD©a
("data", "string");

470 
	`STRCMP_EQUAL
("°rög", 
	`mock
().
	`gëD©a
("d©a").
	`gëSåögVÆue
());

471 
	}
}

473 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aDoubÀ
)

475 
	`mock
().
	`£tD©a
("data", 1.0);

476 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`gëD©a
("d©a").
	`gëDoubÀVÆue
(), 0.05);

477 
	}
}

479 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aPoöãr
)

481 * 
±r
 = (*) 0x001;

482 
	`mock
().
	`£tD©a
("d©a", 
±r
);

483 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëPoöãrVÆue
());

484 
	}
}

486 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aObje˘
)

488 * 
±r
 = (*) 0x001;

489 
	`mock
().
	`£tD©aObje˘
("d©a", "ty≥", 
±r
);

490 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëObje˘Poöãr
());

491 
	`STRCMP_EQUAL
("ty≥", 
	`mock
().
	`gëD©a
("d©a").
	`gëTy≥
().
	`asCh¨Såög
());

492 
	}
}

494 
	$TEST
(
MockSuµ‹tTe°
, 
gëMockSuµ‹tSc›e
)

496 
MockSuµ‹t
* 
mock1
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("name");

497 
MockSuµ‹t
* 
mock2
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("differentName");

498 
	`CHECK
(!
	`mock
().
	`hasD©a
("name"));

499 
	`CHECK
(
mock1
 !
mock2
);

500 
	`POINTERS_EQUAL
(
mock1
, 
	`mock
().
	`gëMockSuµ‹tSc›e
("name"));

501 
	`CHECK
(
mock1
 !&
	`mock
());

502 
	}
}

504 
	$TEST
(
MockSuµ‹tTe°
, 
usögTwoMockSuµ‹tsByName
)

506 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

507 
	`LONGS_EQUAL
(0, 
	`mock
("Ÿhî").
	`ex≥˘edCÆlsLe·
());

508 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

509 
	`mock
("fú°").
	`˛ór
();

510 
	}
}

512 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒy
)

514 
	`mock
("first");

516 
	`mock
().
	`dißbÀ
();

517 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

518 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

520 
	`mock
().
	`íabÀ
();

521 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

522 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

524 
	`mock
("fú°").
	`˛ór
();

525 
	}
}

527 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒyWhíSuµ‹tIsDy«miˇŒyCª©ed
)

529 
	`mock
().
	`dißbÀ
();

530 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

531 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

533 
	`mock
().
	`íabÀ
();

534 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("boo");

535 
	`LONGS_EQUAL
(1, 
	`mock
("£c⁄d").
	`ex≥˘edCÆlsLe·
());

537 
	`mock
().
	`˛ór
();

538 
	}
}

540 
	$TEST
(
MockSuµ‹tTe°
, 
Ex≥˘edCÆlsLe·W‹ksHõørchiˇŒy
)

542 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

543 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

544 
	`mock
().
	`˛ór
();

545 
	}
}

547 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒy
)

549 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

550 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("helloworld");

552 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

553 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("helloworld");

554 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

556 
	`mock
().
	`checkEx≥˘©i⁄s
();

557 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

558 
	}
}

560 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒy
)

562 
	`mock
("first");

563 
	`mock
().
	`ign‹eOthîCÆls
();

564 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

565 
	`CHECK_NO_MOCK_FAILURE
();

566 
	}
}

568 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒyWhíDy«miˇŒyCª©ed
)

570 
	`mock
().
	`ign‹eOthîCÆls
();

571 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

572 
	`CHECK_NO_MOCK_FAILURE
();

573 
	}
}

575 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒyF‹La°CÆlNŸFöished
)

577 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foob¨").
	`wôhP¨amëî
("boo", 1);

578 
	`mock
("fú°").
	`a˘uÆCÆl
("foobar");

580 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foob¨")->
	`wôhP¨amëî
("boo", 1);

581 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

583 
	`mock
().
	`checkEx≥˘©i⁄s
();

584 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

585 
	}
}

587 
	$TEST
(
MockSuµ‹tTe°
, 
ªp‹ãrIsInhîôedInHõørchiˇlMocks
)

589 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

591 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

592 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

593 
	}
}

595 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹W‹ksHõørchiˇlOnBŸhExi°ögAndDy«miˇŒyCª©edMockSuµ‹ts
)

597 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

598 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

600 
	`mock
("existing");

601 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

602 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

603 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

604 
	`mock
("dy«mic").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

605 
	`mock
("dy«mic").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

607 
	`mock
().
	`checkEx≥˘©i⁄s
();

608 
	`CHECK_NO_MOCK_FAILURE
();

609 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

610 
	}
}

612 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹sW‹ksHõørchiˇl
)

614 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

615 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

616 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªpos
;

617 
ªpos
.
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

619 
	`mock
("existing");

620 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªpos
);

621 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

622 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

624 
	`mock
().
	`checkEx≥˘©i⁄s
();

625 
	`CHECK_NO_MOCK_FAILURE
();

626 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

627 
	}
}

629 
	$TEST
(
MockSuµ‹tTe°
, 
ªmoveCom∑øt‹sW‹ksHõøchiˇŒy
)

631 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

632 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

634 
	`mock
("sc›e").
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

635 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

636 
	`mock
("sc›e").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

637 
	`mock
("sc›e").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

639 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

640 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

641 
	}
}

643 
	$TEST
(
MockSuµ‹tTe°
, 
hasRëu∫VÆue
)

645 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

646 
	`mock
().
	`ex≥˘O√CÆl
("foo");

647 
	`CHECK
(!
	`mock
().
	`a˘uÆCÆl
("foo").
	`hasRëu∫VÆue
());

648 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

650 
	`mock
().
	`ex≥˘O√CÆl
("foo2").
	`™dRëu∫VÆue
(1);

651 
	`CHECK
(
	`mock
().
	`a˘uÆCÆl
("foo2").
	`hasRëu∫VÆue
());

652 
	`CHECK
(
	`mock
().
	`hasRëu∫VÆue
());

653 
	}
}

655 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆue
)

657 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

658 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

659 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

660 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ötRëu∫VÆue
());

661 
	}
}

663 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆueSësDif„ª¡VÆues
)

665 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

666 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(2);

668 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
();

670 
MockC™nŸSëDif„ª¡Rëu∫VÆuesF‹SameFun˘i⁄Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo");

671 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

672 
	}
}

674 
	$TEST
(
MockSuµ‹tTe°
, 
SåögRëu∫VÆue
)

676 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
("hello world");

677 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëSåögVÆue
());

678 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`°rögRëu∫VÆue
());

679 
	}
}

681 
	$TEST
(
MockSuµ‹tTe°
, 
DoubÀRëu∫VÆue
)

683 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1.0);

684 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
(), 0.05);

685 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`doubÀRëu∫VÆue
(), 0.05);

686 
	}
}

688 
	$TEST
(
MockSuµ‹tTe°
, 
PoöãrRëu∫VÆue
)

690 * 
±r
 = (*) 0x001;

691 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(
±r
);

692 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
());

693 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`poöãrRëu∫VÆue
());

694 
	}
}

696 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘
)

698 * 
obje˘På
 = (*) 0x001;

699 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

700 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

701 
	}
}

703 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Faûs
)

705 * 
obje˘På
 = (*) 0x001;

706 * 
obje˘På2
 = (*) 0x002;

707 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

709 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

710 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På2
);

712 
MockU√x≥˘edObje˘Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", 
obje˘På2
, *
ex≥˘©i⁄sLi°
);

713 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

714 
	}
}

716 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Ex≥˘edButNŸCÆÀd
)

718 * 
obje˘På
 = (*) 0x001;

719 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

720 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

722 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

723 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

724 
	`mock
().
	`a˘uÆCÆl
("boo");

725 
	`mock
().
	`a˘uÆCÆl
("boo");

727 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", *
ex≥˘©i⁄sLi°
);

728 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

729 
	`mock
().
	`checkEx≥˘©i⁄s
();

730 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

731 
	}
}

733 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆls
)

735 
	`mock
().
	`ex≥˘NCÆls
(2, "boo");

736 
	`mock
().
	`a˘uÆCÆl
("boo");

737 
	`mock
().
	`a˘uÆCÆl
("boo");

738 
	`mock
().
	`checkEx≥˘©i⁄s
();

739 
	`CHECK_NO_MOCK_FAILURE
();

740 
	}
}

742 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhP¨amëîs
)

744 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

745 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

746 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

747 
	`mock
().
	`checkEx≥˘©i⁄s
();

748 
	`CHECK_NO_MOCK_FAILURE
();

749 
	}
}

751 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀMu…ùÀCÆlsWôhP¨amëîs
)

753 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

754 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

755 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

756 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

757 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

758 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

759 
	`mock
().
	`checkEx≥˘©i⁄s
();

760 
	`CHECK_NO_MOCK_FAILURE
();

761 
	}
}

763 
	$TEST
(
MockSuµ‹tTe°
, 
åacög
)

765 
	`mock
().
	`åacög
(
åue
);

767 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

768 
	`mock
("sc›e").
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

769 
	`mock
().
	`checkEx≥˘©i⁄s
();

771 
	`STRCMP_CONTAINS
("boo", 
	`mock
().
	`gëTø˚Ouçut
());

772 
	`STRCMP_CONTAINS
("foo", 
	`mock
().
	`gëTø˚Ouçut
());

773 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_c.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

31 
	~"Te°MockSuµ‹t_cCFûe.h
"

34 
	$TEST_GROUP
(
MockSuµ‹t_c
)

36 
	}
};

38 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆO√CÆl
)

40 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

41 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

42 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

43 
	}
}

45 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîs
)

47 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

48 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

49 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

50 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

51 
	}
}

53 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

55  
obje˘1
 =
obje˘2
;

57 
	}
}

59 * 
	$ty≥NameVÆueToSåög
(* 
obje˘
)

61  (*Ë
obje˘
;

62 
	}
}

64 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîsOnObje˘
)

66 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

67 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

68 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

69 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

70 
	}
}

72 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫I¡VÆue
)

74 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

75 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
ötVÆue
);

76 
	`LONGS_EQUAL
(
MOCKVALUETYPE_INTEGER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

77 
	}
}

79 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫DoubÀVÆue
)

81 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫DoubÀVÆue
(1.0);

82 
	`DOUBLES_EQUAL
(1.0, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
, 0.005);

83 
	`LONGS_EQUAL
(
MOCKVALUETYPE_DOUBLE
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

84 
	}
}

86 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫SåögVÆue
)

88 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫SåögVÆue
("hello world");

89 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
°rögVÆue
);

90 
	`LONGS_EQUAL
(
MOCKVALUETYPE_STRING
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

91 
	}
}

93 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫PoöãrVÆue
)

95 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫PoöãrVÆue
((*) 10);

96 
	`POINTERS_EQUAL
((*Ë10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
poöãrVÆue
);

97 
	`LONGS_EQUAL
(
MOCKVALUETYPE_POINTER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

98 
	}
}

100 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tWôhSc›e
)

102 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

103 
	`LONGS_EQUAL
(0, 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
());

104 
	`LONGS_EQUAL
(1, 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
());

105 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

106 
	}
}

108 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëI¡D©a
)

110 
	`mock_c
()->
	`£tI¡D©a
("integer", 10);

111 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`gëD©a
("öãgî").
vÆue
.
ötVÆue
);

112 
	}
}

114 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëDoubÀD©a
)

116 
	`mock_c
()->
	`£tDoubÀD©a
("double", 1.0);

117 
	`DOUBLES_EQUAL
(1.00, 
	`mock_c
()->
	`gëD©a
("doubÀ").
vÆue
.
doubÀVÆue
, 0.05);

118 
	}
}

120 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëSåögD©a
)

122 
	`mock_c
()->
	`£tSåögD©a
("string", "hello world");

123 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`gëD©a
("°rög").
vÆue
.
°rögVÆue
);

124 
	}
}

126 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëPoöãrD©a
)

128 
	`mock_c
()->
	`£tPoöãrD©a
("pointer", (*) 1);

129 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("poöãr").
vÆue
.
poöãrVÆue
);

130 
	}
}

132 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëD©aObje˘
)

134 
	`mock_c
()->
	`£tD©aObje˘
("name", "type", (*) 1);

135 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("«me").
vÆue
.
obje˘VÆue
);

136 
	}
}

138 
	$TEST
(
MockSuµ‹t_c
, 
W‹ksInCFûe
)

140 
	`Æl_mock_suµ‹t_c_ˇŒs
();

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_cCFile.c

28 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

30 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

32  
obje˘1
 =
obje˘2
;

34 
	}
}

36 * 
	$ty≥NameVÆueToSåög
(* 
obje˘
)

38  (*Ë
obje˘
;

39 
	}
}

41 
	$Æl_mock_suµ‹t_c_ˇŒs
()

43 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

44 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

45 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

47 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

48 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

49 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨am©îs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

50 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

52 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

53 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

54 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

55 
	`mock_c
()->
	`˛ór
();

56 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

58 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

59 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
();

60 
	`mock_c
()->
	`ªtu∫VÆue
();

61 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo2")->
	`™dRëu∫DoubÀVÆue
(1.0);

62 
	`mock_c
()->
	`a˘uÆCÆl
("boo2")->
	`ªtu∫VÆue
();

63 
	`mock_c
()->
	`ªtu∫VÆue
();

65 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo3")->
	`™dRëu∫SåögVÆue
("hello world");

66 
	`mock_c
()->
	`a˘uÆCÆl
("boo3")->
	`ªtu∫VÆue
();

67 
	`mock_c
()->
	`ªtu∫VÆue
();

69 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo4")->
	`™dRëu∫PoöãrVÆue
((*) 10);

70 
	`mock_c
()->
	`a˘uÆCÆl
("boo4")->
	`ªtu∫VÆue
();

71 
	`mock_c
()->
	`ªtu∫VÆue
();

73 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

74 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
();

75 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
();

76 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

77 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_cCFile.h

28 #i‚de‡
__Te°MockSuµ‹tc_CFûe__h


29 
	#__Te°MockSuµ‹tc_CFûe__h


	)

31 
Æl_mock_suµ‹t_c_ˇŒs
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°Ext/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

36 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
OrdîedTe°
 
‹dîedTe°
;

39 
OrdîedTe°
 
‹dîedTe°2
;

40 
OrdîedTe°
 
‹dîedTe°3
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

43 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

45 
OrdîedTe°
* 
‹dîedTe°Cache
;

46 
	`£tup
()

48 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

49 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

51 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

52 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

55 
	`ã¨down
()

57 
dñëe
 
fixtuª
;

58 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

61 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

63 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

66 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

68 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

71 
Uã°
* 
	`fú°Te°
()

73  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

76 
Uã°
* 
	`£c⁄dTe°
()

78  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

80 
	}
};

82 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

84 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10, 5);

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

150 
	}
};

152 
	gã°Numbî
 = 0;

154 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

156 
	`CHECK
(
ã°Numbî
 == 0);

157 
ã°Numbî
++;

158 
	}
}

160 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

162 
	`CHECK
(
ã°Numbî
 == 2);

163 
ã°Numbî
++;

164 
	}
}

166 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

168 
	`CHECK
(
ã°Numbî
 == 1);

169 
ã°Numbî
++;

170 
	}
}

172 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

174 
	`CHECK
(
ã°Numbî
 == 4);

175 
ã°Numbî
++;

176 
	}
}

178 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

180 
	`CHECK
(
ã°Numbî
 == 3);

181 
ã°Numbî
++;

182 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\AllTests.h

29 
IMPORT_TEST_GROUP
–
Sim∂eSåögExãnsi⁄s
);

30 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\SimpleStringExtensionsTest.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	$TEST_GROUP
(
Sim∂eSåögExãnsi⁄s
)

33 
	}
};

35 
usög
 
«me•a˚
 
	g°d
;

37 
	$TEST
(
Sim∂eSåögExãnsi⁄s
, 
‰omStdSåög
)

39 
°rög
 
	`s
("hello");

40 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

42 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\SimpleStringFromStdintTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

31 
	~<°döt.h
>

33 
	$TEST_GROUP
(
Sim∂eSåögFromStdöt
)

35 
	}
};

37 
usög
 
«me•a˚
 
	g°d
;

40 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt64_t
)

48 
uöt64_t
 
i
 = 10;

49 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

50 
	`CHECK_EQUAL
("uöt64_ànŸ suµ‹ãd", 
ªsu…
);

52 
	}
}

54 
	$TEST
(
Sim∂eSåögFromStdöt
, 
I¡64_t
)

67 
	}
}

69 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt32_t
)

71 
uöt32_t
 
i
 = 0xffffffff;

73 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

74 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

75 
	}
}

77 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt16_t
)

79 
uöt16_t
 
i
 = 0xffff;

81 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

82 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

83 
	}
}

85 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt8_t
)

87 
uöt8_t
 
i
 = 0xff;

89 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

90 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

91 
	}
}

93 
	$IGNORE_TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt64_t
)

97 
	}
}

99 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt32_t
)

101 
uöt32_t
 
i
 = 0xffffffff;

102 
	`CHECK_EQUAL
(
i
, i);

103 
	}
}

105 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt16_t
)

107 
uöt16_t
 
i
 = 0xffff;

108 
	`CHECK_EQUAL
(
i
, i);

109 
	}
}

111 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt8_t
)

113 
uöt8_t
 
i
 = 0xff;

114 
	`CHECK_EQUAL
(
i
, i);

115 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

35 { 
Te°Te°ögFixtuª
* 
fixtuª
;

37 
OrdîedTe°
 
‹dîedTe°
;

38 
OrdîedTe°
 
‹dîedTe°2
;

39 
OrdîedTe°
 
‹dîedTe°3
;

40 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

44 
OrdîedTe°
* 
‹dîedTe°Cache
;

45 
	`£tup
()

47 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

48 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

50 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

51 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

54 
	`ã¨down
()

56 
dñëe
 
fixtuª
;

57 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

60 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

62 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

65 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

67 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

70 
Uã°
* 
	`fú°Te°
()

72  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

75 
Uã°
* 
	`£c⁄dTe°
()

77  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

79 
	}
};

81 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

83 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10,

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

149 {
	}
};

151 
	gã°Numbî
 = 0;

153 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

155 
	`CHECK
(
ã°Numbî
 == 0);

156 
ã°Numbî
++;

157 
	}
}

159 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

161 
	`CHECK
(
ã°Numbî
 == 2);

162 
ã°Numbî
++;

163 
	}
}

165 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

167 
	`CHECK
(
ã°Numbî
 == 1);

168 
ã°Numbî
++;

169 
	}
}

171 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

173 
	`CHECK
(
ã°Numbî
 == 4);

174 
ã°Numbî
++;

175 
	}
}

177 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

179 
	`CHECK
(
ã°Numbî
 == 3);

180 
ã°Numbî
++;

181 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\JUnitOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 c⁄° * 
	gtheTime
 = "1978-10-03T00:00:00";

37 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

39  
mûlisTime
;

40 
	}
}

42 c⁄° * 
	$MockGëPœtf‹mS≥cificTimeSåög
()

44  
theTime
;

45 
	}
}

47 
	$TEST_GROUP
(
JUnôOuçutTe°
)

49 ˛as†
	cMockJUnôTe°Ouçut
: 
public
 
JUnôTe°Ouçut


51 
public
:

54 
ã°GroupSize
 = 10

58 
deÁu…Size
 = 7

61 
fûesO≥√d
;

62 
fûeBÆ™˚
;

64 
Sim∂eSåög
 
fûeName_
;

65 
Sim∂eSåög
 
buf„r_
;

67 
Te°Resu…
* 
ªs_
;

68 
	sTe°D©a


70 
	`Te°D©a
() :

71 
	`t°_
(0), 
	`ã°Name_
(0), 
	`Áûuª_
(0)

75 
Uã°
* 
t°_
;

76 
Sim∂eSåög
* 
ã°Name_
;

77 
Te°Faûuª
* 
Áûuª_
;

80 
	sTe°GroupD©a


82 
	`Te°GroupD©a
() :

83 
	`numbîTe°s_
(0), 
	`tŸÆFaûuªs_
(0), 
	`«me_
(""), 
	`ã°D©a_
(0)

88 
numbîTe°s_
;

89 
tŸÆFaûuªs_
;

90 
Sim∂eSåög
 
«me_
;

92 
Te°D©a
* 
ã°D©a_
;

95 
Te°GroupD©a
 
ã°GroupD©a_
[
ã°GroupSize
];

97 
Te°GroupD©a
& 
	`cuºítGroup
()

99  
ã°GroupD©a_
[
fûesO≥√d
 - 1];

102 
	`ª£tXmlFûe
()

104 
buf„r_
 = "";

107 
	`MockJUnôTe°Ouçut
() :

108 
	`fûesO≥√d
(0), 
	`fûeBÆ™˚
(0), 
	`ªs_
(0)

110 
i
 = 0; i < 
ã°GroupSize
; i++) {

111 
ã°GroupD©a_
[
i
].
numbîTe°s_
 = 0;

112 
ã°GroupD©a_
[
i
].
tŸÆFaûuªs_
 = 0;

117 
	`£tResu…
(
Te°Resu…
* 
ã°Res
)

119 
ªs_
 = 
ã°Res
;

122 
vútuÆ
 ~
	`MockJUnôTe°Ouçut
()

124 
i
 = 0; i < 
ã°GroupSize
; i++) {

125 
j
 = 0; j < 
ã°GroupD©a_
[
i
].
numbîTe°s_
; j++) {

126 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
t°_
;

127 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
ã°Name_
;

128 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
Áûuª_
Ë
dñëe
ÅestGroupData_[i].testData_[j].failure_;

130 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
Ë
dñëe
[]ÅestGroupData_[i].testData_;

133 
	`LONGS_EQUAL
(0, 
fûeBÆ™˚
);

136 
	`wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf
)

138 
buf„r_
 +
buf
;

141 
	`›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
ö_FûeName
)

143 
fûesO≥√d
++;

144 
fûeBÆ™˚
++;

145 
fûeName_
 = 
ö_FûeName
;

148 
	`˛o£Fûe
()

150 
	`CHECK_XML_FILE
();

151 
	`ª£tXmlFûe
();

152 
fûeBÆ™˚
--;

155 
	`¸óãTe°sInGroup
(
ödex
, 
amou¡
, c⁄° * 
group
, c⁄° * 
ba£«me
)

157 
ã°GroupD©a_
[
ödex
].
«me_
 = 
group
;

158 
ã°GroupD©a_
[
ödex
].
numbîTe°s_
 = 
amou¡
;

160 
ã°GroupD©a_
[
ödex
].
ã°D©a_
 = 
√w
 
Te°D©a
[
amou¡
];

161 
i
 = 0; i < 
amou¡
; i++) {

162 
Te°D©a
& 
ã°D©a
 = 
ã°GroupD©a_
[
ödex
].
ã°D©a_
[
i
];

163 
ã°D©a
.
ã°Name_
 = 
√w
 
	`Sim∂eSåög
(
ba£«me
);

164 *
ã°D©a
.
ã°Name_
 +
	`SåögFrom
((Ë
i
);

165 
ã°D©a
.
t°_
 = 
√w
 
	`Uã°
(
group
,Åe°D©a.
ã°Name_
->
	`asCh¨Såög
(), "file", 1);

168 
	`runTe°s
()

170 
ªs_
->
	`ã°sSèπed
();

171 
i
 = 0; i < 
ã°GroupSize
; i++) {

172 
Te°GroupD©a
& 
d©a
 = 
ã°GroupD©a_
[
i
];

173 i‡(
d©a
.
numbîTe°s_
 == 0) ;

175 
mûlisTime
 = 0;

176 
ªs_
->
	`cuºítGroupSèπed
(
d©a
.
ã°D©a_
[0].
t°_
);

177 
j
 = 0; j < 
d©a
.
numbîTe°s_
; j++) {

178 
Te°D©a
& 
ã°D©a
 = 
d©a
.
ã°D©a_
[
j
];

180 
mûlisTime
 = 0;

181 
ªs_
->
	`cuºítTe°Sèπed
(
ã°D©a
.
t°_
);

182 i‡(
ã°D©a
.
Áûuª_
Ë
	`¥öt
(*testData.failure_);

183 
mûlisTime
 = 10;

184 
ªs_
->
	`cuºítTe°Ended
(
ã°D©a
.
t°_
);

186 
mûlisTime
 = 50;

187 
ªs_
->
	`cuºítGroupEnded
(
d©a
.
ã°D©a_
[0].
t°_
);

189 
ªs_
->
	`ã°sEnded
();

192 
	`£tFaûuª
(
groupIndex
, 
ã°Index
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
mesßge
)

194 
Te°D©a
& 
d©a
 = 
ã°GroupD©a_
[
groupIndex
].
ã°D©a_
[
ã°Index
];

195 
d©a
.
Áûuª_
 = 
√w
 
	`Te°Faûuª
(d©a.
t°_
, 
fûeName
, 
löeNumbî
, 
mesßge
);

196 
ã°GroupD©a_
[
groupIndex
].
tŸÆFaûuªs_
++;

199 
	`CHECK_HAS_XML_HEADER
(
Sim∂eSåög
 
°rög
)

201 
	`STRCMP_EQUAL
("<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>\n", 
°rög
.
	`asCh¨Såög
());

204 
	`CHECK_TEST_SUITE_START
(
Sim∂eSåög
 
ouçut
)

206 
Te°GroupD©a
& 
group
 = 
	`cuºítGroup
();

207 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°suôêîr‹s=\"0\" faûuªs=\"%d\" ho°«me=\"loˇlho°\"Çame=\"%s\"Åe°s=\"%d\"Åime=\"0.050\"Åime°amp=\"%s\">\n", 
group
.
tŸÆFaûuªs_
,

208 
group
.
«me_
.
	`asCh¨Såög
(), group.
numbîTe°s_
, 
theTime
);

209 
	`CHECK_EQUAL
(
buf
, 
ouçut
);

212 
	`CHECK_XML_FILE
()

214 
size_t
 
tŸÆSize
 = 
	`cuºítGroup
().
numbîTe°s_
 + 
deÁu…Size
 + (cuºítGroup().
tŸÆFaûuªs_
 * 2);

215 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

216 
buf„r_
.
	`•lô
("\n", 
cﬁ
);

217 
	`CHECK
(
cﬁ
.
	`size
(Ë>
tŸÆSize
);

218 
	`CHECK_HAS_XML_HEADER
(
cﬁ
[0]);

219 
	`CHECK_TEST_SUITE_START
(
cﬁ
[1]);

220 
	`CHECK_PROPERTIES_START
(
cﬁ
[2]);

221 
	`CHECK_PROPERTIES_END
(
cﬁ
[3]);

222 
	`CHECK_TESTS
(&
cﬁ
[4]);

223 
	`CHECK_SYSTEM_OUT
(
cﬁ
[cﬁ.
	`size
() - 3]);

224 
	`CHECK_SYSTEM_ERR
(
cﬁ
[cﬁ.
	`size
() - 2]);

225 
	`CHECK_TEST_SUITE_END
(
cﬁ
[cﬁ.
	`size
() - 1]);

228 
	`CHECK_PROPERTIES_START
(c⁄° 
Sim∂eSåög
& 
ouçut
)

230 
	`STRCMP_EQUAL
("<¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

233 
	`CHECK_PROPERTIES_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

235 
	`STRCMP_EQUAL
("</¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

238 
	`CHECK_SYSTEM_OUT
(c⁄° 
Sim∂eSåög
& 
ouçut
)

240 
	`STRCMP_EQUAL
("<sy°em-out></sy°em-out>\n", 
ouçut
.
	`asCh¨Såög
());

243 
	`CHECK_SYSTEM_ERR
(c⁄° 
Sim∂eSåög
& 
ouçut
)

245 
	`STRCMP_EQUAL
("<sy°em-îr></sy°em-îr>\n", 
ouçut
.
	`asCh¨Såög
());

248 
	`CHECK_TEST_SUITE_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

250 
	`STRCMP_EQUAL
("</ã°suôe>", 
ouçut
.
	`asCh¨Såög
());

252 
	`CHECK_TESTS
(
Sim∂eSåög
* 
¨r
)

254 
ödex
 = 0, 
curTe°
 = 0; curTe° < 
	`cuºítGroup
().
numbîTe°s_
; curTest++, index++) {

255 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°ˇ£ cœs¢ame=\"%s\"Çame=\"%s\"Åime=\"0.010\">\n", 
	`cuºítGroup
().
«me_
.
	`asCh¨Såög
(),

256 
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
t°_
->
	`gëName
().
	`asCh¨Såög
());

257 
	`CHECK_EQUAL
(
buf
, 
¨r
[
ödex
]);

258 i‡(
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
) {

259 
	`CHECK_FAILURE
(
¨r
, 
ödex
, 
curTe°
);

261 
buf
 = "</testcase>\n";

262 
	`CHECK_EQUAL
(
buf
, 
¨r
[++
ödex
]);

266 
	`CHECK_FAILURE
(
Sim∂eSåög
* 
¨r
, & 
i
, 
curTe°
)

268 
Te°Faûuª
& 
f
 = *
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
;

269 
i
++;

270 
Sim∂eSåög
 
mesßge
 = 
f
.
	`gëMesßge
().
	`asCh¨Såög
();

271 
mesßge
.
	`ª∂a˚
('"', '\'');

272 
mesßge
.
	`ª∂a˚
('<', '[');

273 
mesßge
.
	`ª∂a˚
('>', ']');

274 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

275 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<Áûuª mesßge=\"%s:%d: %s\"Åy≥=\"As£πi⁄FaûedEº‹\">\n", 
f
.
	`gëFûeName
().
	`asCh¨Såög
(), f.
	`gëFaûuªLöeNumbî
(), 
mesßge
.asCharString());

276 
	`CHECK_EQUAL
(
buf
, 
¨r
[
i
]);

277 
i
++;

278 
	`STRCMP_EQUAL
("</Áûuª>\n", 
¨r
[
i
].
	`asCh¨Såög
());

280 
	}
};

282 
MockJUnôTe°Ouçut
 * 
	gouçut
;

283 
Te°Resu…
 *
	gªs
;

285 
	$£tup
()

287 
ouçut
 = 
√w
 
	`MockJUnôTe°Ouçut
();

288 
ªs
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

289 
ouçut
->
	`£tResu…
(
ªs
);

290 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

291 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(
MockGëPœtf‹mS≥cificTimeSåög
);

292 
	}
}

293 
	$ã¨down
()

295 
dñëe
 
ouçut
;

296 
dñëe
 
ªs
;

297 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

298 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(0);

299 
	}
}

301 
	$runTe°s
()

303 
ouçut
->
	`¥ötTe°sSèπed
();

304 
ouçut
->
	`runTe°s
();

305 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

306 
	}
}

309 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupAŒPass
)

311 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "group", "name");

312 
	`runTe°s
();

313 
	`STRCMP_EQUAL
("˝puã°_group.xml", 
ouçut
->
fûeName_
.
	`asCh¨Såög
());

314 
	`LONGS_EQUAL
(1, 
ouçut
->
fûesO≥√d
);

315 
	}
}

317 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAŒPass
)

319 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group", "name");

320 
	`runTe°s
();

321 
	}
}

323 
	$TEST
(
JUnôOuçutTe°
, 
mu…ùÀTe°sInTwoGroupAŒPass
)

325 
ouçut
->
	`¸óãTe°sInGroup
(0, 3, "group", "name");

326 
ouçut
->
	`¸óãTe°sInGroup
(1, 8, "secondGroup", "secondName");

327 
	`runTe°s
();

328 
	`LONGS_EQUAL
(2, 
ouçut
->
fûesO≥√d
);

329 
	}
}

331 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupFaûed
)

333 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

334 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test <\"just\"> failed");

335 
	`runTe°s
();

336 
	}
}

338 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAndThªeFaû
)

340 
ouçut
->
	`¥ötTe°sSèπed
();

341 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "failedGroup", "failedName");

342 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

343 
ouçut
->
	`£tFaûuª
(0, 1, "file", 5, "Also failed");

344 
ouçut
->
	`£tFaûuª
(0, 4, "file", 8, "And failedágain");

345 
	`runTe°s
();

346 
	}
}

348 
	$TEST
(
JUnôOuçutTe°
, 
fourGroupsAndSomePassAndSomeFaû
)

350 
ouçut
->
	`¥ötTe°sSèπed
();

351 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group1", "firstName");

352 
ouçut
->
	`¸óãTe°sInGroup
(1, 50, "group2", "secondName");

353 
ouçut
->
	`¸óãTe°sInGroup
(2, 3, "group3", "thirdName");

354 
ouçut
->
	`¸óãTe°sInGroup
(3, 5, "group4", "fourthName");

356 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

357 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

358 
	`runTe°s
();

359 
	}
}

361 
	$TEST
(
JUnôOuçutTe°
, 
mesßgeWôhNewLöe
)

363 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

364 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test \n failed");

365 
	`runTe°s
();

366 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakAllocatorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Mem‹yLókAŒoˇt‹Te°
)

34 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
;

36 
	`ã¨down
()

38 i‡(
Æloˇt‹
Ë
dñëe
állocator;

40 
	}
};

42 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAŒoˇt‹
)

44 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

45 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
Æloˇt‹
);

46 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

47 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

48 
	`POINTERS_EQUAL
(
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

49 
	}
}

51 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAºayAŒoˇt‹
)

53 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

54 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
Æloˇt‹
);

55 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

56 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

57 
	`POINTERS_EQUAL
(
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

58 
	}
}

60 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítMÆlocAŒoˇt‹
)

62 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

63 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
Æloˇt‹
);

64 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

65 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

66 
	`POINTERS_EQUAL
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

67 
	}
}

69 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocAŒoˇti⁄
)

71 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

72 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

73 
	}
}

75 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocNames
)

77 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

78 
	`STRCMP_EQUAL
("Sènd¨d MÆlo¯AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

79 
	`STRCMP_EQUAL
("mÆloc", 
Æloˇt‹
->
	`Æloc_«me
());

80 
	`STRCMP_EQUAL
("‰ì", 
Æloˇt‹
->
	`‰ì_«me
());

81 
	}
}

83 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAŒoˇti⁄
)

85 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

86 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

87 
	}
}

89 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewNames
)

91 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

92 
	`STRCMP_EQUAL
("Sènd¨d New AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

93 
	`STRCMP_EQUAL
("√w", 
Æloˇt‹
->
	`Æloc_«me
());

94 
	`STRCMP_EQUAL
("dñëe", 
Æloˇt‹
->
	`‰ì_«me
());

95 
	}
}

97 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayAŒoˇti⁄
)

99 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

100 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

101 
	}
}

103 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayNames
)

105 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

106 
	`STRCMP_EQUAL
("Sènd¨d New [] AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

107 
	`STRCMP_EQUAL
("√w []", 
Æloˇt‹
->
	`Æloc_«me
());

108 
	`STRCMP_EQUAL
("dñëê[]", 
Æloˇt‹
->
	`‰ì_«me
());

109 
	}
}

111 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownAŒoˇti⁄
)

113 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

114 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

115 
	}
}

117 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownNames
)

119 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

120 
	`STRCMP_EQUAL
("NuŒ AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

121 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`Æloc_«me
());

122 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`‰ì_«me
());

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakDetectorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

30 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 ˛as†
	cMem‹yLókFaûuªF‹Te°
: 
public
 
Mem‹yLókFaûuª


35 
public
:

36 
vútuÆ
 ~
	$Mem‹yLókFaûuªF‹Te°
()

40 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

42 *
mesßge
 = 
Áû_°rög
;

43 
	}
}

45 
Sim∂eSåög
 *
	gmesßge
;

48 ˛as†
	cNewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dNewAŒoˇt‹


50 
public
:

51 
	$NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

52 
	`Æloc_ˇŒed
(0), 
	$‰ì_ˇŒed
(0)

56 
Æloc_ˇŒed
;

57 
‰ì_ˇŒed
;

58 * 
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

60 
Æloc_ˇŒed
++;

61  
Sènd¨dNewAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, "file", 1);

62 
	}
}

63 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

65 
‰ì_ˇŒed
++;

66 
Sènd¨dNewAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

67 
	}
}

70 ˛as†
	cMÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dMÆlocAŒoˇt‹


72 
public
:

73 
	$MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

74 
	`Æloc_ˇŒed
(0), 
	`‰ì_ˇŒed
(0), 
	`ÆlocMem‹yLókNodeCÆÀd
(0), 
	$‰ìMem‹yLókNodeCÆÀd
(0)

78 
Æloc_ˇŒed
;

79 
‰ì_ˇŒed
;

80 
ÆlocMem‹yLókNodeCÆÀd
;

81 
‰ìMem‹yLókNodeCÆÀd
;

82 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

84 
Æloc_ˇŒed
++;

85  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

86 
	}
}

87 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

89 
‰ì_ˇŒed
++;

90 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 
	}
}

93 * 
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

95 
ÆlocMem‹yLókNodeCÆÀd
++;

96  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
__FILE__
, 
__LINE__
);

97 
	}
}

99 
	$‰ìMem‹yLókNode
(* 
mem‹y
)

101 
‰ìMem‹yLókNodeCÆÀd
++;

102 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
__FILE__
, 
__LINE__
);

103 
	}
}

106 
	$TEST_GROUP
(
Mem‹yLókDëe˘‹Te°
)

108 
Mem‹yLókDëe˘‹
* 
dëe˘‹
;

109 
Mem‹yLókFaûuªF‹Te°
 *
ªp‹ãr
;

110 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
mÆlocAŒoˇt‹
;

111 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
√wAŒoˇt‹
;

112 
Sènd¨dNewAºayAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

114 
	`£tup
()

116 
dëe˘‹
 = 
√w
 
Mem‹yLókDëe˘‹
;

117 
ªp‹ãr
 = 
√w
 
Mem‹yLókFaûuªF‹Te°
;

118 
mÆlocAŒoˇt‹
 = 
√w
 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

119 
√wAŒoˇt‹
 = 
√w
 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

120 
√wAºayAŒoˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

121 
dëe˘‹
->
	`öô
(
ªp‹ãr
);

122 
dëe˘‹
->
	`íabÀ
();

123 
dëe˘‹
->
	`°¨tCheckög
();

124 
ªp‹ãr
->
mesßge
 = 
√w
 
	`Sim∂eSåög
();

126 
	`ã¨down
()

128 
dñëe
 
ªp‹ãr
->
mesßge
;

129 
dñëe
 
dëe˘‹
;

130 
dñëe
 
ªp‹ãr
;

131 
dñëe
 
mÆlocAŒoˇt‹
;

132 
dñëe
 
√wAŒoˇt‹
;

133 
dñëe
 
√wAºayAŒoˇt‹
;

135 
	}
};

137 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√Lók
)

139 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 3);

140 
dëe˘‹
->
	`°›Checkög
();

141 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

142 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

143 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 3"));

144 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

145 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

146 
	`Pœtf‹mS≥cificFªe
(
mem
);

147 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

148 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

149 
	}
}

151 
	~<°dio.h
>

153 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√HundªdLóks
)

155 c⁄° 
amou¡_Æloc
 = 100;

156 *
mem
[
amou¡_Æloc
];

157 
i
 = 0; i < 
amou¡_Æloc
; i++)

158 
mem
[
i
] = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 3);

159 
dëe˘‹
->
	`°›Checkög
();

161 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

163 
	`STRCMP_CONTAINS
(
MEM_LEAK_HEADER
, 
ouçut
.
	`asCh¨Såög
());

164 
	`STRCMP_CONTAINS
(
MEM_LEAK_FOOTER
, 
ouçut
.
	`asCh¨Såög
());

165 
	`STRCMP_CONTAINS
(
MEM_LEAK_ADDITION_MALLOC_WARNING
, 
ouçut
.
	`asCh¨Såög
());

168 
j
 = 0; j < 
amou¡_Æloc
; j++)

169 
	`Pœtf‹mS≥cificFªe
(
mem
[
j
]);

170 
	}
}

172 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókOutsideCheckögPîiod
)

174 
dëe˘‹
->
	`°›Checkög
();

175 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

176 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
);

177 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

178 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

179 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

180 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

181 
	`Pœtf‹mS≥cificFªe
(
mem
);

182 
	}
}

184 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
NoLóksWh©s€vî
)

186 
dëe˘‹
->
	`°›Checkög
();

187 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

188 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
));

189 
	}
}

191 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoLóksUsögO≥øt‹New
)

193 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

194 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

195 
dëe˘‹
->
	`°›Checkög
();

196 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

197 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

198 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 8"));

199 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

200 
	`Pœtf‹mS≥cificFªe
(
mem
);

201 
	`Pœtf‹mS≥cificFªe
(
mem2
);

202 
	}
}

204 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocButNoLók
)

206 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

207 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

208 
dëe˘‹
->
	`°›Checkög
();

209 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

210 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

211 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

212 
	}
}

214 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√Lók
)

216 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

217 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

218 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

219 
dëe˘‹
->
	`°›Checkög
();

220 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

221 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

222 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 12"));

223 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 4"));

224 
	`Pœtf‹mS≥cificFªe
(
mem2
);

225 
	`LONGS_EQUAL
(2, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

226 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

227 
	}
}

229 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√LókRevî£Ordî
)

231 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

232 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

233 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem2
);

234 
dëe˘‹
->
	`°›Checkög
();

235 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

236 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

237 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 12"));

238 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

239 
	`Pœtf‹mS≥cificFªe
(
mem
);

240 
	}
}

242 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
DñëeN⁄AloˇãdMem‹y
)

244 
a
;

245 * 
∑
 = &
a
;

246 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
∑
, "FREE.c", 100);

247 
dëe˘‹
->
	`°›Checkög
();

248 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
));

249 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: <unknown>Üine: 0 size: 0Åype: unknown"));

250 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

251 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

252 
	}
}

254 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiod
)

256 
dëe˘‹
->
	`°›Checkög
();

257 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

258 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

259 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

260 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

261 
	}
}

263 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiodCom∂iˇãdCa£
)

265 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

266 
dëe˘‹
->
	`°›Checkög
();

268 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

269 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

270 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

271 
	`Pœtf‹mS≥cificFªe
(
mem
);

272 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

273 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

275 
dëe˘‹
->
	`°¨tCheckög
();

276 * 
mem3
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

277 
dëe˘‹
->
	`°›Checkög
();

278 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

279 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

281 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

282 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

283 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

285 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_Æl
);

286 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

287 
	`Pœtf‹mS≥cificFªe
(
mem2
);

288 
	`Pœtf‹mS≥cificFªe
(
mem3
);

289 
	}
}

291 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókUsögO≥øt‹NewWôhFûeLöe
)

293 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4, "file.cpp", 1234);

294 
dëe˘‹
->
	`°›Checkög
();

295 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

296 
	`CHECK
(
ouçut
.
	`c⁄èös
("file.cpp"));

297 
	`CHECK
(
ouçut
.
	`c⁄èös
("1234"));

298 
	`Pœtf‹mS≥cificFªe
(
mem
);

299 
	}
}

301 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªeUsögAºayNew
)

303 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 10, "file.cpp", 1234);

304 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 12);

305 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

306 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

307 
	`CHECK
(
ouçut
.
	`c⁄èös
("new []"));

308 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
);

309 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem2
);

310 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

311 
dëe˘‹
->
	`°›Checkög
();

312 
	}
}

314 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªe
)

316 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

317 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 12);

318 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

319 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

320 
	`CHECK
(
ouçut
.
	`c⁄èös
("malloc"));

321 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

322 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
, "file.c", 5678);

323 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

324 
dëe˘‹
->
	`°›Checkög
();

325 
	}
}

327 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√RóŒoc
)

329 * 
mem1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

331 * 
mem2
 = 
dëe˘‹
->
	`ªÆlocMem‹y
(
mÆlocAŒoˇt‹
, 
mem1
, 1000, "other.cpp", 5678);

333 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

334 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

335 
	`CHECK
(
ouçut
.
	`c⁄èös
("other.cpp"));

337 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
);

338 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

339 
dëe˘‹
->
	`°›Checkög
();

340 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
Æloc_ˇŒed
);

341 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
‰ì_ˇŒed
);

342 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
ÆlocMem‹yLókNodeCÆÀd
);

343 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
‰ìMem‹yLókNodeCÆÀd
);

344 
	}
}

347 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocAndFªeWôhDif„ªn˚In°™˚sOfTheSameAŒoˇt‹Ty≥
)

349 
Sènd¨dNewAºayAŒoˇt‹
 
√wAºayAŒoˇt‹Two
;

350 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

351 
dëe˘‹
->
	`dóŒocMem‹y
(&
√wAºayAŒoˇt‹Two
, 
mem
, "FREE.c", 100);

352 
dëe˘‹
->
	`°›Checkög
();

353 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

354 
	}
}

356 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥
)

358 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

359 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

360 
dëe˘‹
->
	`°›Checkög
();

361 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
));

362 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 100Åype:Çew []"));

363 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

364 
	}
}

366 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥WôhCheckögDißbÀd
)

368 
dëe˘‹
->
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

369 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

370 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
, "FREE.c", 100);

371 
dëe˘‹
->
	`°›Checkög
();

372 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

373 
dëe˘‹
->
	`íabÀAŒoˇti⁄Ty≥Checkög
();

374 
	}
}

376 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mÆlocLókGivesAddôi⁄ÆW¨nög
)

378 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 100, "ALLOC.c", 10);

379 
dëe˘‹
->
	`°›Checkög
();

380 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

381 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d byáŒoˇtög usögÅhê˝puã° vîsi⁄ o‡mÆloc", 
ouçut
.
	`asCh¨Såög
());

382 
	`Pœtf‹mS≥cificFªe
(
mem
);

383 
	}
}

385 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
√wLókD€sNŸGiveAddôi⁄ÆW¨nög
)

387 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 100, "ALLOC.c", 10);

388 
dëe˘‹
->
	`°›Checkög
();

389 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

390 
	`CHECK
(! 
ouçut
.
	`c⁄èös
("MemoryÜeakÑeportsábout mallocánd free"));

391 
	`Pœtf‹mS≥cificFªe
(
mem
);

392 
	}
}

394 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
M¨kCheckögPîiodLóksAsN⁄CheckögPîiod
)

396 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

397 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

398 
dëe˘‹
->
	`°›Checkög
();

399 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

400 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

401 
dëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

402 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

403 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

404 
	`Pœtf‹mS≥cificFªe
(
mem
);

405 
	`Pœtf‹mS≥cificFªe
(
mem2
);

406 
	}
}

408 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mem‹yC‹ru±i⁄
)

410 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "ALLOC.c", 10);

411 
mem
[10] = 'O';

412 
mem
[11] = 'H';

413 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

414 
dëe˘‹
->
	`°›Checkög
();

415 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_MEMORY_CORRUPTION
));

416 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 10Åype: malloc"));

417 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

418 
	}
}

420 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ß„lyDñëeNULL
)

422 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 0);

423 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

424 
	}
}

426 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodDißbÀd
)

428 
dëe˘‹
->
	`dißbÀ
();

429 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

430 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

431 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

432 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

433 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

434 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

435 
	}
}

437 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodE«bÀd
)

439 
dëe˘‹
->
	`íabÀ
();

440 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

441 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

442 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

443 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

444 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

445 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

446 
	}
}

448 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodCheckög
)

450 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

451 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

452 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

453 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

454 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

455 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

456 
	}
}

458 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ÆloˇãWôhANuŒAŒoˇt‹Cau£sNoProbÀms
)

460 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 2);

461 
dëe˘‹
->
	`dóŒocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem
);

462 
	}
}

465 
	$TEST_GROUP
(
Sim∂eSåögBuf„r
)

467 
	}
};

469 
	$TEST
(
Sim∂eSåögBuf„r
, 
sim∂eTe°
)

471 
Sim∂eSåögBuf„r
 
buf„r
;

472 
buf„r
.
	`add
("Hello");

473 
buf„r
.
	`add
(" World");

474 
	`STRCMP_EQUAL
("HñlÿW‹ld", 
buf„r
.
	`toSåög
());

475 
	}
}

477 
	$TEST
(
Sim∂eSåögBuf„r
, 
wrôePa°Limô
)

479 
Sim∂eSåögBuf„r
 
buf„r
;

480 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 * 2; i++)

481 
buf„r
.
	`add
("h");

482 
Sim∂eSåög
 
	`°r
("h", 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
-1);

483 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

484 
	}
}

486 
	$TEST
(
Sim∂eSåögBuf„r
, 
£tWrôeLimô
)

488 
Sim∂eSåögBuf„r
 
buf„r
;

489 
buf„r
.
	`£tWrôeLimô
(10);

490 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 ; i++)

491 
buf„r
.
	`add
("h");

492 
Sim∂eSåög
 
	`°r
("h", 10);

493 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

494 
	}
}

496 
	$TEST
(
Sim∂eSåögBuf„r
, 
£tWrôeLimôTooHighIsIgn‹ed
)

498 
Sim∂eSåögBuf„r
 
buf„r
;

499 
buf„r
.
	`£tWrôeLimô
(
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
+10);

500 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
+10; i++)

501 
buf„r
.
	`add
("h");

502 
Sim∂eSåög
 
	`°r
("h", 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
-1);

503 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

504 
	}
}

506 
	$TEST
(
Sim∂eSåögBuf„r
, 
ª£tWrôeLimô
)

508 
Sim∂eSåögBuf„r
 
buf„r
;

509 
buf„r
.
	`£tWrôeLimô
(10);

510 
i
 = 0; i < 
Sim∂eSåögBuf„r
::
SIMPLE_STRING_BUFFER_LEN
 ; i++)

511 
buf„r
.
	`add
("h");

512 
buf„r
.
	`ª£tWrôeLimô
();

513 
buf„r
.
	`add
(
	`Sim∂eSåög
("h", 10).
	`asCh¨Såög
());

515 
Sim∂eSåög
 
	`°r
("h", 20);

516 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
.
	`toSåög
());

517 
	}
}

519 
	$TEST_GROUP
(
RóŒocBugRï‹ãd
Ë{ 
	}
};

521 
	$TEST
(
RóŒocBugRï‹ãd
, 
ThisSôu©i⁄Should¡Cøsh
)

523 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

524 
Mem‹yLókDëe˘‹
 
dëe˘‹
;

525 * 
mem
 = 
dëe˘‹
.
	`ÆlocMem‹y
(&
Æloˇt‹
, 5, "file", 1);

526 
mem
 = 
dëe˘‹
.
	`ªÆlocMem‹y
(&
Æloˇt‹
, mem, 19, "file", 1);

527 
dëe˘‹
.
	`dóŒocMem‹y
(&
Æloˇt‹
, 
mem
);

528 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakOperatorOverloadsTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

4 
	~"CµUTe°/Te°Ouçut.h
"

5 
	~"CµUTe°/Te°Regi°ry.h
"

6 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

8 
	~"AŒoˇti⁄InCµFûe.h
"

11 
	~"AŒoˇti⁄InCFûe.h
"

14 
	$TEST_GROUP
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
)

16 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

17 
	`£tup
()

19 
memLókDëe˘‹
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
();

22 
	}
};

24 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveMÆlocByTemp‹¨lySwôchögOffMÆloc
)

26 
memLóks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

27 #i‡
CPPUTEST_USE_MALLOC_MACROS


28 #unde‡
mÆloc


29 #unde‡
‰ì


31 * 
mem‹y
 = 
	`mÆloc
(10);

32 
	`LONGS_EQUAL
(
memLóks
, 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

33 
	`‰ì
 (
mem‹y
);

34 #i‡
CPPUTEST_USE_MALLOC_MACROS


35 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

37 
	}
}

40 ˛as†
	cNewDummyCœss


42 
	mpublic
:

45 #i‡
CPPUTEST_USE_NEW_MACROS


46 #unde‡
√w


48 * 
›î©‹
 
	$√w
 (
size_t
 
size
, 
addôi⁄Æ
)

49 #i‡
CPPUTEST_USE_NEW_MACROS


50 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

53  
	`mÆloc
(
size
 * 
addôi⁄Æ
);

55 
	}
};

58 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveNewByTemp‹¨lySwôchögOffNew
)

60 #i‡
CPPUTEST_USE_NEW_MACROS


61 #unde‡
√w


62 #unde‡
dñëe


64 * 
mem‹y
 = 
√w
 [10];

65 
dñëe
 [] 
mem‹y
;

66 #i‡
CPPUTEST_USE_NEW_MACROS


67 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

69 
	}
}

72 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


74 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

76 * 
Àak
 = 
	`√wAŒoˇti⁄
();

77 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

78 
dñëe
 
Àak
;

79 
	}
}

81 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

83 * 
Àak
 = 
	`√wAºayAŒoˇti⁄
();

84 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

85 
dñëe
[] 
Àak
;

86 
	}
}

88 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocOvîrideW‹ks
)

90 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

91 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCFûe.c", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

92 
	`‰ìAŒoˇti⁄
(
Àak
);

93 
	}
}

95 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocWôhButFªeWôhoutLókDëe˘i⁄D€¢tCøsh
)

97 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

98 
	`‰ìAŒoˇti⁄WôhoutMa¸o
(
Àak
);

99 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

100 
memLókDëe˘‹
->
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(
Àak
);

101 
	}
}

103 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewOvîlﬂdögWôhoutMa¸oW‹ks
)

105 * 
Àak
 = 
	`√wAŒoˇti⁄WôhoutMa¸o
();

106 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

107 
dñëe
 
Àak
;

108 
	}
}

110 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayOvîlﬂdögWôhoutMa¸oW‹ks
)

112 * 
Àak
 = 
	`√wAºayAŒoˇti⁄WôhoutMa¸o
();

113 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

114 
dñëe
[] 
Àak
;

115 
	}
}

119 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
Mem‹yOvîridesAªDißbÀd
)

121 * 
Àak
 = 
	`√wAŒoˇti⁄
();

122 
	`STRCMP_EQUAL
("Nÿmem‹yÜók†wîêdëe˘ed.", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

123 
dñëe
 
Àak
;

124 
	}
}

128 
	$TEST_GROUP
(
OutOfMem‹yTe°sF‹O≥øt‹New
)

130 
Mem‹yLókAŒoˇt‹
* 
no_mem‹y_Æloˇt‹
;

131 
	`£tup
()

133 
no_mem‹y_Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

134 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

135 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

137 
	`ã¨down
()

139 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

140 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

141 
dñëe
 
no_mem‹y_Æloˇt‹
;

143 
	}
};

145 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


147 #i‡
CPPUTEST_USE_STD_CPP_LIB


149 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

151 
åy
 {

152 
√w
 ;

153 
	`FAIL
("Should haveÅhrownánÉxception!")

155 
	`ˇtch
 (
°d
::
bad_Æloc
) {

157 
	}
}

159 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

161 
åy
 {

162 
√w
 [10];

163 
	`FAIL
("Should haveÅhrownánÉxception!")

165 
	`ˇtch
 (
°d
::
bad_Æloc
) {

167 
	}
}

171 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒ
)

173 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

174 
	}
}

176 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒ
)

178 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

179 
	}
}

183 #unde‡
√w


185 #i‡
CPPUTEST_USE_STD_CPP_LIB


187 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

189 
åy
 {

190 
√w
 ;

191 
	`FAIL
("Should haveÅhrownánÉxception!")

193 
	`ˇtch
 (
°d
::
bad_Æloc
) {

195 
	}
}

197 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

199 
åy
 {

200 
√w
 [10];

201 
	`FAIL
("Should haveÅhrownánÉxception!")

203 
	`ˇtch
 (
°d
::
bad_Æloc
) {

205 
	}
}

208 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

210 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

211 
	}
}

213 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

215 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

216 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakWarningTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

32 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

33 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

36 * 
	gÀak1
;

37 * 
	gÀak2
;

39 ˛as†
	cDummyRï‹ãr
: 
public
 
Mem‹yLókFaûuª


41 
public
:

42 
vútuÆ
 ~
	$DummyRï‹ãr
()

45 
vútuÆ
 
	$Áû
(* )

47 
	}
}

50 
Mem‹yLókDëe˘‹
* 
	gdëe˘‹
;

51 
Mem‹yLókW¨nögPlugö
* 
	gmemPlugö
;

52 
DummyRï‹ãr
 
	gdummy
;

53 
Mem‹yLókAŒoˇt‹
* 
	gÆloˇt‹
;

55 
	$TEST_GROUP
(
Mem‹yLókW¨nögTe°
)

57 
Te°Te°ögFixtuª
* 
fixtuª
;

59 
	`£tup
()

61 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

62 
dëe˘‹
 = 
√w
 
	`Mem‹yLókDëe˘‹
();

63 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

64 
dëe˘‹
->
	`öô
(&
dummy
);

65 
memPlugö
 = 
√w
 
	`Mem‹yLókW¨nögPlugö
("Te°Mem‹yLókW¨nögPlugö", 
dëe˘‹
);

66 
fixtuª
->
ªgi°ry_
->
	`ö°ÆlPlugö
(
memPlugö
);

67 
memPlugö
->
	`íabÀ
();

69 
Àak1
 = 0;

70 
Àak2
 = 0;

72 
	`ã¨down
()

74 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak1
);

75 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak2
);

77 
dñëe
 
fixtuª
;

78 
dñëe
 
memPlugö
;

79 
dñëe
 
dëe˘‹
;

80 
dñëe
 
Æloˇt‹
;

82 
	}
};

84 
	$_ã°TwoLóks
()

86 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

88 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

89 
	}
}

91 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
TwoLóks
)

93 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°TwoLóks
);

94 
fixtuª
->
	`runAŒTe°s
();

95 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

96 
fixtuª
->
	`as£πPrötC⁄èös
("TotalÇumber ofÜeaks: 2");

97 
	}
}

99 
	$_ã°Ign‹e2
()

101 
memPlugö
->
	`ex≥˘LóksInTe°
(2);

102 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

103 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

104 
	}
}

106 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
Ign‹e2
)

108 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°Ign‹e2
);

109 
fixtuª
->
	`runAŒTe°s
();

110 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

111 
	}
}

113 
	$_ÁûAndLókMem‹y
()

115 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

116 
	`FAIL
("");

117 
	}
}

119 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
FaûögTe°D€sNŸRï‹tMem‹yLóks
)

121 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûAndLókMem‹y
);

122 
fixtuª
->
	`runAŒTe°s
();

123 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

124 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\NullTestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	$TEST_GROUP
(
NuŒTe°
)

32 
NuŒTe°
* 
nuŒTe°
;

34 
	`TEST_SETUP
()

36 
nuŒTe°
 = 
√w
 
	`NuŒTe°
();

39 
	`TEST_TEARDOWN
()

41 
dñëe
 
nuŒTe°
;

43 
	}
};

45 
	$TEST
(
NuŒTe°
, 
Cª©e
)

47 
	}
}

49 
	$TEST
(
NuŒTe°
, 
In°™˚AlwaysTheSame
)

51 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

52 
	`CHECK
(&
_ö°™˚
 =&
NuŒTe°
::
	`ö°™˚
());

53 
	}
}

55 
	$TEST
(
NuŒTe°
, 
NuŒTe°sD⁄tCou¡
)

57 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

58 
	`CHECK
(
_ö°™˚
.
	`cou¡Te°s
() == 0);

59 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\PluginTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

34 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

35 
	#GENERIC_PLUGIN3
 "GíîicPlugö3"

	)

37 
	g£quí˚Numbî
;

39 ˛as†
	cDummyPlugö
: 
public
 
Te°Plugö


41 
public
:

42 
	$DummyPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

43 
	`Te°Plugö
(
«me
), 
	`¥eA˘i⁄
(0), 
	$po°A˘i⁄
(0)

47 
vútuÆ
 ~
	$DummyPlugö
()

49 
	}
}

51 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
¥eA˘i⁄
++;

54 
¥eA˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

55 
	}
}

57 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

59 
po°A˘i⁄
++;

60 
po°A˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

61 
	}
}

63 
	g¥eA˘i⁄
;

64 
	g¥eA˘i⁄Sequí˚
;

65 
	gpo°A˘i⁄
;

66 
	gpo°A˘i⁄Sequí˚
;

69 ˛as†
	cDummyPlugöWhichAc˚±sP¨amëîs
: 
public
 
DummyPlugö


71 
public
:

72 
	$DummyPlugöWhichAc˚±sP¨amëîs
(c⁄° 
Sim∂eSåög
& 
«me
) :

73 
	$DummyPlugö
(
«me
)

77 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

79 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

80 i‡(
¨gumít
 == "-paccept")

81  
åue
;

82  
Te°Plugö
::
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
);

83 
	}
}

88 
	$TEST_GROUP
(
PlugöTe°
)

90 
DummyPlugö
* 
fú°Plugö
;

91 
DummyPlugöWhichAc˚±sP¨amëîs
* 
£c⁄dPlugö
;

92 
DummyPlugö
* 
thúdPlugö
;

93 
Te°Te°ögFixtuª
 *
gíFixtuª
;

94 
Te°Regi°ry
 *
ªgi°ry
;

95 
	`£tup
()

97 
fú°Plugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN
);

98 
£c⁄dPlugö
 = 
√w
 
	`DummyPlugöWhichAc˚±sP¨amëîs
(
GENERIC_PLUGIN2
);

99 
thúdPlugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN3
);

100 
gíFixtuª
 = 
√w
 
Te°Te°ögFixtuª
;

101 
ªgi°ry
 = 
gíFixtuª
->
ªgi°ry_
;

102 
ªgi°ry
->
	`ö°ÆlPlugö
(
fú°Plugö
);

103 
£quí˚Numbî
 = 1;

106 
	`ã¨down
()

108 
dñëe
 
fú°Plugö
;

109 
dñëe
 
£c⁄dPlugö
;

110 
dñëe
 
thúdPlugö
;

111 
dñëe
 
gíFixtuª
;

113 
	}
};

115 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

116 
	#GENERIC_PLUGIN4
 "GíîicPlugö4"

	)

118 
	$TEST
(
PlugöTe°
, 
PlugöHasName
)

120 
	`CHECK_EQUAL
(
GENERIC_PLUGIN
, 
fú°Plugö
->
	`gëName
());

121 
	}
}

123 
	$TEST
(
PlugöTe°
, 
In°ÆlPlugö
)

125 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëFú°Plugö
());

126 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

127 
	}
}

129 
	$TEST
(
PlugöTe°
, 
In°ÆlMu…ùÀPlugös
)

131 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

132 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

133 
	`CHECK_EQUAL
(
thúdPlugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN3
));

134 
	`CHECK_EQUAL
(0, 
ªgi°ry
->
	`gëPlugöByName
("I doÇotÉxist"));

135 
	}
}

137 
	$TEST
(
PlugöTe°
, 
A˘i⁄sAŒRun
)

139 
gíFixtuª
->
	`runAŒTe°s
();

140 
gíFixtuª
->
	`runAŒTe°s
();

141 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

142 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
po°A˘i⁄
);

143 
	}
}

145 
	$TEST
(
PlugöTe°
, 
Sequí˚
)

147 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

148 
gíFixtuª
->
	`runAŒTe°s
();

149 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄Sequí˚
);

150 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄Sequí˚
);

151 
	`CHECK_EQUAL
(3, 
fú°Plugö
->
po°A˘i⁄Sequí˚
);

152 
	`CHECK_EQUAL
(4, 
thúdPlugö
->
po°A˘i⁄Sequí˚
);

153 
	}
}

155 
	$TEST
(
PlugöTe°
, 
DißbÀsPlugösD⁄tRun
)

157 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

158 
thúdPlugö
->
	`dißbÀ
();

159 
gíFixtuª
->
	`runAŒTe°s
();

160 
	`CHECK
(!
thúdPlugö
->
	`isE«bÀd
());

161 
thúdPlugö
->
	`íabÀ
();

162 
gíFixtuª
->
	`runAŒTe°s
();

163 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

164 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄
);

165 
	`CHECK
(
thúdPlugö
->
	`isE«bÀd
());

166 
	}
}

168 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsF‹UnknownArgumítsFaûs
)

170 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

171 c⁄° *
cmd_löe
[] = {"nonsense", "andmorenonsense"};

172 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0Ë=
Ál£
 );

173 
	}
}

175 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsC⁄töuesAndSuc˚edsWhíAPlugöC™P¨£
)

177 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

178 c⁄° *
cmd_löe
[] = {"-paccept", "andmorenonsense"};

179 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0));

180 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\SetPluginTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Te°Regi°ry.h
"

3 
	~"CµUTe°/Te°Ouçut.h
"

4 
	~"CµUTe°/Te°Plugö.h
"

6 
	$‹ig_func1
()

8 
	}
}

10 
	$°ub_func1
()

12 
	}
}

14 
	$‹ig_func2
()

16 
	}
}

18 
	$°ub_func2
()

20 
	}
}

22 (*
	gÂ1
)();

23 (*
	gÂ2
)();

25 
	$TEST_GROUP
(
SëPoöãrPlugöTe°
)

27 
SëPoöãrPlugö
* 
∂ugö_
;

28 
Te°Regi°ry
* 
myRegi°ry_
;

29 
SåögBuf„rTe°Ouçut
* 
ouçut_
;

30 
Te°Resu…
* 
ªsu…_
;

32 
	`£tup
()

34 
myRegi°ry_
 = 
√w
 
	`Te°Regi°ry
();

35 
∂ugö_
 = 
√w
 
	`SëPoöãrPlugö
("TestSetPlugin");

36 
myRegi°ry_
->
	`£tCuºítRegi°ry
(myRegistry_);

37 
myRegi°ry_
->
	`ö°ÆlPlugö
(
∂ugö_
);

38 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

39 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

42 
	`ã¨down
()

44 
myRegi°ry_
->
	`£tCuºítRegi°ry
(0);

45 
dñëe
 
myRegi°ry_
;

46 
dñëe
 
∂ugö_
;

47 
dñëe
 
ouçut_
;

48 
dñëe
 
ªsu…_
;

50 
	}
};

52 ˛as†
	cFun˘i⁄PoöãrUã°
: 
public
 
Uã°


54 
public
:

55 
	$£tup
()

57 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

58 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

59 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

61 
	$ã°Body
()

63 
	`CHECK
(
Â1
 =
°ub_func1
);

64 
	`CHECK
(
Â2
 =
°ub_func2
);

65 
	}
}

68 
	$TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTwoFun˘i⁄Poöãr
)

70 
Fun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`Fun˘i⁄PoöãrUã°
();

73 
Â1
 = 
‹ig_func1
;

74 
Â2
 = 
‹ig_func2
;

75 
myRegi°ry_
->
	`addTe°
(
t°
);

76 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

77 
	`CHECK
(
Â1
 =
‹ig_func1
);

78 
	`CHECK
(
Â2
 =
‹ig_func2
);

79 
	`LONGS_EQUAL
(0, 
ªsu…_
->
	`gëFaûuªCou¡
());

80 
dñëe
 
t°
;

81 
	}
}

83 ˛as†
	cMaxFun˘i⁄PoöãrUã°
: 
public
 
Uã°


85 
public
:

86 
numOfFpSës
;

87 
	$MaxFun˘i⁄PoöãrUã°
(
num
) :

88 
	$numOfFpSës
(
num
)

93 
	$£tup
()

95 
i
 = 0; i < 
numOfFpSës
; ++i)

96 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

97 
	}
}

100 
	$IGNORE_TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTooMuchFun˘i⁄Poöãr
)

102 
MaxFun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`MaxFun˘i⁄PoöãrUã°
(
SëPoöãrPlugö
::
MAX_SET
 + 1);

103 
myRegi°ry_
->
	`addTe°
(
t°
);

105 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

107 
	`LONGS_EQUAL
(1, 
ªsu…_
->
	`gëFaûuªCou¡
());

108 
dñëe
 
t°
;

109 
	}
}

111 
	g‹ig_doubÀ
 = 3.0;

112 * 
	g‹ig_doubÀ_±r
 = &
‹ig_doubÀ
;

113 
	g°ub_doubÀ
 = 4.0;

115 ˛as†
	cSëDoubÀPoöãrUã°
: 
public
 
Uã°


117 
public
:

118 
	$£tup
()

120 
	`UT_PTR_SET
(
‹ig_doubÀ_±r
, &
°ub_doubÀ
);

122 
	$ã°Body
()

124 
	`CHECK
(
‹ig_doubÀ_±r
 =&
°ub_doubÀ
);

125 
	}
}

128 
	$TEST
(
SëPoöãrPlugöTe°
, 
doubÀPoöãr
)

130 
SëDoubÀPoöãrUã°
 *
doubÀt°
 = 
√w
 
	`SëDoubÀPoöãrUã°
();

131 
myRegi°ry_
->
	`addTe°
(
doubÀt°
);

132 
	`CHECK
(
‹ig_doubÀ_±r
 =&
‹ig_doubÀ
);

133 
dñëe
 
doubÀt°
;

134 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\SimpleStringTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~<°dlib.h
>

34 
	$TEST_GROUP
(
Sim∂eSåög
)

36 
	}
};

38 
	$TEST
(
Sim∂eSåög
, 
deÁu…AŒoˇt‹IsNewAºayAŒoˇt‹
)

40 
	`POINTERS_EQUAL
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), 
Sim∂eSåög
::
	`gëSåögAŒoˇt‹
());

41 
	}
}

43 ˛as†
	cMyOwnSåögAŒoˇt‹
 : 
public
 
Sènd¨dMÆlocAŒoˇt‹


45 
public
:

46 
	$MyOwnSåögAŒoˇt‹
(Ë: 
	$mem‹yWasAŒoˇãd
(
Ál£
) {};

47 
vútuÆ
 ~
	$MyOwnSåögAŒoˇt‹
(Ë{
	}
};

49 
boﬁ
 
	gmem‹yWasAŒoˇãd
;

50 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

52 
mem‹yWasAŒoˇãd
 = 
åue
;

53  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

54 
	}
}

57 
	$TEST
(
Sim∂eSåög
, 
Æloˇt‹F‹Sim∂eSåögC™BeRïœ˚d
)

59 
MyOwnSåögAŒoˇt‹
 
myOwnAŒoˇt‹
;

60 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(&
myOwnAŒoˇt‹
);

61 
Sim∂eSåög
 
sim∂eSåög
;

62 
	`CHECK
(
myOwnAŒoˇt‹
.
mem‹yWasAŒoˇãd
);

63 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(
NULL
);

64 
	}
}

66 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚
)

68 
Sim∂eSåög
 
	`ex≥˘ed
("hellohello");

69 
Sim∂eSåög
 
	`a˘uÆ
("hello", 2);

71 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

72 
	}
}

74 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚OfZîo
)

76 
Sim∂eSåög
 
	`ex≥˘ed
("");

77 
Sim∂eSåög
 
	`a˘uÆ
("hello", 0);

79 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

80 
	}
}

82 
	$TEST
(
Sim∂eSåög
, 
C›y
)

84 
Sim∂eSåög
 
	`s1
("hello");

85 
Sim∂eSåög
 
	`s2
(
s1
);

87 
	`CHECK_EQUAL
(
s1
, 
s2
);

88 
	}
}

90 
	$TEST
(
Sim∂eSåög
, 
Assignmít
)

92 
Sim∂eSåög
 
	`s1
("hello");

93 
Sim∂eSåög
 
	`s2
("goodbye");

95 
s2
 = 
s1
;

97 
	`CHECK_EQUAL
(
s1
, 
s2
);

98 
	}
}

100 
	$TEST
(
Sim∂eSåög
, 
EquÆôy
)

102 
Sim∂eSåög
 
	`s1
("hello");

103 
Sim∂eSåög
 
	`s2
("hello");

105 
	`CHECK
(
s1
 =
s2
);

106 
	}
}

108 
	$TEST
(
Sim∂eSåög
, 
InEquÆôy
)

110 
Sim∂eSåög
 
	`s1
("hello");

111 
Sim∂eSåög
 
	`s2
("goodbye");

113 
	`CHECK
(
s1
 !
s2
);

114 
	}
}

116 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhoutCa£
)

118 
Sim∂eSåög
 
	`s1
("hello");

119 
Sim∂eSåög
 
	`s2
("hello");

121 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

122 
	}
}

124 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£
)

126 
Sim∂eSåög
 
	`s1
("hello");

127 
Sim∂eSåög
 
	`s2
("HELLO");

129 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

130 
	}
}

132 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£NŸEquÆ
)

134 
Sim∂eSåög
 
	`s1
("hello");

135 
Sim∂eSåög
 
	`s2
("WORLD");

137 
	`CHECK
(!
s1
.
	`equÆsNoCa£
(
s2
));

138 
	}
}

141 
	$TEST
(
Sim∂eSåög
, 
asCh¨Såög
)

143 
Sim∂eSåög
 
	`s1
("hello");

145 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Sim∂eSåög
, 
Size
)

150 
Sim∂eSåög
 
	`s1
("hello!");

152 
	`LONGS_EQUAL
(6, 
s1
.
	`size
());

153 
	}
}

155 
	$TEST
(
Sim∂eSåög
, 
toLowî
)

157 
Sim∂eSåög
 
	`s1
("AbCdEfG");

158 
Sim∂eSåög
 
	`s2
(
s1
.
	`toLowî
());

159 
	`STRCMP_EQUAL
("abcdefg", 
s2
.
	`asCh¨Såög
());

160 
	`STRCMP_EQUAL
("AbCdEfG", 
s1
.
	`asCh¨Såög
());

161 
	}
}

163 
	$TEST
(
Sim∂eSåög
, 
Addôi⁄
)

165 
Sim∂eSåög
 
	`s1
("hello!");

166 
Sim∂eSåög
 
	`s2
("goodbye!");

167 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

168 
Sim∂eSåög
 
s4
;

169 
s4
 = 
s1
 + 
s2
;

171 
	`CHECK_EQUAL
(
s3
, 
s4
);

172 
	}
}

174 
	$TEST
(
Sim∂eSåög
, 
C⁄ˇã«ti⁄
)

176 
Sim∂eSåög
 
	`s1
("hello!");

177 
Sim∂eSåög
 
	`s2
("goodbye!");

178 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

179 
Sim∂eSåög
 
s4
;

180 
s4
 +
s1
;

181 
s4
 +
s2
;

183 
	`CHECK_EQUAL
(
s3
, 
s4
);

185 
Sim∂eSåög
 
	`s5
("hello!goodbye!hello!goodbye!");

186 
s4
 += s4;

188 
	`CHECK_EQUAL
(
s5
, 
s4
);

189 
	}
}

191 
	$TEST
(
Sim∂eSåög
, 
C⁄èös
)

193 
Sim∂eSåög
 
	`s
("hello!");

194 
Sim∂eSåög
 
	`em±y
("");

195 
Sim∂eSåög
 
	`begönög
("hello");

196 
Sim∂eSåög
 
	`íd
("lo!");

197 
Sim∂eSåög
 
	`mid
("l");

198 
Sim∂eSåög
 
	`nŸP¨tOfSåög
("xxxx");

200 
	`CHECK
(
s
.
	`c⁄èös
(
em±y
));

201 
	`CHECK
(
s
.
	`c⁄èös
(
begönög
));

202 
	`CHECK
(
s
.
	`c⁄èös
(
íd
));

203 
	`CHECK
(
s
.
	`c⁄èös
(
mid
));

204 
	`CHECK
(!
s
.
	`c⁄èös
(
nŸP¨tOfSåög
));

206 
	`CHECK
(
em±y
.
	`c⁄èös
(empty));

207 
	`CHECK
(!
em±y
.
	`c⁄èös
(
s
));

208 
	}
}

210 
	$TEST
(
Sim∂eSåög
, 
°¨tsWôh
)

212 
Sim∂eSåög
 
	`hi
("Hi you!");

213 
Sim∂eSåög
 
	`∑π
("Hi");

214 
Sim∂eSåög
 
	`diff
("Hrrm Hi you! ffdsfd");

215 
	`CHECK
(
hi
.
	`°¨tsWôh
(
∑π
));

216 
	`CHECK
(!
∑π
.
	`°¨tsWôh
(
hi
));

217 
	`CHECK
(!
diff
.
	`°¨tsWôh
(
hi
));

218 
	}
}

220 
	$TEST
(
Sim∂eSåög
, 
•lô
)

222 
Sim∂eSåög
 
	`hi
("hello\nworld\nhow\ndo\nyou\ndo\n\n");

224 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

225 
hi
.
	`•lô
("\n", 
cﬁÀ˘i⁄
);

227 
	`LONGS_EQUAL
(7, 
cﬁÀ˘i⁄
.
	`size
());

228 
	`STRCMP_EQUAL
("hñlo\n", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

229 
	`STRCMP_EQUAL
("w‹ld\n", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

230 
	`STRCMP_EQUAL
("how\n", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[3].
	`asCh¨Såög
());

232 
	`STRCMP_EQUAL
("you\n", 
cﬁÀ˘i⁄
[4].
	`asCh¨Såög
());

233 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[5].
	`asCh¨Såög
());

234 
	`STRCMP_EQUAL
("\n", 
cﬁÀ˘i⁄
[6].
	`asCh¨Såög
());

235 
	}
}

237 
	$TEST
(
Sim∂eSåög
, 
•lôNoTokíOnTheEnd
)

239 
Sim∂eSåög
 
	`°rög
("Bah Yah oops");

240 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

242 
°rög
.
	`•lô
(" ", 
cﬁÀ˘i⁄
);

243 
	`LONGS_EQUAL
(3, 
cﬁÀ˘i⁄
.
	`size
());

244 
	`STRCMP_EQUAL
("Bah ", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

245 
	`STRCMP_EQUAL
("Yah ", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

246 
	`STRCMP_EQUAL
("o›s", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

247 
	}
}

249 
	$TEST
(
Sim∂eSåög
, 
cou¡
)

251 
Sim∂eSåög
 
	`°r
("ha ha ha ha");

252 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

253 
	}
}

255 
	$TEST
(
Sim∂eSåög
, 
cou¡Togëhî
)

257 
Sim∂eSåög
 
	`°r
("hahahaha");

258 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

259 
	}
}

261 
	$TEST
(
Sim∂eSåög
, 
ídsWôh
)

263 
Sim∂eSåög
 
	`°r
("Hello World");

264 
	`CHECK
(
°r
.
	`ídsWôh
("World"));

265 
	`CHECK
(!
°r
.
	`ídsWôh
("Worl"));

266 
	`CHECK
(!
°r
.
	`ídsWôh
("Hello"));

267 
Sim∂eSåög
 
	`°r2
("ah");

268 
	`CHECK
(
°r2
.
	`ídsWôh
("ah"));

269 
	`CHECK
(!
°r2
.
	`ídsWôh
("baah"));

270 
Sim∂eSåög
 
	`°r3
("");

271 
	`CHECK
(!
°r3
.
	`ídsWôh
("baah"));

273 
Sim∂eSåög
 
	`°r4
("ha ha ha ha");

274 
	`CHECK
(
°r4
.
	`ídsWôh
("ha"));

275 
	}
}

277 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚Ch¨WôhCh¨
)

279 
Sim∂eSåög
 
	`°r
("abcabcabca");

280 
°r
.
	`ª∂a˚
('a', 'b');

281 
	`STRCMP_EQUAL
("bbcbbcbbcb", 
°r
.
	`asCh¨Såög
());

282 
	}
}

284 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚SåögWôhSåög
)

286 
Sim∂eSåög
 
	`°r
("boo baa boo baa boo");

287 
°r
.
	`ª∂a˚
("boo", "boohoo");

288 
	`STRCMP_EQUAL
("boohoÿbØ boohoÿbØ boohoo", 
°r
.
	`asCh¨Såög
());

289 
	}
}

291 
	$TEST
(
Sim∂eSåög
, 
subSåögFromEm±ySåög
)

293 
Sim∂eSåög
 
	`°r
("");

294 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

295 
	}
}

297 
	$TEST
(
Sim∂eSåög
, 
subSåögFromSmÆlSåög
)

299 
Sim∂eSåög
 
	`°r
("H");

300 
	`STRCMP_EQUAL
("H", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos0
)

305 
Sim∂eSåög
 
	`°r
("Hello World");

306 
	`STRCMP_EQUAL
("Hñlo", 
°r
.
	`subSåög
(0, 5).
	`asCh¨Såög
());

307 
	}
}

309 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos1
)

311 
Sim∂eSåög
 
	`°r
("Hello World");

312 
	`STRCMP_EQUAL
("ñlÿ", 
°r
.
	`subSåög
(1, 5).
	`asCh¨Såög
());

313 
	}
}

315 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos5WôhAmou¡L¨gîTh™Såög
)

317 
Sim∂eSåög
 
	`°r
("Hello World");

318 
	`STRCMP_EQUAL
("W‹ld", 
°r
.
	`subSåög
(6, 10).
	`asCh¨Såög
());

319 
	}
}

321 
	$TEST
(
Sim∂eSåög
, 
subSåögBegöPosOutOfBounds
)

323 
Sim∂eSåög
 
	`°r
("Hello World");

324 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(13, 5).
	`asCh¨Såög
());

325 
	}
}

327 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rN‹mÆ
)

329 
Sim∂eSåög
 
	`°r
("Hello World");

330 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

331 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

332 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

333 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

334 
	`‰ì
(
buf„r
);

335 
	}
}

337 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhEm±yBuf„r
)

339 
Sim∂eSåög
 
	`°r
("Hello World");

340 * 
buf„r

NULL
;

341 
°r
.
	`c›yToBuf„r
(
buf„r
, 0);

342 
	`POINTERS_EQUAL
(
NULL
, 
buf„r
);

343 
	}
}

345 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhBiggîBuf„rTh™Nìded
)

347 
Sim∂eSåög
 
	`°r
("Hello");

348 
buf„rSize
 = 20;

349 * 
buf„r
(*Ë
	`mÆloc
(
buf„rSize
);

350 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

351 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

352 
	`‰ì
(
buf„r
);

353 
	}
}

355 
	$TEST
(
Sim∂eSåög
, 
C⁄èösNuŒ
)

357 
Sim∂eSåög
 
	`s
(0);

358 
	`CHECK
(!
s
.
	`c⁄èös
("something"));

359 
	}
}

361 
	$TEST
(
Sim∂eSåög
, 
NULLRï‹tsNuŒSåög
)

363 
	`STRCMP_EQUAL
("“uŒ)", 
	`SåögFromOrNuŒ
((*Ë
NULL
).
	`asCh¨Såög
());

364 
	}
}

366 
	$TEST
(
Sim∂eSåög
, 
Ch¨a˘îs
)

368 
Sim∂eSåög
 
	`s
(
	`SåögFrom
('a'));

369 
Sim∂eSåög
 
	`s2
(
	`SåögFrom
('a'));

370 
	`CHECK
(
s
 =
s2
);

371 
	}
}

373 
	$TEST
(
Sim∂eSåög
, 
DoubÀs
)

375 
Sim∂eSåög
 
	`s
(
	`SåögFrom
(1.2));

376 
	`STRCMP_EQUAL
("1.200000", 
s
.
	`asCh¨Såög
());

377 
s
 = 
	`SåögFrom
(1.2, 2);

378 
	`STRCMP_EQUAL
("1.20", 
s
.
	`asCh¨Såög
());

379 
	}
}

381 
	$TEST
(
Sim∂eSåög
, 
HexSåögs
)

383 
Sim∂eSåög
 
h1
 = 
	`HexSåögFrom
(0xffff);

384 
	`STRCMP_EQUAL
("ffff", 
h1
.
	`asCh¨Såög
());

385 
	}
}

387 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©
)

389 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s %s! %d", "Hello", "World", 2009);

390 
	`STRCMP_EQUAL
("HñlÿW‹ld! 2009", 
h1
.
	`asCh¨Såög
());

391 
	}
}

393 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©L¨ge
)

395 c⁄° * 
s
 = "ThisIsAPrettyLargeStringAndIfWeAddThisManyTimesToABufferItWillbeFull";

396 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s%s%s%s%s%s%s%s%s%s", 
s
, s, s, s, s, s, s, s, s, s);

397 
	`LONGS_EQUAL
(10, 
h1
.
	`cou¡
(
s
));

398 
	}
}

400 
	$WøµedUpVSNPrötf
(* 
buf
, 
n
, c⁄° * 
f‹m©
, ...)

402 
va_li°
 
¨gumíts
;

403 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

405 
ªsu…
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf
, 
n
, 
f‹m©
, 
¨gumíts
);

406 
	`va_íd
(
¨gumíts
);

407  
ªsu…
;

408 
	}
}

410 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_fôs
)

412 
buf
[10];

414 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345");

415 
	`STRCMP_EQUAL
("12345", 
buf
);

416 
	`LONGS_EQUAL
(5, 
cou¡
);

417 
	}
}

419 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_d€sNŸFô
)

421 
buf
[10];

423 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345678901");

424 
	`STRCMP_EQUAL
("123456789", 
buf
);

425 
	`LONGS_EQUAL
(11, 
cou¡
);

426 
	}
}

428 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög1L¨gî
)

430 
Sim∂eSåög
 
	`°r1
("1");

431 
Sim∂eSåög
 
	`°r2
("222");

433 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, '4');

434 
	`STRCMP_EQUAL
("441", 
°r1
.
	`asCh¨Såög
());

435 
	`STRCMP_EQUAL
("222", 
°r2
.
	`asCh¨Såög
());

436 
	}
}

438 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög2L¨gî
)

440 
Sim∂eSåög
 
	`°r1
(" ");

441 
Sim∂eSåög
 
	`°r2
("");

443 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

444 
	`STRCMP_EQUAL
(" ", 
°r1
.
	`asCh¨Såög
());

445 
	`STRCMP_EQUAL
(" ", 
°r2
.
	`asCh¨Såög
());

446 
	}
}

448 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthWôhSameLígthSåögs
)

450 
Sim∂eSåög
 
	`°r1
("123");

451 
Sim∂eSåög
 
	`°r2
("123");

453 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

454 
	`STRCMP_EQUAL
("123", 
°r1
.
	`asCh¨Såög
());

455 
	`STRCMP_EQUAL
("123", 
°r2
.
	`asCh¨Såög
());

456 
	}
}

458 
	$TEST
(
Sim∂eSåög
, 
NuŒP¨amëîs2
)

460 
Sim∂eSåög
* 
¨r
 = 
√w
 SimpleString[100];

461 
dñëe
[] 
¨r
;

462 
	}
}

464 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄Mu…ùÀAŒoˇãNoLóksMem‹y
)

466 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

467 
cﬁ
.
	`Æloˇã
(5);

468 
cﬁ
.
	`Æloˇã
(5);

470 
	}
}

472 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄RódOutOfBoundsRëu∫sEm±ySåög
)

474 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

475 
cﬁ
.
	`Æloˇã
(3);

476 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

477 
	}
}

479 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄WrôögToEm±ySåög
)

481 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

482 
cﬁ
.
	`Æloˇã
(3);

483 
cﬁ
[3] = 
	`Sim∂eSåög
("HAH");

484 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

485 
	}
}

487 #i‡
CPPUTEST_USE_STD_CPP_LIB


489 
	$TEST
(
Sim∂eSåög
, 
‰omStdSåög
)

491 
°d
::
°rög
 
	`s
("hello");

492 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

494 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

495 
	}
}

497 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt32_t
)

499 
uöt32_t
 
i
 = 0xffffffff;

500 
	`CHECK_EQUAL
(
i
, i);

501 
	}
}

503 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt16_t
)

505 
uöt16_t
 
i
 = 0xffff;

506 
	`CHECK_EQUAL
(
i
, i);

507 
	}
}

509 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt8_t
)

511 
uöt8_t
 
i
 = 0xff;

512 
	`CHECK_EQUAL
(
i
, i);

513 
	}
}

515 
	$TEST
(
Sim∂eSåög
, 
Uöt32_t
)

517 
uöt32_t
 
i
 = 0xffffffff;

519 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

520 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

521 
	}
}

523 
	$TEST
(
Sim∂eSåög
, 
Uöt16_t
)

525 
uöt16_t
 
i
 = 0xffff;

527 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

528 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

529 
	}
}

531 
	$TEST
(
Sim∂eSåög
, 
Uöt8_t
)

533 
uöt8_t
 
i
 = 0xff;

535 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

536 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

537 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestFailureTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

31 
	g«me•a˚


33 c⁄° 
	gÁûLöeNumbî
 = 2;

34 c⁄° * 
	gÁûFûeName
 = "fail.cpp";

37 
	gzîo
 = 0.0;

38 c⁄° 
	g«n
 = 
zîo
 / zero;

40 
	$TEST_GROUP
(
Te°Faûuª
)

42 
Uã°
* 
ã°
;

43 
SåögBuf„rTe°Ouçut
* 
¥öãr
;

45 
	`£tup
()

47 
ã°
 = 
√w
 
	`NuŒTe°
(
ÁûFûeName
, 
ÁûLöeNumbî
-1);

48 
¥öãr
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

50 
	`ã¨down
()

52 
dñëe
 
ã°
;

53 
dñëe
 
¥öãr
;

56 
	}
};

57 
	#FAILURE_EQUAL
(
a
, 
b
Ë
	`STRCMP_EQUAL_LOCATION
◊, b.
	`gëMesßge
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
)

	)

59 
	$TEST
(
Te°Faûuª
, 
Cª©eFaûuª
)

61 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

62 
Te°Faûuª
 
	`f2
(
ã°
, "the failure message");

63 
Te°Faûuª
 
	`f3
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
);

64 
	}
}

66 
	$TEST
(
Te°Faûuª
, 
GëTe°FûeAndLöeFromFaûuª
)

68 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

69 
	`STRCMP_EQUAL
(
ÁûFûeName
, 
f1
.
	`gëTe°FûeName
().
	`asCh¨Såög
());

70 
	`LONGS_EQUAL
(1, 
f1
.
	`gëTe°LöeNumbî
());

71 
	}
}

73 
	$TEST
(
Te°Faûuª
, 
Cª©ePassögEquÆsFaûuª
)

75 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

76 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <a˘uÆ>", 
f
);

77 
	}
}

79 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsA˘uÆ
)

81 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ex≥˘ed", 
NULL
);

82 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <“uŒ)>", 
f
);

83 
	}
}

85 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsEx≥˘ed
)

87 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
NULL
, "actual");

88 
	`FAILURE_EQUAL
("ex≥˘ed <“uŒ)>\n\tbuàwa† <a˘uÆ>", 
f
);

89 
	}
}

91 
	$TEST
(
Te°Faûuª
, 
CheckEquÆFaûuª
)

93 
CheckEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

94 
	`FAILURE_EQUAL
("expected <expected>\n"

97 "\à ^", 
f
);

98 
	}
}

100 
	$TEST
(
Te°Faûuª
, 
CheckFaûuª
)

102 
CheckFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

103 
	`FAILURE_EQUAL
("CHECK(chkËÁûed", 
f
);

104 
	}
}

106 
	$TEST
(
Te°Faûuª
, 
FaûFaûuª
)

108 
FaûFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

109 
	`FAILURE_EQUAL
("chk", 
f
);

110 
	}
}

112 
	$TEST
(
Te°Faûuª
, 
L⁄gsEquÆFaûuª
)

114 
L⁄gsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1, 2);

115 
	`FAILURE_EQUAL
("ex≥˘ed <1 0x1>\n\tbuàwa† <2 0x2>", 
f
);

116 
	}
}

118 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuª
)

120 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "abd");

121 
	`FAILURE_EQUAL
("expected <abc>\n"

124 "\à ^", 
f
);

125 
	}
}

127 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheEnd
)

129 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "ab");

130 
	`FAILURE_EQUAL
("expected <abc>\n"

133 "\à ^", 
f
);

134 
	}
}

136 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªNewV¨ü¡AtTheEnd
)

138 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "EndOfALongerString", "EndOfALongerStrinG");

139 
	`FAILURE_EQUAL
("expected <EndOfALongerString>\n"

142 "\à ^", 
f
);

143 
	}
}

145 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªWôhNewLöesAndTabs
)

147 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
,

151 
	`FAILURE_EQUAL
("expected <StringWith\t\nDifferentString>\n"

154 "\à \t\n^", 
f
);

155 
	}
}

157 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªInTheMiddÀ
)

159 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aa", "ab");

160 
	`FAILURE_EQUAL
("expected <aa>\n"

163 "\à ^", 
f
);

164 
	}
}

167 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheBegönög
)

169 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aaa", "bbb");

170 
	`FAILURE_EQUAL
("expected <aaa>\n"

173 "\à ^", 
f
);

174 
	}
}

176 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª
)

178 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ABC", "abd");

179 
	`FAILURE_EQUAL
("expected <ABC>\n"

182 "\à ^", 
f
);

183 
	}
}

185 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª2
)

187 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ac", "AB");

188 
	`FAILURE_EQUAL
("expected <ac>\n"

191 "\à ^", 
f
);

192 
	}
}

194 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆN‹mÆ
)

196 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 3.0);

197 
	`FAILURE_EQUAL
("expected <1.000000>\n"

198 "\tbuàwa† <2.000000>Åhªshﬁd u£d wa†<3.000000>", 
f
);

199 
	}
}

201 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆEx≥˘edIsNaN
)

203 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
«n
, 2.0, 3.0);

204 
	`FAILURE_EQUAL
("expected <Nan - NotáÇumber>\n"

206 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

207 
	}
}

209 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆA˘uÆIsNaN
)

211 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 
«n
, 3.0);

212 
	`FAILURE_EQUAL
("expected <1.000000>\n"

214 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

215 
	}
}

217 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆThªshﬁdIsNaN
)

219 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 
«n
);

220 
	`FAILURE_EQUAL
("expected <1.000000>\n"

222 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

223 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestHarness_cTest.cpp

30 
	#_WCHART


	)

31 
	~"CµUTe°/Te°H¨√ss_c.h
"

32 
	~"°dlib.h
"

35 
	~"CµUTe°/Te°H¨√ss.h
"

36 
	~"CµUTe°/Te°Regi°ry.h
"

37 
	~"CµUTe°/Te°Ouçut.h
"

38 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

39 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

41 
	$TEST_GROUP
(
Te°H¨√ss_c
)

43 
Te°Te°ögFixtuª
* 
fixtuª
;

44 
	`TEST_SETUP
()

46 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

48 
	`TEST_TEARDOWN
()

50 
dñëe
 
fixtuª
;

52 
	}
};

54 
	$_ÁûI¡Mëhod
()

56 
	`CHECK_EQUAL_C_INT
(1, 2);

57 
	}
}

59 
	$TEST
(
Te°H¨√ss_c
, 
checkI¡
)

61 
	`CHECK_EQUAL_C_INT
(2, 2);

62 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûI¡Mëhod
);

63 
fixtuª
->
	`runAŒTe°s
();

64 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1>\n but was <2>");

65 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

66 
	}
}

68 
	$_ÁûRólMëhod
()

70 
	`CHECK_EQUAL_C_REAL
(1.0, 2.0, 0.5);

71 
	}
}

73 
	$TEST
(
Te°H¨√ss_c
, 
checkRól
)

75 
	`CHECK_EQUAL_C_REAL
(1.0, 1.1, 0.5);

76 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûRólMëhod
);

77 
fixtuª
->
	`runAŒTe°s
();

78 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1.000000>\n but was <2.000000>");

79 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

80 
	}
}

82 
	$_ÁûCh¨Mëhod
()

84 
	`CHECK_EQUAL_C_CHAR
('a', 'c');

85 
	}
}

87 
	$TEST
(
Te°H¨√ss_c
, 
checkCh¨
)

89 
	`CHECK_EQUAL_C_CHAR
('a', 'a');

90 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûCh¨Mëhod
);

91 
fixtuª
->
	`runAŒTe°s
();

92 
fixtuª
->
	`as£πPrötC⁄èös
("expected <a>\n but was <c>");

93 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

94 
	}
}

96 
	$_ÁûSåögMëhod
()

98 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello World");

99 
	}
}

101 
	$TEST
(
Te°H¨√ss_c
, 
checkSåög
)

103 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello");

104 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûSåögMëhod
);

105 
fixtuª
->
	`runAŒTe°s
();

107 
SåögEquÆFaûuª
 
	`Áûuª
(
this
, "file", 1, "Hello", "Hello World");

108 
fixtuª
->
	`as£πPrötC⁄èös
(
Áûuª
.
	`gëMesßge
());

109 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

110 
	}
}

112 
	$_ÁûTextMëhod
()

114 
	`FAIL_TEXT_C
("Booo");

115 
	}
}

117 
	$TEST
(
Te°H¨√ss_c
, 
checkFaûText
)

119 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûTextMëhod
);

120 
fixtuª
->
	`runAŒTe°s
();

121 
fixtuª
->
	`as£πPrötC⁄èös
("Booo");

122 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

123 
	}
}

125 
	$_ÁûMëhod
()

127 
	`FAIL_C
();

128 
	}
}

130 
	$TEST
(
Te°H¨√ss_c
, 
checkFaû
)

132 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

133 
fixtuª
->
	`runAŒTe°s
();

134 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

135 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

136 
	}
}

138 
	$_CheckMëhod
()

140 
	`CHECK_C
(
Ál£
);

141 
	}
}

143 
	$TEST
(
Te°H¨√ss_c
, 
checkCheck
)

145 
	`CHECK_C
(
åue
);

146 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_CheckMëhod
);

147 
fixtuª
->
	`runAŒTe°s
();

148 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

149 
	}
}

151 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_mÆloc_out_of_mem‹y
)

153 
	`˝puã°_mÆloc_£t_out_of_mem‹y
();

154 
	`CHECK
(0 =
	`˝puã°_mÆloc
(100));

156 
	`˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

157 * 
mem
 = 
	`˝puã°_mÆloc
(100);

158 
	`CHECK
(0 !
mem
);

159 
	`˝puã°_‰ì
(
mem
);

160 
	}
}

162 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ˇŒoc
)

164 * 
mem
 = 
	`˝puã°_ˇŒoc
(10, 10);

165 
	`CHECK
(0 !
mem
);

166 
	`˝puã°_‰ì
(
mem
);

167 
	}
}

169 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ªÆloc_œrgî
)

171 c⁄° * 
numbî_°rög
 = "123456789";

173 * 
mem1
 = (*Ë
	`˝puã°_mÆloc
(10);

175 
	`Pœtf‹mS≥cificSåCpy
(
mem1
, 
numbî_°rög
);

176 
	`CHECK
(
mem1
 != 0);

178 * 
mem2
 = (*Ë
	`˝puã°_ªÆloc
(
mem1
, 1000);

180 
	`CHECK
(
mem2
 != 0);

181 
	`STRCMP_EQUAL
(
numbî_°rög
, 
mem2
);

183 
	`˝puã°_‰ì
(
mem2
);

184 
	}
}

186 
	$TEST
(
Te°H¨√ss_c
, 
ma¸os
)

188 * 
mem1
 = 
	`mÆloc
(10);

189 * 
mem2
 = 
	`ˇŒoc
(10, 20);

190 * 
mem3
 = 
	`ªÆloc
(
mem2
, 100);

191 
	`‰ì
(
mem1
);

192 
	`‰ì
(
mem3
);

193 
	}
}

195 
	$TEST
(
Te°H¨√ss_c
, 
ˇŒocInôülizedToZîo
)

197 * 
mem
 = (*Ë
	`ˇŒoc
(20, ());

198 
i
 = 0; i < 20; i++)

199 
	`CHECK
(
mem
[
i
] == 0);

200 
	`‰ì
(
mem
);

201 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestHarness_cTestCFile.c

2 
	~"CµUTe°/Te°H¨√ss_c.h
"

4 
fun˘i⁄WôhUnu£dP¨amëî
(* 
	$PUNUSED
(
u∆essP¨am©î
))

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestInstallerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

35 
NuŒTe°
 
	gnuŒTe°
;

37 
	$TEST_GROUP
(
Te°In°ÆÀr
)

39 
Te°In°ÆÀr
* 
ã°In°ÆÀr
;

40 
Te°Regi°ry
* 
myRegi°ry
;

41 
	`£tup
()

43 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

44 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

45 
ã°In°ÆÀr
 = 
√w
 
	`Te°In°ÆÀr
(&
nuŒTe°
, "Te°In°ÆÀr", "ã°", 
__FILE__
, 
__LINE__
);

47 
	`ã¨down
()

49 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

50 
ã°In°ÆÀr
->
	`unDo
();

51 
dñëe
 
ã°In°ÆÀr
;

52 
dñëe
 
myRegi°ry
;

54 
	}
};

56 
	$TEST
(
Te°In°ÆÀr
, 
Cª©e
)

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

37  
mûlisTime
;

38 
	}
}

40 
	$TEST_GROUP
(
Te°Ouçut
)

42 
Te°Ouçut
* 
¥öãr
;

43 
SåögBuf„rTe°Ouçut
* 
mock
;

44 
Uã°
* 
t°
;

45 
Te°Faûuª
 *
f
;

46 
Te°Faûuª
 *
f2
;

47 
Te°Faûuª
 *
f3
;

48 
Te°Resu…
* 
ªsu…
;

50 
	`£tup
()

52 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

53 
¥öãr
 = 
mock
;

54 
t°
 = 
√w
 
	`Uã°
("group", "test", "file", 10);

55 
f
 = 
√w
 
	`Te°Faûuª
(
t°
, "failfile", 20, "message");

56 
f2
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 20, "message");

57 
f3
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 2, "message");

58 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
mock
);

59 
ªsu…
->
	`£tTŸÆExecuti⁄Time
(10);

60 
mûlisTime
 = 0;

61 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

63 
	`ã¨down
()

65 
dñëe
 
¥öãr
;

66 
dñëe
 
t°
;

67 
dñëe
 
f
;

68 
dñëe
 
f2
;

69 
dñëe
 
f3
;

70 
dñëe
 
ªsu…
;

71 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

73 
	}
};

75 
	$TEST
(
Te°Ouçut
, 
PrötC⁄°Ch¨Sèr
)

77 
¥öãr
->
	`¥öt
("hello");

78 
¥öãr
->
	`¥öt
("hello\n");

79 
	`STRCMP_EQUAL
("hñlohñlo\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
Te°Ouçut
, 
PrötL⁄g
)

84 
¥öãr
->
	`¥öt
(1234);

85 
	`STRCMP_EQUAL
("1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

86 
	}
}

88 
	$TEST
(
Te°Ouçut
, 
PrötDoubÀ
)

90 
¥öãr
->
	`¥ötDoubÀ
(12.34);

91 
	`STRCMP_EQUAL
("12.340", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Te°Ouçut
, 
SåómO≥øt‹s
)

96 *
¥öãr
 << "n=" << 1234;

97 
	`STRCMP_EQUAL
("n=1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

98 
	}
}

100 
	$TEST
(
Te°Ouçut
, 
PrötTe°Ended
)

102 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

103 
	`STRCMP_EQUAL
(".", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

104 
	}
}

106 
	$TEST
(
Te°Ouçut
, 
PrötTe°ALŸ
)

108 
i
 = 0; i < 60; ++i) {

109 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

111 
	`STRCMP_EQUAL
("..................................................\n..........", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

112 
	}
}

114 
	$TEST
(
Te°Ouçut
, 
SëProgªssIndiˇt‹
)

116 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

117 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

118 
ªsu…
->
	`£tProgªssIndiˇt‹
("!");

119 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

120 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

121 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

123 
	`STRCMP_EQUAL
(".!.", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

124 
	}
}

126 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Sèπed
)

128 
mock
->
	`vîbo£
();

129 
¥öãr
->
	`¥ötCuºítTe°Sèπed
(*
t°
);

130 
	`STRCMP_EQUAL
("TEST(group,Åe°)", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

131 
	}
}

133 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Ended
)

135 
mock
->
	`vîbo£
();

136 
ªsu…
->
	`cuºítTe°Sèπed
(
t°
);

137 
mûlisTime
 = 5;

138 
ªsu…
->
	`cuºítTe°Ended
(
t°
);

139 
	`STRCMP_EQUAL
("TEST(group,Åe°Ë- 5 ms\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

140 
	}
}

142 
	$TEST
(
Te°Ouçut
, 
PrötTe°Run
)

144 
¥öãr
->
	`¥ötTe°Run
(2, 3);

145 
	`STRCMP_EQUAL
("Te°Ñu¿2 o‡3\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Te°Ouçut
, 
PrötTe°RunO∆yO√
)

150 
¥öãr
->
	`¥ötTe°Run
(1, 1);

151 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

152 
	}
}

154 
	$TEST
(
Te°Ouçut
, 
PrötWôhFaûuªInSameFûe
)

156 
¥öãr
->
	`¥öt
(*
f2
);

157 
	`STRCMP_EQUAL
("\nfûe:20:Éº‹: Faûuª i¿TEST(group,Åe°)\n\tmesßge\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

158 
	}
}

160 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInDif„ª¡Fûe
)

162 
¥öãr
->
	`¥öt
(*
f
);

163 c⁄° * 
ex≥˘ed
 =

166 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

167 
	}
}

169 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInHñ≥r
)

171 
¥öãr
->
	`¥öt
(*
f3
);

172 c⁄° * 
ex≥˘ed
 =

175 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

176 
	}
}

178 
	$TEST
(
Te°Ouçut
, 
PrötTe°Sèπs
)

180 
¥öãr
->
	`¥ötTe°sSèπed
();

181 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

182 
	}
}

184 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEnded
)

186 
ªsu…
->
	`cou¡Te°
();

187 
ªsu…
->
	`cou¡Check
();

188 
ªsu…
->
	`cou¡Ign‹ed
();

189 
ªsu…
->
	`cou¡Ign‹ed
();

190 
ªsu…
->
	`cou¡Run
();

191 
ªsu…
->
	`cou¡Run
();

192 
ªsu…
->
	`cou¡Run
();

193 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

194 
	`STRCMP_EQUAL
("\nOK (1Åe°s, 3Ñ™, 1 checks, 2 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

195 
	}
}

197 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEndedWôhFaûuªs
)

199 
ªsu…
->
	`addFaûuª
(*
f
);

200 
¥öãr
->
	`Êush
();

201 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

202 
	`STRCMP_EQUAL
("\nEº‹†(1 faûuªs, 0Åe°s, 0Ñ™, 0 checks, 0 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

203 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestRegistryTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	g«me•a˚


34 
°ub
()

37 c⁄° 
	gã°LöeNumbî
 = 1;

40 ˛as†
	cMockTe°
: 
public
 
Uã°


42 
public
:

43 
MockTe°
(c⁄° * 
group
 = "Group") :

44 
Uã°
(
group
, "Name", "Fûe", 
ã°LöeNumbî
), 
	$hasRun_
(
Ál£
)

47 
	$ã°Body
()

49 
hasRun_
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	ghasRun_
;

55 ˛as†
	cMockTe°Resu…
: 
public
 
Te°Resu…


57 
public
:

59 
cou¡Te°sSèπed
;

60 
	mcou¡Te°sEnded
;

61 
	mcou¡CuºítTe°Sèπed
;

62 
	mcou¡CuºítTe°Ended
;

63 
	mcou¡CuºítGroupSèπed
;

64 
	mcou¡CuºítGroupEnded
;

66 
	$MockTe°Resu…
(
Te°Ouçut
& 
p
) :

67 
	$Te°Resu…
(
p
)

69 
	`ª£tCou¡
();

72 
vútuÆ
 ~
	$MockTe°Resu…
()

74 
	}
}

77 
	$ª£tCou¡
()

79 
cou¡Te°sSèπed
 = 0;

80 
cou¡Te°sEnded
 = 0;

81 
cou¡CuºítTe°Sèπed
 = 0;

82 
cou¡CuºítTe°Ended
 = 0;

83 
cou¡CuºítGroupSèπed
 = 0;

84 
cou¡CuºítGroupEnded
 = 0;

85 
	}
}

87 
vútuÆ
 
	$ã°sSèπed
()

89 
cou¡Te°sSèπed
++;

90 
	}
}

91 
vútuÆ
 
	$ã°sEnded
()

93 
cou¡Te°sEnded
++;

94 
	}
}

95 
vútuÆ
 
	$cuºítTe°Sèπed
(
Uã°
* )

97 
cou¡CuºítTe°Sèπed
++;

98 
	}
}

99 
vútuÆ
 
	$cuºítTe°Ended
(
Uã°
* )

101 
cou¡CuºítTe°Ended
++;

102 
	}
}

103 
vútuÆ
 
	$cuºítGroupSèπed
(
Uã°
* )

105 
cou¡CuºítGroupSèπed
++;

106 
	}
}

107 
vútuÆ
 
	$cuºítGroupEnded
(
Uã°
* )

109 
cou¡CuºítGroupEnded
++;

110 
	}
}

114 
	$TEST_GROUP
(
Te°Regi°ry
)

116 
Te°Regi°ry
* 
myRegi°ry
;

117 
SåögBuf„rTe°Ouçut
* 
ouçut
;

118 
MockTe°
* 
ã°1
;

119 
MockTe°
* 
ã°2
;

120 
MockTe°
* 
ã°3
;

121 
Te°Resu…
 *
ªsu…
;

122 
MockTe°Resu…
 *
mockResu…
;

123 
	`£tup
()

125 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

126 
mockResu…
 = 
√w
 
	`MockTe°Resu…
(*
ouçut
);

127 
ªsu…
 = 
mockResu…
;

128 
ã°1
 = 
√w
 
	`MockTe°
();

129 
ã°2
 = 
√w
 
	`MockTe°
();

130 
ã°3
 = 
√w
 
	`MockTe°
("group2");

131 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

132 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

135 
	`ã¨down
()

137 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

138 
dñëe
 
myRegi°ry
;

139 
dñëe
 
ã°1
;

140 
dñëe
 
ã°2
;

141 
dñëe
 
ã°3
;

142 
dñëe
 
ªsu…
;

143 
dñëe
 
ouçut
;

145 
	}
};

147 
	$TEST
(
Te°Regi°ry
, 
ªgi°ryMyRegi°ryAndRe£t
)

149 
	`CHECK
(
myRegi°ry
->
	`gëCuºítRegi°ry
() == myRegistry);

150 
	}
}

152 
	$TEST
(
Te°Regi°ry
, 
em±yRegi°ryIsEm±y
)

154 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

155 
	}
}

157 
	$TEST
(
Te°Regi°ry
, 
addO√Te°IsNŸEm±y
)

159 
myRegi°ry
->
	`addTe°
(
ã°1
);

160 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

161 
	}
}

163 
	$TEST
(
Te°Regi°ry
, 
addO√TwoTe°s
)

165 
myRegi°ry
->
	`addTe°
(
ã°1
);

166 
myRegi°ry
->
	`addTe°
(
ã°2
);

167 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

168 
	}
}

170 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°s
)

172 
myRegi°ry
->
	`addTe°
(
ã°1
);

173 
myRegi°ry
->
	`addTe°
(
ã°2
);

174 
	`CHECK
(!
ã°1
->
hasRun_
);

175 
	`CHECK
(!
ã°2
->
hasRun_
);

176 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

177 
	`CHECK
(
ã°1
->
hasRun_
);

178 
	`CHECK
(
ã°2
->
hasRun_
);

179 
	}
}

181 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°sCheckResu…Fun˘i⁄sCÆÀd
)

183 
myRegi°ry
->
	`addTe°
(
ã°1
);

184 
myRegi°ry
->
	`addTe°
(
ã°2
);

185 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

186 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sSèπed
);

187 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sEnded
);

188 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupSèπed
);

189 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupEnded
);

190 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

191 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Ended
);

192 
	}
}

194 
	$TEST
(
Te°Regi°ry
, 
runThªeTe°ßndTwoGroupsCheckResu…Fun˘i⁄sCÆÀd
)

196 
myRegi°ry
->
	`addTe°
(
ã°1
);

197 
myRegi°ry
->
	`addTe°
(
ã°2
);

198 
myRegi°ry
->
	`addTe°
(
ã°3
);

199 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

200 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupSèπed
);

201 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupEnded
);

202 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

203 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Ended
);

204 
	}
}

206 
	$TEST
(
Te°Regi°ry
, 
unDoTe°
)

208 
myRegi°ry
->
	`addTe°
(
ã°1
);

209 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

210 
myRegi°ry
->
	`unDoLa°AddTe°
();

211 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

212 
	}
}

214 
	$TEST
(
Te°Regi°ry
, 
unDoButNoTe°
)

216 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

217 
myRegi°ry
->
	`unDoLa°AddTe°
();

218 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

219 
	}
}

221 
	$TEST
(
Te°Regi°ry
, 
ªÆlyUndoLa°Te°
)

223 
myRegi°ry
->
	`addTe°
(
ã°1
);

224 
myRegi°ry
->
	`addTe°
(
ã°2
);

225 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

226 
myRegi°ry
->
	`unDoLa°AddTe°
();

227 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

228 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

229 
	`CHECK
(
ã°1
->
hasRun_
);

230 
	`CHECK
(!
ã°2
->
hasRun_
);

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestResultTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

35 
	}
}

37 
	$TEST_GROUP
(
Te°Resu…
)

39 
Te°Ouçut
* 
¥öãr
;

40 
SåögBuf„rTe°Ouçut
* 
mock
;

42 
Te°Resu…
* 
ªs
;

44 
	`£tup
()

46 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
¥öãr
 = 
mock
;

48 
ªs
 = 
√w
 
	`Te°Resu…
(*
¥öãr
);

49 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

51 
	`ã¨down
()

53 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

54 
dñëe
 
¥öãr
;

55 
dñëe
 
ªs
;

57 
	}
};

59 
	$TEST
(
Te°Resu…
, 
Te°EndedWûlPrötResu…sAndExecuti⁄Time
)

61 
ªs
->
	`ã°sEnded
();

62 
	`CHECK
(
mock
->
	`gëOuçut
().
	`c⁄èös
("10 ms"));

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\UtestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
boﬁ
 
	ga·îCheck
;

35 
	$TEST_GROUP
(
Uã°
)

37 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
	`£tup
()

40 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

41 
a·îCheck
 = 
Ál£
;

43 
	`ã¨down
()

45 
dñëe
 
fixtuª
;

48 
	`ã°FaûuªWôh
((*
mëhod
)())

50 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

51 
fixtuª
->
	`runAŒTe°s
();

52 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

53 
	`CHECK
(!
a·îCheck
);

56 
	`ã°FaûuªWôhMëhodShouldC⁄èö
((*
mëhod
)(), c⁄° * 
ex≥˘ed
)

58 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

59 
fixtuª
->
	`runAŒTe°s
();

60 
fixtuª
->
	`as£πPrötC⁄èös
(
ex≥˘ed
);

61 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

62 
	`CHECK
(!
a·îCheck
);

65 
	}
};

67 
	$_∑ssMëhod
()

69 
	`CHECK
(
åue
);

70 
a·îCheck
 = 
åue
;

71 
	}
}

73 
	$_∑ssPröt
()

75 
	`UT_PRINT
("Hello World!");

76 
	}
}

78 
	$_∑ssPrötF
()

80 
	`UT_PRINT
(
	`SåögFromF‹m©
("Hello %s %d", "World!", 2009));

81 
	}
}

83 
	$_ÁûMëhod
()

85 
	`FAIL
("ThisÅest fails");

86 
a·îCheck
 = 
åue
;

87 
	}
}

89 
	$_ÁûMëhodFAIL_TEST
()

91 
	`FAIL_TEST
("ThisÅest fails");

92 
a·îCheck
 = 
åue
;

93 
	}
}

95 
	$_ÁûMëhodCHECK
()

97 
	`CHECK
(
Ál£
);

98 
a·îCheck
 = 
åue
;

99 
	}
}

101 
	$_ÁûMëhodCHECK_EQUAL
()

103 
	`CHECK_EQUAL
(1, 2);

104 
a·îCheck
 = 
åue
;

105 
	}
}

107 
	$_ÁûMëhodSTRCMP_CONTAINS
()

109 
	`STRCMP_CONTAINS
("hello", "world");

110 
a·îCheck
 = 
åue
;

111 
	}
}

113 
	$_ÁûMëhodSTRCMP_NOCASE_CONTAINS
()

115 
	`STRCMP_NOCASE_CONTAINS
("hello", "WORLD");

116 
a·îCheck
 = 
åue
;

117 
	}
}

119 
	$_ÁûMëhodLONGS_EQUAL
()

121 
	`LONGS_EQUAL
(1, 0xff);

122 
a·îCheck
 = 
åue
;

123 
	}
}

124 
	$_ÁûMëhodBYTES_EQUAL
()

126 
	`BYTES_EQUAL
('a', 'b');

127 
a·îCheck
 = 
åue
;

128 
	}
}

130 
	$_ÁûMëhodPOINTERS_EQUAL
()

132 
	`POINTERS_EQUAL
((*)0xa5a5, (*)0xf0f0);

133 
a·îCheck
 = 
åue
;

134 
	}
}

136 
	$_ÁûMëhodDOUBLES_EQUAL
()

138 
	`DOUBLES_EQUAL
(0.12, 44.1, 0.3);

139 
a·îCheck
 = 
åue
;

140 
	}
}

142 
	$TEST
(
Uã°
, 
FaûuªPrötsSomëhög
)

144 
	`ã°FaûuªWôh
(
_ÁûMëhod
);

145 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

146 
fixtuª
->
	`as£πPrötC⁄èös
("ThisÅest fails");

147 
	}
}

149 
	$TEST
(
Uã°
, 
FaûuªWôhFaûTe°
)

151 
	`ã°FaûuªWôh
(
_ÁûMëhodFAIL_TEST
);

152 
	}
}

154 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹L⁄gI¡s
)

156 
	`ã°FaûuªWôh
(
_ÁûMëhodLONGS_EQUAL
);

157 
fixtuª
->
	`as£πPrötC⁄èös
("expected < 1 0x01>");

158 
fixtuª
->
	`as£πPrötC⁄èös
("but was <255 0xff>");

159 
	}
}

161 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹Poöãrs
)

163 
	`ã°FaûuªWôh
(
_ÁûMëhodPOINTERS_EQUAL
);

164 
fixtuª
->
	`as£πPrötC⁄èös
("expected <0xa5a5>");

165 
fixtuª
->
	`as£πPrötC⁄èös
("but was <0xf0f0>");

166 
	}
}

168 
	$TEST
(
Uã°
, 
FaûuªWôhDOUBLES_EQUAL
)

170 
	`ã°FaûuªWôh
(
_ÁûMëhodDOUBLES_EQUAL
);

171 
	}
}

173 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

175 
	$TEST
(
Uã°
, 
com∑ªDoubÀs
)

177 
zîo
 = 0.0;

178 
«n
 = 
zîo
 / zero;

179 
	`CHECK
(
	`doubÀs_equÆ
(1.0, 1.001, 0.01));

180 
	`CHECK
(!
	`doubÀs_equÆ
(
«n
, 1.001, 0.01));

181 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 
«n
, 0.01));

182 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 1.001, 
«n
));

183 
	`CHECK
(!
	`doubÀs_equÆ
(1.0, 1.1, 0.05));

184 
	}
}

187 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK
)

189 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK
);

190 
	}
}

192 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK_EQUAL
)

194 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK_EQUAL
);

195 
	}
}

197 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_CONTAINS
)

199 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_CONTAINS
);

200 
	}
}

202 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_NOCASE_CONTAINS
)

204 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_NOCASE_CONTAINS
);

205 
	}
}

207 
	$TEST
(
Uã°
, 
FaûuªWôhBYTES_EQUAL
)

209 
	`ã°FaûuªWôh
(
_ÁûMëhodBYTES_EQUAL
);

210 
	}
}

212 
	$TEST
(
Uã°
, 
Suc˚ssPrötsNŸhög
)

214 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

215 
fixtuª
->
	`runAŒTe°s
();

216 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

217 
fixtuª
->
	`as£πPrötC⁄èös
(".\nOK (1Åests");

218 
	`CHECK
(
a·îCheck
);

219 
	}
}

221 
	$TEST
(
Uã°
, 
PrötPrötsWh©evîPrötPröts
)

223 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPröt
);

224 
fixtuª
->
	`runAŒTe°s
();

225 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

226 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World!");

227 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

228 
	}
}

230 
	$TEST
(
Uã°
, 
PrötPrötsPrötf
)

232 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPrötF
);

233 
fixtuª
->
	`runAŒTe°s
();

234 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

235 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World! 2009");

236 
	}
}

238 
	$TEST
(
Uã°
, 
ÆlMa¸os
)

240 
	`CHECK
(0 == 0);

241 
	`LONGS_EQUAL
(1,1);

242 
	`BYTES_EQUAL
(0xab,0xab);

243 
	`CHECK_EQUAL
(100,100);

244 
	`STRCMP_EQUAL
("THIS", "THIS");

245 
	`STRCMP_CONTAINS
("THIS", "THISTHAT");

246 
	`STRCMP_NOCASE_EQUAL
("this", "THIS");

247 
	`STRCMP_NOCASE_CONTAINS
("this", "THISTHAT");

248 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

249 
	`POINTERS_EQUAL
(
this
,Åhis);

250 
	}
}

252 
	$fun˘i⁄Th©Rëu∫sAVÆue
()

254 
	`CHECK
(0 == 0);

255 
	`LONGS_EQUAL
(1,1);

256 
	`BYTES_EQUAL
(0xab,0xab);

257 
	`CHECK_EQUAL
(100,100);

258 
	`STRCMP_EQUAL
("THIS", "THIS");

259 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

260 
	`POINTERS_EQUAL
(0, 0);

262 
	}
}

264 
	$TEST
(
Uã°
, 
ÆlMa¸osFromFun˘i⁄Th©Rëu∫sAVÆue
)

266 
	`fun˘i⁄Th©Rëu∫sAVÆue
();

267 
	}
}

269 
	$TEST
(
Uã°
, 
As£πsA˘LikeSèãmíts
)

271 i‡(
fixtuª
 !0Ë
	`CHECK
(
åue
)

272 
	`CHECK
(
Ál£
)

274 i‡(
fixtuª
 !0Ë
	`CHECK_EQUAL
(
åue
,Årue)

275 
	`CHECK_EQUAL
(
Ál£
, false)

277 i‡(
fixtuª
 !0Ë
	`STRCMP_EQUAL
("", "")

278 
	`STRCMP_EQUAL
("", " ")

280 i‡(
fixtuª
 != 0)

281 
	`STRCMP_CONTAINS
("con", "contains")

283 
	`STRCMP_CONTAINS
("hello", "world")

285 i‡(
fixtuª
 != 0)

286 
	`LONGS_EQUAL
(1, 1)

288 
	`LONGS_EQUAL
(1, 0)

290 i‡(
fixtuª
 != 0)

291 
	`DOUBLES_EQUAL
(1, 1, 0.01)

293 
	`DOUBLES_EQUAL
(1, 0, 0.01)

295 i‡(
Ál£
)

296 
	`FAIL
("")

297 
	`CHECK
(
åue
);;

299 i‡(
åue
) ;

301 
	`FAIL
("")

303 
	`SUCCESS
();

304 
	}
}

306 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Suµ‹tsAŒMa¸os
)

308 
	`CHECK
(
åue
);

309 
	`CHECK_EQUAL
(
åue
,Årue);

310 
	`STRCMP_EQUAL
("", "");

311 
	`LONGS_EQUAL
(1, 1);

312 
	`DOUBLES_EQUAL
(1, 1, 0.01);

313 
	`FAIL
("");

314 
	}
}

316 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Ac˚ssögFixtuª
)

318 
	`CHECK
(
fixtuª
 != 0);

319 
	}
}

321 
	$TEST
(
Uã°
, 
Ma¸osU£dInSëup
)

323 
	`IGNORE_ALL_LEAKS_IN_TEST
();

324 
fixtuª
->
	`£tSëup
(
_ÁûMëhod
);

325 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

326 
fixtuª
->
	`runAŒTe°s
();

327 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

328 
	}
}

330 
	$TEST
(
Uã°
, 
Ma¸osU£dInTórDown
)

332 
	`IGNORE_ALL_LEAKS_IN_TEST
();

333 
fixtuª
->
	`£tTórdown
(
_ÁûMëhod
);

334 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

335 
fixtuª
->
	`runAŒTe°s
();

336 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

337 
	}
}

339 
	gã¨downCÆÀd
 = 0;

341 
	$_ã¨downMëhod
()

343 
ã¨downCÆÀd
++;

344 
	}
}

346 
	$TEST
(
Uã°
, 
TórdownCÆÀdA·îTe°Faûuª
)

348 
ã¨downCÆÀd
 = 0;

349 
	`IGNORE_ALL_LEAKS_IN_TEST
();

350 
fixtuª
->
	`£tTórdown
(
_ã¨downMëhod
);

351 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

352 
fixtuª
->
	`runAŒTe°s
();

353 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

354 
	`LONGS_EQUAL
(1, 
ã¨downCÆÀd
);

355 
	}
}

357 
	g°›A·îFaûuª
 = 0;

358 
	$_°›A·îFaûuªMëhod
()

360 
	`FAIL
("fail");

361 
°›A·îFaûuª
++;

362 
	}
}

364 
	$TEST
(
Uã°
, 
Te°St›sA·îTe°Faûuª
)

366 
	`IGNORE_ALL_LEAKS_IN_TEST
();

367 
°›A·îFaûuª
 = 0;

368 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_°›A·îFaûuªMëhod
);

369 
fixtuª
->
	`runAŒTe°s
();

370 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

371 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

372 
	}
}

374 
	$TEST
(
Uã°
, 
Te°St›sA·îSëupFaûuª
)

376 
°›A·îFaûuª
 = 0;

377 
fixtuª
->
	`£tSëup
(
_°›A·îFaûuªMëhod
);

378 
fixtuª
->
	`£tTórdown
(
_°›A·îFaûuªMëhod
);

379 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

380 
fixtuª
->
	`runAŒTe°s
();

381 
	`LONGS_EQUAL
(2, 
fixtuª
->
	`gëFaûuªCou¡
());

382 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

383 
	}
}

385 
	$TEST_BASE
(
MyOwnTe°
)

387 
	`MyOwnTe°
() :

388 
	`öTe°
(
Ál£
)

391 
boﬁ
 
öTe°
;

393 
	`£tup
()

395 
	`CHECK
(!
öTe°
);

396 
öTe°
 = 
åue
;

398 
	`ã¨down
()

400 
	`CHECK
(
öTe°
);

401 
öTe°
 = 
Ál£
;

403 
	}
};

405 
	$TEST_GROUP_BASE
(
Uã°MyOwn
, 
MyOwnTe°
)

407 
	}
};

409 
	$TEST
(
Uã°MyOwn
, 
ã°
)

411 
	`CHECK
(
öTe°
);

412 
	}
}

414 ˛as†
	cNuŒP¨amëîTe°
: 
public
 
Uã°


418 
	$TEST
(
Uã°MyOwn
, 
NuŒP¨amëîs
)

420 
NuŒP¨amëîTe°
 
nuŒTe°
;

421 
Te°Regi°ry
* 
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

422 
nuŒTe°
.
	`shouldRun
(
ªg
->
	`gëGroupFûãr
(),Ñeg->
	`gëNameFûãr
());

423 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\AllTests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	$maö
(
ac
, ** 
av
)

33  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

34 
	}
}

36 
	~"Aµliˇti⁄Lib/AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\AllTests.h

28 
IMPORT_TEST_GROUP
–
Pröãr
);

29 
IMPORT_TEST_GROUP
–
CúcuœrBuf„r
);

30 
IMPORT_TEST_GROUP
–
HñloW‹ld
);

31 
IMPORT_TEST_GROUP
–
EvítDi•©chî
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBuffer.cpp

28 
	~"CúcuœrBuf„r.h
"

29 
	~"Pröãr.h
"

31 
	gCúcuœrBuf„r
::
	$CúcuœrBuf„r
(
ˇ∑côy
) :

32 
	`ödex
(0), 
	`outdex
(0), 
	`ˇ∑côy
(
ˇ∑côy
), 
	`em±y
(
åue
), 
	$fuŒ
(
Ál£
)

34 
buf„r
 = 
√w
 [
this
->
ˇ∑côy
];

35 
	}
}

37 
	gCúcuœrBuf„r
::~
	$CúcuœrBuf„r
()

39 
dñëe
[] 
buf„r
;

40 
	}
}

42 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsEm±y
()

44  
em±y
;

45 
	}
}

47 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsFuŒ
()

49  
fuŒ
;

50 
	}
}

52 
	gCúcuœrBuf„r
::
	$Put
(
i
)

54 
em±y
 = 
Ál£
;

55 
buf„r
[
ödex
] = 
i
;

56 
ödex
 = 
	`Next
(index);

57 i‡(
fuŒ
Ë
outdex
 = 
	`Next
(outdex);

58 i‡(
ödex
 =
outdex
Ë
fuŒ
 = 
åue
;

59 
	}
}

61 
	gCúcuœrBuf„r
::
	$Gë
()

63 
ªsu…
 = -1;

64 
fuŒ
 = 
Ál£
;

66 i‡(!
em±y
) {

67 
ªsu…
 = 
buf„r
[
outdex
];

68 
outdex
 = 
	`Next
(outdex);

69 i‡(
outdex
 =
ödex
Ë
em±y
 = 
åue
;

71  
ªsu…
;

72 
	}
}

74 
	gCúcuœrBuf„r
::
	$C≠acôy
()

76  
ˇ∑côy
;

77 
	}
}

79 
	gCúcuœrBuf„r
::
	$Next
(
i
)

81 i‡(++
i
 >
ˇ∑côy
) i = 0;

82  
i
;

83 
	}
}

85 
	gCúcuœrBuf„r
::
	$Pröt
(
Pröãr
* 
p
)

87 
p
->
	`Pröt
("Circular buffer content:\n<");

89 
¥ötIndex
 = 
outdex
;

90 
cou¡
 = 
ödex
 - 
outdex
;

92 i‡(!
em±y
 && (
ödex
 <
outdex
)Ë
cou¡
 = 
ˇ∑côy
 - (outdex - index);

94 
i
 = 0; i < 
cou¡
; i++) {

95 
p
->
	`Pröt
(
buf„r
[
¥ötIndex
]);

96 
¥ötIndex
 = 
	`Next
(printIndex);

97 i‡(
i
 + 1 !
cou¡
Ë
p
->
	`Pröt
(", ");

99 
p
->
	`Pröt
(">\n");

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBuffer.h

28 #i‚de‡
D_CúcuœrBuf„r_H


29 
	#D_CúcuœrBuf„r_H


	)

38 
˛ass
 
	gPröãr
;

40 ˛as†
	cCúcuœrBuf„r


42 
	mpublic
:

43 
ex∂icô
 
CúcuœrBuf„r
(
ˇ∑côy
 = 
CAPACITY
);

44 
	mvútuÆ
 ~
CúcuœrBuf„r
();

46 
Put
();

47 
Gë
();

48 
boﬁ
 
IsEm±y
();

49 
boﬁ
 
IsFuŒ
();

50 
C≠acôy
();

51 
Next
(
i
);

52 
Pröt
(
Pröãr
*);

54 
	m¥iv©e
:

56 
ödex
;

57 
	moutdex
;

58 * 
	mbuf„r
;

59 
	mˇ∑côy
;

62 
	mCAPACITY
 = 5

64 
boﬁ
 
	gem±y
;

65 
boﬁ
 
	gfuŒ
;

67 
CúcuœrBuf„r
(const CircularBuffer&);

68 
	gCúcuœrBuf„r
& 
	g›î©‹
=(c⁄° 
CúcuœrBuf„r
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"MockPröãr.h
"

30 
	~"CúcuœrBuf„r.h
"

32 
	$TEST_GROUP
(
CúcuœrBuf„r
)

33 { 
CúcuœrBuf„r
* 
buf„r
;

35 
	`£tup
()

37 
buf„r
 = 
√w
 
	`CúcuœrBuf„r
();

39 
	`ã¨down
()

41 
dñëe
 
buf„r
;

44 
	`fûlTheQueue
(
£ed
, 
howM™y
)

46 
i
 = 0; i < 
howM™y
; i++)

47 
buf„r
->
	`Put
(
£ed
 + 
i
);

49 
	`ªmoveFromQueue
(
howM™y
)

51 
i
 = 0; i < 
howM™y
; i++)

52 
buf„r
->
	`Gë
();

54 
	}
};

56 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

58 
	`CHECK
(
buf„r
->
	`IsEm±y
());

59 
	}
}

61 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

63 
buf„r
->
	`Put
(10046);

64 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

65 
	}
}

67 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

69 
buf„r
->
	`Put
(4567);

70 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

71 
buf„r
->
	`Gë
();

72 
	`CHECK
(
buf„r
->
	`IsEm±y
());

73 
	}
}

75 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

77 
buf„r
->
	`Put
(4567);

78 
	`LONGS_EQUAL
(4567, 
buf„r
->
	`Gë
());

79 
	}
}

81 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

83 
buf„r
->
	`Put
(1);

84 
buf„r
->
	`Put
(2);

85 
buf„r
->
	`Put
(3);

86 
	`LONGS_EQUAL
(1, 
buf„r
->
	`Gë
());

87 
	`LONGS_EQUAL
(2, 
buf„r
->
	`Gë
());

88 
	`LONGS_EQUAL
(3, 
buf„r
->
	`Gë
());

89 
	}
}

91 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

93 
CúcuœrBuf„r
 
	`buf„r
(2);

94 
	`LONGS_EQUAL
(2, 
buf„r
.
	`C≠acôy
());

95 
	}
}

97 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

99 
	`fûlTheQueue
(0, 
buf„r
->
	`C≠acôy
());

100 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

101 
	}
}

103 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

105 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

107 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

109 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

111 
	`CHECK
(
buf„r
->
	`IsEm±y
());

112 
	}
}

114 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

116 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

118 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

119 
	`LONGS_EQUAL
(100, 
buf„r
->
	`Gë
());

120 
	`CHECK
(!
buf„r
->
	`IsFuŒ
());

121 
buf„r
->
	`Put
(1000);

122 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

124 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 1);

126 
	`LONGS_EQUAL
(1000, 
buf„r
->
	`Gë
());

127 
	`CHECK
(
buf„r
->
	`IsEm±y
());

128 
	}
}

130 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒ
)

132 
ˇ∑côy
 = 
buf„r
->
	`C≠acôy
();

133 
	`fûlTheQueue
(900, 
ˇ∑côy
);

134 
buf„r
->
	`Put
(9999);

136 
i
 = 0; i < 
buf„r
->
	`C≠acôy
() - 1; i++)

137 
	`LONGS_EQUAL
(
i
+900+1, 
buf„r
->
	`Gë
());

139 
	`LONGS_EQUAL
(9999, 
buf„r
->
	`Gë
());

140 
	`CHECK
(
buf„r
->
	`IsEm±y
());

141 
	}
}

147 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±y
)

149 
	`LONGS_EQUAL
(-1, 
buf„r
->
	`Gë
());

150 
	`CHECK
(
buf„r
->
	`IsEm±y
());

151 
	}
}

159 
	$TEST
(
CúcuœrBuf„r
, 
PrötEm±y
)

161 
MockPröãr
 
mock
;

162 
Pröãr
* 
p
 = &
mock
;

164 
buf„r
->
	`Pröt
(
p
);

165 
	`CHECK_EQUAL
("Circular buffer content:\n<>\n",

166 
mock
.
	`gëOuçut
());

167 
	}
}

169 
	$TEST
(
CúcuœrBuf„r
, 
PrötA·îO√Put
)

171 
MockPröãr
 
mock
;

173 
buf„r
->
	`Put
(1);

174 
buf„r
->
	`Pröt
(&
mock
);

175 
	`CHECK_EQUAL
("Circular buffer content:\n<1>\n",

176 
mock
.
	`gëOuçut
());

177 
	}
}

179 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedOrFuŒ
)

181 
MockPröãr
 
mock
;

183 
buf„r
->
	`Put
(1);

184 
buf„r
->
	`Put
(2);

185 
buf„r
->
	`Put
(3);

186 
buf„r
->
	`Pröt
(&
mock
);

187 
	`CHECK_EQUAL
("Circular buffer content:\n<1, 2, 3>\n",

188 
mock
.
	`gëOuçut
());

189 
	}
}

191 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedAndIsFuŒ
)

193 
MockPröãr
 
mock
;

195 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

197 
buf„r
->
	`Pröt
(&
mock
);

198 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

201 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

202 
	}
}

204 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

206 
MockPröãr
 
mock
;

208 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

209 
buf„r
->
	`Gë
();

210 
buf„r
->
	`Put
(999);

212 
buf„r
->
	`Pröt
(&
mock
);

213 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

216 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

217 
	}
}

219 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndFuŒOvîwrôeOlde°
)

221 
MockPröãr
 
mock
;

223 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

224 
buf„r
->
	`Put
(9999);

226 
buf„r
->
	`Pröt
(&
mock
);

227 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

230 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

231 
	}
}

233 
	$TEST
(
CúcuœrBuf„r
, 
PrötBound¨y
)

235 
MockPröãr
 
mock
;

237 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

238 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 2);

239 
buf„r
->
	`Put
(888);

240 
	`fûlTheQueue
(300, 
buf„r
->
	`C≠acôy
() - 1);

242 
buf„r
->
	`Pröt
(&
mock
);

243 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

246 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

247 
	}
}

249 
	$TEST
(
CúcuœrBuf„r
, 
FûlEm±yThíPröt
)

251 
MockPröãr
 
mock
;

253 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

254 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

255 
buf„r
->
	`Pröt
(&
mock
);

256 c⁄° * 
ex≥˘ed
 = "Circular buffer content:\n"

259 
	`CHECK_EQUAL
(
ex≥˘ed
, 
mock
.
	`gëOuçut
());

260 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcher.cpp

2 
	~"EvítDi•©chî.h
"

4 
	gEvítDi•©chî
::
	$EvítDi•©chî
()

6 
	}
}

8 
EvítDi•©chî
::
	$ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
)

10 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

11 
i
->
£c⁄d
->
	`nŸifyRegi°øti⁄
(
ob£rvî
);

13 
ob£rvîLi°_
.
	`push_back
(
	`make_∑ú
(
ty≥
, 
ob£rvî
));

14 
	}
}

16 
	gEvítDi•©chî
::
	$di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
)

18 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

20 i‡(
i
->
fú°
 =
evít
.
ty≥
)

21 
i
->
£c⁄d
->
	`nŸify
(
evít
, 
timeoutSec⁄ds
);

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcher.h

2 #i‚de‡
EVENTDISPATCHER__H


3 
	#EVENTDISPATCHER__H


	)

5 
	~<li°
>

6 
usög
 
«me•a˚
 
	g°d
;

8 
	eEvítTy≥


10 
	mIMPORTANT_EVENT
,

11 
	mLESS_IMPORTANT_EVENT


14 ˛as†
	cEvít


16 
	mpublic
:

17 
EvítTy≥
 
ty≥
;

20 ˛as†
	cEvítOb£rvî


22 
	mpublic
:

23 
vútuÆ
 
nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)=0;

24 
vútuÆ
 
nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)=0;

27 ˛as†
	cEvítDi•©chî


29 
	mli°
<
	m∑ú
<
	mEvítTy≥
, 
	mEvítOb£rvî
*> > 
	mob£rvîLi°_
;

30 
	mpublic
:

31 
EvítDi•©chî
();

33 
ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
);

34 
di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°Ext/MockSuµ‹t.h
"

4 
	~"EvítDi•©chî.h
"

6 
MockSuµ‹t
 
	gmock
;

8 ˛as†
	cOb£rvîMock
 : 
public
 
EvítOb£rvî


10 
public
:

11 
vútuÆ
 
	$nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)

13 
mock
.
	`a˘uÆCÆl
("nŸify").
	`wôhP¨amëîOfTy≥
("Evít", "evít", (*Ë&
evít
).
	`wôhP¨amëî
("timeOutInSec⁄ds", 
timeOutInSec⁄ds
);

15 
vútuÆ
 
	$nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)

17 
mock
.
	`a˘uÆCÆl
("nŸifyRegi°øti⁄").
	`wôhP¨amëî
("√wOb£rvî", 
√wOb£rvî
);

18 
	}
}

21 ˛as†
	cEvítCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


23 
public
:

24 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

26  ((
Evít
*)
obje˘1
)->
ty≥
 =((Evít*)
obje˘2
)->type;

28 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

30  
	`SåögFrom
(((
Evít
*)
obje˘
)->
ty≥
);

31 
	}
}

35 
	$TEST_GROUP
(
EvítDi•©chî
)

37 
Evít
 
evít
;

38 
EvítDi•©chî
* 
di•©chî
;

39 
Ob£rvîMock
 
ob£rvî
;

40 
EvítCom∑øt‹
 
evítCom∑øt‹
;

42 
	`£tup
()

44 
di•©chî
 = 
√w
 
EvítDi•©chî
;

45 
mock
.
	`ö°ÆlCom∑øt‹
("Evít", 
evítCom∑øt‹
);

47 
	`ã¨down
()

49 
dñëe
 
di•©chî
;

50 
mock
.
	`ªmoveAŒCom∑øt‹s
();

52 
	}
};

55 
	$TEST
(
EvítDi•©chî
, 
EvítWôhoutRegi°øti⁄sResu…sI¡oNoCÆls
)

57 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

58 
mock
.
	`checkEx≥˘©i⁄s
();

59 
	}
}

61 
	$TEST
(
EvítDi•©chî
, 
EvítWôhRegi°øti⁄F‹EvítResu…sI¡oCÆlback
)

63 
mock
.
	`ex≥˘O√CÆl
("nŸify").
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

64 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

66 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

67 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

68 
mock
.
	`checkEx≥˘©i⁄s
();

69 
	}
}

71 
	$TEST
(
EvítDi•©chî
, 
Dif„ª¡EvítWôhRegi°øti⁄D€sNŸResu…I¡oCÆlback
)

73 
evít
.
ty≥
 = 
LESS_IMPORTANT_EVENT
;

74 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

75 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

76 
mock
.
	`checkEx≥˘©i⁄s
();

77 
	}
}

79 
	$TEST
(
EvítDi•©chî
, 
Regi°îTwoOb£rvîsResu…I¡oTwoCÆlsAndARegi°øti⁄NŸifiˇti⁄
)

81 
mock
.
	`ex≥˘O√CÆl
("nŸify").
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

82 
mock
.
	`ex≥˘O√CÆl
("nŸify").
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

83 
mock
.
	`ex≥˘O√CÆl
("nŸifyRegi°øti⁄").
	`wôhP¨amëî
("√wOb£rvî", &
ob£rvî
);

85 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

86 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

87 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

88 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

89 
mock
.
	`checkEx≥˘©i⁄s
();

90 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h

2 
	~<li°
>

3 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\HelloTest.cpp

3 
	~"hñlo.h
"

6 
	~<°dio.h
>

7 
	~<°d¨g.h
>

8 
	~"CµUTe°/Te°H¨√ss.h
"

10 
Sim∂eSåög
* 
buf„r
;

12 
	$TEST_GROUP
(
HñloW‹ld
)

13 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

15 
va_li°
 
¨gumíts
;

16 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

17 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

18 
	`va_íd
(
¨gumíts
);

21 
	`£tup
()

23 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

24 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

26 
	`ã¨down
()

28 
dñëe
 
buf„r
;

30 
	}
};

32 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

34 
	`¥ötHñloW‹ld
();

35 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

36 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\MockPrinter.h

28 #i‚de‡
D_MockPröãr_H


29 
	#D_MockPröãr_H


	)

38 
	~"Pröãr.h
"

39 
	~"CµUTe°/Sim∂eSåög.h
"

40 
	~<°dlib.h
>

41 
	~<°rög
>

43 ˛as†
	cMockPröãr
: 
public
 
Pröãr


45 
public
:

46 
ex∂icô
 
	$MockPröãr
()

49 
vútuÆ
 ~
	$MockPröãr
()

51 
	}
}

53 
vútuÆ
 
	$Pröt
(c⁄° * 
s
)

55 
ßvedOuçut
.
	`≠≥nd
(
s
);

56 
	}
}

58 
vútuÆ
 
	$Pröt
(
vÆue
)

60 
Sim∂eSåög
 
buf„r
;

61 
buf„r
 = 
	`SåögFromF‹m©
("%ld", 
vÆue
);

62 
ßvedOuçut
.
	`≠≥nd
(
buf„r
.
	`asCh¨Såög
());

63 
	}
}

65 
	g°d
::
°rög
 
	$gëOuçut
() const

67  
ßvedOuçut
;

68 
	}
}

70 
	g¥iv©e
:

72 
°d
::
°rög
 
ßvedOuçut
;

74 
MockPröãr
(const MockPrinter&);

75 
	gMockPröãr
& 
	g›î©‹
=(c⁄° 
MockPröãr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\Printer.cpp

28 
	~"Pröãr.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Sim∂eSåög.h
"

31 
	~<°dio.h
>

33 
	gPröãr
::
	$Pröãr
()

35 
	}
}

37 
Pröãr
::~
	$Pröãr
()

39 
	}
}

41 
Pröãr
::
	$Pröt
(c⁄° * 
s
)

43 c⁄° * 
p
 = 
s
; *p;Ö++)

44 
	`putch¨
(*
p
);

45 
	}
}

47 
	gPröãr
::
	$Pröt
(
n
)

49 
	`Pröt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

50 
	}
}

52 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, c⁄° * 
	gs
)

54 
	gp
.
Pröt
(
s
);

55  
	gp
;

58 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, 
	gi
)

60 
	gp
.
Pröt
(
i
);

61  
	gp
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\Printer.h

28 #i‚de‡
D_Pröãr_H


29 
	#D_Pröãr_H


	)

37 ˛as†
	cPröãr


39 
	mpublic
:

40 
ex∂icô
 
Pröãr
();

41 
	mvútuÆ
 ~
Pröãr
();

43 
vútuÆ
 
Pröt
(const *);

44 
vútuÆ
 
Pröt
();

46 
	m¥iv©e
:

48 
Pröãr
(const Printer&);

49 
	mPröãr
& 
	m›î©‹
=(c⁄° 
Pröãr
&);

53 
	gPröãr
& 
	g›î©‹
<<(Printer&, const *);

54 
	gPröãr
& 
	g›î©‹
<<(Printer&, );

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\PrinterTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"Pröãr.h
"

30 
	~"MockPröãr.h
"

32 
	$TEST_GROUP
(
Pröãr
)

33 { 
Pröãr
* 
¥öãr
;

34 
MockPröãr
* 
mockPröãr
;

36 
	`£tup
()

38 
mockPröãr
 = 
√w
 
	`MockPröãr
();

39 
¥öãr
 = 
mockPröãr
;

41 
	`ã¨down
()

43 
dñëe
 
¥öãr
;

45 
	}
};

47 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

49 
¥öãr
->
	`Pröt
("hello");

50 
¥öãr
->
	`Pröt
("hello\n");

51 
	`CHECK_EQUAL
("hñlohñlo\n", 
mockPröãr
->
	`gëOuçut
());

52 
	}
}

54 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

56 
¥öãr
->
	`Pröt
(1234);

57 
	`CHECK_EQUAL
("1234", 
mockPröãr
->
	`gëOuçut
());

58 
	}
}

60 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

62 *
¥öãr
 << "n=" << 1234;

63 
	`CHECK_EQUAL
("n=1234", 
mockPröãr
->
	`gëOuçut
());

64 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\hello.c

1 
	~<°dio.h
>

2 
	~"hñlo.h
"

4 
	$¥ötHñloW‹ld
()

6 
	`PrötF‹m©ed
("Hello World!\n");

7 
	}
}

9 (*
PrötF‹m©ed
)(c⁄° *, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\hello.h

1 #i‚de‡
HELLO_H_


2 
	#HELLO_H_


	)

4 
¥ötHñloW‹ld
();

6 (*
PrötF‹m©ed
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h

28 #i‚de‡
D_CodeMem‹yRï‹tF‹m©ãr_h


29 
	#D_CodeMem‹yRï‹tF‹m©ãr_h


	)

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
˛ass
 
	gCodeRï‹tögAŒoˇti⁄Node
;

34 ˛as†
	cCodeMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


36 
¥iv©e
:

37 
CodeRï‹tögAŒoˇti⁄Node
* 
codeRï‹tögLi°_
;

38 
Mem‹yLókAŒoˇt‹
* 
	möã∫ÆAŒoˇt‹_
;

40 
	mpublic
:

41 
CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
);

42 
	mvútuÆ
 ~
CodeMem‹yRï‹tF‹m©ãr
();

44 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

45 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

47 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

48 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

50 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

51 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

53 
¥iv©e
:

55 
	`addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
);

56 
CodeRï‹tögAŒoˇti⁄Node
* 
	`födNode
(* 
mem‹y
);

57 
boﬁ
 
	`v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
);

58 
	`˛órRï‹tög
();

60 
boﬁ
 
	`isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

61 
Sim∂eSåög
 
	`¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
);

63 
Sim∂eSåög
 
	`gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, 
size_t
 
size
);

64 
Sim∂eSåög
 
	`gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
);

65 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReportAllocator.h

28 #i‚de‡
D_Mem‹yRï‹tAŒoˇt‹_h


29 
	#D_Mem‹yRï‹tAŒoˇt‹_h


	)

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

33 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

35 ˛as†
	cMem‹yRï‹tAŒoˇt‹
 : 
public
 
Mem‹yLókAŒoˇt‹


37 
¥Ÿe˘ed
:

38 
Te°Resu…
* 
ªsu…_
;

39 
Mem‹yLókAŒoˇt‹
* 
	mªÆAŒoˇt‹_
;

40 
Mem‹yRï‹tF‹m©ãr
* 
	mf‹m©ãr_
;

41 
	mpublic
:

42 
Mem‹yRï‹tAŒoˇt‹
();

43 
	mvútuÆ
 ~
Mem‹yRï‹tAŒoˇt‹
();

45 
vútuÆ
 
£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

46 
vútuÆ
 
£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

47 
vútuÆ
 
£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

49 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

50 
vútuÆ
 
Mem‹yLókAŒoˇt‹
* 
gëRólAŒoˇt‹
();

52 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

53 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

55 
vútuÆ
 c⁄° * 
«me
();

56 
vútuÆ
 c⁄° * 
Æloc_«me
();

57 
vútuÆ
 c⁄° * 
‰ì_«me
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReportFormatter.h

28 #i‚de‡
D_Mem‹yRï‹tF‹m©ãr_h


29 
	#D_Mem‹yRï‹tF‹m©ãr_h


	)

31 
˛ass
 
	gTe°Ouçut
;

32 
˛ass
 
	gUã°
;

34 ˛as†
	cMem‹yRï‹tF‹m©ãr


36 
	mpublic
:

38 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

39 
vútuÆ
 
ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

41 
vútuÆ
 
ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

42 
vútuÆ
 
ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

44 
vútuÆ
 
ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

45 
vútuÆ
 
ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

48 ˛as†
	cN‹mÆMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


50 
public
:

51 
N‹mÆMem‹yRï‹tF‹m©ãr
();

52 
	mvútuÆ
 ~
N‹mÆMem‹yRï‹tF‹m©ãr
();

54 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* , 
Uã°
& );

55 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

57 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

58 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

60 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

61 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

62 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h

28 #i‚de‡
D_Mem‹yRï‹ãrPlugö_h


29 
	#D_Mem‹yRï‹ãrPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

34 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

36 ˛as†
	cMem‹yRï‹ãrPlugö
 : 
public
 
Te°Plugö


38 
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr_
;

40 
Mem‹yRï‹tAŒoˇt‹
 
	mmÆlocAŒoˇt‹
;

41 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAŒoˇt‹
;

42 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAºayAŒoˇt‹
;

44 
Sim∂eSåög
 
	mcuºítTe°Group_
;

45 
	mpublic
:

46 
Mem‹yRï‹ãrPlugö
();

47 
	mvútuÆ
 ~
Mem‹yRï‹ãrPlugö
();

49 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

50 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

51 
vútuÆ
 
boﬁ
 
∑r£Argumíts
(, const **, );

53 
	m¥Ÿe˘ed
:

54 
vútuÆ
 
Mem‹yRï‹tF‹m©ãr
* 
¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
);

56 
	m¥iv©e
:

57 
de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

59 
£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

60 
ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

62 
öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockActualFunctionCall.h

28 #i‚de‡
D_MockA˘uÆFun˘i⁄CÆl_h


29 
	#D_MockA˘uÆFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

34 
˛ass
 
	gMockFaûuªRï‹ãr
;

35 
˛ass
 
	gMockFaûuª
;

36 
˛ass
 
	gMockNamedVÆue
;

38 ˛as†
	cMockA˘uÆFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


40 
public
:

41 
MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

42 
	mvútuÆ
 ~
MockA˘uÆFun˘i⁄CÆl
();

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

51 
vútuÆ
 
boﬁ
 
	$isFulfûÀd
() const;

52 
vútuÆ
 
boﬁ
 
	$hasFaûed
() const;

54 
vútuÆ
 
	`checkEx≥˘©i⁄s
();

56 
¥Ÿe˘ed
:

57 
vútuÆ
 
Uã°
* 
	$gëTe°
() const;

58 
vútuÆ
 
	`ˇŒHasSuc˚eded
();

59 
vútuÆ
 
	`ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

60 
vútuÆ
 
	`checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
);

62 
	eA˘uÆCÆlSèã
 {

63 
CALL_IN_PROGESS
,

64 
CALL_FAILED
,

65 
CALL_SUCCEED


67 
vútuÆ
 
	`£tSèã
(
A˘uÆCÆlSèã
 
°©e
);

68 
vútuÆ
 
	`checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
);

70 
¥iv©e
:

71 
MockFaûuªRï‹ãr
* 
ªp‹ãr_
;

73 
A˘uÆCÆlSèã
 
°©e_
;

75 
MockEx≥˘edFun˘i⁄sLi°
 
unfulfûÀdEx≥˘©i⁄s_
;

76 c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s_
;

77 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄CÆl_h


29 
	#D_MockEx≥˘edFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

33 
Sim∂eSåög
 
SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

35 ˛as†
	cMockEx≥˘edFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


38 
public
:

39 
MockEx≥˘edFun˘i⁄CÆl
();

40 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄CÆl
();

42 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

43 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

49 
vútuÆ
 
MockNamedVÆue
 
gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

50 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîTy≥
(c⁄° Sim∂eSåög& 
«me
);

51 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîVÆueSåög
(c⁄° Sim∂eSåög& 
«me
);

53 
vútuÆ
 
boﬁ
 
hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

54 
vútuÆ
 
boﬁ
 
hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

55 
vútuÆ
 
boﬁ
 
ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

57 
vútuÆ
 
boﬁ
 
isFulfûÀd
();

58 
vútuÆ
 
boﬁ
 
¨eP¨amëîsFulfûÀd
();

60 
vútuÆ
 
ˇŒWasMade
();

61 
vútuÆ
 
∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ª£tEx≥˘©i⁄
();

64 
vútuÆ
 
Sim∂eSåög
 
ˇŒToSåög
();

65 
vútuÆ
 
Sim∂eSåög
 
missögP¨amëîsToSåög
();

67 
	m¥iv©e
:

69 ˛as†
	cMockEx≥˘edFun˘i⁄P¨amëî
 : 
public
 
MockNamedVÆue


71 
public
:

72 
MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

73 : 
MockNamedVÆue
(
«me
), 
fulfûÀd_
(
Ál£
) {}

75 
boﬁ
 
	mfulfûÀd_
;

78 
	sMockFun˘i⁄P¨amëîNode


80 
MockFun˘i⁄P¨amëîNode
(
MockEx≥˘edFun˘i⁄P¨amëî
* 
d©a
Ë: 
d©a_
(d©a), 
√xt_
(
NULL
) {}

81 
MockEx≥˘edFun˘i⁄P¨amëî
* 
	gd©a_
;

82 
MockFun˘i⁄P¨amëîNode
* 
	g√xt_
;

85 
boﬁ
 
	gwasCÆlMade_
;

86 
MockFun˘i⁄P¨amëîNode
* 
	g∑ømëîs_
;

88 
MockNamedVÆue
* 
gëP¨amëîByName
(c⁄° 
Sim∂eSåög
& 
«me
);

89 
MockNamedVÆue
* 
addNewP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

90 
boﬁ
 
∑ømëîsEquÆ
(c⁄° 
MockNamedVÆue
& 
p1
, c⁄° MockNamedVÆue& 
p2
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄sLi°_h


29 
	#D_MockEx≥˘edFun˘i⁄sLi°_h


	)

31 
˛ass
 
	gMockEx≥˘edFun˘i⁄CÆl
;

32 
˛ass
 
	gMockNamedVÆue
;

34 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°


37 
	mpublic
:

38 
MockEx≥˘edFun˘i⁄sLi°
();

39 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄sLi°
();

40 
vútuÆ
 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

42 
vútuÆ
 
	$size
() const;

43 
vútuÆ
 
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const;

44 
vútuÆ
 
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const;

45 
vútuÆ
 
boﬁ
 
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const;

46 
vútuÆ
 
boﬁ
 
	$hasFulfûÀdEx≥˘©i⁄s
() const;

47 
vútuÆ
 
boﬁ
 
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const;

48 
vútuÆ
 
boﬁ
 
	$isEm±y
() const;

50 
vútuÆ
 
	`addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
);

51 
vútuÆ
 
	`addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

52 
vútuÆ
 
	`addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

53 
vútuÆ
 
	`addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

55 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

56 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

57 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
);

58 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

59 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

60 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

62 
vútuÆ
 
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

64 
vútuÆ
 
	`ª£tEx≥˘©i⁄s
();

65 
vútuÆ
 
	`ˇŒWasMade
();

66 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
);

68 
vútuÆ
 
Sim∂eSåög
 
	`unfulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

69 
vútuÆ
 
Sim∂eSåög
 
	`fulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

70 
vútuÆ
 
Sim∂eSåög
 
	$missögP¨amëîsToSåög
() const;

72 
¥Ÿe˘ed
:

73 
vútuÆ
 
	`¥u√Em±yNodeFromLi°
();

74 
vútuÆ
 
Sim∂eSåög
 
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const;

76 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°Node


78 
public
:

79 
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl_
;

81 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt_
;

82 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl
)

83 : 
	`ex≥˘edCÆl_
(
ex≥˘edCÆl
), 
	`√xt_
(
NULL
) {};

85 
¥iv©e
:

86 
MockEx≥˘edFun˘i⁄sLi°Node
* 
hód_
;

88 
	`MockEx≥˘edFun˘i⁄sLi°
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
&);

89 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockFailure.h

29 #i‚de‡
D_MockFaûuª_h


30 
	#D_MockFaûuª_h


	)

32 
	~"CµUTe°/Te°Faûuª.h
"

34 
˛ass
 
	gMockEx≥˘edFun˘i⁄sLi°
;

35 
˛ass
 
	gMockA˘uÆFun˘i⁄CÆl
;

36 
˛ass
 
	gMockNamedVÆue
;

37 
˛ass
 
	gMockFaûuª
;

39 ˛as†
	cMockFaûuªRï‹ãr


41 
	m¥Ÿe˘ed
:

42 
boﬁ
 
¸ashOnFaûuª_
;

43 
	mpublic
:

44 
	$MockFaûuªRï‹ãr
(Ë: 
	$¸ashOnFaûuª_
(
Ál£
){};

45 
vútuÆ
 ~
	$MockFaûuªRï‹ãr
(Ë{
	}
};

47 
vútuÆ
 
ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

48 
vútuÆ
 
Uã°
* 
gëTe°ToFaû
();

50 
vútuÆ
 
	$¸ashOnFaûuª
(Ë{
¸ashOnFaûuª_
 = 
åue
; 
	}
}

53 ˛as†
	cMockFaûuª
 : 
public
 
Te°Faûuª


55 
public
:

56 
MockFaûuª
(
Uã°
* 
ã°
);

57 
	mvútuÆ
 ~
	$MockFaûuª
(){};

58 
¥Ÿe˘ed
:

59 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

60 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

61 
	}
};

63 ˛as†
	cMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


65 
public
:

66 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

67 
	mvútuÆ
 ~
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(){};

68 
	}
};

70 ˛as†
	cMockU√x≥˘edCÆlH≠≥√dFaûuª
 : 
public
 
MockFaûuª


72 
public
:

73 
MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

74 
	mvútuÆ
 ~
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(){};

75 
	}
};

77 ˛as†
	cMockU√x≥˘edP¨amëîFaûuª
 : 
public
 
MockFaûuª


79 
public
:

80 
MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

81 
	mvútuÆ
 ~
	$MockU√x≥˘edP¨amëîFaûuª
(){};

82 
	}
};

84 ˛as†
	cMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


86 
public
:

87 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

88 
	mvútuÆ
 ~
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(){};

89 
	}
};

91 ˛as†
	cMockNoWayToCom∑ªCu°omTy≥Faûuª
 : 
public
 
MockFaûuª


93 
public
:

94 
MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
);

95 
	mvútuÆ
 ~
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(){};

96 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockFunctionCall.h

28 #i‚de‡
D_MockFun˘i⁄CÆl_h


29 
	#D_MockFun˘i⁄CÆl_h


	)

36 ˛as†
	cMockNamedVÆueCom∑øt‹


38 
	mpublic
:

39 
	$MockNamedVÆueCom∑øt‹
() {};

40 
vútuÆ
 ~
	$MockNamedVÆueCom∑øt‹
(Ë{
	}
};

42 
vútuÆ
 
boﬁ
 
isEquÆ
(* 
obje˘1
, * 
obje˘2
)=0;

43 
vútuÆ
 
Sim∂eSåög
 
vÆueToSåög
(* 
obje˘
)=0;

54 ˛as†
	cMockNamedVÆue


56 
	mpublic
:

57 
MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
);

58 
	mvútuÆ
 ~
MockNamedVÆue
();

60 
vútuÆ
 
£tVÆue
(
vÆue
);

61 
vútuÆ
 
£tVÆue
(
vÆue
);

62 
vútuÆ
 
£tVÆue
(* 
vÆue
);

63 
vútuÆ
 
£tVÆue
(c⁄° * 
vÆue
);

64 
vútuÆ
 
£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
);

66 
vútuÆ
 
£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
);

68 
vútuÆ
 
boﬁ
 
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const;

70 
vútuÆ
 
Sim∂eSåög
 
	$toSåög
() const;

72 
vútuÆ
 
Sim∂eSåög
 
	$gëName
() const;

73 
vútuÆ
 
Sim∂eSåög
 
	$gëTy≥
() const;

75 
vútuÆ
 
	`gëI¡VÆue
();

76 
vútuÆ
 
	`gëDoubÀVÆue
();

77 
vútuÆ
 c⁄° * 
	`gëSåögVÆue
();

78 
vútuÆ
 * 
	`gëPoöãrVÆue
();

79 
vútuÆ
 * 
	`gëObje˘Poöãr
();

80 
¥iv©e
:

81 
Sim∂eSåög
 
«me_
;

82 
Sim∂eSåög
 
ty≥_
;

84 
ötVÆue_
;

85 
doubÀVÆue_
;

86 c⁄° * 
°rögVÆue_
;

87 * 
poöãrVÆue_
;

88 * 
obje˘PoöãrVÆue_
;

89 } 
vÆue_
;

90 
MockNamedVÆueCom∑øt‹
* 
com∑øt‹_
;

91 
	}
};

98 
˛ass
 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
;

99 ˛as†
	cMockFun˘i⁄CÆl


101 
	mpublic
:

102 
MockFun˘i⁄CÆl
();

103 
	mvútuÆ
 ~
MockFun˘i⁄CÆl
();

105 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)=0;

106 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

107 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

108 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)=0;

109 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)=0;

110 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)=0;

112 
vútuÆ
 
£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
);

114 
	m¥Ÿe˘ed
:

115 
£tName
(c⁄° 
Sim∂eSåög
& 
«me
);

116 
Sim∂eSåög
 
	$gëName
() const;

117 
MockNamedVÆueCom∑øt‹
* 
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const;

118 
¥iv©e
:

119 
Sim∂eSåög
 
fun˘i⁄Name_
;

120 
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
com∑øt‹Rïosô‹y_
;

128 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
;

129 ˛as†
	cMockNamedVÆueCom∑øt‹Rïosô‹y


131 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
hód_
;

132 
public
:

133 
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

134 
vútuÆ
 ~
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

136 
vútuÆ
 
	`ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

137 
vútuÆ
 
MockNamedVÆueCom∑øt‹
* 
	`gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
);

139 
	`˛ór
();

143 ˛as†
	cMockIgn‹edCÆl
 : 
public
 
MockFun˘i⁄CÆl


145 
public
:

146 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhName
(c⁄° 
Sim∂eSåög
&Ë{  *
this
;};

147 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
};

148 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
};

149 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, c⁄° *Ë{  *
this
; 
	}
};

150 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *Ë{  *
this
; 
	}
};

151 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, c⁄° Sim∂eSåög&, *Ë{  *
this
; 
	}
};

153 
	gMockFun˘i⁄CÆl
& 
	$ö°™˚
(Ë{ 
MockIgn‹edCÆl
 
ˇŒ
;  cÆl; 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockSupport.h

28 #i‚de‡
D_MockSuµ‹t_h


29 
	#D_MockSuµ‹t_h


	)

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

33 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

34 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

36 
˛ass
 
	gUã°
;

38 ˛as†
	cMockSuµ‹t


40 
	mpublic
:

41 
MockSuµ‹t
();

42 
	mvútuÆ
 ~
MockSuµ‹t
();

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

47 
vútuÆ
 
dißbÀ
();

48 
vútuÆ
 
íabÀ
();

49 
vútuÆ
 
ign‹eOthîCÆls
();

51 
vútuÆ
 
˛órEx≥˘©i⁄s
();

52 
vútuÆ
 
boﬁ
 
ex≥˘edCÆlsLe·
();

54 
vútuÆ
 
checkEx≥˘©i⁄s
();

56 
vútuÆ
 
£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

57 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

58 
vútuÆ
 
ªmoveAŒCom∑øt‹s
();

60 
vútuÆ
 
¸ashOnFaûuª
();

62 
	m¥Ÿe˘ed
:

63 
vútuÆ
 
MockA˘uÆFun˘i⁄CÆl
* 
¸óãA˘uÆFun˘i⁄CÆl
();

65 
	m¥iv©e
:

66 
MockFaûuªRï‹ãr
* 
ªp‹ãr_
;

67 
MockFaûuªRï‹ãr
 
	mdeÁu…Rï‹ãr_
;

69 
MockEx≥˘edFun˘i⁄sLi°
 
	mex≥˘©i⁄s_
;

70 
boﬁ
 
	mign‹eOthîCÆls_
;

71 
boﬁ
 
	míabÀd_
;

72 
MockA˘uÆFun˘i⁄CÆl
* 
	mœ°A˘uÆFun˘i⁄CÆl_
;

73 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
	mcom∑øt‹Rïosô‹y_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\OrderedTest.h

28 #i‚de‡
D_OrdîedTe°_h


29 
	#D_OrdîedTe°_h


	)

31 ˛as†
	cOrdîedTe°
 : 
public
 
Uã°


33 
public
:

34 
OrdîedTe°
();

35 
	mvútuÆ
 ~
OrdîedTe°
();

37 
vútuÆ
 
OrdîedTe°
* 
addOrdîedTe°
(OrdîedTe°* 
ã°
);

38 
vútuÆ
 
OrdîedTe°
* 
gëNextOrdîedTe°
();

40 
gëLevñ
();

41 
£tLevñ
(
Àvñ
);

43 
addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
);

44 
OrdîedTe°
* 
gëOrdîedTe°Hód
();

45 
boﬁ
 
fú°OrdîedTe°
();

47 
£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
);

48 
	m¥iv©e
:

49 
OrdîedTe°
* 
_‹dîedTe°sHód
;

50 
OrdîedTe°
* 
	m_√xtOrdîedTe°
;

52 
	m_Àvñ
;

56 ˛as†
	cOrdîedTe°In°ÆÀr


58 
	mpublic
:

59 
ex∂icô
 
OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Àvñ
);

60 
	mvútuÆ
 ~
OrdîedTe°In°ÆÀr
();

62 
	m¥iv©e
:

63 
addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
);

64 
addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
OrdîedTe°
* 
ã°
);

68 
	#TEST_ORDERED
(
ã°Group
, 
ã°Name
, 
ã°Levñ
) \

69 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

70 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

71 
	`ã°Body
(); } \

72 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

73 
OrdîedTe°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
, 
ã°Levñ
); \

74 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\CommandLineArguments.h

1 #i‚de‡
D_Comm™dLöeArgumíts_H


2 
	#D_Comm™dLöeArgumíts_H


	)

9 
	~"Sim∂eSåög.h
"

10 
	~"Te°Ouçut.h
"

12 
˛ass
 
	gTe°Plugö
;

14 ˛as†
	cComm™dLöeArgumíts


16 
	mpublic
:

17 
ex∂icô
 
Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
);

18 
	mvútuÆ
 ~
Comm™dLöeArgumíts
();

20 
boﬁ
 
∑r£
(
Te°Plugö
* 
∂ugö
);

21 
boﬁ
 
	$isVîbo£
() const;

22 
	$gëRïótCou¡
() const;

23 
Sim∂eSåög
 
	$gëGroupFûãr
() const;

24 
Sim∂eSåög
 
	$gëNameFûãr
() const;

25 
boﬁ
 
	$isJUnôOuçut
() const;

26 
boﬁ
 
	$isE˛ù£Ouçut
() const;

27 c⁄° * 
	$ußge
() const;

29 
¥iv©e
:

31 
	eOuçutTy≥


33 
OUTPUT_ECLIPSE
, 
OUTPUT_JUNIT


35 
ac_
;

36 c⁄° ** 
av_
;

38 
boﬁ
 
vîbo£_
;

39 
ª≥©_
;

40 
Sim∂eSåög
 
groupFûãr_
;

41 
Sim∂eSåög
 
«meFûãr_
;

42 
OuçutTy≥
 
ouçutTy≥_
;

44 
Sim∂eSåög
 
	`gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
);

45 
	`SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
ödex
);

46 
	`SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

47 
	`SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

48 
boﬁ
 
	`SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
ödex
);

50 
	`Comm™dLöeArgumíts
(c⁄° 
Comm™dLöeArgumíts
&);

51 
Comm™dLöeArgumíts
& 
›î©‹
=(const CommandLineArguments&);

53 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\CommandLineTestRunner.h

28 #i‚de‡
D_Comm™dLöeTe°Ru¬î_H


29 
	#D_Comm™dLöeTe°Ru¬î_H


	)

31 
	~"Te°H¨√ss.h
"

32 
	~"Te°Ouçut.h
"

33 
	~"Comm™dLöeArgumíts.h
"

41 
˛ass
 
	gJUnôTe°Ouçut
;

43 
	#DEF_PLUGIN_MEM_LEAK
 "Mem‹yLókPlugö"

	)

44 
	#DEF_PLUGIN_SET_POINTER
 "SëPoöãrPlugö"

	)

46 ˛as†
	cComm™dLöeTe°Ru¬î


48 
	mpublic
:

49 
	eOuçutTy≥


51 
OUTPUT_NORMAL
, 
	mOUTPUT_JUNIT


54 
RunAŒTe°s
(
ac
, c⁄° ** 
av
);

55 
RunAŒTe°s
(
ac
, ** 
av
);

56 
Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
*);

58 
	gvútuÆ
 ~
Comm™dLöeTe°Ru¬î
();

59 
runAŒTe°sMaö
();

61 
	g¥iv©e
:

62 
Te°Ouçut
* 
ouçut_
;

63 
JUnôTe°Ouçut
* 
	gjUnôOuçut_
;

64 
Comm™dLöeArgumíts
* 
	g¨gumíts_
;

66 
boﬁ
 
∑r£Argumíts
(
Te°Plugö
*);

67 
runAŒTe°s
();

68 
öôülizeTe°Run
();

69 
boﬁ
 
isVîbo£
();

70 
gëRïótCou¡
();

71 
Sim∂eSåög
 
gëGroupFûãr
();

72 
Sim∂eSåög
 
gëNameFûãr
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\JUnitTestOutput.h

28 #i‚de‡
D_JUnôTe°Ouçut_h


29 
	#D_JUnôTe°Ouçut_h


	)

31 
	~"Te°Ouçut.h
"

32 
	~"Sim∂eSåög.h
"

34 
	gJUnôTe°OuçutIm∂
;

35 
	gJUnôTe°Ca£Resu…Node
;

37 ˛as†
	cJUnôTe°Ouçut
: 
public
 
Te°Ouçut


39 
public
:

40 
JUnôTe°Ouçut
();

41 
	mvútuÆ
 ~
JUnôTe°Ouçut
();

43 
vútuÆ
 
¥ötTe°sSèπed
();

44 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

45 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

46 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

47 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

48 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

50 
vútuÆ
 
vîbo£
();

51 
vútuÆ
 
¥öt
(const *);

52 
vútuÆ
 
¥öt
();

53 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

54 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

56 
vútuÆ
 
Êush
();

58 
	m¥Ÿe˘ed
:

60 
JUnôTe°OuçutIm∂
* 
im∂_
;

61 
ª£tTe°GroupResu…
();

63 
vútuÆ
 
›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
);

64 
vútuÆ
 
wrôeTe°GroupToFûe
();

65 
vútuÆ
 
wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
);

66 
vútuÆ
 
˛o£Fûe
();

68 
vútuÆ
 
wrôeXmlHódî
();

69 
vútuÆ
 
wrôeTe°SuôeSummîy
();

70 
vútuÆ
 
wrôePr›îtõs
();

71 
vútuÆ
 
wrôeTe°Ca£s
();

72 
vútuÆ
 
wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
);

73 
vútuÆ
 
wrôeFûeEndög
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakAllocator.h

1 #i‚de‡
D_Mem‹yLókAŒoˇt‹_h


2 
	#D_Mem‹yLókAŒoˇt‹_h


	)

4 
	gMem‹yLókNode
;

6 ˛as†
	cMem‹yLókAŒoˇt‹


8 
	mpublic
:

9 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)=0;

10 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

12 
vútuÆ
 c⁄° * 
«me
()=0;

13 
vútuÆ
 c⁄° * 
Æloc_«me
()=0;

14 
vútuÆ
 c⁄° * 
‰ì_«me
()=0;

16 
vútuÆ
 
boﬁ
 
isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

17 
	mvútuÆ
 ~
	$Mem‹yLókAŒoˇt‹
()

21 
vútuÆ
 
boﬁ
 
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

22 
vútuÆ
 * 
	`ÆlocMem‹yLókNode
(
size_t
 
size
);

23 
vútuÆ
 
	`‰ìMem‹yLókNode
(* 
mem‹y
);

25 
	`£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

26 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAŒoˇt‹
();

27 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

29 
	`£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

30 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAºayAŒoˇt‹
();

31 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

33 
	`£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

34 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítMÆlocAŒoˇt‹
();

35 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

37 
¥iv©e
:

38 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAºayAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
cuºítMÆlocAŒoˇt‹
;

41 
	}
};

43 ˛as†
	cSènd¨dMÆlocAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


45 
public
:

46 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

47 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

49 c⁄° * 
«me
();

50 c⁄° * 
Æloc_«me
();

51 c⁄° * 
‰ì_«me
();

53 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

55 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

58 ˛as†
	cSènd¨dNewAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


60 
public
:

61 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

64 c⁄° * 
«me
();

65 c⁄° * 
Æloc_«me
();

66 c⁄° * 
‰ì_«me
();

68 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

71 ˛as†
	cSènd¨dNewAºayAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


73 
public
:

74 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

75 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

77 c⁄° * 
«me
();

78 c⁄° * 
Æloc_«me
();

79 c⁄° * 
‰ì_«me
();

81 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

84 ˛as†
	cNuŒUnknownAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


86 
public
:

87 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

88 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

90 c⁄° * 
«me
();

91 c⁄° * 
Æloc_«me
();

92 c⁄° * 
‰ì_«me
();

94 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetector.h

1 #i‚de‡
D_Mem‹yLókDëe˘‹_h


2 
	#D_Mem‹yLókDëe˘‹_h


	)

4 
	#MEM_LEAK_NONE
 "Nÿmem‹yÜók†wîêdëe˘ed."

	)

5 
	#MEM_LEAK_HEADER
 "Mem‹yÜók(sËfound.\n"

	)

6 
	#MEM_LEAK_LEAK
 "Lók size: %d AŒoˇãdát: %†™dÜöe: %d. Ty≥: \"%s\" C⁄ã¡: \"%.15s\"\n"

	)

7 
	#MEM_LEAK_FOOTER
 "TŸÆÇumbî o‡Àaks: "

	)

9 
	#MEM_LEAK_ALLOC_DEALLOC_MISMATCH
 "AŒoˇti⁄/dóŒoˇti⁄Åy≥ mism©ch\n"

	)

10 
	#MEM_LEAK_MEMORY_CORRUPTION
 "Mem‹y c‹ru±i⁄ (wrôã¿ouào‡bounds?)\n"

	)

11 
	#MEM_LEAK_ALLOC_LOCATION
 "áŒoˇãdáàfûe: %†löe: %d size: %dÅy≥: %s\n"

	)

12 
	#MEM_LEAK_DEALLOC_LOCATION
 " dóŒoˇãdáàfûe: %†löe: %dÅy≥: %s\n"

	)

13 
	#MEM_LEAK_DEALLOC_NON_ALLOCATED
 "DóŒoˇtögÇ⁄-Æloˇãd mem‹y\n"

	)

15 
	eMemLókPîiod


17 
	mmem_Àak_≥riod_Æl
,

18 
	mmem_Àak_≥riod_dißbÀd
,

19 
	mmem_Àak_≥riod_íabÀd
,

20 
	mmem_Àak_≥riod_checkög


23 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

25 
	~<°dlib.h
>

27 ˛as†
	cMem‹yLókFaûuª


29 
	mpublic
:

30 
vútuÆ
 ~
	$Mem‹yLókFaûuª
()

34 
vútuÆ
 
	`Áû
(* 
Áû_°rög
)=0;

35 
	}
};

37 
	sSim∂eSåögBuf„r


41 
	mSIMPLE_STRING_BUFFER_LEN
 = 4096

44 
Sim∂eSåögBuf„r
();

45 
˛ór
();

46 
add
(c⁄° * 
f‹m©
, ...);

47 * 
toSåög
();

49 
	m¥iv©e
:

50 
buf„r_
[
SIMPLE_STRING_BUFFER_LEN
];

51 
	mposôi⁄s_fûÀd_
;

54 
	sMem‹yLókDëe˘‹Node


56 
Mem‹yLókDëe˘‹Node
() :

57 
size_
(0), 
√xt_
(0)

61 
öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
);

63 
size_t
 
	msize_
;

64 * 
	mmem‹y_
;

65 c⁄° * 
	mfûe_
;

66 
	mlöe_
;

67 
Mem‹yLókAŒoˇt‹
* 
	mÆloˇt‹_
;

68 
MemLókPîiod
 
	m≥riod_
;

70 
	m¥iv©e
:

71 
‰õnd
 
Mem‹yLókDëe˘‹Li°
;

72 
Mem‹yLókDëe˘‹Node
* 
	m√xt_
;

75 
	sMem‹yLókDëe˘‹Li°


77 
Mem‹yLókDëe˘‹Li°
() :

78 
hód_
(0)

81 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

82 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

84 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

85 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
node
,

86 
MemLókPîiod
 
≥riod
);

87 
Mem‹yLókDëe˘‹Node
* 
gëLókFrom
(Mem‹yLókDëe˘‹Node* 
node
,

88 
MemLókPîiod
 
≥riod
);

90 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

91 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

92 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

94 
boﬁ
 
isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
);

96 
	m¥iv©e
:

97 
Mem‹yLókDëe˘‹Node
* 
hód_
;

100 
	sMem‹yLókDëe˘‹TabÀ


102 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

104 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

105 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

107 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

108 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

110 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

111 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
Àak
,

112 
MemLókPîiod
 
≥riod
);

114 
	m¥iv©e
:

115 
hash
(* 
mem‹y
);

119 
	mhash_¥ime
 = 
MEMORY_LEAK_HASH_TABLE_SIZE


121 
Mem‹yLókDëe˘‹Li°
 
	mèbÀ_
[
hash_¥ime
];

124 ˛as†
	cMem‹yLókDëe˘‹


126 
	mpublic
:

127 
Mem‹yLókDëe˘‹
();

128 ~
	$Mem‹yLókDëe˘‹
()

132 
	`öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
);

134 
	`íabÀ
();

135 
	`dißbÀ
();

137 
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

138 
	`íabÀAŒoˇti⁄Ty≥Checkög
();

140 
	`°¨tCheckög
();

141 
	`°›Checkög
();

143 c⁄° * 
	`ªp‹t
(
MemLókPîiod
 
≥riod
);

144 
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

145 
	`tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
);

146 
	`˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

148 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
);

149 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
,

150 c⁄° * 
fûe
, 
löe
);

151 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
);

152 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

153 * 
	`ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

155 
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
);

158 
mem‹y_c‹ru±i⁄_buf„r_size
 = 3

159 
	}
};

160 
	g¥iv©e
:

161 
Mem‹yLókFaûuª
* 
ªp‹ãr_
;

162 
MemLókPîiod
 
	gcuºít_≥riod_
;

163 
Sim∂eSåögBuf„r
 
	gouçut_buf„r_
;

164 
Mem‹yLókDëe˘‹TabÀ
 
	gmem‹yTabÀ_
;

165 
boﬁ
 
	gdoAŒoˇti⁄Ty≥Checkög_
;

167 
boﬁ
 
vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

168 
boﬁ
 
m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
);

170 
°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
);

171 
C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
);

172 
ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
,

173 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

174 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

175 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
);

177 
size_t
 
sizeOfMem‹yWôhC‹ru±i⁄Info
(size_à
size
);

178 
Mem‹yLókDëe˘‹Node
* 
gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
size
);

180 * 
ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

182 
addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
);

183 
checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h

18 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


19 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


20 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

22 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

26 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


27 
	#CPPUTEST_USE_MALLOC_MACROS
 1

	)

29 
	~<°dlib.h
>

31 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

32 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

34 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

35 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

36 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

37 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h

28 
	~<°dlib.h
>

30 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


31 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


32 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

34 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

38 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


39 
	#CPPUTEST_USE_NEW_MACROS
 1

	)

41 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


42 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


43 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

45 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

49 #i‡
CPPUTEST_USE_STD_CPP_LIB


51 
	~<√w
>

53 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

54 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

55 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

56 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

59 * 
›î©‹
 
	`√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

60 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

61 * 
›î©‹
 
	`√w
(
size_t
 
size
);

62 * 
›î©‹
 
√w
[](
size_t
 
size
);

65 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

68 
	~"Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

69 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h

28 #i‚de‡
D_Mem‹yLókW¨nögPlugö_h


29 
	#D_Mem‹yLókW¨nögPlugö_h


	)

31 
	~"Te°Plugö.h
"

42 
	#IGNORE_ALL_LEAKS_IN_TEST
(Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ign‹eAŒLóksInTe°
();

	)

43 
	#EXPECT_N_LEAKS
(
n
Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ex≥˘LóksInTe°
“);

	)

46 
	~"Te°H¨√ss_c.h
"

49 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


51 #unde‡
√w


53 #i‡
CPPUTEST_USE_STD_CPP_LIB


55 
	~<√w
>

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

58 
›î©‹
 
	$dñëe
(* 
mem
Ë
	`throw
();

59 
›î©‹
 
dñëe
[](* 
mem
Ë
	`throw
();

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

65 
›î©‹
 
	`dñëe
(* 
mem
);

66 
›î©‹
 
dñëe
[](* 
mem
);

70 #i‡
CPPUTEST_USE_NEW_MACROS


71 
	~"Mem‹yLókDëe˘‹NewMa¸os.h
"

76 
˛ass
 
Mem‹yLókDëe˘‹
;

78 ˛as†
	cMem‹yLókW¨nögPlugö
: 
public
 
Te°Plugö


80 
public
:

81 
	`Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

82 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
 = 0);

83 
vútuÆ
 ~
	`Mem‹yLókW¨nögPlugö
();

85 
vútuÆ
 
	`¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

86 
vútuÆ
 
	`po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

88 
vútuÆ
 c⁄° * 
	`FöÆRï‹t
(
toBeDñëedLóks
 = 0);

90 
	`ign‹eAŒLóksInTe°
();

91 
	`ex≥˘LóksInTe°
(
n
);

93 
Mem‹yLókDëe˘‹
* 
	`gëMem‹yLókDëe˘‹
();

94 
Mem‹yLókW¨nögPlugö
* 
	`gëFú°Plugö
();

96 
Mem‹yLókDëe˘‹
* 
	`gëGlobÆDëe˘‹
();

97 
¥iv©e
:

98 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹_
;

99 
boﬁ
 
ign‹eAŒW¨nögs_
;

100 
ex≥˘edLóks_
;

101 
ÁûuªCou¡_
;

103 
Mem‹yLókW¨nögPlugö
* 
fú°Plugö_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\PlatformSpecificFunctions.h

28 #i‚de‡
PLATFORMSPECIFICFUNCTIONS_H_


29 
	#PLATFORMSPECIFICFUNCTIONS_H_


	)

46 
GëPœtf‹mS≥cificTimeInMûlis
();

47 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
)());

49 c⁄° * 
GëPœtf‹mS≥cificTimeSåög
();

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
)());

53 
Pœtf‹mS≥cificAtoI
(c⁄° *
°r
);

54 
size_t
 
Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
);

55 * 
Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
);

56 * 
Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
);

57 * 
Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

58 
Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
);

59 
Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

60 * 
Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
);

61 
Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
,

62 
va_li°
 
va_¨gs_li°
);

63 
Pœtf‹mS≥cificToLowî
(
c
);

66 
Pœtf‹mS≥cificFabs
(
d
);

67 
Pœtf‹mS≥cificAtExô
((*
func
)());

70 * 
	tPœtf‹mS≥cificFûe
;

72 
Pœtf‹mS≥cificFûe
 
Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
,

73 c⁄° * 
Êag
);

74 
Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
);

75 
Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
);

77 
Pœtf‹mS≥cificPutch¨
(
c
);

78 
Pœtf‹mS≥cificFlush
();

81 * 
Pœtf‹mS≥cificMÆloc
(
size_t
 
size
);

82 * 
Pœtf‹mS≥cificRóŒoc
(* 
mem‹y
, 
size_t
 
size
);

83 
Pœtf‹mS≥cificFªe
(* 
mem‹y
);

84 * 
Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
);

85 * 
Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\SimpleString.h

38 #i‚de‡
D_Sim∂eSåög_h


39 
	#D_Sim∂eSåög_h


	)

41 
	~<°d¨g.h
>

42 
	~<°ddef.h
>

44 
˛ass
 
	gSim∂eSåögCﬁÀ˘i⁄
;

45 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

47 ˛as†
	cSim∂eSåög


49 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

50 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

52 
	mpublic
:

53 
Sim∂eSåög
(c⁄° *
vÆue
 = "");

54 
Sim∂eSåög
(c⁄° *
vÆue
, 
size_t
 
ª≥©Cou¡
);

55 
Sim∂eSåög
(c⁄° Sim∂eSåög& 
Ÿhî
);

56 ~
Sim∂eSåög
();

58 
	mSim∂eSåög
& 
	m›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
);

59 
Sim∂eSåög
 
	m›î©‹
+(c⁄° 
	mSim∂eSåög
&);

60 
	mSim∂eSåög
& 
	m›î©‹
+=(c⁄° 
Sim∂eSåög
&);

61 
	mSim∂eSåög
& 
	m›î©‹
+=(const *);

63 
boﬁ
 
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

64 
boﬁ
 
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

65 
boﬁ
 
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

66 
boﬁ
 
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

67 
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
,

68 
Sim∂eSåögCﬁÀ˘i⁄
& 
outCﬁÀ˘i⁄
) const;

69 
boﬁ
 
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const;

71 
size_t
 
	$cou¡
(c⁄° 
Sim∂eSåög
& 
°r
) const;

73 
	`ª∂a˚
(
to
, 
wôh
);

74 
	`ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
);

76 
Sim∂eSåög
 
	$toLowî
() const;

77 
Sim∂eSåög
 
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const;

78 
	$c›yToBuf„r
(* 
buf„r
, 
size_t
 
buf„rSize
) const;

80 c⁄° *
	$asCh¨Såög
() const;

81 
size_t
 
	$size
() const;

83 
	`∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
ch
);

85 
Mem‹yLókAŒoˇt‹
* 
	`gëSåögAŒoˇt‹
();

86 
	`£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

88 * 
	`ÆlocSåögBuf„r
(
size_t
 
size
);

89 
	`dóŒocSåögBuf„r
(* 
°r
);

90 
¥iv©e
:

91 *
buf„r_
;

93 
Mem‹yLókAŒoˇt‹
* 
°rögAŒoˇt‹_
;

95 * 
	$gëEm±ySåög
() const;

98 ˛as†
	cSim∂eSåögCﬁÀ˘i⁄


100 
public
:

101 
	`Sim∂eSåögCﬁÀ˘i⁄
();

102 ~
	`Sim∂eSåögCﬁÀ˘i⁄
();

104 
	`Æloˇã
(
size_t
 
size
);

106 
size_t
 
	$size
() const;

107 
Sim∂eSåög
& 
›î©‹
[](
size_t
 
ödex
);

109 
¥iv©e
:

110 
Sim∂eSåög
* 
cﬁÀ˘i⁄_
;

111 
Sim∂eSåög
 
em±y_
;

112 
size_t
 
size_
;

114 
›î©‹
 =(
Sim∂eSåögCﬁÀ˘i⁄
&);

115 
	`Sim∂eSåögCﬁÀ˘i⁄
(
Sim∂eSåögCﬁÀ˘i⁄
&);

118 
Sim∂eSåög
 
	`SåögFrom
(
boﬁ
 
vÆue
);

119 
Sim∂eSåög
 
	`SåögFrom
(* 
vÆue
);

120 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

121 
Sim∂eSåög
 
	`SåögFrom
(c⁄° *
vÆue
);

122 
Sim∂eSåög
 
	`SåögFromOrNuŒ
(c⁄° * 
vÆue
);

123 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

124 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

125 
Sim∂eSåög
 
	`HexSåögFrom
(
vÆue
);

126 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
, 
¥ecisi⁄
 = 6);

127 
Sim∂eSåög
 
	`SåögFrom
(c⁄° Sim∂eSåög& 
Ÿhî
);

128 
Sim∂eSåög
 
	`SåögFromF‹m©
(c⁄° * 
f‹m©
, ...);

129 
Sim∂eSåög
 
	`VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
);

131 #i‡
CPPUTEST_USE_STD_CPP_LIB


133 #unde‡
√w


134 
	~<°rög
>

135 #i‡
CPPUTEST_USE_NEW_MACROS


136 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

139 
	~<°döt.h
>

141 
Sim∂eSåög
 
	`SåögFrom
(c⁄° 
°d
::
°rög
& 
Ÿhî
);

142 
Sim∂eSåög
 
	`SåögFrom
(
uöt32_t
);

143 
Sim∂eSåög
 
	`SåögFrom
(
uöt16_t
);

144 
Sim∂eSåög
 
	`SåögFrom
(
uöt8_t
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestFailure.h

38 #i‚de‡
D_Te°Faûuª_H


39 
	#D_Te°Faûuª_H


	)

41 
	~"Sim∂eSåög.h
"

43 
˛ass
 
	gUã°
;

44 
˛ass
 
	gTe°Ouçut
;

46 ˛as†
	cTe°Faûuª


49 
	mpublic
:

50 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

51 c⁄° 
Sim∂eSåög
& 
theMesßge
);

52 
Te°Faûuª
(
Uã°
*, c⁄° 
Sim∂eSåög
& 
theMesßge
);

53 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
);

54 
Te°Faûuª
(const TestFailure&);

55 
	mvútuÆ
 ~
Te°Faûuª
();

57 
vútuÆ
 
Sim∂eSåög
 
	$gëFûeName
() const;

58 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°Name
() const;

59 
vútuÆ
 
	$gëFaûuªLöeNumbî
() const;

60 
vútuÆ
 
Sim∂eSåög
 
	$gëMesßge
() const;

61 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°FûeName
() const;

62 
vútuÆ
 
	$gëTe°LöeNumbî
() const;

63 
boﬁ
 
	$isOutsideTe°Fûe
() const;

64 
boﬁ
 
	$isInHñ≥rFun˘i⁄
() const;

67 
¥Ÿe˘ed
:

69 
Sim∂eSåög
 
	`¸óãButWasSåög
(c⁄° Sim∂eSåög& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

70 
Sim∂eSåög
 
	`¸óãDif„ªn˚AtPosSåög
(c⁄° Sim∂eSåög& 
a˘uÆ
, 
posôi⁄
);

72 
Sim∂eSåög
 
ã°Name_
;

73 
Sim∂eSåög
 
fûeName_
;

74 
löeNumbî_
;

75 
Sim∂eSåög
 
ã°FûeName_
;

76 
ã°LöeNumbî_
;

77 
Sim∂eSåög
 
mesßge_
;

79 
Te°Faûuª
& 
›î©‹
=(const TestFailure&);

83 ˛as†
	cEquÆsFaûuª
: 
public
 
Te°Faûuª


85 
public
:

86 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

87 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

90 ˛as†
	cCheckEquÆFaûuª
 : 
public
 
Te°Faûuª


92 
public
:

93 
	`CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

96 ˛as†
	cC⁄èösFaûuª
: 
public
 
Te°Faûuª


98 
public
:

99 
	`C⁄èösFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

103 ˛as†
	cCheckFaûuª
 : 
public
 
Te°Faûuª


105 
public
:

106 
	`CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
);

109 ˛as†
	cFaûFaûuª
 : 
public
 
Te°Faûuª


111 
public
:

112 
	`FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
);

115 ˛as†
	cL⁄gsEquÆFaûuª
 : 
public
 
Te°Faûuª


117 
public
:

118 
	`L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

121 ˛as†
	cSåögEquÆFaûuª
 : 
public
 
Te°Faûuª


123 
public
:

124 
	`SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

127 ˛as†
	cSåögEquÆNoCa£Faûuª
 : 
public
 
Te°Faûuª


129 
public
:

130 
	`SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestHarness.h

28 #i‚de‡
D_Te°H¨√ss_h


29 
	#D_Te°H¨√ss_h


	)

37 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


38 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


39 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

41 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

45 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


46 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


47 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

49 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

57 
	#MEMORY_LEAK_HASH_TABLE_SIZE
 73

	)

71 
	~"Uã°.h
"

72 
	~"Uã°Ma¸os.h
"

73 
	~"Sim∂eSåög.h
"

74 
	~"Te°Resu….h
"

75 
	~"Te°Faûuª.h
"

76 
	~"Te°Plugö.h
"

77 
	~"Mem‹yLókW¨nögPlugö.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestHarness_c.h

38 #i‚de‡
D_Te°H¨√ss_c_h


39 
	#D_Te°H¨√ss_c_h


	)

41 
	#CHECK_EQUAL_C_INT
(
ex≥˘ed
,
a˘uÆ
) \

42 
	`CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

44 
	#CHECK_EQUAL_C_REAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
) \

45 
	`CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

47 
	#CHECK_EQUAL_C_CHAR
(
ex≥˘ed
,
a˘uÆ
) \

48 
	`CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

50 
	#CHECK_EQUAL_C_STRING
(
ex≥˘ed
,
a˘uÆ
) \

51 
	`CHECK_EQUAL_C_STRING_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

53 
	#FAIL_TEXT_C
(
ãxt
) \

54 
	`FAIL_TEXT_C_LOCATION
(
ãxt
,
__FILE__
,
__LINE__
)

	)

56 
	#FAIL_C
() \

57 
	`FAIL_C_LOCATION
(
__FILE__
,
__LINE__
)

	)

59 
	#CHECK_C
(
c⁄dôi⁄
) \

60 
	`CHECK_C_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
,
__LINE__
)

	)

63 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

64 c⁄° * 
fûeName
, 
löeNumbî
);

65 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

66 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

67 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

68 c⁄° * 
fûeName
, 
löeNumbî
);

69 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
,

70 c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
);

71 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

72 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

75 c⁄° * 
fûeName
, 
löeNumbî
);

77 
	~<°ddef.h
>

79 * 
˝puã°_mÆloc
(
size_t
 
size
);

80 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
);

81 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
);

82 
˝puã°_‰ì
(* 
buf„r
);

84 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

85 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
,

86 c⁄° * 
fûe
, 
löe
);

87 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
,

88 c⁄° * 
fûe
, 
löe
);

89 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

91 
˝puã°_mÆloc_£t_out_of_mem‹y
();

92 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestOutput.h

28 #i‚de‡
D_Te°Ouçut_h


29 
	#D_Te°Ouçut_h


	)

42 
˛ass
 
	gUã°
;

43 
˛ass
 
	gTe°Faûuª
;

44 
˛ass
 
	gTe°Resu…
;

46 ˛as†
	cTe°Ouçut


48 
	mpublic
:

49 
ex∂icô
 
Te°Ouçut
();

50 
	mvútuÆ
 ~
Te°Ouçut
();

52 
vútuÆ
 
¥ötTe°sSèπed
();

53 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

54 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

55 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

56 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

57 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

59 
vútuÆ
 
vîbo£
();

60 
vútuÆ
 
¥öt
(const *)=0;

61 
vútuÆ
 
¥öt
();

62 
vútuÆ
 
¥ötDoubÀ
();

63 
vútuÆ
 
¥ötHex
();

64 
vútuÆ
 
¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
);

65 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

66 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

68 
vútuÆ
 
Êush
();

70 
	m¥iv©e
:

72 
vútuÆ
 
¥ötProgªssIndiˇt‹
();

73 
¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

74 
¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

75 
¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
);

76 
¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
);

77 
¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
ã°Fûe
, 
löeNumbî
);

79 
Te°Ouçut
(const TestOutput&);

80 
	mTe°Ouçut
& 
	m›î©‹
=(c⁄° 
Te°Ouçut
&);

82 
	mdŸCou¡_
;

83 
boﬁ
 
	mvîbo£_
;

84 c⁄° * 
	m¥ogªssIndiˇti⁄_
;

87 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, const *);

88 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, );

98 ˛as†
	cC⁄sﬁeTe°Ouçut
: 
public
 
Te°Ouçut


100 
public
:

101 
ex∂icô
 
	$C⁄sﬁeTe°Ouçut
()

105 
vútuÆ
 ~
	$C⁄sﬁeTe°Ouçut
()

107 
	}
}

110 
vútuÆ
 
¥öt
(c⁄° * 
s
);

111 
vútuÆ
 
Êush
();

113 
	g¥iv©e
:

114 
C⁄sﬁeTe°Ouçut
(const ConsoleTestOutput&);

115 
	gC⁄sﬁeTe°Ouçut
& 
	g›î©‹
=(c⁄° 
C⁄sﬁeTe°Ouçut
&);

127 ˛as†
	cSåögBuf„rTe°Ouçut
: 
public
 
Te°Ouçut


129 
public
:

130 
ex∂icô
 
	$SåögBuf„rTe°Ouçut
()

134 
vútuÆ
 ~
	$SåögBuf„rTe°Ouçut
()

136 
	}
}

139 
	$¥öt
(c⁄° * 
s
)

141 
ouçut
 +
s
;

142 
	}
}

144 
	$Êush
()

146 
ouçut
 = "";

147 
	}
}

149 c⁄° 
	gSim∂eSåög
& 
	$gëOuçut
()

151  
ouçut
;

152 
	}
}

154 
	g¥iv©e
:

155 
Sim∂eSåög
 
ouçut
;

157 
SåögBuf„rTe°Ouçut
(const StringBufferTestOutput&);

158 
	gSåögBuf„rTe°Ouçut
& 
	g›î©‹
=(c⁄° 
SåögBuf„rTe°Ouçut
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestPlugin.h

36 #i‚de‡
D_Te°Plugö_h


37 
	#D_Te°Plugö_h


	)

39 
˛ass
 
	gUã°
;

40 
˛ass
 
	gTe°Resu…
;

42 ˛as†
	cTe°Plugö


44 
	mpublic
:

46 
Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
);

47 
	mvútuÆ
 ~
Te°Plugö
();

49 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

55 
	}
}

57 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

59  
Ál£
;

60 
	}
}

62 
vútuÆ
 
runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

63 
vútuÆ
 
runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

64 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
);

65 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
);

67 
vútuÆ
 
Te°Plugö
* 
addPlugö
(TestPlugin*);

68 
vútuÆ
 
Te°Plugö
* 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

69 
vútuÆ
 
Te°Plugö
* 
gëNext
();

71 
vútuÆ
 
dißbÀ
();

72 
vútuÆ
 
íabÀ
();

73 
vútuÆ
 
boﬁ
 
isE«bÀd
();

75 c⁄° 
	gSim∂eSåög
& 
gëName
();

76 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

78 
	g¥Ÿe˘ed
:

79 
Te°Plugö
(Te°Plugö* 
√xt_
);

81 
	g¥iv©e
:

82 
Te°Plugö
* 
√xt_
;

83 
Sim∂eSåög
 
	g«me_
;

84 
boﬁ
 
	gíabÀd_
;

95 
CµUTe°St‹e
(**
loˇti⁄
, *
vÆue
);

97 ˛as†
	cSëPoöãrPlugö
: 
public
 
Te°Plugö


99 
public
:

100 
SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
);

101 
	mvútuÆ
 ~
SëPoöãrPlugö
();

102 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

106 
	mMAX_SET
 = 1024

111 
	#UT_PTR_SET
(
a
, 
b
Ë{ 
	`CµUTe°St‹e
–(**)&a, *((**Ë&a));á = b; }

	)

115 ˛as†
	cNuŒTe°Plugö
: 
public
 
Te°Plugö


117 
public
:

119 
NuŒTe°Plugö
();

120 
	mvútuÆ
 ~
	$NuŒTe°Plugö
()

124 
vútuÆ
 
	`runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

125 
vútuÆ
 
	`runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

127 
NuŒTe°Plugö
* 
	`ö°™˚
();

128 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestRegistry.h

36 #i‚de‡
D_Te°Regi°ry_h


37 
	#D_Te°Regi°ry_h


	)

39 
	~"Sim∂eSåög.h
"

41 
˛ass
 
	gUã°
;

42 
˛ass
 
	gTe°Resu…
;

43 
˛ass
 
	gTe°Plugö
;

45 ˛as†
	cTe°Regi°ry


47 
	mpublic
:

48 
Te°Regi°ry
();

49 
	mvútuÆ
 ~
Te°Regi°ry
();

51 
vútuÆ
 
addTe°
(
Uã°
 *
ã°
);

52 
vútuÆ
 
unDoLa°AddTe°
();

53 
vútuÆ
 
cou¡Te°s
();

54 
vútuÆ
 
runAŒTe°s
(
Te°Resu…
& 
ªsu…
);

55 
vútuÆ
 
«meFûãr
(
Sim∂eSåög
);

56 
vútuÆ
 
groupFûãr
(
Sim∂eSåög
);

58 
vútuÆ
 
ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
);

59 
vútuÆ
 
ª£tPlugös
();

60 
vútuÆ
 
Te°Plugö
* 
gëFú°Plugö
();

61 
vútuÆ
 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

64 
Sim∂eSåög
 
gëGroupFûãr
();

65 
Sim∂eSåög
 
gëNameFûãr
();

67 
vútuÆ
 
Uã°
* 
gëFú°Te°
();

68 
vútuÆ
 
Uã°
* 
gëLa°Te°
();

69 
vútuÆ
 
Uã°
* 
gëTe°WôhNext
(Uã°* 
ã°
);

71 
Te°Regi°ry
* 
gëCuºítRegi°ry
();

72 
vútuÆ
 
£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
);

73 
˛ónup
();

74 
	m¥iv©e
:

76 
boﬁ
 
ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
);

77 
boﬁ
 
ídOfGroup
(
Uã°
* 
ã°
);

79 
Uã°
 * 
	mã°s_
;

80 
Sim∂eSåög
* 
	m«meFûãr_
;

81 
Sim∂eSåög
* 
	mgroupFûãr_
;

82 
Te°Plugö
* 
	mfú°Plugö_
;

83 
Te°Regi°ry
* 
	mcuºítRegi°ry_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestResult.h

38 #i‚de‡
D_Te°Resu…_h


39 
	#D_Te°Resu…_h


	)

41 
˛ass
 
	gTe°Faûuª
;

42 
˛ass
 
	gTe°Ouçut
;

43 
˛ass
 
	gUã°
;

45 ˛as†
	cTe°Resu…


47 
	mpublic
:

48 
Te°Resu…
(
Te°Ouçut
&);

49 
	mvútuÆ
 ~
Te°Resu…
();

51 
vútuÆ
 
ã°sSèπed
();

52 
vútuÆ
 
ã°sEnded
();

53 
vútuÆ
 
cuºítGroupSèπed
(
Uã°
* 
ã°
);

54 
vútuÆ
 
cuºítGroupEnded
(
Uã°
* 
ã°
);

55 
vútuÆ
 
cuºítTe°Sèπed
(
Uã°
* 
ã°
);

56 
vútuÆ
 
cuºítTe°Ended
(
Uã°
* 
ã°
);

58 
vútuÆ
 
cou¡Te°
();

59 
vútuÆ
 
cou¡Run
();

60 
vútuÆ
 
cou¡Check
();

61 
vútuÆ
 
cou¡FûãªdOut
();

62 
vútuÆ
 
cou¡Ign‹ed
();

63 
vútuÆ
 
addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
);

64 
vútuÆ
 
¥öt
(c⁄° * 
ãxt
);

65 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

67 
	$gëTe°Cou¡
() const

69  
ã°Cou¡_
;

71 
	$gëRunCou¡
() const

73  
runCou¡_
;

74 
	}
}

75 
	$gëCheckCou¡
() const

77  
checkCou¡_
;

78 
	}
}

79 
	$gëFûãªdOutCou¡
() const

81  
fûãªdOutCou¡_
;

82 
	}
}

83 
	$gëIgn‹edCou¡
() const

85  
ign‹edCou¡_
;

86 
	}
}

87 
	$gëFaûuªCou¡
() const

89  
ÁûuªCou¡_
;

90 
	}
}

92 
	$gëTŸÆExecuti⁄Time
() const;

93 
	`£tTŸÆExecuti⁄Time
(
exTime
);

95 
	$gëCuºítTe°TŸÆExecuti⁄Time
() const;

96 
	$gëCuºítGroupTŸÆExecuti⁄Time
() const;

97 
¥iv©e
:

99 
Te°Ouçut
& 
ouçut_
;

100 
ã°Cou¡_
;

101 
runCou¡_
;

102 
checkCou¡_
;

103 
ÁûuªCou¡_
;

104 
fûãªdOutCou¡_
;

105 
ign‹edCou¡_
;

106 
tŸÆExecuti⁄Time_
;

107 
timeSèπed_
;

108 
cuºítTe°TimeSèπed_
;

109 
cuºítTe°TŸÆExecuti⁄Time_
;

110 
cuºítGroupTimeSèπed_
;

111 
cuºítGroupTŸÆExecuti⁄Time_
;

112 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestTestingFixture.h

28 #i‚de‡
D_Te°Te°ögFixtuª_H


29 
	#D_Te°Te°ögFixtuª_H


	)

31 ˛as†
	cTe°Te°ögFixtuª


33 
	mpublic
:

35 
	$Te°Te°ögFixtuª
()

37 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

38 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

39 
gíTe°_
 = 
√w
 
	`ExecFun˘i⁄Te°
();

40 
ªgi°ry_
 = 
√w
 
	`Te°Regi°ry
();

42 
ªgi°ry_
->
	`£tCuºítRegi°ry
(registry_);

43 
ªgi°ry_
->
	`addTe°
(
gíTe°_
);

47 
vútuÆ
 ~
	$Te°Te°ögFixtuª
()

49 
ªgi°ry_
->
	`£tCuºítRegi°ry
(0);

50 
dñëe
 
ªgi°ry_
;

51 
dñëe
 
ªsu…_
;

52 
dñëe
 
ouçut_
;

53 
dñëe
 
gíTe°_
;

54 
	}
}

56 
£tTe°Fun˘i⁄
((*
ã°Fun˘i⁄
)())

58 
gíTe°_
->
ã°Fun˘i⁄_
 = 
ã°Fun˘i⁄
;

59 
	}
}

61 
£tSëup
((*
£tupFun˘i⁄
)())

63 
gíTe°_
->
£tup_
 = 
£tupFun˘i⁄
;

64 
	}
}

66 
£tTórdown
((*
ã¨downFun˘i⁄
)())

68 
gíTe°_
->
ã¨down_
 = 
ã¨downFun˘i⁄
;

69 
	}
}

71 
	$runAŒTe°s
()

73 
ªgi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

74 
	}
}

76 
	$gëFaûuªCou¡
()

78  
ªsu…_
->
	`gëFaûuªCou¡
();

79 
	}
}

81 
	$as£πPrötC⁄èös
(c⁄° 
Sim∂eSåög
& 
c⁄èös
)

83 
	`as£πPrötC⁄èös
(
ouçut_
, 
c⁄èös
);

84 
	}
}

86 
	$as£πPrötC⁄èös
(
SåögBuf„rTe°Ouçut
* 
ouçut
,

87 c⁄° 
Sim∂eSåög
& 
c⁄èös
)

89 i‡(
ouçut
->
	`gëOuçut
().
	`c⁄èös
(
c⁄èös
)) ;

90 
Sim∂eSåög
 
	`mesßge
("\tActual <");

91 
mesßge
 +
ouçut
->
	`gëOuçut
().
	`asCh¨Såög
();

92 
mesßge
 += ">\n";

93 
mesßge
 += "\tdidÇot contain <";

94 
mesßge
 +
c⁄èös
.
	`asCh¨Såög
();

95 
mesßge
 += ">\n";

96 
	`FAIL
(
mesßge
.
	`asCh¨Såög
());

98 
	}
}

100 
Te°Regi°ry
* 
	gªgi°ry_
;

101 
ExecFun˘i⁄Te°
* 
	ggíTe°_
;

102 
SåögBuf„rTe°Ouçut
* 
	gouçut_
;

103 
Te°Resu…
 * 
	gªsu…_
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\Utest.h

31 #i‚de‡
D_UTe°_h


32 
	#D_UTe°_h


	)

34 
	~"Sim∂eSåög.h
"

45 
˛ass
 
	gTe°Resu…
;

46 
˛ass
 
	gTe°Plugö
;

47 
˛ass
 
	gTe°Faûuª
;

49 ˛as†
	cUã°


51 
	mpublic
:

52 
Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

53 
löeNumbî
);

54 
	mvútuÆ
 ~
Uã°
();

56 
vútuÆ
 
run
(
Te°Resu…
& 
ªsu…
);

57 
vútuÆ
 
runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

58 
vútuÆ
 
Sim∂eSåög
 
	$gëF‹m©ãdName
() const;

60 
vútuÆ
 
Uã°
* 
	`addTe°
(Uã°* 
ã°
);

61 
vútuÆ
 
Uã°
 *
	$gëNext
() const;

62 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

63 
vútuÆ
 
	`cou¡Te°s
();

65 
boﬁ
 
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const;

66 c⁄° 
Sim∂eSåög
 
	$gëName
() const;

67 c⁄° 
Sim∂eSåög
 
	$gëGroup
() const;

68 c⁄° 
Sim∂eSåög
 
	$gëFûe
() const;

69 
	$gëLöeNumbî
() const;

70 c⁄° 
vútuÆ
 *
	$gëProgªssIndiˇt‹
() const;

72 
vútuÆ
 
	`£tup
();

73 
vútuÆ
 
	`ã¨down
();

74 
vútuÆ
 
	`ã°Body
();

76 
Te°Resu…
 *
	`gëTe°Resu…
();

77 
Uã°
 *
	`gëCuºít
();

79 
vútuÆ
 
	`as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° *
c⁄dôi⁄Såög
, c⁄° *
fûeName
, 
löeNumbî
);

80 
vútuÆ
 
	`as£πC°rEquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

81 
vútuÆ
 
	`as£πC°rNoCa£EquÆ
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

82 
vútuÆ
 
	`as£πC°rC⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

83 
vútuÆ
 
	`as£πC°rNoCa£C⁄èös
(c⁄° *
ex≥˘ed
, c⁄° *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

84 
vútuÆ
 
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

85 
vútuÆ
 
	`as£πPoöãrsEquÆ
(*
ex≥˘ed
, *
a˘uÆ
, c⁄° *
fûeName
, 
löeNumbî
);

86 
vútuÆ
 
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° *
fûeName
, 
löeNumbî
);

87 
vútuÆ
 
	`Áû
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

89 
vútuÆ
 
	`¥öt
(c⁄° *
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

90 
vútuÆ
 
	`¥öt
(c⁄° 
Sim∂eSåög
 & 
ãxt
, c⁄° *
fûeName
, 
löeNumbî
);

92 
	`£tFûeName
(c⁄° *
fûeName
);

93 
	`£tLöeNumbî
(
löeNumbî
);

94 
	`£tGroupName
(c⁄° *
groupName
);

95 
	`£tTe°Name
(c⁄° *
ã°Name
);

97 
vútuÆ
 
	`exôCuºítTe°
();

98 
¥Ÿe˘ed
:

99 
vútuÆ
 
	`runO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

100 
vútuÆ
 
	`execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
 *
∂ugö
, 
Te°Resu…
 & 
ªsu…
);

101 
vútuÆ
 
boﬁ
 
	`execuãPœtf‹mS≥cificSëup
();

102 
vútuÆ
 
	`execuãPœtf‹mS≥cificTe°Body
();

103 
vútuÆ
 
	`execuãPœtf‹mS≥cificTórdown
();

104 
vútuÆ
 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

106 
	`Uã°
();

107 
	`Uã°
(c⁄° *
groupName
, c⁄° *
ã°Name
, c⁄° *
fûeName
, 
löeNumbî
, 
Uã°
 *
√xtTe°
);

109 
vútuÆ
 
Sim∂eSåög
 
	$gëMa¸oName
() const;

110 
¥iv©e
:

111 c⁄° *
group_
;

112 c⁄° *
«me_
;

113 c⁄° *
fûe_
;

114 
löeNumbî_
;

115 
Uã°
 *
√xt_
;

117 
	`£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

118 
	`£tCuºítTe°
(
Uã°
* 
ã°
);

120 
Uã°
* 
cuºítTe°_
;

121 
Te°Resu…
* 
ã°Resu…_
;

123 
	`ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
);

128 ˛as†
	cNuŒTe°
: 
public
 
Uã°


130 
public
:

131 
ex∂icô
 
	`NuŒTe°
();

132 
ex∂icô
 
	`NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
);

133 
vútuÆ
 ~
	`NuŒTe°
();

135 
	$ã°Body
()

139 
NuŒTe°
& 
	`ö°™˚
();

141 
vútuÆ
 
	`cou¡Te°s
();

142 
vútuÆ
 
Uã°
*
	$gëNext
() const;

143 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

144 
¥iv©e
:

146 
	`NuŒTe°
(c⁄° 
NuŒTe°
&);

147 
NuŒTe°
& 
›î©‹
=(const NullTest&);

149 
	}
};

153 ˛as†
	cExecFun˘i⁄Te°
: 
public
 
Uã°


155 
public
:

156 (*
£tup_
)();

157 (*
	mã¨down_
)();

158 (*
	mã°Fun˘i⁄_
)();

159 
ExecFun˘i⁄Te°
((*
£t
)(Ë0, (*
ã¨
)() = 0) :

160 
Uã°
("Gíîic", "Gíîic", "Gíîic", 1), 
£tup_
(
£t
), 
ã¨down_
(

161 
ã¨
), 
	$ã°Fun˘i⁄_
(0)

164 
	$ã°Body
()

166 i‡(
ã°Fun˘i⁄_
Ë
	`ã°Fun˘i⁄_
();

167 
	}
}

168 
vútuÆ
 
	$£tup
()

170 i‡(
£tup_
Ë
	`£tup_
();

171 
	}
}

172 
vútuÆ
 
	$ã¨down
()

174 i‡(
ã¨down_
Ë
	`ã¨down_
();

175 
	}
}

180 ˛as†
	cTe°In°ÆÀr


182 
	mpublic
:

183 
ex∂icô
 
Te°In°ÆÀr
(
Uã°
*, c⁄° * 
groupName
, c⁄° * 
ã°Name
,

184 c⁄° * 
fûeName
, 
löeNumbî
);

185 
	mvútuÆ
 ~
Te°In°ÆÀr
();

187 
unDo
();

189 
	m¥iv©e
:

191 
Te°In°ÆÀr
(const TestInstaller&);

192 
	mTe°In°ÆÀr
& 
	m›î©‹
=(c⁄° 
Te°In°ÆÀr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\UtestMacros.h

28 #i‚de‡
D_UTe°Ma¸os_h


29 
	#D_UTe°Ma¸os_h


	)

40 
	#TEST_GROUP_BASE
(
ã°Group
, 
ba£˛ass
) \

41 
exã∫Te°Group
##
ã°Group
 = 0; \

42 
TEST_GROUP_
##
CµUTe°Group
##
ã°Group
 : 
public
 
ba£˛ass


	)

44 
	#TEST_BASE
(
ã°Ba£Cœss
) \

45 
ã°Ba£Cœss
 : 
public
 
Uã°


	)

47 
	#TEST_GROUP
(
ã°Group
) \

48 
	`TEST_GROUP_BASE
(
ã°Group
, 
Uã°
)

	)

50 
	#TEST_SETUP
() \

51 
vútuÆ
 
	`£tup
()

	)

53 
	#TEST_TEARDOWN
() \

54 
vútuÆ
 
	`ã¨down
()

	)

56 
	#TEST
(
ã°Group
, 
ã°Name
) \

57 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

58 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

59 
	`ã°Body
(); } \

60 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

61 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

62 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

64 
	#IGNORE_TEST
(
ã°Group
, 
ã°Name
)\

65 
˛ass
 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

66 { 
public
: 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

67 
vútuÆ
 
	`run
 (
Te°Resu…
& 
ªsu…_∑ømëî
) { \

68 
ªsu…_∑ømëî
.
	`cou¡Ign‹ed
(); } \

69 
vútuÆ
 c⁄° * 
	`gëProgªssIndiˇt‹
() const { "!";} \

70 
¥Ÿe˘ed
: 
vútuÆ
 
Sim∂eSåög
 
	`gëMa¸oName
() const \

72 
public
: 
	`ã°BodyTh©NevîRuns
 (); } \

73 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

74 
Te°In°ÆÀr
 
TEST_
##
ã°Group
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##
_
##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

75 
IGNORE
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°BodyTh©NevîRuns
 ()

	)

77 
	#IMPORT_TEST_GROUP
(
ã°Group
) \

78 
exã∫Te°Group
##
ã°Group
;\

79 * 
p
##
ã°Group
 = &
exã∫Te°Group
##
	)
testGroup

83 
	#CHECK
(
c⁄dôi⁄
)\

84 
	`CHECK_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
, 
__LINE__
)

	)

86 
	#CHECK_LOCATION
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)\

87 { 
Uã°
::
	`gëCuºít
()->
	`as£πTrue
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
); }

	)

90 
	#CHECK_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

91 
	`CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

93 
	#CHECK_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

94 i‡((
ex≥˘ed
Ë!(
a˘uÆ
))\

97 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();\

98 
CheckEquÆFaûuª
 
	`_f
(
Uã°
::
	`gëCuºít
(), 
fûe
, 
löe
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)); \

99 
Uã°
::
	`gëTe°Resu…
()->
	`addFaûuª
(
_f
);\

101 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
(); \

104 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();

	)

108 
	#STRCMP_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

109 
	`STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

111 
	#STRCMP_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

112 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

114 
	#STRCMP_NOCASE_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

115 
	`STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

117 
	#STRCMP_NOCASE_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

118 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£EquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

120 
	#STRCMP_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

121 
	`STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

123 
	#STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

124 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rC⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

126 
	#STRCMP_NOCASE_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

127 
	`STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

129 
	#STRCMP_NOCASE_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

130 { 
Uã°
::
	`gëCuºít
()->
	`as£πC°rNoCa£C⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

133 
	#LONGS_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

134 
	`LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
, 
__LINE__
)

	)

136 
	#LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

137 { 
Uã°
::
	`gëCuºít
()->
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

139 
	#BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

140 
	`LONGS_EQUAL
((
ex≥˘ed
Ë& 0xff,(
a˘uÆ
Ë& 0xff)

	)

142 
	#POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

143 
	`POINTERS_EQUAL_LOCATION
((
ex≥˘ed
),(
a˘uÆ
), 
__FILE__
, 
__LINE__
)

	)

145 
	#POINTERS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

146 { 
Uã°
::
	`gëCuºít
()->
	`as£πPoöãrsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
); }

	)

149 
	#DOUBLES_EQUAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
)\

150 
	`DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

152 
	#DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
fûe
,
löe
)\

153 { 
Uã°
::
	`gëCuºít
()->
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûe
, 
löe
); }

	)

157 #i‚de‡
FAIL


158 
	#FAIL
(
ãxt
)\

159 
	`FAIL_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

161 
	#FAIL_LOCATION
(
ãxt
, 
fûe
, 
löe
)\

162 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

165 
	#FAIL_TEST
(
ãxt
)\

166 
	`FAIL_TEST_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

168 
	#FAIL_TEST_LOCATION
(
ãxt
, 
fûe
,
löe
)\

169 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

171 
	#UT_PRINT_LOCATION
(
ãxt
, 
fûe
, 
löe
) \

172 { 
Uã°
::
	`gëCuºít
()->
	`¥öt
(
ãxt
, 
fûe
, 
löe
); }

	)

174 
	#UT_PRINT
(
ãxt
) \

175 
	`UT_PRINT_LOCATION
(
ãxt
, 
__FILE__
, 
__LINE__
)

	)

177 
	#RUN_ALL_TESTS
(
ac
, 
av
Ë
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
◊c,áv)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\VirtualCall.h

1 #i‚de‡
D_VútuÆCÆl_H


2 
	#D_VútuÆCÆl_H


	)

4 
	#£nd
(
obj
,
msg
)\

5 ((
obj
)->
	`msg
(obj))

	)

7 
	#£nd1
(
obj
,
msg
,
¨g0
)\

8 ((
obj
)->
	`msg
((obj),(
¨g0
)))

	)

10 
	#£nd2
(
obj
,
msg
,
¨g0
,
¨g1
)\

11 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
)))

	)

13 
	#£nd3
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
)\

14 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
)))

	)

16 
	#£nd4
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
,
¨g3
)\

17 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
),(
¨g3
)))

	)

19 
	#vBöd
(
obj
,
msg
,
√wMëhod
)\

20 (
obj
->
msg
=&
√wMëhod
)

	)

22 
	#ˇ°ToDe°royî
(
Cœss
Ë(Cœss* (*)(Cœss*))

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\Gcc\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\StarterKit\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\Symbian\Platform.h

2 #i‚de‡
PLATFORM_H_


3 
	#PLATFORM_H_


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\VisualCpp\Platform.h

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4786)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\VisualCpp\stdint.h

20 #i‚de‡
_STDINT_H


21 
	#_STDINT_H


	)

22 
	#__√ed_wöt_t


	)

23 
	#__√ed_wch¨_t


	)

24 
	~<°ddef.h
>

27 sig√d 
	töt8_t
;

28 
	tuöt8_t
;

29 
	töt16_t
;

30 
	tuöt16_t
;

31 
	töt32_t
;

32 
	tuöt32_t
;

37 sig√d 
	töt_Àa°8_t
;

38 
	tuöt_Àa°8_t
;

39 
	töt_Àa°16_t
;

40 
	tuöt_Àa°16_t
;

41 
	töt_Àa°32_t
;

42 
	tuöt_Àa°32_t
;

50 sig√d 
	töt_Á°8_t
;

51 
	tuöt_Á°8_t
;

52 
	töt_Á°16_t
;

53 
	tuöt_Á°16_t
;

54 
	töt_Á°32_t
;

55 
	tuöt_Á°32_t
;

61 #i‚de‡
_INTPTR_T_DEFINED


62 
	#_INTPTR_T_DEFINED


	)

63 #ifde‡
_WIN64


64 
__öt64
 
	töçå_t
;

66 
	töçå_t
;

70 #i‚de‡
_UINTPTR_T_DEFINED


71 
	#_UINTPTR_T_DEFINED


	)

72 #ifde‡
_WIN64


73 
	t__öt64
 
	tuöçå_t
;

75 
	tuöçå_t
;

84 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_LIMIT_MACROS
)

87 
	#INT8_MIN
 (-128)

	)

88 
	#INT16_MIN
 (-32768)

	)

89 
	#INT32_MIN
 (-2147483647 - 1)

	)

90 
	#INT64_MIN
 (-9223372036854775807LL - 1)

	)

92 
	#INT8_MAX
 127

	)

93 
	#INT16_MAX
 32767

	)

94 
	#INT32_MAX
 2147483647

	)

95 
	#INT64_MAX
 9223372036854775807LL

	)

97 
	#UINT8_MAX
 0xf‡

	)

98 
	#UINT16_MAX
 0xfff‡

	)

99 
	#UINT32_MAX
 0xfffffff‡

	)

100 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

108 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

109 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

110 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

111 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

113 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

114 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

115 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

116 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

119 
	#INT_FAST8_MIN
 
INT8_MIN


	)

120 
	#INT_FAST16_MIN
 
INT16_MIN


	)

121 
	#INT_FAST32_MIN
 
INT32_MIN


	)

122 
	#INT_FAST64_MIN
 
INT64_MIN


	)

124 
	#INT_FAST8_MAX
 
INT8_MAX


	)

125 
	#INT_FAST16_MAX
 
INT16_MAX


	)

126 
	#INT_FAST32_MAX
 
INT32_MAX


	)

127 
	#INT_FAST64_MAX
 
INT64_MAX


	)

129 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

130 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

131 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

132 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

136 #ifde‡
_WIN64


137 
	#INTPTR_MIN
 
INT64_MIN


	)

138 
	#INTPTR_MAX
 
INT64_MAX


	)

139 
	#UINTPTR_MAX
 
UINT64_MAX


	)

141 
	#INTPTR_MIN
 
INT32_MIN


	)

142 
	#INTPTR_MAX
 
INT32_MAX


	)

143 
	#UINTPTR_MAX
 
UINT32_MAX


	)

147 
	#INTMAX_MIN
 
INT64_MIN


	)

148 
	#INTMAX_MAX
 
INT64_MAX


	)

149 
	#UINTMAX_MAX
 
UINT64_MAX


	)

152 
	#PTRDIFF_MIN
 
INTPTR_MIN


	)

153 
	#PTRDIFF_MAX
 
INTPTR_MAX


	)

155 
	#SIG_ATOMIC_MIN
 
INTPTR_MIN


	)

156 
	#SIG_ATOMIC_MAX
 
INTPTR_MAX


	)

158 
	#SIZE_MAX
 
UINTPTR_MAX


	)

160 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 0

	)

162 
	#WCHAR_MAX
 0xfff‡

	)

168 
	#WINT_MIN
 0

	)

169 
	#WINT_MAX
 0xfff‡

	)

175 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_CONSTANT_MACROS
)

190 
	#INT8_C
(
vÆ
Ë
	)
val

191 
	#UINT8_C
(
vÆ
Ë
	)
val

192 
	#INT16_C
(
vÆ
Ë
	)
val

193 
	#UINT16_C
(
vÆ
Ë
	)
val

195 
	#INT32_C
(
vÆ
Ë
	)
val

196 
	#UINT32_C
(
vÆ
ËvÆ##
U


	)

197 
	#INT64_C
(
vÆ
ËvÆ##
LL


	)

198 
	#UINT64_C
(
vÆ
ËvÆ##
ULL


	)

201 
	#INTMAX_C
(
vÆ
Ë
	`INT64_C
(vÆ)

	)

202 
	#UINTMAX_C
(
vÆ
Ë
	`UINT64_C
(vÆ)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢ame
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

14 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	gÁkeR™
 = 0;

7 
	~"CœssName.h
"

8 
vútuÆFun˘i⁄_ª«meThis_Áke
(
CœssName
*)

10 
ÁkeR™
 = 1;

14 
	$TEST_GROUP
(
CœssName
)

16 
CœssName
* 
aCœssName
;

18 
	`£tup
()

20 
aCœssName
 = 
	`CœssName_Cª©e
();

21 
ÁkeR™
 = 0;

22 
aCœssName
->
vútuÆFun˘i⁄_ª«meThis
 = 
vútuÆFun˘i⁄_ª«meThis_Áke
;

25 
	`ã¨down
()

27 
	`CœssName_De°roy
(
aCœssName
);

29 
	}
};

31 
	$TEST
(
CœssName
, 
Fake
)

33 
aCœssName
->
	`vútuÆFun˘i⁄_ª«meThis
(aClassName);

34 
	`LONGS_EQUAL
(1, 
ÁkeR™
);

35 
	}
}

37 
	$TEST
(
CœssName
, 
Cª©e
)

39 
	`FAIL
("Start here");

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢amePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"CœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

5 ˛as†
	cCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


7 
CPPUNIT_TEST_SUITE
(
CœssNameTe°
);

8 
CPPUNIT_TEST
(
ã°Cª©e
);

9 
CPPUNIT_TEST_SUITE_END
();

11 
CœssName
* 
	maCœssName
;

13 
	mpublic
:

15 
	$£tUp
()

17 
aCœssName
 = 
√w
 
	`CœssName
();

20 
	$ã¨Down
()

22 
dñëe
 
aCœssName
;

23 
	}
}

25 
	$ã°Cª©e
()

27 
	`CPPUNIT_FAIL
("Start here");

28 
	}
}

31 
CPPUNIT_TEST_SUITE_REGISTRATION
(
CœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeCœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

4 
	~"MockCœssName.h
"

6 ˛as†
	cMockCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


8 
CPPUNIT_TEST_SUITE
(
MockCœssNameTe°
);

9 
CPPUNIT_TEST
(
ã°Cª©e
);

10 
CPPUNIT_TEST_SUITE_END
();

12 
CœssName
* 
	maCœssName
;

13 
MockCœssName
* 
	mmockCœssName
;

15 
	mpublic
:

17 
	$£tUp
()

19 
mockCœssName
 = 
√w
 
	`MockCœssName
();

20 
aCœssName
 = 
mockCœssName
;

23 
	$ã¨Down
()

25 
dñëe
 
aCœssName
;

26 
	}
}

28 
	$ã°Cª©e
()

30 
	`CPPUNIT_FAIL
("Start here");

31 
	}
}

34 
CPPUNIT_TEST_SUITE_REGISTRATION
(
MockCœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriver.c

1 
	~"CœssName.h
"

2 
	~"IO.h
"

6 
	$CœssName_Cª©e
()

8 
	}
}

10 
	$CœssName_De°roy
()

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriver.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
	~<°döt.h
>

11 
CœssName_Cª©e
();

12 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssName
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssNamePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameTest.cpp

1 
	~"CœssName.h
"

4 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	$TEST_GROUP
(
CœssName
)

8 
CœssName
* 
aCœssName
;

10 
	`£tup
()

12 
aCœssName
 = 
√w
 
	`CœssName
();

14 
	`ã¨down
()

16 
dñëe
 
aCœssName
;

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameC.c

1 
	~"CœssName.h
"

4 
	$CœssName
()

6 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\InterfaceTest.cpp

1 
	~"CœssName.h
"

2 
	~"MockCœssName.h
"

5 
	~"CµUTe°/Te°H¨√ss.h
"

7 
	$TEST_GROUP
(
CœssName
)

9 
CœssName
* 
aCœssName
;

10 
MockCœssName
* 
mockCœssName
;

12 
	`£tup
()

14 
mockCœssName
 = 
√w
 
	`MockCœssName
();

15 
aCœssName
 = 
mockCœssName
;

17 
	`ã¨down
()

19 
dñëe
 
aCœssName
;

21 
	}
};

23 
	$TEST
(
CœssName
, 
Cª©e
)

25 
	`FAIL
("Start here");

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	#MAX_VARIABLE_NAME_LINE_PART
 10

	)

35 
	#MAX_VARIABLE_NAME_FILE_PART
 53

	)

36 
	#MAX_VARIABLE_NAME_SEPERATOR_PART
 1

	)

37 
	#MAX_VARIABLE_NAME_LENGTH
 
MAX_VARIABLE_NAME_FILE_PART
 + 
MAX_VARIABLE_NAME_SEPERATOR_PART
 + 
MAX_VARIABLE_NAME_LINE_PART


	)

39 
	sCodeRï‹tögAŒoˇti⁄Node


41 
	mv¨übÀName_
[
MAX_VARIABLE_NAME_LENGTH
 + 1];

42 * 
	mmem‹y_
;

43 
CodeRï‹tögAŒoˇti⁄Node
* 
	m√xt_
;

46 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
)

47 : 
	`codeRï‹tögLi°_
(
NULL
), 
	$öã∫ÆAŒoˇt‹_
(
öã∫ÆAŒoˇt‹
)

49 
	}
}

51 
	gCodeMem‹yRï‹tF‹m©ãr
::~
	$CodeMem‹yRï‹tF‹m©ãr
()

53 
	`˛órRï‹tög
();

54 
	}
}

56 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$˛órRï‹tög
()

58 
codeRï‹tögLi°_
) {

59 
CodeRï‹tögAŒoˇti⁄Node
* 
ﬁdNode
 = 
codeRï‹tögLi°_
;

60 
codeRï‹tögLi°_
 = codeRï‹tögLi°_->
√xt_
;

61 
öã∫ÆAŒoˇt‹_
->
	`‰ì_mem‹y
((*Ë
ﬁdNode
, 
__FILE__
, 
__LINE__
);

63 
	}
}

65 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
)

67 
CodeRï‹tögAŒoˇti⁄Node
* 
√wNode
 = (CodeRï‹tögAŒoˇti⁄Node*Ë
öã∫ÆAŒoˇt‹_
->
	`Æloc_mem‹y
((CodeRï‹tögAŒoˇti⁄Node), 
__FILE__
, 
__LINE__
);

68 
√wNode
->
mem‹y_
 = 
mem‹y
;

69 
√wNode
->
√xt_
 = 
√xt
;

70 
	`Pœtf‹mS≥cificSåNCpy
(
√wNode
->
v¨übÀName_
, 
v¨übÀName
, 
MAX_VARIABLE_NAME_LENGTH
);

71 
codeRï‹tögLi°_
 = 
√wNode
;

72 
	}
}

74 
CodeRï‹tögAŒoˇti⁄Node
* 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$födNode
(* 
mem‹y
)

77 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

78 
cuºít
 && cuºít->
mem‹y_
 !
mem‹y
) {

79 
cuºít
 = cuºít->
√xt_
;

81  
cuºít
;

82 
	}
}

84 
Sim∂eSåög
 
	$exåa˘FûeNameFromP©h
(c⁄° * 
fûe
)

86 c⁄° * 
fûeNameO∆y
 = 
fûe
 + 
	`Pœtf‹mS≥cificSåLí
(file);

87 
fûeNameO∆y
 !
fûe
 && *fileNameOnly != '/')

88 
fûeNameO∆y
--;

89 i‡(*
fûeNameO∆y
 == '/') fileNameOnly++;

90  
fûeNameO∆y
;

91 
	}
}

93 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
)

95 
Sim∂eSåög
 
fûeNameO∆y
 = 
	`exåa˘FûeNameFromP©h
(
fûe
);

96 
fûeNameO∆y
.
	`ª∂a˚
(".", "_");

98 
i
 = 1; i < 100000; i++) {

99 
Sim∂eSåög
 
v¨übÀName
 = 
	`SåögFromF‹m©
("%s_%d_%d", 
fûeNameO∆y
.
	`asCh¨Såög
(), 
löe
, 
i
);

100 i‡(!
	`v¨übÀExi°s
(
v¨übÀName
))

101  
v¨übÀName
;

104 
	}
}

106 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

108  
	`Pœtf‹mS≥cificSåCmp
(
Æloˇt‹
->
	`Æloc_«me
(), 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
()->Æloc_«me()Ë=0 || Pœtf‹mS≥cificSåCmp◊Œoˇt‹->Æloc_«me(), 
Sènd¨dNewAºayAŒoˇt‹
::defaultAllocator()->alloc_name()) == 0;

109 
	}
}

111 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
)

113 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

114 
cuºít
) {

115 i‡(
v¨übÀName
 =
cuºít
->
v¨übÀName_
)

116  
åue
;

117 
cuºít
 = cuºít->
√xt_
;

119  
Ál£
;

120 
	}
}

122 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, 
size_t
 
size
)

124 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

125  
	`SåögFromF‹m©
("ch¨* %†√w ch¨[%d]; /* usög %†*/", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
, 
Æloˇt‹
->
	`Æloc_«me
());

127  
	`SåögFromF‹m©
("void* %†mÆloc(%d);", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
);

128 
	}
}

130 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
)

132 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

133  
	`SåögFromF‹m©
("dñëê[] %s; /* usög %†© %s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
Æloˇt‹
->
	`‰ì_«me
(), 
fûe
, 
löe
);

135  
	`SåögFromF‹m©
("‰ì(%s); /*áà%s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

136 
	}
}

138 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

140 
	`˛órRï‹tög
();

141 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/\nTEST(%s_memoryReport, %s)\n{ /*át %s:%d */\n",

142 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCh¨Såög(),Åe°.
	`gëFûe
().asCh¨Såög(),Åe°.
	`gëLöeNumbî
()).asCharString());

143 
	}
}

145 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
&)

147 
ªsu…
->
	`¥öt
("}/*");

148 
	}
}

150 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

152 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/TEST_GROUP(%s_memoryReport)\n{\n};\n/*",

153 
ã°
.
	`gëGroup
().
	`asCh¨Såög
()).asCharString());

154 
	}
}

156 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

158 
Sim∂eSåög
 
v¨übÀName
 = 
	`¸óãV¨übÀNameFromFûeLöeInfo
(
fûe
, 
löe
);

159 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëAŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
size
).
	`asCh¨Såög
()).asCharString());

160 
	`addNodeToLi°
(
v¨übÀName
.
	`asCh¨Såög
(), 
mem‹y
, 
codeRï‹tögLi°_
);

161 
	}
}

163 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

165 
Sim∂eSåög
 
v¨übÀName
;

166 
CodeRï‹tögAŒoˇti⁄Node
* 
node
 = 
	`födNode
(
mem‹y
);

168 i‡(
mem‹y
 =
NULL
Ë
v¨übÀName
 = "NULL";

169 
v¨übÀName
 = 
node
->
v¨übÀName_
;

171 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëDóŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
fûe
, 
löe
).
	`asCh¨Såög
()).asCharString());

172 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gMem‹yRï‹tAŒoˇt‹
::
	$Mem‹yRï‹tAŒoˇt‹
(Ë: 
	`ªsu…_
(
NULL
), 
	`ªÆAŒoˇt‹_
(NULL), 
	$f‹m©ãr_
(
NULL
)

34 
	}
}

36 
	gMem‹yRï‹tAŒoˇt‹
::~
	$Mem‹yRï‹tAŒoˇt‹
()

38 
	}
}

40 c⁄° * 
Mem‹yRï‹tAŒoˇt‹
::
	$«me
()

42  
ªÆAŒoˇt‹_
->
	`«me
();

43 
	}
}

45 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_«me
()

47  
ªÆAŒoˇt‹_
->
	`Æloc_«me
();

48 
	}
}

50 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_«me
()

52  
ªÆAŒoˇt‹_
->
	`‰ì_«me
();

53 
	}
}

55 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

57 
ªÆAŒoˇt‹_
 = 
Æloˇt‹
;

58 
	}
}

60 
boﬁ
 
	gMem‹yRï‹tAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

62  
ªÆAŒoˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

63 
	}
}

65 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yRï‹tAŒoˇt‹
::
	$gëRólAŒoˇt‹
()

67  
ªÆAŒoˇt‹_
;

68 
	}
}

70 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

72 
ªsu…_
 = 
ªsu…
;

73 
	}
}

75 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

77 
f‹m©ãr_
 = 
f‹m©ãr
;

78 
	}
}

80 * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

82 * 
mem‹y
 = 
ªÆAŒoˇt‹_
->
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

83 i‡(
ªsu…_
 && 
f‹m©ãr_
)

84 
f‹m©ãr_
->
	`ªp‹t_Æloc_mem‹y
(
ªsu…_
, 
this
, 
size
, 
mem‹y
, 
fûe
, 
löe
);

85  
mem‹y
;

86 
	}
}

88 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

90 
ªÆAŒoˇt‹_
->
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 i‡(
ªsu…_
 && 
f‹m©ãr_
)

92 
f‹m©ãr_
->
	`ªp‹t_‰ì_mem‹y
(
ªsu…_
, 
this
, 
mem‹y
, 
fûe
, 
löe
);

93 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

34 
	}
}

36 
N‹mÆMem‹yRï‹tF‹m©ãr
::~
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

38 
	}
}

40 
N‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

42 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("TEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

43 
	}
}

45 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

47 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("ENDTEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

48 
	}
}

50 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

52 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög %†o‡size: %dÖoöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`Æloc_«me
(), 
size
, 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

53 
	}
}

55 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

57 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög %†o‡poöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`‰ì_«me
(), 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

58 
	}
}

60 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

62 c⁄° 
löe_size
 = 80;

64 
Sim∂eSåög
 
groupName
 = 
	`SåögFromF‹m©
("TEST GROUP(%s)", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
());

65 
begöPos
 = (
löe_size
/2Ë- (
groupName
.
	`size
()/2);

67 
Sim∂eSåög
 
	`löe
("-", 
begöPos
);

68 
löe
 +
groupName
;

69 
löe
 +
	`Sim∂eSåög
("-", 
löe_size
 -Üöe.
	`size
());

70 
löe
 += "\n";

71 
ªsu…
->
	`¥öt
(
löe
.
	`asCh¨Såög
());

72 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	gMem‹yRï‹ãrPlugö
::
	$Mem‹yRï‹ãrPlugö
()

34 : 
	`Te°Plugö
("Mem‹yRï‹ãrPlugö"), 
	$f‹m©ãr_
(
NULL
)

36 
	}
}

38 
	gMem‹yRï‹ãrPlugö
::~
	$Mem‹yRï‹ãrPlugö
()

40 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

41 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

42 
	}
}

44 
boﬁ
 
	gMem‹yRï‹ãrPlugö
::
	$∑r£Argumíts
(, c⁄° ** 
av
, 
ödex
)

46 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

47 i‡(
¨gumít
.
	`c⁄èös
("-pmemoryreport=")) {

48 
¨gumít
.
	`ª∂a˚
("-pmemoryreport=", "");

50 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

51 
f‹m©ãr_
 = 
	`¸óãMem‹yF‹m©ãr
(
¨gumít
);

52  
åue
;

54  
Ál£
;

55 
	}
}

57 
Mem‹yRï‹tF‹m©ãr
* 
	gMem‹yRï‹ãrPlugö
::
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

59 i‡(
ty≥
 == "normal") {

60  
√w
 
N‹mÆMem‹yRï‹tF‹m©ãr
;

62 i‡(
ty≥
 == "code") {

63  
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

65  
NULL
;

66 
	}
}

68 
	gMem‹yRï‹ãrPlugö
::
	$de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

70 
dñëe
 
f‹m©ãr
;

71 
	}
}

74 
	gMem‹yRï‹ãrPlugö
::
	$£tGlobÆMem‹yRï‹tAŒoˇt‹s
()

76 
mÆlocAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

77 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(&
mÆlocAŒoˇt‹
);

79 
√wAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

80 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(&
√wAŒoˇt‹
);

82 
√wAºayAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

83 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(&
√wAºayAŒoˇt‹
);

84 
	}
}

86 
	gMem‹yRï‹ãrPlugö
::
	$ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
()

88 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(Ë=&
√wAŒoˇt‹
)

89 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

91 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(Ë=&
√wAºayAŒoˇt‹
)

92 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
√wAºayAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

94 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
(Ë=&
mÆlocAŒoˇt‹
)

95 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
mÆlocAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

96 
	}
}

99 
	gMem‹yRï‹ãrPlugö
::
	$öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
)

101 
Æloˇt‹
->
	`£tF‹m©ãr
(
f‹m©ãr_
);

102 
Æloˇt‹
->
	`£tTe°Resu…
((&
ªsu…
));

103 
	}
}

105 
	gMem‹yRï‹ãrPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

107 i‡(
f‹m©ãr_
 =
NULL
) ;

109 
	`öôülizeAŒoˇt‹
(&
mÆlocAŒoˇt‹
, 
ªsu…
);

110 
	`öôülizeAŒoˇt‹
(&
√wAŒoˇt‹
, 
ªsu…
);

111 
	`öôülizeAŒoˇt‹
(&
√wAºayAŒoˇt‹
, 
ªsu…
);

113 
	`£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

115 i‡(
ã°
.
	`gëGroup
(Ë!
cuºítTe°Group_
) {

116 
f‹m©ãr_
->
	`ªp‹t_ã°group_°¨t
(&
ªsu…
, 
ã°
);

117 
cuºítTe°Group_
 = 
ã°
.
	`gëGroup
();

120 
f‹m©ãr_
->
	`ªp‹t_ã°_°¨t
(&
ªsu…
, 
ã°
);

121 
	}
}

123 
	gMem‹yRï‹ãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

125 i‡(
f‹m©ãr_
 =
NULL
) ;

127 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

128 
f‹m©ãr_
->
	`ªp‹t_ã°_íd
(&
ªsu…
, 
ã°
);

130 i‡(
ã°
.
	`gëNext
()->
	`gëGroup
(Ë!
cuºítTe°Group_
)

131 
f‹m©ãr_
->
	`ªp‹t_ã°group_íd
(&
ªsu…
, 
ã°
);

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	gMockA˘uÆFun˘i⁄CÆl
::
	$MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s
)

35 : 
	`ªp‹ãr_
(
ªp‹ãr
), 
	`°©e_
(
CALL_SUCCEED
), 
	$ÆlEx≥˘©i⁄s_
(
ÆlEx≥˘©i⁄s
)

37 
unfulfûÀdEx≥˘©i⁄s_
.
	`addUnfûfûÀdEx≥˘©i⁄s
(
ÆlEx≥˘©i⁄s
);

38 
	}
}

40 
	gMockA˘uÆFun˘i⁄CÆl
::~
	$MockA˘uÆFun˘i⁄CÆl
()

42 
	}
}

44 
Uã°
* 
MockA˘uÆFun˘i⁄CÆl
::
	$gëTe°
() const

46  
ªp‹ãr_
->
	`gëTe°ToFaû
();

47 
	}
}

49 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

51 
	`£tSèã
(
CALL_FAILED
);

52 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

53 
	}
}

55 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ˇŒHasSuc˚eded
()

57 
	`£tSèã
(
CALL_SUCCEED
);

58 
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

59 
unfulfûÀdEx≥˘©i⁄s_
.
	`ª£tEx≥˘©i⁄s
();

60 
	}
}

62 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

64 
	`£tName
(
«me
);

65 
	`£tSèã
(
CALL_IN_PROGESS
);

67 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(
«me
);

68 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

69 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
«me
, 
ÆlEx≥˘©i⁄s_
);

70 
	`ÁûTe°
(
Áûuª
);

71  *
this
;

74 
unfulfûÀdEx≥˘©i⁄s_
.
	`ˇŒWasMade
();

76 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

77 
	`ˇŒHasSuc˚eded
();

79  *
this
;

80 
	}
}

82 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
)

84 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
a˘uÆP¨amëî
);

86 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

87 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
a˘uÆP¨amëî
, 
ÆlEx≥˘©i⁄s_
);

88 
	`ÁûTe°
(
Áûuª
);

92 
unfulfûÀdEx≥˘©i⁄s_
.
	`∑ømëîWasPas£d
(
a˘uÆP¨amëî
.
	`gëName
());

93 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
())

94 
	`ˇŒHasSuc˚eded
();

95 
	}
}

97 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

99 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

100 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

101 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

102  *
this
;

103 
	}
}

105 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

107 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

108 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

109 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

110  *
this
;

111 
	}
}

113 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

115 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

116 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

117 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

118  *
this
;

119 
	}
}

121 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

123 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

124 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

125 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

126  *
this
;

127 
	}
}

129 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

131 i‡(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
Ë=
NULL
) {

132 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
ty≥
);

133 
	`ÁûTe°
(
Áûuª
);

134  *
this
;

136 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

137 
a˘uÆP¨amëî
.
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

138 
a˘uÆP¨amëî
.
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

139 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

140  *
this
;

141 
	}
}

143 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$isFulfûÀd
() const

145  
°©e_
 =
CALL_SUCCEED
;

146 
	}
}

148 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasFaûed
() const

150  
°©e_
 =
CALL_FAILED
;

151 
	}
}

153 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkEx≥˘©i⁄s
()

155 i‡(
°©e_
 !
CALL_IN_PROGESS
) ;

157 i‡(! 
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
())

158 
	`FAIL
("Actual call is inÖrogress. CheckingÉxpectations. ButÇo unfulfilledÉxpectations. Cannot happen.")

160 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

161 
	`ÁûTe°
(
Áûuª
);

162 
	}
}

164 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
)

166 i‡(
ﬁdSèã
 =
√wSèã
)

167 
	`FAIL
(
	`SåögFromF‹m©
("Sèã ch™gêtÿthêßmê°©e: %d.", 
√wSèã
).
	`asCh¨Såög
());

168 i‡(
ﬁdSèã
 =
CALL_FAILED
)

169 
	`FAIL
("State wasálready failed. Cannot change stateágain.");

170 
	}
}

172 
	gMockA˘uÆFun˘i⁄CÆl
::
	$£tSèã
(
A˘uÆCÆlSèã
 
°©e
)

174 
	`checkSèãC⁄si°ícy
(
°©e_
, 
°©e
);

175 
°©e_
 = 
°©e
;

176 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîsEquÆ
(c⁄° 
MockNamedVÆue
& 
p1
, c⁄° MockNamedVÆue& 
p2
)

33  
p1
.
	`equÆs
(
p2
);

34 
	}
}

36 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

38  
∑ømëî
.
	`toSåög
();

39 
	}
}

41 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$MockEx≥˘edFun˘i⁄CÆl
()

42 : 
	`wasCÆlMade_
(
åue
), 
	$∑ømëîs_
(
NULL
)

44 
	}
}

46 
	gMockEx≥˘edFun˘i⁄CÆl
::~
	$MockEx≥˘edFun˘i⁄CÆl
()

48 
∑ømëîs_
) {

49 
MockFun˘i⁄P¨amëîNode
* 
√xt
 = 
∑ømëîs_
->
√xt_
;

50 
dñëe
 
∑ømëîs_
->
d©a_
;

51 
dñëe
 
∑ømëîs_
;

52 
∑ømëîs_
 = 
√xt
;

54 
	}
}

56 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

58 
	`£tName
(
«me
);

59 
wasCÆlMade_
 = 
Ál£
;

60  *
this
;

61 
	}
}

64 
MockNamedVÆue
* 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$addNewP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

66 
MockEx≥˘edFun˘i⁄P¨amëî
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

67 
MockFun˘i⁄P¨amëîNode
* 
√wP¨amëîNode
 = 
√w
 
	`MockFun˘i⁄P¨amëîNode
(
√wP¨amëî
);

69 i‡(
∑ømëîs_
 =
NULL
)

70 
∑ømëîs_
 = 
√wP¨amëîNode
;

72 
MockFun˘i⁄P¨amëîNode
* 
œ°P¨amëî
 = 
∑ømëîs_
;

73 
œ°P¨amëî
->
√xt_
)ÜastParameter =ÜastParameter->next_;

74 
œ°P¨amëî
->
√xt_
 = 
√wP¨amëîNode
;

76  
√wP¨amëî
;

77 
	}
}

79 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

81 
MockNamedVÆue
* 
√wP¨amëî
 = 
	`addNewP¨amëî
(
«me
);

82 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

83  *
this
;

84 
	}
}

86 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

88 
MockNamedVÆue
* 
√wP¨amëî
 = 
	`addNewP¨amëî
(
«me
);

89 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

90  *
this
;

91 
	}
}

93 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

95 
MockNamedVÆue
* 
√wP¨amëî
 = 
	`addNewP¨amëî
(
«me
);

96 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

97  *
this
;

98 
	}
}

100 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

102 
MockNamedVÆue
* 
√wP¨amëî
 = 
	`addNewP¨amëî
(
«me
);

103 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

104  *
this
;

105 
	}
}

107 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

109 
MockNamedVÆue
* 
√wP¨amëî
 = 
	`addNewP¨amëî
(
«me
);

110 
√wP¨amëî
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

111 
√wP¨amëî
->
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

112  *
this
;

113 
	}
}

115 
MockNamedVÆue
* 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîByName
(c⁄° 
Sim∂eSåög
& 
«me
)

117 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
)

118 i‡(
p
->
d©a_
->
	`gëName
(Ë=
«me
)

119  
p
->
d©a_
;

120  
NULL
;

121 
	}
}

123 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîTy≥
(c⁄° 
Sim∂eSåög
& 
«me
)

125 
MockNamedVÆue
 * 
p
 = 
	`gëP¨amëîByName
(
«me
);

126  (
p
Ë?Ö->
	`gëTy≥
() : "";

127 
	}
}

129 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

131 
MockNamedVÆue
 * 
p
 = 
	`gëP¨amëîByName
(
«me
);

132  
p
 !
NULL
;

133 
	}
}

135 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

137 
MockNamedVÆue
* 
∑ømëî
 = 
	`gëP¨amëîByName
(
«me
);

138  (
∑ømëî
Ë? *∑ømëî : 
	`MockNamedVÆue
("");

139 
	}
}

141 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eP¨amëîsFulfûÀd
()

143 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
)

144 i‡(! 
p
->
d©a_
->
fulfûÀd_
)

145  
Ál£
;

146  
åue
;

147 
	}
}

149 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀd
()

151  
wasCÆlMade_
 && 
	`¨eP¨amëîsFulfûÀd
();

152 
	}
}

154 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒWasMade
()

156 
wasCÆlMade_
 = 
åue
;

157 
	}
}

159 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ª£tEx≥˘©i⁄
()

161 
wasCÆlMade_
 = 
Ál£
;

162 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
)

163 
p
->
d©a_
->
fulfûÀd_
 = 
Ál£
;

164 
	}
}

166 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
)

168 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
) {

169 i‡(
p
->
d©a_
->
	`gëName
(Ë=
«me
)

170 
p
->
d©a_
->
fulfûÀd_
 = 
åue
;

172 
	}
}

174 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîVÆueSåög
(c⁄° 
Sim∂eSåög
& 
«me
)

176 
MockNamedVÆue
 * 
p
 = 
	`gëP¨amëîByName
(
«me
);

177  (
p
Ë? 
	`SåögFrom
(*p) : "failed";

178 
	}
}

180 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

182 
MockNamedVÆue
 * 
p
 = 
	`gëP¨amëîByName
(
∑ømëî
.
	`gëName
());

183  (
p
Ë? 
	`∑ømëîsEquÆ
(*p, 
∑ømëî
Ë: 
Ál£
;

184 
	}
}

186 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒToSåög
()

188 
Sim∂eSåög
 
°r
;

189 
°r
 +
	`gëName
();

190 
°r
 += " -> ";

191 i‡(
∑ømëîs_
 =
NULL
)

192 
°r
 += "noÖarameters";

193 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
) {

194 
°r
 +
	`SåögFromF‹m©
("%†%s: <%s>", 
p
->
d©a_
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->d©a_->
	`gëName
().asCh¨Såög(), 
	`gëP¨amëîVÆueSåög
(p->data_->getName()).asCharString());

195 i‡(
p
->
√xt_
Ë
°r
 += ", ";

197  
°r
;

198 
	}
}

200 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$missögP¨amëîsToSåög
()

202 
Sim∂eSåög
 
°r
;

203 
MockFun˘i⁄P¨amëîNode
 * 
p
 = 
∑ømëîs_
;Ö;Ö =Ö->
√xt_
) {

204 i‡(! 
p
->
d©a_
->
fulfûÀd_
) {

205 i‡(
°r
 != "") str += ", ";

206 
°r
 +
	`SåögFromF‹m©
("%†%s", 
p
->
d©a_
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->d©a_->
	`gëName
().asCharString());

209  
°r
;

210 
	}
}

212 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

214  
fun˘i⁄Name
 =
	`gëName
();

215 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$MockEx≥˘edFun˘i⁄sLi°
(Ë: 
	$hód_
(
NULL
)

34 
	}
}

36 
MockEx≥˘edFun˘i⁄sLi°
::~
	$MockEx≥˘edFun˘i⁄sLi°
()

38 
hód_
) {

39 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

40 
dñëe
 
hód_
;

41 
hód_
 = 
√xt
;

43 
	}
}

45 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$size
() const

47 
cou¡
 = 0;

48 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

49 
cou¡
++;

50  
cou¡
;

51 
	}
}

53 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$isEm±y
() const

55  
	`size
() == 0;

56 
	}
}

59 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const

61 
cou¡
 = 0;

62 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

63 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
)Ë
cou¡
++;

64  
cou¡
;

66 
	}
}

68 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const

70 
cou¡
 = 0;

71 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

72 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()Ë
cou¡
++;

73  
cou¡
;

74 
	}
}

76 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasFulfûÀdEx≥˘©i⁄s
() const

78  (
	`size
(Ë- 
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
()) != 0;

79 
	}
}

81 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const

83  
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
() != 0;

84 
	}
}

86 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

89 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

90  
åue
;

91  
Ál£
;

92 
	}
}

94 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
)

96 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√wCÆl
 = 
√w
 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
ˇŒ
);

98 i‡(
hód_
 =
NULL
)

99 
hód_
 = 
√wCÆl
;

101 
MockEx≥˘edFun˘i⁄sLi°Node
* 
œ°CÆl
 = 
hód_
;

102 
œ°CÆl
->
√xt_
)ÜastCall =ÜastCall->next_;

103 
œ°CÆl
->
√xt_
 = 
√wCÆl
;

105 
	}
}

107 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

109 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

110 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

111 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

112 
	}
}

114 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

116 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

117 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

118 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

119 
	}
}

121 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

123 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

124 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

125 
	}
}

127 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

129 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

130 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

131 
p
->
ex≥˘edCÆl_
 = 
NULL
;

133 
	`¥u√Em±yNodeFromLi°
();

134 
	}
}

136 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
()

138 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

139 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

140 
p
->
ex≥˘edCÆl_
 = 
NULL
;

142 
	`¥u√Em±yNodeFromLi°
();

143 
	}
}

145 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

147 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

148 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(
«me
);

149 
	}
}

151 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
)

153 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

154 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëîWôhName
(
«me
))

155 
p
->
ex≥˘edCÆl_
 = 
NULL
;

156 
	`¥u√Em±yNodeFromLi°
();

157 
	}
}

159 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

161 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

162 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëî
(
∑ømëî
))

163 
p
->
ex≥˘edCÆl_
 = 
NULL
;

164 
	`¥u√Em±yNodeFromLi°
();

165 
	}
}

167 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

169 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

170 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

171 
	}
}

173 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄
()

175 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

176 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

177 
p
->
ex≥˘edCÆl_
 = 
NULL
;

181 
	`¥u√Em±yNodeFromLi°
();

182 
	}
}

184 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$¥u√Em±yNodeFromLi°
()

186 
MockEx≥˘edFun˘i⁄sLi°Node
* 
cuºít
 = 
hód_
;

187 
MockEx≥˘edFun˘i⁄sLi°Node
* 
¥evious
 = 
NULL
;

188 
MockEx≥˘edFun˘i⁄sLi°Node
* 
toBeDñëed
 = 
NULL
;

190 
cuºít
) {

191 i‡(
cuºít
->
ex≥˘edCÆl_
 =
NULL
) {

192 
toBeDñëed
 = 
cuºít
;

193 i‡(
¥evious
 =
NULL
)

194 
hód_
 = 
cuºít
 = cuºít->
√xt_
;

196 
cuºít
 = 
¥evious
->
√xt_
 = current->next_;

197 
dñëe
 
toBeDñëed
;

200 
¥evious
 = 
cuºít
;

201 
cuºít
 = cuºít->
√xt_
;

204 
	}
}

206 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
()

208 
hód_
) {

209 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

210 
dñëe
 
hód_
->
ex≥˘edCÆl_
;

211 
dñëe
 
hód_
;

212 
hód_
 = 
√xt
;

214 
	}
}

216 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ª£tEx≥˘©i⁄s
()

218 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

219 
p
->
ex≥˘edCÆl_
->
	`ª£tEx≥˘©i⁄
();

220 
	}
}

222 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ˇŒWasMade
()

224 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

225 
p
->
ex≥˘edCÆl_
->
	`ˇŒWasMade
();

226 
	}
}

228 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
)

230 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

231 
p
->
ex≥˘edCÆl_
->
	`∑ømëîWasPas£d
(
∑ømëîName
);

232 
	}
}

234 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const

236 
Sim∂eSåög
 
°r
;

237 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

238 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
(Ë=
wasFulfûÀd
) {

239 i‡(
°r
 != "") str += "\n";

240 
°r
 +
löePªfix
;

241 
°r
 +
p
->
ex≥˘edCÆl_
->
	`ˇŒToSåög
();

244 i‡(
°r
 == "") {

245 
°r
 +
löePªfix
;

246 
°r
 += "<none>";

248  
°r
;

250 
	}
}

252 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$unfulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

254  
	`fun˘i⁄sToSåög
(
löePªfix
, 
Ál£
);

255 
	}
}

257 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

259  
	`fun˘i⁄sToSåög
(
löePªfix
, 
åue
);

260 
	}
}

262 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$missögP¨amëîsToSåög
() const

264 
Sim∂eSåög
 
°r
;

265 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

266 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

267 i‡(
°r
 != "") str += "\n";

268 
°r
 +
p
->
ex≥˘edCÆl_
->
	`missögP¨amëîsToSåög
();

272 i‡(
°r
 == "")

273 
°r
 = "<none>";

274  
°r
;

275 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

33 
	gMockFaûuªRï‹ãr
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

35 
	`gëTe°ToFaû
()->
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

36 i‡(
¸ashOnFaûuª_
)

37 ((
MockFaûuªRï‹ãr
*Ë0x1)->
	`ÁûTe°
(
Áûuª
);

39 
	`gëTe°ToFaû
()->
	`exôCuºítTe°
();

40 
	}
}

42 
Uã°
* 
	gMockFaûuªRï‹ãr
::
	$gëTe°ToFaû
()

44  
Uã°
::
	`gëCuºít
();

45 
	}
}

47 
	gMockFaûuª
::
	$MockFaûuª
(
Uã°
* 
ã°
Ë: 
	`Te°Faûuª
(test, "Test failed with MockFailure withoutánÉrror! Something went seriously wrong.")

49 
	}
}

51 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

53 
mesßge_
 += "\tEXPECTED callsÅhat did NOT happen:\n";

54 
mesßge_
 +
ex≥˘©i⁄s
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

55 
mesßge_
 += "\n\tACTUAL callsÅhat did happen:\n";

56 
mesßge_
 +
ex≥˘©i⁄s
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

57 
	}
}

59 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

61 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

62 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
«me
, 
ex≥˘©i⁄s
);

64 
mesßge_
 += "\tEXPECTED callsÅhat DID NOT happenÑelatedÅo function: ";

65 
mesßge_
 +
«me
;

66 
mesßge_
 += "\n";

68 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

70 
mesßge_
 += "\n\tACTUAL callsÅhat DID happenÑelatedÅo function: ";

71 
mesßge_
 +
«me
;

72 
mesßge_
 += "\n";

74 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

75 
	}
}

78 
	gMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
::
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

80 
mesßge_
 = "Mock Failure: Expected call didÇot happen.\n";

81 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

82 
	}
}

84 
	gMockU√x≥˘edCÆlH≠≥√dFaûuª
::
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

86 
amou¡OfEx≥˘©i⁄s
 = 
ex≥˘©i⁄s
.
	`amou¡OfEx≥˘©i⁄sF‹
(
«me
);

87 i‡(
amou¡OfEx≥˘©i⁄s
)

88 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (%dthËˇŒÅÿfun˘i⁄: ", 
amou¡OfEx≥˘©i⁄s
+1);

90 
mesßge_
 = "Mock Failure: Unexpected callÅo function: ";

91 
mesßge_
 +
«me
;

92 
mesßge_
 += "\n";

93 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

94 
	}
}

96 
	gMockU√x≥˘edP¨amëîFaûuª
::
	$MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

98 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
;

99 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

100 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(
∑ømëî
.
	`gëName
());

102 i‡(
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`isEm±y
()) {

103 
mesßge_
 = "Mock Failure: UnexpectedÖarameterÇameÅo function \"";

104 
mesßge_
 +
fun˘i⁄Name
;

105 
mesßge_
 += "\": ";

106 
mesßge_
 +
∑ømëî
.
	`gëName
();

109 
mesßge_
 = "Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"";

110 
mesßge_
 +
∑ømëî
.
	`gëName
();

111 
mesßge_
 += "\"Åo function \"";

112 
mesßge_
 +
fun˘i⁄Name
;

113 
mesßge_
 += "\": <";

114 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

115 
mesßge_
 += ">";

118 
mesßge_
 += "\n";

119 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

121 
mesßge_
 += "\n\tACTUAL unexpectedÖarameterÖassedÅo function: ";

122 
mesßge_
 +
fun˘i⁄Name
;

123 
mesßge_
 += "\n";

125 
mesßge_
 += "\t\t";

126 
mesßge_
 +
∑ømëî
.
	`gëTy≥
();

127 
mesßge_
 += " ";

128 
mesßge_
 +
∑ømëî
.
	`gëName
();

129 
mesßge_
 += ": <";

130 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

131 
mesßge_
 += ">";

132 
	}
}

134 
	gMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
::
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

136 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

137 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

139 
mesßge_
 = "Mock Failure: ExpectedÖarameter for function \"";

140 
mesßge_
 +
fun˘i⁄Name
;

141 
mesßge_
 += "\" didÇot happen.\n";

143 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

145 
mesßge_
 += "\n\tMISSINGÖarametersÅhat didn't happen:\n";

146 
mesßge_
 += "\t\t";

147 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`missögP¨amëîsToSåög
();

148 
	}
}

150 
	gMockNoWayToCom∑ªCu°omTy≥Faûuª
::
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
Ë: 
	$MockFaûuª
(
ã°
)

152 
mesßge_
 = 
	`SåögFromF‹m©
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <%s>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
ty≥Name
.
	`asCh¨Såög
());

153 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gMockNamedVÆue
::
	$MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
Ë: 
	`«me_
“ame), 
	`ty≥_
("öt"), 
	$com∑øt‹_
(
NULL
)

34 
vÆue_
.
ötVÆue_
 = 0;

35 
	}
}

37 
	gMockNamedVÆue
::~
	$MockNamedVÆue
()

39 
	}
}

41 
MockNamedVÆue
::
	$£tVÆue
(
vÆue
)

43 
ty≥_
 = "int";

44 
vÆue_
.
ötVÆue_
 = 
vÆue
;

45 
	}
}

47 
	gMockNamedVÆue
::
	$£tVÆue
(
vÆue
)

49 
ty≥_
 = "double";

50 
vÆue_
.
doubÀVÆue_
 = 
vÆue
;

51 
	}
}

53 
	gMockNamedVÆue
::
	$£tVÆue
(* 
vÆue
)

55 
ty≥_
 = "void*";

56 
vÆue_
.
poöãrVÆue_
 = 
vÆue
;

57 
	}
}

59 
	gMockNamedVÆue
::
	$£tVÆue
(c⁄° * 
vÆue
)

61 
ty≥_
 = "char*";

62 
vÆue_
.
°rögVÆue_
 = 
vÆue
;

63 
	}
}

65 
	gMockNamedVÆue
::
	$£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
)

67 
ty≥_
 = 
ty≥
;

68 
vÆue_
.
obje˘PoöãrVÆue_
 = 
obje˘På
;

69 
	}
}

71 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëName
() const

73  
«me_
;

74 
	}
}

76 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëTy≥
() const

78  
ty≥_
;

79 
	}
}

81 
	gMockNamedVÆue
::
	$gëI¡VÆue
()

83 
	`STRCMP_EQUAL
("öt", 
ty≥_
.
	`asCh¨Såög
());

84  
vÆue_
.
ötVÆue_
;

85 
	}
}

87 
	gMockNamedVÆue
::
	$gëDoubÀVÆue
()

89 
	`STRCMP_EQUAL
("doubÀ", 
ty≥_
.
	`asCh¨Såög
());

90  
vÆue_
.
doubÀVÆue_
;

91 
	}
}

93 c⁄° * 
	gMockNamedVÆue
::
	$gëSåögVÆue
()

95 
	`STRCMP_EQUAL
("ch¨*", 
ty≥_
.
	`asCh¨Såög
());

96  
vÆue_
.
°rögVÆue_
;

97 
	}
}

99 * 
	gMockNamedVÆue
::
	$gëPoöãrVÆue
()

101 
	`STRCMP_EQUAL
("void*", 
ty≥_
.
	`asCh¨Såög
());

102  
vÆue_
.
poöãrVÆue_
;

103 
	}
}

105 * 
	gMockNamedVÆue
::
	$gëObje˘Poöãr
()

107  
vÆue_
.
obje˘PoöãrVÆue_
;

108 
	}
}

110 
	gMockNamedVÆue
::
	$£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
)

112 
com∑øt‹_
 = 
com∑øt‹
;

113 
	}
}

115 
boﬁ
 
	gMockNamedVÆue
::
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const

117 i‡(
ty≥_
 !
p
.ty≥_Ë 
Ál£
;

119 i‡(
ty≥_
 == "int")

120  
vÆue_
.
ötVÆue_
 =
p
.value_.intValue_;

121 i‡(
ty≥_
 == "char*")

122  
	`Sim∂eSåög
(
vÆue_
.
°rögVÆue_
Ë=Sim∂eSåög(
p
.value_.stringValue_);

123 i‡(
ty≥_
 == "void*")

124  
vÆue_
.
poöãrVÆue_
 =
p
.value_.pointerValue_;

125 i‡(
ty≥_
 == "double")

126  (
	`Pœtf‹mS≥cificFabs
(
vÆue_
.
doubÀVÆue_
 - 
p
.value_.doubleValue_) < 0.005);

128 i‡(
com∑øt‹_
)

129  
com∑øt‹_
->
	`isEquÆ
(
vÆue_
.
obje˘PoöãrVÆue_
, 
p
.value_.objectPointerValue_);

131  
Ál£
;

132 
	}
}

134 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$toSåög
() const

136 i‡(
ty≥_
 == "int")

137  
	`SåögFrom
(
vÆue_
.
ötVÆue_
);

138 i‡(
ty≥_
 == "char*")

139  
vÆue_
.
°rögVÆue_
;

140 i‡(
ty≥_
 == "void*")

141  
	`SåögFrom
(
vÆue_
.
poöãrVÆue_
);

142 i‡(
ty≥_
 == "double")

143  
	`SåögFrom
(
vÆue_
.
doubÀVÆue_
);

145 i‡(
com∑øt‹_
)

146  
com∑øt‹_
->
	`vÆueToSåög
(
vÆue_
.
obje˘PoöãrVÆue_
);

148  
	`SåögFromF‹m©
("Nÿcom∑øt‹ found f‹Åy≥: \"%s\"", 
ty≥_
.
	`asCh¨Såög
());

150 
	}
}

152 
	sMockNamedVÆueCom∑øt‹Rïosô‹yNode


154 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
, MockNamedVÆueCom∑øt‹Rïosô‹yNode* 
√xt
)

155 : 
«me_
(
«me
), 
com∑øt‹_
(
com∑øt‹
), 
√xt_
(
√xt
) {};

156 
Sim∂eSåög
 
	m«me_
;

157 
	mMockNamedVÆueCom∑øt‹
& 
	mcom∑øt‹_
;

158 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
	m√xt_
;

161 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$MockNamedVÆueCom∑øt‹Rïosô‹y
(Ë: 
	$hód_
(
NULL
)

164 
	}
}

166 
MockNamedVÆueCom∑øt‹Rïosô‹y
::~
	$MockNamedVÆueCom∑øt‹Rïosô‹y
()

168 
	`˛ór
();

169 
	}
}

171 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$˛ór
()

173 
hód_
) {

174 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
√xt
 = 
hód_
->
√xt_
;

175 
dñëe
 
hód_
;

176 
hód_
 = 
√xt
;

178 
	}
}

180 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

182 
hód_
 = 
√w
 
	`MockNamedVÆueCom∑øt‹Rïosô‹yNode
(
«me
, 
com∑øt‹
, head_);

183 
	}
}

185 
MockNamedVÆueCom∑øt‹
* 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
)

187 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

188 i‡(
p
->
«me_
 =
«me
Ë &p->
com∑øt‹_
;

189  
NULL
;;

190 
	}
}

192 
	gMockFun˘i⁄CÆl
::
	$MockFun˘i⁄CÆl
(Ë: 
	$com∑øt‹Rïosô‹y_
(
NULL
)

194 
	}
}

196 
MockFun˘i⁄CÆl
::~
	$MockFun˘i⁄CÆl
()

198 
	}
}

200 
MockFun˘i⁄CÆl
::
	$£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
)

202 
com∑øt‹Rïosô‹y_
 = 
ªposô‹y
;

203 
	}
}

205 
	gMockFun˘i⁄CÆl
::
	$£tName
(c⁄° 
Sim∂eSåög
& 
«me
)

207 
fun˘i⁄Name_
 = 
«me
;

208 
	}
}

210 
Sim∂eSåög
 
	gMockFun˘i⁄CÆl
::
	$gëName
() const

212  
fun˘i⁄Name_
;

213 
	}
}

215 
MockNamedVÆueCom∑øt‹
* 
	gMockFun˘i⁄CÆl
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const

217 i‡(
com∑øt‹Rïosô‹y_
)

218  
com∑øt‹Rïosô‹y_
->
	`gëCom∑øt‹F‹Ty≥
(
ty≥
);

219  
NULL
;

220 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	gMockSuµ‹t
::
	$MockSuµ‹t
(Ë: 
	`ªp‹ãr_
(&
deÁu…Rï‹ãr_
), 
	`ign‹eOthîCÆls_
(
Ál£
), 
	`íabÀd_
(
åue
), 
	$œ°A˘uÆFun˘i⁄CÆl_
(
NULL
)

36 
	}
}

38 
	gMockSuµ‹t
::~
	$MockSuµ‹t
()

40 
	}
}

42 
MockSuµ‹t
::
	$¸ashOnFaûuª
()

44 
ªp‹ãr_
->
	`¸ashOnFaûuª
();

45 
	}
}

47 
	gMockSuµ‹t
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

49 
ªp‹ãr_
 = (
ªp‹ãr
 !
NULL
Ë?Ñï‹ã∏: &
deÁu…Rï‹ãr_
;

50 
	}
}

52 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

54 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

55 
	}
}

57 
	gMockSuµ‹t
::
	$ªmoveAŒCom∑øt‹s
()

59 
com∑øt‹Rïosô‹y_
.
	`˛ór
();

60 
	}
}

62 
	gMockSuµ‹t
::
	$˛órEx≥˘©i⁄s
()

64 
dñëe
 
œ°A˘uÆFun˘i⁄CÆl_
;

65 
œ°A˘uÆFun˘i⁄CÆl_
 = 
NULL
;

66 
ex≥˘©i⁄s_
.
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

67 
ign‹eOthîCÆls_
 = 
Ál£
;

68 
	}
}

70 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

72 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

74 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
 = 
√w
 MockExpectedFunctionCall;

75 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

76 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

77 
ex≥˘©i⁄s_
.
	`addEx≥˘edCÆl
(
ˇŒ
);

78  *
ˇŒ
;

79 
	}
}

81 
MockA˘uÆFun˘i⁄CÆl
* 
	gMockSuµ‹t
::
	$¸óãA˘uÆFun˘i⁄CÆl
()

83 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ë
dñëe
ÜastActualFunctionCall_;

84 
œ°A˘uÆFun˘i⁄CÆl_
 = 
√w
 
	`MockA˘uÆFun˘i⁄CÆl
(
ªp‹ãr_
, 
ex≥˘©i⁄s_
);

85  
œ°A˘uÆFun˘i⁄CÆl_
;

86 
	}
}

88 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

90 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

92 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ëœ°A˘uÆFun˘i⁄CÆl_->
	`checkEx≥˘©i⁄s
();

94 i‡(!
ex≥˘©i⁄s_
.
	`hasEx≥˘©i⁄WôhName
(
fun˘i⁄Name
Ë&& 
ign‹eOthîCÆls_
) {

95  
MockIgn‹edCÆl
::
	`ö°™˚
();

98 
MockA˘uÆFun˘i⁄CÆl
* 
ˇŒ
 = 
	`¸óãA˘uÆFun˘i⁄CÆl
();

99 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

100 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

101  *
ˇŒ
;

102 
	}
}

104 
	gMockSuµ‹t
::
	$ign‹eOthîCÆls
()

106 
ign‹eOthîCÆls_
 = 
åue
;

107 
	}
}

109 
	gMockSuµ‹t
::
	$dißbÀ
()

111 
íabÀd_
 = 
Ál£
;

112 
	}
}

114 
	gMockSuµ‹t
::
	$íabÀ
()

116 
íabÀd_
 = 
åue
;

117 
	}
}

120 
boﬁ
 
	gMockSuµ‹t
::
	$ex≥˘edCÆlsLe·
()

122  
ex≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
();

123 
	}
}

125 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄s
()

127 i‡(
œ°A˘uÆFun˘i⁄CÆl_
 && !œ°A˘uÆFun˘i⁄CÆl_->
	`isFulfûÀd
()) {

128 i‡(! 
œ°A˘uÆFun˘i⁄CÆl_
->
	`hasFaûed
()) {

129 
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

132 i‡(
	`ex≥˘edCÆlsLe·
()) {

133 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
ªp‹ãr_
->
	`gëTe°ToFaû
(), 
ex≥˘©i⁄s_
);

134 
	`˛órEx≥˘©i⁄s
();

135 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

137 
	`˛órEx≥˘©i⁄s
();

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\OrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/OrdîedTe°.h
"

32 
OrdîedTe°
* 
	gOrdîedTe°
::
_‹dîedTe°sHód
 = 0;

34 
	gOrdîedTe°
::
	$OrdîedTe°
() :

35 
	$_√xtOrdîedTe°
(0)

37 
	}
}

39 
OrdîedTe°
::~
	$OrdîedTe°
()

41 
	}
}

43 
OrdîedTe°
::
	$gëLevñ
()

45  
_Àvñ
;

46 
	}
}

48 
	gOrdîedTe°
::
	$£tLevñ
(
Àvñ
)

50 
_Àvñ
 = 
Àvñ
;

51 
	}
}

53 
	gOrdîedTe°
::
	$£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
)

55 
_‹dîedTe°sHód
 = 
ã°
;

56 
	}
}

58 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëOrdîedTe°Hód
()

60  
_‹dîedTe°sHód
;

61 
	}
}

63 
boﬁ
 
	gOrdîedTe°
::
	$fú°OrdîedTe°
()

65  (
	`gëOrdîedTe°Hód
() == 0);

66 
	}
}

68 
OrdîedTe°
* 
	gOrdîedTe°
::
	$addOrdîedTe°
(
OrdîedTe°
* 
ã°
)

70 
Uã°
::
	`addTe°
(
ã°
);

71 
_√xtOrdîedTe°
 = 
ã°
;

72  
this
;

73 
	}
}

75 
	gOrdîedTe°
::
	$addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
)

77 
Te°Regi°ry
 *
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

79 i‡(
ªg
->
	`gëFú°Te°
()->
	`isNuŒ
(Ë|| 
	`gëOrdîedTe°Hód
()

80 =
ªg
->
	`gëFú°Te°
()Ëªg->
	`addTe°
(
ã°
);

81 
ªg
->
	`gëTe°WôhNext
(
	`gëOrdîedTe°Hód
())->
	`addTe°
(
ã°
);

83 
ã°
->
_√xtOrdîedTe°
 = 
	`gëOrdîedTe°Hód
();

84 
	`£tOrdîedTe°Hód
(
ã°
);

85 
	}
}

87 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëNextOrdîedTe°
()

89  
_√xtOrdîedTe°
;

90 
	}
}

92 
	gOrdîedTe°In°ÆÀr
::
	$OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
,

93 c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

94 
löeNumbî
, 
Àvñ
)

96 
ã°
->
	`£tTe°Name
(
ã°Name
);

97 
ã°
->
	`£tGroupName
(
groupName
);

98 
ã°
->
	`£tFûeName
(
fûeName
);

99 
ã°
->
	`£tLöeNumbî
(
löeNumbî
);

100 
ã°
->
	`£tLevñ
(
Àvñ
);

102 i‡(
OrdîedTe°
::
	`fú°OrdîedTe°
()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(
ã°
);

103 
	`addOrdîedTe°InOrdî
(
ã°
);

104 
	}
}

106 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
)

108 i‡(
ã°
->
	`gëLevñ
(Ë< 
OrdîedTe°
::
	`gëOrdîedTe°Hód
()->gëLevñ()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(

109 
ã°
);

110 
	`addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
ã°
);

111 
	}
}

113 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(

114 
OrdîedTe°
* 
ã°
)

116 
OrdîedTe°
* 
cuºít
 = OrdîedTe°::
	`gëOrdîedTe°Hód
();

117 
cuºít
->
	`gëNextOrdîedTe°
()) {

119 i‡(
cuºít
->
	`gëNextOrdîedTe°
()->
	`gëLevñ
(Ë> 
ã°
->getLevel()) {

120 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

121 
cuºít
->
	`addOrdîedTe°
(
ã°
);

124 
cuºít
 = cuºít->
	`gëNextOrdîedTe°
();

126 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

127 
cuºít
->
	`addOrdîedTe°
(
ã°
);

128 
	}
}

130 
	gOrdîedTe°In°ÆÀr
::~
	$OrdîedTe°In°ÆÀr
()

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\CommandLineArguments.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gComm™dLöeArgumíts
::
	$Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
) :

33 
	`ac_
(
ac
), 
	`av_
(
av
), 
	`vîbo£_
(
Ál£
), 
	`ª≥©_
(1), 
	`groupFûãr_
(""), 
	`«meFûãr_
(""), 
	$ouçutTy≥_
(
OUTPUT_ECLIPSE
)

35 
	}
}

37 
	gComm™dLöeArgumíts
::~
	$Comm™dLöeArgumíts
()

39 
	}
}

41 
boﬁ
 
Comm™dLöeArgumíts
::
	$∑r£
(
Te°Plugö
* 
∂ugö
)

43 
boﬁ
 
c‹ª˘P¨amëîs
 = 
åue
;

44 
i
 = 1; i < 
ac_
; i++) {

45 
Sim∂eSåög
 
¨gumít
 = 
av_
[
i
];

46 i‡(
¨gumít
 ="-v"Ë
vîbo£_
 = 
åue
;

47 i‡(
¨gumít
.
	`°¨tsWôh
("-r")Ë
	`SëRïótCou¡
(
ac_
, 
av_
, 
i
);

48 i‡(
¨gumít
.
	`°¨tsWôh
("-g")Ë
	`SëGroupFûãr
(
ac_
, 
av_
, 
i
);

49 i‡(
¨gumít
.
	`°¨tsWôh
("-n")Ë
	`SëNameFûãr
(
ac_
, 
av_
, 
i
);

50 i‡(
¨gumít
.
	`°¨tsWôh
("-o")Ë
c‹ª˘P¨amëîs
 = 
	`SëOuçutTy≥
(
ac_
, 
av_
, 
i
);

51 i‡(
¨gumít
.
	`°¨tsWôh
("-p")Ë
c‹ª˘P¨amëîs
 = 
∂ugö
->
	`∑r£AŒArgumíts
(
ac_
, 
av_
, 
i
);

52 
c‹ª˘P¨amëîs
 = 
Ál£
;

54 i‡(
c‹ª˘P¨amëîs
 =
Ál£
) {

55  
Ál£
;

58  
åue
;

59 
	}
}

61 c⁄° * 
	gComm™dLöeArgumíts
::
	$ußge
() const

64 
	}
}

66 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isVîbo£
() const

68  
vîbo£_
;

69 
	}
}

71 
	gComm™dLöeArgumíts
::
	$gëRïótCou¡
() const

73  
ª≥©_
;

74 
	}
}

76 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëGroupFûãr
() const

78  
groupFûãr_
;

79 
	}
}

81 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëNameFûãr
() const

83  
«meFûãr_
;

84 
	}
}

86 
	gComm™dLöeArgumíts
::
	$SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
i
)

88 
ª≥©_
 = 0;

90 
Sim∂eSåög
 
	`ª≥©P¨amëî
(
av
[
i
]);

91 i‡(
ª≥©P¨amëî
.
	`size
(Ë> 2Ë
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
] + 2);

92 i‡(
i
 + 1 < 
ac
) {

93 
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
 + 1]);

94 i‡(
ª≥©_
 !0Ë
i
++;

97 i‡(0 =
ª≥©_
)Ñepeat_ = 2;

99 
	}
}

101 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
)

103 
Sim∂eSåög
 
	`∑ømëî
(
av
[
i
]);

104 i‡(
∑ømëî
.
	`size
(Ë> 2Ë 
av
[
i
] + 2;

105 i‡(
i
 + 1 < 
ac
Ë 
av
[++i];

107 
	}
}

109 
	gComm™dLöeArgumíts
::
	$SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

111 
Sim∂eSåög
 
gf
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

112 
groupFûãr_
 = 
gf
;

113 
	}
}

115 
	gComm™dLöeArgumíts
::
	$SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

117 
«meFûãr_
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

118 
	}
}

120 
boﬁ
 
	gComm™dLöeArgumíts
::
	$SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
i
)

122 
Sim∂eSåög
 
ouçutTy≥
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

123 i‡(
ouçutTy≥
.
	`size
(Ë=0Ë 
Ál£
;

125 i‡(
ouçutTy≥
 == "normal" || outputType == "eclipse") {

126 
ouçutTy≥_
 = 
OUTPUT_ECLIPSE
;

127  
åue
;

129 i‡(
ouçutTy≥
 == "junit") {

130 
ouçutTy≥_
 = 
OUTPUT_JUNIT
;

131  
åue
;

133  
Ál£
;

134 
	}
}

136 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isE˛ù£Ouçut
() const

138  
ouçutTy≥_
 =
OUTPUT_ECLIPSE
;

139 
	}
}

141 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isJUnôOuçut
() const

143  
ouçutTy≥_
 =
OUTPUT_JUNIT
;

144 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\CommandLineTestRunner.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/JUnôTe°Ouçut.h
"

32 
	~"CµUTe°/Te°Regi°ry.h
"

34 
	gComm™dLöeTe°Ru¬î
::
	$Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
* 
ouçut
) :

35 
	`ouçut_
(
ouçut
), 
	$jUnôOuçut_
(
√w
 
JUnôTe°Ouçut
)

37 
¨gumíts_
 = 
√w
 
	`Comm™dLöeArgumíts
(
ac
, 
av
);

38 
	}
}

40 
	gComm™dLöeTe°Ru¬î
::~
	$Comm™dLöeTe°Ru¬î
()

42 
dñëe
 
¨gumíts_
;

43 
dñëe
 
jUnôOuçut_
;

44 
	}
}

46 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, ** 
av
)

48  
	`RunAŒTe°s
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
));

49 
	}
}

51 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, c⁄° ** 
av
)

53 
ªsu…
 = 0;

54 
C⁄sﬁeTe°Ouçut
 
ouçut
;

56 
Mem‹yLókW¨nögPlugö
 
	`memLókW¨n
(
DEF_PLUGIN_MEM_LEAK
);

57 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
memLókW¨n
);

60 
Comm™dLöeTe°Ru¬î
 
	`ru¬î
(
ac
, 
av
, &
ouçut
);

61 
ªsu…
 = 
ru¬î
.
	`runAŒTe°sMaö
();

64 i‡(
ªsu…
 == 0) {

65 
ouçut
 << 
memLókW¨n
.
	`FöÆRï‹t
(0);

67  
ªsu…
;

68 
	}
}

70 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°sMaö
()

72 
ã°Resu…
 = 0;

74 
SëPoöãrPlugö
 
	`pPlugö
(
DEF_PLUGIN_SET_POINTER
);

75 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
pPlugö
);

77 i‡(!
	`∑r£Argumíts
(
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`gëFú°Plugö
()))  1;

79 
ã°Resu…
 = 
	`runAŒTe°s
();

81 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`˛ónup
();

82  
ã°Resu…
;

83 
	}
}

85 
	gComm™dLöeTe°Ru¬î
::
	$öôülizeTe°Run
()

87 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`groupFûãr
(
¨gumíts_
->
	`gëGroupFûãr
());

88 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`«meFûãr
(
¨gumíts_
->
	`gëNameFûãr
());

89 i‡(
¨gumíts_
->
	`isVîbo£
()Ë
ouçut_
->
	`vîbo£
();

90 
	}
}

92 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°s
()

94 
	`öôülizeTe°Run
();

95 
lo›Cou¡
 = 0;

96 
ÁûuªCou¡
 = 0;

97 
ª≥©_
 = 
¨gumíts_
->
	`gëRïótCou¡
();

99 
lo›Cou¡
++ < 
ª≥©_
) {

100 
ouçut_
->
	`¥ötTe°Run
(
lo›Cou¡
, 
ª≥©_
);

101 
Te°Resu…
 
	`å
(*
ouçut_
);

102 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`runAŒTe°s
(
å
);

103 
ÁûuªCou¡
 +
å
.
	`gëFaûuªCou¡
();

106  
ÁûuªCou¡
;

107 
	}
}

109 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$∑r£Argumíts
(
Te°Plugö
* 
∂ugö
)

111 i‡(
¨gumíts_
->
	`∑r£
(
∂ugö
)) {

112 i‡(
¨gumíts_
->
	`isJUnôOuçut
()) {

113 
ouçut_
 = 
jUnôOuçut_
;

115  
åue
;

118 
ouçut_
->
	`¥öt
(
¨gumíts_
->
	`ußge
());

119  
Ál£
;

121 
	}
}

123 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$isVîbo£
()

125  
¨gumíts_
->
	`isVîbo£
();

126 
	}
}

128 
	gComm™dLöeTe°Ru¬î
::
	$gëRïótCou¡
()

130  
¨gumíts_
->
	`gëRïótCou¡
();

131 
	}
}

133 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëGroupFûãr
()

135  
¨gumíts_
->
	`gëGroupFûãr
();

136 
	}
}

138 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëNameFûãr
()

140  
¨gumíts_
->
	`gëNameFûãr
();

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\JUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Te°Faûuª.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	sJUnôTe°Ca£Resu…Node


36 
JUnôTe°Ca£Resu…Node
() :

37 
execTime_
(0), 
Áûuª_
(0), 
√xt_
(0)

41 
Sim∂eSåög
 
	m«me_
;

42 
	mexecTime_
;

43 
Te°Faûuª
* 
	mÁûuª_
;

44 
JUnôTe°Ca£Resu…Node
* 
	m√xt_
;

47 
	sJUnôTe°GroupResu…


49 
JUnôTe°GroupResu…
() :

50 
ã°Cou¡_
(0), 
ÁûuªCou¡_
(0), 
groupExecTime_
(0), 
hód_
(0), 
èû_
(0)

54 
	mã°Cou¡_
;

55 
	mÁûuªCou¡_
;

56 
	m°¨tTime_
;

57 
	mgroupExecTime_
;

58 
Sim∂eSåög
 
	mgroup_
;

59 
JUnôTe°Ca£Resu…Node
* 
	mhód_
;

60 
JUnôTe°Ca£Resu…Node
* 
	mèû_
;

63 
	sJUnôTe°OuçutIm∂


65 
JUnôTe°GroupResu…
 
	mªsu…s_
;

66 
Pœtf‹mS≥cificFûe
 
	mfûe_
;

69 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

70 
	$im∂_
(
√w
 
JUnôTe°OuçutIm∂
)

72 
	}
}

74 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

76 
	`ª£tTe°GroupResu…
();

77 
dñëe
 
im∂_
;

78 
	}
}

80 
	gJUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

82 
im∂_
->
ªsu…s_
.
ã°Cou¡_
 = 0;

83 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
 = 0;

84 
im∂_
->
ªsu…s_
.
group_
 = "";

85 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

86 
cur
) {

87 
JUnôTe°Ca£Resu…Node
* 
tmp
 = 
cur
->
√xt_
;

89 i‡(
cur
->
Áûuª_
Ë
dñëe
 cur->failure_;

90 
dñëe
 
cur
;

91 
cur
 = 
tmp
;

93 
im∂_
->
ªsu…s_
.
hód_
 = 0;

94 
im∂_
->
ªsu…s_
.
èû_
 = 0;

95 
	}
}

97 
	gJUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

99 
	}
}

101 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

103 
	}
}

105 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

107 
im∂_
->
ªsu…s_
.
èû_
->
execTime_


108 
ªsu…
.
	`gëCuºítTe°TŸÆExecuti⁄Time
();

109 
	}
}

111 
	gJUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& )

113 
	}
}

115 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

117 
im∂_
->
ªsu…s_
.
groupExecTime_
 = 
ªsu…
.
	`gëCuºítGroupTŸÆExecuti⁄Time
();

118 
	`wrôeTe°GroupToFûe
();

119 
	`ª£tTe°GroupResu…
();

120 
	}
}

122 
	gJUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

124 
im∂_
->
ªsu…s_
.
ã°Cou¡_
++;

125 
im∂_
->
ªsu…s_
.
group_
 = 
ã°
.
	`gëGroup
();

126 
im∂_
->
ªsu…s_
.
°¨tTime_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

128 i‡(
im∂_
->
ªsu…s_
.
èû_
 == 0) {

129 
im∂_
->
ªsu…s_
.
hód_
 = im∂_->ªsu…s_.
èû_


130 
√w
 
JUnôTe°Ca£Resu…Node
;

133 
im∂_
->
ªsu…s_
.
èû_
->
√xt_
 = 
√w
 
JUnôTe°Ca£Resu…Node
;

134 
im∂_
->
ªsu…s_
.
èû_
 = im∂_->ªsu…s_.èû_->
√xt_
;

136 
im∂_
->
ªsu…s_
.
èû_
->
«me_
 = 
ã°
.
	`gëName
();

137 
	}
}

139 
Sim∂eSåög
 
	$¸óãFûeName
(c⁄° 
Sim∂eSåög
& 
group
)

141 
Sim∂eSåög
 
fûeName
 = "cpputest_";

142 
fûeName
 +
group
;

143 
fûeName
 += ".xml";

144  
fûeName
;

145 
	}
}

147 
	gJUnôTe°Ouçut
::
	$wrôeXmlHódî
()

149 
	`wrôeToFûe
("<?xml version=\"1.0\"Éncoding=\"UTF-8\" ?>\n");

150 
	}
}

152 
	gJUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

154 
Sim∂eSåög


155 
buf
 =

156 
	`SåögFromF‹m©
(

158 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
,

159 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

160 
im∂_
->
ªsu…s_
.
ã°Cou¡_
,

161 (Ë(
im∂_
->
ªsu…s_
.
groupExecTime_
 / 1000), () (impl_->results_.groupExecTime_ % 1000),

162 
	`GëPœtf‹mS≥cificTimeSåög
());

163 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

164 
	}
}

166 
	gJUnôTe°Ouçut
::
	$wrôePr›îtõs
()

168 
	`wrôeToFûe
("<properties>\n");

169 
	`wrôeToFûe
("</properties>\n");

170 
	}
}

172 
	gJUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

174 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

175 
cur
) {

176 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

178 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

179 
cur
->
«me_
.
	`asCh¨Såög
(), (Ë(cur->
execTime_
 / 1000), ()(cur->execTime_ % 1000));

180 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

182 i‡(
cur
->
Áûuª_
) {

183 
	`wrôeFaûuª
(
cur
);

185 
	`wrôeToFûe
("</testcase>\n");

186 
cur
 = cur->
√xt_
;

188 
	}
}

190 
	gJUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

192 
Sim∂eSåög
 
mesßge
 = 
node
->
Áûuª_
->
	`gëMesßge
().
	`asCh¨Såög
();

193 
mesßge
.
	`ª∂a˚
('"', '\'');

194 
mesßge
.
	`ª∂a˚
('<', '[');

195 
mesßge
.
	`ª∂a˚
('>', ']');

196 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

197 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

199 
node
->
Áûuª_
->
	`gëFûeName
().
	`asCh¨Såög
(),

200 
node
->
Áûuª_
->
	`gëFaûuªLöeNumbî
(), 
mesßge
.
	`asCh¨Såög
());

201 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

202 
	`wrôeToFûe
("</failure>\n");

203 
	}
}

205 
	gJUnôTe°Ouçut
::
	$wrôeFûeEndög
()

207 
	`wrôeToFûe
("<system-out></system-out>\n");

208 
	`wrôeToFûe
("<system-err></system-err>\n");

209 
	`wrôeToFûe
("</testsuite>");

210 
	}
}

212 
	gJUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

214 
	`›íFûeF‹Wrôe
(
	`¸óãFûeName
(
im∂_
->
ªsu…s_
.
group_
));

215 
	`wrôeXmlHódî
();

216 
	`wrôeTe°SuôeSummîy
();

217 
	`wrôePr›îtõs
();

218 
	`wrôeTe°Ca£s
();

219 
	`wrôeFûeEndög
();

220 
	`˛o£Fûe
();

221 
	}
}

223 
	gJUnôTe°Ouçut
::
	$vîbo£
()

225 
	}
}

227 
JUnôTe°Ouçut
::
	$¥öt
(const *)

229 
	}
}

231 
JUnôTe°Ouçut
::
	$¥öt
()

233 
	}
}

235 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

237 i‡(
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 == 0) {

238 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
++;

239 
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 = 
√w
 
	`Te°Faûuª
(
Áûuª
);

241 
	}
}

243 
	gJUnôTe°Ouçut
::
	$¥ötTe°Run
(, )

245 
	}
}

247 
	gJUnôTe°Ouçut
::
	$Êush
()

249 
	}
}

251 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

253 
im∂_
->
fûe_
 = 
	`Pœtf‹mS≥cificFO≥n
(
fûeName
.
	`asCh¨Såög
(), "w");

254 
	}
}

256 
	gJUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

258 
	`Pœtf‹mS≥cificFPuts
(
buf„r
.
	`asCh¨Såög
(), 
im∂_
->
fûe_
);

259 
	}
}

261 
	gJUnôTe°Ouçut
::
	$˛o£Fûe
()

263 
	`Pœtf‹mS≥cificFClo£
(
im∂_
->
fûe_
);

264 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$checkedMÆloc
(
size_t
 
size
)

34 * 
mem
 = (*Ë
	`Pœtf‹mS≥cificMÆloc
(
size
);

35 i‡(
mem
 == 0)

36 
	`FAIL
("mallocÑeturnedÇulÖointer");

37  
mem
;

38 
	}
}

40 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAŒoˇt‹
 = 0;

41 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAºayAŒoˇt‹
 = 0;

42 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítMÆlocAŒoˇt‹
 = 0;

44 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

46  
	`Pœtf‹mS≥cificSåCmp
(
this
->
	`«me
(), 
Æloˇt‹
->name()) == 0;

47 
	}
}

49 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

51 
cuºítNewAŒoˇt‹
 = 
Æloˇt‹
;

52 
	}
}

54 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAŒoˇt‹
()

56 i‡(
cuºítNewAŒoˇt‹
 =0Ë
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

57  
cuºítNewAŒoˇt‹
;

58 
	}
}

60 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹ToDeÁu…
()

62 
cuºítNewAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

63 
	}
}

65 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

67 
cuºítNewAºayAŒoˇt‹
 = 
Æloˇt‹
;

68 
	}
}

70 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAºayAŒoˇt‹
()

72 i‡(
cuºítNewAºayAŒoˇt‹
 =0Ë
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

73  
cuºítNewAºayAŒoˇt‹
;

74 
	}
}

76 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹ToDeÁu…
()

78 
cuºítNewAºayAŒoˇt‹
 = 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

79 
	}
}

81 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

83 
cuºítMÆlocAŒoˇt‹
 = 
Æloˇt‹
;

84 
	}
}

86 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítMÆlocAŒoˇt‹
()

88 i‡(
cuºítMÆlocAŒoˇt‹
 =0Ë
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89  
cuºítMÆlocAŒoˇt‹
;

90 
	}
}

92 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹ToDeÁu…
()

94 
cuºítMÆlocAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

95 
	}
}

97 
boﬁ
 
	gMem‹yLókAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

99  
Ál£
;

100 
	}
}

102 * 
	gMem‹yLókAŒoˇt‹
::
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

104  
	`Æloc_mem‹y
(
size
, "MemoryLeakNode", 1);

105 
	}
}

107 
	gMem‹yLókAŒoˇt‹
::
	$‰ìMem‹yLókNode
(* 
mem‹y
)

109 
	`‰ì_mem‹y
(
mem‹y
, "MemoryLeakNode", 1);

110 
	}
}

112 * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

114  
	`checkedMÆloc
(
size
);

115 
	}
}

117 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

119 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

120 
	}
}

122 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$«me
()

125 
	}
}

127 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_«me
()

130 
	}
}

132 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_«me
()

135 
	}
}

137 
boﬁ
 
	gSènd¨dMÆlocAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

139  
åue
;

140 
	}
}

142 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dMÆlocAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

144 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

145  &
Æloˇt‹
;

146 
	}
}

148 * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

150  
	`checkedMÆloc
(
size
);

151 
	}
}

153 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

155 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

156 
	}
}

158 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$«me
()

161 
	}
}

163 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_«me
()

166 
	}
}

168 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_«me
()

171 
	}
}

173 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

175 
Sènd¨dNewAŒoˇt‹
 
Æloˇt‹
;

176  &
Æloˇt‹
;

177 
	}
}

179 * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

181  
	`checkedMÆloc
(
size
);

182 
	}
}

184 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, const *, )

186 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

187 
	}
}

189 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$«me
()

192 
	}
}

194 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_«me
()

197 
	}
}

199 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_«me
()

202 
	}
}

204 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAºayAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

206 
Sènd¨dNewAºayAŒoˇt‹
 
Æloˇt‹
;

207  &
Æloˇt‹
;

208 
	}
}

209 * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 , const *, )

212 
	}
}

214 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_mem‹y
(* , const *, )

216 
	}
}

218 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$«me
()

221 
	}
}

223 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_«me
()

226 
	}
}

228 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_«me
()

231 
	}
}

233 
Mem‹yLókAŒoˇt‹
* 
	gNuŒUnknownAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

235 
NuŒUnknownAŒoˇt‹
 
Æloˇt‹
;

236  &
Æloˇt‹
;

237 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakDetector.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	#UNKNOWN
 ((*)("<unknown>"))

	)

34 
	gSim∂eSåögBuf„r
::
	$Sim∂eSåögBuf„r
() :

35 
	$posôi⁄s_fûÀd_
(0)

37 
	}
}

39 
Sim∂eSåögBuf„r
::
	$˛ór
()

41 
posôi⁄s_fûÀd_
 = 0;

42 
buf„r_
[0] = '\0';

43 
	}
}

45 
	gSim∂eSåögBuf„r
::
	$add
(c⁄° * 
f‹m©
, ...)

47 
cou¡
 = 0;

48 
va_li°
 
¨gumíts
;

49 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

50 
cou¡
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf„r_
 + 
posôi⁄s_fûÀd_
, 
SIMPLE_STRING_BUFFER_LEN
 -Öosôi⁄s_fûÀd_, 
f‹m©
, 
¨gumíts
);

51 i‡(
cou¡
 > 0Ë
posôi⁄s_fûÀd_
 += count;

52 
	`va_íd
(
¨gumíts
);

53 
	}
}

55 * 
	gSim∂eSåögBuf„r
::
	$toSåög
()

57  
buf„r_
;

58 
	}
}

62 
	gMem‹yLókDëe˘‹Node
::
	$öô
(* 
mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
)

64 
mem‹y_
 = 
mem‹y
;

65 
size_
 = 
size
;

66 
Æloˇt‹_
 = 
Æloˇt‹
;

67 
≥riod_
 = 
≥riod
;

68 
fûe_
 = 
fûe
;

69 
löe_
 = 
löe
;

70 
	}
}

74 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

76  
≥riod
 =
mem_Àak_≥riod_Æl
 || 
node
->
≥riod_
 =≥riod || (node->≥riod_ !
mem_Àak_≥riod_dißbÀd
 &&Öîiod =
mem_Àak_≥riod_íabÀd
);

77 
	}
}

79 
	gMem‹yLókDëe˘‹Li°
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

81 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

82 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

84 
cur
) {

85 i‡(
	`isInPîiod
(
cur
, 
≥riod
)) {

86 i‡(
¥ev
) {

87 
¥ev
->
√xt_
 = 
cur
->next_;

88 
cur
 = 
¥ev
;

91 
hód_
 = 
cur
->
√xt_
;

92 
cur
 = 
hód_
;

96 
¥ev
 = 
cur
;

97 
cur
 = cur->
√xt_
;

99 
	}
}

101 
	gMem‹yLókDëe˘‹Li°
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

103 
node
->
√xt_
 = 
hód_
;

104 
hód_
 = 
node
;

105 
	}
}

107 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$ªmoveNode
(* 
mem‹y
)

109 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód_
;

110 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

111 
cur
) {

112 i‡(
cur
->
mem‹y_
 =
mem‹y
) {

113 i‡(
¥ev
) {

114 
¥ev
->
√xt_
 = 
cur
->next_;

115  
cur
;

118 
hód_
 = 
cur
->
√xt_
;

119  
cur
;

122 
¥ev
 = 
cur
;

123 
cur
 = cur->
√xt_
;

126 
	}
}

128 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëLókFrom
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

130 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
node
; cur; cu∏cur->
√xt_
)

131 i‡(
	`isInPîiod
(
cur
, 
≥riod
))  cur;

133 
	}
}

135 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

137  
	`gëLókFrom
(
hód_
, 
≥riod
);

138 
	}
}

140 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

142  
	`gëLókFrom
(
node
->
√xt_
, 
≥riod
);

143 
	}
}

145 
	gMem‹yLókDëe˘‹Li°
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

147 
tŸÆ_Àaks
 = 0;

148 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
) {

149 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë
tŸÆ_Àaks
++;

151  
tŸÆ_Àaks
;

152 
	}
}

154 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

156 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód_
;Çode;Çodênode->
√xt_
)

157 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë 
åue
;

158  
Ál£
;

159 
	}
}

163 
	gMem‹yLókDëe˘‹TabÀ
::
	$hash
(* 
mem‹y
)

165  ((Ë
mem‹y
Ë% 
hash_¥ime
;

166 
	}
}

168 
	gMem‹yLókDëe˘‹TabÀ
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

170 
i
 = 0; i < 
hash_¥ime
; i++)

171 
èbÀ_
[
i
].
	`˛órAŒAccou¡ög
(
≥riod
);

172 
	}
}

174 
	gMem‹yLókDëe˘‹TabÀ
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

176 
èbÀ_
[
	`hash
(
node
->
mem‹y_
)].
	`addNewNode
(node);

177 
	}
}

179 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$ªmoveNode
(* 
mem‹y
)

181  
èbÀ_
[
	`hash
(
mem‹y
)].
	`ªmoveNode
(memory);

182 
	}
}

184 
boﬁ
 
	gMem‹yLókDëe˘‹TabÀ
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

186 
i
 = 0; i < 
hash_¥ime
; i++)

187 i‡(
èbÀ_
[
i
].
	`hasLóks
(
≥riod
)Ë 
åue
;

188  
Ál£
;

189 
	}
}

191 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

193 
tŸÆ_Àaks
 = 0;

194 
i
 = 0; i < 
hash_¥ime
; i++)

195 
tŸÆ_Àaks
 +
èbÀ_
[
i
].
	`gëTŸÆLóks
(
≥riod
);

196  
tŸÆ_Àaks
;

197 
	}
}

199 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëFú°Lók
(
MemLókPîiod
 
≥riod
)

201 
i
 = 0; i < 
hash_¥ime
; i++) {

202 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

203 i‡(
node
) Çode;

206 
	}
}

208 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëNextLók
(
Mem‹yLókDëe˘‹Node
* 
Àak
, 
MemLókPîiod
 
≥riod
)

210 
i
 = 
	`hash
(
Àak
->
mem‹y_
);

211 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ_
[
i
].
	`gëNextLók
(
Àak
, 
≥riod
);

212 i‡(
node
) Çode;

214 ++
i
; i < 
hash_¥ime
; i++) {

215 
node
 = 
èbÀ_
[
i
].
	`gëFú°Lók
(
≥riod
);

216 i‡(
node
) Çode;

219 
	}
}

223 
	gMem‹yLókDëe˘‹
::
	$Mem‹yLókDëe˘‹
()

225 
	}
}

227 
Mem‹yLókDëe˘‹
::
	$öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
)

229 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

230 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

231 
ªp‹ãr_
 = 
ªp‹ãr
;

232 
ouçut_buf„r_
 = 
	`Sim∂eSåögBuf„r
();

233 
mem‹yTabÀ_
 = 
	`Mem‹yLókDëe˘‹TabÀ
();

234 
	}
}

236 
	gMem‹yLókDëe˘‹
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

238 
mem‹yTabÀ_
.
	`˛órAŒAccou¡ög
(
≥riod
);

239 
	}
}

241 
	gMem‹yLókDëe˘‹
::
	$°¨tCheckög
()

243 
ouçut_buf„r_
.
	`˛ór
();

244 
cuºít_≥riod_
 = 
mem_Àak_≥riod_checkög
;

245 
	}
}

247 
	gMem‹yLókDëe˘‹
::
	$°›Checkög
()

249 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

250 
	}
}

252 
	gMem‹yLókDëe˘‹
::
	$íabÀ
()

254 
cuºít_≥riod_
 = 
mem_Àak_≥riod_íabÀd
;

255 
	}
}

257 
	gMem‹yLókDëe˘‹
::
	$dißbÀ
()

259 
cuºít_≥riod_
 = 
mem_Àak_≥riod_dißbÀd
;

260 
	}
}

262 
	gMem‹yLókDëe˘‹
::
	$dißbÀAŒoˇti⁄Ty≥Checkög
()

264 
doAŒoˇti⁄Ty≥Checkög_
 = 
Ál£
;

265 
	}
}

267 
	gMem‹yLókDëe˘‹
::
	$íabÀAŒoˇti⁄Ty≥Checkög
()

269 
doAŒoˇti⁄Ty≥Checkög_
 = 
åue
;

270 
	}
}

272 
	gMem‹yLókDëe˘‹
::
	$ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
, 
ÆlocLöe
, 
size_t
 
ÆlocSize
, 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
, 
‰ìLöe
,

273 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
)

275 
ouçut_buf„r_
.
	`add
(
mesßge
);

276 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_ALLOC_LOCATION
, 
ÆlocFûe
, 
ÆlocLöe
, 
ÆlocSize
, 
ÆlocAŒoˇt‹
->
	`Æloc_«me
());

277 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_DEALLOC_LOCATION
, 
‰ìFûe
, 
‰ìLöe
, 
‰ìAŒoˇt‹
->
	`‰ì_«me
());

278 
ªp‹ãr_
->
	`Áû
(
ouçut_buf„r_
.
	`toSåög
());

279 
	}
}

281 
size_t
 
	$ˇlcuœãI¡Alig√dSize
(
size_t
 
size
)

283  ((Ë- (
size
 % ())) + size;

284 
	}
}

286 
size_t
 
	gMem‹yLókDëe˘‹
::
	$sizeOfMem‹yWôhC‹ru±i⁄Info
(
size_t
 
size
)

288  
	`ˇlcuœãI¡Alig√dSize
(
size
 + 
mem‹y_c‹ru±i⁄_buf„r_size
);

289 
	}
}

291 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹
::
	$gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
mem‹y_size
)

293  (
Mem‹yLókDëe˘‹Node
*Ë(
mem‹y
 + 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
mem‹y_size
));

294 
	}
}

296 
	gMem‹yLókDëe˘‹
::
	$°‹eLókInf‹m©i⁄
(
Mem‹yLókDëe˘‹Node
 *& 
node
, *
√w_mem‹y
, 
size_t
 
size
, 
Mem‹yLókAŒoˇt‹
 *
Æloˇt‹
, c⁄° *
fûe
, 
löe
)

298 
node
->
	`öô
(
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
cuºít_≥riod_
, 
fûe
, 
löe
);

299 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
);

300 
mem‹yTabÀ_
.
	`addNewNode
(
node
);

301 
	}
}

303 * 
	gMem‹yLókDëe˘‹
::
	$ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

305 * 
√w_mem‹y
 = (*Ë(
	`Pœtf‹mS≥cificRóŒoc
(
mem‹y
, 
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
)));

306 i‡(
√w_mem‹y
 =
NULL
)  NULL;

307 
Mem‹yLókDëe˘‹Node
 *
node
 = (Mem‹yLókDëe˘‹Node*Ë(
Æloˇt‹
->
	`ÆlocMem‹yLókNode
(
size
));

308 
	`°‹eLókInf‹m©i⁄
(
node
, 
√w_mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

309  
node
->
mem‹y_
;

310 
	}
}

312 
	gMem‹yLókDëe˘‹
::
	$addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

314 
mem‹y
[0] = 'B';

315 
mem‹y
[1] = 'A';

316 
mem‹y
[2] = 'S';

317 
	}
}

319 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
)

321  
mem‹y
[0] == 'B' && memory[1] == 'A' && memory[2] == 'S';

322 
	}
}

324 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$m©chögAŒoˇti⁄
(
Mem‹yLókAŒoˇt‹
 *
Æloc_Æloˇt‹
, Mem‹yLókAŒoˇt‹ *
‰ì_Æloˇt‹
)

326 i‡(
Æloc_Æloˇt‹
 =
‰ì_Æloˇt‹
Ë 
åue
;

327 i‡(!
doAŒoˇti⁄Ty≥Checkög_
Ë 
åue
;

328  
‰ì_Æloˇt‹
->
	`isOfEquÆTy≥
(
Æloc_Æloˇt‹
);

329 
	}
}

331 
	gMem‹yLókDëe˘‹
::
	$checkF‹C‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

333 i‡(!
	`m©chögAŒoˇti⁄
(
node
->
Æloˇt‹_
, 
Æloˇt‹
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
,Çode->
fûe_
,Çode->
löe_
,Çode->
size_
,Çode->Æloˇt‹_, 
fûe
, 
löe
,állocator);

334 i‡(!
	`vÆidMem‹yC‹ru±i⁄Inf‹m©i⁄
(
node
->
mem‹y_
 +Çode->
size_
)Ë
	`ªp‹tFaûuª
(
MEM_LEAK_MEMORY_CORRUPTION
,Çode->
fûe_
,Çode->
löe_
,Çode->size_,Çode->
Æloˇt‹_
, 
fûe
, 
löe
, 
Æloˇt‹
);

335 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()ËÆloˇt‹->
	`‰ìMem‹yLókNode
((*Ë
node
);

336 
	}
}

338 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
)

340  
	`ÆlocMem‹y
(
Æloˇt‹
, 
size
, 
UNKNOWN
, 0);

341 
	}
}

343 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

351 * 
mem‹y
;

352 
Mem‹yLókDëe˘‹Node
* 
node
;

353 i‡(
Æloˇt‹
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()) {

354 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
), 
fûe
, 
löe
);

355 i‡(
mem‹y
 =
NULL
)  NULL;

356 
node
 = (
Mem‹yLókDëe˘‹Node
*Ë
Æloˇt‹
->
	`ÆlocMem‹yLókNode
((MemoryLeakDetectorNode));

359 
mem‹y
 = 
Æloˇt‹
->
	`Æloc_mem‹y
(
	`sizeOfMem‹yWôhC‹ru±i⁄Info
(
size
Ë+ (
Mem‹yLókDëe˘‹Node
), 
fûe
, 
löe
);

360 i‡(
mem‹y
 =
NULL
)  NULL;

361 
node
 = 
	`gëNodeFromMem‹yPoöãr
(
mem‹y
, 
size
);

364 
	`°‹eLókInf‹m©i⁄
(
node
, 
mem‹y
, 
size
, 
Æloˇt‹
, 
fûe
, 
löe
);

365  
node
->
mem‹y_
;

366 
	}
}

368 
	gMem‹yLókDëe˘‹
::
	$ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(* 
mem‹y
)

370 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

371 
	}
}

373 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

375 i‡(
mem‹y
 == 0) ;

377 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
((*Ë
mem‹y
);

378 i‡(
node
 =
NULL
) {

379 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

382 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

383 
Æloˇt‹
->
	`‰ì_mem‹y
((*Ë
mem‹y
, 
fûe
, 
löe
);

384 
	}
}

386 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
)

388 
	`dóŒocMem‹y
(
Æloˇt‹
, (*Ë
mem‹y
, 
UNKNOWN
, 0);

389 
	}
}

391 * 
	gMem‹yLókDëe˘‹
::
	$ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

393 i‡(
mem‹y
) {

394 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ_
.
	`ªmoveNode
(
mem‹y
);

395 i‡(
node
 =
NULL
) {

396 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0, 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

397  
NULL
;

399 
	`checkF‹C‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

401  
	`ªÆloˇãMem‹yAndLókInf‹m©i⁄
(
Æloˇt‹
, 
mem‹y
, 
size
, 
fûe
, 
löe
);

402 
	}
}

404 
	gMem‹yLókDëe˘‹
::
	$C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
)

406 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
≥riod
);

407 
tŸÆ_Àaks
 = 0;

408 
boﬁ
 
giveW¨nögOnUsögMÆloc
 = 
Ál£
;

409 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_HEADER
);

411 
Àak
) {

412 
ouçut_buf„r_
.
	`add
(
MEM_LEAK_LEAK
, 
Àak
->
size_
,Üók->
fûe_
,Üók->
löe_
,Üók->
Æloˇt‹_
->
	`Æloc_«me
(),Üók->
mem‹y_
);

413 i‡(
Àak
->
Æloˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
()) {

414 
giveW¨nögOnUsögMÆloc
 = 
åue
;

416 
tŸÆ_Àaks
++;

417 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
≥riod
);

419 
ouçut_buf„r_
.
	`add
("%†%d\n", 
MEM_LEAK_FOOTER
, 
tŸÆ_Àaks
);

420 i‡(
giveW¨nögOnUsögMÆloc
) {

421 
ouçut_buf„r_
.
	`add
("NOTE:\n");

422 
ouçut_buf„r_
.
	`add
("\tMemoryÜeakÑeportsábout mallocánd free can be caused byállocating usingÅhe cpputest version of malloc,\n");

423 
ouçut_buf„r_
.
	`add
("\tbut deallocate usingÅhe standard free.\n");

424 
ouçut_buf„r_
.
	`add
("\tIfÅhis isÅhe case, check whether your malloc/freeÑeplacementsáre working (#define malloc cpputest_mallocÉtc).\n");

426 
	}
}

428 c⁄° * 
	gMem‹yLókDëe˘‹
::
	$ªp‹t
(
MemLókPîiod
 
≥riod
)

430 i‡(!
mem‹yTabÀ_
.
	`hasLóks
(
≥riod
)Ë 
MEM_LEAK_NONE
;

432 
ouçut_buf„r_
.
	`˛ór
();

433 
	`C⁄°ru˘Mem‹yLókRï‹t
(
≥riod
);

435  
ouçut_buf„r_
.
	`toSåög
();

436 
	}
}

438 
	gMem‹yLókDëe˘‹
::
	$m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
()

440 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ_
.
	`gëFú°Lók
(
mem_Àak_≥riod_checkög
);

441 
Àak
) {

442 i‡(
Àak
->
≥riod_
 =
mem_Àak_≥riod_checkög
ËÀak->≥riod_ = 
mem_Àak_≥riod_íabÀd
;

443 
Àak
 = 
mem‹yTabÀ_
.
	`gëNextLók
÷ók, 
mem_Àak_≥riod_checkög
);

445 
	}
}

447 
	gMem‹yLókDëe˘‹
::
	$tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
)

449  
mem‹yTabÀ_
.
	`gëTŸÆLóks
(
≥riod
);

450 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

30 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 ˛as†
	cMem‹yLókW¨nögRï‹ãr
: 
public
 
Mem‹yLókFaûuª


36 
public
:

37 
vútuÆ
 ~
	$Mem‹yLókW¨nögRï‹ãr
()

41 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

43 
	`FAIL
(
Áû_°rög
);

44 
	}
}

47 
Mem‹yLókW¨nögRï‹ãr
* 
	gglobÆRï‹ãr
 = 0;

48 
Mem‹yLókDëe˘‹
* 
	gglobÆDëe˘‹
 = 0;

50 
	$de°royDëe˘‹
()

52 
	`Pœtf‹mS≥cificFªe
(
globÆDëe˘‹
);

53 
globÆRï‹ãr
->~
	`Mem‹yLókW¨nögRï‹ãr
();

54 
	`Pœtf‹mS≥cificFªe
(
globÆRï‹ãr
);

55 
globÆRï‹ãr
 = 0;

56 
globÆDëe˘‹
 = 0;

57 
	}
}

59 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëGlobÆDëe˘‹
()

61 i‡(
globÆDëe˘‹
 == 0) {

66 
Mem‹yLókW¨nögRï‹ãr
 
ªp‹ãr
;

67 
globÆRï‹ãr
 = (
Mem‹yLókW¨nögRï‹ãr
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakWarningReporter));

68 
	`Pœtf‹mS≥cificMemCpy
(
globÆRï‹ãr
, &
ªp‹ãr
, (
Mem‹yLókW¨nögRï‹ãr
));

70 
globÆDëe˘‹
 = (
Mem‹yLókDëe˘‹
*Ë
	`Pœtf‹mS≥cificMÆloc
((MemoryLeakDetector));

71 i‡(
globÆDëe˘‹
 == 0)

72 
	`FAIL
("operatorÇew(size, bool)ÇotÉnough memory");

73 
globÆDëe˘‹
->
	`öô
(
globÆRï‹ãr
);

75  
globÆDëe˘‹
;

76 
	}
}

78 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
fú°Plugö_
 = 0;

80 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
	$gëFú°Plugö
()

82  
fú°Plugö_
;

83 
	}
}

85 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëMem‹yLókDëe˘‹
()

87  
memLókDëe˘‹_
;

88 
	}
}

90 
	gMem‹yLókW¨nögPlugö
::
	$ign‹eAŒLóksInTe°
()

92 
ign‹eAŒW¨nögs_
 = 
åue
;

93 
	}
}

95 
	gMem‹yLókW¨nögPlugö
::
	$ex≥˘LóksInTe°
(
n
)

97 
ex≥˘edLóks_
 = 
n
;

98 
	}
}

100 
	gMem‹yLókW¨nögPlugö
::
	$Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
, 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
) :

101 
	`Te°Plugö
(
«me
), 
	`ign‹eAŒW¨nögs_
(
Ál£
), 
	$ex≥˘edLóks_
(0)

103 i‡(
fú°Plugö_
 =0Ëfú°Plugö_ = 
this
;

105 i‡(
loˇlDëe˘‹
Ë
memLókDëe˘‹_
 =ÜocalDetector;

106 
memLókDëe˘‹_
 = 
	`gëGlobÆDëe˘‹
();

108 
memLókDëe˘‹_
->
	`íabÀ
();

109 
	}
}

111 
	gMem‹yLókW¨nögPlugö
::~
	$Mem‹yLókW¨nögPlugö
()

113 i‡(
this
 =
fú°Plugö_
) firstPlugin_ = 0;

114 
	}
}

116 
	gMem‹yLókW¨nögPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& , 
Te°Resu…
& 
ªsu…
)

118 
memLókDëe˘‹_
->
	`°¨tCheckög
();

119 
ÁûuªCou¡_
 = 
ªsu…
.
	`gëFaûuªCou¡
();

120 
	}
}

122 
	gMem‹yLókW¨nögPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

124 
memLókDëe˘‹_
->
	`°›Checkög
();

125 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

127 i‡(!
ign‹eAŒW¨nögs_
 && 
ex≥˘edLóks_
 !
Àaks
 && 
ÁûuªCou¡_
 =
ªsu…
.
	`gëFaûuªCou¡
()) {

128 
Te°Faûuª
 
	`f
(&
ã°
, 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

129 
ªsu…
.
	`addFaûuª
(
f
);

131 
memLókDëe˘‹_
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

132 
ign‹eAŒW¨nögs_
 = 
Ál£
;

133 
ex≥˘edLóks_
 = 0;

134 
	}
}

136 c⁄° * 
	gMem‹yLókW¨nögPlugö
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

138 
Àaks
 = 
memLókDëe˘‹_
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
);

139 i‡(
Àaks
 !
toBeDñëedLóks
Ë 
memLókDëe˘‹_
->
	`ªp‹t
(
mem_Àak_≥riod_íabÀd
);

141 
	}
}

143 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


144 #unde‡
√w


146 #i‡
CPPUTEST_USE_STD_CPP_LIB


147 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
Ëi‡(mem‹y =
NULL
Ë
throw
 
°d
::
	`bad_Æloc
();

	)

148 
	#UT_THROW
(
ex˚±
Ë
	`throw
 (ex˚±)

	)

149 
	#UT_THROW_EMPTY
(Ë
	`throw
 ()

	)

151 
	#UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
)

	)

152 
	#UT_THROW
(
ex˚±
)

	)

153 
	#UT_THROW_EMPTY
()

	)

156 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

158 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
);

159 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

160  
mem‹y
;

161 
	}
}

163 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`UT_THROW
(
°d
::
bad_Æloc
)

165 *
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

166 
	`UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

167  
mem‹y
;

168 
	}
}

170 
›î©‹
 
	$dñëe
(* 
mem
Ë
	$UT_THROW_EMPTY
()

172 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

173 
	}
}

175 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
Ë
UT_THROW
(
°d
::
bad_Æloc
)

177 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
);

178 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

179  
	gmem‹y
;

182 * 
›î©‹
 
	g√w
 [](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
Ë
UT_THROW
(
°d
::
bad_Æloc
)

184 * 
mem‹y
 = 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

185 
UT_THROW_BAD_ALLOC_WHEN_NULL
(
mem‹y
);

186  
	gmem‹y
;

189 
›î©‹
 
	gdñëe
[](* 
	gmem
Ë
	$UT_THROW_EMPTY
()

191 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

39 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

40 
	$im∂_
(0)

42 
	}
}

44 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

46 
	}
}

48 
JUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

50 
	}
}

52 
JUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

54 
	}
}

56 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

58 
	}
}

60 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

62 
	}
}

64 
JUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

66 
	}
}

68 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

70 
	}
}

72 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

74 
	}
}

76 
JUnôTe°Ouçut
::
	$wrôeXmlHódî
()

78 
	}
}

80 
JUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

82 
	}
}

84 
JUnôTe°Ouçut
::
	$wrôePr›îtõs
()

86 
	}
}

88 
JUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

90 
	}
}

92 
JUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

94 
	}
}

96 
JUnôTe°Ouçut
::
	$wrôeFûeEndög
()

98 
	}
}

100 
JUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

102 
	}
}

104 
JUnôTe°Ouçut
::
	$vîbo£
()

106 
	}
}

108 
JUnôTe°Ouçut
::
	$¥öt
(const *)

110 
	}
}

112 
JUnôTe°Ouçut
::
	$¥öt
()

114 
	}
}

116 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

118 
	}
}

120 
JUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

122 
	}
}

124 
	gJUnôTe°Ouçut
::
	$Êush
()

126 
	}
}

128 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

130 
	}
}

132 
JUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

134 
	}
}

136 
JUnôTe°Ouçut
::
	$˛o£Fûe
()

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\SimpleString.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
°rögAŒoˇt‹_
 = 
NULL
;

36 
Mem‹yLókAŒoˇt‹
* 
	gSim∂eSåög
::
	$gëSåögAŒoˇt‹
()

38 i‡(
°rögAŒoˇt‹_
 =
NULL
)

39  
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

40  
°rögAŒoˇt‹_
;

41 
	}
}

43 
	gSim∂eSåög
::
	$£tSåögAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

45 
°rögAŒoˇt‹_
 = 
Æloˇt‹
;

46 
	}
}

49 * 
	gSim∂eSåög
::
	$ÆlocSåögBuf„r
(
size_t
 
_size
)

51  
	`gëSåögAŒoˇt‹
()->
	`Æloc_mem‹y
(
_size
, 
__FILE__
, 
__LINE__
);

52 
	}
}

54 
	gSim∂eSåög
::
	$dóŒocSåögBuf„r
(* 
°r
)

56 
	`gëSåögAŒoˇt‹
()->
	`‰ì_mem‹y
(
°r
, 
__FILE__
, 
__LINE__
);

57 
	}
}

59 * 
	gSim∂eSåög
::
	$gëEm±ySåög
() const

61 * 
em±y
 = 
	`ÆlocSåögBuf„r
(1);

62 
em±y
[0] = '\0';

63  
em±y
;

64 
	}
}

65 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
ŸhîBuf„r
)

67 i‡(
ŸhîBuf„r
 == 0) {

68 
buf„r_
 = 
	`gëEm±ySåög
();

71 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
ŸhîBuf„r
) + 1;

72 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

73 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
ŸhîBuf„r
);

75 
	}
}

77 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
Ÿhî
, 
size_t
 
ª≥©Cou¡
)

79 
size_t
 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
Ë* 
ª≥©Cou¡
 + 1;

80 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

81 * 
√xt
 = 
buf„r_
;

82 
size_t
 
i
 = 0; i < 
ª≥©Cou¡
; i++) {

83 
	`Pœtf‹mS≥cificSåCpy
(
√xt
, 
Ÿhî
);

84 
√xt
 +
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
);

86 *
√xt
 = 0;

88 
	}
}

89 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

91 
size_t
 
Àn
 = 
Ÿhî
.
	`size
() + 1;

92 
buf„r_
 = 
	`ÆlocSåögBuf„r
(
Àn
);

93 
	`Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

94 
	}
}

96 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

98 i‡(
this
 !&
Ÿhî
) {

99 
dóŒocSåögBuf„r
(
buf„r_
);

100 
size_t
 
	gÀn
 = 
Ÿhî
.
size
() + 1;

101 
	gbuf„r_
 = 
ÆlocSåögBuf„r
(
Àn
);

102 
Pœtf‹mS≥cificSåCpy
(
buf„r_
, 
Ÿhî
.buffer_);

104  *
	gthis
;

107 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

111 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

112 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

113  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) != 0;

114 
	}
}

116 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èösNoCa£
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

118  
	`toLowî
().
	`c⁄èös
(
Ÿhî
.toLower());

119 
	}
}

122 
boﬁ
 
	gSim∂eSåög
::
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

124 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
Ë=0Ë 
åue
;

125 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r_
Ë=0Ë 
Ál£
;

126  
	`Pœtf‹mS≥cificSåSå
(
buf„r_
, 
Ÿhî
.buffer_) == buffer_;

127 
	}
}

129 
boﬁ
 
	gSim∂eSåög
::
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

131 
size_t
 
buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

132 
size_t
 
Ÿhî_buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r_
);

133 i‡(
Ÿhî_buf„r_Àngth
 =0Ë 
åue
;

134 i‡(
buf„r_Àngth
 =0Ë 
Ál£
;

135 i‡(
buf„r_Àngth
 < 
Ÿhî_buf„r_Àngth
Ë 
Ál£
;

136  
	`Pœtf‹mS≥cificSåCmp
(
buf„r_
 + 
buf„r_Àngth
 - 
Ÿhî_buf„r_Àngth
, 
Ÿhî
.buffer_) == 0;

137 
	}
}

139 
size_t
 
	gSim∂eSåög
::
	$cou¡
(c⁄° 
Sim∂eSåög
& 
sub°r
) const

141 
size_t
 
num
 = 0;

142 * 
°r
 = 
buf„r_
;

143 (
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
sub°r
.
buf„r_
))) {

144 
num
++;

145 
°r
++;

147  
num
;

148 
	}
}

150 
	gSim∂eSåög
::
	$•lô
(c⁄° 
Sim∂eSåög
& 
dñimôî
, 
Sim∂eSåögCﬁÀ˘i⁄
& 
cﬁ
) const

152 
size_t
 
num
 = 
	`cou¡
(
dñimôî
);

153 
size_t
 
exåaEndTokí
 = (
	`ídsWôh
(
dñimôî
)) ? 0 : 1;

154 
cﬁ
.
	`Æloˇã
(
num
 + 
exåaEndTokí
);

156 * 
°r
 = 
buf„r_
;

157 * 
¥ev
;

158 
size_t
 
i
 = 0; i < 
num
; ++i) {

159 
¥ev
 = 
°r
;

160 
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
dñimôî
.
buf„r_
) + 1;

161 
size_t
 
Àn
 = 
°r
 - 
¥ev
;

162 * 
sub
 = 
	`ÆlocSåögBuf„r
(
Àn
 + 1);

163 
	`Pœtf‹mS≥cificSåNCpy
(
sub
, 
¥ev
, 
Àn
);

164 
sub
[
Àn
] = '\0';

165 
cﬁ
[
i
] = 
sub
;

166 
	`dóŒocSåögBuf„r
(
sub
);

168 i‡(
exåaEndTokí
) {

169 
cﬁ
[
num
] = 
°r
;

171 
	}
}

173 
	gSim∂eSåög
::
	$ª∂a˚
(
to
, 
wôh
)

175 
size_t
 
s
 = 
	`size
();

176 
size_t
 
i
 = 0; i < 
s
; i++) {

177 i‡(
buf„r_
[
i
] =
to
Ëbuf„r_[i] = 
wôh
;

179 
	}
}

181 
	gSim∂eSåög
::
	$ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
)

183 
size_t
 
c
 = 
	`cou¡
(
to
);

184 
size_t
 
Àn
 = 
	`size
();

185 
size_t
 
tﬁí
 = 
	`Pœtf‹mS≥cificSåLí
(
to
);

186 
size_t
 
wôhÀn
 = 
	`Pœtf‹mS≥cificSåLí
(
wôh
);

188 
size_t
 
√wsize
 = 
Àn
 + (
wôhÀn
 * 
c
Ë- (
tﬁí
 * c) + 1;

190 i‡(
√wsize
) {

191 * 
√wbuf
 = 
	`ÆlocSåögBuf„r
(
√wsize
);

192 
size_t
 
i
 = 0, 
j
 = 0; i < 
Àn
;) {

193 i‡(
	`Pœtf‹mS≥cificSåNCmp
(&
buf„r_
[
i
], 
to
, 
tﬁí
) == 0) {

194 
	`Pœtf‹mS≥cificSåNCpy
(&
√wbuf
[
j
], 
wôh
, 
wôhÀn
);

195 
j
 +
wôhÀn
;

196 
i
 +
tﬁí
;

199 
√wbuf
[
j
] = 
buf„r_
[
i
];

200 
j
++;

201 
i
++;

204 
	`dóŒocSåögBuf„r
(
buf„r_
);

205 
buf„r_
 = 
√wbuf
;

206 
buf„r_
[
√wsize
 - 1] = '\0';

209 
buf„r_
 = 
	`gëEm±ySåög
();

210 
buf„r_
[0] = '\0';

212 
	}
}

214 
Sim∂eSåög
 
	gSim∂eSåög
::
	$toLowî
() const

216 
Sim∂eSåög
 
	`°r
(*
this
);

218 
size_t
 
°r_size
 = 
°r
.
	`size
();

219 
size_t
 
i
 = 0; i < 
°r_size
; i++)

220 
°r
.
buf„r_
[
i
] = 
	`Pœtf‹mS≥cificToLowî
(str.buffer_[i]);

222  
°r
;

223 
	}
}

225 c⁄° *
	gSim∂eSåög
::
	$asCh¨Såög
() const

227  
buf„r_
;

228 
	}
}

230 
size_t
 
	gSim∂eSåög
::
	$size
() const

232  
	`Pœtf‹mS≥cificSåLí
(
buf„r_
);

233 
	}
}

235 
	gSim∂eSåög
::~
	$Sim∂eSåög
()

237 
	`dóŒocSåögBuf„r
(
buf„r_
);

238 
	}
}

240 
boﬁ
 
	g›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

242  0 =
Pœtf‹mS≥cificSåCmp
(
À·
.
asCh¨Såög
(), 
right
.asCharString());

245 
boﬁ
 
	gSim∂eSåög
::
	$equÆsNoCa£
(c⁄° 
Sim∂eSåög
& 
°r
) const

247  
	`toLowî
(Ë=
°r
.toLower();

248 
	}
}

251 
boﬁ
 
	g›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

253  !(
	gÀ·
 =
right
);

256 
Sim∂eSåög
 
	gSim∂eSåög
::
›î©‹
+(c⁄° Sim∂eSåög& 
rhs
)

258 
Sim∂eSåög
 
t
(
buf„r_
);

259 
	gt
 +
rhs
.
buf„r_
;

260  
	gt
;

263 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° 
Sim∂eSåög
& 
rhs
)

265  
›î©‹
+=(
rhs
.
buf„r_
);

268 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° * 
rhs
)

270 
size_t
 
Àn
 = 
this
->
size
(Ë+ 
Pœtf‹mS≥cificSåLí
(
rhs
) + 1;

271 * 
	gtbuf„r
 = 
ÆlocSåögBuf„r
(
Àn
);

272 
Pœtf‹mS≥cificSåCpy
(
tbuf„r
, 
this
->
buf„r_
);

273 
Pœtf‹mS≥cificSåC©
(
tbuf„r
, 
rhs
);

274 
dóŒocSåögBuf„r
(
buf„r_
);

275 
	gbuf„r_
 = 
tbuf„r
;

276  *
	gthis
;

279 
	gSim∂eSåög
::
	$∑dSåögsToSameLígth
(
Sim∂eSåög
& 
°r1
, Sim∂eSåög& 
°r2
, 
∑dCh¨a˘î
)

281 i‡(
°r1
.
	`size
(Ë> 
°r2
.size()) {

282 
	`∑dSåögsToSameLígth
(
°r2
, 
°r1
, 
∑dCh¨a˘î
);

286 
∑d
[2];

287 
∑d
[0] = 
∑dCh¨a˘î
;

288 
∑d
[1] = 0;

289 
°r1
 = 
	`Sim∂eSåög
(
∑d
, 
°r2
.
	`size
() - str1.size()) + str1;

290 
	}
}

292 
Sim∂eSåög
 
	gSim∂eSåög
::
	$subSåög
(
size_t
 
begöPos
, size_à
amou¡
) const

294 i‡(
begöPos
 > 
	`size
()-1)  "";

296 
Sim∂eSåög
 
√wSåög
 = 
buf„r_
 + 
begöPos
;

298 i‡(
√wSåög
.
	`size
(Ë> 
amou¡
)

299 
√wSåög
.
buf„r_
[
amou¡
] = '\0';

301  
√wSåög
;

302 
	}
}

304 
	gSim∂eSåög
::
	$c›yToBuf„r
(* 
buf„rToC›y
, 
size_t
 
buf„rSize
) const

306 i‡(
buf„rToC›y
 =
NULL
 || 
buf„rSize
 == 0) ;

308 
sizeToC›y
 = (
buf„rSize
-1 < 
	`size
()) ? bufferSize-1 : size();

310 
	`Pœtf‹mS≥cificSåNCpy
(
buf„rToC›y
, 
buf„r_
, 
sizeToC›y
);

311 
buf„rToC›y
[
sizeToC›y
] = '\0';

313 
	}
}

315 
Sim∂eSåög
 
	$SåögFrom
(
boﬁ
 
vÆue
)

317  
	`Sim∂eSåög
(
	`SåögFromF‹m©
("%s", 
vÆue
 ? "true" : "false"));

318 
	}
}

320 
Sim∂eSåög
 
	$SåögFrom
(c⁄° *
vÆue
)

322  
	`Sim∂eSåög
(
vÆue
);

323 
	}
}

325 
Sim∂eSåög
 
	$SåögFromOrNuŒ
(c⁄° * 
ex≥˘ed
)

327  (
ex≥˘ed
Ë? 
	`SåögFrom
(expected) : "(null)";

328 
	}
}

330 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

332  
	`SåögFromF‹m©
("%d", 
vÆue
);

333 
	}
}

335 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

337  
	`SåögFromF‹m©
("%ld", 
vÆue
);

338 
	}
}

340 
Sim∂eSåög
 
	$SåögFrom
(* 
vÆue
)

342  
	`Sim∂eSåög
("0x"Ë+ 
	`HexSåögFrom
((Ë
vÆue
);

343 
	}
}

345 
Sim∂eSåög
 
	$HexSåögFrom
(
vÆue
)

347  
	`SåögFromF‹m©
("%lx", 
vÆue
);

348 
	}
}

350 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
, 
¥ecisi⁄
)

352 
Sim∂eSåög
 
f‹m©
 = 
	`SåögFromF‹m©
("%%.%df", 
¥ecisi⁄
);

353  
	`SåögFromF‹m©
(
f‹m©
.
	`asCh¨Såög
(), 
vÆue
);

354 
	}
}

356 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

358  
	`SåögFromF‹m©
("%c", 
vÆue
);

359 
	}
}

361 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
Sim∂eSåög
& 
vÆue
)

363  
	`Sim∂eSåög
(
vÆue
);

364 
	}
}

366 
Sim∂eSåög
 
	$SåögFromF‹m©
(c⁄° * 
f‹m©
, ...)

368 
Sim∂eSåög
 
ªsu…Såög
;

369 
va_li°
 
¨gumíts
;

370 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

372 
ªsu…Såög
 = 
	`VSåögFromF‹m©
(
f‹m©
, 
¨gumíts
);

373 
	`va_íd
(
¨gumíts
);

374  
ªsu…Såög
;

375 
	}
}

377 #i‡
CPPUTEST_USE_STD_CPP_LIB


379 
	~<°rög
>

381 
Sim∂eSåög
 
SåögFrom
(c⁄° 
°d
::
°rög
& 
vÆue
)

383  
Sim∂eSåög
(
vÆue
.
c_°r
());

386 
Sim∂eSåög
 
	$SåögFrom
(
uöt32_t
 
i
)

388  
	`SåögFromF‹m©
("%10u (0x%08x)", 
i
, i);

389 
	}
}

391 
Sim∂eSåög
 
	$SåögFrom
(
uöt16_t
 
i
)

393  
	`SåögFromF‹m©
("%5u (0x%04x)", 
i
, i);

394 
	}
}

396 
Sim∂eSåög
 
	$SåögFrom
(
uöt8_t
 
i
)

398  
	`SåögFromF‹m©
("%3u (0x%02x)", 
i
, i);

399 
	}
}

404 #i‚de‡
va_c›y


405 
	#va_c›y
(
c›y
, 
‹igöÆ
Ëc›y = origöÆ;

	)

408 
Sim∂eSåög
 
	$VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

410 
va_li°
 
¨gsC›y
;

411 
	`va_c›y
(
¨gsC›y
, 
¨gs
);

414 
sizeOfdeÁu…Buf„r
 = 100

416 
deÁu…Buf„r
[
sizeOfdeÁu…Buf„r
];

417 
Sim∂eSåög
 
ªsu…Såög
;

419 
size
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
deÁu…Buf„r
, 
sizeOfdeÁu…Buf„r
, 
f‹m©
, 
¨gs
);

420 i‡(
size
 < 
sizeOfdeÁu…Buf„r
) {

421 
ªsu…Såög
 = 
	`Sim∂eSåög
(
deÁu…Buf„r
);

424 * 
√wBuf„r
 = 
Sim∂eSåög
::
	`ÆlocSåögBuf„r
(
size
 + 1);

425 
	`Pœtf‹mS≥cificVSN¥ötf
(
√wBuf„r
, 
size
 + 1, 
f‹m©
, 
¨gsC›y
);

426 
ªsu…Såög
 = 
	`Sim∂eSåög
(
√wBuf„r
);

428 
Sim∂eSåög
::
	`dóŒocSåögBuf„r
(
√wBuf„r
);

430  
ªsu…Såög
;

431 
	}
}

433 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Sim∂eSåögCﬁÀ˘i⁄
()

435 
cﬁÀ˘i⁄_
 = 0;

436 
size_
 = 0;

437 
	}
}

439 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Æloˇã
(
size_t
 
_size
)

441 i‡(
cﬁÀ˘i⁄_
Ë
dñëe
[] collection_;

443 
size_
 = 
_size
;

444 
cﬁÀ˘i⁄_
 = 
√w
 
Sim∂eSåög
[
size_
];

445 
	}
}

447 
	gSim∂eSåögCﬁÀ˘i⁄
::~
	$Sim∂eSåögCﬁÀ˘i⁄
()

449 
dñëe
[] (
cﬁÀ˘i⁄_
);

450 
	}
}

452 
size_t
 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$size
() const

454  
size_
;

455 
	}
}

457 
	gSim∂eSåög
& 
	gSim∂eSåögCﬁÀ˘i⁄
::
›î©‹
[](
size_t
 
ödex
)

459 i‡(
ödex
 >
size_
) {

460 
em±y_
 = "";

461  
	gem±y_
;

464  
	gcﬁÀ˘i⁄_
[
ödex
];

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Faûuª.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	~<°dlib.h
>

34 
Sim∂eSåög
 
	$ªmoveAŒPröèbÀCh¨a˘îsFrom
(c⁄° 
Sim∂eSåög
& 
°r
)

36 
buf„rSize
 = 
°r
.
	`size
()+1;

37 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

38 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

40 
i
 = 0; i < 
buf„rSize
-1; i++)

41 i‡(
buf„r
[
i
] != '\t' && buffer[i] != '\n')

42 
buf„r
[
i
] = ' ';

44 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

45 
	`‰ì
(
buf„r
);

46  
ªsu…
;

47 
	}
}

49 
Sim∂eSåög
 
	$addM¨kîToSåög
(c⁄° 
Sim∂eSåög
& 
°r
, 
m¨kîPos
)

51 
buf„rSize
 = 
°r
.
	`size
()+1;

52 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

53 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

55 
buf„r
[
m¨kîPos
] = '^';

57 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

58 
	`‰ì
(
buf„r
);

59  
ªsu…
;

61 
	}
}

63 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

64 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	$mesßge_
(
theMesßge
)

66 
	}
}

68 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

69 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
—e°->
	`gëFûe
()), 
	`löeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`ã°FûeName_
—e°->gëFûe()), 
	`ã°LöeNumbî_
—e°->gëLöeNumbî()), 
	$mesßge_
(
theMesßge
)

71 
	}
}

73 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNum
) :

74 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNum
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`mesßge_
("no message")

76 
	}
}

78 
	gTe°Faûuª
::
	$Te°Faûuª
(c⁄° 
Te°Faûuª
& 
f
) :

79 
	`ã°Name_
(
f
.
ã°Name_
), 
	`fûeName_
(f.
fûeName_
), 
	`löeNumbî_
(f.
löeNumbî_
), 
	`ã°FûeName_
(f.
ã°FûeName_
), 
	`ã°LöeNumbî_
(f.
ã°LöeNumbî_
), 
	$mesßge_
(
f
.
mesßge_
)

81 
	}
}

84 
	gTe°Faûuª
::~
	$Te°Faûuª
()

86 
	}
}

88 
Sim∂eSåög
 
Te°Faûuª
::
	$gëFûeName
() const

90  
fûeName_
;

91 
	}
}

93 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°FûeName
() const

95  
ã°FûeName_
;

96 
	}
}

98 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°Name
() const

100  
ã°Name_
;

101 
	}
}

103 
	gTe°Faûuª
::
	$gëFaûuªLöeNumbî
() const

105  
löeNumbî_
;

106 
	}
}

108 
	gTe°Faûuª
::
	$gëTe°LöeNumbî
() const

110  
ã°LöeNumbî_
;

111 
	}
}

113 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëMesßge
() const

115  
mesßge_
;

116 
	}
}

118 
boﬁ
 
	gTe°Faûuª
::
	$isOutsideTe°Fûe
() const

120  
ã°FûeName_
 !
fûeName_
;

121 
	}
}

123 
boﬁ
 
	gTe°Faûuª
::
	$isInHñ≥rFun˘i⁄
() const

125  
löeNumbî_
 < 
ã°LöeNumbî_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãButWasSåög
(c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

130 c⁄° * 
f‹m©
 = "expected <%s>\n\tbut was <%s>";

131  
	`SåögFromF‹m©
(
f‹m©
, 
ex≥˘ed
.
	`asCh¨Såög
(), 
a˘uÆ
.asCharString());

132 
	}
}

134 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãDif„ªn˚AtPosSåög
(c⁄° 
Sim∂eSåög
& 
a˘uÆ
, 
posôi⁄
)

136 
Sim∂eSåög
 
ªsu…
;

137 c⁄° 
exåaCh¨a˘îsWödow
 = 20;

138 c⁄° 
hÆfOfExåaCh¨a˘îsWödow
 = 
exåaCh¨a˘îsWödow
 / 2;

140 
Sim∂eSåög
 
	`∑ddögF‹PªvítögOutOfBounds
 (" ", 
hÆfOfExåaCh¨a˘îsWödow
);

141 
Sim∂eSåög
 
a˘uÆSåög
 = 
∑ddögF‹PªvítögOutOfBounds
 + 
a˘uÆ
 +ÖaddingForPreventingOutOfBounds;

142 
Sim∂eSåög
 
dif„ª¡Såög
 = 
	`SåögFromF‹m©
("dif„ªn˚ sèπ†©Öosôi⁄ %dát: <", 
posôi⁄
);

144 
ªsu…
 += "\n";

145 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s>\n", 
dif„ª¡Såög
.
	`asCh¨Såög
(), 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
exåaCh¨a˘îsWödow
).asCharString());

147 
Sim∂eSåög
 
m¨kSåög
 = 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
hÆfOfExåaCh¨a˘îsWödow
+1);

148 
m¨kSåög
 = 
	`ªmoveAŒPröèbÀCh¨a˘îsFrom
(markString);

149 
m¨kSåög
 = 
	`addM¨kîToSåög
(m¨kSåög, 
hÆfOfExåaCh¨a˘îsWödow
);

151 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s", 
	`Sim∂eSåög
(" ", 
dif„ª¡Såög
.
	`size
()).
	`asCh¨Såög
(), 
m¨kSåög
.asCharString());

152  
ªsu…
;

153 
	}
}

155 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
) :

156 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

158 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrNuŒ
(
ex≥˘ed
), SåögFromOrNuŒ(
a˘uÆ
));

159 
	}
}

161 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

162 : 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

164 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

165 
	}
}

167 
	gCheckEquÆFaûuª
::
	$CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

169 
ÁûSèπ
;

170 
ÁûSèπ
 = 0; 
a˘uÆ
.
	`asCh¨Såög
()[ÁûSèπ] =
ex≥˘ed
.asCharString()[failStart]; failStart++)

172 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

173 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

175 
	}
}

177 
	gC⁄èösFaûuª
::
	$C⁄èösFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
) :

178 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

180 c⁄° * 
f‹m©
 = "actual <%s>\n\tdidÇot contain <%s>";

181 
mesßge_
 = 
	`SåögFromF‹m©
(
f‹m©
, 
a˘uÆ
.
	`asCh¨Såög
(), 
ex≥˘ed
.asCharString());

182 
	}
}

184 
	gCheckFaûuª
::
	$CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

186 
mesßge_
 = "CHECK(";

187 
mesßge_
 +
c⁄dôi⁄Såög
;

188 
mesßge_
 += ") failed";

189 
	}
}

191 
	gFaûFaûuª
::
	$FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

193 
mesßge_
 = 
mesßge
;

194 
	}
}

196 
	gL⁄gsEquÆFaûuª
::
	$L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

198 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

199 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

200 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

201 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

203 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

204 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aHex
, 
eHex
, '0');

206 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

207 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

208 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘edRï‹ãd
, 
a˘uÆRï‹ãd
);

209 
	}
}

212 
	gSåögEquÆFaûuª
::
	$SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

214 
ÁûSèπ
;

215 
ÁûSèπ
 = 0; 
a˘uÆ
[ÁûSèπ] =
ex≥˘ed
[failStart]; failStart++)

217 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

218 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

219 
	}
}

221 
	gSåögEquÆNoCa£Faûuª
::
	$SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

223 
ÁûSèπ
;

224 
ÁûSèπ
 = 0; 
	`Pœtf‹mS≥cificToLowî
(
a˘uÆ
[ÁûSèπ]Ë=Pœtf‹mS≥cificToLowî(
ex≥˘ed
[failStart]); failStart++)

226 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

227 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

228 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestHarness_c.cpp

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

36 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

42 
	~"CµUTe°/Te°H¨√ss_c.h
"

44 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

46 
CHECK_EQUAL_LOCATION
(()
ex≥˘ed
, ()
a˘uÆ
, 
fûeName
, 
löeNumbî
);

49 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

51 
DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûeName
, 
löeNumbî
);

54 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

56 
CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

59 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

61 
STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

64 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

66 
FAIL_LOCATION
(
ãxt
, 
fûeName
, 
löeNumbî
);

69 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
)

71 
FAIL_LOCATION
("", 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

76 
CHECK_LOCATION
(((
c⁄dôi⁄
Ë=0 ? 
Ál£
 : 
åue
), 
c⁄dôi⁄Såög
, 
fûeName
, 
löeNumbî
);

79 
˝puã°_mÆloc_£t_out_of_mem‹y
()

81 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹
(
NuŒUnknownAŒoˇt‹
::
deÁu…AŒoˇt‹
());

84 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
()

86 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

89 * 
˝puã°_mÆloc
(
size_t
 
size
)

91  
˝puã°_mÆloc_loˇti⁄
(
size
, "<unknown>", 0);

94 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
)

96  
˝puã°_ˇŒoc_loˇti⁄
(
num
, 
size
, "<unknown>", 0);

99 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
)

101  
˝puã°_ªÆloc_loˇti⁄
(
±r
, 
size
, "<unknown>", 0);

104 
˝puã°_‰ì
(* 
buf„r
)

106 
˝puã°_‰ì_loˇti⁄
(
buf„r
, "<unknown>", 0);

109 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

111  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), 
size
, 
fûe
, 
löe
);

114 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
, c⁄° * 
fûe
, 
löe
)

116 * 
mem
 = 
˝puã°_mÆloc_loˇti⁄
(
num
 * 
size
, 
fûe
, 
löe
);

117 
Pœtf‹mS≥cificMem£t
(
mem
, 0, 
num
*
size
);

118  
mem
;

121 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

123  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
mem‹y
, 
size
, 
fûe
, 
löe
);

126 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
)

128 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
buf„r
, 
fûe
, 
löe
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gTe°Ouçut
::
	$Te°Ouçut
() :

33 
	`dŸCou¡_
(0), 
	`vîbo£_
(
Ál£
), 
	`¥ogªssIndiˇti⁄_
(".")

35 
	}
}

37 
	gTe°Ouçut
::~
	$Te°Ouçut
()

39 
	}
}

41 
Te°Ouçut
::
	$vîbo£
()

43 
vîbo£_
 = 
åue
;

44 
	}
}

46 
	gTe°Ouçut
::
	$¥öt
(
n
)

48 
	`¥öt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

49 
	}
}

51 
	gTe°Ouçut
::
	$¥ötDoubÀ
(
d
)

53 
	`¥öt
(
	`SåögFrom
(
d
, 3).
	`asCh¨Såög
());

54 
	}
}

56 
	gTe°Ouçut
::
	$¥ötHex
(
n
)

58 
	`¥öt
(
	`HexSåögFrom
(
n
).
	`asCh¨Såög
());

59 
	}
}

61 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, c⁄° * 
	gs
)

63 
	gp
.
¥öt
(
s
);

64  
	gp
;

67 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, 
	gi
)

69 
	gp
.
¥öt
(
i
);

70  
	gp
;

73 
	gTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

75 i‡(
vîbo£_
Ë
	`¥öt
(
ã°
.
	`gëF‹m©ãdName
().
	`asCh¨Såög
());

76 
	}
}

78 
	gTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
)

80 i‡(
vîbo£_
) {

81 
	`¥öt
(" - ");

82 
	`¥öt
(
ªs
.
	`gëCuºítTe°TŸÆExecuti⁄Time
());

83 
	`¥öt
(" ms\n");

86 
	`¥ötProgªssIndiˇt‹
();

88 
	}
}

90 
	gTe°Ouçut
::
	$¥ötProgªssIndiˇt‹
()

92 
	`¥öt
(
¥ogªssIndiˇti⁄_
);

93 i‡(++
dŸCou¡_
 % 50 =0Ë
	`¥öt
("\n");

94 
	}
}

96 
	gTe°Ouçut
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

98 
¥ogªssIndiˇti⁄_
 = 
ödiˇt‹
;

99 
	}
}

101 
	gTe°Ouçut
::
	$¥ötTe°sSèπed
()

103 
	}
}

105 
Te°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& )

107 
	}
}

109 
Te°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& )

111 
	}
}

113 
Te°Ouçut
::
	$Êush
()

115 
	}
}

117 
Te°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

119 i‡(
ªsu…
.
	`gëFaûuªCou¡
() > 0) {

120 
	`¥öt
("\nErrors (");

121 
	`¥öt
(
ªsu…
.
	`gëFaûuªCou¡
());

122 
	`¥öt
(" failures, ");

125 
	`¥öt
("\nOK (");

127 
	`¥öt
(
ªsu…
.
	`gëTe°Cou¡
());

128 
	`¥öt
("Åests, ");

129 
	`¥öt
(
ªsu…
.
	`gëRunCou¡
());

130 
	`¥öt
("Ñan, ");

131 
	`¥öt
(
ªsu…
.
	`gëCheckCou¡
());

132 
	`¥öt
(" checks, ");

133 
	`¥öt
(
ªsu…
.
	`gëIgn‹edCou¡
());

134 
	`¥öt
(" ignored, ");

135 
	`¥öt
(
ªsu…
.
	`gëFûãªdOutCou¡
());

136 
	`¥öt
(" filtered out, ");

137 
	`¥öt
(
ªsu…
.
	`gëTŸÆExecuti⁄Time
());

138 
	`¥öt
(" ms)\n\n");

139 
	}
}

141 
	gTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

143 i‡(
tŸÆ
 > 1) {

144 
	`¥öt
("TestÑun ");

145 
	`¥öt
(
numbî
);

146 
	`¥öt
(" of ");

147 
	`¥öt
(
tŸÆ
);

148 
	`¥öt
("\n");

150 
	}
}

152 
	gTe°Ouçut
::
	$¥öt
(c⁄° 
Te°Faûuª
& 
Áûuª
)

154 i‡(
Áûuª
.
	`isOutsideTe°Fûe
(Ë|| faûuª.
	`isInHñ≥rFun˘i⁄
())

155 
	`¥ötFûeAndLöeF‹Te°AndFaûuª
(
Áûuª
);

157 
	`¥ötFûeAndLöeF‹Faûuª
(
Áûuª
);

159 
	`¥ötFaûuªMesßge
(
Áûuª
.
	`gëMesßge
());

160 
	}
}

162 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Te°AndFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

164 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëTe°FûeName
(), faûuª.
	`gëTe°LöeNumbî
());

165 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

166 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

167 
	}
}

169 
	gTe°Ouçut
::
	$¥ötFûeAndLöeF‹Faûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

171 
	`¥ötE˛ù£Eº‹InFûeOnLöe
(
Áûuª
.
	`gëFûeName
(), faûuª.
	`gëFaûuªLöeNumbî
());

172 
	`¥ötFaûuªInTe°
(
Áûuª
.
	`gëTe°Name
());

173 
	}
}

175 
	gTe°Ouçut
::
	$¥ötFaûuªInTe°
(
Sim∂eSåög
 
ã°Name
)

177 
	`¥öt
(" Failure in ");

178 
	`¥öt
(
ã°Name
.
	`asCh¨Såög
());

179 
	}
}

181 
	gTe°Ouçut
::
	$¥ötFaûuªMesßge
(
Sim∂eSåög
 
ªas⁄
)

183 
	`¥öt
("\n");

184 
	`¥öt
("\t");

185 
	`¥öt
(
ªas⁄
.
	`asCh¨Såög
());

186 
	`¥öt
("\n\n");

187 
	}
}

189 
	gTe°Ouçut
::
	$¥ötE˛ù£Eº‹InFûeOnLöe
(
Sim∂eSåög
 
fûe
, 
löeNumbî
)

191 
	`¥öt
("\n");

192 
	`¥öt
(
fûe
.
	`asCh¨Såög
());

193 
	`¥öt
(":");

194 
	`¥öt
(
löeNumbî
);

195 
	`¥öt
(":");

196 
	`¥öt
("Érror:");

197 
	}
}

199 
	gC⁄sﬁeTe°Ouçut
::
	$¥öt
(c⁄° * 
s
)

201 *
s
) {

202 i‡('\n' =*
s
Ë
	`Pœtf‹mS≥cificPutch¨
('\r');

203 
	`Pœtf‹mS≥cificPutch¨
(*
s
);

204 
s
++;

206 
	`Êush
();

207 
	}
}

209 
	gC⁄sﬁeTe°Ouçut
::
	$Êush
()

211 
	`Pœtf‹mS≥cificFlush
();

212 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	gTe°Plugö
::
	$Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

32 
	`√xt_
(
NuŒTe°Plugö
::
	`ö°™˚
()), 
	`«me_
(
«me
), 
	$íabÀd_
(
åue
)

34 
	}
}

36 
	gTe°Plugö
::
	$Te°Plugö
(
Te°Plugö
* 
√xt
) :

37 
	`√xt_
(
√xt
), 
	`«me_
("null")

39 
	}
}

41 
	gTe°Plugö
::~
	$Te°Plugö
()

43 
	}
}

45 
Te°Plugö
* Te°Plugö::
	$addPlugö
(
Te°Plugö
* 
∂ugö
)

47 
√xt_
 = 
∂ugö
;

48  
this
;

49 
	}
}

51 
	gTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

53 i‡(
íabÀd_
Ë
	`¥eTe°A˘i⁄
(
ã°
, 
ªsu…
);

54 
√xt_
->
	`runAŒPªTe°A˘i⁄
(
ã°
, 
ªsu…
);

55 
	}
}

57 
	gTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

59 
√xt_
 ->
	`runAŒPo°Te°A˘i⁄
(
ã°
, 
ªsu…
);

60 i‡(
íabÀd_
Ë
	`po°Te°A˘i⁄
(
ã°
, 
ªsu…
);

61 
	}
}

63 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
)

65  
	`∑r£AŒArgumíts
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
), 
ödex
);

66 
	}
}

68 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

70 i‡(
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
)Ë 
åue
;

71 i‡(
√xt_
ËÇext_->
	`∑r£AŒArgumíts
(
ac
, 
av
, 
ödex
);

72  
Ál£
;

73 
	}
}

75 c⁄° 
	gSim∂eSåög
& 
	gTe°Plugö
::
	$gëName
()

77  
«me_
;

78 
	}
}

80 
Te°Plugö
* 
	gTe°Plugö
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

82 i‡(
«me
 =
«me_
Ë 
this
;

83 i‡(
√xt_
ËÇext_->
	`gëPlugöByName
(
«me
);

84  (
√xt_
);

85 
	}
}

87 
Te°Plugö
* 
	gTe°Plugö
::
	$gëNext
()

89  
√xt_
;

90 
	}
}

91 
Te°Plugö
* 
	gTe°Plugö
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

93 
Te°Plugö
* 
ªmoved
 = 0;

94 i‡(
√xt_
 &&Çext_->
	`gëName
(Ë=
«me
) {

95 
ªmoved
 = 
√xt_
;

96 
√xt_
 =Çext_->next_;

98  
ªmoved
;

99 
	}
}

101 
	gTe°Plugö
::
	$dißbÀ
()

103 
íabÀd_
 = 
Ál£
;

104 
	}
}

106 
	gTe°Plugö
::
	$íabÀ
()

108 
íabÀd_
 = 
åue
;

109 
	}
}

111 
boﬁ
 
	gTe°Plugö
::
	$isE«bÀd
()

113  
íabÀd_
;

114 
	}
}

116 
	s˝puã°_∑ú


118 **
	m‹ig
;

119 *
	m‹ig_vÆue
;

124 
	gpoöãrTabÀIndex
;

125 
˝puã°_∑ú
 
	g£éi°
[
SëPoöãrPlugö
::
MAX_SET
];

127 
	gSëPoöãrPlugö
::
	$SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

128 
	$Te°Plugö
(
«me
)

130 
poöãrTabÀIndex
 = 0;

131 
	}
}

133 
	gSëPoöãrPlugö
::~
	$SëPoöãrPlugö
()

135 
	}
}

137 
	$CµUTe°St‹e
(**
fun˘i⁄
, *
vÆue
)

139 i‡(
poöãrTabÀIndex
 >
SëPoöãrPlugö
::
MAX_SET
) {

140 
	`FAIL
("MaximumÇumber of functionÖointers installed!");

142 
£éi°
[
poöãrTabÀIndex
].
‹ig_vÆue
 = 
vÆue
;

143 
£éi°
[
poöãrTabÀIndex
].
‹ig
 = 
fun˘i⁄
;

144 
poöãrTabÀIndex
++;

145 
	}
}

147 
	gSëPoöãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& , 
Te°Resu…
& )

149 
i
 = 
poöãrTabÀIndex
 - 1; i >= 0; i--)

150 *((**Ë
£éi°
[
i
].
‹ig
Ë£éi°[i].
‹ig_vÆue
;

151 
poöãrTabÀIndex
 = 0;

152 
	}
}

156 
	gNuŒTe°Plugö
::
	$NuŒTe°Plugö
() :

157 
	$Te°Plugö
(0)

159 
	}
}

161 
NuŒTe°Plugö
* NuŒTe°Plugö::
	$ö°™˚
()

163 
NuŒTe°Plugö
 
_ö°™˚
;

164  &
_ö°™˚
;

165 
	}
}

167 
	gNuŒTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

169 
	}
}

171 
	gNuŒTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestRegistry.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	gTe°Regi°ry
::
	$Te°Regi°ry
() :

32 
	`ã°s_
(&
NuŒTe°
::
	`ö°™˚
()), 
	`«meFûãr_
(0), 
	`groupFûãr_
(0), 
	`fú°Plugö_
(
NuŒTe°Plugö
::
	$ö°™˚
())

34 
	}
}

36 
Te°Regi°ry
::~
	$Te°Regi°ry
()

38 
	`˛ónup
();

39 
	}
}

41 
	gTe°Regi°ry
::
	$˛ónup
()

43 
dñëe
 
«meFûãr_
;

44 
dñëe
 
groupFûãr_
;

45 
«meFûãr_
 = 0;

46 
groupFûãr_
 = 0;

47 
	}
}

49 
	gTe°Regi°ry
::
	$addTe°
(
Uã°
 *
ã°
)

51 
ã°s_
 = 
ã°
->
	`addTe°
(tests_);

52 
	}
}

54 
	gTe°Regi°ry
::
	$runAŒTe°s
(
Te°Resu…
& 
ªsu…
)

56 
boﬁ
 
groupSèπ
 = 
åue
;

58 
ªsu…
.
	`ã°sSèπed
();

59 
Uã°
 *
ã°
 = 
ã°s_
; !ã°->
	`isNuŒ
();Åe° =Åe°->
	`gëNext
()) {

61 i‡(
groupSèπ
) {

62 
ªsu…
.
	`cuºítGroupSèπed
(
ã°
);

63 
groupSèπ
 = 
Ál£
;

66 
ªsu…
.
	`£tProgªssIndiˇt‹
(
ã°
->
	`gëProgªssIndiˇt‹
());

67 
ªsu…
.
	`cou¡Te°
();

68 i‡(
	`ã°ShouldRun
(
ã°
, 
ªsu…
)) {

69 
ªsu…
.
	`cuºítTe°Sèπed
(
ã°
);

70 
ã°
->
	`runO√Te°WôhPlugös
(
fú°Plugö_
, 
ªsu…
);

71 
ªsu…
.
	`cuºítTe°Ended
(
ã°
);

74 i‡(
	`ídOfGroup
(
ã°
)) {

75 
groupSèπ
 = 
åue
;

76 
ªsu…
.
	`cuºítGroupEnded
(
ã°
);

79 
ªsu…
.
	`ã°sEnded
();

80 
	}
}

82 
boﬁ
 
	gTe°Regi°ry
::
	$ídOfGroup
(
Uã°
* 
ã°
)

84  (
ã°
->
	`isNuŒ
(Ë||Åe°->
	`gëGroup
(Ë!ã°->
	`gëNext
()->getGroup());

85 
	}
}

87 
	gTe°Regi°ry
::
	$cou¡Te°s
()

89  
ã°s_
->
	`cou¡Te°s
();

90 
	}
}

92 
Te°Regi°ry
* 
	gTe°Regi°ry
::
cuºítRegi°ry_
 = 0;

94 
Te°Regi°ry
* 
	gTe°Regi°ry
::
	$gëCuºítRegi°ry
()

96 
Te°Regi°ry
 
ªgi°ry
;

97  (
cuºítRegi°ry_
 =0Ë? &
ªgi°ry
 : currentRegistry_;

98 
	}
}

100 
	gTe°Regi°ry
::
	$£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
)

102 
cuºítRegi°ry_
 = 
ªgi°ry
;

103 
	}
}

105 
	gTe°Regi°ry
::
	$unDoLa°AddTe°
()

107 
ã°s_
 =Åe°s_->
	`gëNext
();

109 
	}
}

111 
	gTe°Regi°ry
::
	$«meFûãr
(
Sim∂eSåög
 
f
)

113 
dñëe
 
«meFûãr_
;

114 
«meFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

115 
	}
}

117 
	gTe°Regi°ry
::
	$groupFûãr
(
Sim∂eSåög
 
f
)

119 
dñëe
 
groupFûãr_
;

120 
groupFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

121 
	}
}

123 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëGroupFûãr
()

125  *
groupFûãr_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëNameFûãr
()

130  *
«meFûãr_
;

131 
	}
}

133 
boﬁ
 
	gTe°Regi°ry
::
	$ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

135 i‡(
groupFûãr_
 =0ËgroupFûãr_ = 
√w
 
	`Sim∂eSåög
();

136 i‡(
«meFûãr_
 =0Ë«meFûãr_ = 
√w
 
	`Sim∂eSåög
();

137 i‡(
ã°
->
	`shouldRun
(*
groupFûãr_
, *
«meFûãr_
)Ë 
åue
;

139 
ªsu…
.
	`cou¡FûãªdOut
();

140  
Ál£
;

142 
	}
}

144 
	gTe°Regi°ry
::
	$ª£tPlugös
()

146 
fú°Plugö_
 = 
NuŒTe°Plugö
::
	`ö°™˚
();

147 
	}
}

149 
	gTe°Regi°ry
::
	$ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
)

151 
fú°Plugö_
 = 
∂ugö
->
	`addPlugö
(firstPlugin_);

152 
	}
}

154 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëFú°Plugö
()

156  
fú°Plugö_
;

157 
	}
}

159 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

161  
fú°Plugö_
->
	`gëPlugöByName
(
«me
);

162 
	}
}

164 
	gTe°Regi°ry
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

166 i‡(
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
Ë=fú°Plugö_Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

167 i‡(
fú°Plugö_
->
	`gëName
(Ë=
«me
Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

168 
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
);

169 
	}
}

171 
Uã°
* 
	gTe°Regi°ry
::
	$gëFú°Te°
()

173  
ã°s_
;

174 
	}
}

176 
Uã°
* 
	gTe°Regi°ry
::
	$gëLa°Te°
()

178 
Uã°
* 
cuºít
 = 
ã°s_
;

179 !
cuºít
->
	`gëNext
()->
	`isNuŒ
())

180 
cuºít
 = cuºít->
	`gëNext
();

181  
cuºít
;

182 
	}
}

184 
Uã°
* 
	gTe°Regi°ry
::
	$gëTe°WôhNext
(
Uã°
* 
ã°
)

186 
Uã°
* 
cuºít
 = 
ã°s_
;

187 !
cuºít
->
	`gëNext
()->
	`isNuŒ
(Ë&& cuºít->gëNext(Ë!
ã°
)

188 
cuºít
 = cuºít->
	`gëNext
();

189  
cuºít
;

190 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestResult.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Resu….h
"

30 
	~"CµUTe°/Te°Faûuª.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	gTe°Resu…
::
	$Te°Resu…
(
Te°Ouçut
& 
p
) :

35 
	`ouçut_
(
p
), 
	`ã°Cou¡_
(0), 
	`runCou¡_
(0), 
	`checkCou¡_
(0), 
	`ÁûuªCou¡_
(0), 
	`fûãªdOutCou¡_
(0), 
	`ign‹edCou¡_
(0), 
	`tŸÆExecuti⁄Time_
(0), 
	`timeSèπed_
(0), 
	`cuºítTe°TimeSèπed_
(0),

36 
	`cuºítTe°TŸÆExecuti⁄Time_
(0), 
	`cuºítGroupTimeSèπed_
(0), 
	$cuºítGroupTŸÆExecuti⁄Time_
(0)

38 
	}
}

40 
	gTe°Resu…
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

42 
ouçut_
.
	`£tProgªssIndiˇt‹
(
ödiˇt‹
);

43 
	}
}

45 
	gTe°Resu…
::~
	$Te°Resu…
()

47 
	}
}

49 
Te°Resu…
::
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

51 
ouçut_
.
	`¥ötCuºítGroupSèπed
(*
ã°
);

52 
cuºítGroupTimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

53 
	}
}

55 
	gTe°Resu…
::
	$cuºítGroupEnded
(
Uã°
* )

57 
cuºítGroupTŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítGroupTimeSèπed_
;

58 
ouçut_
.
	`¥ötCuºítGroupEnded
(*
this
);

59 
	}
}

61 
	gTe°Resu…
::
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

63 
ouçut_
.
	`¥ötCuºítTe°Sèπed
(*
ã°
);

64 
cuºítTe°TimeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

65 
	}
}

67 
	gTe°Resu…
::
	$¥öt
(c⁄° * 
ãxt
)

69 
ouçut_
.
	`¥öt
(
ãxt
);

70 
	}
}

72 
	gTe°Resu…
::
	$cuºítTe°Ended
(
Uã°
* )

74 
cuºítTe°TŸÆExecuti⁄Time_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
(Ë- 
cuºítTe°TimeSèπed_
;

75 
ouçut_
.
	`¥ötCuºítTe°Ended
(*
this
);

77 
	}
}

79 
	gTe°Resu…
::
	$addFaûuª
(c⁄° 
Te°Faûuª
& 
Áûuª
)

81 
ouçut_
.
	`¥öt
(
Áûuª
);

82 
ÁûuªCou¡_
++;

83 
	}
}

85 
	gTe°Resu…
::
	$cou¡Te°
()

87 
ã°Cou¡_
++;

88 
	}
}

90 
	gTe°Resu…
::
	$cou¡Run
()

92 
runCou¡_
++;

93 
	}
}

95 
	gTe°Resu…
::
	$cou¡Check
()

97 
checkCou¡_
++;

98 
	}
}

100 
	gTe°Resu…
::
	$cou¡FûãªdOut
()

102 
fûãªdOutCou¡_
++;

103 
	}
}

105 
	gTe°Resu…
::
	$cou¡Ign‹ed
()

107 
ign‹edCou¡_
++;

108 
	}
}

110 
	gTe°Resu…
::
	$ã°sSèπed
()

112 
timeSèπed_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

113 
ouçut_
.
	`¥ötTe°sSèπed
();

114 
	}
}

116 
	gTe°Resu…
::
	$ã°sEnded
()

118 
timeEnded
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

119 
tŸÆExecuti⁄Time_
 = 
timeEnded
 - 
timeSèπed_
;

120 
ouçut_
.
	`¥ötTe°sEnded
(*
this
);

121 
	}
}

123 
	gTe°Resu…
::
	$gëTŸÆExecuti⁄Time
() const

125  
tŸÆExecuti⁄Time_
;

126 
	}
}

128 
	gTe°Resu…
::
	$£tTŸÆExecuti⁄Time
(
exTime
)

130 
tŸÆExecuti⁄Time_
 = 
exTime
;

131 
	}
}

133 
	gTe°Resu…
::
	$gëCuºítTe°TŸÆExecuti⁄Time
() const

135  
cuºítTe°TŸÆExecuti⁄Time_
;

136 
	}
}

138 
	gTe°Resu…
::
	$gëCuºítGroupTŸÆExecuti⁄Time
() const

140  
cuºítGroupTŸÆExecuti⁄Time_
;

141 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\Utest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

37 ˛as†
	cOutsideTe°Ru¬îUTe°
: 
public
 
Uã°


39 
public
:

40 
OutsideTe°Ru¬îUTe°
& 
	$ö°™˚
()

42 
OutsideTe°Ru¬îUTe°
 
ö°™˚_
;

43  
ö°™˚_
;

45 
vútuÆ
 
Te°Resu…
& 
	$gëTe°Resu…
()

47  
deÁu…Te°Resu…
;

48 
	}
}

49 
vútuÆ
 
	$exôCuºítTe°
()

51 
	}
}

52 
	gvútuÆ
 ~
	$OutsideTe°Ru¬îUTe°
()

54 
	}
}

55 
	g¥iv©e
:

56 
	$OutsideTe°Ru¬îUTe°
() :

57 
	`Uã°
("\n\t NOTE: Assertion happened without being ináÅestÑun (perhaps in main?)", "\n\t Something is very wrong. CheckÅhisássertionánd fix", "unknown file", 0),

58 
	$deÁu…Te°Resu…
(
deÁu…Ouçut
)

60 
	}
}

61 
C⁄sﬁeTe°Ouçut
 
	gdeÁu…Ouçut
;

62 
Te°Resu…
 
	gdeÁu…Te°Resu…
;

66 
	gUã°
::
	$Uã°
() :

67 
	`group_
("UndeföedTe°Group"), 
	`«me_
("UndeföedTe°"), 
	`fûe_
("UndeföedFûe"), 
	`löeNumbî_
(0), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

69 
	}
}

71 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
) :

72 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

74 
	}
}

76 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Uã°
* 
√xtTe°
) :

77 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	$√xt_
(
√xtTe°
)

79 
	}
}

81 
	gUã°
::~
	$Uã°
()

83 
	}
}

85 
Uã°
::
	$runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

87 
	`execuãPœtf‹mS≥cificRunO√Te°
(
∂ugö
, 
ªsu…
);

88 
	}
}

90 
	gUã°
::
	$runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

92 
∂ugö
->
	`runAŒPªTe°A˘i⁄
(*
this
, 
ªsu…
);

93 
	`run
(
ªsu…
);

94 
∂ugö
->
	`runAŒPo°Te°A˘i⁄
(*
this
, 
ªsu…
);

95 
	}
}

97 
	gUã°
::
	$run
(
Te°Resu…
& 
ªsu…
)

100 
Uã°
* 
ßvedTe°
 = 
	`gëCuºít
();

101 
Te°Resu…
* 
ßvedResu…
 = 
	`gëTe°Resu…
();

103 
ªsu…
.
	`cou¡Run
();

104 
	`£tTe°Resu…
(&
ªsu…
);

105 
	`£tCuºítTe°
(
this
);

107 i‡(
	`execuãPœtf‹mS≥cificSëup
()) {

108 
	`execuãPœtf‹mS≥cificTe°Body
();

110 
	`execuãPœtf‹mS≥cificTórdown
();

112 
	`£tCuºítTe°
(
ßvedTe°
);

113 
	`£tTe°Resu…
(
ßvedResu…
);

114 
	}
}

116 
	gUã°
::
	$exôCuºítTe°
()

118 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

119 
	}
}

121 
Uã°
 *
	gUã°
::
	$gëNext
() const

123  
√xt_
;

124 
	}
}

126 
Uã°
* 
	gUã°
::
	$addTe°
(
Uã°
 *
ã°
)

128 
√xt_
 = 
ã°
;

129  
this
;

130 
	}
}

132 
	gUã°
::
	$cou¡Te°s
()

134  
√xt_
->
	`cou¡Te°s
() + 1;

135 
	}
}

137 
boﬁ
 
	gUã°
::
	$isNuŒ
() const

139  
Ál£
;

140 
	}
}

142 
Sim∂eSåög
 
	gUã°
::
	$gëMa¸oName
() const

145 
	}
}

147 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëName
() const

149  
	`Sim∂eSåög
(
«me_
);

150 
	}
}

152 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëGroup
() const

154  
	`Sim∂eSåög
(
group_
);

155 
	}
}

157 
Sim∂eSåög
 
	gUã°
::
	$gëF‹m©ãdName
() const

159 
Sim∂eSåög
 
	`f‹m©ãdName
(
	`gëMa¸oName
());

160 
f‹m©ãdName
 += "(";

161 
f‹m©ãdName
 +
group_
;

162 
f‹m©ãdName
 += ", ";

163 
f‹m©ãdName
 +
«me_
;

164 
f‹m©ãdName
 += ")";

166  
f‹m©ãdName
;

167 
	}
}

169 c⁄° * 
	gUã°
::
	$gëProgªssIndiˇt‹
() const

172 
	}
}

174 
	gUã°
::
	$£tFûeName
(c⁄° * 
fûeName
)

176 
fûe_
 = 
fûeName
;

177 
	}
}

179 
	gUã°
::
	$£tLöeNumbî
(
löeNumbî
)

181 
löeNumbî_
 = 
löeNumbî
;

182 
	}
}

184 
	gUã°
::
	$£tGroupName
(c⁄° * 
groupName
)

186 
group_
 = 
groupName
;

187 
	}
}

189 
	gUã°
::
	$£tTe°Name
(c⁄° * 
ã°Name
)

191 
«me_
 = 
ã°Name
;

192 
	}
}

194 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëFûe
() const

196  
	`Sim∂eSåög
(
fûe_
);

197 
	}
}

199 
	gUã°
::
	$gëLöeNumbî
() const

201  
löeNumbî_
;

202 
	}
}

204 
	gUã°
::
	$£tup
()

206 
	}
}

208 
Uã°
::
	$ã°Body
()

210 
	}
}

212 
Uã°
::
	$ã¨down
()

214 
	}
}

216 
boﬁ
 
Uã°
::
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
, c⁄° Sim∂eSåög& 
«meFûãr
) const

218 
Sim∂eSåög
 
	`group
(
group_
);

219 
Sim∂eSåög
 
	`«me
(
«me_
);

220 i‡(
group
.
	`c⁄èös
(
groupFûãr
Ë&& 
«me
.c⁄èös(
«meFûãr
)Ë 
åue
;

222  
Ál£
;

223 
	}
}

225 
	gUã°
::
	$ÁûWôh
(c⁄° 
Te°Faûuª
& 
Áûuª
)

227 
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

228 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

229 
	}
}

231 
	gUã°
::
	$as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
, c⁄° * 
fûeName
, 
löeNumbî
)

233 
	`gëTe°Resu…
()->
	`cou¡Check
();

234 i‡(!
c⁄dôi⁄
)

235 
	`ÁûWôh
(
	`CheckFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
c⁄dôi⁄Såög
));

236 
	}
}

238 
	gUã°
::
	$Áû
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

240 
	`ÁûWôh
(
	`FaûFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ãxt
));

241 
	}
}

243 
	gUã°
::
	$as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

245 
	`gëTe°Resu…
()->
	`cou¡Check
();

246 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

247 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

248 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

249 i‡(
	`Pœtf‹mS≥cificSåCmp
(
ex≥˘ed
, 
a˘uÆ
) != 0)

250 
	`ÁûWôh
(
	`SåögEquÆFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

251 
	}
}

253 
	gUã°
::
	$as£πC°rNoCa£EquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

255 
	`gëTe°Resu…
()->
	`cou¡Check
();

256 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

257 i‡(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

258 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

259 i‡(!
	`Sim∂eSåög
(
ex≥˘ed
).
	`equÆsNoCa£
(
a˘uÆ
))

260 
	`ÁûWôh
(
	`SåögEquÆNoCa£Faûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

261 
	}
}

263 
	gUã°
::
	$as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

265 
	`gëTe°Resu…
()->
	`cou¡Check
();

266 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

267 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

268 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

269 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èös
(
ex≥˘ed
))

270 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

271 
	}
}

273 
	gUã°
::
	$as£πC°rNoCa£C⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

275 
	`gëTe°Resu…
()->
	`cou¡Check
();

276 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 == 0) ;

277 if(
a˘uÆ
 =0 || 
ex≥˘ed
 == 0)

278 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

279 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èösNoCa£
(
ex≥˘ed
))

280 
	`ÁûWôh
(
	`C⁄èösFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
));

281 
	}
}

283 
	gUã°
::
	$as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

285 
	`gëTe°Resu…
()->
	`cou¡Check
();

286 i‡(
ex≥˘ed
 !
a˘uÆ
) {

287 
L⁄gsEquÆFaûuª
 
	`f
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

288 
	`gëTe°Resu…
()->
	`addFaûuª
(
f
);

289 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
();

291 
	}
}

293 
	gUã°
::
	$as£πPoöãrsEquÆ
(* 
ex≥˘ed
, * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
)

295 
	`gëTe°Resu…
()->
	`cou¡Check
();

296 i‡(
ex≥˘ed
 !
a˘uÆ
)

297 
	`ÁûWôh
(
	`EquÆsFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)));

298 
	}
}

300 
	gUã°
::
	$as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

302 
	`gëTe°Resu…
()->
	`cou¡Check
();

303 i‡(
	`Pœtf‹mS≥cificFabs
(
ex≥˘ed
 - 
a˘uÆ
Ë> 
thªshﬁd
)

304 
	`ÁûWôh
(
	`EquÆsFaûuª
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)));

305 
	}
}

307 
	gUã°
::
	$¥öt
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

309 
Sim∂eSåög
 
°rögToPröt
 = "\n";

310 
°rögToPröt
 +
fûeName
;

311 
°rögToPröt
 += ":";

312 
°rögToPröt
 +
	`SåögFrom
(
löeNumbî
);

313 
°rögToPröt
 += " ";

314 
°rögToPröt
 +
ãxt
;

315 
	`gëTe°Resu…
()->
	`¥öt
(
°rögToPröt
.
	`asCh¨Såög
());

316 
	}
}

318 
	gUã°
::
	$¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

320 
	`¥öt
(
ãxt
.
	`asCh¨Såög
(), 
fûeName
, 
löeNumbî
);

321 
	}
}

323 
Te°Resu…
* 
	gUã°
::
ã°Resu…_
 = 
NULL
;

324 
Uã°
* 
	gUã°
::
cuºítTe°_
 = 
NULL
;

326 
	gUã°
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

328 
ã°Resu…_
 = 
ªsu…
;

329 
	}
}

331 
	gUã°
::
	$£tCuºítTe°
(
Uã°
* 
ã°
)

333 
cuºítTe°_
 = 
ã°
;

334 
	}
}

336 
Te°Resu…
* 
	gUã°
::
	$gëTe°Resu…
()

338 i‡(
ã°Resu…_
 =
NULL
)

339  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
().
	`gëTe°Resu…
();

340  
ã°Resu…_
;

341 
	}
}

343 
Uã°
* 
	gUã°
::
	$gëCuºít
()

345 i‡(
cuºítTe°_
 =
NULL
)

346  &
OutsideTe°Ru¬îUTe°
::
	`ö°™˚
();

347  
cuºítTe°_
;

348 
	}
}

353 
	gNuŒTe°
::
	$NuŒTe°
() :

354 
	`Uã°
("NullGroup", "NullName", "NullFile", -1, 0)

356 
	}
}

358 
	gNuŒTe°
::
	$NuŒTe°
(c⁄° * 
fûeName
, 
löeNumbî
) :

359 
	`Uã°
("NuŒGroup", "NuŒName", 
fûeName
, 
löeNumbî
, 0)

361 
	}
}

363 
	gNuŒTe°
::~
	$NuŒTe°
()

365 
	}
}

367 
NuŒTe°
& NuŒTe°::
	$ö°™˚
()

369 
NuŒTe°
 
_ö°™˚
;

370  
_ö°™˚
;

371 
	}
}

373 
	gNuŒTe°
::
	$cou¡Te°s
()

376 
	}
}

378 
Uã°
* 
	gNuŒTe°
::
	$gëNext
() const

380  &
	`ö°™˚
();

381 
	}
}

383 
boﬁ
 
	gNuŒTe°
::
	$isNuŒ
() const

385  
åue
;

386 
	}
}

390 
	gTe°In°ÆÀr
::
	$Te°In°ÆÀr
(
Uã°
* 
t
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
)

392 
t
->
	`£tGroupName
(
groupName
);

393 
t
->
	`£tTe°Name
(
ã°Name
);

394 
t
->
	`£tFûeName
(
fûeName
);

395 
t
->
	`£tLöeNumbî
(
löeNumbî
);

396 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`addTe°
(
t
);

397 
	}
}

399 
	gTe°In°ÆÀr
::~
	$Te°In°ÆÀr
()

401 
	}
}

403 
Te°In°ÆÀr
::
	$unDo
()

405 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`unDoLa°AddTe°
();

406 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp

28 
	~<°dlib.h
>

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 #unde‡
mÆloc


31 #unde‡
‰ì


32 #unde‡
ˇŒoc


33 #unde‡
ªÆloc


35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~<sys/time.h
>

37 
	~<time.h
>

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~<£tjmp.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

43 
	~<˘y≥.h
>

45 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

47 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

48 
	gjmp_buf_ödex
 = 0;

50 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

52 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

53 
jmp_buf_ödex
++;

54 
	`£tup
();

55 
jmp_buf_ödex
--;

56  
åue
;

58  
Ál£
;

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

63 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

64 
jmp_buf_ödex
++;

65 
	`ã°Body
();

66 
jmp_buf_ödex
--;

68 
	}
}

70 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

72 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

73 
jmp_buf_ödex
++;

74 
	`ã¨down
();

75 
jmp_buf_ödex
--;

77 
	}
}

79 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

81 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

82 
jmp_buf_ödex
++;

83 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

84 
jmp_buf_ödex
--;

86 
	}
}

88 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

90 
jmp_buf_ödex
--;

91 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

92 
	}
}

96 
	$TimeInMûlisIm∂emíèti⁄
()

98 
timevÆ
 
tv
;

99 
timez⁄e
 
tz
;

100 
	`gëtimeofday
(&
tv
, &
tz
);

101  (
tv
.
tv_£c
 * 1000Ë+ ()((Èv.
tv_u£c
 * 0.001);

102 
	}
}

104 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

106 
	$GëPœtf‹mS≥cificTimeInMûlis
()

108  
	`timeInMûlisFp
();

109 
	}
}

111 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

113 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

114 
	}
}

118 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

120 
time_t
 
tm
 = 
	`time
(
NULL
);

121  
	`˘ime
(&
tm
);

122 
	}
}

124 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

126 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

128  
	`timeSåögFp
();

129 
	}
}

131 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

133 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

136 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

138  
	`©oi
(
°r
);

139 
	}
}

141 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

143  
	`°æí
(
°r
);

144 
	}
}

146 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

148  
	`°rˇt
(
s1
, 
s2
);

149 
	}
}

151 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

153  
	`°r˝y
(
s1
, 
s2
);

154 
	}
}

156 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

158  
	`°∫˝y
(
s1
, 
s2
, 
size
);

159 
	}
}

161 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

163  
	`°rcmp
(
s1
, 
s2
);

164 
	}
}

166 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

168  
	`°∫cmp
(
s1
, 
s2
, 
size
);

169 
	}
}

170 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

172  (*Ë
	`°r°r
(
s1
, 
s2
);

173 
	}
}

175 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

177  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

178 
	}
}

180 
	$Pœtf‹mS≥cificToLowî
(
c
)

182  (Ë
	`tﬁowî
((Ë
c
);

183 
	}
}

185 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187  
	`f›í
(
fûíame
, 
Êag
);

188 
	}
}

191 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

193 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

194 
	}
}

196 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

198 
	`f˛o£
((
FILE
*)
fûe
);

199 
	}
}

201 
	$Pœtf‹mS≥cificFlush
()

203 
	`fÊush
(
°dout
);

204 
	}
}

206 
	$Pœtf‹mS≥cificPutch¨
(
c
)

208  
	`putch¨
(
c
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

213  
	`mÆloc
(
size
);

214 
	}
}

216 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

218  
	`ªÆloc
(
mem‹y
, 
size
);

219 
	}
}

221 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

223 
	`‰ì
(
mem‹y
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

228  
	`mem˝y
(
s1
, 
s2
, 
size
);

229 
	}
}

231 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

233  
	`mem£t
(
mem
, 
c
, 
size
);

234 
	}
}

237 
	$Pœtf‹mS≥cificFabs
(
d
)

239  
	`Ábs
(
d
);

240 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Iar\UtestPlatform.cpp

29 
	~<time.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<£tjmp.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~"CµUTe°/Te°H¨√ss.h
"

37 #unde‡
mÆloc


38 #unde‡
ˇŒoc


39 #unde‡
ªÆloc


40 #unde‡
‰ì


41 
	~"CµUTe°/Te°Regi°ry.h
"

42 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

44 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

45 
	gjmp_buf_ödex
 = 0;

47 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

49 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

50 
jmp_buf_ödex
++;

51 
	`£tup
();

52 
jmp_buf_ödex
--;

53  
åue
;

55  
Ál£
;

56 
	}
}

58 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

60 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

61 
jmp_buf_ödex
++;

62 
	`ã°Body
();

63 
jmp_buf_ödex
--;

65 
	}
}

67 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

69 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

70 
jmp_buf_ödex
++;

71 
	`ã¨down
();

72 
jmp_buf_ödex
--;

74 
	}
}

76 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

78 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

79 
jmp_buf_ödex
++;

80 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

81 
jmp_buf_ödex
--;

83 
	}
}

85 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

87 
jmp_buf_ödex
--;

88 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

89 
	}
}

93 
	$TimeInMûlisIm∂emíèti⁄
()

95 
˛ock_t
 
t
 = 
	`˛ock
();

97 
t
 =Å * 10;

100 
	}
}

102 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

104 
	$GëPœtf‹mS≥cificTimeInMûlis
()

106  
	`timeInMûlisFp
();

107 
	}
}

109 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

111 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

112 
	}
}

116 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

118 
time_t
 
tm
 = 
	`time
(
NULL
);

119  
	`˘ime
(&
tm
);

120 
	}
}

122 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

124 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

126  
	`timeSåögFp
();

127 
	}
}

129 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

131 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

134 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

136  
	`©oi
(
°r
);

137 
	}
}

139 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

141  
	`°æí
(
°r
);

142 
	}
}

144 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

146  
	`°rˇt
(
s1
, 
s2
);

147 
	}
}

149 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

151  
	`°r˝y
(
s1
, 
s2
);

152 
	}
}

154 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

156  
	`°∫˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

161  
	`°rcmp
(
s1
, 
s2
);

162 
	}
}

164 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

166  
	`°∫cmp
(
s1
, 
s2
, 
size
);

167 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  
	`°r°r
((*)
s1
, (*)
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
	$Pœtf‹mS≥cificToLowî
(
c
)

181  
	`tﬁowî
(
c
);

182 
	}
}

184 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

187 
	}
}

189 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

191 
	}
}

193 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

195 
	}
}

197 
	$Pœtf‹mS≥cificFlush
()

199 
	}
}

201 
	$Pœtf‹mS≥cificPutch¨
(
c
)

203  
	`putch¨
(
c
);

204 
	}
}

206 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

208  
	`mÆloc
(
size
);

209 
	}
}

211 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

213  
	`ªÆloc
(
mem‹y
, 
size
);

214 
	}
}

216 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

218 
	`‰ì
(
mem‹y
);

219 
	}
}

221 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

223  
	`mem˝y
(
s1
, 
s2
, 
size
);

224 
	}
}

226 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

228  
	`mem£t
(
mem
, 
c
, 
size
);

229 
	}
}

231 
	$Pœtf‹mS≥cificFabs
(
d
)

233  
	`Ábs
(
d
);

234 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp

28 
	~"CµUTe°/Mem‹yLókW¨nög.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

34 
	gÆloˇãdBlocks
 = 0;

35 
	gÆloˇãdAºays
 = 0;

36 
	gfú°InôülBlocks
 = 0;

37 
	gfú°InôülAºays
 = 0;

38 
boﬁ
 
	gªp‹ãrRegi°îed
 = 
Ál£
;

40 ˛as†
	cMem‹yLókW¨nögD©a


42 
	mpublic
:

43 
Mem‹yLókW¨nögD©a
();

45 
	möôülBlocksU£d
;

46 
	möôülAºaysU£d
;

48 
	mblockUßgeCheckPoöt
;

49 
	m¨øyUßgeCheckPoöt
;

50 
	mex≥˘Cou¡
;

51 
	mmesßge
[100];

54 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

56 
_im∂
 = (
Mem‹yLókW¨nögD©a
*Ë
	`mÆloc
((MemoryLeakWarningData));

57 
_im∂
->
öôülBlocksU£d
 = 0;

58 
_im∂
->
öôülAºaysU£d
 = 0;

60 
_im∂
->
blockUßgeCheckPoöt
 = 0;

61 
_im∂
->
¨øyUßgeCheckPoöt
 = 0;

62 
_im∂
->
ex≥˘Cou¡
 = 0;

63 
_im∂
->
mesßge_
[0] = '\0';

64 
	}
}

66 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

68 
	`‰ì
(
_im∂
);

69 
	}
}

72 
ªp‹tMem‹yBÆœn˚
();

75 
	$ªp‹tMem‹yBÆœn˚
()

77 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
fú°InôülBlocks
;

78 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
fú°InôülAºays
;

79 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

81 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

82 
	`¥ötf
("NoÜeaks but someárrays were deleted without []\n");

85 i‡(
blockBÆ™˚
 > 0)

86 
	`¥ötf
("Mem‹yÜók! %d block†nŸ dñëed\n", 
blockBÆ™˚
);

87 i‡(
¨øyBÆ™˚
 > 0)

88 
	`¥ötf
("Mem‹yÜók! %dáºay†nŸ dñëed\n", 
¨øyBÆ™˚
);

89 i‡(
blockBÆ™˚
 < 0)

90 
	`¥ötf
("M‹êblock†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
blockBÆ™˚
);

91 i‡(
¨øyBÆ™˚
 < 0)

92 
	`¥ötf
("M‹ê¨øy†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
¨øyBÆ™˚
);

94 
	`¥ötf
("NOTE - some memoryÜeaksáppearÅo beállocated staticsÅhatáreÇotÑeleased\n"

100 
	}
}

103 
Mem‹yLókW¨nög
* Mem‹yLókW¨nög::
_œã°
 = 
NULL
;

105 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

107 
_œã°
 = 
this
;

108 
	`Cª©eD©a
();

109 
	}
}

111 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

113 
	`De°royD©a
();

114 
	}
}

116 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

118  
_œã°
;

119 
	}
}

121 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

123 
_œã°
 = 
œã°
;

124 
	}
}

126 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

128 
_im∂
->
öôülBlocksU£d
 = 
ÆloˇãdBlocks
;

129 
_im∂
->
öôülAºaysU£d
 = 
ÆloˇãdAºays
;

131 i‡(!
ªp‹ãrRegi°îed
) {

132 
fú°InôülBlocks
 = 
ÆloˇãdBlocks
;

133 
fú°InôülAºays
 = 
ÆloˇãdAºays
;

134 
ªp‹ãrRegi°îed
 = 
åue
;

137 
	}
}

139 c⁄° * 
	gMem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

141 i‡(
_im∂
->
öôülBlocksU£d
 !(
ÆloˇãdBlocks
-
toBeDñëedLóks
)

142 || 
_im∂
->
öôülAºaysU£d
 !
ÆloˇãdAºays
 )

144 
	`¥ötf
("initial blocks=%d,állocated blocks=%d\ninitialárrays=%d,állocatedárrays=%d\n",

145 
_im∂
->
öôülBlocksU£d
, 
ÆloˇãdBlocks
, _im∂->
öôülAºaysU£d
, 
ÆloˇãdAºays
);

151 
	}
}

153 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

155 
_im∂
->
blockUßgeCheckPoöt
 = 
ÆloˇãdBlocks
;

156 
_im∂
->
¨øyUßgeCheckPoöt
 = 
ÆloˇãdAºays
;

157 
	}
}

159 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

161 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
;

162 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
;

164 i‡(
_im∂
->
ex≥˘Cou¡
 !0 && 
blockBÆ™˚
 + 
¨øyBÆ™˚
 == _impl->expectCount)

165  
Ál£
;

166 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

167  
Ál£
;

168 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

169 
	`•rötf
(
_im∂
->
mesßge_
, "NoÜeaks but someárrays were deleted without []\n");

172 
nch¨s
 = 0;

173 i‡(
_im∂
->
blockUßgeCheckPoöt
 !
ÆloˇãdBlocks
)

174 
nch¨s
 = 
	`•rötf
(
_im∂
->
mesßge_
, "thisÅestÜeaks %d blocks",

175 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
);

177 i‡(
_im∂
->
¨øyUßgeCheckPoöt
 !
ÆloˇãdAºays
)

178 
	`•rötf
(
_im∂
->
mesßge_
 + 
nch¨s
, "thisÅestÜeaks %dárrays",

179 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
);

181  
åue
;

182 
	}
}

184 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

186  
_im∂
->
mesßge_
;

187 
	}
}

189 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

191 
_im∂
->
ex≥˘Cou¡
 = 
n
;

192 
	}
}

196 * 
›î©‹
 
	$√w
(
size_t
 
size
)

198 
ÆloˇãdBlocks
++;

199  
	`mÆloc
(
size
);

200 
	}
}

202 
›î©‹
 
	$dñëe
(* 
mem
)

204 
ÆloˇãdBlocks
--;

205 
	`‰ì
(
mem
);

206 
	}
}

208 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

210 
	gÆloˇãdAºays
++;

211  
mÆloc
(
size
);

214 
›î©‹
 
	gdñëe
[](* 
	gmem
)

216 
	gÆloˇãdAºays
--;

217 
‰ì
(
mem
);

220 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

222 
ÆloˇãdBlocks
++;

223  
	`mÆloc
(
size
);

225 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°/Te°Resu….h
"

4 
	~<time.h
>

5 
	~<sys/time.h
>

7 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

9 
	`ã°Body
();

10 
	}
}

15 
	$TimeInMûlisIm∂emíèti⁄
()

17 
timevÆ
 
tv
;

18 
timez⁄e
 
tz
;

19 ::
	`gëtimeofday
(&
tv
, &
tz
);

20  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

21 
	}
}

23 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

25 
	$GëPœtf‹mS≥cificTimeInMûlis
()

27  
	`timeInMûlisFp
();

28 
	}
}

30 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

32 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

33 
	}
}

37 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
()

39 
time_t
 
tm
 = 
	`time
(
NULL
);

40  
	`˘ime
(&
tm
);

41 
	}
}

43 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

45 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
()

47  
	`timeSåögFp
();

48 
	}
}

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ())

52 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

53 
	}
}

56 
	~<£tjmp.h
>

58 
jmp_buf
 
	gã°_exô_jmp_buf
;

60 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
))

63 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

64 
	}
}

66 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

68 
	`l⁄gjmp
(
ã°_exô_jmp_buf
, 1);

69 
	}
}

71 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

73 
	}
}

75 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp

28 
	~"Mem‹yLókW¨nög.h
"

30 
	~<e32ba£.h
>

32 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
_œã°
 = 
NULL
;

35 ˛as†
	cMem‹yLókW¨nögD©a
 : 
public
 
CBa£
 {

36 
public
:

37 
TI¡
 
iInôülAŒocCñls
;

38 
TI¡
 
	miEx≥˘edLóks
;

39 
TI¡
 
	miInôülThªadH™dÀCou¡
;

40 
TI¡
 
	miInôülPro˚ssH™dÀCou¡
;

43 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

45 
_œã°
 = 
this
;

46 
	`Cª©eD©a
();

47 
	}
}

49 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

51 
	`De°royD©a
();

52 
	}
}

54 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

56 
	}
}

58 c⁄° * 
Mem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

60 
TI¡
 
	`˚ŒDif„ªn˚
(
U£r
::
	`Cou¡AŒocCñls
(Ë- 
_im∂
->
iInôülAŒocCñls
);

61 if–
˚ŒDif„ªn˚
 !
toBeDñëedLóks
 ) {

65 
TI¡
 
¥o˚ssH™dÀs
;

66 
TI¡
 
thªadH™dÀs
;

67 
	`RThªad
().
	`H™dÀCou¡
(
¥o˚ssH™dÀs
, 
thªadH™dÀs
);

69 if(
_im∂
->
iInôülPro˚ssH™dÀCou¡
 !
¥o˚ssH™dÀs
 ||

70 
_im∂
->
iInôülThªadH™dÀCou¡
 !
thªadH™dÀs
) {

75 
	}
}

77 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

79 
_im∂
->
iInôülAŒocCñls
 = 
U£r
::
	`Cou¡AŒocCñls
();

80 
	`RThªad
().
	`H™dÀCou¡
(
_im∂
->
iInôülPro˚ssH™dÀCou¡
, _im∂->
iInôülThªadH™dÀCou¡
);

81 
	}
}

83 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

85 
TI¡
 
	`ÆloˇãdCñls
(
U£r
::
	`Cou¡AŒocCñls
());

86 if(
_im∂
->
iEx≥˘edLóks
 != 0) {

87 
TI¡
 
	`dif„ªn˚
(
	`Abs
(
_im∂
->
iInôülAŒocCñls
 - 
ÆloˇãdCñls
));

88  
dif„ªn˚
 !
_im∂
->
iEx≥˘edLóks
;

90  
ÆloˇãdCñls
 !
_im∂
->
iInôülAŒocCñls
;

91 
	}
}

93 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

96 
	}
}

98 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

100 
_im∂
->
iEx≥˘edLóks
 = 
n
;

101 
	}
}

104 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

106 
_im∂
 = 
	`√w
(
ELóve
Ë
	`Mem‹yLókW¨nögD©a
();

107 
	}
}

109 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

111 
dñëe
 
_im∂
;

112 
_im∂
 = 
NULL
;

113 
	}
}

115 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

117  
_œã°
;

118 
	}
}

120 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

122 
_œã°
 = 
œã°
;

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~<e32def.h
>

30 
	~<e32°d.h
>

31 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<°dlib.h
>

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

39 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

41 
TI¡
 
	`îr
(
KEºN⁄e
);

42 
	`TRAP
(
îr
, 
	`ã°Body
());

43 if(
îr
 !
KEºN⁄e
) {

44 
Uã°
::
	`gëCuºít
()->
	`Áû
("Leave inÅest method", "", 0);

46 
	}
}

48 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
() {

49 
U£r
::
	`Lóve
(
KEºN⁄e
);

50 
	}
}

52 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
() {

53 
	`£tup
();

54  
åue
;

55 
	}
}

57 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
) {

58 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
() {

62 
	`ã¨down
();

63 
	}
}

65 
	$TimeInMûlisIm∂emíèti⁄
() {

66 
timevÆ
 
tv
;

67 
timez⁄e
 
tz
;

68 ::
	`gëtimeofday
(&
tv
, &
tz
);

69  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

70 
	}
}

72 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

74 
	$GëPœtf‹mS≥cificTimeInMûlis
() {

75  
	`timeInMûlisFp
();

76 
	}
}

78 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ()) {

79 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

80 
	}
}

84 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
() {

85 
time_t
 
tm
 = 
	`time
(
NULL
);

86  
	`˘ime
(&
tm
);

87 
	}
}

89 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

91 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
() {

92  
	`timeSåögFp
();

93 
	}
}

95 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ()) {

96 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

97 
	}
}

99 
	$Pœtf‹mS≥cificVSN¥ötf
(* 
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
) {

100  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

101 
	}
}

103 
	$Pœtf‹mS≥cificToLowî
(
c
)

105  
	`tﬁowî
(
c
);

106 
	}
}

108 
	$Pœtf‹mS≥cificFlush
() {

109 
	`fÊush
(
°dout
);

110 
	}
}

112 
	$Pœtf‹mS≥cificPutch¨
(
c
) {

113  
	`putch¨
(
c
);

114 
	}
}

116 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
) {

117  
	`°r˝y
(
s1
, 
s2
);

118 
	}
}

120 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
s
) {

121  
	`°æí
(
s
);

122 
	}
}

124 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
) {

125  
	`°r°r
(
s1
, 
s2
);

126 
	}
}

128 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

129  
	`°rcmp
(
s1
, 
s2
);

130 
	}
}

132 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

137  
	`°∫cmp
(
s1
, 
s2
, 
size
);

138 
	}
}

140 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
) {

141  
	`°rˇt
(
s1
, 
s2
);

142 
	}
}

144 
	$Pœtf‹mS≥cificFabs
(
d
) {

145  
	`Ábs
(
d
);

146 
	}
}

148 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
) {

149  
	`mÆloc
(
size
);

150 
	}
}

152 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
) {

153  
	`ªÆloc
(
mem‹y
, 
size
);

154 
	}
}

156 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
) {

157 
	`‰ì
(
mem‹y
);

158 
	}
}

160 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
) {

161  
	`mem˝y
(
s1
, 
s2
, 
size
);

162 
	}
}

164 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

166  
	`mem£t
(
mem
, 
c
, 
size
);

167 
	}
}

169 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
) {

170  
	`f›í
(
fûíame
, 
Êag
);

171 
	}
}

173 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
) {

174 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
) {

178 
	`f˛o£
((
FILE
*)
fûe
);

179 
	}
}

181 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
) {

182  
	`©oi
(
°r
);

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp

1 
	~<°dlib.h
>

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 #unde‡
mÆloc


4 #unde‡
‰ì


5 #unde‡
ˇŒoc


6 #unde‡
ªÆloc


8 
	~"CµUTe°/Te°Regi°ry.h
"

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<£tjmp.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

14 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

16 
	~<wödows.h
>

17 
	~<mmsy°em.h
>

21 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

22 
	gjmp_buf_ödex
 = 0;

24 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

26 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

27 
jmp_buf_ödex
++;

28 
	`£tup
();

29 
jmp_buf_ödex
--;

30  
åue
;

32  
Ál£
;

33 
	}
}

35 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

37 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

38 
jmp_buf_ödex
++;

39 
	`ã°Body
();

40 
jmp_buf_ödex
--;

42 
	}
}

44 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

46 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

47 
jmp_buf_ödex
++;

48 
	`ã¨down
();

49 
jmp_buf_ödex
--;

51 
	}
}

53 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö_
, 
Te°Resu…
& 
ªsu…_
)

55 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

56 
jmp_buf_ödex
++;

57 
	`runO√Te°
(
∂ugö_
, 
ªsu…_
);

58 
jmp_buf_ödex
--;

60 
	}
}

62 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

64 
jmp_buf_ödex
--;

65 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

66 
	}
}

72 
	$TimeInMûlisIm∂emíèti⁄
()

74  
	`timeGëTime
()/1000;

75 
	}
}

77 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

79 
	$GëPœtf‹mS≥cificTimeInMûlis
()

81  
	`timeInMûlisFp
();

82 
	}
}

84 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

86 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

87 
	}
}

91 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

94 
	}
}

96 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

98 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

100  
	`timeSåögFp
();

101 
	}
}

103 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

105 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

111 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

113  
	`©oi
(
°r
);

114 
	}
}

116 
size_t
 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

118  
	`°æí
(
°r
);

119 
	}
}

121 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

123  
	`°rˇt
(
s1
, 
s2
);

124 
	}
}

126 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

128  
	`°r˝y
(
s1
, 
s2
);

129 
	}
}

131 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

138  
	`°rcmp
(
s1
, 
s2
);

139 
	}
}

141 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

143  
	`°∫cmp
(
s1
, 
s2
, 
size
);

144 
	}
}

145 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

147  (*Ë
	`°r°r
(
s1
, 
s2
);

148 
	}
}

150 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

152 * 
buf
 = 0;

153 
sizeGuess
 = 
size
;

155 
ªsu…
 = 
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

156 
°r
[
size
-1] = 0;

157 
ªsu…
 == -1)

159 i‡(
buf
 != 0)

160 
	`‰ì
(
buf
);

161 
sizeGuess
 += 10;

162 
buf
 = (*)
	`mÆloc
(
sizeGuess
);

163 
ªsu…
 = 
	`_v¢¥ötf
–
buf
, 
sizeGuess
, 
f‹m©
, 
¨gs
);

166 i‡(
buf
 != 0)

167 
	`‰ì
(
buf
);

168  
ªsu…
;

170 
	}
}

172 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

174  
	`f›í
(
fûíame
, 
Êag
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

179 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

180 
	}
}

182 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

184 
	`f˛o£
((
FILE
*)
fûe
);

185 
	}
}

187 
	$Pœtf‹mS≥cificFlush
()

189 
	`fÊush
(
°dout
);

190 
	}
}

192 
	$Pœtf‹mS≥cificPutch¨
(
c
)

194  
	`putch¨
(
c
);

195 
	}
}

197 * 
	$Pœtf‹mS≥cificMÆloc
(
size_t
 
size
)

199  
	`mÆloc
(
size
);

200 
	}
}

202 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size_t
 
size
)

204  
	`ªÆloc
(
mem‹y
, 
size
);

205 
	}
}

207 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

209 
	`‰ì
(
mem‹y
);

210 
	}
}

212 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size_t
 
size
)

214  
	`mem˝y
(
s1
, 
s2
, 
size
);

215 
	}
}

217 * 
	$Pœtf‹mS≥cificMem£t
(* 
mem
, 
c
, 
size_t
 
size
)

219  
	`mem£t
(
mem
, 
c
, 
size
);

220 
	}
}

222 
	$Pœtf‹mS≥cificFabs
(
d
)

224  
	`Ábs
(
d
);

225 
	}
}

235 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…_
)

237 
åy
 {

238 
	`runO√Te°
(
ã°
, 
ªsu…_
) ;

240 
	`ˇtch
 () {

244 
	}
}

246 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

248 
	`ã°Body
();

249 
	}
}

251 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

253 
	`throw
(1);

254 
	}
}

258 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, * 
¨gs
)

260  
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, (
va_li°
Ë
¨gs
);

261 
	}
}

263 
	$Pœtf‹mS≥cificToLowî
(
c
)

265  
	`tﬁowî
(
c
);

266 
	}
}

270 
	~<£tjmp.h
>

272 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

273 
	gjmp_buf_ödex
 = 0;

275 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

277 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

278 
jmp_buf_ödex
++;

279 
	`£tup
();

280 
jmp_buf_ödex
--;

281  
åue
;

283  
Ál£
;

284 
	}
}

286 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

288 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

289 
jmp_buf_ödex
++;

290 
	`ã°Body
();

291 
jmp_buf_ödex
--;

293 
	}
}

295 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

297 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

298 
jmp_buf_ödex
++;

299 
	`ã¨down
();

300 
jmp_buf_ödex
--;

302 
	}
}

304 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

306 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

307 
jmp_buf_ödex
++;

308 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

309 
jmp_buf_ödex
--;

311 
	}
}

314 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

316 
jmp_buf_ödex
--;

317 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

318 
	}
}

334 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

336 
åy
 {

337 
	`£tup
();

339 
	`ˇtch
 () {

340  
Ál£
;

342  
åue
;

343 
	}
}

345 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

347 
åy
 {

348 
	`ã°Body
();

350 
	`ˇtch
 () {

353 
	}
}

355 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

357 
åy
 {

358 
	`ã¨down
();

360 
	`ˇtch
 () {

363 
	}
}

365 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

367 
	`throw
(1);

368 
	}
}

371 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

373 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

375 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	$maö
(
ac
, c⁄° ** 
av
)

33 
	`CHECK
(
åue
);

34 
	`LONGS_EQUAL
(1, 1);

36  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllTests.h

29 
IMPORT_TEST_GROUP
–
Uã°
);

30 
IMPORT_TEST_GROUP
–
Faûuª
);

31 
IMPORT_TEST_GROUP
–
Te°Ouçut
);

32 
IMPORT_TEST_GROUP
–
Sim∂eSåög
);

33 
IMPORT_TEST_GROUP
–
Te°In°ÆÀr
);

34 
IMPORT_TEST_GROUP
–
NuŒTe°
);

35 
IMPORT_TEST_GROUP
–
Mem‹yLókW¨nögTe°
);

36 
IMPORT_TEST_GROUP
–
Te°H¨√ss_c
);

37 
IMPORT_TEST_GROUP
–
Comm™dLöeTe°Ru¬î
);

38 
IMPORT_TEST_GROUP
–
JUnôOuçutTe°
);

39 
IMPORT_TEST_GROUP
–
Mem‹yLókDëe˘‹Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCFile.c

1 
	~<°dlib.h
>

2 
	~"AŒoˇti⁄InCFûe.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

7 * 
	$mÆlocAŒoˇti⁄
()

9  
	`mÆloc
(10UL);

10 
	}
}

12 
	$‰ìAŒoˇti⁄
(* 
mem‹y
)

14 
	`‰ì
(
mem‹y
);

15 
	}
}

17 #unde‡
‰ì


19 
	$‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
)

21 
	`‰ì
(
mem‹y
);

22 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCFile.h

1 #i‚de‡
ALLOCATIONINCFILE_H


2 
	#ALLOCATIONINCFILE_H


	)

4 * 
mÆlocAŒoˇti⁄
();

5 
‰ìAŒoˇti⁄
(* 
mem‹y
);

6 
‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCppFile.cpp

4 #unde‡
√w


5 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

7 * 
	$√wAŒoˇti⁄
()

9  
√w
 ;

10 
	}
}

12 * 
	$√wAºayAŒoˇti⁄
()

14  
√w
 [100];

15 
	}
}

17 #unde‡
√w


19 * 
	$√wAŒoˇti⁄WôhoutMa¸o
()

21  
√w
 ;

22 
	}
}

24 * 
	$√wAºayAŒoˇti⁄WôhoutMa¸o
()

26  
√w
 [100];

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCppFile.h

1 #i‚de‡
ALLOCATIONINCPPFILE_H


2 
	#ALLOCATIONINCPPFILE_H


	)

4 * 
√wAŒoˇti⁄
();

5 * 
√wAºayAŒoˇti⁄
();

7 * 
√wAŒoˇti⁄WôhoutMa¸o
();

8 * 
√wAºayAŒoˇti⁄WôhoutMa¸o
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CommandLineArgumentsTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

32 ˛as†
	cO±i⁄sPlugö
: 
public
 
Te°Plugö


34 
public
:

35 
	$O±i⁄sPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

36 
	$Te°Plugö
(
«me
)

39 ~
	$O±i⁄sPlugö
()

41 
	}
}

42 
boﬁ
 
	$∑r£Argumíts
(, const ** , )

44  
åue
;

45 
	}
}

48 
	$TEST_GROUP
(
Comm™dLöeArgumíts
)

50 
Comm™dLöeArgumíts
* 
¨gs
;

51 
O±i⁄sPlugö
* 
∂ugö
;

53 
	`£tup
()

55 
∂ugö
 = 
√w
 
	`O±i⁄sPlugö
("options");

57 
	`ã¨down
()

59 
dñëe
 
¨gs
;

60 
dñëe
 
∂ugö
;

63 
boﬁ
 
	`√wArgumítP¨£r
(
¨gc
, c⁄° ** 
¨gv
)

65 
¨gs
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
);

66  
¨gs
->
	`∑r£
(
∂ugö
);

68 
	}
};

70 
	$TEST
(
Comm™dLöeArgumíts
, 
Cª©e
)

72 
	}
}

74 
	$TEST
(
Comm™dLöeArgumíts
, 
vîbo£SëMu…ùÀP¨amëîs
)

76 c⁄° * 
¨gv
[] = { "tests.exe", "-v" };

77 
	`CHECK
(
	`√wArgumítP¨£r
(2, 
¨gv
));

78 
	`CHECK
(
¨gs
->
	`isVîbo£
());

79 
	}
}

81 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©Së
)

83 
¨gc
 = 2;

84 c⁄° * 
¨gv
[] = { "tests.exe", "-r3" };

85 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

86 
	`LONGS_EQUAL
(3, 
¨gs
->
	`gëRïótCou¡
());

87 
	}
}

89 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDif„ª¡P¨amëî
)

91 
¨gc
 = 3;

92 c⁄° * 
¨gv
[] = { "tests.exe", "-r", "4" };

93 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

94 
	`LONGS_EQUAL
(4, 
¨gs
->
	`gëRïótCou¡
());

95 
	}
}

97 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDeÁu…sToTwo
)

99 
¨gc
 = 2;

100 c⁄° * 
¨gv
[] = { "tests.exe", "-r" };

101 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

102 
	`LONGS_EQUAL
(2, 
¨gs
->
	`gëRïótCou¡
());

103 
	}
}

105 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãr
)

107 
¨gc
 = 3;

108 c⁄° * 
¨gv
[] = { "tests.exe", "-g", "group" };

109 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

110 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

111 
	}
}

113 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãrSameP¨amëî
)

115 
¨gc
 = 2;

116 c⁄° * 
¨gv
[] = { "tests.exe", "-ggroup" };

117 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

118 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

119 
	}
}

121 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãr
)

123 
¨gc
 = 3;

124 c⁄° * 
¨gv
[] = { "tests.exe", "-n", "name" };

125 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

126 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

127 
	}
}

129 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãrSameP¨amëî
)

131 
¨gc
 = 2;

132 c⁄° * 
¨gv
[] = { "tests.exe", "-nname" };

133 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

134 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

135 
	}
}

137 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçut
)

139 
¨gc
 = 2;

140 c⁄° * 
¨gv
[] = { "tests.exe", "-onormal" };

141 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

142 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

143 
	}
}

145 
	$TEST
(
Comm™dLöeArgumíts
, 
£tE˛sùeOuçut
)

147 
¨gc
 = 2;

148 c⁄° * 
¨gv
[] = { "tests.exe", "-oeclipse" };

149 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

150 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

151 
	}
}

153 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçutDif„ª¡P¨amëî
)

155 
¨gc
 = 3;

156 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "normal" };

157 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

158 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

159 
	}
}

161 
	$TEST
(
Comm™dLöeArgumíts
, 
£tJUnôOuçutDif„ª¡P¨amëî
)

163 
¨gc
 = 3;

164 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "junit" };

165 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

166 
	`CHECK
(
¨gs
->
	`isJUnôOuçut
());

167 
	}
}

169 
	$TEST
(
Comm™dLöeArgumíts
, 
£tOuçutToG¨bage
)

171 
¨gc
 = 3;

172 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "garbage" };

173 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

174 
	}
}

176 
	$TEST
(
Comm™dLöeArgumíts
, 
weúdP¨am©îsPrötsUßgeAndRëu∫sFÆ£
)

178 
¨gc
 = 2;

179 c⁄° * 
¨gv
[] = { "tests.exe", "-SomethingWeird" };

180 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

181 
	`STRCMP_EQUAL
("usage [-v] [-r#] [-g groupName] [-nÅestName] [-o{normal, junit}]\n",

182 
¨gs
->
	`ußge
());

183 
	}
}

185 
	$TEST
(
Comm™dLöeArgumíts
, 
∂ugöKnowsO±i⁄
)

187 
¨gc
 = 2;

188 c⁄° * 
¨gv
[] = { "tests.exe", "-pPluginOption" };

189 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(
∂ugö
);

190 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

191 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ªmovePlugöByName
("options");

192 
	}
}

194 
	$TEST
(
Comm™dLöeArgumíts
, 
checkDeÁu…Argumíts
)

196 
¨gc
 = 1;

197 c⁄° * 
¨gv
[] = { "tests.exe" };

198 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

199 
	`CHECK
(!
¨gs
->
	`isVîbo£
());

200 
	`LONGS_EQUAL
(1, 
¨gs
->
	`gëRïótCou¡
());

201 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

202 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

203 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

204 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CommandLineTestRunnerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Te°Plugö.h
"

34 
	$TEST_GROUP
(
Comm™dLöeTe°Ru¬î
)

36 
	`£tup
()

39 
	`ã¨down
()

42 
	}
};

44 
	$IGNORE_TEST
(
Comm™dLöeTe°Ru¬î
, 
HmmmmWh©ToWrôe
)

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

32 
	$maö
(
ac
, c⁄° ** 
av
)

34 
Mem‹yRï‹ãrPlugö
 
∂ugö
;

35 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
∂ugö
);

36  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\AllTests.h

29 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
CodeMem‹yRï‹tF‹m©ãr
)

38 
Mem‹yLókAŒoˇt‹
* 
cAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
√wAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

41 * 
mem‹y01
;

42 * 
mem‹y02
;

44 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

45 
Te°Resu…
* 
ã°Resu…
;

46 
CodeMem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
;

48 
	`£tup
()

50 
cAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

51 
√wAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

52 
√wAºayAŒoˇt‹

Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

53 
mem‹y01
 = (*) 0x01;

54 
mem‹y02
 = (*) 0x02;

56 
f‹m©ãr
 = 
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
cAŒoˇt‹
);

57 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

60 
	`ã¨down
()

62 
dñëe
 
ã°Resu…
;

63 
dñëe
 
f‹m©ãr
;

65 
	}
};

68 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

70 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

71 
	`TESTOUPUT_EQUAL
("\tvoid* file_9_1 = malloc(10);\n");

72 
	}
}

74 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

76 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

77 
ã°Ouçut
.
	`Êush
();

78 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "boo", 6);

79 
	`TESTOUPUT_EQUAL
("\tfree(file_9_1); /*át boo:6 */\n");

80 
	}
}

82 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
twoMÆlocAndTwoFªe
)

84 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 2);

85 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "boo", 4);

86 
ã°Ouçut
.
	`Êush
();

87 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "foo", 6);

88 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y02
, "bar", 8);

89 
	`TESTOUPUT_CONTAINS
("\tfree(file_2_1); /*át foo:6 */\n");

90 
	`TESTOUPUT_CONTAINS
("\tfree(boo_4_1); /*át bar:8 */\n");

91 
	}
}

93 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöSœh£s
)

95 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "dir/file", 2);

96 
	`TESTOUPUT_CONTAINS
("\tvoid* file_2");

97 
	}
}

99 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöDŸButU£Undîsc‹e
)

101 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "foo.cpp", 2);

102 
	`TESTOUPUT_CONTAINS
("foo_cpp");

103 
	}
}

105 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayAŒoˇt‹Gíî©esNewAºayCode
)

107 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

108 
	`TESTOUPUT_CONTAINS
("char* file_8_1 =Çew char[10]; /* usingÇew [] */");

109 
	}
}

111 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayGíî©esNewCode
)

113 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 6, 
mem‹y01
, "file", 4);

114 
	`TESTOUPUT_CONTAINS
("new char[6]; /* usingÇew */");

115 
	}
}

117 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAŒoˇt‹Gíî©esDñëeCode
)

119 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

120 
ã°Ouçut
.
	`Êush
();

121 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
mem‹y01
, "boo", 4);

122 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using deleteát boo:4 */");

123 
	}
}

125 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
DñëeNuŒW‹ksFöe
)

127 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
NULL
, "boo", 4);

128 
	`TESTOUPUT_CONTAINS
("delete [] NULL; /* using deleteát boo:4 */");

129 
	}
}

131 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAºayAŒoˇt‹Gíî©esDñëeAºayCode
)

133 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

134 
ã°Ouçut
.
	`Êush
();

135 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 
mem‹y01
, "boo", 4);

136 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using delete []át boo:4 */");

137 
	}
}

139 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögMÆlocOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

141 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

142 
ã°Ouçut
.
	`Êush
();

143 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "file", 8);

144 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

145 
	}
}

147 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

149 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

150 
ã°Ouçut
.
	`Êush
();

151 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

152 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

153 
	}
}

155 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eV¨übÀTwi˚Ex˚±WhíInANewTe°
)

157 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

158 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, *
this
);

159 
ã°Ouçut
.
	`Êush
();

160 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

161 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("char*"));

162 
	}
}

164 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°SèπGíî©esTESTcode
)

166 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

167 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

168 
	`TESTOUPUT_EQUAL
("*/\nTEST(groupName_memoryReport,ÅestName)\n{ /*át fileName:1 */\n");

169 
	}
}

171 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°EndGíî©esTESTcode
)

173 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

174 
f‹m©ãr
->
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

175 
	`TESTOUPUT_EQUAL
("}/*");

176 
	}
}

178 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Te°GroupGíî©esTe°GroupCode
)

180 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

181 
f‹m©ãr
->
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

182 
	`TESTOUPUT_EQUAL
("*/TEST_GROUP(groupName_memoryReport)\n{\n};\n/*");

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	$TEST_GROUP
(
Mem‹yRï‹tAŒoˇt‹
)

35 
	}
};

37 
	$TEST
(
Mem‹yRï‹tAŒoˇt‹
, 
Fun˘i⁄sAªF‹w¨dedF‹MÆlocAŒoˇt‹
)

39 
Mem‹yRï‹tAŒoˇt‹
 
Æloˇt‹
;

40 
Æloˇt‹
.
	`£tRólAŒoˇt‹
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

42 
	`CHECK
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
(Ë=
Æloˇt‹
.allocateMemoryLeakNodeSeparately());

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
N‹mÆMem‹yRï‹tF‹m©ãr
)

38 * 
mem‹y01
;

40 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

41 
Te°Resu…
* 
ã°Resu…
;

42 
N‹mÆMem‹yRï‹tF‹m©ãr
 
f‹m©ãr
;

44 
	`£tup
()

46 
mem‹y01
 = (*) 0x01;

47 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

50 
	`ã¨down
()

52 
dñëe
 
ã°Resu…
;

54 
	}
};

57 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

59 
f‹m©ãr
.
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 10, 
mem‹y01
, "file", 9);

60 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög mÆlo¯o‡size: 10Öoöãr: %∞© fûe:9\n", 
mem‹y01
).
	`asCh¨Såög
());

61 
	}
}

63 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

65 
f‹m©ãr
.
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem‹y01
, "boo", 6);

66 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög fªêo‡poöãr: %∞© boo:6\n", 
mem‹y01
).
	`asCh¨Såög
());

67 
	}
}

69 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Sèπs
)

71 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

72 
f‹m©ãr
.
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

73 
	`TESTOUPUT_EQUAL
("TEST(groupName, TestName)\n");

74 
	}
}

76 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Ends
)

78 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

79 
f‹m©ãr
.
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

80 
	`TESTOUPUT_EQUAL
("ENDTEST(groupName, TestName)\n");

81 
	}
}

83 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°GroupSèπs
)

85 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

86 
f‹m©ãr
.
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

87 
	`TESTOUPUT_EQUAL
("------------------------------TEST GROUP(groupName)-----------------------------\n");

88 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	~"CµUTe°Ext/MockSuµ‹t.h
"

34 
Mem‹yLókAŒoˇt‹
* 
	g¥eviousNewAŒoˇt‹
;

36 ˛as†
	cTemp‹¨yDeÁu…NewAŒoˇt‹


38 
Mem‹yLókAŒoˇt‹
* 
	m√wAŒoˇt‹
;

39 
	mpublic
:

40 
	$Temp‹¨yDeÁu…NewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
ﬁdAŒoˇt‹
)

42 
√wAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

43 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
ﬁdAŒoˇt‹
);

45 ~
	$Temp‹¨yDeÁu…NewAŒoˇt‹
()

47 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
);

48 
	}
}

51 
MockSuµ‹t
 
	gf‹m©ãrMock
;

52 
MockSuµ‹t
 
	gªp‹ãrMock
;

54 ˛as†
	cMockMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


56 
public
:

57 
vútuÆ
 
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

59 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

60 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

63 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

65 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

66 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

67 
	}
}

69 
vútuÆ
 
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

71 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

72 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

73 
	}
}

75 
vútuÆ
 
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

77 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

78 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

79 
	}
}

81 
vútuÆ
 
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
, * , const * , )

83 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

84 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

85 
	}
}

87 
vútuÆ
 
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * , const * , )

89 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

90 
f‹m©ãrMock
.
	`a˘uÆCÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

91 
	}
}

94 
MockMem‹yRï‹tF‹m©ãr
 
	gf‹m©ãrF‹PlugöTe°
;

96 ˛as†
	cMem‹yRï‹ãrPlugöUndîTe°
 : 
public
 
Mem‹yRï‹ãrPlugö


98 
public
:

99 
MockMem‹yRï‹tF‹m©ãr
 
mockF‹m©ãr
;

100 
Mem‹yRï‹tF‹m©ãr
* 
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

102 
ªp‹ãrMock
.
	`a˘uÆCÆl
("¸óãMem‹yF‹m©ãr").
	`wôhP¨amëî
("ty≥", 
ty≥
.
	`asCh¨Såög
());

103  
√w
 
MockMem‹yRï‹tF‹m©ãr
;

105 
	}
};

107 ˛as†
	cMem‹yLókAŒoˇt‹Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


109 
public
:

110 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

112  ((
Mem‹yLókAŒoˇt‹
*)
obje˘1
)->
	`«me
(Ë=((Mem‹yLókAŒoˇt‹*)
obje˘2
)->name();

114 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

116  ((
Mem‹yLókAŒoˇt‹
*)
obje˘
)->
	`«me
();

117 
	}
}

121 
	$TEST_GROUP
(
Mem‹yRï‹ãrPlugö
)

123 
Mem‹yRï‹ãrPlugöUndîTe°
* 
ªp‹ãr
;

124 
SåögBuf„rTe°Ouçut
 
ouçut
;

125 
Mem‹yLókAŒoˇt‹Com∑øt‹
 
memLókAŒoˇt‹Com∑øt‹
;

127 
Te°Resu…
* 
ªsu…
;

128 
Uã°
* 
ã°
;

130 
	`£tup
()

132 
¥eviousNewAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

133 
ªsu…
 = 
√w
 
	`Te°Resu…
(
ouçut
);

134 
ã°
 = 
√w
 
	`Uã°
("groupname", "testname", "filename", 1);

135 
ªp‹ãr
 = 
√w
 
Mem‹yRï‹ãrPlugöUndîTe°
;

137 
f‹m©ãrMock
.
	`ö°ÆlCom∑øt‹
("Mem‹yLókAŒoˇt‹", 
memLókAŒoˇt‹Com∑øt‹
);

139 
ªp‹ãrMock
.
	`dißbÀ
();

140 c⁄° *
cmd_löe
[] = {"-pmemoryreport=normal"};

141 
ªp‹ãr
->
	`∑r£Argumíts
(1, 
cmd_löe
, 0);

142 
ªp‹ãrMock
.
	`íabÀ
();

146 
	`ã¨down
()

148 
dñëe
 
ªp‹ãr
;

149 
dñëe
 
ã°
;

150 
dñëe
 
ªsu…
;

151 
f‹m©ãrMock
.
	`checkEx≥˘©i⁄s
();

152 
f‹m©ãrMock
.
	`ªmoveAŒCom∑øt‹s
();

153 
ªp‹ãrMock
.
	`checkEx≥˘©i⁄s
();

155 
	}
};

157 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
offRï‹tsNŸhög
)

159 
Mem‹yRï‹ãrPlugöUndîTe°
 
‰eshRï‹ãr
;

160 
‰eshRï‹ãr
.
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

161 * 
mem‹y
 = 
√w
 ;

162 
dñëe
 
mem‹y
;

163 
‰eshRï‹ãr
.
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

164 
	}
}

166 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mónögÀssArgumítsAªIgn‹ed
)

168 c⁄° *
cmd_löe
[] = {"-nothing", "-pnotmemoryreport=normal", "alsomeaningless", "-pmemoryreportnonsensebutnotus"};

169 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1Ë=
Ál£
);

170 
	}
}

172 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
comm™dLöeP¨amëîTu∫sOnN‹mÆLoggög
)

174 
ªp‹ãrMock
.
	`ex≥˘O√CÆl
("¸óãMem‹yF‹m©ãr").
	`wôhP¨amëî
("type", "normal");

176 c⁄° *
cmd_löe
[] = {"-nothing", "-pmemoryreport=normal", "alsomeaningless" };

177 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1));

178 
	}
}

180 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eTe°A˘i⁄Rï‹tsTe°
)

182 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

183 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

184 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

185 
	}
}

187 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°Te°A˘i⁄Rï‹tsTe°
)

189 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

190 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

192 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

193 
	}
}

195 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAŒoˇti⁄sAªRï‹ãdTe°
)

197 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

198 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

199 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

201 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

202 * 
mem‹y
 = 
√w
 ;

203 
dñëe
 
mem‹y
;

204 
	}
}

206 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
whíUsögO∆yMÆlocAŒoˇt‹NoOthîOfTheAŒoˇt‹sAªU£d
)

208 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

209 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

210 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

211 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

212 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

213 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

215 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

216 * 
mem‹y
 = 
	`mÆloc
(100);

217 
	`‰ì
(
mem‹y
);

218 
	}
}

220 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAºayAŒoˇti⁄sAªRï‹ãdTe°
)

222 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

223 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

224 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

226 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

227 * 
mem‹y
 = 
√w
 [100];

228 
dñëe
 [] 
mem‹y
;

229 
	}
}

231 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mÆlocAŒoˇti⁄sAªRï‹ãdTe°
)

233 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

234 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

235 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

236 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

237 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

239 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

240 * 
mem‹y
 = 
	`mÆloc
(100);

241 
	`‰ì
(
mem‹y
);

242 
	}
}

244 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
°¨tOfANewTe°WûlRï‹tTheTe°GroupSèπ
)

246 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

247 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

248 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

249 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

250 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

251 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

253 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

254 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

255 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

256 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

257 
	}
}

259 ˛as†
	cUã°F‹Mem‹yRï‹tögPlugögTe°
 : 
public
 
Uã°


261 
public
:

262 
	$Uã°F‹Mem‹yRï‹tögPlugögTe°
(c⁄° * 
grou≤ame
, 
Uã°
* 
ã°
Ë: 
	`Uã°
(groupname, "testname", "filename", 1,Åest)

266 
	}
};

268 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
ídOÁTe°GroupWûlRï‹tSo
)

270 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fouπhTe°
("dif„ª¡GroupName", 
NULL
);

271 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`thúdTe°
("dif„ª¡GroupName", &
fouπhTe°
);

272 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`£c⁄dTe°
("grou≤ame", &
thúdTe°
);

273 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fú°Te°
("grou≤ame", &
£c⁄dTe°
);

275 
f‹m©ãrMock
.
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
£c⁄dTe°
);

276 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

278 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
fú°Te°
, *
ªsu…
);

279 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
fú°Te°
, *
ªsu…
);

280 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

281 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

282 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
thúdTe°
, *
ªsu…
);

283 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
thúdTe°
, *
ªsu…
);

284 
	}
}

286 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eA˘i⁄Rïœ˚sAŒoˇt‹s
)

288 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

290 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

291 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

292 
	`CHECK
(
Æloˇt‹
 !
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

293 
	}
}

295 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°A˘i⁄Re°‹esAŒoˇt‹s
)

297 
f‹m©ãrMock
.
	`ign‹eOthîCÆls
();

299 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

300 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

301 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

302 
	`CHECK
(
Æloˇt‹
 =
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

303 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

33 
	~"Te°MockFaûuª.h
"

35 
	$TEST_GROUP
(
MockA˘uÆFun˘i⁄CÆl
)

37 
MockEx≥˘edFun˘i⁄sLi°
* 
em±yLi°
;

38 
MockEx≥˘edFun˘i⁄sLi°
* 
li°
;

39 
MockFaûuªRï‹ãr
* 
ªp‹ãr
;

41 
	`£tup
()

43 
em±yLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

45 
ªp‹ãr
 = 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
();

48 
	`ã¨down
()

50 
	`CHECK_NO_MOCK_FAILURE
();

51 
dñëe
 
em±yLi°
;

52 
dñëe
 
li°
;

54 
	}
};

56 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edCÆl
)

58 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
em±yLi°
);

59 
a˘uÆCÆl
.
	`wôhName
("unexpected");

61 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "u√x≥˘ed", *
li°
);

62 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

63 
	}
}

65 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edP¨amëîName
)

67 
MockEx≥˘edFun˘i⁄CÆl
 
ˇŒ1
;

68 
ˇŒ1
.
	`wôhName
("func");

69 
li°
->
	`addEx≥˘edCÆl
(&
ˇŒ1
);

71 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
li°
);

72 
a˘uÆCÆl
.
	`wôhName
("func").
	`wôhP¨amëî
("integer", 1);

74 
MockNamedVÆue
 
	`∑ømëî
("integer");

75 
∑ømëî
.
	`£tVÆue
(1);

77 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", 
∑ømëî
, *
li°
);

78 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

79 
	}
}

81 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
mu…ùÀSameFun˘i⁄sEx≥˘ögAndH≠≥nGøduÆly
)

83 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

84 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

85 
ˇŒ1
->
	`wôhName
("func");

86 
ˇŒ2
->
	`wôhName
("func");

87 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

88 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

90 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl1
(
ªp‹ãr
, *
li°
);

91 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl2
(
ªp‹ãr
, *
li°
);

93 
	`LONGS_EQUAL
(2, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

94 
a˘uÆCÆl1
.
	`wôhName
("func");

95 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

96 
a˘uÆCÆl2
.
	`wôhName
("func");

97 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

99 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆl


33 
	mpublic
:

34 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
(
vÆ
Ë: 
	$vÆue
(
vÆ
) {};

35 
vÆue
;

36 
	}
};

39 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


41 
public
:

42 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
() {}

43 
vútuÆ
 ~
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
(Ë{
	}
};

45 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

47  ((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘1
)->
vÆue
 =((Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl*)
obje˘2
)->value;

48 
	}
}

49 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

51  
	`SåögFrom
(((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘
)->
vÆue
);

52 
	}
}

56 
	$TEST_GROUP
(
MockNamedVÆueCom∑øt‹Rïosô‹y
)

58 
	}
};

60 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
gëCom∑øt‹F‹N⁄Exi°ögName
)

62 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

63 
	`POINTERS_EQUAL
(
NULL
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

64 
	}
}

66 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlCom∑øt‹
)

68 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

69 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

70 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥Name", 
com∑øt‹
);

71 
	`POINTERS_EQUAL
(&
com∑øt‹
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

72 
	}
}

74 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlMu…ùÀCom∑øt‹
)

76 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹1
, 
com∑øt‹2
, 
com∑øt‹3
;

77 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

78 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥1", 
com∑øt‹1
);

79 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥2", 
com∑øt‹2
);

80 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥3", 
com∑øt‹3
);

81 
	`POINTERS_EQUAL
(&
com∑øt‹3
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type3"));

82 
	`POINTERS_EQUAL
(&
com∑øt‹2
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type2"));

83 
	`POINTERS_EQUAL
(&
com∑øt‹1
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type1"));

84 
	}
}

86 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄CÆl
)

88 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
;

89 
	`£tup
 ()

91 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

93 
	`ã¨down
()

95 
dñëe
 
ˇŒ
;

97 
	}
};

99 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhoutP¨amëîSëOrNŸFound
)

101 
	`STRCMP_EQUAL
("", 
ˇŒ
->
	`gëP¨amëîTy≥
("n⁄exi°ög").
	`asCh¨Såög
());

102 
	`LONGS_EQUAL
(0, 
ˇŒ
->
	`gëP¨amëî
("n⁄exi°ög").
	`gëI¡VÆue
());

103 
	`CHECK
(!
ˇŒ
->
	`hasP¨amëîWôhName
("nonexisting"));

104 
	}
}

106 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhI¡egîP¨amëî
)

108 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

109 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

110 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

111 
	`CHECK
(
ˇŒ
->
	`hasP¨amëîWôhName
("integer"));

112 
	}
}

114 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhDoubÀP¨amëî
)

116 
ˇŒ
->
	`wôhP¨amëî
("double", 1.2);

117 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

118 
	`DOUBLES_EQUAL
(1.2, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

119 
	}
}

121 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhSåögP¨amëî
)

123 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

124 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

125 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhPoöãrP¨amëî
)

130 * 
±r
 = (*) 0x123;

131 
ˇŒ
->
	`wôhP¨amëî
("poöãr", 
±r
);

132 
	`STRCMP_EQUAL
("void*", 
ˇŒ
->
	`gëP¨amëîTy≥
("poöãr").
	`asCh¨Såög
());

133 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("poöãr").
	`gëPoöãrVÆue
());

134 
	}
}

136 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëî
)

138 * 
±r
 = (*) 0x123;

139 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("˛ass", "obje˘", 
±r
);

140 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("obje˘").
	`gëObje˘Poöãr
());

141 
	`STRCMP_EQUAL
("˛ass", 
ˇŒ
->
	`gëP¨amëîTy≥
("obje˘").
	`asCh¨Såög
());

142 
	}
}

144 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîU√quÆCom∑ris⁄
)

146 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`u√quÆTy≥
(2);

147 
MockNamedVÆue
 
	`∑ømëî
 ("name");

148 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
u√quÆTy≥
);

149 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

150 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

151 
	}
}

153 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutRïosô‹y
)

155 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

156 
MockNamedVÆue
 
	`∑ømëî
 ("name");

157 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

158 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

159 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

160 
	}
}

162 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutCom∑øt‹
)

164 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

165 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

167 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

168 
MockNamedVÆue
 
	`∑ømëî
 ("name");

169 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

170 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

171 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

172 
	}
}

174 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄
)

176 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

177 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

178 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

180 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

181 
MockNamedVÆue
 
	`∑ømëî
 ("name");

182 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

184 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

185 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

186 
	`CHECK
 (
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

187 
	}
}

189 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥
)

191 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

192 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

193 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

195 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

196 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

197 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

198 
	`POINTERS_EQUAL
(&
ty≥
, 
ˇŒ
->
	`gëP¨amëî
("«me").
	`gëObje˘Poöãr
());

199 
	`STRCMP_EQUAL
("1", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

200 
	}
}

202 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutRïosô‹y
)

204 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

205 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

206 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

207 
	}
}

209 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutCom∑øt‹
)

211 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

212 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

213 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

214 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

215 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

216 
	}
}

219 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhTwoI¡egîP¨amëî
)

221 
ˇŒ
->
	`wôhP¨amëî
("integer1", 1);

222 
ˇŒ
->
	`wôhP¨amëî
("integer2", 2);

223 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî1").
	`asCh¨Såög
());

224 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî2").
	`asCh¨Såög
());

225 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî1").
	`gëI¡VÆue
());

226 
	`LONGS_EQUAL
(2, 
ˇŒ
->
	`gëP¨amëî
("öãgî2").
	`gëI¡VÆue
());

227 
	}
}

229 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhThªeDif„ª¡P¨amëî
)

231 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

232 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

233 
ˇŒ
->
	`wôhP¨amëî
("double", 0.12);

234 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

235 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

236 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

237 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

238 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

239 
	`DOUBLES_EQUAL
(0.12, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

240 
	}
}

242 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhoutANameItsFulfûÀd
)

244 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

245 
	}
}

247 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhANameItsNŸFulfûÀd
)

249 
ˇŒ
->
	`wôhName
("name");

250 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

251 
	}
}

253 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
a·îSëtögCÆlFulfûÀdItsFulFûÀd
)

255 
ˇŒ
->
	`wôhName
("name");

256 
ˇŒ
->
	`ˇŒWasMade
();

257 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

258 
	}
}

260 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸWôhP¨amëîIsNŸFulFûÀd
)

262 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

263 
ˇŒ
->
	`ˇŒWasMade
();

264 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

265 
	}
}

267 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedAndP¨amëîsAªFulfûÀd
)

269 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

270 
ˇŒ
->
	`ˇŒWasMade
();

271 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

272 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

273 
	}
}

275 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸAŒP¨amëîsAªFulfûÀd
)

277 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1).withParameter("two", 2);

278 
ˇŒ
->
	`ˇŒWasMade
();

279 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

280 
	`CHECK
(! 
ˇŒ
->
	`isFulfûÀd
());

281 
	}
}

283 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹NoP¨amëîs
)

285 
ˇŒ
->
	`wôhName
("name");

286 
	`STRCMP_EQUAL
("«mê->Çÿ∑ømëîs", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

287 
	}
}

289 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Mu…ùÀP¨amëîs
)

291 
ˇŒ
->
	`wôhName
("name");

292 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

293 
ˇŒ
->
	`wôhP¨amëî
("integer", 10);

294 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, i¡ i¡egî: <10>", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

295 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄sLi°
)

34 
MockEx≥˘edFun˘i⁄sLi°
 * 
li°
;

35 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

36 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

37 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

38 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ4
;

39 
	`£tup
()

41 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

42 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

43 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

44 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

45 
ˇŒ4
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

46 
ˇŒ1
->
	`wôhName
("foo");

47 
ˇŒ2
->
	`wôhName
("bar");

48 
ˇŒ3
->
	`wôhName
("boo");

50 
	`ã¨down
()

52 
dñëe
 
ˇŒ1
;

53 
dñëe
 
ˇŒ2
;

54 
dñëe
 
ˇŒ3
;

55 
dñëe
 
ˇŒ4
;

56 
dñëe
 
li°
;

58 
	}
};

60 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
em±yLi°
)

62 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

63 
	`CHECK
(! 
li°
->
	`hasFulfûÀdEx≥˘©i⁄s
());

64 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

65 
	}
}

67 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addögCÆls
)

69 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

70 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

71 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

72 
	}
}

74 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

76 
ˇŒ1
->
	`ˇŒWasMade
();

77 
ˇŒ2
->
	`ˇŒWasMade
();

78 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

79 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

80 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

81 
	}
}

83 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhUnFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

85 
ˇŒ1
->
	`ˇŒWasMade
();

86 
ˇŒ3
->
	`ˇŒWasMade
();

87 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

88 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

89 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

90 
	`CHECK
(
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

91 
	}
}

93 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
)

95 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

96 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

97 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

98 
	}
}

100 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
)

102 
ˇŒ1
->
	`wôhName
("relate");

103 
ˇŒ2
->
	`wôhName
("unrelate");

104 
ˇŒ3
->
	`wôhName
("relate");

105 
ˇŒ3
->
	`ˇŒWasMade
();

106 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

107 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

108 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

109 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("relate");

110 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

111 
	}
}

113 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToTheWﬁeLi°
)

115 
ˇŒ1
->
	`wôhName
("relate");

116 
ˇŒ2
->
	`wôhName
("relate");

117 
ˇŒ3
->
	`wôhName
("relate");

118 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

119 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

120 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

121 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

122 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

123 
	}
}

125 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToFú°O√
)

127 
ˇŒ1
->
	`wôhName
("relate");

128 
ˇŒ2
->
	`wôhName
("unrelate");

129 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

130 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

131 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

132 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

133 
	}
}

135 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToLa°O√
)

137 
ˇŒ1
->
	`wôhName
("unrelate");

138 
ˇŒ2
->
	`wôhName
("relate");

139 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

140 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

141 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

142 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

143 
	}
}

145 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
)

147 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

148 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

149 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

150 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

151 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

152 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

153 
li°
->
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
("diffname");

154 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

155 
	}
}

157 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
)

159 
MockNamedVÆue
 
	`∑ømëî
("diffname");

160 
∑ømëî
.
	`£tVÆue
(1);

161 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

162 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

163 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

164 
ˇŒ4
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 2);

165 
ˇŒ3
->
	`ˇŒWasMade
();

166 
ˇŒ3
->
	`∑ømëîWasPas£d
("diffname");

167 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

168 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

169 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

170 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ4
);

171 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

172 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

173 
	}
}

175 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sWôhEm±yLi°
)

177 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

178 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

179 
	`LONGS_EQUAL
(0, 
√wLi°
.
	`size
());

180 
	}
}

182 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sMu…ùÀUnfulfûÀdEx≥˘©i⁄s
)

184 
ˇŒ2
->
	`ˇŒWasMade
();

185 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

186 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

187 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

188 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

189 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

190 
	`LONGS_EQUAL
(2, 
√wLi°
.
	`size
());

191 
	}
}

193 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹
)

195 
ˇŒ1
->
	`wôhName
("foo");

196 
ˇŒ2
->
	`wôhName
("bar");

197 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

198 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

199 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

200 
	}
}

202 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹HasN⁄e
)

204 
ˇŒ1
->
	`wôhName
("foo");

205 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

206 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

207 
	}
}

209 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ˇŒToSåög
)

211 
ˇŒ1
->
	`wôhName
("foo");

212 
ˇŒ2
->
	`wôhName
("bar");

213 
ˇŒ3
->
	`wôhName
("blah");

214 
ˇŒ3
->
	`ˇŒWasMade
();

216 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

217 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

218 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

220 
Sim∂eSåög
 
ex≥˘edSåög
;

221 
ex≥˘edSåög
 = 
	`SåögFromF‹m©
("%s\n%s", 
ˇŒ1
->
	`ˇŒToSåög
().
	`asCh¨Såög
(), 
ˇŒ2
->callToString().asCharString());

222 
	`STRCMP_EQUAL
(
ex≥˘edSåög
.
	`asCh¨Såög
(), 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().asCharString());

223 
	}
}

225 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
toSåögOnEm±yLi°
)

227 
	`STRCMP_EQUAL
("<n⁄e>", 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().
	`asCh¨Såög
());

228 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

34 
	$TEST_GROUP
(
MockFaûuªTe°
)

36 
MockFaûuªRï‹ãr
 
ªp‹ãr
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
li°
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

41 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

43 
	`£tup
 ()

45 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

46 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

50 
	`ã¨down
 ()

52 
dñëe
 
li°
;

53 
dñëe
 
ˇŒ1
;

54 
dñëe
 
ˇŒ2
;

55 
dñëe
 
ˇŒ3
;

57 
	`addAŒToLi°
()

59 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

60 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

61 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

63 
	}
};

65 
	$TEST
(
MockFaûuªTe°
, 
noEº‹FaûuªSomëhögG⁄eWr⁄g
)

67 
MockFaûuª
 
	`Áûuª
(
this
);

68 
	`STRCMP_EQUAL
("Te° faûed wôh MockFaûuª wôhouà™Éº‹! Somëhög wíà£riou¶y wr⁄g.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

69 
	}
}

71 
	$TEST
(
MockFaûuªTe°
, 
u√x≥˘edCÆlH≠≥√d
)

73 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "foob¨", *
li°
);

74 
	`STRCMP_EQUAL
("Mock Failure: Unexpected callÅo function: foobar\n"

78 "\t\t<n⁄e>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

79 
	}
}

81 
	$TEST
(
MockFaûuªTe°
, 
ex≥˘edCÆlDidNŸH≠≥n
)

83 
ˇŒ1
->
	`wôhName
("foobar");

84 
ˇŒ2
->
	`wôhName
("w‹ld").
	`wôhP¨amëî
("boo", 2).withParameter("hello", "world");

85 
ˇŒ3
->
	`wôhName
("haphaphap");

86 
ˇŒ3
->
	`ˇŒWasMade
();

87 
	`addAŒToLi°
();

89 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, *
li°
);

90 
	`STRCMP_EQUAL
("Mock Failure: Expected call didÇot happen.\n"

95 "\t\th≠h≠h≠ ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

96 
	}
}

98 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edAddôi⁄ÆCÆlFaûuª
)

100 
ˇŒ1
->
	`wôhName
("bar");

101 
ˇŒ1
->
	`ˇŒWasMade
();

102 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

104 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "b¨", *
li°
);

105 
	`STRCMP_CONTAINS
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (2thËˇŒÅÿfun˘i⁄: b¨\n\tEXPECTED", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

106 
	}
}

108 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîFaûuª
)

110 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

111 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

112 
ˇŒ3
->
	`wôhName
("unrelated");

113 
	`addAŒToLi°
();

115 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("bar");

116 
a˘uÆP¨amëî
.
	`£tVÆue
(2);

118 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

119 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameterÇameÅo function \"foo\": bar\n"

126 "\t\töàb¨: <2>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

127 
	}
}

129 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîVÆueFaûuª
)

131 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

132 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

133 
ˇŒ3
->
	`wôhName
("unrelated");

134 
	`addAŒToLi°
();

136 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("boo");

137 
a˘uÆP¨amëî
.
	`£tVÆue
(20);

139 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

140 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"boo\"Åo function \"foo\": <20>\n"

147 "\t\töàboo: <20>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

148 
	}
}

150 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
)

152 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 2).withParameter("boo", "str");

153 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 10).withParameter("boo", "bleh");

154 
ˇŒ2
->
	`ˇŒWasMade
();

155 
ˇŒ2
->
	`∑ømëîWasPas£d
("bar");

156 
ˇŒ2
->
	`∑ømëîWasPas£d
("boo");

157 
ˇŒ3
->
	`wôhName
("unrelated");

158 
	`addAŒToLi°
();

160 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

161 
	`STRCMP_EQUAL
("Mock Failure: ExpectedÖarameter for function \"foo\" didÇot happen.\n"

167 "\t\töàb¨, ch¨* boo", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

168 
	}
}

170 
	$TEST
(
MockFaûuªTe°
, 
MockNoWayToCom∑ªCu°omTy≥Faûuª
)

172 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
this
, "myType");

173 
	`STRCMP_EQUAL
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <myTy≥>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

174 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockFailure.h

29 #i‚de‡
D_Te°MockFaûuª_h


30 
	#D_Te°MockFaûuª_h


	)

32 
	#CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
Ë
	`CHECK_EXPECTED_MOCK_FAILURE_LOCATION
”x≥˘edFaûuª, 
__FILE__
, 
__LINE__
)

	)

33 
	#CHECK_NO_MOCK_FAILURE
(Ë
	`CHECK_NO_MOCK_FAILURE_LOCATION
(
__FILE__
, 
__LINE__
)

	)

35 ˛as†
	cMockFaûuªRï‹ãrF‹Te°
 : 
public
 
MockFaûuªRï‹ãr


37 
public
:

39 
Sim∂eSåög
 
mockFaûuªSåög
;

40 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

42 
mockFaûuªSåög
 = 
Áûuª
.
	`gëMesßge
();

44 
MockFaûuªRï‹ãrF‹Te°
* 
	$gëRï‹ãr
()

46 
MockFaûuªRï‹ãrF‹Te°
 
ªp‹ãr
;

47  &
ªp‹ãr
;

48 
	}
}

51 
ölöe
 
Uã°
* 
	$mockFaûuªTe°
()

53  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
	`gëTe°ToFaû
();

54 
	}
}

56 
ölöe
 
Sim∂eSåög
 
	$mockFaûuªSåög
()

58  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
;

59 
	}
}

61 
ölöe
 
	$CHECK_EXPECTED_MOCK_FAILURE_LOCATION
(c⁄° 
MockFaûuª
& 
ex≥˘edFaûuª
, c⁄° * 
fûe
, 
löe
)

63 
Sim∂eSåög
 
ex≥˘edFaûuªSåög
 = 
ex≥˘edFaûuª
.
	`gëMesßge
();

64 
Sim∂eSåög
 
a˘uÆFaûuªSåög
 = 
	`mockFaûuªSåög
();

65 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

66 i‡(
ex≥˘edFaûuªSåög
 !
a˘uÆFaûuªSåög
)

68 
Sim∂eSåög
 
îr‹
 = "MockFailuresáre different.\n";

69 
îr‹
 += "Expected MockFailure:\n\t";

70 
îr‹
 +
ex≥˘edFaûuªSåög
;

71 
îr‹
 += "\nActual MockFailure:\n\t";

72 
îr‹
 +
a˘uÆFaûuªSåög
;

73 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

75 
	}
}

77 
ölöe
 
	$CHECK_NO_MOCK_FAILURE_LOCATION
(c⁄° * 
fûe
, 
löe
)

79 i‡(
	`mockFaûuªSåög
() != "") {

80 
Sim∂eSåög
 
îr‹
 = "Unexpected mock failure:\n";

81 
îr‹
 +
	`mockFaûuªSåög
();

82 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

85 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

86 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockSuµ‹tTe°
)

36 
MockSuµ‹t
 
mock
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

40 
	`£tup
()

42 
mock
.
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

43 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

46 
	`ã¨down
()

48 
mock
.
	`checkEx≥˘©i⁄s
();

49 
	`CHECK_NO_MOCK_FAILURE
();

50 
ex≥˘©i⁄sLi°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

51 
dñëe
 
ex≥˘©i⁄sLi°
;

54 
MockEx≥˘edFun˘i⁄CÆl
* 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
(c⁄° 
Sim∂eSåög
& 
«me
)

56 
MockEx≥˘edFun˘i⁄CÆl
* 
√wCÆl
 = 
√w
 MockExpectedFunctionCall;

57 
√wCÆl
->
	`wôhName
(
«me
);

58 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
√wCÆl
);

59  
√wCÆl
;

61 
	}
};

63 
	$TEST
(
MockSuµ‹tTe°
, 
˛órEx≥˘©i⁄s
)

65 
mock
.
	`ex≥˘O√CÆl
("func");

66 
mock
.
	`˛órEx≥˘©i⁄s
();

67 
	`CHECK
(! 
mock
.
	`ex≥˘edCÆlsLe·
());

68 
	}
}

70 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sD€¢tFaû
)

72 
mock
.
	`checkEx≥˘©i⁄s
();

73 
	}
}

75 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sCÀ¨sTheEx≥˘©i⁄s
)

77 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

78 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

80 
mock
.
	`ex≥˘O√CÆl
("foobar");

81 
mock
.
	`checkEx≥˘©i⁄s
();

83 
	`CHECK
(! 
mock
.
	`ex≥˘edCÆlsLe·
());

84 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

85 
	}
}

87 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlTh©H≠≥ns
)

89 
mock
.
	`ex≥˘O√CÆl
("func");

90 
mock
.
	`a˘uÆCÆl
("func");

91 
	`CHECK
(! 
mock
.
	`ex≥˘edCÆlsLe·
());

92 
	}
}

94 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlIn˚a£sEx≥˘edCÆlsLe·
)

96 
mock
.
	`ex≥˘O√CÆl
("func");

97 
	`CHECK
(
mock
.
	`ex≥˘edCÆlsLe·
());

98 
mock
.
	`˛órEx≥˘©i⁄s
();

99 
	}
}

101 
	$TEST
(
MockSuµ‹tTe°
, 
u√x≥˘edCÆlH≠≥√d
)

103 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", *
ex≥˘©i⁄sLi°
);

105 
mock
.
	`a˘uÆCÆl
("func");

107 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

108 
	}
}

110 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsEx˚±F‹TheEx≥˘edO√
)

112 
mock
.
	`ex≥˘O√CÆl
("foo");

113 
mock
.
	`ign‹eOthîCÆls
();

114 
mock
.
	`a˘uÆCÆl
("b¨").
	`wôhP¨amëî
("foo", 1);;

116 
	`CHECK_NO_MOCK_FAILURE
();

118 
mock
.
	`˛órEx≥˘©i⁄s
();

119 
	}
}

121 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsD€¢tIgn‹eMu…ùÀCÆlsOfTheSameFun˘i⁄
)

123 
mock
.
	`ex≥˘O√CÆl
("foo");

124 
mock
.
	`ign‹eOthîCÆls
();

125 
mock
.
	`a˘uÆCÆl
("bar");

126 
mock
.
	`a˘uÆCÆl
("foo");

127 
mock
.
	`a˘uÆCÆl
("foo");

129 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

130 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

131 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

132 
	}
}

134 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîStûlFaûsIfEx≥˘edO√Did¡H≠≥n
)

136 
mock
.
	`ex≥˘O√CÆl
("foo");

137 
mock
.
	`ign‹eOthîCÆls
();

138 
mock
.
	`checkEx≥˘©i⁄s
();

140 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo");

142 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

143 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

144 
	}
}

146 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsTh©H≠≥n
)

148 
mock
.
	`ex≥˘O√CÆl
("foo");

149 
mock
.
	`ex≥˘O√CÆl
("foo");

150 
mock
.
	`a˘uÆCÆl
("foo");

151 
mock
.
	`a˘uÆCÆl
("foo");

152 
mock
.
	`checkEx≥˘©i⁄s
();

153 
	`CHECK_NO_MOCK_FAILURE
();

154 
	}
}

156 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√CÆlHowevîMu…ùÀH≠≥√d
)

158 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

159 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

160 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

162 
mock
.
	`ex≥˘O√CÆl
("foo");

163 
mock
.
	`ex≥˘O√CÆl
("foo");

164 
mock
.
	`a˘uÆCÆl
("foo");

165 
mock
.
	`a˘uÆCÆl
("foo");

166 
mock
.
	`a˘uÆCÆl
("foo");

168 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

169 
	}
}

171 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndVÆue
)

173 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

174 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

175 
mock
.
	`checkEx≥˘©i⁄s
();

176 
	`CHECK_NO_MOCK_FAILURE
();

177 
	}
}

179 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√DoubÀP¨amëîAndVÆue
)

181 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

182 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

183 
mock
.
	`checkEx≥˘©i⁄s
();

184 
	`CHECK_NO_MOCK_FAILURE
();

185 
	}
}

187 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆue
)

189 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

190 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

191 
mock
.
	`checkEx≥˘©i⁄s
();

192 
	`CHECK_NO_MOCK_FAILURE
();

193 
	}
}

195 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√PoöãrP¨amëîAndVÆue
)

197 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

198 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

199 
mock
.
	`checkEx≥˘©i⁄s
();

200 
	`CHECK_NO_MOCK_FAILURE
();

201 
	}
}

203 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆueFaûs
)

205 
MockNamedVÆue
 
	`∑ømëî
("parameter");

206 
∑ømëî
.
	`£tVÆue
("different");

207 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", "string");

208 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

210 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

211 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "different");

213 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

214 
	}
}

216 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToP¨amëîName
)

218 
MockNamedVÆue
 
	`∑ømëî
("different");

219 
∑ømëî
.
	`£tVÆue
(10);

220 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

221 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

223 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

224 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("different", 10);

226 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

227 
	}
}

229 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToVÆue
)

231 
MockNamedVÆue
 
	`∑ømëî
("parameter");

232 
∑ømëî
.
	`£tVÆue
(8);

233 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

234 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

236 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

237 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 8);

239 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

240 
	}
}

242 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToTy≥s
)

244 
MockNamedVÆue
 
	`∑ømëî
("parameter");

245 
∑ømëî
.
	`£tVÆue
("heh");

246 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

247 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

249 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

250 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "heh");

252 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

253 
	}
}

255 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

257 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

258 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 2);

259 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 2);

260 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

261 
mock
.
	`checkEx≥˘©i⁄s
();

262 
	`CHECK_NO_MOCK_FAILURE
();

263 
	}
}

265 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhMu…ùÀDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

267 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

268 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

270 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

271 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

272 
mock
.
	`checkEx≥˘©i⁄s
();

273 
	`CHECK_NO_MOCK_FAILURE
();

274 
	}
}

276 
	$TEST
(
MockSuµ‹tTe°
, 
twi˚CÆÀdWôhSameP¨amëîs
)

278 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

279 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

280 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

281 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

282 
mock
.
	`checkEx≥˘©i⁄s
();

283 
	`CHECK_NO_MOCK_FAILURE
();

284 
	}
}

286 
	$TEST
(
MockSuµ‹tTe°
, 
ˇŒedWôhoutP¨amëîs
)

288 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

289 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

291 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

292 
mock
.
	`a˘uÆCÆl
("foo");

293 
mock
.
	`checkEx≥˘©i⁄s
();

295 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

297 
	}
}

299 
	$TEST
(
MockSuµ‹tTe°
, 
√wCÆlSèπsWhûeNŸAŒP¨amëîsWîePas£d
)

301 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

302 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

304 
mock
.
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

305 
mock
.
	`a˘uÆCÆl
("foo");

306 
mock
.
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);;

308 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

309 
	}
}

311 
	$TEST
(
MockSuµ‹tTe°
, 
thªeEx≥˘edAndA˘uÆ
)

313 
mock
.
	`ex≥˘O√CÆl
("function1");

314 
mock
.
	`ex≥˘O√CÆl
("function2");

315 
mock
.
	`ex≥˘O√CÆl
("function3");

316 
mock
.
	`a˘uÆCÆl
("function1");

317 
mock
.
	`a˘uÆCÆl
("function2");

318 
mock
.
	`a˘uÆCÆl
("function3");

319 
mock
.
	`checkEx≥˘©i⁄s
();

320 
	`CHECK_NO_MOCK_FAILURE
();

321 
	}
}

323 ˛as†
	cMyTy≥F‹Te°ög


325 
	mpublic
:

326 
	$MyTy≥F‹Te°ög
(
vÆ
Ë: 
	$vÆue
(
vÆ
){};

327 
vÆue
;

328 
	}
};

330 ˛as†
	cMyTy≥F‹Te°ögCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


332 
public
:

333 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

335  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

337 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

339  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

340 
	}
}

344 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîFaûsWhíNŸHavögACom∑ris⁄Rïosô‹y
)

346 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

347 
mock
.
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

348 
mock
.
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

350 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

351 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

352 
	}
}

354 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîSuc˚eds
)

356 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

357 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

358 
mock
.
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

359 
mock
.
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

360 
mock
.
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

361 
mock
.
	`checkEx≥˘©i⁄s
();

362 
	`CHECK_NO_MOCK_FAILURE
();

363 
mock
.
	`ªmoveAŒCom∑øt‹s
();

364 
	}
}

366 
	$TEST
(
MockSuµ‹tTe°
, 
dißbÀE«bÀ
)

368 
mock
.
	`dißbÀ
();

369 
mock
.
	`ex≥˘O√CÆl
("function");

370 
mock
.
	`a˘uÆCÆl
("differenFunction");

371 
	`CHECK
(! 
mock
.
	`ex≥˘edCÆlsLe·
());

372 
mock
.
	`íabÀ
();

373 
mock
.
	`ex≥˘O√CÆl
("function");

374 
	`CHECK
(
mock
.
	`ex≥˘edCÆlsLe·
());

375 
mock
.
	`a˘uÆCÆl
("function");

376 
	`CHECK_NO_MOCK_FAILURE
();

377 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°Ext/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

36 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
OrdîedTe°
 
‹dîedTe°
;

39 
OrdîedTe°
 
‹dîedTe°2
;

40 
OrdîedTe°
 
‹dîedTe°3
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

43 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

45 
OrdîedTe°
* 
‹dîedTe°Cache
;

46 
	`£tup
()

48 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

49 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

51 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

52 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

55 
	`ã¨down
()

57 
dñëe
 
fixtuª
;

58 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

61 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

63 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

66 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

68 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

71 
Uã°
* 
	`fú°Te°
()

73  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

76 
Uã°
* 
	`£c⁄dTe°
()

78  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

80 
	}
};

82 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

84 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10, 5);

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

150 
	}
};

152 
	gã°Numbî
 = 0;

154 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

156 
	`CHECK
(
ã°Numbî
 == 0);

157 
ã°Numbî
++;

158 
	}
}

160 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

162 
	`CHECK
(
ã°Numbî
 == 2);

163 
ã°Numbî
++;

164 
	}
}

166 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

168 
	`CHECK
(
ã°Numbî
 == 1);

169 
ã°Numbî
++;

170 
	}
}

172 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

174 
	`CHECK
(
ã°Numbî
 == 4);

175 
ã°Numbî
++;

176 
	}
}

178 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

180 
	`CHECK
(
ã°Numbî
 == 3);

181 
ã°Numbî
++;

182 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\AllTests.h

29 
IMPORT_TEST_GROUP
–
Sim∂eSåögExãnsi⁄s
);

30 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	$TEST_GROUP
(
Sim∂eSåögExãnsi⁄s
)

33 
	}
};

35 
usög
 
«me•a˚
 
	g°d
;

37 
	$TEST
(
Sim∂eSåögExãnsi⁄s
, 
‰omStdSåög
)

39 
°rög
 
	`s
("hello");

40 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

42 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

31 
	~<°döt.h
>

33 
	$TEST_GROUP
(
Sim∂eSåögFromStdöt
)

35 
	}
};

37 
usög
 
«me•a˚
 
	g°d
;

40 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt64_t
)

48 
uöt64_t
 
i
 = 10;

49 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

50 
	`CHECK_EQUAL
("uöt64_ànŸ suµ‹ãd", 
ªsu…
);

52 
	}
}

54 
	$TEST
(
Sim∂eSåögFromStdöt
, 
I¡64_t
)

67 
	}
}

69 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt32_t
)

71 
uöt32_t
 
i
 = 0xffffffff;

73 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

74 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

75 
	}
}

77 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt16_t
)

79 
uöt16_t
 
i
 = 0xffff;

81 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

82 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

83 
	}
}

85 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt8_t
)

87 
uöt8_t
 
i
 = 0xff;

89 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

90 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

91 
	}
}

93 
	$IGNORE_TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt64_t
)

97 
	}
}

99 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt32_t
)

101 
uöt32_t
 
i
 = 0xffffffff;

102 
	`CHECK_EQUAL
(
i
, i);

103 
	}
}

105 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt16_t
)

107 
uöt16_t
 
i
 = 0xffff;

108 
	`CHECK_EQUAL
(
i
, i);

109 
	}
}

111 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt8_t
)

113 
uöt8_t
 
i
 = 0xff;

114 
	`CHECK_EQUAL
(
i
, i);

115 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

35 { 
Te°Te°ögFixtuª
* 
fixtuª
;

37 
OrdîedTe°
 
‹dîedTe°
;

38 
OrdîedTe°
 
‹dîedTe°2
;

39 
OrdîedTe°
 
‹dîedTe°3
;

40 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

44 
OrdîedTe°
* 
‹dîedTe°Cache
;

45 
	`£tup
()

47 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

48 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

50 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

51 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

54 
	`ã¨down
()

56 
dñëe
 
fixtuª
;

57 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

60 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

62 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

65 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

67 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

70 
Uã°
* 
	`fú°Te°
()

72  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

75 
Uã°
* 
	`£c⁄dTe°
()

77  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

79 
	}
};

81 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

83 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10,

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

149 {
	}
};

151 
	gã°Numbî
 = 0;

153 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

155 
	`CHECK
(
ã°Numbî
 == 0);

156 
ã°Numbî
++;

157 
	}
}

159 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

161 
	`CHECK
(
ã°Numbî
 == 2);

162 
ã°Numbî
++;

163 
	}
}

165 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

167 
	`CHECK
(
ã°Numbî
 == 1);

168 
ã°Numbî
++;

169 
	}
}

171 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

173 
	`CHECK
(
ã°Numbî
 == 4);

174 
ã°Numbî
++;

175 
	}
}

177 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

179 
	`CHECK
(
ã°Numbî
 == 3);

180 
ã°Numbî
++;

181 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\JUnitOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 c⁄° * 
	gtheTime
 = "1978-10-03T00:00:00";

37 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

39  
mûlisTime
;

40 
	}
}

42 c⁄° * 
	$MockGëPœtf‹mS≥cificTimeSåög
()

44  
theTime
;

45 
	}
}

47 
	$TEST_GROUP
(
JUnôOuçutTe°
)

49 ˛as†
	cMockJUnôTe°Ouçut
: 
public
 
JUnôTe°Ouçut


51 
public
:

54 
ã°GroupSize
 = 10

58 
deÁu…Size
 = 7

61 
fûesO≥√d
;

62 
fûeBÆ™˚
;

64 
Sim∂eSåög
 
fûeName_
;

65 
Sim∂eSåög
 
buf„r_
;

67 
Te°Resu…
* 
ªs_
;

68 
	sTe°D©a


70 
	`Te°D©a
() :

71 
	`t°_
(0), 
	`ã°Name_
(0), 
	`Áûuª_
(0)

75 
Uã°
* 
t°_
;

76 
Sim∂eSåög
* 
ã°Name_
;

77 
Te°Faûuª
* 
Áûuª_
;

80 
	sTe°GroupD©a


82 
	`Te°GroupD©a
() :

83 
	`numbîTe°s_
(0), 
	`tŸÆFaûuªs_
(0), 
	`«me_
(""), 
	`ã°D©a_
(0)

88 
numbîTe°s_
;

89 
tŸÆFaûuªs_
;

90 
Sim∂eSåög
 
«me_
;

92 
Te°D©a
* 
ã°D©a_
;

95 
Te°GroupD©a
 
ã°GroupD©a_
[
ã°GroupSize
];

97 
Te°GroupD©a
& 
	`cuºítGroup
()

99  
ã°GroupD©a_
[
fûesO≥√d
 - 1];

102 
	`ª£tXmlFûe
()

104 
buf„r_
 = "";

107 
	`MockJUnôTe°Ouçut
() :

108 
	`fûesO≥√d
(0), 
	`fûeBÆ™˚
(0), 
	`ªs_
(0)

110 
i
 = 0; i < 
ã°GroupSize
; i++) {

111 
ã°GroupD©a_
[
i
].
numbîTe°s_
 = 0;

112 
ã°GroupD©a_
[
i
].
tŸÆFaûuªs_
 = 0;

117 
	`£tResu…
(
Te°Resu…
* 
ã°Res
)

119 
ªs_
 = 
ã°Res
;

122 
vútuÆ
 ~
	`MockJUnôTe°Ouçut
()

124 
i
 = 0; i < 
ã°GroupSize
; i++) {

125 
j
 = 0; j < 
ã°GroupD©a_
[
i
].
numbîTe°s_
; j++) {

126 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
t°_
;

127 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
ã°Name_
;

128 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
Áûuª_
Ë
dñëe
ÅestGroupData_[i].testData_[j].failure_;

130 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
Ë
dñëe
[]ÅestGroupData_[i].testData_;

133 
	`LONGS_EQUAL
(0, 
fûeBÆ™˚
);

136 
	`wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf
)

138 
buf„r_
 +
buf
;

141 
	`›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
ö_FûeName
)

143 
fûesO≥√d
++;

144 
fûeBÆ™˚
++;

145 
fûeName_
 = 
ö_FûeName
;

148 
	`˛o£Fûe
()

150 
	`CHECK_XML_FILE
();

151 
	`ª£tXmlFûe
();

152 
fûeBÆ™˚
--;

155 
	`¸óãTe°sInGroup
(
ödex
, 
amou¡
, c⁄° * 
group
, c⁄° * 
ba£«me
)

157 
ã°GroupD©a_
[
ödex
].
«me_
 = 
group
;

158 
ã°GroupD©a_
[
ödex
].
numbîTe°s_
 = 
amou¡
;

160 
ã°GroupD©a_
[
ödex
].
ã°D©a_
 = 
√w
 
Te°D©a
[
amou¡
];

161 
i
 = 0; i < 
amou¡
; i++) {

162 
Te°D©a
& 
ã°D©a
 = 
ã°GroupD©a_
[
ödex
].
ã°D©a_
[
i
];

163 
ã°D©a
.
ã°Name_
 = 
√w
 
	`Sim∂eSåög
(
ba£«me
);

164 *
ã°D©a
.
ã°Name_
 +
	`SåögFrom
((Ë
i
);

165 
ã°D©a
.
t°_
 = 
√w
 
	`Uã°
(
group
,Åe°D©a.
ã°Name_
->
	`asCh¨Såög
(), "file", 1);

168 
	`runTe°s
()

170 
ªs_
->
	`ã°sSèπed
();

171 
i
 = 0; i < 
ã°GroupSize
; i++) {

172 
Te°GroupD©a
& 
d©a
 = 
ã°GroupD©a_
[
i
];

173 i‡(
d©a
.
numbîTe°s_
 == 0) ;

175 
mûlisTime
 = 0;

176 
ªs_
->
	`cuºítGroupSèπed
(
d©a
.
ã°D©a_
[0].
t°_
);

177 
j
 = 0; j < 
d©a
.
numbîTe°s_
; j++) {

178 
Te°D©a
& 
ã°D©a
 = 
d©a
.
ã°D©a_
[
j
];

180 
mûlisTime
 = 0;

181 
ªs_
->
	`cuºítTe°Sèπed
(
ã°D©a
.
t°_
);

182 i‡(
ã°D©a
.
Áûuª_
Ë
	`¥öt
(*testData.failure_);

183 
mûlisTime
 = 10;

184 
ªs_
->
	`cuºítTe°Ended
(
ã°D©a
.
t°_
);

186 
mûlisTime
 = 50;

187 
ªs_
->
	`cuºítGroupEnded
(
d©a
.
ã°D©a_
[0].
t°_
);

189 
ªs_
->
	`ã°sEnded
();

192 
	`£tFaûuª
(
groupIndex
, 
ã°Index
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
mesßge
)

194 
Te°D©a
& 
d©a
 = 
ã°GroupD©a_
[
groupIndex
].
ã°D©a_
[
ã°Index
];

195 
d©a
.
Áûuª_
 = 
√w
 
	`Te°Faûuª
(d©a.
t°_
, 
fûeName
, 
löeNumbî
, 
mesßge
);

196 
ã°GroupD©a_
[
groupIndex
].
tŸÆFaûuªs_
++;

199 
	`CHECK_HAS_XML_HEADER
(
Sim∂eSåög
 
°rög
)

201 
	`STRCMP_EQUAL
("<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>\n", 
°rög
.
	`asCh¨Såög
());

204 
	`CHECK_TEST_SUITE_START
(
Sim∂eSåög
 
ouçut
)

206 
Te°GroupD©a
& 
group
 = 
	`cuºítGroup
();

207 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°suôêîr‹s=\"0\" faûuªs=\"%d\" ho°«me=\"loˇlho°\"Çame=\"%s\"Åe°s=\"%d\"Åime=\"0.050\"Åime°amp=\"%s\">\n", 
group
.
tŸÆFaûuªs_
,

208 
group
.
«me_
.
	`asCh¨Såög
(), group.
numbîTe°s_
, 
theTime
);

209 
	`CHECK_EQUAL
(
buf
, 
ouçut
);

212 
	`CHECK_XML_FILE
()

214 
size_t
 
tŸÆSize
 = 
	`cuºítGroup
().
numbîTe°s_
 + 
deÁu…Size
 + (cuºítGroup().
tŸÆFaûuªs_
 * 2);

215 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

216 
buf„r_
.
	`•lô
("\n", 
cﬁ
);

217 
	`CHECK
(
cﬁ
.
	`size
(Ë>
tŸÆSize
);

218 
	`CHECK_HAS_XML_HEADER
(
cﬁ
[0]);

219 
	`CHECK_TEST_SUITE_START
(
cﬁ
[1]);

220 
	`CHECK_PROPERTIES_START
(
cﬁ
[2]);

221 
	`CHECK_PROPERTIES_END
(
cﬁ
[3]);

222 
	`CHECK_TESTS
(&
cﬁ
[4]);

223 
	`CHECK_SYSTEM_OUT
(
cﬁ
[cﬁ.
	`size
() - 3]);

224 
	`CHECK_SYSTEM_ERR
(
cﬁ
[cﬁ.
	`size
() - 2]);

225 
	`CHECK_TEST_SUITE_END
(
cﬁ
[cﬁ.
	`size
() - 1]);

228 
	`CHECK_PROPERTIES_START
(c⁄° 
Sim∂eSåög
& 
ouçut
)

230 
	`STRCMP_EQUAL
("<¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

233 
	`CHECK_PROPERTIES_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

235 
	`STRCMP_EQUAL
("</¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

238 
	`CHECK_SYSTEM_OUT
(c⁄° 
Sim∂eSåög
& 
ouçut
)

240 
	`STRCMP_EQUAL
("<sy°em-out></sy°em-out>\n", 
ouçut
.
	`asCh¨Såög
());

243 
	`CHECK_SYSTEM_ERR
(c⁄° 
Sim∂eSåög
& 
ouçut
)

245 
	`STRCMP_EQUAL
("<sy°em-îr></sy°em-îr>\n", 
ouçut
.
	`asCh¨Såög
());

248 
	`CHECK_TEST_SUITE_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

250 
	`STRCMP_EQUAL
("</ã°suôe>", 
ouçut
.
	`asCh¨Såög
());

252 
	`CHECK_TESTS
(
Sim∂eSåög
* 
¨r
)

254 
ödex
 = 0, 
curTe°
 = 0; curTe° < 
	`cuºítGroup
().
numbîTe°s_
; curTest++, index++) {

255 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<ã°ˇ£ cœs¢ame=\"%s\"Çame=\"%s\"Åime=\"0.010\">\n", 
	`cuºítGroup
().
«me_
.
	`asCh¨Såög
(),

256 
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
t°_
->
	`gëName
().
	`asCh¨Såög
());

257 
	`CHECK_EQUAL
(
buf
, 
¨r
[
ödex
]);

258 i‡(
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
) {

259 
	`CHECK_FAILURE
(
¨r
, 
ödex
, 
curTe°
);

261 
buf
 = "</testcase>\n";

262 
	`CHECK_EQUAL
(
buf
, 
¨r
[++
ödex
]);

266 
	`CHECK_FAILURE
(
Sim∂eSåög
* 
¨r
, & 
i
, 
curTe°
)

268 
Te°Faûuª
& 
f
 = *
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
;

269 
i
++;

270 
Sim∂eSåög
 
mesßge
 = 
f
.
	`gëMesßge
().
	`asCh¨Såög
();

271 
mesßge
.
	`ª∂a˚
('"', '\'');

272 
mesßge
.
	`ª∂a˚
('<', '[');

273 
mesßge
.
	`ª∂a˚
('>', ']');

274 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

275 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<Áûuª mesßge=\"%s:%d: %s\"Åy≥=\"As£πi⁄FaûedEº‹\">\n", 
f
.
	`gëFûeName
().
	`asCh¨Såög
(), f.
	`gëFaûuªLöeNumbî
(), 
mesßge
.asCharString());

276 
	`CHECK_EQUAL
(
buf
, 
¨r
[
i
]);

277 
i
++;

278 
	`STRCMP_EQUAL
("</Áûuª>\n", 
¨r
[
i
].
	`asCh¨Såög
());

280 
	}
};

282 
MockJUnôTe°Ouçut
 * 
	gouçut
;

283 
Te°Resu…
 *
	gªs
;

285 
	$£tup
()

287 
ouçut
 = 
√w
 
	`MockJUnôTe°Ouçut
();

288 
ªs
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

289 
ouçut
->
	`£tResu…
(
ªs
);

290 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

291 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(
MockGëPœtf‹mS≥cificTimeSåög
);

292 
	}
}

293 
	$ã¨down
()

295 
dñëe
 
ouçut
;

296 
dñëe
 
ªs
;

297 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

298 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(0);

299 
	}
}

301 
	$runTe°s
()

303 
ouçut
->
	`¥ötTe°sSèπed
();

304 
ouçut
->
	`runTe°s
();

305 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

306 
	}
}

309 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupAŒPass
)

311 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "group", "name");

312 
	`runTe°s
();

313 
	`STRCMP_EQUAL
("˝puã°_group.xml", 
ouçut
->
fûeName_
.
	`asCh¨Såög
());

314 
	`LONGS_EQUAL
(1, 
ouçut
->
fûesO≥√d
);

315 
	}
}

317 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAŒPass
)

319 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group", "name");

320 
	`runTe°s
();

321 
	}
}

323 
	$TEST
(
JUnôOuçutTe°
, 
mu…ùÀTe°sInTwoGroupAŒPass
)

325 
ouçut
->
	`¸óãTe°sInGroup
(0, 3, "group", "name");

326 
ouçut
->
	`¸óãTe°sInGroup
(1, 8, "secondGroup", "secondName");

327 
	`runTe°s
();

328 
	`LONGS_EQUAL
(2, 
ouçut
->
fûesO≥√d
);

329 
	}
}

331 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupFaûed
)

333 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

334 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test <\"just\"> failed");

335 
	`runTe°s
();

336 
	}
}

338 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAndThªeFaû
)

340 
ouçut
->
	`¥ötTe°sSèπed
();

341 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "failedGroup", "failedName");

342 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

343 
ouçut
->
	`£tFaûuª
(0, 1, "file", 5, "Also failed");

344 
ouçut
->
	`£tFaûuª
(0, 4, "file", 8, "And failedágain");

345 
	`runTe°s
();

346 
	}
}

348 
	$TEST
(
JUnôOuçutTe°
, 
fourGroupsAndSomePassAndSomeFaû
)

350 
ouçut
->
	`¥ötTe°sSèπed
();

351 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group1", "firstName");

352 
ouçut
->
	`¸óãTe°sInGroup
(1, 50, "group2", "secondName");

353 
ouçut
->
	`¸óãTe°sInGroup
(2, 3, "group3", "thirdName");

354 
ouçut
->
	`¸óãTe°sInGroup
(3, 5, "group4", "fourthName");

356 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

357 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

358 
	`runTe°s
();

359 
	}
}

361 
	$TEST
(
JUnôOuçutTe°
, 
mesßgeWôhNewLöe
)

363 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

364 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test \n failed");

365 
	`runTe°s
();

366 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakAllocatorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Mem‹yLókAŒoˇt‹Te°
)

34 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
;

36 
	`ã¨down
()

38 i‡(
Æloˇt‹
Ë
dñëe
állocator;

40 
	}
};

42 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAŒoˇt‹
)

44 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

45 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
Æloˇt‹
);

46 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

47 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

48 
	`POINTERS_EQUAL
(
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

49 
	}
}

51 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAºayAŒoˇt‹
)

53 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

54 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
Æloˇt‹
);

55 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

56 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

57 
	`POINTERS_EQUAL
(
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

58 
	}
}

60 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítMÆlocAŒoˇt‹
)

62 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

63 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
Æloˇt‹
);

64 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

65 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

66 
	`POINTERS_EQUAL
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

67 
	}
}

69 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocAŒoˇti⁄
)

71 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

72 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

73 
	}
}

75 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocNames
)

77 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

78 
	`STRCMP_EQUAL
("Sènd¨d MÆlo¯AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

79 
	`STRCMP_EQUAL
("mÆloc", 
Æloˇt‹
->
	`Æloc_«me
());

80 
	`STRCMP_EQUAL
("‰ì", 
Æloˇt‹
->
	`‰ì_«me
());

81 
	}
}

83 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAŒoˇti⁄
)

85 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

86 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

87 
	}
}

89 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewNames
)

91 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

92 
	`STRCMP_EQUAL
("Sènd¨d New AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

93 
	`STRCMP_EQUAL
("√w", 
Æloˇt‹
->
	`Æloc_«me
());

94 
	`STRCMP_EQUAL
("dñëe", 
Æloˇt‹
->
	`‰ì_«me
());

95 
	}
}

97 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayAŒoˇti⁄
)

99 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

100 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

101 
	}
}

103 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayNames
)

105 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

106 
	`STRCMP_EQUAL
("Sènd¨d New [] AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

107 
	`STRCMP_EQUAL
("√w []", 
Æloˇt‹
->
	`Æloc_«me
());

108 
	`STRCMP_EQUAL
("dñëê[]", 
Æloˇt‹
->
	`‰ì_«me
());

109 
	}
}

111 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownAŒoˇti⁄
)

113 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

114 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100, "file", 1), "file", 1);

115 
	}
}

117 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownNames
)

119 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

120 
	`STRCMP_EQUAL
("NuŒ AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

121 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`Æloc_«me
());

122 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`‰ì_«me
());

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakDetectorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

30 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 ˛as†
	cMem‹yLókFaûuªF‹Te°
: 
public
 
Mem‹yLókFaûuª


35 
public
:

36 
vútuÆ
 ~
	$Mem‹yLókFaûuªF‹Te°
()

40 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

42 *
mesßge
 = 
Áû_°rög
;

43 
	}
}

45 
Sim∂eSåög
 *
	gmesßge
;

48 ˛as†
	cNewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dNewAŒoˇt‹


50 
public
:

51 
	$NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

52 
	`Æloc_ˇŒed
(0), 
	$‰ì_ˇŒed
(0)

56 
Æloc_ˇŒed
;

57 
‰ì_ˇŒed
;

58 * 
	$Æloc_mem‹y
(
size_t
 
size
, const *, )

60 
Æloc_ˇŒed
++;

61  
Sènd¨dNewAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, "file", 1);

62 
	}
}

63 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

65 
‰ì_ˇŒed
++;

66 
Sènd¨dNewAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

67 
	}
}

70 ˛as†
	cMÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
: 
public
 
Sènd¨dMÆlocAŒoˇt‹


72 
public
:

73 
	$MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
() :

74 
	`Æloc_ˇŒed
(0), 
	`‰ì_ˇŒed
(0), 
	`ÆlocMem‹yLókNodeCÆÀd
(0), 
	$‰ìMem‹yLókNodeCÆÀd
(0)

78 
Æloc_ˇŒed
;

79 
‰ì_ˇŒed
;

80 
ÆlocMem‹yLókNodeCÆÀd
;

81 
‰ìMem‹yLókNodeCÆÀd
;

82 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

84 
Æloc_ˇŒed
++;

85  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

86 
	}
}

87 
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

89 
‰ì_ˇŒed
++;

90 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 
	}
}

93 * 
	$ÆlocMem‹yLókNode
(
size_t
 
size
)

95 
ÆlocMem‹yLókNodeCÆÀd
++;

96  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
__FILE__
, 
__LINE__
);

97 
	}
}

99 
	$‰ìMem‹yLókNode
(* 
mem‹y
)

101 
‰ìMem‹yLókNodeCÆÀd
++;

102 
Sènd¨dMÆlocAŒoˇt‹
::
	`‰ì_mem‹y
(
mem‹y
, 
__FILE__
, 
__LINE__
);

103 
	}
}

106 
	$TEST_GROUP
(
Mem‹yLókDëe˘‹Te°
)

108 
Mem‹yLókDëe˘‹
* 
dëe˘‹
;

109 
Mem‹yLókFaûuªF‹Te°
 *
ªp‹ãr
;

110 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
mÆlocAŒoˇt‹
;

111 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
* 
√wAŒoˇt‹
;

112 
Sènd¨dNewAºayAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

114 
	`£tup
()

116 
dëe˘‹
 = 
√w
 
Mem‹yLókDëe˘‹
;

117 
ªp‹ãr
 = 
√w
 
Mem‹yLókFaûuªF‹Te°
;

118 
mÆlocAŒoˇt‹
 = 
√w
 
MÆlocAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

119 
√wAŒoˇt‹
 = 
√w
 
NewAŒoˇt‹F‹Mem‹yLókDëe˘i⁄Te°
;

120 
√wAºayAŒoˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

121 
dëe˘‹
->
	`öô
(
ªp‹ãr
);

122 
dëe˘‹
->
	`íabÀ
();

123 
dëe˘‹
->
	`°¨tCheckög
();

124 
ªp‹ãr
->
mesßge
 = 
√w
 
	`Sim∂eSåög
();

126 
	`ã¨down
()

128 
dñëe
 
ªp‹ãr
->
mesßge
;

129 
dñëe
 
dëe˘‹
;

130 
dñëe
 
ªp‹ãr
;

131 
dñëe
 
mÆlocAŒoˇt‹
;

132 
dñëe
 
√wAŒoˇt‹
;

133 
dñëe
 
√wAºayAŒoˇt‹
;

135 
	}
};

137 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√Lók
)

139 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 3);

140 
dëe˘‹
->
	`°›Checkög
();

141 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

142 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

143 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 3"));

144 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

145 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

146 
	`Pœtf‹mS≥cificFªe
(
mem
);

147 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

148 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

149 
	}
}

151 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókOutsideCheckögPîiod
)

153 
dëe˘‹
->
	`°›Checkög
();

154 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

155 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
);

156 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

157 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

158 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

159 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

160 
	`Pœtf‹mS≥cificFªe
(
mem
);

161 
	}
}

163 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
NoLóksWh©s€vî
)

165 
dëe˘‹
->
	`°›Checkög
();

166 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

167 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
));

168 
	}
}

170 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoLóksUsögO≥øt‹New
)

172 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

173 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

174 
dëe˘‹
->
	`°›Checkög
();

175 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

176 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

177 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 8"));

178 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

179 
	`Pœtf‹mS≥cificFªe
(
mem
);

180 
	`Pœtf‹mS≥cificFªe
(
mem2
);

181 
	}
}

183 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocButNoLók
)

185 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

186 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

187 
dëe˘‹
->
	`°›Checkög
();

188 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

189 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

190 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

191 
	}
}

193 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√Lók
)

195 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

196 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

197 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

198 
dëe˘‹
->
	`°›Checkög
();

199 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

200 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

201 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 12"));

202 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 4"));

203 
	`Pœtf‹mS≥cificFªe
(
mem2
);

204 
	`LONGS_EQUAL
(2, 
√wAŒoˇt‹
->
Æloc_ˇŒed
);

205 
	`LONGS_EQUAL
(1, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

206 
	}
}

208 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√LókRevî£Ordî
)

210 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

211 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

212 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem2
);

213 
dëe˘‹
->
	`°›Checkög
();

214 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

215 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

216 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 12"));

217 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

218 
	`Pœtf‹mS≥cificFªe
(
mem
);

219 
	}
}

221 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
DñëeN⁄AloˇãdMem‹y
)

223 
a
;

224 * 
∑
 = &
a
;

225 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
∑
, "FREE.c", 100);

226 
dëe˘‹
->
	`°›Checkög
();

227 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
));

228 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: <unknown>Üine: 0 size: 0Åype: unknown"));

229 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

230 
	`LONGS_EQUAL
(0, 
√wAŒoˇt‹
->
‰ì_ˇŒed
);

231 
	}
}

233 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiod
)

235 
dëe˘‹
->
	`°›Checkög
();

236 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

237 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

238 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

239 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

240 
	}
}

242 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiodCom∂iˇãdCa£
)

244 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

245 
dëe˘‹
->
	`°›Checkög
();

247 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

248 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

249 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

250 
	`Pœtf‹mS≥cificFªe
(
mem
);

251 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

252 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

254 
dëe˘‹
->
	`°¨tCheckög
();

255 * 
mem3
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

256 
dëe˘‹
->
	`°›Checkög
();

257 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

258 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

260 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

261 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

262 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

264 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_Æl
);

265 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

266 
	`Pœtf‹mS≥cificFªe
(
mem2
);

267 
	`Pœtf‹mS≥cificFªe
(
mem3
);

268 
	}
}

270 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókUsögO≥øt‹NewWôhFûeLöe
)

272 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4, "file.cpp", 1234);

273 
dëe˘‹
->
	`°›Checkög
();

274 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

275 
	`CHECK
(
ouçut
.
	`c⁄èös
("file.cpp"));

276 
	`CHECK
(
ouçut
.
	`c⁄èös
("1234"));

277 
	`Pœtf‹mS≥cificFªe
(
mem
);

278 
	}
}

280 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªeUsögAºayNew
)

282 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 10, "file.cpp", 1234);

283 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 12);

284 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

285 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

286 
	`CHECK
(
ouçut
.
	`c⁄èös
("new []"));

287 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
);

288 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem2
);

289 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

290 
dëe˘‹
->
	`°›Checkög
();

291 
	}
}

293 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªe
)

295 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

296 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 12);

297 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

298 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

299 
	`CHECK
(
ouçut
.
	`c⁄èös
("malloc"));

300 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

301 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
, "file.c", 5678);

302 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

303 
dëe˘‹
->
	`°›Checkög
();

304 
	}
}

306 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√RóŒoc
)

308 * 
mem1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

310 * 
mem2
 = 
dëe˘‹
->
	`ªÆlocMem‹y
(
mÆlocAŒoˇt‹
, 
mem1
, 1000, "other.cpp", 5678);

312 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

313 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

314 
	`CHECK
(
ouçut
.
	`c⁄èös
("other.cpp"));

316 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
);

317 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

318 
dëe˘‹
->
	`°›Checkög
();

319 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
Æloc_ˇŒed
);

320 
	`LONGS_EQUAL
(1, 
mÆlocAŒoˇt‹
->
‰ì_ˇŒed
);

321 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
ÆlocMem‹yLókNodeCÆÀd
);

322 
	`LONGS_EQUAL
(2, 
mÆlocAŒoˇt‹
->
‰ìMem‹yLókNodeCÆÀd
);

323 
	}
}

325 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocAndFªeWôhDif„ªn˚In°™˚sOfTheSameAŒoˇt‹Ty≥
)

327 
Sènd¨dNewAºayAŒoˇt‹
 
√wAºayAŒoˇt‹Two
;

328 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

329 
dëe˘‹
->
	`dóŒocMem‹y
(&
√wAºayAŒoˇt‹Two
, 
mem
, "FREE.c", 100);

330 
dëe˘‹
->
	`°›Checkög
();

331 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

332 
	}
}

334 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥
)

336 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

337 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

338 
dëe˘‹
->
	`°›Checkög
();

339 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
));

340 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 100Åype:Çew []"));

341 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

342 
	}
}

344 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥WôhCheckögDißbÀd
)

346 
dëe˘‹
->
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

347 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

348 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
, "FREE.c", 100);

349 
dëe˘‹
->
	`°›Checkög
();

350 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

351 
dëe˘‹
->
	`íabÀAŒoˇti⁄Ty≥Checkög
();

352 
	}
}

354 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mÆlocLókGivesAddôi⁄ÆW¨nög
)

356 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 100, "ALLOC.c", 10);

357 
dëe˘‹
->
	`°›Checkög
();

358 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

359 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d byáŒoˇtög usögÅhê˝puã° vîsi⁄ o‡mÆloc", 
ouçut
.
	`asCh¨Såög
());

360 
	`Pœtf‹mS≥cificFªe
(
mem
);

361 
	}
}

363 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
√wLókD€sNŸGiveAddôi⁄ÆW¨nög
)

365 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 100, "ALLOC.c", 10);

366 
dëe˘‹
->
	`°›Checkög
();

367 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

368 
	`CHECK
(! 
ouçut
.
	`c⁄èös
("MemoryÜeakÑeportsábout mallocánd free"));

369 
	`Pœtf‹mS≥cificFªe
(
mem
);

370 
	}
}

372 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
M¨kCheckögPîiodLóksAsN⁄CheckögPîiod
)

374 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

375 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

376 
dëe˘‹
->
	`°›Checkög
();

377 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

378 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

379 
dëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

380 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

381 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

382 
	`Pœtf‹mS≥cificFªe
(
mem
);

383 
	`Pœtf‹mS≥cificFªe
(
mem2
);

384 
	}
}

386 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mem‹yC‹ru±i⁄
)

388 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "ALLOC.c", 10);

389 
mem
[10] = 'O';

390 
mem
[11] = 'H';

391 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

392 
dëe˘‹
->
	`°›Checkög
();

393 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_MEMORY_CORRUPTION
));

394 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 10Åype: malloc"));

395 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

396 
	}
}

398 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ß„lyDñëeNULL
)

400 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 0);

401 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

402 
	}
}

404 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodDißbÀd
)

406 
dëe˘‹
->
	`dißbÀ
();

407 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

408 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

409 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

410 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

411 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

412 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

413 
	}
}

415 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodE«bÀd
)

417 
dëe˘‹
->
	`íabÀ
();

418 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

419 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

420 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

421 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

422 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

423 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

424 
	}
}

426 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodCheckög
)

428 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

429 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

430 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

431 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

432 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

433 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

434 
	}
}

436 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ÆloˇãWôhANuŒAŒoˇt‹Cau£sNoProbÀms
)

438 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 2);

439 
dëe˘‹
->
	`dóŒocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem
);

440 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

4 
	~"CµUTe°/Te°Ouçut.h
"

5 
	~"CµUTe°/Te°Regi°ry.h
"

6 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

8 
	~"AŒoˇti⁄InCµFûe.h
"

11 
	~"AŒoˇti⁄InCFûe.h
"

14 
	$TEST_GROUP
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
)

16 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

17 
	`£tup
()

19 
memLókDëe˘‹
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
();

22 
	}
};

24 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


26 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

28 * 
Àak
 = 
	`√wAŒoˇti⁄
();

29 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

30 
dñëe
 
Àak
;

31 
	}
}

33 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

35 * 
Àak
 = 
	`√wAºayAŒoˇti⁄
();

36 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

37 
dñëe
[] 
Àak
;

38 
	}
}

40 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocOvîrideW‹ks
)

42 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

43 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCFûe.c", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

44 
	`‰ìAŒoˇti⁄
(
Àak
);

45 
	}
}

47 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocWôhButFªeWôhoutLókDëe˘i⁄D€¢tCøsh
)

49 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

50 
	`‰ìAŒoˇti⁄WôhoutMa¸o
(
Àak
);

51 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

52 
memLókDëe˘‹
->
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(
Àak
);

53 
	}
}

55 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewOvîlﬂdögWôhoutMa¸oW‹ks
)

57 * 
Àak
 = 
	`√wAŒoˇti⁄WôhoutMa¸o
();

58 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

59 
dñëe
 
Àak
;

60 
	}
}

62 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayOvîlﬂdögWôhoutMa¸oW‹ks
)

64 * 
Àak
 = 
	`√wAºayAŒoˇti⁄WôhoutMa¸o
();

65 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

66 
dñëe
[] 
Àak
;

67 
	}
}

71 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
Mem‹yOvîridesAªDißbÀd
)

73 * 
Àak
 = 
	`√wAŒoˇti⁄
();

74 
	`STRCMP_EQUAL
("Nÿmem‹yÜók†wîêdëe˘ed.", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

75 
dñëe
 
Àak
;

76 
	}
}

80 
	$TEST_GROUP
(
OutOfMem‹yTe°sF‹O≥øt‹New
)

82 
Mem‹yLókAŒoˇt‹
* 
no_mem‹y_Æloˇt‹
;

83 
	`£tup
()

85 
no_mem‹y_Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

86 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

87 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

89 
	`ã¨down
()

91 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

92 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

93 
dñëe
 
no_mem‹y_Æloˇt‹
;

95 
	}
};

97 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


99 #i‡
CPPUTEST_USE_STD_CPP_LIB


101 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

103 
åy
 {

104 
√w
 ;

105 
	`FAIL
("Should haveÅhrownánÉxception!")

107 
	`ˇtch
 (
°d
::
bad_Æloc
) {

109 
	}
}

111 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

113 
åy
 {

114 
√w
 [10];

115 
	`FAIL
("Should haveÅhrownánÉxception!")

117 
	`ˇtch
 (
°d
::
bad_Æloc
) {

119 
	}
}

123 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒ
)

125 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

126 
	}
}

128 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒ
)

130 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

131 
	}
}

135 #unde‡
√w


137 #i‡
CPPUTEST_USE_STD_CPP_LIB


139 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

141 
åy
 {

142 
√w
 ;

143 
	`FAIL
("Should haveÅhrownánÉxception!")

145 
	`ˇtch
 (
°d
::
bad_Æloc
) {

147 
	}
}

149 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

151 
åy
 {

152 
√w
 [10];

153 
	`FAIL
("Should haveÅhrownánÉxception!")

155 
	`ˇtch
 (
°d
::
bad_Æloc
) {

157 
	}
}

160 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

162 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

163 
	}
}

165 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

167 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

168 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakWarningTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

32 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

33 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

36 * 
	gÀak1
;

37 * 
	gÀak2
;

39 ˛as†
	cDummyRï‹ãr
: 
public
 
Mem‹yLókFaûuª


41 
public
:

42 
vútuÆ
 ~
	$DummyRï‹ãr
()

45 
vútuÆ
 
	$Áû
(* )

47 
	}
}

50 
Mem‹yLókDëe˘‹
* 
	gdëe˘‹
;

51 
Mem‹yLókW¨nögPlugö
* 
	gmemPlugö
;

52 
DummyRï‹ãr
 
	gdummy
;

53 
Mem‹yLókAŒoˇt‹
* 
	gÆloˇt‹
;

55 
	$TEST_GROUP
(
Mem‹yLókW¨nögTe°
)

57 
Te°Te°ögFixtuª
* 
fixtuª
;

59 
	`£tup
()

61 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

62 
dëe˘‹
 = 
√w
 
	`Mem‹yLókDëe˘‹
();

63 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

64 
dëe˘‹
->
	`öô
(&
dummy
);

65 
memPlugö
 = 
√w
 
	`Mem‹yLókW¨nögPlugö
("Te°Mem‹yLókW¨nögPlugö", 
dëe˘‹
);

66 
fixtuª
->
ªgi°ry_
->
	`ö°ÆlPlugö
(
memPlugö
);

67 
memPlugö
->
	`íabÀ
();

69 
Àak1
 = 0;

70 
Àak2
 = 0;

72 
	`ã¨down
()

74 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak1
);

75 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak2
);

77 
dñëe
 
fixtuª
;

78 
dñëe
 
memPlugö
;

79 
dñëe
 
dëe˘‹
;

80 
dñëe
 
Æloˇt‹
;

82 
	}
};

84 
	$_ã°TwoLóks
()

86 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

88 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

89 
	}
}

91 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
TwoLóks
)

93 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°TwoLóks
);

94 
fixtuª
->
	`runAŒTe°s
();

95 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

96 
fixtuª
->
	`as£πPrötC⁄èös
("TotalÇumber ofÜeaks: 2");

97 
	}
}

99 
	$_ã°Ign‹e2
()

101 
memPlugö
->
	`ex≥˘LóksInTe°
(2);

102 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

103 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

104 
	}
}

106 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
Ign‹e2
)

108 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°Ign‹e2
);

109 
fixtuª
->
	`runAŒTe°s
();

110 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

111 
	}
}

113 
	$_ÁûAndLókMem‹y
()

115 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

116 
	`FAIL
("");

117 
	}
}

119 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
FaûögTe°D€sNŸRï‹tMem‹yLóks
)

121 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûAndLókMem‹y
);

122 
fixtuª
->
	`runAŒTe°s
();

123 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

124 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\NullTestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	$TEST_GROUP
(
NuŒTe°
)

32 
NuŒTe°
* 
nuŒTe°
;

34 
	`TEST_SETUP
()

36 
nuŒTe°
 = 
√w
 
	`NuŒTe°
();

39 
	`TEST_TEARDOWN
()

41 
dñëe
 
nuŒTe°
;

43 
	}
};

45 
	$TEST
(
NuŒTe°
, 
Cª©e
)

47 
	}
}

49 
	$TEST
(
NuŒTe°
, 
In°™˚AlwaysTheSame
)

51 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

52 
	`CHECK
(&
_ö°™˚
 =&
NuŒTe°
::
	`ö°™˚
());

53 
	}
}

55 
	$TEST
(
NuŒTe°
, 
NuŒTe°sD⁄tCou¡
)

57 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

58 
	`CHECK
(
_ö°™˚
.
	`cou¡Te°s
() == 0);

59 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\PluginTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

34 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

35 
	#GENERIC_PLUGIN3
 "GíîicPlugö3"

	)

37 
	g£quí˚Numbî
;

39 ˛as†
	cDummyPlugö
: 
public
 
Te°Plugö


41 
public
:

42 
	$DummyPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

43 
	`Te°Plugö
(
«me
), 
	`¥eA˘i⁄
(0), 
	$po°A˘i⁄
(0)

47 
vútuÆ
 ~
	$DummyPlugö
()

49 
	}
}

51 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
¥eA˘i⁄
++;

54 
¥eA˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

55 
	}
}

57 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

59 
po°A˘i⁄
++;

60 
po°A˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

61 
	}
}

63 
	g¥eA˘i⁄
;

64 
	g¥eA˘i⁄Sequí˚
;

65 
	gpo°A˘i⁄
;

66 
	gpo°A˘i⁄Sequí˚
;

69 ˛as†
	cDummyPlugöWhichAc˚±sP¨amëîs
: 
public
 
DummyPlugö


71 
public
:

72 
	$DummyPlugöWhichAc˚±sP¨amëîs
(c⁄° 
Sim∂eSåög
& 
«me
) :

73 
	$DummyPlugö
(
«me
)

77 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

79 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

80 i‡(
¨gumít
 == "-paccept")

81  
åue
;

82  
Te°Plugö
::
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
);

83 
	}
}

88 
	$TEST_GROUP
(
PlugöTe°
)

90 
DummyPlugö
* 
fú°Plugö
;

91 
DummyPlugöWhichAc˚±sP¨amëîs
* 
£c⁄dPlugö
;

92 
DummyPlugö
* 
thúdPlugö
;

93 
Te°Te°ögFixtuª
 *
gíFixtuª
;

94 
Te°Regi°ry
 *
ªgi°ry
;

95 
	`£tup
()

97 
fú°Plugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN
);

98 
£c⁄dPlugö
 = 
√w
 
	`DummyPlugöWhichAc˚±sP¨amëîs
(
GENERIC_PLUGIN2
);

99 
thúdPlugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN3
);

100 
gíFixtuª
 = 
√w
 
Te°Te°ögFixtuª
;

101 
ªgi°ry
 = 
gíFixtuª
->
ªgi°ry_
;

102 
ªgi°ry
->
	`ö°ÆlPlugö
(
fú°Plugö
);

103 
£quí˚Numbî
 = 1;

106 
	`ã¨down
()

108 
dñëe
 
fú°Plugö
;

109 
dñëe
 
£c⁄dPlugö
;

110 
dñëe
 
thúdPlugö
;

111 
dñëe
 
gíFixtuª
;

113 
	}
};

115 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

116 
	#GENERIC_PLUGIN4
 "GíîicPlugö4"

	)

118 
	$TEST
(
PlugöTe°
, 
PlugöHasName
)

120 
	`CHECK_EQUAL
(
GENERIC_PLUGIN
, 
fú°Plugö
->
	`gëName
());

121 
	}
}

123 
	$TEST
(
PlugöTe°
, 
In°ÆlPlugö
)

125 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëFú°Plugö
());

126 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

127 
	}
}

129 
	$TEST
(
PlugöTe°
, 
In°ÆlMu…ùÀPlugös
)

131 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

132 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

133 
	`CHECK_EQUAL
(
thúdPlugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN3
));

134 
	`CHECK_EQUAL
(0, 
ªgi°ry
->
	`gëPlugöByName
("I doÇotÉxist"));

135 
	}
}

137 
	$TEST
(
PlugöTe°
, 
A˘i⁄sAŒRun
)

139 
gíFixtuª
->
	`runAŒTe°s
();

140 
gíFixtuª
->
	`runAŒTe°s
();

141 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

142 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
po°A˘i⁄
);

143 
	}
}

145 
	$TEST
(
PlugöTe°
, 
Sequí˚
)

147 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

148 
gíFixtuª
->
	`runAŒTe°s
();

149 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄Sequí˚
);

150 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄Sequí˚
);

151 
	`CHECK_EQUAL
(3, 
fú°Plugö
->
po°A˘i⁄Sequí˚
);

152 
	`CHECK_EQUAL
(4, 
thúdPlugö
->
po°A˘i⁄Sequí˚
);

153 
	}
}

155 
	$TEST
(
PlugöTe°
, 
DißbÀsPlugösD⁄tRun
)

157 
ªgi°ry
->
	`ö°ÆlPlugö
(
thúdPlugö
);

158 
thúdPlugö
->
	`dißbÀ
();

159 
gíFixtuª
->
	`runAŒTe°s
();

160 
	`CHECK
(!
thúdPlugö
->
	`isE«bÀd
());

161 
thúdPlugö
->
	`íabÀ
();

162 
gíFixtuª
->
	`runAŒTe°s
();

163 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

164 
	`CHECK_EQUAL
(1, 
thúdPlugö
->
¥eA˘i⁄
);

165 
	`CHECK
(
thúdPlugö
->
	`isE«bÀd
());

166 
	}
}

168 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsF‹UnknownArgumítsFaûs
)

170 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

171 c⁄° *
cmd_löe
[] = {"nonsense", "andmorenonsense"};

172 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0Ë=
Ál£
 );

173 
	}
}

175 
	$TEST
(
PlugöTe°
, 
P¨£ArgumítsC⁄töuesAndSuc˚edsWhíAPlugöC™P¨£
)

177 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

178 c⁄° *
cmd_löe
[] = {"-paccept", "andmorenonsense"};

179 
	`CHECK
(
ªgi°ry
->
	`gëFú°Plugö
()->
	`∑r£AŒArgumíts
(2, 
cmd_löe
, 0));

180 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\SetPluginTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Te°Regi°ry.h
"

3 
	~"CµUTe°/Te°Ouçut.h
"

4 
	~"CµUTe°/Te°Plugö.h
"

6 
	$‹ig_func1
()

8 
	}
}

10 
	$°ub_func1
()

12 
	}
}

14 
	$‹ig_func2
()

16 
	}
}

18 
	$°ub_func2
()

20 
	}
}

22 (*
	gÂ1
)();

23 (*
	gÂ2
)();

25 
	$TEST_GROUP
(
SëPoöãrPlugöTe°
)

27 
SëPoöãrPlugö
* 
∂ugö_
;

28 
Te°Regi°ry
* 
myRegi°ry_
;

29 
SåögBuf„rTe°Ouçut
* 
ouçut_
;

30 
Te°Resu…
* 
ªsu…_
;

32 
	`£tup
()

34 
myRegi°ry_
 = 
√w
 
	`Te°Regi°ry
();

35 
∂ugö_
 = 
√w
 
	`SëPoöãrPlugö
("TestSetPlugin");

36 
myRegi°ry_
->
	`£tCuºítRegi°ry
(myRegistry_);

37 
myRegi°ry_
->
	`ö°ÆlPlugö
(
∂ugö_
);

38 
ouçut_
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

39 
ªsu…_
 = 
√w
 
	`Te°Resu…
(*
ouçut_
);

42 
	`ã¨down
()

44 
myRegi°ry_
->
	`£tCuºítRegi°ry
(0);

45 
dñëe
 
myRegi°ry_
;

46 
dñëe
 
∂ugö_
;

47 
dñëe
 
ouçut_
;

48 
dñëe
 
ªsu…_
;

50 
	}
};

52 ˛as†
	cFun˘i⁄PoöãrUã°
: 
public
 
Uã°


54 
public
:

55 
	$£tup
()

57 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

58 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

59 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

61 
	$ã°Body
()

63 
	`CHECK
(
Â1
 =
°ub_func1
);

64 
	`CHECK
(
Â2
 =
°ub_func2
);

65 
	}
}

68 
	$TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTwoFun˘i⁄Poöãr
)

70 
Fun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`Fun˘i⁄PoöãrUã°
();

73 
Â1
 = 
‹ig_func1
;

74 
Â2
 = 
‹ig_func2
;

75 
myRegi°ry_
->
	`addTe°
(
t°
);

76 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

77 
	`CHECK
(
Â1
 =
‹ig_func1
);

78 
	`CHECK
(
Â2
 =
‹ig_func2
);

79 
	`LONGS_EQUAL
(0, 
ªsu…_
->
	`gëFaûuªCou¡
());

80 
dñëe
 
t°
;

81 
	}
}

83 ˛as†
	cMaxFun˘i⁄PoöãrUã°
: 
public
 
Uã°


85 
public
:

86 
numOfFpSës
;

87 
	$MaxFun˘i⁄PoöãrUã°
(
num
) :

88 
	$numOfFpSës
(
num
)

93 
	$£tup
()

95 
i
 = 0; i < 
numOfFpSës
; ++i)

96 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

97 
	}
}

100 
	$IGNORE_TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTooMuchFun˘i⁄Poöãr
)

102 
MaxFun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`MaxFun˘i⁄PoöãrUã°
(
SëPoöãrPlugö
::
MAX_SET
 + 1);

103 
myRegi°ry_
->
	`addTe°
(
t°
);

105 
myRegi°ry_
->
	`runAŒTe°s
(*
ªsu…_
);

107 
	`LONGS_EQUAL
(1, 
ªsu…_
->
	`gëFaûuªCou¡
());

108 
dñëe
 
t°
;

109 
	}
}

111 
	g‹ig_doubÀ
 = 3.0;

112 * 
	g‹ig_doubÀ_±r
 = &
‹ig_doubÀ
;

113 
	g°ub_doubÀ
 = 4.0;

115 ˛as†
	cSëDoubÀPoöãrUã°
: 
public
 
Uã°


117 
public
:

118 
	$£tup
()

120 
	`UT_PTR_SET
(
‹ig_doubÀ_±r
, &
°ub_doubÀ
);

122 
	$ã°Body
()

124 
	`CHECK
(
‹ig_doubÀ_±r
 =&
°ub_doubÀ
);

125 
	}
}

128 
	$TEST
(
SëPoöãrPlugöTe°
, 
doubÀPoöãr
)

130 
SëDoubÀPoöãrUã°
 *
doubÀt°
 = 
√w
 
	`SëDoubÀPoöãrUã°
();

131 
myRegi°ry_
->
	`addTe°
(
doubÀt°
);

132 
	`CHECK
(
‹ig_doubÀ_±r
 =&
‹ig_doubÀ
);

133 
dñëe
 
doubÀt°
;

134 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\SimpleStringTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~<°dlib.h
>

34 
	$TEST_GROUP
(
Sim∂eSåög
)

36 
	}
};

38 
	$TEST
(
Sim∂eSåög
, 
deÁu…AŒoˇt‹IsNewAºayAŒoˇt‹
)

40 
	`POINTERS_EQUAL
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(), 
Sim∂eSåög
::
	`gëSåögAŒoˇt‹
());

41 
	}
}

43 ˛as†
	cMyOwnSåögAŒoˇt‹
 : 
public
 
Sènd¨dMÆlocAŒoˇt‹


45 
public
:

46 
	$MyOwnSåögAŒoˇt‹
(Ë: 
	$mem‹yWasAŒoˇãd
(
Ál£
) {};

47 
vútuÆ
 ~
	$MyOwnSåögAŒoˇt‹
(Ë{
	}
};

49 
boﬁ
 
	gmem‹yWasAŒoˇãd
;

50 * 
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

52 
mem‹yWasAŒoˇãd
 = 
åue
;

53  
Sènd¨dMÆlocAŒoˇt‹
::
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

54 
	}
}

57 
	$TEST
(
Sim∂eSåög
, 
Æloˇt‹F‹Sim∂eSåögC™BeRïœ˚d
)

59 
MyOwnSåögAŒoˇt‹
 
myOwnAŒoˇt‹
;

60 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(&
myOwnAŒoˇt‹
);

61 
Sim∂eSåög
 
sim∂eSåög
;

62 
	`CHECK
(
myOwnAŒoˇt‹
.
mem‹yWasAŒoˇãd
);

63 
Sim∂eSåög
::
	`£tSåögAŒoˇt‹
(
NULL
);

64 
	}
}

66 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚
)

68 
Sim∂eSåög
 
	`ex≥˘ed
("hellohello");

69 
Sim∂eSåög
 
	`a˘uÆ
("hello", 2);

71 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

72 
	}
}

74 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚OfZîo
)

76 
Sim∂eSåög
 
	`ex≥˘ed
("");

77 
Sim∂eSåög
 
	`a˘uÆ
("hello", 0);

79 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

80 
	}
}

82 
	$TEST
(
Sim∂eSåög
, 
C›y
)

84 
Sim∂eSåög
 
	`s1
("hello");

85 
Sim∂eSåög
 
	`s2
(
s1
);

87 
	`CHECK_EQUAL
(
s1
, 
s2
);

88 
	}
}

90 
	$TEST
(
Sim∂eSåög
, 
Assignmít
)

92 
Sim∂eSåög
 
	`s1
("hello");

93 
Sim∂eSåög
 
	`s2
("goodbye");

95 
s2
 = 
s1
;

97 
	`CHECK_EQUAL
(
s1
, 
s2
);

98 
	}
}

100 
	$TEST
(
Sim∂eSåög
, 
EquÆôy
)

102 
Sim∂eSåög
 
	`s1
("hello");

103 
Sim∂eSåög
 
	`s2
("hello");

105 
	`CHECK
(
s1
 =
s2
);

106 
	}
}

108 
	$TEST
(
Sim∂eSåög
, 
InEquÆôy
)

110 
Sim∂eSåög
 
	`s1
("hello");

111 
Sim∂eSåög
 
	`s2
("goodbye");

113 
	`CHECK
(
s1
 !
s2
);

114 
	}
}

116 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhoutCa£
)

118 
Sim∂eSåög
 
	`s1
("hello");

119 
Sim∂eSåög
 
	`s2
("hello");

121 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

122 
	}
}

124 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£
)

126 
Sim∂eSåög
 
	`s1
("hello");

127 
Sim∂eSåög
 
	`s2
("HELLO");

129 
	`CHECK
(
s1
.
	`equÆsNoCa£
(
s2
));

130 
	}
}

132 
	$TEST
(
Sim∂eSåög
, 
Com∑ªNoCa£WôhCa£NŸEquÆ
)

134 
Sim∂eSåög
 
	`s1
("hello");

135 
Sim∂eSåög
 
	`s2
("WORLD");

137 
	`CHECK
(!
s1
.
	`equÆsNoCa£
(
s2
));

138 
	}
}

141 
	$TEST
(
Sim∂eSåög
, 
asCh¨Såög
)

143 
Sim∂eSåög
 
	`s1
("hello");

145 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Sim∂eSåög
, 
Size
)

150 
Sim∂eSåög
 
	`s1
("hello!");

152 
	`LONGS_EQUAL
(6, 
s1
.
	`size
());

153 
	}
}

155 
	$TEST
(
Sim∂eSåög
, 
toLowî
)

157 
Sim∂eSåög
 
	`s1
("AbCdEfG");

158 
Sim∂eSåög
 
	`s2
(
s1
.
	`toLowî
());

159 
	`STRCMP_EQUAL
("abcdefg", 
s2
.
	`asCh¨Såög
());

160 
	`STRCMP_EQUAL
("AbCdEfG", 
s1
.
	`asCh¨Såög
());

161 
	}
}

163 
	$TEST
(
Sim∂eSåög
, 
Addôi⁄
)

165 
Sim∂eSåög
 
	`s1
("hello!");

166 
Sim∂eSåög
 
	`s2
("goodbye!");

167 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

168 
Sim∂eSåög
 
s4
;

169 
s4
 = 
s1
 + 
s2
;

171 
	`CHECK_EQUAL
(
s3
, 
s4
);

172 
	}
}

174 
	$TEST
(
Sim∂eSåög
, 
C⁄ˇã«ti⁄
)

176 
Sim∂eSåög
 
	`s1
("hello!");

177 
Sim∂eSåög
 
	`s2
("goodbye!");

178 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

179 
Sim∂eSåög
 
s4
;

180 
s4
 +
s1
;

181 
s4
 +
s2
;

183 
	`CHECK_EQUAL
(
s3
, 
s4
);

185 
Sim∂eSåög
 
	`s5
("hello!goodbye!hello!goodbye!");

186 
s4
 += s4;

188 
	`CHECK_EQUAL
(
s5
, 
s4
);

189 
	}
}

191 
	$TEST
(
Sim∂eSåög
, 
C⁄èös
)

193 
Sim∂eSåög
 
	`s
("hello!");

194 
Sim∂eSåög
 
	`em±y
("");

195 
Sim∂eSåög
 
	`begönög
("hello");

196 
Sim∂eSåög
 
	`íd
("lo!");

197 
Sim∂eSåög
 
	`mid
("l");

198 
Sim∂eSåög
 
	`nŸP¨tOfSåög
("xxxx");

200 
	`CHECK
(
s
.
	`c⁄èös
(
em±y
));

201 
	`CHECK
(
s
.
	`c⁄èös
(
begönög
));

202 
	`CHECK
(
s
.
	`c⁄èös
(
íd
));

203 
	`CHECK
(
s
.
	`c⁄èös
(
mid
));

204 
	`CHECK
(!
s
.
	`c⁄èös
(
nŸP¨tOfSåög
));

206 
	`CHECK
(
em±y
.
	`c⁄èös
(empty));

207 
	`CHECK
(!
em±y
.
	`c⁄èös
(
s
));

208 
	}
}

210 
	$TEST
(
Sim∂eSåög
, 
°¨tsWôh
)

212 
Sim∂eSåög
 
	`hi
("Hi you!");

213 
Sim∂eSåög
 
	`∑π
("Hi");

214 
Sim∂eSåög
 
	`diff
("Hrrm Hi you! ffdsfd");

215 
	`CHECK
(
hi
.
	`°¨tsWôh
(
∑π
));

216 
	`CHECK
(!
∑π
.
	`°¨tsWôh
(
hi
));

217 
	`CHECK
(!
diff
.
	`°¨tsWôh
(
hi
));

218 
	}
}

220 
	$TEST
(
Sim∂eSåög
, 
•lô
)

222 
Sim∂eSåög
 
	`hi
("hello\nworld\nhow\ndo\nyou\ndo\n\n");

224 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

225 
hi
.
	`•lô
("\n", 
cﬁÀ˘i⁄
);

227 
	`LONGS_EQUAL
(7, 
cﬁÀ˘i⁄
.
	`size
());

228 
	`STRCMP_EQUAL
("hñlo\n", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

229 
	`STRCMP_EQUAL
("w‹ld\n", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

230 
	`STRCMP_EQUAL
("how\n", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[3].
	`asCh¨Såög
());

232 
	`STRCMP_EQUAL
("you\n", 
cﬁÀ˘i⁄
[4].
	`asCh¨Såög
());

233 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[5].
	`asCh¨Såög
());

234 
	`STRCMP_EQUAL
("\n", 
cﬁÀ˘i⁄
[6].
	`asCh¨Såög
());

235 
	}
}

237 
	$TEST
(
Sim∂eSåög
, 
•lôNoTokíOnTheEnd
)

239 
Sim∂eSåög
 
	`°rög
("Bah Yah oops");

240 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

242 
°rög
.
	`•lô
(" ", 
cﬁÀ˘i⁄
);

243 
	`LONGS_EQUAL
(3, 
cﬁÀ˘i⁄
.
	`size
());

244 
	`STRCMP_EQUAL
("Bah ", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

245 
	`STRCMP_EQUAL
("Yah ", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

246 
	`STRCMP_EQUAL
("o›s", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

247 
	}
}

249 
	$TEST
(
Sim∂eSåög
, 
cou¡
)

251 
Sim∂eSåög
 
	`°r
("ha ha ha ha");

252 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

253 
	}
}

255 
	$TEST
(
Sim∂eSåög
, 
cou¡Togëhî
)

257 
Sim∂eSåög
 
	`°r
("hahahaha");

258 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

259 
	}
}

261 
	$TEST
(
Sim∂eSåög
, 
ídsWôh
)

263 
Sim∂eSåög
 
	`°r
("Hello World");

264 
	`CHECK
(
°r
.
	`ídsWôh
("World"));

265 
	`CHECK
(!
°r
.
	`ídsWôh
("Worl"));

266 
	`CHECK
(!
°r
.
	`ídsWôh
("Hello"));

267 
Sim∂eSåög
 
	`°r2
("ah");

268 
	`CHECK
(
°r2
.
	`ídsWôh
("ah"));

269 
	`CHECK
(!
°r2
.
	`ídsWôh
("baah"));

270 
Sim∂eSåög
 
	`°r3
("");

271 
	`CHECK
(!
°r3
.
	`ídsWôh
("baah"));

273 
Sim∂eSåög
 
	`°r4
("ha ha ha ha");

274 
	`CHECK
(
°r4
.
	`ídsWôh
("ha"));

275 
	}
}

277 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚Ch¨WôhCh¨
)

279 
Sim∂eSåög
 
	`°r
("abcabcabca");

280 
°r
.
	`ª∂a˚
('a', 'b');

281 
	`STRCMP_EQUAL
("bbcbbcbbcb", 
°r
.
	`asCh¨Såög
());

282 
	}
}

284 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚SåögWôhSåög
)

286 
Sim∂eSåög
 
	`°r
("boo baa boo baa boo");

287 
°r
.
	`ª∂a˚
("boo", "boohoo");

288 
	`STRCMP_EQUAL
("boohoÿbØ boohoÿbØ boohoo", 
°r
.
	`asCh¨Såög
());

289 
	}
}

291 
	$TEST
(
Sim∂eSåög
, 
subSåögFromEm±ySåög
)

293 
Sim∂eSåög
 
	`°r
("");

294 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

295 
	}
}

297 
	$TEST
(
Sim∂eSåög
, 
subSåögFromSmÆlSåög
)

299 
Sim∂eSåög
 
	`°r
("H");

300 
	`STRCMP_EQUAL
("H", 
°r
.
	`subSåög
(0, 1).
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos0
)

305 
Sim∂eSåög
 
	`°r
("Hello World");

306 
	`STRCMP_EQUAL
("Hñlo", 
°r
.
	`subSåög
(0, 5).
	`asCh¨Såög
());

307 
	}
}

309 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos1
)

311 
Sim∂eSåög
 
	`°r
("Hello World");

312 
	`STRCMP_EQUAL
("ñlÿ", 
°r
.
	`subSåög
(1, 5).
	`asCh¨Såög
());

313 
	}
}

315 
	$TEST
(
Sim∂eSåög
, 
subSåögFromPos5WôhAmou¡L¨gîTh™Såög
)

317 
Sim∂eSåög
 
	`°r
("Hello World");

318 
	`STRCMP_EQUAL
("W‹ld", 
°r
.
	`subSåög
(6, 10).
	`asCh¨Såög
());

319 
	}
}

321 
	$TEST
(
Sim∂eSåög
, 
subSåögBegöPosOutOfBounds
)

323 
Sim∂eSåög
 
	`°r
("Hello World");

324 
	`STRCMP_EQUAL
("", 
°r
.
	`subSåög
(13, 5).
	`asCh¨Såög
());

325 
	}
}

327 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rN‹mÆ
)

329 
Sim∂eSåög
 
	`°r
("Hello World");

330 
buf„rSize
 = 
°r
.
	`size
()+1;

331 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

332 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

333 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

334 
	`‰ì
(
buf„r
);

335 
	}
}

337 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhEm±yBuf„r
)

339 
Sim∂eSåög
 
	`°r
("Hello World");

340 * 
buf„r

NULL
;

341 
°r
.
	`c›yToBuf„r
(
buf„r
, 0);

342 
	`POINTERS_EQUAL
(
NULL
, 
buf„r
);

343 
	}
}

345 
	$TEST
(
Sim∂eSåög
, 
c›yInBuf„rWôhBiggîBuf„rTh™Nìded
)

347 
Sim∂eSåög
 
	`°r
("Hello");

348 
buf„rSize
 = 20;

349 * 
buf„r
(*Ë
	`mÆloc
(
buf„rSize
);

350 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

351 
	`STRCMP_EQUAL
(
°r
.
	`asCh¨Såög
(), 
buf„r
);

352 
	`‰ì
(
buf„r
);

353 
	}
}

355 
	$TEST
(
Sim∂eSåög
, 
C⁄èösNuŒ
)

357 
Sim∂eSåög
 
	`s
(0);

358 
	`CHECK
(!
s
.
	`c⁄èös
("something"));

359 
	}
}

361 
	$TEST
(
Sim∂eSåög
, 
NULLRï‹tsNuŒSåög
)

363 
	`STRCMP_EQUAL
("“uŒ)", 
	`SåögFromOrNuŒ
((*Ë
NULL
).
	`asCh¨Såög
());

364 
	}
}

366 
	$TEST
(
Sim∂eSåög
, 
Ch¨a˘îs
)

368 
Sim∂eSåög
 
	`s
(
	`SåögFrom
('a'));

369 
Sim∂eSåög
 
	`s2
(
	`SåögFrom
('a'));

370 
	`CHECK
(
s
 =
s2
);

371 
	}
}

373 
	$TEST
(
Sim∂eSåög
, 
DoubÀs
)

375 
Sim∂eSåög
 
	`s
(
	`SåögFrom
(1.2));

376 
	`STRCMP_EQUAL
("1.200000", 
s
.
	`asCh¨Såög
());

377 
s
 = 
	`SåögFrom
(1.2, 2);

378 
	`STRCMP_EQUAL
("1.20", 
s
.
	`asCh¨Såög
());

379 
	}
}

381 
	$TEST
(
Sim∂eSåög
, 
HexSåögs
)

383 
Sim∂eSåög
 
h1
 = 
	`HexSåögFrom
(0xffff);

384 
	`STRCMP_EQUAL
("ffff", 
h1
.
	`asCh¨Såög
());

385 
	}
}

387 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©
)

389 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s %s! %d", "Hello", "World", 2009);

390 
	`STRCMP_EQUAL
("HñlÿW‹ld! 2009", 
h1
.
	`asCh¨Såög
());

391 
	}
}

393 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©L¨ge
)

395 c⁄° * 
s
 = "ThisIsAPrettyLargeStringAndIfWeAddThisManyTimesToABufferItWillbeFull";

396 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s%s%s%s%s%s%s%s%s%s", 
s
, s, s, s, s, s, s, s, s, s);

397 
	`LONGS_EQUAL
(10, 
h1
.
	`cou¡
(
s
));

398 
	}
}

400 
	$WøµedUpVSNPrötf
(* 
buf
, 
n
, c⁄° * 
f‹m©
, ...)

402 
va_li°
 
¨gumíts
;

403 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

405 
ªsu…
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf
, 
n
, 
f‹m©
, 
¨gumíts
);

406 
	`va_íd
(
¨gumíts
);

407  
ªsu…
;

408 
	}
}

410 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_fôs
)

412 
buf
[10];

414 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345");

415 
	`STRCMP_EQUAL
("12345", 
buf
);

416 
	`LONGS_EQUAL
(5, 
cou¡
);

417 
	}
}

419 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_d€sNŸFô
)

421 
buf
[10];

423 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345678901");

424 
	`STRCMP_EQUAL
("123456789", 
buf
);

425 
	`LONGS_EQUAL
(11, 
cou¡
);

426 
	}
}

428 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög1L¨gî
)

430 
Sim∂eSåög
 
	`°r1
("1");

431 
Sim∂eSåög
 
	`°r2
("222");

433 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, '4');

434 
	`STRCMP_EQUAL
("441", 
°r1
.
	`asCh¨Såög
());

435 
	`STRCMP_EQUAL
("222", 
°r2
.
	`asCh¨Såög
());

436 
	}
}

438 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthSåög2L¨gî
)

440 
Sim∂eSåög
 
	`°r1
(" ");

441 
Sim∂eSåög
 
	`°r2
("");

443 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

444 
	`STRCMP_EQUAL
(" ", 
°r1
.
	`asCh¨Såög
());

445 
	`STRCMP_EQUAL
(" ", 
°r2
.
	`asCh¨Såög
());

446 
	}
}

448 
	$TEST
(
Sim∂eSåög
, 
PadSåögsToSameLígthWôhSameLígthSåögs
)

450 
Sim∂eSåög
 
	`°r1
("123");

451 
Sim∂eSåög
 
	`°r2
("123");

453 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
°r1
, 
°r2
, ' ');

454 
	`STRCMP_EQUAL
("123", 
°r1
.
	`asCh¨Såög
());

455 
	`STRCMP_EQUAL
("123", 
°r2
.
	`asCh¨Såög
());

456 
	}
}

458 
	$TEST
(
Sim∂eSåög
, 
NuŒP¨amëîs2
)

460 
Sim∂eSåög
* 
¨r
 = 
√w
 SimpleString[100];

461 
dñëe
[] 
¨r
;

462 
	}
}

464 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄Mu…ùÀAŒoˇãNoLóksMem‹y
)

466 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

467 
cﬁ
.
	`Æloˇã
(5);

468 
cﬁ
.
	`Æloˇã
(5);

470 
	}
}

472 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄RódOutOfBoundsRëu∫sEm±ySåög
)

474 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

475 
cﬁ
.
	`Æloˇã
(3);

476 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

477 
	}
}

479 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄WrôögToEm±ySåög
)

481 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

482 
cﬁ
.
	`Æloˇã
(3);

483 
cﬁ
[3] = 
	`Sim∂eSåög
("HAH");

484 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

485 
	}
}

487 #i‡
CPPUTEST_USE_STD_CPP_LIB


489 
	$TEST
(
Sim∂eSåög
, 
‰omStdSåög
)

491 
°d
::
°rög
 
	`s
("hello");

492 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

494 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

495 
	}
}

497 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt32_t
)

499 
uöt32_t
 
i
 = 0xffffffff;

500 
	`CHECK_EQUAL
(
i
, i);

501 
	}
}

503 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt16_t
)

505 
uöt16_t
 
i
 = 0xffff;

506 
	`CHECK_EQUAL
(
i
, i);

507 
	}
}

509 
	$TEST
(
Sim∂eSåög
, 
CHECK_EQUAL_Uöt8_t
)

511 
uöt8_t
 
i
 = 0xff;

512 
	`CHECK_EQUAL
(
i
, i);

513 
	}
}

515 
	$TEST
(
Sim∂eSåög
, 
Uöt32_t
)

517 
uöt32_t
 
i
 = 0xffffffff;

519 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

520 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

521 
	}
}

523 
	$TEST
(
Sim∂eSåög
, 
Uöt16_t
)

525 
uöt16_t
 
i
 = 0xffff;

527 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

528 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

529 
	}
}

531 
	$TEST
(
Sim∂eSåög
, 
Uöt8_t
)

533 
uöt8_t
 
i
 = 0xff;

535 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

536 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

537 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestFailureTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

31 
	g«me•a˚


33 c⁄° 
	gÁûLöeNumbî
 = 2;

34 c⁄° * 
	gÁûFûeName
 = "fail.cpp";

37 
	$TEST_GROUP
(
Te°Faûuª
)

39 
Uã°
* 
ã°
;

40 
SåögBuf„rTe°Ouçut
* 
¥öãr
;

42 
	`£tup
()

44 
ã°
 = 
√w
 
	`NuŒTe°
(
ÁûFûeName
, 
ÁûLöeNumbî
-1);

45 
¥öãr
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
	`ã¨down
()

49 
dñëe
 
ã°
;

50 
dñëe
 
¥öãr
;

53 
	}
};

54 
	#FAILURE_EQUAL
(
a
, 
b
Ë
	`STRCMP_EQUAL_LOCATION
◊, b.
	`gëMesßge
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
)

	)

56 
	$TEST
(
Te°Faûuª
, 
Cª©eFaûuª
)

58 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

59 
Te°Faûuª
 
	`f2
(
ã°
, "the failure message");

60 
Te°Faûuª
 
	`f3
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
);

61 
	}
}

63 
	$TEST
(
Te°Faûuª
, 
GëTe°FûeAndLöeFromFaûuª
)

65 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

66 
	`STRCMP_EQUAL
(
ÁûFûeName
, 
f1
.
	`gëTe°FûeName
().
	`asCh¨Såög
());

67 
	`LONGS_EQUAL
(1, 
f1
.
	`gëTe°LöeNumbî
());

68 
	}
}

70 
	$TEST
(
Te°Faûuª
, 
Cª©ePassögEquÆsFaûuª
)

72 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

73 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <a˘uÆ>", 
f
);

74 
	}
}

76 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsA˘uÆ
)

78 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ex≥˘ed", 
NULL
);

79 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <“uŒ)>", 
f
);

80 
	}
}

82 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsEx≥˘ed
)

84 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
NULL
, "actual");

85 
	`FAILURE_EQUAL
("ex≥˘ed <“uŒ)>\n\tbuàwa† <a˘uÆ>", 
f
);

86 
	}
}

88 
	$TEST
(
Te°Faûuª
, 
CheckEquÆFaûuª
)

90 
CheckEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

91 
	`FAILURE_EQUAL
("expected <expected>\n"

94 "\à ^", 
f
);

95 
	}
}

97 
	$TEST
(
Te°Faûuª
, 
CheckFaûuª
)

99 
CheckFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

100 
	`FAILURE_EQUAL
("CHECK(chkËÁûed", 
f
);

101 
	}
}

103 
	$TEST
(
Te°Faûuª
, 
FaûFaûuª
)

105 
FaûFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

106 
	`FAILURE_EQUAL
("chk", 
f
);

107 
	}
}

109 
	$TEST
(
Te°Faûuª
, 
L⁄gsEquÆFaûuª
)

111 
L⁄gsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1, 2);

112 
	`FAILURE_EQUAL
("ex≥˘ed <1 0x1>\n\tbuàwa† <2 0x2>", 
f
);

113 
	}
}

115 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuª
)

117 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "abd");

118 
	`FAILURE_EQUAL
("expected <abc>\n"

121 "\à ^", 
f
);

122 
	}
}

124 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheEnd
)

126 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "ab");

127 
	`FAILURE_EQUAL
("expected <abc>\n"

130 "\à ^", 
f
);

131 
	}
}

133 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªNewV¨ü¡AtTheEnd
)

135 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "EndOfALongerString", "EndOfALongerStrinG");

136 
	`FAILURE_EQUAL
("expected <EndOfALongerString>\n"

139 "\à ^", 
f
);

140 
	}
}

142 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªWôhNewLöesAndTabs
)

144 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
,

148 
	`FAILURE_EQUAL
("expected <StringWith\t\nDifferentString>\n"

151 "\à \t\n^", 
f
);

152 
	}
}

154 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªInTheMiddÀ
)

156 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aa", "ab");

157 
	`FAILURE_EQUAL
("expected <aa>\n"

160 "\à ^", 
f
);

161 
	}
}

164 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheBegönög
)

166 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aaa", "bbb");

167 
	`FAILURE_EQUAL
("expected <aaa>\n"

170 "\à ^", 
f
);

171 
	}
}

173 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª
)

175 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ABC", "abd");

176 
	`FAILURE_EQUAL
("expected <ABC>\n"

179 "\à ^", 
f
);

180 
	}
}

182 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª2
)

184 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ac", "AB");

185 
	`FAILURE_EQUAL
("expected <ac>\n"

188 "\à ^", 
f
);

189 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestHarness_cTest.cpp

30 
	#_WCHART


	)

31 
	~"CµUTe°/Te°H¨√ss_c.h
"

32 
	~"°dlib.h
"

35 
	~"CµUTe°/Te°H¨√ss.h
"

36 
	~"CµUTe°/Te°Regi°ry.h
"

37 
	~"CµUTe°/Te°Ouçut.h
"

38 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

39 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

41 
	$TEST_GROUP
(
Te°H¨√ss_c
)

43 
Te°Te°ögFixtuª
* 
fixtuª
;

44 
	`TEST_SETUP
()

46 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

48 
	`TEST_TEARDOWN
()

50 
dñëe
 
fixtuª
;

52 
	}
};

54 
	$_ÁûI¡Mëhod
()

56 
	`CHECK_EQUAL_C_INT
(1, 2);

57 
	}
}

59 
	$TEST
(
Te°H¨√ss_c
, 
checkI¡
)

61 
	`CHECK_EQUAL_C_INT
(2, 2);

62 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûI¡Mëhod
);

63 
fixtuª
->
	`runAŒTe°s
();

64 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1>\n but was <2>");

65 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

66 
	}
}

68 
	$_ÁûRólMëhod
()

70 
	`CHECK_EQUAL_C_REAL
(1.0, 2.0, 0.5);

71 
	}
}

73 
	$TEST
(
Te°H¨√ss_c
, 
checkRól
)

75 
	`CHECK_EQUAL_C_REAL
(1.0, 1.1, 0.5);

76 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûRólMëhod
);

77 
fixtuª
->
	`runAŒTe°s
();

78 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1.000000>\n but was <2.000000>");

79 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

80 
	}
}

82 
	$_ÁûCh¨Mëhod
()

84 
	`CHECK_EQUAL_C_CHAR
('a', 'c');

85 
	}
}

87 
	$TEST
(
Te°H¨√ss_c
, 
checkCh¨
)

89 
	`CHECK_EQUAL_C_CHAR
('a', 'a');

90 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûCh¨Mëhod
);

91 
fixtuª
->
	`runAŒTe°s
();

92 
fixtuª
->
	`as£πPrötC⁄èös
("expected <a>\n but was <c>");

93 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

94 
	}
}

96 
	$_ÁûSåögMëhod
()

98 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello World");

99 
	}
}

101 
	$TEST
(
Te°H¨√ss_c
, 
checkSåög
)

103 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello");

104 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûSåögMëhod
);

105 
fixtuª
->
	`runAŒTe°s
();

107 
SåögEquÆFaûuª
 
	`Áûuª
(
this
, "file", 1, "Hello", "Hello World");

108 
fixtuª
->
	`as£πPrötC⁄èös
(
Áûuª
.
	`gëMesßge
());

109 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

110 
	}
}

112 
	$_ÁûTextMëhod
()

114 
	`FAIL_TEXT_C
("Booo");

115 
	}
}

117 
	$TEST
(
Te°H¨√ss_c
, 
checkFaûText
)

119 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûTextMëhod
);

120 
fixtuª
->
	`runAŒTe°s
();

121 
fixtuª
->
	`as£πPrötC⁄èös
("Booo");

122 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

123 
	}
}

125 
	$_ÁûMëhod
()

127 
	`FAIL_C
();

128 
	}
}

130 
	$TEST
(
Te°H¨√ss_c
, 
checkFaû
)

132 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

133 
fixtuª
->
	`runAŒTe°s
();

134 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

135 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

136 
	}
}

138 
	$_CheckMëhod
()

140 
	`CHECK_C
(
Ál£
);

141 
	}
}

143 
	$TEST
(
Te°H¨√ss_c
, 
checkCheck
)

145 
	`CHECK_C
(
åue
);

146 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_CheckMëhod
);

147 
fixtuª
->
	`runAŒTe°s
();

148 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

149 
	}
}

151 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_mÆloc_out_of_mem‹y
)

153 
	`˝puã°_mÆloc_£t_out_of_mem‹y
();

154 
	`CHECK
(0 =
	`˝puã°_mÆloc
(100));

156 
	`˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

157 * 
mem
 = 
	`˝puã°_mÆloc
(100);

158 
	`CHECK
(0 !
mem
);

159 
	`˝puã°_‰ì
(
mem
);

160 
	}
}

162 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ˇŒoc
)

164 * 
mem
 = 
	`˝puã°_ˇŒoc
(10, 10);

165 
	`CHECK
(0 !
mem
);

166 
	`˝puã°_‰ì
(
mem
);

167 
	}
}

169 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ªÆloc_œrgî
)

171 c⁄° * 
numbî_°rög
 = "123456789";

173 * 
mem1
 = (*Ë
	`˝puã°_mÆloc
(10);

175 
	`Pœtf‹mS≥cificSåCpy
(
mem1
, 
numbî_°rög
);

176 
	`CHECK
(
mem1
 != 0);

178 * 
mem2
 = (*Ë
	`˝puã°_ªÆloc
(
mem1
, 1000);

180 
	`CHECK
(
mem2
 != 0);

181 
	`STRCMP_EQUAL
(
numbî_°rög
, 
mem2
);

183 
	`˝puã°_‰ì
(
mem2
);

184 
	}
}

186 
	$TEST
(
Te°H¨√ss_c
, 
ma¸os
)

188 * 
mem1
 = 
	`mÆloc
(10);

189 * 
mem2
 = 
	`ˇŒoc
(10, 20);

190 * 
mem3
 = 
	`ªÆloc
(
mem2
, 100);

191 
	`‰ì
(
mem1
);

192 
	`‰ì
(
mem3
);

193 
	}
}

195 
	$TEST
(
Te°H¨√ss_c
, 
ˇŒocInôülizedToZîo
)

197 * 
mem
 = (*Ë
	`ˇŒoc
(20, ());

198 
i
 = 0; i < 20; i++)

199 
	`CHECK
(
mem
[
i
] == 0);

200 
	`‰ì
(
mem
);

201 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestInstallerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

35 
NuŒTe°
 
	gnuŒTe°
;

37 
	$TEST_GROUP
(
Te°In°ÆÀr
)

39 
Te°In°ÆÀr
* 
ã°In°ÆÀr
;

40 
Te°Regi°ry
* 
myRegi°ry
;

41 
	`£tup
()

43 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

44 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

45 
ã°In°ÆÀr
 = 
√w
 
	`Te°In°ÆÀr
(&
nuŒTe°
, "Te°In°ÆÀr", "ã°", 
__FILE__
, 
__LINE__
);

47 
	`ã¨down
()

49 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

50 
ã°In°ÆÀr
->
	`unDo
();

51 
dñëe
 
ã°In°ÆÀr
;

52 
dñëe
 
myRegi°ry
;

54 
	}
};

56 
	$TEST
(
Te°In°ÆÀr
, 
Cª©e
)

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

37  
mûlisTime
;

38 
	}
}

40 
	$TEST_GROUP
(
Te°Ouçut
)

42 
Te°Ouçut
* 
¥öãr
;

43 
SåögBuf„rTe°Ouçut
* 
mock
;

44 
Uã°
* 
t°
;

45 
Te°Faûuª
 *
f
;

46 
Te°Faûuª
 *
f2
;

47 
Te°Faûuª
 *
f3
;

48 
Te°Resu…
* 
ªsu…
;

50 
	`£tup
()

52 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

53 
¥öãr
 = 
mock
;

54 
t°
 = 
√w
 
	`Uã°
("group", "test", "file", 10);

55 
f
 = 
√w
 
	`Te°Faûuª
(
t°
, "failfile", 20, "message");

56 
f2
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 20, "message");

57 
f3
 = 
√w
 
	`Te°Faûuª
(
t°
, "file", 2, "message");

58 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
mock
);

59 
ªsu…
->
	`£tTŸÆExecuti⁄Time
(10);

60 
mûlisTime
 = 0;

61 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

63 
	`ã¨down
()

65 
dñëe
 
¥öãr
;

66 
dñëe
 
t°
;

67 
dñëe
 
f
;

68 
dñëe
 
f2
;

69 
dñëe
 
f3
;

70 
dñëe
 
ªsu…
;

71 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

73 
	}
};

75 
	$TEST
(
Te°Ouçut
, 
PrötC⁄°Ch¨Sèr
)

77 
¥öãr
->
	`¥öt
("hello");

78 
¥öãr
->
	`¥öt
("hello\n");

79 
	`STRCMP_EQUAL
("hñlohñlo\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
Te°Ouçut
, 
PrötL⁄g
)

84 
¥öãr
->
	`¥öt
(1234);

85 
	`STRCMP_EQUAL
("1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

86 
	}
}

88 
	$TEST
(
Te°Ouçut
, 
PrötDoubÀ
)

90 
¥öãr
->
	`¥ötDoubÀ
(12.34);

91 
	`STRCMP_EQUAL
("12.340", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Te°Ouçut
, 
SåómO≥øt‹s
)

96 *
¥öãr
 << "n=" << 1234;

97 
	`STRCMP_EQUAL
("n=1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

98 
	}
}

100 
	$TEST
(
Te°Ouçut
, 
PrötTe°Ended
)

102 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

103 
	`STRCMP_EQUAL
(".", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

104 
	}
}

106 
	$TEST
(
Te°Ouçut
, 
PrötTe°ALŸ
)

108 
i
 = 0; i < 60; ++i) {

109 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

111 
	`STRCMP_EQUAL
("..................................................\n..........", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

112 
	}
}

114 
	$TEST
(
Te°Ouçut
, 
SëProgªssIndiˇt‹
)

116 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

117 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

118 
ªsu…
->
	`£tProgªssIndiˇt‹
("!");

119 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

120 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

121 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

123 
	`STRCMP_EQUAL
(".!.", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

124 
	}
}

126 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Sèπed
)

128 
mock
->
	`vîbo£
();

129 
¥öãr
->
	`¥ötCuºítTe°Sèπed
(*
t°
);

130 
	`STRCMP_EQUAL
("TEST(group,Åe°)", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

131 
	}
}

133 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Ended
)

135 
mock
->
	`vîbo£
();

136 
ªsu…
->
	`cuºítTe°Sèπed
(
t°
);

137 
mûlisTime
 = 5;

138 
ªsu…
->
	`cuºítTe°Ended
(
t°
);

139 
	`STRCMP_EQUAL
("TEST(group,Åe°Ë- 5 ms\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

140 
	}
}

142 
	$TEST
(
Te°Ouçut
, 
PrötTe°Run
)

144 
¥öãr
->
	`¥ötTe°Run
(2, 3);

145 
	`STRCMP_EQUAL
("Te°Ñu¿2 o‡3\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Te°Ouçut
, 
PrötTe°RunO∆yO√
)

150 
¥öãr
->
	`¥ötTe°Run
(1, 1);

151 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

152 
	}
}

154 
	$TEST
(
Te°Ouçut
, 
PrötWôhFaûuªInSameFûe
)

156 
¥öãr
->
	`¥öt
(*
f2
);

157 
	`STRCMP_EQUAL
("\nfûe:20:Éº‹: Faûuª i¿TEST(group,Åe°)\n\tmesßge\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

158 
	}
}

160 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInDif„ª¡Fûe
)

162 
¥öãr
->
	`¥öt
(*
f
);

163 c⁄° * 
ex≥˘ed
 =

166 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

167 
	}
}

169 
	$TEST
(
Te°Ouçut
, 
PrötFaûuªWôhFaûInHñ≥r
)

171 
¥öãr
->
	`¥öt
(*
f3
);

172 c⁄° * 
ex≥˘ed
 =

175 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

176 
	}
}

178 
	$TEST
(
Te°Ouçut
, 
PrötTe°Sèπs
)

180 
¥öãr
->
	`¥ötTe°sSèπed
();

181 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

182 
	}
}

184 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEnded
)

186 
ªsu…
->
	`cou¡Te°
();

187 
ªsu…
->
	`cou¡Check
();

188 
ªsu…
->
	`cou¡Ign‹ed
();

189 
ªsu…
->
	`cou¡Ign‹ed
();

190 
ªsu…
->
	`cou¡Run
();

191 
ªsu…
->
	`cou¡Run
();

192 
ªsu…
->
	`cou¡Run
();

193 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

194 
	`STRCMP_EQUAL
("\nOK (1Åe°s, 3Ñ™, 1 checks, 2 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

195 
	}
}

197 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEndedWôhFaûuªs
)

199 
ªsu…
->
	`addFaûuª
(*
f
);

200 
¥öãr
->
	`Êush
();

201 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

202 
	`STRCMP_EQUAL
("\nEº‹†(1 faûuªs, 0Åe°s, 0Ñ™, 0 checks, 0 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

203 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestRegistryTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	g«me•a˚


34 
°ub
()

37 c⁄° 
	gã°LöeNumbî
 = 1;

40 ˛as†
	cMockTe°
: 
public
 
Uã°


42 
public
:

43 
MockTe°
(c⁄° * 
group
 = "Group") :

44 
Uã°
(
group
, "Name", "Fûe", 
ã°LöeNumbî
), 
	$hasRun_
(
Ál£
)

47 
	$ã°Body
()

49 
hasRun_
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	ghasRun_
;

55 ˛as†
	cMockTe°Resu…
: 
public
 
Te°Resu…


57 
public
:

59 
cou¡Te°sSèπed
;

60 
	mcou¡Te°sEnded
;

61 
	mcou¡CuºítTe°Sèπed
;

62 
	mcou¡CuºítTe°Ended
;

63 
	mcou¡CuºítGroupSèπed
;

64 
	mcou¡CuºítGroupEnded
;

66 
	$MockTe°Resu…
(
Te°Ouçut
& 
p
) :

67 
	$Te°Resu…
(
p
)

69 
	`ª£tCou¡
();

72 
vútuÆ
 ~
	$MockTe°Resu…
()

74 
	}
}

77 
	$ª£tCou¡
()

79 
cou¡Te°sSèπed
 = 0;

80 
cou¡Te°sEnded
 = 0;

81 
cou¡CuºítTe°Sèπed
 = 0;

82 
cou¡CuºítTe°Ended
 = 0;

83 
cou¡CuºítGroupSèπed
 = 0;

84 
cou¡CuºítGroupEnded
 = 0;

85 
	}
}

87 
vútuÆ
 
	$ã°sSèπed
()

89 
cou¡Te°sSèπed
++;

90 
	}
}

91 
vútuÆ
 
	$ã°sEnded
()

93 
cou¡Te°sEnded
++;

94 
	}
}

95 
vútuÆ
 
	$cuºítTe°Sèπed
(
Uã°
* )

97 
cou¡CuºítTe°Sèπed
++;

98 
	}
}

99 
vútuÆ
 
	$cuºítTe°Ended
(
Uã°
* )

101 
cou¡CuºítTe°Ended
++;

102 
	}
}

103 
vútuÆ
 
	$cuºítGroupSèπed
(
Uã°
* )

105 
cou¡CuºítGroupSèπed
++;

106 
	}
}

107 
vútuÆ
 
	$cuºítGroupEnded
(
Uã°
* )

109 
cou¡CuºítGroupEnded
++;

110 
	}
}

114 
	$TEST_GROUP
(
Te°Regi°ry
)

116 
Te°Regi°ry
* 
myRegi°ry
;

117 
SåögBuf„rTe°Ouçut
* 
ouçut
;

118 
MockTe°
* 
ã°1
;

119 
MockTe°
* 
ã°2
;

120 
MockTe°
* 
ã°3
;

121 
Te°Resu…
 *
ªsu…
;

122 
MockTe°Resu…
 *
mockResu…
;

123 
	`£tup
()

125 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

126 
mockResu…
 = 
√w
 
	`MockTe°Resu…
(*
ouçut
);

127 
ªsu…
 = 
mockResu…
;

128 
ã°1
 = 
√w
 
	`MockTe°
();

129 
ã°2
 = 
√w
 
	`MockTe°
();

130 
ã°3
 = 
√w
 
	`MockTe°
("group2");

131 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

132 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

135 
	`ã¨down
()

137 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

138 
dñëe
 
myRegi°ry
;

139 
dñëe
 
ã°1
;

140 
dñëe
 
ã°2
;

141 
dñëe
 
ã°3
;

142 
dñëe
 
ªsu…
;

143 
dñëe
 
ouçut
;

145 
	}
};

147 
	$TEST
(
Te°Regi°ry
, 
ªgi°ryMyRegi°ryAndRe£t
)

149 
	`CHECK
(
myRegi°ry
->
	`gëCuºítRegi°ry
() == myRegistry);

150 
	}
}

152 
	$TEST
(
Te°Regi°ry
, 
em±yRegi°ryIsEm±y
)

154 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

155 
	}
}

157 
	$TEST
(
Te°Regi°ry
, 
addO√Te°IsNŸEm±y
)

159 
myRegi°ry
->
	`addTe°
(
ã°1
);

160 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

161 
	}
}

163 
	$TEST
(
Te°Regi°ry
, 
addO√TwoTe°s
)

165 
myRegi°ry
->
	`addTe°
(
ã°1
);

166 
myRegi°ry
->
	`addTe°
(
ã°2
);

167 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

168 
	}
}

170 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°s
)

172 
myRegi°ry
->
	`addTe°
(
ã°1
);

173 
myRegi°ry
->
	`addTe°
(
ã°2
);

174 
	`CHECK
(!
ã°1
->
hasRun_
);

175 
	`CHECK
(!
ã°2
->
hasRun_
);

176 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

177 
	`CHECK
(
ã°1
->
hasRun_
);

178 
	`CHECK
(
ã°2
->
hasRun_
);

179 
	}
}

181 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°sCheckResu…Fun˘i⁄sCÆÀd
)

183 
myRegi°ry
->
	`addTe°
(
ã°1
);

184 
myRegi°ry
->
	`addTe°
(
ã°2
);

185 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

186 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sSèπed
);

187 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sEnded
);

188 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupSèπed
);

189 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupEnded
);

190 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

191 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Ended
);

192 
	}
}

194 
	$TEST
(
Te°Regi°ry
, 
runThªeTe°ßndTwoGroupsCheckResu…Fun˘i⁄sCÆÀd
)

196 
myRegi°ry
->
	`addTe°
(
ã°1
);

197 
myRegi°ry
->
	`addTe°
(
ã°2
);

198 
myRegi°ry
->
	`addTe°
(
ã°3
);

199 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

200 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupSèπed
);

201 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupEnded
);

202 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

203 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Ended
);

204 
	}
}

206 
	$TEST
(
Te°Regi°ry
, 
unDoTe°
)

208 
myRegi°ry
->
	`addTe°
(
ã°1
);

209 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

210 
myRegi°ry
->
	`unDoLa°AddTe°
();

211 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

212 
	}
}

214 
	$TEST
(
Te°Regi°ry
, 
unDoButNoTe°
)

216 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

217 
myRegi°ry
->
	`unDoLa°AddTe°
();

218 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

219 
	}
}

221 
	$TEST
(
Te°Regi°ry
, 
ªÆlyUndoLa°Te°
)

223 
myRegi°ry
->
	`addTe°
(
ã°1
);

224 
myRegi°ry
->
	`addTe°
(
ã°2
);

225 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

226 
myRegi°ry
->
	`unDoLa°AddTe°
();

227 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

228 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

229 
	`CHECK
(
ã°1
->
hasRun_
);

230 
	`CHECK
(!
ã°2
->
hasRun_
);

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestResultTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

35 
	}
}

37 
	$TEST_GROUP
(
Te°Resu…
)

39 
Te°Ouçut
* 
¥öãr
;

40 
SåögBuf„rTe°Ouçut
* 
mock
;

42 
Te°Resu…
* 
ªs
;

44 
	`£tup
()

46 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
¥öãr
 = 
mock
;

48 
ªs
 = 
√w
 
	`Te°Resu…
(*
¥öãr
);

49 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

51 
	`ã¨down
()

53 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

54 
dñëe
 
¥öãr
;

55 
dñëe
 
ªs
;

57 
	}
};

59 
	$TEST
(
Te°Resu…
, 
Te°EndedWûlPrötResu…sAndExecuti⁄Time
)

61 
ªs
->
	`ã°sEnded
();

62 
	`CHECK
(
mock
->
	`gëOuçut
().
	`c⁄èös
("10 ms"));

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\UtestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
boﬁ
 
	ga·îCheck
;

35 
	$TEST_GROUP
(
Uã°
)

37 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
	`£tup
()

40 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

41 
a·îCheck
 = 
Ál£
;

43 
	`ã¨down
()

45 
dñëe
 
fixtuª
;

48 
	`ã°FaûuªWôh
((*
mëhod
)())

50 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

51 
fixtuª
->
	`runAŒTe°s
();

52 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

53 
	`CHECK
(!
a·îCheck
);

56 
	`ã°FaûuªWôhMëhodShouldC⁄èö
((*
mëhod
)(), c⁄° * 
ex≥˘ed
)

58 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

59 
fixtuª
->
	`runAŒTe°s
();

60 
fixtuª
->
	`as£πPrötC⁄èös
(
ex≥˘ed
);

61 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

62 
	`CHECK
(!
a·îCheck
);

65 
	}
};

67 
	$_∑ssMëhod
()

69 
	`CHECK
(
åue
);

70 
a·îCheck
 = 
åue
;

71 
	}
}

73 
	$_∑ssPröt
()

75 
	`UT_PRINT
("Hello World!");

76 
	}
}

78 
	$_∑ssPrötF
()

80 
	`UT_PRINT
(
	`SåögFromF‹m©
("Hello %s %d", "World!", 2009));

81 
	}
}

83 
	$_ÁûMëhod
()

85 
	`FAIL
("ThisÅest fails");

86 
a·îCheck
 = 
åue
;

87 
	}
}

89 
	$_ÁûMëhodFAIL_TEST
()

91 
	`FAIL_TEST
("ThisÅest fails");

92 
a·îCheck
 = 
åue
;

93 
	}
}

95 
	$_ÁûMëhodCHECK
()

97 
	`CHECK
(
Ál£
);

98 
a·îCheck
 = 
åue
;

99 
	}
}

101 
	$_ÁûMëhodCHECK_EQUAL
()

103 
	`CHECK_EQUAL
(1, 2);

104 
a·îCheck
 = 
åue
;

105 
	}
}

107 
	$_ÁûMëhodSTRCMP_CONTAINS
()

109 
	`STRCMP_CONTAINS
("hello", "world");

110 
a·îCheck
 = 
åue
;

111 
	}
}

113 
	$_ÁûMëhodSTRCMP_NOCASE_CONTAINS
()

115 
	`STRCMP_NOCASE_CONTAINS
("hello", "WORLD");

116 
a·îCheck
 = 
åue
;

117 
	}
}

119 
	$_ÁûMëhodLONGS_EQUAL
()

121 
	`LONGS_EQUAL
(1, 0xff);

122 
a·îCheck
 = 
åue
;

123 
	}
}

124 
	$_ÁûMëhodBYTES_EQUAL
()

126 
	`BYTES_EQUAL
('a', 'b');

127 
a·îCheck
 = 
åue
;

128 
	}
}

130 
	$_ÁûMëhodPOINTERS_EQUAL
()

132 
	`POINTERS_EQUAL
((*)0xa5a5, (*)0xf0f0);

133 
a·îCheck
 = 
åue
;

134 
	}
}

136 
	$_ÁûMëhodDOUBLES_EQUAL
()

138 
	`DOUBLES_EQUAL
(0.12, 44.1, 0.3);

139 
a·îCheck
 = 
åue
;

140 
	}
}

142 
	$TEST
(
Uã°
, 
FaûuªPrötsSomëhög
)

144 
	`ã°FaûuªWôh
(
_ÁûMëhod
);

145 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

146 
fixtuª
->
	`as£πPrötC⁄èös
("ThisÅest fails");

147 
	}
}

149 
	$TEST
(
Uã°
, 
FaûuªWôhFaûTe°
)

151 
	`ã°FaûuªWôh
(
_ÁûMëhodFAIL_TEST
);

152 
	}
}

154 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹L⁄gI¡s
)

156 
	`ã°FaûuªWôh
(
_ÁûMëhodLONGS_EQUAL
);

157 
fixtuª
->
	`as£πPrötC⁄èös
("expected < 1 0x01>");

158 
fixtuª
->
	`as£πPrötC⁄èös
("but was <255 0xff>");

159 
	}
}

161 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹Poöãrs
)

163 
	`ã°FaûuªWôh
(
_ÁûMëhodPOINTERS_EQUAL
);

164 
fixtuª
->
	`as£πPrötC⁄èös
("expected <0xa5a5>");

165 
fixtuª
->
	`as£πPrötC⁄èös
("but was <0xf0f0>");

166 
	}
}

168 
	$TEST
(
Uã°
, 
FaûuªWôhDOUBLES_EQUAL
)

170 
	`ã°FaûuªWôh
(
_ÁûMëhodDOUBLES_EQUAL
);

171 
	}
}

173 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK
)

175 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK
);

176 
	}
}

178 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK_EQUAL
)

180 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK_EQUAL
);

181 
	}
}

183 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_CONTAINS
)

185 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_CONTAINS
);

186 
	}
}

188 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_NOCASE_CONTAINS
)

190 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_NOCASE_CONTAINS
);

191 
	}
}

193 
	$TEST
(
Uã°
, 
FaûuªWôhBYTES_EQUAL
)

195 
	`ã°FaûuªWôh
(
_ÁûMëhodBYTES_EQUAL
);

196 
	}
}

198 
	$TEST
(
Uã°
, 
Suc˚ssPrötsNŸhög
)

200 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

201 
fixtuª
->
	`runAŒTe°s
();

202 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

203 
fixtuª
->
	`as£πPrötC⁄èös
(".\nOK (1Åests");

204 
	`CHECK
(
a·îCheck
);

205 
	}
}

207 
	$TEST
(
Uã°
, 
PrötPrötsWh©evîPrötPröts
)

209 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPröt
);

210 
fixtuª
->
	`runAŒTe°s
();

211 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

212 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World!");

213 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

214 
	}
}

216 
	$TEST
(
Uã°
, 
PrötPrötsPrötf
)

218 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPrötF
);

219 
fixtuª
->
	`runAŒTe°s
();

220 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

221 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World! 2009");

222 
	}
}

224 
	$TEST
(
Uã°
, 
ÆlMa¸os
)

226 
	`CHECK
(0 == 0);

227 
	`LONGS_EQUAL
(1,1);

228 
	`BYTES_EQUAL
(0xab,0xab);

229 
	`CHECK_EQUAL
(100,100);

230 
	`STRCMP_EQUAL
("THIS", "THIS");

231 
	`STRCMP_CONTAINS
("THIS", "THISTHAT");

232 
	`STRCMP_NOCASE_EQUAL
("this", "THIS");

233 
	`STRCMP_NOCASE_CONTAINS
("this", "THISTHAT");

234 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

235 
	`POINTERS_EQUAL
(
this
,Åhis);

236 
	}
}

238 
	$fun˘i⁄Th©Rëu∫sAVÆue
()

240 
	`CHECK
(0 == 0);

241 
	`LONGS_EQUAL
(1,1);

242 
	`BYTES_EQUAL
(0xab,0xab);

243 
	`CHECK_EQUAL
(100,100);

244 
	`STRCMP_EQUAL
("THIS", "THIS");

245 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

246 
	`POINTERS_EQUAL
(0, 0);

248 
	}
}

250 
	$TEST
(
Uã°
, 
ÆlMa¸osFromFun˘i⁄Th©Rëu∫sAVÆue
)

252 
	`fun˘i⁄Th©Rëu∫sAVÆue
();

253 
	}
}

255 
	$TEST
(
Uã°
, 
As£πsA˘LikeSèãmíts
)

257 i‡(
fixtuª
 !0Ë
	`CHECK
(
åue
)

258 
	`CHECK
(
Ál£
)

260 i‡(
fixtuª
 !0Ë
	`CHECK_EQUAL
(
åue
,Årue)

261 
	`CHECK_EQUAL
(
Ál£
, false)

263 i‡(
fixtuª
 !0Ë
	`STRCMP_EQUAL
("", "")

264 
	`STRCMP_EQUAL
("", " ")

266 i‡(
fixtuª
 != 0)

267 
	`STRCMP_CONTAINS
("con", "contains")

269 
	`STRCMP_CONTAINS
("hello", "world")

271 i‡(
fixtuª
 != 0)

272 
	`LONGS_EQUAL
(1, 1)

274 
	`LONGS_EQUAL
(1, 0)

276 i‡(
fixtuª
 != 0)

277 
	`DOUBLES_EQUAL
(1, 1, 0.01)

279 
	`DOUBLES_EQUAL
(1, 0, 0.01)

281 i‡(
Ál£
)

282 
	`FAIL
("")

283 
	`CHECK
(
åue
);;

285 i‡(
åue
) ;

287 
	`FAIL
("")

289 
	}
}

291 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Suµ‹tsAŒMa¸os
)

293 
	`CHECK
(
åue
);

294 
	`CHECK_EQUAL
(
åue
,Årue);

295 
	`STRCMP_EQUAL
("", "");

296 
	`LONGS_EQUAL
(1, 1);

297 
	`DOUBLES_EQUAL
(1, 1, 0.01);

298 
	`FAIL
("");

299 
	}
}

301 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Ac˚ssögFixtuª
)

303 
	`CHECK
(
fixtuª
 != 0);

304 
	}
}

306 
	$TEST
(
Uã°
, 
Ma¸osU£dInSëup
)

308 
	`IGNORE_ALL_LEAKS_IN_TEST
();

309 
fixtuª
->
	`£tSëup
(
_ÁûMëhod
);

310 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

311 
fixtuª
->
	`runAŒTe°s
();

312 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

313 
	}
}

315 
	$TEST
(
Uã°
, 
Ma¸osU£dInTórDown
)

317 
	`IGNORE_ALL_LEAKS_IN_TEST
();

318 
fixtuª
->
	`£tTórdown
(
_ÁûMëhod
);

319 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

320 
fixtuª
->
	`runAŒTe°s
();

321 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

322 
	}
}

324 
	gã¨downCÆÀd
 = 0;

326 
	$_ã¨downMëhod
()

328 
ã¨downCÆÀd
++;

329 
	}
}

331 
	$TEST
(
Uã°
, 
TórdownCÆÀdA·îTe°Faûuª
)

333 
	`IGNORE_ALL_LEAKS_IN_TEST
();

334 
fixtuª
->
	`£tTórdown
(
_ã¨downMëhod
);

335 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

336 
fixtuª
->
	`runAŒTe°s
();

337 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

338 
	`LONGS_EQUAL
(1, 
ã¨downCÆÀd
);

339 
	}
}

341 
	g°›A·îFaûuª
 = 0;

342 
	$_°›A·îFaûuªMëhod
()

344 
	`FAIL
("fail");

345 
°›A·îFaûuª
++;

346 
	}
}

348 
	$TEST
(
Uã°
, 
Te°St›sA·îTe°Faûuª
)

350 
	`IGNORE_ALL_LEAKS_IN_TEST
();

351 
°›A·îFaûuª
 = 0;

352 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_°›A·îFaûuªMëhod
);

353 
fixtuª
->
	`runAŒTe°s
();

354 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

355 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

356 
	}
}

358 
	$TEST
(
Uã°
, 
Te°St›sA·îSëupFaûuª
)

360 
°›A·îFaûuª
 = 0;

361 
fixtuª
->
	`£tSëup
(
_°›A·îFaûuªMëhod
);

362 
fixtuª
->
	`£tTórdown
(
_°›A·îFaûuªMëhod
);

363 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

364 
fixtuª
->
	`runAŒTe°s
();

365 
	`LONGS_EQUAL
(2, 
fixtuª
->
	`gëFaûuªCou¡
());

366 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

367 
	}
}

369 
	$TEST_BASE
(
MyOwnTe°
)

371 
	`MyOwnTe°
() :

372 
	`öTe°
(
Ál£
)

375 
boﬁ
 
öTe°
;

377 
	`£tup
()

379 
	`CHECK
(!
öTe°
);

380 
öTe°
 = 
åue
;

382 
	`ã¨down
()

384 
	`CHECK
(
öTe°
);

385 
öTe°
 = 
Ál£
;

387 
	}
};

389 
	$TEST_GROUP_BASE
(
Uã°MyOwn
, 
MyOwnTe°
)

391 
	}
};

393 
	$TEST
(
Uã°MyOwn
, 
ã°
)

395 
	`CHECK
(
öTe°
);

396 
	}
}

398 ˛as†
	cNuŒP¨amëîTe°
: 
public
 
Uã°


402 
	$TEST
(
Uã°MyOwn
, 
NuŒP¨amëîs
)

404 
NuŒP¨amëîTe°
 
nuŒTe°
;

405 
Te°Regi°ry
* 
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

406 
nuŒTe°
.
	`shouldRun
(
ªg
->
	`gëGroupFûãr
(),Ñeg->
	`gëNameFûãr
());

407 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeService.c

1 
	~"FakeTimeSîvi˚.h
"

2 
	~"CµUTe°/Te°H¨√ss_c.h
"

5 
Time
 
	gtime
;

6 
WakeupCÆlback
 
	gˇŒback
;

7 
	g≥riod
;

9 
	$TimeSîvi˚_Cª©e
()

11 
time
.
möuã
 = -1;

12 
time
.
dayOfWìk
 = -1;

13 
ˇŒback
 = 0;

14 
≥riod
 = -1;

15 
	}
}

17 
	$TimeSîvi˚_De°roy
()

19 
	}
}

22 
	$FakeTimeSîvi˚_MöuãIsUp
()

24 
	`CHECK_C
(
ˇŒback
 != 0);

25 
	`ˇŒback
(&
time
);

26 
	}
}

28 
	$TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(
£c⁄ds
, 
WakeupCÆlback
 
cb
)

30 
ˇŒback
 = 
cb
;

31 
≥riod
 = 
£c⁄ds
;

32 
	}
}

34 
	$TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(

35 
£c⁄ds
, 
WakeupCÆlback
 
cb
)

37 
ˇŒback
 = 0;

38 
≥riod
 = 0;

39 
	}
}

42 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

44 
time
.
möuã
 = minute;

45 
	}
}

47 
	$FakeTimeSîvi˚_SëDay
(
day
)

49 
time
.
dayOfWìk
 = 
day
;

50 
	}
}

52 
WakeupCÆlback
 
	$FakeTimeSour˚_GëAœrmCÆlback
()

54  
ˇŒback
;

55 
	}
}

57 
	$FakeTimeSour˚_GëAœrmPîiod
()

59  
≥riod
;

60 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeService.h

1 #i‚de‡
D_FakeTimeSîvi˚_H


2 
	#D_FakeTimeSîvi˚_H


	)

4 
	~"TimeSîvi˚.h
"

6 íum {
	mTIME_UNKNOWN
 = -1};

8 
FakeTimeSîvi˚_SëMöuã
();

9 
FakeTimeSîvi˚_SëDay
();

10 
WakeupCÆlback
 
FakeTimeSour˚_GëAœrmCÆlback
();

11 
FakeTimeSour˚_GëAœrmPîiod
();

12 
FakeTimeSîvi˚_MöuãIsUp
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeServiceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeTimeSîvi˚.h
"

6 
	~"LightScheduÀr.h
"

7 
	~"mem‹y.h
"

10 
	$TEST_GROUP
(
FakeTimeSîvi˚
)

12 
	`£tup
()

14 
	`TimeSîvi˚_Cª©e
();

17 
	`ã¨down
()

19 
	`TimeSîvi˚_De°roy
();

21 
	}
};

24 
Time
 
	gßvedTime
;

26 
	$Te°CÆlback
(
Time
* 
time
)

28 
	`mem˝y
(&
ßvedTime
, 
time
, (savedTime));

29 
	}
}

31 
	$TEST
(
FakeTimeSîvi˚
, 
SimuœãATic
)

33 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60, 
Te°CÆlback
);

35 
	`FakeTimeSîvi˚_SëMöuã
(42);

36 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

37 
	`FakeTimeSîvi˚_MöuãIsUp
();

39 
	`LONGS_EQUAL
(42, 
ßvedTime
.
möuã
);

40 
	`LONGS_EQUAL
(
SUNDAY
, 
ßvedTime
.
dayOfWìk
);

41 
	}
}

46 
	$TEST
(
FakeTimeSîvi˚
, 
Cª©e
)

48 
	`LONGS_EQUAL
(
TIME_UNKNOWN
, 
	`TimeSîvi˚_GëMöuã
());

49 
	`LONGS_EQUAL
(
TIME_UNKNOWN
, 
	`TimeSîvi˚_GëDay
());

50 
	}
}

52 
	$TEST
(
FakeTimeSîvi˚
, 
Së
)

54 
	`FakeTimeSîvi˚_SëMöuã
(42);

55 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

56 
	`LONGS_EQUAL
(42, 
	`TimeSîvi˚_GëMöuã
());

57 
	`LONGS_EQUAL
(
SUNDAY
, 
	`TimeSîvi˚_GëDay
());

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightScheduler.c

12 
	~"LightScheduÀr.h
"

13 
	~"LightC⁄åﬁÀr.h
"

14 
	~"TimeSîvi˚.h
"

15 
	~"R™domMöuã.h
"

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

21 
	mTURNON
, 
	mTURNOFF
, 
	mDIM
, 
	mRANDOM_ON
, 
	mRANDOM_OFF


26 
	mMAX_EVENTS
 = 64, 
	mUNUSED
 = -1

31 
	mid
;

32 
Day
 
	mday
;

33 
	mmöuã
;

34 
	mevít
;

35 
	møndomize
;

36 
	møndomMöuãs
;

38 } 
	tScheduÀdLightEvít
;

40 
ScheduÀdLightEvít
 
	gevítLi°
[
MAX_EVENTS
];

42 
	$LightScheduÀr_Cª©e
()

44 
i
;

45 
i
 = 0; i < 
MAX_EVENTS
; i++)

47 
evítLi°
[
i
].
id
 = 
UNUSED
;

49 
	}
}

51 
	$LightScheduÀr_De°roy
()

53 
	}
}

55 
ª£tR™domize
(
ScheduÀdLightEvít
* 
e
);

57 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
,

58 
øndomize
)

60 
i
;

62 
i
 = 0; i < 
MAX_EVENTS
; i++)

64 i‡(
evítLi°
[
i
].
id
 =
UNUSED
)

66 
evítLi°
[
i
].
id
 = id;

67 
evítLi°
[
i
].
day
 = day;

68 
evítLi°
[
i
].
möuã
 = minute;

69 
evítLi°
[
i
].
evít
 =Évent;

70 
evítLi°
[
i
].
øndomize
 =Ñandomize;

71 
	`ª£tR™domize
(&
evítLi°
[
i
]);

75 
	}
}

77 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

79 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_OFF
);

80 
	}
}

82 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
)

84 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
, 
RANDOM_OFF
);

85 
	}
}

87 
	$LightScheduÀr_R™domize
(
id
, 
Day
 
day
, 
möuã
)

89 
i
;

90 
i
 = 0; i < 
MAX_EVENTS
; i++)

92 
ScheduÀdLightEvít
* 
e
 = &
evítLi°
[
i
];

93 i‡(
e
->
id
 =id &&É->
day
 =day &&É->
möuã
 == minute)

95 
e
->
øndomize
 = 
RANDOM_ON
;

96 
	`ª£tR™domize
(
e
);

99 
	}
}

101 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

103 
i
;

105 
i
 = 0; i < 
MAX_EVENTS
; i++)

107 i‡(
evítLi°
[
i
].
id
 =id &&ÉvítLi°[i].
day
 == day

108 && 
evítLi°
[
i
].
möuã
 == minute)

110 
evítLi°
[
i
].
id
 = 
UNUSED
;

113 
	}
}

118 
	$LightScheduÀr_WakeUp
()

120 
i
;

121 
Time
 
time
;

123 
	`TimeSîvi˚_GëTime
(&
time
);

124 
Day
 
td
 = 
time
.
dayOfWìk
;

125 
mö
 = 
time
.
möuãOfDay
;

127 
i
 = 0; i < 
MAX_EVENTS
; i++)

129 
ScheduÀdLightEvít
* 
£
 = &
evítLi°
[
i
];

130 i‡(
£
->
id
 !
UNUSED
)

132 
Day
 
d
 = 
£
->
day
;

133 i‡–(
d
 =
EVERYDAY
Ë|| (d =
td
Ë|| (d =
WEEKEND
 &&

134 (
SATURDAY
 =
td
 || 
SUNDAY
 ==Åd)) ||

135 (
d
 =
WEEKDAY
 && (
td
 >
MONDAY


136 && 
td
 <
FRIDAY
)))

139 i‡(
mö
 =
£
->
möuã
 + se->
øndomMöuãs
)

141 i‡(
TURNON
 =
£
->
evít
)

142 
	`LightC⁄åﬁÀr_Tu∫On
(
£
->
id
);

143 i‡(
TURNOFF
 =
£
->
evít
)

144 
	`LightC⁄åﬁÀr_Tu∫Off
(
£
->
id
);

146 i‡(
£
->
øndomize
 =
RANDOM_ON
)

147 
£
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

149 
£
->
øndomMöuãs
 = 0;

155 
	}
}

165 
	~"LightScheduÀr.h
"

166 
	~"LightC⁄åﬁÀr.h
"

167 
	~"LightSwôch.h
"

170 
	$LightSwôch_Tu∫On
(
LightSwôch
* 
ls
)

172 
ls
->
	`Tu∫On
(ls);

173 
	}
}

178 
	mUNUSED
 = -1,

179 
	mTURNOFF
, 
	mTURNON
,

183 
	mid
;

184 
Day
 
	mday
;

185 
	mmöuã
;

186 
	mevít
;

188 } 
	tScheduÀdLightEvít
;

190 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

192 
	$LightScheduÀr_Cª©e
()

194 
scheduÀdEvít
.
id
 = 
UNUSED
;

196 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60,

197 
LightScheduÀr_Wakeup
);

198 
	}
}

204 
	mUNUSED
 = -1,

205 
	mTURNOFF
, 
	mTURNON
,

206 
	mMAX_EVENTS
 = 128

210 
	mid
;

211 
Day
 
	mday
;

212 
	mmöuã
;

213 
	mevít
;

215 } 
	tScheduÀdLightEvít
;

218 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

219 
ScheduÀdLightEvít
 
	gscheduÀdEvíts
[
MAX_EVENTS
];

224 
	$LightScheduÀr_Cª©e
()

226 
i
;

228 
scheduÀdEvít
.
id
 = 
UNUSED
;

230 
i
 = 0; i < 
MAX_EVENTS
; i++)

231 
scheduÀdEvíts
[
i
].
id
 = 
UNUSED
;

233 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60,

234 
LightScheduÀr_Wakeup
);

235 
	}
}

239 
	$LightScheduÀr_De°roy
()

241 
	}
}

245 
	$LightScheduÀr_De°roy
()

247 
	`TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(60,

248 
LightScheduÀr_Wakeup
);

249 
	}
}

253 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

255 
i
;

257 
i
 = 0; i < 
MAX_EVENTS
; i++)

259 i‡(
scheduÀdEvíts
[
i
].
id
 =
UNUSED
)

261 
scheduÀdEvíts
[
i
].
id
 = id;

262 
scheduÀdEvíts
[
i
].
day
 = day;

263 
scheduÀdEvíts
[
i
].
möuã
 = minute;

264 
scheduÀdEvíts
[
i
].
evít
 =Évent;

269 i‡(
scheduÀdEvít
.
id
 =
UNUSED
)

271 
scheduÀdEvít
.
id
 = id;

272 
scheduÀdEvít
.
day
 = day;

273 
scheduÀdEvít
.
möuã
 = minute;

274 
scheduÀdEvít
.
evít
 =Évent;

276 
	}
}

281 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

283 
i
;

285 
i
 = 0; i < 
MAX_EVENTS
; i++)

287 i‡(
scheduÀdEvíts
[
i
].
id
 =
UNUSED
)

289 
scheduÀdEvíts
[
i
].
id
 = id;

290 
scheduÀdEvíts
[
i
].
day
 = day;

291 
scheduÀdEvíts
[
i
].
möuã
 = minute;

292 
scheduÀdEvíts
[
i
].
evít
 =Évent;

296 
	}
}

302 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

304 i‡(
scheduÀdEvít
.
id
 =
UNUSED
)

306 
scheduÀdEvít
.
id
 = id;

307 
scheduÀdEvít
.
day
 = day;

308 
scheduÀdEvít
.
möuã
 = minute;

309 
scheduÀdEvít
.
evít
 =Évent;

311 
	}
}

315 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

317 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
);

318 
	}
}

320 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
)

322 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
);

323 
	}
}

327 
	$D€sLightRe•⁄dToday
(
Time
* 
time
, 
ªa˘i⁄Day
)

329 
today
 = 
time
->
dayOfWìk
;

331 i‡(
ªa˘i⁄Day
 =
EVERYDAY
)

333 i‡(
ªa˘i⁄Day
 =
today
)

335 i‡(
ªa˘i⁄Day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

337 i‡(
ªa˘i⁄Day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

340 
	}
}

344 
	$checkEvít
(
Time
* 
time
, 
ScheduÀdLightEvít
* 
lightEvít
)

346 i‡(!
	`D€sLightRe•⁄dToday
(
time
, 
lightEvít
->
day
))

348 i‡(
time
->
möuã
 !
lightEvít
->minute)

351 i‡(
TURNON
 =
lightEvít
->
evít
)

352 
	`LightC⁄åﬁÀr_On
(
lightEvít
->
id
);

353 i‡(
TURNOFF
 =
lightEvít
->
evít
)

354 
	`LightC⁄åﬁÀr_Off
(
lightEvít
->
id
);

356 
	}
}

360 
	$LightScheduÀr_Wakeup
(
Time
* 
time
)

363 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

364 
	`checkEvít
(
time
, &
scheduÀdEvít
);

365 
	}
}

370 
	$LightScheduÀr_Wakeup
(
Time
* 
time
)

372 
i
;

374 
i
 = 0; i < 
MAX_EVENTS
; i++)

376 i‡(
scheduÀdEvíts
[
i
].
id
 !
UNUSED
)

377 
	`checkEvít
(
time
, &
scheduÀdEvíts
[
i
]);

380 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

381 
	`checkEvít
(
time
, &
scheduÀdEvít
);

382 
	}
}

387 
	$LightScheduÀr_Wakeup
(
Time
* 
time
)

389 
i
;

391 
i
 = 0; i < 
MAX_EVENTS
; i++)

393 i‡(
scheduÀdEvíts
[
i
].
id
 !
UNUSED
)

394 
	`checkEvít
(
time
, &
scheduÀdEvíts
[
i
]);

397 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

398 
	`checkEvít
(
time
, &
scheduÀdEvít
);

399 
	}
}

403 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

405 i‡(
scheduÀdEvít
.
id
 == id

406 && 
scheduÀdEvít
.
day
 == day

407 && 
scheduÀdEvít
.
möuã
 == minute)

409 
scheduÀdEvít
.
id
 = 
UNUSED
;

411 
	}
}

416 
	$D€sLightRe•⁄dToday
(
ªa˘i⁄Day
)

418 
today
 = 
	`TimeSîvi˚_GëDay
();

420 i‡(
ªa˘i⁄Day
 =
EVERYDAY
)

422 i‡(
ªa˘i⁄Day
 =
today
)

424 i‡(
ªa˘i⁄Day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

426 i‡(
ªa˘i⁄Day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

429 
	}
}

433 
	$checkEvít
(
ScheduÀdLightEvít
* 
lightEvít
)

435 i‡(!
	`D€sLightRe•⁄dToday
(
lightEvít
->
day
))

437 i‡(
	`TimeSîvi˚_GëMöuã
(Ë!
lightEvít
->
möuã
)

440 i‡(
TURNON
 =
lightEvít
->
evít
)

441 
	`LightC⁄åﬁÀr_On
(
lightEvít
->
id
);

442 i‡(
TURNOFF
 =
lightEvít
->
evít
)

443 
	`LightC⁄åﬁÀr_Off
(
lightEvít
->
id
);

445 
	}
}

447 
	$LightScheduÀr_Wakeup
()

449 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

450 
	`checkEvít
(&
scheduÀdEvít
);

451 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightScheduler.h

17 #i‚de‡
D_LightScheduÀr_H


18 
	#D_LightScheduÀr_H


	)

21 
LightScheduÀr_Cª©e
();

22 
LightScheduÀr_De°roy
();

23 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
day
, 
möuã
);

24 
LightScheduÀr_R™domize
(
id
, 
day
, 
möuã
);

25 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
);

26 
LightScheduÀr_ScheduÀRemove
(
id
, 
day
, 
möuã
);

27 
LightScheduÀr_WakeUp
();

34 #i‚de‡
D_LightScheduÀr_H


35 
	#D_LightScheduÀr_H


	)

37 
	~"TimeSîvi˚.h
"

39 
	eDay
 {

40 
	mNONE
=-1, 
	mEVERYDAY
=10, 
	mWEEKDAY
, 
	mWEEKEND
,

41 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


44 
Day
 
	tDay
;

46 
LightScheduÀr_Cª©e
();

47 
LightScheduÀr_De°roy
();

48 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

49 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

50 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

51 
LightScheduÀr_Wakeup
(
Time
*);

58 #i‚de‡
D_LightScheduÀr_H


59 
	#D_LightScheduÀr_H


	)

62 
	eDay
 {

63 
	mNONE
=-1, 
	mEVERYDAY
=10, 
	mWEEKDAY
, 
	mWEEKEND
,

64 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


67 
Day
 
	tDay
;

69 
LightScheduÀr_Cª©e
();

70 
LightScheduÀr_De°roy
();

71 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

72 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

73 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

74 
LightScheduÀr_Wakeup
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightSchedulerTest.cpp

18 
	~"CµUTe°/Te°H¨√ss.h
"

22 
	~"LightScheduÀr.h
"

23 
	~"FakeLightC⁄åﬁÀr.h
"

24 
	~"FakeTimeSîvi˚.h
"

25 
	~"R™domMöuã.h
"

29 
	$TEST_GROUP
(
LightScheduÀr
)

31 
id
;

32 
Day
 
ÁkeDay
;

33 
Day
 
scheduÀdDay
;

34 
ÁkeMöuã
;

35 
scheduÀdMöuã
;

36 
ex≥˘edId
;

37 
ex≥˘edSèã
;

39 
	`£tup
()

41 
	`LightC⁄åﬁÀr_Cª©e
();

42 
	`LightScheduÀr_Cª©e
();

44 
id
 = 4;

45 
ÁkeDay
 = 
MONDAY
;

46 
scheduÀdDay
 = 
NONE
;

47 
ÁkeMöuã
 = 1234;

48 
scheduÀdMöuã
 = 1234;

49 
	`ex≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

53 
	`ã¨down
()

55 
	`LightScheduÀr_De°roy
();

56 
	`POINTERS_EQUAL
(
NULL
, (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

60 
	`ex≥˘
(
id
, 
Àvñ
)

62 
ex≥˘edId
 = 
id
;

63 
ex≥˘edSèã
 = 
Àvñ
;

66 
	}
};

68 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

70 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

71 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

72 
	}
}

75 
	$TEST
(
LightScheduÀr
, 
Cª©eSèπsO√MöuãAœrm
)

77 
	`POINTERS_EQUAL
((*)
LightScheduÀr_Wakeup
,

78 (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

79 
	`LONGS_EQUAL
(60, 
	`FakeTimeSour˚_GëAœrmPîiod
());

80 
	}
}

91 
	$TEST
(
LightScheduÀr
, 
NoCh™geToLightsDurögInôüliz©i⁄
)

93 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

94 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

95 
	}
}

99 
	$TEST
(
LightScheduÀr
, 
NoScheduÀNŸhögH≠≥ns
)

101 
	`LightScheduÀr_Wakeup
();

102 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

103 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

104 
	}
}

107 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayNŸTimeYë
)

109 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 1200);

110 
	`FakeTimeSîvi˚_SëMöuã
(1199);

111 
	`LightScheduÀr_Wakeup
();

112 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

113 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

114 
	}
}

117 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀNŸO≥øãdOnSunday
)

119 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

120 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

121 
	`FakeTimeSîvi˚_SëMöuã
(1200);

122 
	`LightScheduÀr_Wakeup
();

123 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

124 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

125 
	}
}

128 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀIsO≥øãdOnM⁄day
)

130 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

131 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

132 
	`FakeTimeSîvi˚_SëMöuã
(1200);

133 
	`LightScheduÀr_Wakeup
();

134 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

135 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

136 
	}
}

141 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsFriday
)

143 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

144 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

145 
	`FakeTimeSîvi˚_SëMöuã
(1200);

146 
	`LightScheduÀr_Wakeup
();

147 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

148 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

149 
	}
}

151 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsS©urday
)

153 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 100);

154 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

155 
	`FakeTimeSîvi˚_SëMöuã
(100);

156 
	`LightScheduÀr_Wakeup
();

157 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

158 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

159 
	}
}

161 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsSunday
)

163 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
WEEKEND
, 1200);

164 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

165 
	`FakeTimeSîvi˚_SëMöuã
(1200);

166 
	`LightScheduÀr_Wakeup
();

167 
	`LONGS_EQUAL
(6, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

168 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

169 
	}
}

171 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsM⁄day
)

173 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

174 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

175 
	`FakeTimeSîvi˚_SëMöuã
(1200);

176 
	`LightScheduÀr_Wakeup
();

177 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

178 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

179 
	}
}

184 
	$TEST
(
LightScheduÀr
, 
ScheduÀTwoEvítsAtTheSameTIme
)

186 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

187 
	`LightScheduÀr_ScheduÀTu∫On
(12, 
WEEKDAY
, 1200);

188 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

189 
	`FakeTimeSîvi˚_SëMöuã
(1200);

191 
	`LightScheduÀr_Wakeup
();

193 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(3));

194 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(12));

195 
	}
}

198 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

200 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 100);

202 
	`FakeTimeSîvi˚_SëMöuã
(99);

203 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

204 
	`LightScheduÀr_Wakeup
();

205 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

206 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

207 
	}
}

209 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnEvîydayItsTime
)

211 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 
scheduÀdMöuã
);

212 
	`FakeTimeSîvi˚_SëMöuã
(
ÁkeMöuã
);

213 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

214 
	`LightScheduÀr_Wakeup
();

215 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

216 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

217 
	}
}

219 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayButItsTime
)

221 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

223 
	`FakeTimeSîvi˚_SëMöuã
(100);

224 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

225 
	`LightScheduÀr_Wakeup
();

226 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

227 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

228 
	}
}

230 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

232 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

233 
	`FakeTimeSîvi˚_SëMöuã
(100);

234 
	`FakeTimeSîvi˚_SëDay
(
TUESDAY
);

235 
	`LightScheduÀr_Wakeup
();

236 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

237 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

238 
	}
}

240 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

242 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
TUESDAY
, 200);

243 
	`FakeTimeSîvi˚_SëMöuã
(200);

244 
	`FakeTimeSîvi˚_SëDay
(
TUESDAY
);

245 
	`LightScheduÀr_Wakeup
();

246 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

247 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

248 
	}
}

250 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

252 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
WEEKEND
, 200);

254 
	`FakeTimeSîvi˚_SëMöuã
(200);

255 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

256 
	`LightScheduÀr_Wakeup
();

257 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

258 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

259 
	}
}

261 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

263 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

265 
	`FakeTimeSîvi˚_SëMöuã
(100);

266 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

267 
	`LightScheduÀr_Wakeup
();

268 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

269 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

270 
	}
}

272 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

274 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

276 
	`FakeTimeSîvi˚_SëMöuã
(100);

277 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

278 
	`LightScheduÀr_Wakeup
();

279 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

280 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

281 
	}
}

283 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

285 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 100);

287 
	`FakeTimeSîvi˚_SëMöuã
(100);

288 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

289 
	`LightScheduÀr_Wakeup
();

290 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

291 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

292 
	}
}

294 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

296 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 200);

298 
	`FakeTimeSîvi˚_SëMöuã
(200);

299 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

300 
	`LightScheduÀr_Wakeup
();

301 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

302 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

303 
	}
}

305 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

307 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

309 
	`FakeTimeSîvi˚_SëMöuã
(1000);

310 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

311 
	`LightScheduÀr_Wakeup
();

312 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

313 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

314 
	}
}

316 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

318 
scheduÀdDay
 = 
WEEKDAY
;

319 
ÁkeDay
 = 
SATURDAY
;

320 
scheduÀdMöuã
 = 
ÁkeMöuã
;

321 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

323 
	`FakeTimeSîvi˚_SëMöuã
(1000);

324 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

325 
	`LightScheduÀr_Wakeup
();

326 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

327 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

328 
	}
}

330 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

332 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

333 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

335 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

336 
	`FakeTimeSîvi˚_SëMöuã
(6000);

338 
	`LightScheduÀr_Wakeup
();

340 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

341 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

342 
	}
}

345 
	$TEST
(
LightScheduÀr
, 
RemoveMu…ùÀScheduÀdEvít
)

347 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

348 
	`LightScheduÀr_ScheduÀTu∫On
(7, 
MONDAY
, 600);

350 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

351 
	`LightScheduÀr_ScheduÀRemove
(7, 
MONDAY
, 600);

353 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

354 
	`FakeTimeSîvi˚_SëMöuã
(600);

356 
	`LightScheduÀr_Wakeup
();

358 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

359 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

360 
	}
}

364 
	$TEST
(
LightScheduÀr
, 
Reje˘sTooM™yEvíts
)

366 
i
;

367 
i
 = 0; i < 128; i++)

368 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

369 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

371 
	`LONGS_EQUAL
(
LightScheduÀr_Faû_TooM™yEvíts
,

372 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

373 
	}
}

377 
	$TEST
(
LightScheduÀr
, 
Ac˚±sVÆidLightIds
)

379 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

380 
	`LightScheduÀr_ScheduÀTu∫On
(0, 
MONDAY
, 600));

381 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

382 
	`LightScheduÀr_ScheduÀTu∫On
(15, 
MONDAY
, 600));

383 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

384 
	`LightScheduÀr_ScheduÀTu∫On
(31, 
MONDAY
, 600));

385 
	}
}

387 
	$TEST
(
LightScheduÀr
, 
Reje˘sInvÆidLightIds
)

389 
	`LONGS_EQUAL
(
LightScheduÀr_Faû_IdOutOfBounds
,

390 
	`LightScheduÀr_ScheduÀTu∫On
(-1, 
MONDAY
, 600));

391 
	`LONGS_EQUAL
(
LightScheduÀr_Faû_IdOutOfBounds
,

392 
	`LightScheduÀr_ScheduÀTu∫On
(32, 
MONDAY
, 600));

393 
	}
}

397 
	$TEST
(
LightScheduÀr
, 
RemoveRecy˛esEvítSlŸ
)

399 
i
;

400 
i
 = 0; i < 128; i++)

401 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

402 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

404 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

406 
	`LONGS_EQUAL
(
LightScheduÀr_OK
,

407 
	`LightScheduÀr_ScheduÀTu∫On
(13, 
MONDAY
, 1000));

408 
	}
}

412 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsSameTime
)

414 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 500);

415 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 500);

417 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

418 
	`FakeTimeSîvi˚_SëMöuã
(500);

420 
	`LightScheduÀr_Wakeup
();

421 
	`LONGS_EQUAL
(2, 
	`FakeLightC⁄åﬁÀr_gëEvítCou¡s
());

422 
	}
}

423 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsDif„ª¡Times
)

425 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 600);

426 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 500);

428 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

429 
	`FakeTimeSîvi˚_SëMöuã
(500);

431 
	`LightScheduÀr_Wakeup
();

432 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

433 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

435 
	`FakeTimeSîvi˚_SëMöuã
(600);

437 
	`LightScheduÀr_Wakeup
();

438 
	`LONGS_EQUAL
(4, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

439 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

440 
	}
}

442 
	gøndomMöuã
;

443 
	$FakeR™domMöuã_Gë
()

445 i‡(
øndomMöuã
 > 30)

446 
øndomMöuã
 = -30;

447  
øndomMöuã
++;

448 
	}
}

451 
	$TEST
(
LightScheduÀr
, 
E«bÀR™domizeE¨ly
)

453 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

454 
øndomMöuã
 = -10;

456 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(4, 
EVERYDAY
, 600);

458 
	`FakeTimeSîvi˚_SëMöuã
(590);

460 
	`LightScheduÀr_Wakeup
();

461 
	`LONGS_EQUAL
(4, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

462 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

463 
	}
}

465 
	$TEST
(
LightScheduÀr
, 
E«bÀR™domizeE¨lyO∆yO√EvítFúes
)

467 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

468 
øndomMöuã
 = -10;

470 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(4, 
EVERYDAY
, 600);

472 
	`FakeTimeSîvi˚_SëMöuã
(590);

473 
	`LightScheduÀr_Wakeup
();

474 
	`LightC⁄åﬁÀr_Cª©e
();

475 
	`FakeTimeSîvi˚_SëMöuã
(591);

476 
	`LightScheduÀr_Wakeup
();

478 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

479 
	}
}

485 
	~"CµUTe°/Te°H¨√ss.h
"

489 
	~"LightScheduÀr.h
"

490 
	~"FakeLightC⁄åﬁÀr.h
"

491 
	~"FakeTimeSîvi˚.h
"

492 
	~"R™domMöuã.h
"

495 (*
scheduÀr
)(
id
, 
Day
 
day
, 
möuã
);

498 
	$TEST_GROUP
(
LightScheduÀr
)

500 
id
;

501 
Day
 
ÁkeDay
;

502 
Day
 
scheduÀdDay
;

503 
ÁkeMöuã
;

504 
scheduÀdMöuã
;

505 
ex≥˘edId
;

506 
ex≥˘edSèã
;

508 
	`£tup
()

510 
	`LightC⁄åﬁÀr_Cª©e
();

511 
	`LightScheduÀr_Cª©e
();

513 
scheduÀr
 = 0;

514 
id
 = 4;

515 
ÁkeDay
 = 
MONDAY
;

516 
scheduÀdDay
 = 
NONE
;

517 
ÁkeMöuã
 = 1234;

518 
scheduÀdMöuã
 = 1234;

519 
	`ex≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

523 
	`ã¨down
()

525 
	`LightScheduÀr_De°roy
();

526 
	`POINTERS_EQUAL
(
NULL
, (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

530 
	`doTe°
()

532 
	`CHECK
(0 !
scheduÀr
);

534 
	`scheduÀr
(
id
, 
scheduÀdDay
, 
scheduÀdMöuã
);

536 
	`FakeTimeSîvi˚_SëMöuã
(
ÁkeMöuã
);

537 
	`FakeTimeSîvi˚_SëDay
(
ÁkeDay
);

538 
	`FakeTimeSîvi˚_MöuãIsUp
();

539 
	`LONGS_EQUAL
(
ex≥˘edId
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

540 
	`LONGS_EQUAL
(
ex≥˘edSèã
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

543 
	`ex≥˘
(
id
, 
Àvñ
)

545 
ex≥˘edId
 = 
id
;

546 
ex≥˘edSèã
 = 
Àvñ
;

549 
	}
};

551 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

553 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

554 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

555 
	}
}

558 
	$TEST
(
LightScheduÀr
, 
Cª©eSèπsO√MöuãAœrm
)

560 
	`POINTERS_EQUAL
((*)
LightScheduÀr_Wakeup
,

561 (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

562 
	`LONGS_EQUAL
(60, 
	`FakeTimeSour˚_GëAœrmPîiod
());

563 
	}
}

574 
	$TEST
(
LightScheduÀr
, 
NoCh™geToLightsDurögInôüliz©i⁄
)

576 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

577 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

578 
	}
}

582 
	$TEST
(
LightScheduÀr
, 
NoScheduÀNŸhögH≠≥ns
)

584 
	`LightScheduÀr_Wakeup
();

585 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

586 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

587 
	}
}

590 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayNŸTimeYë
)

592 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 1200);

593 
	`FakeTimeSîvi˚_SëMöuã
(1199);

594 
	`LightScheduÀr_Wakeup
();

595 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

596 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

597 
	}
}

600 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀNŸO≥øãdOnSunday
)

602 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

603 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

604 
	`FakeTimeSîvi˚_SëMöuã
(1200);

605 
	`LightScheduÀr_Wakeup
();

606 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

607 
	`LONGS_EQUAL
(-1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

608 
	}
}

611 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀIsO≥øãdOnM⁄day
)

613 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

614 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

615 
	`FakeTimeSîvi˚_SëMöuã
(1200);

616 
	`LightScheduÀr_Wakeup
();

617 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

618 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

619 
	}
}

624 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsFriday
)

626 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

627 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

628 
	`FakeTimeSîvi˚_SëMöuã
(1200);

629 
	`LightScheduÀr_Wakeup
();

630 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

631 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

632 
	}
}

634 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsS©urday
)

636 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 100);

637 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

638 
	`FakeTimeSîvi˚_SëMöuã
(100);

639 
	`LightScheduÀr_Wakeup
();

640 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

641 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

642 
	}
}

644 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsSunday
)

646 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
WEEKEND
, 1200);

647 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

648 
	`FakeTimeSîvi˚_SëMöuã
(1200);

649 
	`LightScheduÀr_Wakeup
();

650 
	`LONGS_EQUAL
(6, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

651 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

652 
	}
}

654 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsM⁄day
)

656 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

657 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

658 
	`FakeTimeSîvi˚_SëMöuã
(1200);

659 
	`LightScheduÀr_Wakeup
();

660 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

661 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

662 
	}
}

667 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

669 
	`LightScheduÀr_ScheduÀTu∫Off
(3, 
WEEKEND
, 100);

670 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

671 
	`FakeTimeSîvi˚_SëMöuã
(100);

672 
	`FakeTimeSîvi˚_MöuãIsUp
();

673 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

674 
	`LONGS_EQUAL
(0, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

675 
	}
}

680 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEnd
)

682 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

683 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

684 
	`FakeTimeSîvi˚_SëMöuã
(1200);

685 
	`FakeTimeSîvi˚_MöuãIsUp
();

686 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

687 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

688 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

689 
	`FakeTimeSîvi˚_SëMöuã
(1200);

690 
	`FakeTimeSîvi˚_MöuãIsUp
();

691 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

692 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

693 
	`LightC⁄åﬁÀr_Off
(3);

694 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

695 
	`FakeTimeSîvi˚_SëMöuã
(1200);

696 
	`FakeTimeSîvi˚_MöuãIsUp
();

697 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

698 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

699 
	`LightC⁄åﬁÀr_Cª©e
();

700 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

701 
	`FakeTimeSîvi˚_SëMöuã
(1200);

702 
	`FakeTimeSîvi˚_MöuãIsUp
();

703 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

704 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

705 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

13 íum {
	mTS_SUNDAY
=1};

15 
	sTime


17 
	mmöuã
;

18 
	mdayOfWìk
;

19 } 
	tTime
;

23 
TimeSîvi˚_Cª©e
();

24 
TimeSîvi˚_De°roy
();

26 (*
	tWakeupCÆlback
)(
	tTime
*);

28 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(

29 
£c⁄ds
, 
WakeupCÆlback
);

31 
	`TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(

32 
£c⁄ds
, 
WakeupCÆlback
);

36 
	`TimeSîvi˚_Cª©e
();

37 
	`TimeSîvi˚_De°roy
();

39 
	`TimeSîvi˚_GëMöuã
();

40 
	`TimeSîvi˚_GëDay
();

42 (*
	tWakeupCÆlback
)();

43 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(

44 
£c⁄ds
, 
WakeupCÆlback
);

46 
	`TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(

47 
£c⁄ds
, 
WakeupCÆlback
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\include\LedDriver\LedDriver.h

1 #i‚de‡
D_LedDrivî_H


2 
	#D_LedDrivî_H


	)

9 
LedDrivî_Cª©e
();

10 
LedDrivî_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\src\LedDriver\LedDriver.c

1 
	~"LedDrivî.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$LedDrivî_Cª©e
()

10 
	}
}

12 
	$LedDrivî_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6 
ªsu…
 = 
	`RUN_ALL_TESTS
(
ac
, 
av
);

8  
ªsu…
;

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\tests\LedDriver\LedDriverTest.cpp

3 
	~"LedDrivî.h
"

6 
	~"CµUTe°/Te°H¨√ss.h
"

8 
	$TEST_GROUP
(
LedDrivî
)

10 
	`£tup
()

12 
	`LedDrivî_Cª©e
();

15 
	`ã¨down
()

17 
	`LedDrivî_De°roy
();

19 
	}
};

21 
	$TEST
(
LedDrivî
, 
Cª©e
)

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\AllTests.c

8 
	~"unôy_fixtuª.h
"

10 
	$runAŒTe°s
()

12 
	`RUN_TEST_GROUP
(
LedDrivî
);

13 
	}
}

15 
	$maö
(
ac
, c⁄° * 
av
[])

17  
	`UnôyMaö
(
ac
, 
av
, 
runAŒTe°s
);

18 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\LedDriver\LedDriverTest.c

8 
	~"unôy_fixtuª.h
"

9 
	~"LedDrivî.h
"

11 
	~"unôy_fixtuª.h
"

13 
	$TEST_GROUP
(
LedDrivî
)

15 
	$TEST_SETUP
(
LedDrivî
)

17 
	}
}

19 
	$TEST_TEAR_DOWN
(
LedDrivî
)

21 
	}
}

23 
	$TEST
(
LedDrivî
, 
SèπHîe
)

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\LedDriver\LedDriverTestRunner.c

8 
	~"unôy_fixtuª.h
"

10 
	$TEST_GROUP_RUNNER
(
LedDrivî
)

12 
	`RUN_TEST_CASE
(
LedDrivî
, 
SèπHîe
);

13 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightController.h

9 #i‚de‡
D_LightC⁄åﬁÀr_H


10 
	#D_LightC⁄åﬁÀr_H


	)

12 íum { 
	mMAX_LIGHTS
 = 32 };

14 
LightC⁄åﬁÀr_Cª©e
();

15 
LightC⁄åﬁÀr_De°roy
();

16 
LightC⁄åﬁÀr_On
(
id
);

17 
LightC⁄åﬁÀr_Off
(
id
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightScheduler.h

9 #i‚de‡
D_LightScheduÀr_H


10 
	#D_LightScheduÀr_H


	)

13 
	~"TimeSîvi˚.h
"

15 
	eDay
 {

16 
	mNONE
=-1, 
	mEVERYDAY
=10, 
	mWEEKDAY
, 
	mWEEKEND
,

17 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


21 íum { 
	mLS_OK
, 
	mLS_TOO_MANY_EVENTS
, 
	mLS_ID_OUT_OF_BOUNDS
 };

23 
Day
 
	tDay
;

25 
LightScheduÀr_Cª©e
();

26 
LightScheduÀr_De°roy
();

27 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

28 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

29 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

30 
LightScheduÀr_Wakeup
();

36 #i‚de‡
D_LightScheduÀr_H


37 
	#D_LightScheduÀr_H


	)

39 
	~"TimeSîvi˚.h
"

41 
	eDay
 {

42 
	mNONE
=-1, 
	mEVERYDAY
=10, 
	mWEEKDAY
, 
	mWEEKEND
,

43 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


46 
Day
 
	tDay
;

48 
LightScheduÀr_Cª©e
();

49 
LightScheduÀr_De°roy
();

50 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

51 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

52 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

53 
LightScheduÀr_Wakeup
(
Time
*);

59 #i‚de‡
D_LightScheduÀr_H


60 
	#D_LightScheduÀr_H


	)

63 
	eDay
 {

64 
	mNONE
=-1, 
	mEVERYDAY
=10, 
	mWEEKDAY
, 
	mWEEKEND
,

65 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


68 
Day
 
	tDay
;

70 
LightScheduÀr_Cª©e
();

71 
LightScheduÀr_De°roy
();

72 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

73 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

74 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

75 
LightScheduÀr_Wakeup
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightSwitch.h

9 #i‚de‡
D_LightSwôch_H


10 
	#D_LightSwôch_H


	)

12 
LightSwôch
 
	tLightSwôch
;

14 
	sLightSwôch


16 (*
	mTu∫On
)(
	mLightSwôch
*);

17 (*
	mTu∫Off
)(
	mLightSwôch
*);

18 (*
	mBrighãr
)(
	mLightSwôch
*);

19 (*
	mD¨kî
)(
	mLightSwôch
*);

20 * 
	m«me
;

21 
	mid
;

24 
LightSwôch_Tu∫On
(
LightSwôch
*);

25 
LightSwôch_Tu∫Off
(
LightSwôch
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\RandomMinute.h

9 #i‚de‡
D_R™domMöuã_H


10 
	#D_R™domMöuã_H


	)

17 
	~<°dlib.h
>

19 
R™domMöuã_Cª©e
(
bound
);

20 
R™domMöuã_Gë
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

13 
	sTime


15 
	mmöuãOfDay
;

16 
	mdayOfWìk
;

17 } 
	tTime
;

19 
TimeSîvi˚_Cª©e
();

20 
TimeSîvi˚_De°roy
();

21 
TimeSîvi˚_GëTime
(
Time
 *);

23 (*
	gWakeupCÆlback
)();

25 
TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(

26 
£c⁄ds
, 
WakeupCÆlback
);

28 
TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(

29 
£c⁄ds
, 
WakeupCÆlback
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\Flash.h

9 #i‚de‡
D_Fœsh_H


10 
	#D_Fœsh_H


	)

17 
	~"IO.h
"

19 
Fœsh_Cª©e
();

20 
Fœsh_De°roy
();

21 
Fœsh_Progøm
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
);

25 
	mFœshSuc˚ss
 = 0,

26 
	mFœshVµEº‹
,

27 
	mFœshProgømEº‹
,

28 
	mFœshProgømPrŸe˘edBlockEº‹
,

29 
	mFœshUnknownProgømEº‹
,

30 
	mFœshRódBackEº‹


31 } 
	tFœshSètus
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\IO.h

10 #i‚de‡
D_IO_H


11 
	#D_IO_H


	)

12 
	~<°döt.h
>

14 
uöt32_t
 
	tioAddªss_t
;

15 
uöt16_t
 
	tioD©a_t
;

17 
ioD©a_t
 
IO_Ród
(
ioAddªss_t
 
off£t
);

18 
IO_Wrôe
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\VendorsReferenceDriver\c2414.h

142 #i‚de‡
__c2414__H__


143 
	#__c2414__H__


	)

145 
	tubyã
;

146 
	tbyã
;

147 
	tuw‹d
;

148 
	tw‹d
;

149 
	tudw‹d
;

150 
	tdw‹d
;

153 
	#USE_M28W160ECT


	)

157 
	#BASE_ADDR
 ((vﬁ©ûê
uCPUBusTy≥
*)0x00000000)

	)

162 
	#USE_16BIT_CPU_ACCESSING_1_16BIT_FLASH


	)

170 #i‚de‡
TIME_H_EXISTS


171 
	#COUNT_FOR_A_SECOND
 432666

	)

174 
	#VERBOSE


	)

183 #ifde‡
USE_16BIT_CPU_ACCESSING_1_16BIT_FLASH


184 
uw‹d
 
	tuCPUBusTy≥
;

185 
w‹d
 
	tCPUBusTy≥
;

186 
	#FLASH_BIT_DEPTH
 16

	)

187 
	#HEX
 "04Xh"

	)

188 
	#CMD
(
A
Ë(A)

	)

189 
	#CONFIGURATION_DEFINED


	)

192 #ifde‡
USE_32BIT_CPU_ACCESSING_2_16BIT_FLASH


193 
udw‹d
 
	tuCPUBusTy≥
;

194 
dw‹d
 
	tCPUBusTy≥
;

195 
	#FLASH_BIT_DEPTH
 16

	)

196 
	#HEX
 "08Xh"

	)

197 
	#CMD
(
A
Ë(A+(A<<16))

	)

198 
	#CONFIGURATION_DEFINED


	)

205 
	mFœshS≥c_BlockLockDownFaûed
,

206 
	mFœshS≥c_BlockLockedDown
,

207 
	mFœshS≥c_BlockU∆ockedDown
,

208 
	mFœshS≥c_PrŸe˘i⁄Regi°îLocked


209 } 
	tS≥cificRëu∫Ty≥
;

215 #i‚de‡
CONFIGURATION_DEFINED


216 #îr‹ 
U£r
 
Ch™ge
 
Aªa
 
Eº‹
: 
PCB
 
Info
 
unc‹ª˘
 
Check
 
the
 
USE_xxBIT_CPU_ACCESSING_n_yyBIT_FLASH
 
VÆue


226 
	mB™kEø£
,

227 
	mB™kRe£t
,

228 
	mB™kResume
,

229 
	mB™kSu•íd
,

230 
	mBlockEø£
,

231 
	mBlockPrŸe˘
,

232 
	mBlockU≈rŸe˘
,

233 
	mCheckBlockPrŸe˘i⁄
,

234 
	mCheckCom∑tibûôy
,

235 
	mChùEø£
,

236 
	mChùU≈rŸe˘
,

237 
	mGroupPrŸe˘
,

238 
	mProgøm
,

239 
	mRód
,

240 
	mRódCfi
,

241 
	mRódDevi˚Id
,

242 
	mRódM™uÁ˘uªrCode
,

243 
	mRe£t
,

244 
	mResume
,

245 
	mSögÀProgøm
,

246 
	mSu•íd
,

247 
	mWrôe


248 } 
	tComm™dTy≥
;

254 
	mFœsh_AddªssInvÆid
,

255 
	mFœsh_B™kEø£Faûed
,

256 
	mFœsh_BlockEø£Faûed
,

257 
	mFœsh_BlockNrInvÆid
,

258 
	mFœsh_BlockPrŸe˘ed
,

259 
	mFœsh_BlockPrŸe˘Faûed
,

260 
	mFœsh_BlockPrŸe˘i⁄Un˛ór
,

261 
	mFœsh_BlockU≈rŸe˘ed
,

262 
	mFœsh_BlockU≈rŸe˘Faûed
,

263 
	mFœsh_CfiFaûed
,

264 
	mFœsh_ChùEø£Faûed
,

265 
	mFœsh_ChùU≈rŸe˘Faûed
,

266 
	mFœsh_Fun˘i⁄NŸSuµ‹ãd
,

267 
	mFœsh_GroupPrŸe˘Faûed
,

268 
	mFœsh_NoInf‹m©i⁄AvaûabÀ
,

269 
	mFœsh_NoO≥øti⁄ToSu•íd
,

270 
	mFœsh_O≥øti⁄Ongoög
,

271 
	mFœsh_O≥øti⁄TimeOut
,

272 
	mFœsh_ProgømFaûed
,

273 
	mFœsh_Re•⁄£Un˛ór
,

274 
	mFœsh_S≥cificEº‹
,

275 
	mFœsh_Suc˚ss
,

276 
	mFœsh_VµInvÆid
,

277 
	mFœsh_Wr⁄gTy≥
,

278 } 
	tRëu∫Ty≥
;

282 
uw‹d
 
	tuBlockTy≥
;

289 
uBlockTy≥
 
	mublBlockNr
;

290 
Rëu∫Ty≥
 *
	mΩResu…s
;

291 } 
	mB™kEø£
;

295 
udw‹d
 
	mudB™kAddrOff
;

296 } 
	mB™kRe£t
;

300 
udw‹d
 
	mudAddrOff
;

301 } 
	mB™kResume
;

305 
udw‹d
 
	mudAddrOff
;

306 } 
	mB™kSu•íd
;

310 
uBlockTy≥
 
	mublBlockNr
;

311 } 
	mBlockEø£
;

315 
uBlockTy≥
 
	mublBlockNr
;

316 } 
	mBlockPrŸe˘
;

320 
uBlockTy≥
 
	mublBlockNr
;

321 } 
	mBlockU≈rŸe˘
;

325 
uBlockTy≥
 
	mublBlockNr
;

326 } 
	mCheckBlockPrŸe˘i⁄
;

332 
Rëu∫Ty≥
 *
	mΩResu…s
;

333 } 
	mChùEø£
;

337 
Rëu∫Ty≥
 *
	mΩResu…s
;

338 } 
	mChùU≈rŸe˘
;

342 
uBlockTy≥
 
	mublBlockNr
;

343 } 
	mGroupPrŸe˘
;

347 
udw‹d
 
	mudAddrOff
;

348 
udw‹d
 
	mudNrOfEÀmítsInAºay
;

349 *
	mpAºay
;

350 
udw‹d
 
	mudMode
;

351 } 
	mProgøm
;

355 
udw‹d
 
	mudAddrOff
;

356 
uCPUBusTy≥
 
	mucVÆue
;

357 } 
	mRód
;

361 
uw‹d
 
	muwCfiFunc
;

362 
uCPUBusTy≥
 
	mucCfiVÆue
;

363 } 
	mRódCfi
;

367 
uCPUBusTy≥
 
	mucDevi˚Id
;

368 } 
	mRódDevi˚Id
;

372 
uCPUBusTy≥
 
	mucM™uÁ˘uªrCode
;

373 } 
	mRódM™uÁ˘uªrCode
;

381 
udw‹d
 
	mudAddrOff
;

382 
uCPUBusTy≥
 
	mucVÆue
;

383 } 
	mSögÀProgøm
;

389 
udw‹d
 
	mudAddrOff
;

390 
uCPUBusTy≥
 
	mucVÆue
;

391 } 
	mWrôe
;

393 } 
	tP¨amëîTy≥
;

398 
S≥cificRëu∫Ty≥
 
	m•rRëVÆ
;

399 
udw‹d
 
	mudGíîÆInfo
[4];

400 } 
	tEº‹InfoTy≥
;

405 
Eº‹InfoTy≥
 
eiEº‹Info
;

412 
Rëu∫Ty≥
 
Fœsh
–
Comm™dTy≥
 
cmdComm™d
, 
P¨amëîTy≥
 *
Â
 );

413 
Rëu∫Ty≥
 
FœshB™kEø£
–
uBlockTy≥
 
ublBlockNr
, Rëu∫Ty≥ *
ΩResu…s
 );

414 
FœshB™kRe£t
–
udw‹d
 
udB™kAddrOff
 );

415 
Rëu∫Ty≥
 
FœshB™kResume
–
udw‹d
 
udB™kAddrOff
 );

416 
Rëu∫Ty≥
 
FœshB™kSu•íd
–
udw‹d
 
udB™kAddrOff
 );

417 
Rëu∫Ty≥
 
FœshBlockEø£
–
uBlockTy≥
 
ublBlockNr
 );

418 
Rëu∫Ty≥
 
MyFœshBlockEø£
–
uBlockTy≥
 
ublBlockNr
 );

419 
Rëu∫Ty≥
 
FœshBlockPrŸe˘
–
uBlockTy≥
 
ublBlockNr
 );

420 
Rëu∫Ty≥
 
FœshBlockU≈rŸe˘
–
uBlockTy≥
 
ublBlockNr
 );

421 
Rëu∫Ty≥
 
FœshCheckBlockPrŸe˘i⁄
–
uBlockTy≥
 
ublBlockNr
 );

422 
Rëu∫Ty≥
 
FœshCheckCom∑tibûôy
( );

423 
Rëu∫Ty≥
 
FœshChùEø£
–Rëu∫Ty≥ *
ΩResu…s
 );

424 
Rëu∫Ty≥
 
FœshChùU≈rŸe˘
–Rëu∫Ty≥ *
ΩResu…s
 );

425 
Rëu∫Ty≥
 
FœshGroupPrŸe˘
–
uBlockTy≥
 
ublBlockNr
 );

426 
Rëu∫Ty≥
 
FœshProgøm
–
udw‹d
 
udMode
, udw‹d 
udAddrOff
, udw‹d 
udNrOfEÀmítsInAºay
, *
pAºay
 );

427 
Rëu∫Ty≥
 
FœshRódCfi
–
uw‹d
 
uwCFIFunc
, 
uCPUBusTy≥
 *
u˝CFIVÆue
 );

428 
Rëu∫Ty≥
 
FœshRódDevi˚Id
–
uCPUBusTy≥
 *
u˝Devi˚ID
);

429 
Rëu∫Ty≥
 
FœshRódM™uÁ˘uªrCode
–
uCPUBusTy≥
 *
u˝M™uÁ˘uªrCode
);

430 
Rëu∫Ty≥
 
FœshRe£t
( );

431 
Rëu∫Ty≥
 
FœshResume
( );

432 
Rëu∫Ty≥
 
FœshSögÀProgøm
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
 );

433 
Rëu∫Ty≥
 
FœshSu•íd
( );

439 #ifde‡
VERBOSE


440 
byã
 *
FœshEº‹Så
–
Rëu∫Ty≥
 
rEºNum
 );

442 
Rëu∫Ty≥
 
FœshRe•⁄£I¡egrôyCheck
–
uCPUBusTy≥
 *
u˝FœshRe•⁄£
 );

443 
Rëu∫Ty≥
 
FœshTimeOut
–
udw‹d
 
udSec⁄ds
 );

450 
	#MANUFACTURER_ST
 (0x0020Ë

	)

451 
	#ANY_ADDR
 (0x0Ë

	)

453 #ifde‡
USE_M28W160ECT


454 
	#EXPECTED_DEVICE
 (0x88CEË

	)

455 
	#FLASH_SIZE
 (0x00100000Ë

	)

456 
	#FLASH_WRITE_BUFFER_SIZE
 1

	)

457 
	#FLASH_MWA
 1

	)

459 c⁄° 
udw‹d
 
	gBlockOff£t
[] = {

502 #ifde‡
USE_M28W160ECB


503 
	#EXPECTED_DEVICE
 (0x88CFË

	)

504 
	#FLASH_SIZE
 (0x00100000Ë

	)

505 
	#FLASH_WRITE_BUFFER_SIZE
 1

	)

506 
	#FLASH_MWA
 1

	)

508 c⁄° 
udw‹d
 
	gBlockOff£t
[] = {

553 
	#NUM_BLOCKS
 ((
BlockOff£t
)/(BlockOff£t[0]))

	)

558 
Rëu∫Ty≥
 
FœshBlockLockDown
(
uBlockTy≥
 
ublBlockNr
);

559 
Rëu∫Ty≥
 
FœshCheckBlockLockDownSètus
–
uBlockTy≥
 
ublBlockNr
 );

560 
FœshCÀ¨SètusRegi°î
( );

561 
Rëu∫Ty≥
 
FœshDoubÀProgøm
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ1
, uCPUBusTy≥ 
ucVÆ2
 );

562 
Rëu∫Ty≥
 
FœshPrŸe˘i⁄Regi°îProgøm
–
udw‹d
 
udPrŸe˘i⁄Regi°îAddrOff
,

563 
uCPUBusTy≥
 
ucPrŸe˘i⁄Regi°îVÆ
 );

564 
Rëu∫Ty≥
 
FœshRódPrŸe˘i⁄Regi°î
–
udw‹d
 
udPrŸe˘i⁄Regi°îAddrOff
,

565 
uCPUBusTy≥
 *
u˝VÆue
 );

566 
uCPUBusTy≥
 
FœshRódSètusRegi°î
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\VendorsReferenceDriver\c2414FlashReadAndWrite.h

9 #i‚de‡
D_c2414FœshRódAndWrôe_H


10 
	#D_c2414FœshRódAndWrôe_H


	)

12 
	~"c2414.h
"

14 
uCPUBusTy≥
 
FœshRód
–
udw‹d
 
udAddrOff
 );

15 
FœshWrôe
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
 );

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\m28w160ect.h

9 #i‚de‡
D_m28w160e˘_H


10 
	#D_m28w160e˘_H


	)

14 
	mProgømComm™d
 = 0x40,

15 
	mRe£t
 = 0xff

16 } 
	tFœsh_Comm™d
;

20 
	mRódyBô
 = 1<<7,

21 
	mEø£Su•ídBô
 = 1<<6,

22 
	mEø£Eº‹Bô
 = 1<<5,

23 
	mProgømEº‹Bô
 = 1<<4,

24 
	mVµEº‹Bô
 = 1<<3,

25 
	mProgømSu•ídBô
 = 1<<2,

26 
	mBlockPrŸe˘i⁄Eº‹Bô
 = 1<<1,

27 
	mRe£rvedBô
 = 1

28 } 
	tSètusRegi°îBôs
;

32 
	mComm™dRegi°î
 = 0x0,

33 
	mSètusRegi°î
 = 0x0

34 } 
	tFœsh_Regi°îs
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\LedDriver\LedDriver.h

9 #i‚de‡
D_LedDrivî_H


10 
	#D_LedDrivî_H


	)

12 
	~<°döt.h
>

15 
	#TRUE
 1

	)

16 
	#FALSE
 0

	)

17 
	tBOOL
;

21 
LedDrivî_Cª©e
(
uöt16_t
 * 
ÀdsAddªss
);

22 
LedDrivî_De°roy
();

25 
LedDrivî_Tu∫On
(
ÀdNumbî
);

27 
LedDrivî_Tu∫Off
(
ÀdNumbî
);

28 
LedDrivî_Tu∫AŒOn
();

29 
LedDrivî_Tu∫AŒOff
();

31 
BOOL
 
LedDrivî_IsOn
(
ÀdNumbî
);

33 
BOOL
 
LedDrivî_IsOff
(
ÀdNumbî
);

42 #i‚de‡
D_LedDrivî_H


43 
	#D_LedDrivî_H


	)

45 
LedDrivî_Cª©e
();

46 
LedDrivî_De°roy
();

52 #i‚de‡
D_LedDrivî_H


53 
	#D_LedDrivî_H


	)

55 
LedDrivî_Cª©e
();

56 
LedDrivî_De°roy
();

57 
LedDrivî_Tu∫On
(
ÀdNumbî
);

58 
LedDrivî_Tu∫Off
(
ÀdNumbî
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\dvr\DvRecorder.h

9 #i‚de‡
D_DvRec‹dî_H


10 
	#D_DvRec‹dî_H


	)

18 
	sProgøm


20 c⁄° * 
	m«me
;

21 
	mª≥©
;

22 
	mch™√l
;

23 
	m°¨tHour
;

24 
	m°¨tMöuã
;

25 
	mduøti⁄InMöuãs
;

26 
	m¥i‹ôy
;

27 
	m¥e„ªn˚s
;

28 } 
	tProgøm
;

31 
	mÆl_ïisodes
, 
	m√w_ïisodes
, 
	mª≥©ed_ïisodes
,

32 
	mª≥©
, 
	mª≥©_no
,

33 
	mhigh_¥i‹ôy
, 
	mmedium_¥i‹ôy
, 
	mlow_¥i‹ôy


38 
	m¥ogømCou¡
;

39 
Progøm
 
	m¥ogøms
[100];

41 } 
	tDvRec‹dî
;

45 
DvrRec‹dî_Cª©e
();

46 
DvRec‹dî_Re°‹eProgøms
(
DvRec‹dî
*);

49 
DvRec‹dî_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\CircularBuffer.h

11 #i‚de‡
D_CúcuœrBuf„r_H


12 
	#D_CúcuœrBuf„r_H


	)

14 
CúcuœrBuf„r
 
	tCúcuœrBuf„r
;

16 
CúcuœrBuf„r
 * 
CúcuœrBuf„r_Cª©e
(
ˇ∑côy
);

17 
CúcuœrBuf„r_De°roy
(
CúcuœrBuf„r
 *);

18 
CúcuœrBuf„r_IsEm±y
(
CúcuœrBuf„r
 *);

19 
CúcuœrBuf„r_IsFuŒ
(
CúcuœrBuf„r
 *);

20 
CúcuœrBuf„r_Put
(
CúcuœrBuf„r
 *, );

21 
CúcuœrBuf„r_Gë
(
CúcuœrBuf„r
 *);

22 
CúcuœrBuf„r_C≠acôy
(
CúcuœrBuf„r
 *);

23 
CúcuœrBuf„r_Pröt
(
CúcuœrBuf„r
 *);

25 
CúcuœrBuf„r_VîifyI¡egrôy
(
CúcuœrBuf„r
 *);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\RuntimeError.h

9 #i‚de‡
D_Ru¡imeEº‹_H


10 
	#D_Ru¡imeEº‹_H


	)

13 
Ru¡imeEº‹
(c⁄° * 
mesßge
, 
∑ømëî
, c⁄° * 
fûe
, 
löe
);

15 
	#RUNTIME_ERROR
(
des¸ùti⁄
, 
∑ømëî
)\

16 
	`Ru¡imeEº‹
(
des¸ùti⁄
, 
∑ømëî
, 
__FILE__
, 
__LINE__
)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\Utils.h

11 #i‚de‡
D_Utûs_H


12 
	#D_Utûs_H


	)

14 
F‹m©Ouçut
(const *, ...);

18 (*
F‹m©Ouçut
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\common.h

11 #i‚de‡
D_comm⁄_H


12 
	#D_comm⁄_H


	)

14 #i‚de‡
BOOL


15 
	#BOOL
 

	)

18 #i‚de‡
TRUE


19 
	#TRUE
 1

	)

22 #i‚de‡
FALSE


23 
	#FALSE
 0

	)

26 #i‚de‡
NULL


27 
	#NULL
 0

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\zune\RtcTime.h

1 #i‚de‡
D_RtcTime_H


2 
	#D_RtcTime_H


	)

9 
	~"comm⁄.h
"

11 
RtcTime
 
	tRtcTime
;

13 
RtcTime
* 
RtcTime_Cª©e
(
daysSö˚1980
);

14 
RtcTime_De°roy
(
RtcTime
*);

15 
RtcTime_GëYór
(
RtcTime
*);

16 
RtcTime_GëM⁄th
(
RtcTime
*);

17 
RtcTime_GëDayOfM⁄th
(
RtcTime
*);

18 
RtcTime_GëDayOfWìk
(
RtcTime
*);

19 
BOOL
 
isLópYór
(
yór
);

22 
	mSunday
 = 0, 
	mM⁄day
, 
	mTuesday
, 
	mWed√sday
, 
	mThursday
, 
	mFriday
, 
	mS©urday


	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpy.c

7 
	~"F‹m©OuçutSpy.h
"

8 
	~<°dio.h
>

9 
	#WINDOWS_VSNPRINTF_OVERWRITE
 -1

	)

11 i‡(
	gwrôãn_size
 =
WINDOWS_VSNPRINTF_OVERWRITE
)

13 
wrôãn_size
 = 
buf„r_size
 - 
buf„r_u£d
;

14 
	gbuf„r
[
buf„r_off£t
 + 
wrôãn_size
 - 1] = 0;

19 
	~<°dlib.h
>

20 
	~<°d¨g.h
>

22 * 
	gbuf„r
 = 0;

23 
size_t
 
	gbuf„r_size
 = 0;

24 
	gbuf„r_off£t
 = 0;

25 
	gbuf„r_u£d
 = 0;

28 
	$F‹m©OuçutSpy_Cª©e
(
size
)

30 
	`F‹m©OuçutSpy_De°roy
();

31 
buf„r_size
 = 
size
+1;

32 
buf„r
 = (*)
	`mÆloc
(
buf„r_size
);

33 
buf„r_off£t
 = 0;

34 
buf„r_u£d
 = 0;

35 
buf„r
[0] = '\0';

36 
	}
}

38 
	$F‹m©OuçutSpy_De°roy
()

40 i‡(
buf„r
 == 0)

43 
	`‰ì
(
buf„r
);

44 
buf„r
 = 0;

45 
	}
}

47 
	$F‹m©OuçutSpy
(c⁄° * 
f‹m©
, ...)

49 
wrôãn_size
;

51 
va_li°
 
¨gumíts
;

52 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

53 
wrôãn_size
 = 
	`v¢¥ötf
(
buf„r
 + 
buf„r_off£t
,

54 
buf„r_size
 - 
buf„r_u£d
, 
f‹m©
, 
¨gumíts
);

55 
buf„r_off£t
 +
wrôãn_size
;

56 
buf„r_u£d
 +
wrôãn_size
;

57 
	`va_íd
(
¨gumíts
);

59 
	}
}

61 c⁄° * 
	$F‹m©OuçutSpy_GëOuçut
()

63  
buf„r
;

64 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpy.h

7 #i‚de‡
D_F‹m©OuçutSpy_H


8 
	#D_F‹m©OuçutSpy_H


	)

12 
	~"Utûs.h
"

14 
F‹m©OuçutSpy
(c⁄° * 
f‹m©
, ...);

15 
F‹m©OuçutSpy_Cª©e
(
size
);

16 
F‹m©OuçutSpy_De°roy
();

17 c⁄° * 
F‹m©OuçutSpy_GëOuçut
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpyTest.cpp

7 
	~"CµUTe°/Te°H¨√ss.h
"

12 
	~"F‹m©OuçutSpy.h
"

15 
	$TEST_GROUP
(
F‹m©OuçutSpy
)

17 
	`£tup
()

19 
	`UT_PTR_SET
(
F‹m©Ouçut
, 
F‹m©OuçutSpy
);

22 
	`ã¨down
()

24 
	`F‹m©OuçutSpy_De°roy
();

26 
	}
};

30 
	$TEST
(
F‹m©OuçutSpy
, 
HñloW‹ld
)

32 
	`F‹m©OuçutSpy_Cª©e
(20);

33 
	`F‹m©Ouçut
("Hello, World\n");

34 
	`STRCMP_EQUAL
("Hñlo, W‹ld\n", 
	`F‹m©OuçutSpy_GëOuçut
());

35 
	}
}

39 
	$TEST
(
F‹m©OuçutSpy
, 
LimôTheOuçutBuf„rSize
)

41 
	`F‹m©OuçutSpy_Cª©e
(4);

42 
	`F‹m©Ouçut
("Hello, World\n");

43 
	`STRCMP_EQUAL
("Hñl", 
	`F‹m©OuçutSpy_GëOuçut
());

44 
	}
}

48 
	$TEST
(
F‹m©OuçutSpy
, 
PrötMu…ùÀTimes
)

50 
	`F‹m©OuçutSpy_Cª©e
(25);

51 
	`F‹m©Ouçut
("Hello");

52 
	`F‹m©Ouçut
(", World\n");

53 
	`STRCMP_EQUAL
("Hñlo, W‹ld\n", 
	`F‹m©OuçutSpy_GëOuçut
());

54 
	}
}

58 
	$TEST
(
F‹m©OuçutSpy
, 
PrötMu…ùÀOuçutsPa°FuŒ
)

60 
	`F‹m©OuçutSpy_Cª©e
(12);

61 
	`F‹m©Ouçut
("12345");

62 
	`F‹m©Ouçut
("67890");

63 
	`F‹m©Ouçut
("ABCDEF");

64 
	`STRCMP_EQUAL
("1234567890AB", 
	`F‹m©OuçutSpy_GëOuçut
());

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIO.c

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

8 
	~<°dio.h
>

9 
	~"MockIO.h
"

10 
	~"CµUTe°/Te°H¨√ss_c.h
"

14 
	mFLASH_READ
, 
	mFLASH_WRITE
, 
	mNoEx≥˘edVÆue
 = -1

18 
	sEx≥˘©i⁄


20 
	mköd
;

21 
ioAddªss_t
 
	maddr
;

22 
ioD©a_t
 
	mvÆue
;

23 } 
	tEx≥˘©i⁄
;

25 
Ex≥˘©i⁄
 * 
	gex≥˘©i⁄s
 = 0;

26 
	g£tEx≥˘©i⁄Cou¡
;

27 
	ggëEx≥˘©i⁄Cou¡
;

28 
	gmaxEx≥˘©i⁄Cou¡
;

29 
	gÁûuªAÃódyRï‹ãd
 = 0;

32 
Ex≥˘©i⁄
 
	gex≥˘ed
;

33 
Ex≥˘©i⁄
 
	ga˘uÆ
;

35 * 
	gªp‹t_ex≥˘_wrôe_was_ªad
 =

38 * 
	gªp‹t_ªad_wr⁄g_addªss
 =

41 * 
	gªp‹t_ex≥˘_ªad_was_wrôe
 =

44 * 
	gªp‹t_wrôe_d€s_nŸ_m©ch
 =

47 * 
	gªp‹t_too_m™y_wrôe_ex≥˘©i⁄s
 =

49 * 
	gªp‹t_too_m™y_ªad_ex≥˘©i⁄s
 =

51 * 
	gªp‹t_MockIO_nŸ_öôülized
 =

53 * 
	gªp‹t_wrôe_but_out_of_ex≥˘©i⁄s
 =

55 * 
	gªp‹t_ªad_but_out_of_ex≥˘©i⁄s
 =

57 c⁄° * 
	gªp‹t_no_m‹e_ex≥˘©i⁄s
 =

59 c⁄° * 
	gªp‹t_ex≥˘©i⁄_numbî
 =

63 
	$MockIO_Cª©e
(
maxEx≥˘©i⁄s
)

65 
ex≥˘©i⁄s
 = 
	`mÆloc
((
Ex≥˘©i⁄
)*
maxEx≥˘©i⁄s
);

66 
	`mem£t
(
ex≥˘©i⁄s
, 0, (expectations));

67 
£tEx≥˘©i⁄Cou¡
 = 0;

68 
gëEx≥˘©i⁄Cou¡
 = 0;

69 
maxEx≥˘©i⁄Cou¡
 = 
maxEx≥˘©i⁄s
;

70 
ÁûuªAÃódyRï‹ãd
 = 0;

71 
	}
}

73 
	$MockIO_De°roy
()

75 i‡(
ex≥˘©i⁄s
)

76 
	`‰ì
(
ex≥˘©i⁄s
);

77 
ex≥˘©i⁄s
 = 0;

78 
	}
}

81 
	$Áû
(* 
mesßge
)

83 
ÁûuªAÃódyRï‹ãd
 = 1;

84 
	`FAIL_TEXT_C
(
mesßge
);

85 
	}
}

88 
	$ÁûWhíNŸInôülized
()

90 i‡(
ex≥˘©i⁄s
 == 0)

91 
	`Áû
(
ªp‹t_MockIO_nŸ_öôülized
);

92 
	}
}

94 
	$ÁûWhíNoRoomF‹Ex≥˘©i⁄s
(* 
mesßge
)

96 
	`ÁûWhíNŸInôülized
();

97 i‡(
£tEx≥˘©i⁄Cou¡
 >
maxEx≥˘©i⁄Cou¡
)

98 
	`Áû
(
mesßge
);

99 
	}
}

101 
	$ªc‹dEx≥˘©i⁄
(
köd
, 
ioAddªss_t
 
addr
, 
ioD©a_t
 
d©a
)

103 
ex≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
köd
 = kind;

104 
ex≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
addr
 =áddr;

105 
ex≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
vÆue
 = 
d©a
;

106 
£tEx≥˘©i⁄Cou¡
++;

107 
	}
}

111 
	$MockIO_Ex≥˘_Wrôe
(
ioAddªss_t
 
addr
, 
ioD©a_t
 
vÆue
)

113 
	`ÁûWhíNoRoomF‹Ex≥˘©i⁄s
(
ªp‹t_too_m™y_wrôe_ex≥˘©i⁄s
);

114 
	`ªc‹dEx≥˘©i⁄
(
FLASH_WRITE
, 
addr
, 
vÆue
);

115 
	}
}

117 
	$MockIO_Ex≥˘_Ród
(
ioAddªss_t
 
addr
, 
ioD©a_t
 
vÆue
)

119 
	`ÁûWhíNoRoomF‹Ex≥˘©i⁄s
(
ªp‹t_too_m™y_ªad_ex≥˘©i⁄s
);

120 
	`ªc‹dEx≥˘©i⁄
(
FLASH_READ
, 
addr
, 
vÆue
);

121 
	}
}

124 
	$ÁûWhíNoUnu£dEx≥˘©i⁄s
(* 
f‹m©
)

126 
mesßge
[100];

127 
size
 = (
mesßge
) - 1;

129 i‡(
gëEx≥˘©i⁄Cou¡
 >
£tEx≥˘©i⁄Cou¡
)

131 
off£t
 = 
	`¢¥ötf
(
mesßge
, 
size
,

132 
ªp‹t_no_m‹e_ex≥˘©i⁄s
, 
gëEx≥˘©i⁄Cou¡
 + 1);

133 
	`¢¥ötf
(
mesßge
 + 
off£t
, 
size
 - offset,

134 
f‹m©
, 
a˘uÆ
.
addr
,á˘uÆ.
vÆue
);

135 
	`Áû
(
mesßge
);

137 
	}
}

139 
	$£tEx≥˘edAndA˘uÆ
(
ioAddªss_t
 
addr
, 
ioD©a_t
 
vÆue
)

141 
ex≥˘ed
.
addr
 = 
ex≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].addr;

142 
ex≥˘ed
.
vÆue
 = 
ex≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].value;

143 
a˘uÆ
.
addr
 =áddr;

144 
a˘uÆ
.
vÆue
 = value;

145 
	}
}

147 
	$ÁûEx≥˘©i⁄
(* 
ex≥˘©i⁄FaûMesßge
)

149 
mesßge
[100];

150 
size
 = (
mesßge
) - 1;

151 
off£t
 = 
	`¢¥ötf
(
mesßge
, 
size
,

152 
ªp‹t_ex≥˘©i⁄_numbî
, 
gëEx≥˘©i⁄Cou¡
 + 1);

153 
	`¢¥ötf
(
mesßge
 + 
off£t
, 
size
 - offset,

154 
ex≥˘©i⁄FaûMesßge
, 
ex≥˘ed
.
addr
,Éx≥˘ed.
vÆue
,

155 
a˘uÆ
.
addr
,á˘uÆ.
vÆue
);

156 
	`Áû
(
mesßge
);

157 
	}
}

159 
	$ÁûWhí
(
c⁄dôi⁄
, * 
ex≥˘©i⁄FaûMesßge
)

161 i‡(
c⁄dôi⁄
)

162 
	`ÁûEx≥˘©i⁄
(
ex≥˘©i⁄FaûMesßge
);

163 
	}
}

165 
	$ex≥˘©i⁄IsNŸ
(
köd
)

167  
köd
 !
ex≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].kind;

168 
	}
}

170 
	$ex≥˘edAddªssIsNŸ
(
ioAddªss_t
 
addr
)

172  
ex≥˘ed
.
addr
 !=áddr;

173 
	}
}

175 
	$ex≥˘edD©aIsNŸ
(
ioD©a_t
 
d©a
)

177  
ex≥˘ed
.
vÆue
 !
d©a
;

178 
	}
}

181 
	$IO_Wrôe
(
ioAddªss_t
 
addr
, 
ioD©a_t
 
vÆue
)

183 
	`£tEx≥˘edAndA˘uÆ
(
addr
, 
vÆue
);

184 
	`ÁûWhíNŸInôülized
();

185 
	`ÁûWhíNoUnu£dEx≥˘©i⁄s
(
ªp‹t_wrôe_but_out_of_ex≥˘©i⁄s
);

186 
	`ÁûWhí
(
	`ex≥˘©i⁄IsNŸ
(
FLASH_WRITE
), 
ªp‹t_ex≥˘_ªad_was_wrôe
);

187 
	`ÁûWhí
(
	`ex≥˘edAddªssIsNŸ
(
addr
), 
ªp‹t_wrôe_d€s_nŸ_m©ch
);

188 
	`ÁûWhí
(
	`ex≥˘edD©aIsNŸ
(
vÆue
), 
ªp‹t_wrôe_d€s_nŸ_m©ch
);

189 
gëEx≥˘©i⁄Cou¡
++;

190 
	}
}

194 
ioD©a_t
 
	$IO_Ród
(
ioAddªss_t
 
addr
)

196 
	`£tEx≥˘edAndA˘uÆ
(
addr
, 
NoEx≥˘edVÆue
);

197 
	`ÁûWhíNŸInôülized
();

198 
	`ÁûWhíNoUnu£dEx≥˘©i⁄s
(
ªp‹t_ªad_but_out_of_ex≥˘©i⁄s
);

199 
	`ÁûWhí
(
	`ex≥˘©i⁄IsNŸ
(
FLASH_READ
), 
ªp‹t_ex≥˘_wrôe_was_ªad
);

200 
	`ÁûWhí
(
	`ex≥˘edAddªssIsNŸ
(
addr
), 
ªp‹t_ªad_wr⁄g_addªss
);

202  
ex≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
++].
vÆue
;

203 
	}
}

206 
	$ÁûWhíNŸAŒEx≥˘©i⁄sU£d
()

208 
f‹m©
[] = "Expected %dÑeads/writes but got %d";

209 
mesßge
[(
f‹m©
)+5+5];

211 i‡(
gëEx≥˘©i⁄Cou¡
 =
£tEx≥˘©i⁄Cou¡
)

214 
	`¢¥ötf
(
mesßge
, (mesßge), 
f‹m©
, 
£tEx≥˘©i⁄Cou¡
,

215 
gëEx≥˘©i⁄Cou¡
);

216 
	`Áû
(
mesßge
);

217 
	}
}

221 
	$MockIO_Vîify_Com∂ëe
()

223 i‡(
ÁûuªAÃódyRï‹ãd
)

225 
	`ÁûWhíNŸAŒEx≥˘©i⁄sU£d
();

226 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIO.h

7 #i‚de‡
D_MockIO_H


8 
	#D_MockIO_H


	)

10 
	~"IO.h
"

12 
MockIO_Cª©e
(
maxEx≥˘©i⁄s
);

13 
MockIO_De°roy
();

14 
MockIO_Ex≥˘_Wrôe
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
);

15 
MockIO_Ex≥˘_Ród
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
ªtu∫D©a
);

16 
MockIO_Vîify_Com∂ëe
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIOTest.cpp

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	~"CµUTe°/Te°H¨√ss.h
"

10 
	~"CµUTe°/Te°Ouçut.h
"

11 
	~"CµUTe°/Te°Regi°ry.h
"

12 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

15 
	$MockIOSëup
()

17 
	`MockIO_Cª©e
(2);

18 
	}
}

20 
	$MockIOTórdown
()

22 
	`MockIO_De°roy
();

23 
	}
}

25 
	$TEST_GROUP
(
MockIO
)

27 
Te°Te°ögFixtuª
* 
fixtuª
;

28 
ex≥˘edEº‹s
;

29 
	`£tup
()

31 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

32 
fixtuª
->
	`£tSëup
(
MockIOSëup
);

33 
fixtuª
->
	`£tTórdown
(
MockIOTórdown
);

34 
ex≥˘edEº‹s
 = 1;

36 
	`ã¨down
()

38 
dñëe
 
fixtuª
;

41 
	`ã°FaûuªWôh
((*
mëhod
)())

43 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

44 
fixtuª
->
	`runAŒTe°s
();

45 
	`LONGS_EQUAL
(
ex≥˘edEº‹s
, 
fixtuª
->
	`gëFaûuªCou¡
());

48 
	}
};

50 
	$TEST_GROUP
(
MockIOTemp
)

52 
	`£tup
()

54 
	`MockIO_Cª©e
(2);

57 
	`ã¨down
()

59 
	`MockIO_De°roy
();

61 
	}
};

63 
	$C™M©chEx≥˘©i⁄s
()

65 
	`MockIO_Ex≥˘_Ród
(1,2);

66 
	`MockIO_Ex≥˘_Wrôe
(1,2);

67 
	`IO_Wrôe
(1,
	`IO_Ród
(1));

68 
	}
}

70 
	$TEST
(
MockIO
, 
C™M©chEx≥˘©i⁄s
)

72 
ex≥˘edEº‹s
 = 0;

73 
	`ã°FaûuªWôh
(
C™M©chEx≥˘©i⁄s
);

74 
fixtuª
->
	`as£πPrötC⁄èös
("OK");

75 
	}
}

77 
	$WrôeWhíRódEx≥˘edFaûs
()

79 
	`MockIO_Ex≥˘_Ród
(0,1);

80 
	`IO_Wrôe
(0,0);

81 
	}
}

83 
	$TEST
(
MockIO
, 
WrôeWhíRódEx≥˘edFaûs
)

85 
	`ã°FaûuªWôh
(
WrôeWhíRódEx≥˘edFaûs
);

86 
fixtuª
->
	`as£πPrötC⁄èös
("Expected IO_Read(0x0) wouldÑeturn 0x1");

87 
fixtuª
->
	`as£πPrötC⁄èös
("But was IO_Write(0x0, 0x0)");

88 
	}
}

90 
	$RódWhíWrôeEx≥˘edFaûs
()

92 
	`MockIO_Ex≥˘_Wrôe
(0,1);

93 
	`IO_Ród
(0);

94 
	}
}

96 
	$TEST
(
MockIO
, 
RódWhíWrôeEx≥˘edFaûs
)

98 
	`ã°FaûuªWôh
(
RódWhíWrôeEx≥˘edFaûs
);

99 
fixtuª
->
	`as£πPrötC⁄èös
("Expected IO_Write(0x0, 0x1)");

100 
fixtuª
->
	`as£πPrötC⁄èös
("But was IO_Read(0x0)");

101 
	}
}

103 
	$TooM™yWrôeEx≥˘©i⁄s
()

105 
	`MockIO_Ex≥˘_Wrôe
(0,1);

106 
	`MockIO_Ex≥˘_Wrôe
(0,1);

107 
	`MockIO_Ex≥˘_Wrôe
(0,1);

108 
	}
}

110 
	$TEST
(
MockIO
, 
TooM™yWrôeEx≥˘©i⁄s
)

112 
	`ã°FaûuªWôh
(
TooM™yWrôeEx≥˘©i⁄s
);

113 
fixtuª
->
	`as£πPrötC⁄èös
("MockIO_Expect_IO_Write: Too manyÉxpectations");

114 
	}
}

116 
	$TooM™yRódEx≥˘©i⁄s
()

118 
	`MockIO_Ex≥˘_Ród
(0,0);

119 
	`MockIO_Ex≥˘_Ród
(0,0);

120 
	`MockIO_Ex≥˘_Ród
(0,0);

121 
	}
}

123 
	$TEST
(
MockIO
, 
TooM™yRódEx≥˘©i⁄s
)

125 
	`ã°FaûuªWôh
(
TooM™yRódEx≥˘©i⁄s
);

126 
fixtuª
->
	`as£πPrötC⁄èös
("MockIO_Expect_IO_Read: Too manyÉxpectations");

127 
	}
}

130 
	$nŸInôülizedRódTe°
()

132 
	`MockIO_De°roy
();

133 
	`MockIO_Ex≥˘_Ród
(0,0);

134 
	}
}

136 
	$TEST
(
MockIO
, 
NŸInôülizedTheRód
)

138 
	`ã°FaûuªWôh
(
nŸInôülizedRódTe°
);

139 
fixtuª
->
	`as£πPrötC⁄èös
("MockIOÇot initialized");

140 
	}
}

142 
	$nŸInôülizedWrôeTe°
()

144 
	`MockIO_De°roy
();

145 
	`MockIO_Ex≥˘_Wrôe
(0,0);

146 
	}
}

148 
	$TEST
(
MockIO
, 
NŸInôülizedTheWrôe
)

150 
	`ã°FaûuªWôh
(
nŸInôülizedWrôeTe°
);

151 
fixtuª
->
	`as£πPrötC⁄èös
("MockIOÇot initialized");

152 
	}
}

154 
	$Mism©chedWrôeAddªss
()

156 
	`MockIO_Ex≥˘_Wrôe
(0,0);

157 
	`IO_Wrôe
(0x10,0);

158 
	}
}

160 
	$TEST
(
MockIO
, 
Mism©chedWrôeAddªss
)

162 
	`ã°FaûuªWôh
(
Mism©chedWrôeAddªss
);

163 
fixtuª
->
	`as£πPrötC⁄èös
("Expected IO_Write(0x0, 0x0)");

164 
fixtuª
->
	`as£πPrötC⁄èös
("But was IO_Write(0x10, 0x0)");

165 
	}
}

167 
	$Mism©chedWrôeD©a
()

169 
	`MockIO_Ex≥˘_Wrôe
(0,0);

170 
	`IO_Wrôe
(0,0xdead);

171 
	}
}

173 
	$TEST
(
MockIO
, 
Mism©chedWrôeD©a
)

175 
	`ã°FaûuªWôh
(
Mism©chedWrôeD©a
);

176 
fixtuª
->
	`as£πPrötC⁄èös
("Expected IO_Write(0x0, 0x0)");

177 
fixtuª
->
	`as£πPrötC⁄èös
("But was IO_Write(0x0, 0xdead)");

178 
	}
}

180 
	$Mism©chedRódAddªss
()

182 
	`MockIO_Ex≥˘_Ród
(0x1000,0xaaaa);

183 
	`IO_Ród
(0x10000);

184 
	}
}

186 
	$TEST
(
MockIO
, 
Mism©chedRódAddªss
)

188 
	`ã°FaûuªWôh
(
Mism©chedRódAddªss
);

189 
fixtuª
->
	`as£πPrötC⁄èös
("Expected IO_Read(0x1000)Ñeturns 0xaaaa");

190 
fixtuª
->
	`as£πPrötC⁄èös
("But was IO_Read(0x10000)");

191 
	}
}

193 
	$TooM™yRóds
()

195 
	`IO_Ród
(0x10000);

196 
	}
}

198 
	$TEST
(
MockIO
, 
TooM™yRóds
)

200 
	`ã°FaûuªWôh
(
TooM™yRóds
);

201 
fixtuª
->
	`as£πPrötC⁄èös
("No moreÉxpectations but was IO_Read(0x10000)");

202 
	}
}

204 
	$TooM™yWrôes
()

206 
	`IO_Wrôe
(0x10000, 0x1234);

207 
	}
}

209 
	$TEST
(
MockIO
, 
TooM™yWrôes
)

211 
	`ã°FaûuªWôh
(
TooM™yWrôes
);

212 
fixtuª
->
	`as£πPrötC⁄èös
(

214 
	}
}

216 
	$NŸAŒEx≥˘©i⁄sU£d
()

218 
	`MockIO_Ex≥˘_Ród
(0x1000,0xaaaa);

219 
	`MockIO_Ex≥˘_Wrôe
(0x1000,0x5555);

220 
	`MockIO_Vîify_Com∂ëe
();

221 
	}
}

223 
	$TEST
(
MockIO
, 
NŸAŒEx≥˘©i⁄sU£d
)

225 
	`ã°FaûuªWôh
(
NŸAŒEx≥˘©i⁄sU£d
);

226 
fixtuª
->
	`as£πPrötC⁄èös
("Expected 2Ñeads/writes but got 0");

227 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\RuntimeErrorStub.c

1 
	~"Ru¡imeEº‹Stub.h
"

3 c⁄° * 
	gmesßge
 = "No Error";

4 
	g∑ømëî
 = -1;

5 c⁄° * 
	gfûe
 = 0;

6 
	glöe
 = -1;

8 
	$Ru¡imeEº‹Stub_Re£t
()

10 
mesßge
 = "No Error";

11 
∑ømëî
 = -1;

12 
	}
}

14 c⁄° * 
	$Ru¡imeEº‹Stub_GëLa°Eº‹
()

16  
mesßge
;

17 
	}
}

19 
	$Ru¡imeEº‹
(c⁄° * 
m
, 
∑øm
, c⁄° * 
f
, 
l
)

21 
mesßge
 = 
m
;

22 
∑ømëî
 = 
∑øm
;

23 
fûe
 = 
f
;

24 
löe
 = 
l
;

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\RuntimeErrorStub.h

1 #i‚de‡
D_Ru¡imeEº‹Stub_H


2 
	#D_Ru¡imeEº‹Stub_H


	)

4 
	~"Ru¡imeEº‹.h
"

6 
Ru¡imeEº‹Stub_Re£t
();

7 c⁄° * 
Ru¡imeEº‹Stub_GëLa°Eº‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\cmock\MockIO.c

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<£tjmp.h
>

5 
	~"unôy.h
"

6 
	~"MockIO.h
"

8 
	sMockIOIn°™˚


10 
	mÆlocFaûuª
;

12 
	mIO_Ród_CÆlCou¡
;

13 
	mIO_Ród_CÆlsEx≥˘ed
;

15 
ioD©a_t
 *
	mIO_Ród_Rëu∫
;

16 
ioD©a_t
 *
	mIO_Ród_Rëu∫_Hód
;

17 
ioD©a_t
 *
	mIO_Ród_Rëu∫_Taû
;

19 
ioAddªss_t
 *
	mIO_Ród_Ex≥˘ed_off£t
;

20 
ioAddªss_t
 *
	mIO_Ród_Ex≥˘ed_off£t_Hód
;

21 
ioAddªss_t
 *
	mIO_Ród_Ex≥˘ed_off£t_Taû
;

23 
	mIO_Wrôe_CÆlCou¡
;

24 
	mIO_Wrôe_CÆlsEx≥˘ed
;

26 
ioAddªss_t
 *
	mIO_Wrôe_Ex≥˘ed_off£t
;

27 
ioAddªss_t
 *
	mIO_Wrôe_Ex≥˘ed_off£t_Hód
;

28 
ioAddªss_t
 *
	mIO_Wrôe_Ex≥˘ed_off£t_Taû
;

30 
ioD©a_t
 *
	mIO_Wrôe_Ex≥˘ed_d©a
;

31 
ioD©a_t
 *
	mIO_Wrôe_Ex≥˘ed_d©a_Hód
;

32 
ioD©a_t
 *
	mIO_Wrôe_Ex≥˘ed_d©a_Taû
;

33 } 
	gMock
;

35 
jmp_buf
 
Ab‹tFøme
;

37 
	$MockIO_Vîify
()

39 
	`TEST_ASSERT_EQUAL_MESSAGE
(0, 
Mock
.
ÆlocFaûuª
, "UnableÅoállocate memory for mock");

40 
	`TEST_ASSERT_EQUAL_MESSAGE
(
Mock
.
IO_Ród_CÆlsEx≥˘ed
, Mock.
IO_Ród_CÆlCou¡
, "Function 'IO_Read' called unexpectedÇumber ofÅimes.");

41 
	`TEST_ASSERT_EQUAL_MESSAGE
(
Mock
.
IO_Wrôe_CÆlsEx≥˘ed
, Mock.
IO_Wrôe_CÆlCou¡
, "Function 'IO_Write' called unexpectedÇumber ofÅimes.");

42 
	}
}

44 
	$MockIO_Inô
()

46 
	`MockIO_De°roy
();

47 
	}
}

49 
	$MockIO_De°roy
()

52 i‡(
Mock
.
IO_Ród_Rëu∫_Hód
)

54 
	`‰ì
(
Mock
.
IO_Ród_Rëu∫_Hód
);

56 
Mock
.
IO_Ród_Rëu∫
=
NULL
;

57 
Mock
.
IO_Ród_Rëu∫_Hód
=
NULL
;

58 
Mock
.
IO_Ród_Rëu∫_Taû
=
NULL
;

60 i‡(
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
)

62 
	`‰ì
(
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
);

64 
Mock
.
IO_Ród_Ex≥˘ed_off£t
=
NULL
;

65 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
=
NULL
;

66 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Taû
=
NULL
;

68 i‡(
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
)

70 
	`‰ì
(
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
);

72 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
=
NULL
;

73 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
=
NULL
;

74 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Taû
=
NULL
;

76 i‡(
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
)

78 
	`‰ì
(
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
);

80 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
=
NULL
;

81 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
=
NULL
;

82 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Taû
=
NULL
;

83 
	`mem£t
(&
Mock
, 0, (Mock));

84 
	}
}

86 
ioD©a_t
 
	$IO_Ród
(
ioAddªss_t
 
off£t
)

89 
Mock
.
IO_Ród_CÆlCou¡
++;

90 i‡(
Mock
.
IO_Ród_CÆlCou¡
 > Mock.
IO_Ród_CÆlsEx≥˘ed
)

92 
	`TEST_FAIL
("Function 'IO_Read' called moreÅimesÅhanÉxpected");

95 i‡(
Mock
.
IO_Ród_Ex≥˘ed_off£t
 !Mock.
IO_Ród_Ex≥˘ed_off£t_Taû
)

97 
ioAddªss_t
* 
p_ex≥˘ed
 = 
Mock
.
IO_Ród_Ex≥˘ed_off£t
;

98 
Mock
.
IO_Ród_Ex≥˘ed_off£t
++;

99 
	`TEST_ASSERT_EQUAL_MEMORY_MESSAGE
((*)
p_ex≥˘ed
, (*)&(
off£t
), (
ioAddªss_t
), "Function 'IO_Read' called with unexpected value forárgument 'offset'.");

103 i‡(
Mock
.
IO_Ród_Rëu∫
 !Mock.
IO_Ród_Rëu∫_Taû
)

105 
ioD©a_t
 
toRëu∫
 = *
Mock
.
IO_Ród_Rëu∫
;

106 
Mock
.
IO_Ród_Rëu∫
++;

107  
toRëu∫
;

111  *(
Mock
.
IO_Ród_Rëu∫_Taû
 - 1);

113 
	}
}

115 
	$Ex≥˘P¨amëîs_IO_Ród
(
ioAddªss_t
 
off£t
)

119 
sz
 = 0;

120 
ioAddªss_t
 *
poöãr
 = 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
;

121 
poöãr
 &&Öoöã∏!
Mock
.
IO_Ród_Ex≥˘ed_off£t_Taû
Ë{ 
sz
++;Öointer++; }

122 i‡(
sz
 == 0)

124 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
 = (
ioAddªss_t
*)
	`mÆloc
(2*(ioAddress_t));

125 i‡(!
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
)

126 
Mock
.
ÆlocFaûuª
++;

130 
ioAddªss_t
 *
±mp
 = (ioAddªss_t*)
	`ªÆloc
(
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
, (ioAddªss_tË* (
sz
+1));

131 i‡(!
±mp
)

132 
Mock
.
ÆlocFaûuª
++;

134 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
 = 
±mp
;

136 
	`mem˝y
(&
Mock
.
IO_Ród_Ex≥˘ed_off£t_Hód
[
sz
], &
off£t
, (
ioAddªss_t
));

137 
Mock
.
IO_Ród_Ex≥˘ed_off£t_Taû
 = &Mock.
IO_Ród_Ex≥˘ed_off£t_Hód
[
sz
+1];

139 
Mock
.
IO_Ród_Ex≥˘ed_off£t
 = Mock.
IO_Ród_Ex≥˘ed_off£t_Hód
;

140 
Mock
.
IO_Ród_Ex≥˘ed_off£t
 +Mock.
IO_Ród_CÆlCou¡
;

141 
	}
}

143 
	$IO_Ród_Ex≥˘AndRëu∫
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
toRëu∫
)

145 
Mock
.
IO_Ród_CÆlsEx≥˘ed
++;

146 
	`Ex≥˘P¨amëîs_IO_Ród
(
off£t
);

149 
sz
 = 0;

150 
ioD©a_t
 *
poöãr
 = 
Mock
.
IO_Ród_Rëu∫_Hód
;

151 
poöãr
 &&Öoöã∏!
Mock
.
IO_Ród_Rëu∫_Taû
Ë{ 
sz
++;Öointer++; }

152 i‡(
sz
 == 0)

154 
Mock
.
IO_Ród_Rëu∫_Hód
 = (
ioD©a_t
*)
	`mÆloc
(2*(ioData_t));

155 i‡(!
Mock
.
IO_Ród_Rëu∫_Hód
)

156 
Mock
.
ÆlocFaûuª
++;

160 
ioD©a_t
 *
±mp
 = (ioD©a_t*)
	`ªÆloc
(
Mock
.
IO_Ród_Rëu∫_Hód
, (ioD©a_tË* (
sz
+1));

161 i‡(!
±mp
)

162 
Mock
.
ÆlocFaûuª
++;

164 
Mock
.
IO_Ród_Rëu∫_Hód
 = 
±mp
;

166 
	`mem˝y
(&
Mock
.
IO_Ród_Rëu∫_Hód
[
sz
], &
toRëu∫
, (
ioD©a_t
));

167 
Mock
.
IO_Ród_Rëu∫_Taû
 = &Mock.
IO_Ród_Rëu∫_Hód
[
sz
+1];

169 
Mock
.
IO_Ród_Rëu∫
 = Mock.
IO_Ród_Rëu∫_Hód
;

170 
Mock
.
IO_Ród_Rëu∫
 +Mock.
IO_Ród_CÆlCou¡
;

171 
	}
}

173 
	$IO_Wrôe
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
)

176 
Mock
.
IO_Wrôe_CÆlCou¡
++;

177 i‡(
Mock
.
IO_Wrôe_CÆlCou¡
 > Mock.
IO_Wrôe_CÆlsEx≥˘ed
)

179 
	`TEST_FAIL
("Function 'IO_Write' called moreÅimesÅhanÉxpected");

182 i‡(
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
 !Mock.
IO_Wrôe_Ex≥˘ed_off£t_Taû
)

184 
ioAddªss_t
* 
p_ex≥˘ed
 = 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
;

185 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
++;

186 
	`TEST_ASSERT_EQUAL_MEMORY_MESSAGE
((*)
p_ex≥˘ed
, (*)&(
off£t
), (
ioAddªss_t
), "Function 'IO_Write' called with unexpected value forárgument 'offset'.");

190 i‡(
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
 !Mock.
IO_Wrôe_Ex≥˘ed_d©a_Taû
)

192 
ioD©a_t
* 
p_ex≥˘ed
 = 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
;

193 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
++;

194 
	`TEST_ASSERT_EQUAL_MEMORY_MESSAGE
((*)
p_ex≥˘ed
, (*)&(
d©a
), (
ioD©a_t
), "Function 'IO_Write' called with unexpected value forárgument 'data'.");

197 
	}
}

199 
	$Ex≥˘P¨amëîs_IO_Wrôe
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
)

203 
sz
 = 0;

204 
ioAddªss_t
 *
poöãr
 = 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
;

205 
poöãr
 &&Öoöã∏!
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Taû
Ë{ 
sz
++;Öointer++; }

206 i‡(
sz
 == 0)

208 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
 = (
ioAddªss_t
*)
	`mÆloc
(2*(ioAddress_t));

209 i‡(!
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
)

210 
Mock
.
ÆlocFaûuª
++;

214 
ioAddªss_t
 *
±mp
 = (ioAddªss_t*)
	`ªÆloc
(
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
, (ioAddªss_tË* (
sz
+1));

215 i‡(!
±mp
)

216 
Mock
.
ÆlocFaûuª
++;

218 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
 = 
±mp
;

220 
	`mem˝y
(&
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Hód
[
sz
], &
off£t
, (
ioAddªss_t
));

221 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t_Taû
 = &Mock.
IO_Wrôe_Ex≥˘ed_off£t_Hód
[
sz
+1];

223 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
 = Mock.
IO_Wrôe_Ex≥˘ed_off£t_Hód
;

224 
Mock
.
IO_Wrôe_Ex≥˘ed_off£t
 +Mock.
IO_Wrôe_CÆlCou¡
;

227 
sz
 = 0;

228 
ioD©a_t
 *
poöãr
 = 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
;

229 
poöãr
 &&Öoöã∏!
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Taû
Ë{ 
sz
++;Öointer++; }

230 i‡(
sz
 == 0)

232 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
 = (
ioD©a_t
*)
	`mÆloc
(2*(ioData_t));

233 i‡(!
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
)

234 
Mock
.
ÆlocFaûuª
++;

238 
ioD©a_t
 *
±mp
 = (ioD©a_t*)
	`ªÆloc
(
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
, (ioD©a_tË* (
sz
+1));

239 i‡(!
±mp
)

240 
Mock
.
ÆlocFaûuª
++;

242 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
 = 
±mp
;

244 
	`mem˝y
(&
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Hód
[
sz
], &
d©a
, (
ioD©a_t
));

245 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a_Taû
 = &Mock.
IO_Wrôe_Ex≥˘ed_d©a_Hód
[
sz
+1];

247 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
 = Mock.
IO_Wrôe_Ex≥˘ed_d©a_Hód
;

248 
Mock
.
IO_Wrôe_Ex≥˘ed_d©a
 +Mock.
IO_Wrôe_CÆlCou¡
;

249 
	}
}

251 
	$IO_Wrôe_Ex≥˘
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
)

253 
Mock
.
IO_Wrôe_CÆlsEx≥˘ed
++;

254 
	`Ex≥˘P¨amëîs_IO_Wrôe
(
off£t
, 
d©a
);

255 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\cmock\MockIO.h

3 #i‚de‡
_MOCKIO_H


4 
	#_MOCKIO_H


	)

6 
	~"IO.h
"

8 
MockIO_Inô
();

9 
MockIO_De°roy
();

10 
MockIO_Vîify
();

12 
IO_Ród_Ex≥˘AndRëu∫
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
toRëu∫
);

13 
IO_Wrôe_Ex≥˘
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\Action\Action.cpp

9 
	~"A˘i⁄.h
"

11 
	gA˘i⁄
::
	$A˘i⁄
()

14 
	}
}

16 
A˘i⁄
::~
	$A˘i⁄
()

19 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\Action\CallbackAction.cpp

9 
	~"A˘i⁄.h
"

11 
	gA˘i⁄
::
	$A˘i⁄
()

14 
	}
}

16 
A˘i⁄
::~
	$A˘i⁄
()

19 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BFwAdaptor.cpp

16 
	~"BFwAd≠t‹.h
"

17 
	~"BigFømew‹k.h
"

18 
	~"OurSîvi˚Clõ¡.h
"

20 
	gBFwAd≠t‹
::
	$BFwAd≠t‹
()

22 
£rvî
 = 
BigFømew‹k
::
	`ªgi°îMe
(
this
);

23 
	}
}

25 
	gBFwAd≠t‹
::~
	$BFwAd≠t‹
()

27 
	}
}

29 
BFwAd≠t‹
::
	$yourReque°IsD⁄e
(
ªsu…
)

33 
˛õ¡
->
	`doSomëhögIsD⁄e
();

34 
	}
}

36 
	gBFwAd≠t‹
::
	$doSomëhög
(
OurSîvi˚Clõ¡
* 
˛õ¡
)

40 
this
->
˛õ¡
 = client;

41 
£rvî
->
	`doSomëhögBig
();

42 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BFwAdaptor.h

16 #i‚de‡
BFWADAPTOR_H_


17 
	#BFWADAPTOR_H_


	)

19 
	~"BigFømew‹k.h
"

20 
	~"BigFømew‹kClõ¡.h
"

21 
	~"OurSîvi˚Reque°s.h
"

23 
˛ass
 
	gOurSîvi˚Clõ¡
;

25 
˛ass
 
	gBFwAd≠t‹
 : 
public
 
OurSîvi˚Reque°s


26 , 
¥iv©e
 
	gBigFømew‹kClõ¡


28 
	gpublic
:

29 
BFwAd≠t‹
();

30 
	gvútuÆ
 ~
BFwAd≠t‹
();

32 
vútuÆ
 
yourReque°IsD⁄e
(
ªsu…
);

33 
doSomëhög
(
OurSîvi˚Clõ¡
*);

35 
	g¥iv©e
:

36 
OurSîvi˚Clõ¡
* 
˛õ¡
;

37 
BigFømew‹k
* 
	g£rvî
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFramework.cpp

16 
	~"BigFømew‹k.h
"

18 
	gBigFømew‹k
::
	$BigFømew‹k
()

21 
	}
}

23 
BigFømew‹k
::~
	$BigFømew‹k
()

26 
	}
}

28 
BigFømew‹k
* BigFømew‹k::
	$ªgi°îMe
(
BigFømew‹kClõ¡
* 
˛õ¡
)

31  
√w
 
	`BigFømew‹k
();

32 
	}
}

34 
	gBigFømew‹k
::
	$doSomëhögBig
()

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFramework.h

16 #i‚de‡
BIGFRAMEWORK_H_


17 
	#BIGFRAMEWORK_H_


	)

20 
˛ass
 
	gBigFømew‹kClõ¡
;

22 ˛as†
	cBigFømew‹k


24 
	mpublic
:

25 
BigFømew‹k
();

26 
	mvútuÆ
 ~
BigFømew‹k
();

28 
BigFømew‹k
* 
ªgi°îMe
(
BigFømew‹kClõ¡
*);

29 
doSomëhögBig
();

31 
doSomëhögId⁄tW™tToU£
();

32 
ëc
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFrameworkClient.cpp

16 
	~"BigFømew‹kClõ¡.h
"

18 
	gBigFømew‹kClõ¡
::
	$BigFømew‹kClõ¡
()

21 
	}
}

23 
BigFømew‹kClõ¡
::~
	$BigFømew‹kClõ¡
()

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFrameworkClient.h

16 #i‚de‡
BIGFRAMEWORKCLIENT_H_


17 
	#BIGFRAMEWORKCLIENT_H_


	)

19 ˛as†
	cBigFømew‹kClõ¡


21 
	mpublic
:

22 
BigFømew‹kClõ¡
();

23 
	mvútuÆ
 ~
BigFømew‹kClõ¡
();

25 
vútuÆ
 
	$yourReque°IsD⁄e
(
ªsu…
)

28 
¥iv©e
:

31 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurCode.cpp

16 
	~"OurCode.h
"

17 
	~"OurSîvi˚Reque°s.h
"

19 
	gOurCode
::
	$OurCode
(
OurSîvi˚Reque°s
* 
£rvî
)

20 : 
	$£rvî
(
£rvî
)

22 
	}
}

24 
OurCode
::~
	$OurCode
()

26 
	}
}

28 
OurCode
::
	$doMyThög
()

31 
£rvî
->
	`doSomëhög
(
this
);

32 
	}
}

34 
	gOurCode
::
	$doSomëhögIsD⁄e
()

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurCode.h

16 #i‚de‡
OurCode_H_


17 
	#OurCode_H_


	)

19 
	~"OurSîvi˚Clõ¡.h
"

21 
˛ass
 
	gOurSîvi˚Reque°s
;

23 ˛as†
	cOurCode
 : 
¥iv©e
 
OurSîvi˚Clõ¡


25 
public
:

26 
OurCode
(
OurSîvi˚Reque°s
*);

27 
	mvútuÆ
 ~
OurCode
();

29 
doMyThög
();

31 
	m¥iv©e
:

32 
OurSîvi˚Reque°s
* 
£rvî
;

34 
doSomëhögIsD⁄e
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceClient.cpp

16 
	~"OurSîvi˚Clõ¡.h
"

18 
	gOurSîvi˚Clõ¡
::
	$OurSîvi˚Clõ¡
()

22 
	}
}

24 
OurSîvi˚Clõ¡
::~
	$OurSîvi˚Clõ¡
()

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceClient.h

16 #i‚de‡
OurSîvi˚CLIENT_H_


17 
	#OurSîvi˚CLIENT_H_


	)

19 ˛as†
	cOurSîvi˚Clõ¡


21 
	mpublic
:

22 
OurSîvi˚Clõ¡
();

23 
	mvútuÆ
 ~
OurSîvi˚Clõ¡
();

25 
vútuÆ
 
doSomëhögIsD⁄e
() = 0;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceRequests.cpp

16 
	~"OurSîvi˚Reque°s.h
"

18 
	gOurSîvi˚Reque°s
::
	$OurSîvi˚Reque°s
()

20 
	}
}

22 
OurSîvi˚Reque°s
::~
	$OurSîvi˚Reque°s
()

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceRequests.h

16 #i‚de‡
OurSîvi˚REQUESTS_H_


17 
	#OurSîvi˚REQUESTS_H_


	)

19 
˛ass
 
	gOurSîvi˚Clõ¡
;

21 ˛as†
	cOurSîvi˚Reque°s


23 
	mpublic
:

24 
OurSîvi˚Reque°s
();

25 
	mvútuÆ
 ~
OurSîvi˚Reque°s
();

27 
vútuÆ
 
doSomëhög
(
OurSîvi˚Clõ¡
*) = 0;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\StartOurCode.cpp

16 
	~"SèπOurCode.h
"

17 
	~"OurCode.h
"

18 
	~"BFwAd≠t‹.h
"

20 
	gSèπOurCode
::
	$SèπOurCode
()

22 
BFwAd≠t‹
 
a
;

23 
OurCode
 
	`OurCode
(&
a
);

24 
OurCode
.
	`doMyThög
();

26 
	}
}

28 
	gSèπOurCode
::~
	$SèπOurCode
()

30 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\StartOurCode.h

16 #i‚de‡
STARTOurCode_H_


17 
	#STARTOurCode_H_


	)

19 ˛as†
	cSèπOurCode


21 
	mpublic
:

22 
SèπOurCode
();

23 
	mvútuÆ
 ~
SèπOurCode
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\IoPort.c

9 
	~"IoP‹t.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

14 
	$IoP‹t_Wrôe_im∂
(
IoP‹t
* 
£lf
, 
uöt16_t
 
vÆue
) {

16 
	}
}

18 
uöt16_t
 
	$IoP‹t_Ród_im∂
(
IoP‹t
* 
£lf
) {

21 
	}
}

23 
IoP‹t
* 
	$IoP‹t_Cª©e
(
uöt16_t
 
addªss
, * 
«me
) {

24 
IoP‹t
* 
£lf
 = 
	`mÆloc
((IoPort));

25 
	`mem£t
(
£lf
, 0, (
IoP‹t
));

26 
	`mem˝y
(
£lf
->
«me
,Çame, (self->name));

27 
£lf
->
Wrôe
 = 
IoP‹t_Wrôe_im∂
;

28 
£lf
->
Ród
 = 
IoP‹t_Ród_im∂
;

29  
£lf
;

30 
	}
}

32 
	$IoP‹t_De°roy
(
IoP‹t
* 
£lf
) {

33 
	`‰ì
(
£lf
);

34 
	}
}

36 * 
	$IoP‹t_GëName
(
IoP‹t
* 
£lf
) {

37  
£lf
->
«me
;

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\c2414.c

86 
	~<°dio.h
>

87 
	~<°dlib.h
>

88 
	~<°rög.h
>

90 
	~"c2414.h
"

91 
	~"c2414FœshRódAndWrôe.h
"

93 #ifde‡
TIME_H_EXISTS


94 
	~<time.h
>

100 
Eº‹InfoTy≥
 
	geiEº‹Info
;

139 
Rëu∫Ty≥
 
	$Fœsh
–
Comm™dTy≥
 
cmdComm™d
, 
P¨amëîTy≥
 *
Â
 ) {

140 
Rëu∫Ty≥
 
rRëVÆ
;

142 
cmdComm™d
) {

143 
BlockEø£
:

144 
rRëVÆ
 = 
	`FœshBlockEø£
–(*
Â
).
BlockEø£
.
ublBlockNr
 );

147 
BlockPrŸe˘
:

148 
rRëVÆ
 = 
	`FœshBlockPrŸe˘
–(*
Â
).
BlockPrŸe˘
.
ublBlockNr
 );

151 
BlockU≈rŸe˘
:

152 
rRëVÆ
 = 
	`FœshBlockU≈rŸe˘
–(*
Â
).
BlockU≈rŸe˘
.
ublBlockNr
 );

155 
CheckBlockPrŸe˘i⁄
:

156 
rRëVÆ
 = 
	`FœshCheckBlockPrŸe˘i⁄
–(*
Â
).
CheckBlockPrŸe˘i⁄
.
ublBlockNr
 );

159 
CheckCom∑tibûôy
:

160 
rRëVÆ
 = 
	`FœshCheckCom∑tibûôy
 ();

163 
ChùEø£
:

164 
rRëVÆ
 = 
	`FœshChùEø£
–(*
Â
).
ChùEø£
.
ΩResu…s
 );

167 
ChùU≈rŸe˘
:

168 
rRëVÆ
 = 
	`FœshChùU≈rŸe˘
–(*
Â
).
ChùU≈rŸe˘
.
ΩResu…s
 );

171 
Progøm
:

172 
rRëVÆ
 = 
	`FœshProgøm
–(*
Â
).
Progøm
.
udMode
,

173 (*
Â
).
Progøm
.
udAddrOff
,

174 (*
Â
).
Progøm
.
udNrOfEÀmítsInAºay
,

175 (*
Â
).
Progøm
.
pAºay
 );

178 
Ród
:

179 (*
Â
).
Ród
.
ucVÆue
 = 
	`FœshRód
–(*Â).Ród.
udAddrOff
 );

180 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

183 
RódCfi
:

184 
rRëVÆ
 = 
	`FœshRódCfi
–(*
Â
).
RódCfi
.
uwCfiFunc
, &((*Â).RódCfi).
ucCfiVÆue
 );

187 
RódDevi˚Id
:

188 
rRëVÆ
 = 
	`FœshRódDevi˚Id
–&((*
Â
).
RódDevi˚Id
.
ucDevi˚Id
) );

191 
RódM™uÁ˘uªrCode
:

192 
rRëVÆ
 = 
	`FœshRódM™uÁ˘uªrCode
 ( &((*
Â
).
RódM™uÁ˘uªrCode
.
ucM™uÁ˘uªrCode
) );

195 
Re£t
:

196 
	`FœshRe£t
();

197 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

200 
Resume
:

201 
	`FœshResume
();

202 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

205 
SögÀProgøm
:

206 
rRëVÆ
 = 
	`FœshSögÀProgøm
–(*
Â
).
SögÀProgøm
.
udAddrOff
, (*Â).SögÀProgøm.
ucVÆue
 );

209 
Su•íd
:

210 
	`FœshSu•íd
();

211 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

214 
Wrôe
:

215 
	`FœshWrôe
–(*
Â
).
Wrôe
.
udAddrOff
, (*Â).Wrôe.
ucVÆue
 );

216 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

220 
rRëVÆ
 = 
Fœsh_Fun˘i⁄NŸSuµ‹ãd
;

224  
rRëVÆ
;

225 
	}
}

256 
Rëu∫Ty≥
 
	$FœshBlockEø£
–
uBlockTy≥
 
ublBlockNr
) {

257 
Rëu∫Ty≥
 
rRëVÆ
;

258 
uCPUBusTy≥
 
ucSètus
;

261 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

262  
Fœsh_BlockNrInvÆid
;

265 
	`FœshWrôe
–
ANY_ADDR
, 0x0050 );

269 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0020) );

270 
	`FœshWrôe
–
BlockOff£t
[
ublBlockNr
], 
	`CMD
(0x00D0) );

273 
	`FœshTimeOut
(0);

275 
ucSètus
 = 
	`FœshRód
–
ANY_ADDR
 );

276 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

277 
	`FœshRe£t
();

278  
Fœsh_O≥øti⁄TimeOut
;

280 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

284 if–
ucSètus
 & 
	`CMD
(0x002A) ) {

285 i‡–
ucSètus
 & 
	`CMD
(0x0008) )

286 
rRëVÆ
 = 
Fœsh_VµInvÆid
;

287 i‡–
ucSètus
 & 
	`CMD
(0x0002) )

288 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘ed
;

290 
rRëVÆ
 = 
Fœsh_BlockEø£Faûed
;

291 
	`FœshWrôe
–
ANY_ADDR
 , 
	`CMD
(0x0050) );

294 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

297 
	`FœshRe£t
();

300  
rRëVÆ
;

301 
	}
}

324 
Rëu∫Ty≥
 
	$FœshBlockLockDown
(
uBlockTy≥
 
ublBlockNr
) {

325 
Rëu∫Ty≥
 
rRëVÆ
;

328 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

329  
Fœsh_BlockNrInvÆid
;

332 
	`FœshWrôe
(
ANY_ADDR
, 
	`CMD
(0x0060));

333 
	`FœshWrôe
(
BlockOff£t
[
ublBlockNr
], 
	`CMD
(0x002F));

336 
rRëVÆ
 = 
	`FœshCheckBlockLockDownSètus
–
ublBlockNr
 );

337 i‡–(
rRëVÆ
 !
Fœsh_BlockPrŸe˘i⁄Un˛ór
Ë&& (
eiEº‹Info
.
•rRëVÆ
 =
FœshS≥c_BlockLockedDown
) )

338  
Fœsh_Suc˚ss
;

340 
eiEº‹Info
.
•rRëVÆ
 = 
FœshS≥c_BlockLockDownFaûed
;

341  
Fœsh_S≥cificEº‹
;

343 
	}
}

367 
Rëu∫Ty≥
 
	$FœshBlockPrŸe˘
–
uBlockTy≥
 
ublBlockNr
 ) {

369 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

370  
Fœsh_BlockNrInvÆid
;

373 
	`FœshWrôe
–
ANY_ADDR
 , 
	`CMD
(0x0060) );

374 
	`FœshWrôe
–
BlockOff£t
[
ublBlockNr
], 
	`CMD
(0x0001) );

378 i‡–
	`FœshCheckBlockPrŸe˘i⁄
(
ublBlockNr
Ë!
Fœsh_BlockPrŸe˘ed
 )

379  
Fœsh_BlockPrŸe˘Faûed
;

381  
Fœsh_Suc˚ss
;

382 
	}
}

406 
Rëu∫Ty≥
 
	$FœshBlockU≈rŸe˘
–
uBlockTy≥
 
ublBlockNr
 ) {

408 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

409  
Fœsh_BlockNrInvÆid
;

412 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0060) );

413 
	`FœshWrôe
–
BlockOff£t
[
ublBlockNr
], 
	`CMD
(0x00D0) );

417 i‡–
	`FœshCheckBlockPrŸe˘i⁄
(
ublBlockNr
Ë!
Fœsh_BlockU≈rŸe˘ed
 )

418  
Fœsh_BlockU≈rŸe˘Faûed
;

420  
Fœsh_Suc˚ss
;

421 
	}
}

447 
Rëu∫Ty≥
 
	$FœshCheckBlockLockDownSètus
–
uBlockTy≥
 
ublBlockNr
 ) {

448 
uCPUBusTy≥
 
ucPrŸSètus
;

451 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

452  
Fœsh_BlockNrInvÆid
;

455 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0090) );

458 
ucPrŸSètus
 = 
	`FœshRód
–
BlockOff£t
[
ublBlockNr
] + 0x00000002 );

461 
	`FœshRe£t
();

464 i‡–(
ucPrŸSètus
 =
	`CMD
(2)) || (ucProtStatus == CMD(3)) ) {

465 
eiEº‹Info
.
•rRëVÆ
 = 
FœshS≥c_BlockLockedDown
;

466  
Fœsh_S≥cificEº‹
;

467 } i‡–(
ucPrŸSètus
 =
	`CMD
(0)) || (ucProtStatus == CMD(1)) ) {

468 
eiEº‹Info
.
•rRëVÆ
 = 
FœshS≥c_BlockU∆ockedDown
;

469  
Fœsh_S≥cificEº‹
;

471  
Fœsh_BlockPrŸe˘i⁄Un˛ór
;

472 
	}
}

496 
Rëu∫Ty≥
 
	$FœshCheckBlockPrŸe˘i⁄
–
uBlockTy≥
 
ublBlockNr
 ) {

497 
Rëu∫Ty≥
 
rRëVÆ
;

498 
uCPUBusTy≥
 
ucPrŸSètus
;

501 i‡–
ublBlockNr
 >
NUM_BLOCKS
 )

502  
Fœsh_BlockNrInvÆid
;

505 
	`FœshWrôe
–
ANY_ADDR
 , 
	`CMD
(0x0090) );

508 
ucPrŸSètus
 = 
	`FœshRód
–
BlockOff£t
[
ublBlockNr
] + 0x00000002 );

510 i‡–(
ucPrŸSètus
 =0Ë|| (ucPrŸSètu†=
	`CMD
(2)) )

511 
rRëVÆ
 = 
Fœsh_BlockU≈rŸe˘ed
;

512 i‡–(
ucPrŸSètus
 =
	`CMD
(1)) || (ucProtStatus == CMD(3)) )

513 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘ed
;

515 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘i⁄Un˛ór
;

518 
	`FœshRe£t
();

520  
rRëVÆ
;

521 
	}
}

540 
Rëu∫Ty≥
 
	$FœshCheckCom∑tibûôy
( ) {

541 
Rëu∫Ty≥
 
rRëVÆ
, 
rCheck1
, 
rCheck2
;

542 
uCPUBusTy≥
 
ucDevi˚Id
, 
ucM™uÁ˘uªrCode
;

544 
rRëVÆ
 = 
Fœsh_Wr⁄gTy≥
;

547 
rCheck1
 = 
	`FœshRódDevi˚Id
–&
ucDevi˚Id
 );

550 
rCheck2
 = 
	`FœshRódM™uÁ˘uªrCode
–&
ucM™uÁ˘uªrCode
 );

553 i‡–(
rCheck1
 =
Fœsh_Suc˚ss
Ë&& (
rCheck2
 == Flash_Success) &&

554 (
ucDevi˚Id
 =
EXPECTED_DEVICE
Ë&& (
ucM™uÁ˘uªrCode
 =
MANUFACTURER_ST
) )

555 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

556  
rRëVÆ
;

557 
	}
}

583 
Rëu∫Ty≥
 
	$FœshChùEø£
–
Rëu∫Ty≥
 *
ΩResu…s
 ) {

584 
Rëu∫Ty≥
 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

585 
Rëu∫Ty≥
 
rEº‹
;

586 
uBlockTy≥
 
ublCurBlock
;

588  
ublCurBlock
 = 0; ublCurBlock < 
NUM_BLOCKS
; ublCurBlock++ ) {

590 
rEº‹
 = 
	`FœshBlockEø£
–
ublCurBlock
 );

592 i‡–
rEº‹
 !
Fœsh_Suc˚ss
 )

593 
rRëVÆ
 = 
Fœsh_ChùEø£Faûed
;

596 if–
ΩResu…s
 !
NULL
 )

597 
ΩResu…s
[
ublCurBlock
] = 
rEº‹
;

600 if–
rEº‹
 =
Fœsh_VµInvÆid
 ) {

601 if–
ΩResu…s
 !
NULL
 )

602  ++
ublCurBlock
 < 
NUM_BLOCKS
 )

603 
ΩResu…s
[
ublCurBlock
] = 
rEº‹
;

609  
rRëVÆ
;

610 
	}
}

630 
Rëu∫Ty≥
 
	$FœshChùU≈rŸe˘
(
Rëu∫Ty≥
 *
ΩResu…s
) {

631 
Rëu∫Ty≥
 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

632 
Rëu∫Ty≥
 
rEº‹
;

633 
uBlockTy≥
 
ublCurBlock
;

635 
ublCurBlock
=0;ublCurBlock < 
NUM_BLOCKS
;ublCurBlock++) {

637 
rEº‹
 = 
	`FœshBlockU≈rŸe˘
(
ublCurBlock
);

639 i‡–
rEº‹
 !
Fœsh_Suc˚ss
 )

640 
rRëVÆ
 = 
Fœsh_ChùU≈rŸe˘Faûed
;

643 i‡(
ΩResu…s
 !
NULL
)

644 
ΩResu…s
[
ublCurBlock
] = 
rEº‹
;

648  
rRëVÆ
;

649 
	}
}

663 
	$FœshCÀ¨SètusRegi°î
( ) {

665 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

666 
	}
}

706 
Rëu∫Ty≥
 
	$FœshDoubÀProgøm
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ1
, uCPUBusTy≥ 
ucVÆ2
 ) {

707 
Rëu∫Ty≥
 
rRëVÆ
;

708 
uCPUBusTy≥
 
ucSètus
;

709 
udw‹d
 
udFú°AddrOff
;

712 if–
udAddrOff
 >
FLASH_SIZE
 )

713  
Fœsh_AddªssInvÆid
;

715 
udFú°AddrOff
 = 
udAddrOff
 & (~0x1);

717 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

721 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0030) );

722 
	`FœshWrôe
–
udFú°AddrOff
, 
ucVÆ1
 );

723 
	`FœshWrôe
–
udFú°AddrOff
 + 1, 
ucVÆ2
 );

726 
	`FœshTimeOut
(0);

728 
ucSètus
 = 
	`FœshRód
(
udFú°AddrOff
);

729 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

730 
	`FœshRe£t
();

731  
Fœsh_O≥øti⁄TimeOut
;

733 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

737 if–
ucSètus
 & (0x001A) ) {

738 i‡–
ucSètus
 & 
	`CMD
(0x0008) )

739 
rRëVÆ
 = 
Fœsh_VµInvÆid
;

740 i‡–
ucSètus
 & 
	`CMD
(0x0002) )

741 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘ed
;

743 
rRëVÆ
 = 
Fœsh_ProgømFaûed
;

744 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

747 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

750 
	`FœshRe£t
();

753  
rRëVÆ
;

754 
	}
}

760 #ifde‡
VERBOSE


770 
byã
 *
	$FœshEº‹Så
–
Rëu∫Ty≥
 
rEºNum
 ) {

771 
rEºNum
) {

772 
Fœsh_AddªssInvÆid
:

774 
Fœsh_BlockEø£Faûed
:

776 
Fœsh_BlockNrInvÆid
:

778 
Fœsh_BlockPrŸe˘ed
:

780 
Fœsh_BlockPrŸe˘Faûed
:

782 
Fœsh_BlockPrŸe˘i⁄Un˛ór
:

784 
Fœsh_BlockU≈rŸe˘ed
:

786 
Fœsh_BlockU≈rŸe˘Faûed
:

788 
Fœsh_CfiFaûed
:

790 
Fœsh_ChùEø£Faûed
:

792 
Fœsh_ChùU≈rŸe˘Faûed
:

794 
Fœsh_Fun˘i⁄NŸSuµ‹ãd
:

796 
Fœsh_NoInf‹m©i⁄AvaûabÀ
:

798 
Fœsh_O≥øti⁄Ongoög
:

800 
Fœsh_O≥øti⁄TimeOut
:

802 
Fœsh_ProgømFaûed
:

804 
Fœsh_Re•⁄£Un˛ór
:

806 
Fœsh_S≥cificEº‹
:

808 
eiEº‹Info
.
•rRëVÆ
) {

809 
FœshS≥c_BlockLockDownFaûed
:

811 
FœshS≥c_BlockLockedDown
:

813 
FœshS≥c_BlockU∆ockedDown
:

815 
FœshS≥c_PrŸe˘i⁄Regi°îLocked
:

821 
Fœsh_Suc˚ss
:

823 
Fœsh_VµInvÆid
:

825 
Fœsh_Wr⁄gTy≥
:

831 
	}
}

879 
Rëu∫Ty≥
 
	$FœshProgøm
(
udw‹d
 
udMode
, udw‹d 
udAddrOff
, udw‹d 
udNrOfEÀmítsInAºay
, *
pAºay
 ) {

880 
Rëu∫Ty≥
 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

881 
uCPUBusTy≥
 *
u˝AºayPoöãr
;

882 
udw‹d
 
udLa°AddrOff
;

883 
udw‹d
 
udOff£t
;

884 
uCPUBusTy≥
 
ucSètus
;

886 i‡(
udMode
 > 1)

887  
Fœsh_Fun˘i⁄NŸSuµ‹ãd
;

890 i‡–(
udAddrOff
 >
FLASH_SIZE
Ë|| (
udNrOfEÀmítsInAºay
 > (FLASH_SIZE - udAddrOff)) ) {

891 
eiEº‹Info
.
udGíîÆInfo
[0] = 
udAddrOff
;

892  
Fœsh_AddªssInvÆid
;

895 
udOff£t
 = 
udAddrOff
;

896 
udLa°AddrOff
 = 
udAddrOff
 + 
udNrOfEÀmítsInAºay
 - 1;

898 
u˝AºayPoöãr
 = (
uCPUBusTy≥
 *Ë
pAºay
;

901  (
udOff£t
 <
udLa°AddrOff
Ë&& (
rRëVÆ
 =
Fœsh_Suc˚ss
) ) {

902 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

905 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0040) );

906 
	`FœshWrôe
–
udOff£t
, *
u˝AºayPoöãr
 );

909 
	`FœshTimeOut
(0);

911 
ucSètus
 = 
	`FœshRód
(
udOff£t
);

912 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

913 
	`FœshRe£t
();

914  
Fœsh_O≥øti⁄TimeOut
;

916 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

921 if–
ucSètus
 & (0x001A) ) {

922 i‡–
ucSètus
 & 
	`CMD
(0x0008) )

923 
rRëVÆ
 = 
Fœsh_VµInvÆid
;

924 i‡–
ucSètus
 & 
	`CMD
(0x0002) )

925 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘ed
;

927 
rRëVÆ
 = 
Fœsh_ProgømFaûed
;

928 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

930 
eiEº‹Info
.
udGíîÆInfo
[0] = 
udOff£t
;

932 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

934 i‡(
udMode
 == 0)

935 
u˝AºayPoöãr
++;

936 
udOff£t
++;

940 
	`FœshRe£t
();

943  
rRëVÆ
;

944 
	}
}

975 
Rëu∫Ty≥
 
	$FœshPrŸe˘i⁄Regi°îProgøm
–
udw‹d
 
udPrŸe˘i⁄Regi°îAddrOff
,

976 
uCPUBusTy≥
 
ucPrŸe˘i⁄Regi°îVÆ
 ) {

978 
Rëu∫Ty≥
 
rRëVÆ
;

979 
uCPUBusTy≥
 
ucSètus
;

982 i‡–(
udPrŸe˘i⁄Regi°îAddrOff
 < 0x80) || (udProtectionRegisterAddrOff > 0x8C) )

983  
Fœsh_AddªssInvÆid
;

986 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x00C0) );

989 
	`FœshWrôe
–
udPrŸe˘i⁄Regi°îAddrOff
, 
ucPrŸe˘i⁄Regi°îVÆ
 );

992 
	`FœshTimeOut
(0);

994 
ucSètus
 = 
	`FœshRód
–
ANY_ADDR
 );

995 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

996 
	`FœshRe£t
( );

997  
Fœsh_O≥øti⁄TimeOut
;

999 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

1003 if–
ucSètus
 & (0x001A) ) {

1004 i‡–
ucSètus
 & 
	`CMD
(0x0008) )

1005 
rRëVÆ
 = 
Fœsh_VµInvÆid
;

1006 i‡–
ucSètus
 & 
	`CMD
(0x0002) ) {

1007 
rRëVÆ
 = 
Fœsh_S≥cificEº‹
;

1008 
eiEº‹Info
.
•rRëVÆ
 = 
FœshS≥c_PrŸe˘i⁄Regi°îLocked
;

1010 
rRëVÆ
 = 
Fœsh_ProgømFaûed
;

1011 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

1013 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

1016 
	`FœshRe£t
( );

1019  
rRëVÆ
;

1020 
	}
}

1041 
Rëu∫Ty≥
 
	$FœshRódCfi
–
uw‹d
 
uwCfiFunc
, 
uCPUBusTy≥
 *
u˝CfiVÆue
 ) {

1042 
Rëu∫Ty≥
 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

1043 
udw‹d
 
udCfiAddr
;

1046 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0098) );

1049 i‡–(
	`FœshRód
–0x00000010 ) !
	`CMD
(0x0051) ) ||

1050 (
	`FœshRód
–0x00000011 ) !
	`CMD
(0x0052) ) ||

1051 (
	`FœshRód
–0x00000012 ) !
	`CMD
(0x0059) ) )

1052 
rRëVÆ
 = 
Fœsh_CfiFaûed
;

1055 
udCfiAddr
 = (
udw‹d
)
uwCfiFunc
;

1056 *
u˝CfiVÆue
 = 
	`FœshRód
–
udCfiAddr
 & 0x000000FF );

1060 
	`FœshRe£t
();

1062  
rRëVÆ
;

1063 
	}
}

1095 
Rëu∫Ty≥
 
	$FœshRódDevi˚Id
(
uCPUBusTy≥
 *
u˝Devi˚Id
) {

1096 
uCPUBusTy≥
 
ucAlgId
;

1099 
	`FœshWrôe
–0x0055, 
	`CMD
(0x0098) );

1102 if–((
	`FœshRód
–0x0010 ) & 
	`CMD
(0x00FF)) != CMD(0x0051)) ||

1103 ((
	`FœshRód
–0x0011 ) & 
	`CMD
(0x00FF)) != CMD(0x0052)) ||

1104 ((
	`FœshRód
–0x0012 ) & 
	`CMD
(0x00FF)) != CMD(0x0059)) )

1105  
Fœsh_CfiFaûed
;

1108 
ucAlgId
 = 
	`FœshRód
( 0x0013 );

1110 i‡–
ucAlgId
 =
	`CMD
(0x0003) ) {

1112 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00FF) );

1115 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x0090) );

1118 *
u˝Devi˚Id
 = 
	`FœshRód
–
BlockOff£t
[0] + 0x0001 );

1121 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00FF) );

1122 } i‡–
ucAlgId
 =
	`CMD
(0x0002) ) {

1124 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00F0) );

1127 
	`FœshWrôe
–0x0555, 
	`CMD
(0x00AA) );

1128 
	`FœshWrôe
–0x02AA, 
	`CMD
(0x0055) );

1129 
	`FœshWrôe
–0x0555, 
	`CMD
(0x0090) );

1132 *
u˝Devi˚Id
 = 
	`FœshRód
 ( 0x0001 );

1135 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00F0) );

1137  
Fœsh_Wr⁄gTy≥
;

1141  
	`FœshRe•⁄£I¡egrôyCheck
(
u˝Devi˚Id
);

1142 
	}
}

1170 
Rëu∫Ty≥
 
	$FœshRódM™uÁ˘uªrCode
(
uCPUBusTy≥
 *
u˝M™uÁ˘uªrCode
) {

1171 
uCPUBusTy≥
 
ucAlgId
;

1174 
	`FœshWrôe
–0x0055, 
	`CMD
(0x0098) );

1177 if–((
	`FœshRód
–0x0010 ) & 
	`CMD
(0x00FF)) != CMD(0x0051)) ||

1178 ((
	`FœshRód
–0x0011 ) & 
	`CMD
(0x00FF)) != CMD(0x0052)) ||

1179 ((
	`FœshRód
–0x0012 ) & 
	`CMD
(0x00FF)) != CMD(0x0059)) )

1180  
Fœsh_CfiFaûed
;

1183 
ucAlgId
 = 
	`FœshRód
( 0x0013 );

1185 i‡–
ucAlgId
 =
	`CMD
(0x0003) ) {

1187 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00FF) );

1190 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x0090) );

1193 *
u˝M™uÁ˘uªrCode
 = 
	`FœshRód
–
BlockOff£t
[0] + 0x00 );

1196 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00FF) );

1197 } i‡–
ucAlgId
 =
	`CMD
(0x0002) ) {

1199 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00F0) );

1202 
	`FœshWrôe
–0x0555, 
	`CMD
(0x00AA) );

1203 
	`FœshWrôe
–0x02AA, 
	`CMD
(0x0055) );

1204 
	`FœshWrôe
–0x0555, 
	`CMD
(0x0090) );

1207 *
u˝M™uÁ˘uªrCode
 = 
	`FœshRód
 ( 0x0000 );

1210 
	`FœshWrôe
–
BlockOff£t
[0], 
	`CMD
(0x00F0) );

1212  
Fœsh_Wr⁄gTy≥
;

1216  
	`FœshRe•⁄£I¡egrôyCheck
(
u˝M™uÁ˘uªrCode
);

1217 
	}
}

1240 
Rëu∫Ty≥
 
	$FœshRódPrŸe˘i⁄Regi°î
–
udw‹d
 
udPrŸe˘i⁄Regi°îAddrOff
, 
uCPUBusTy≥
 *
u˝VÆue
 ) {

1243 i‡–(
udPrŸe˘i⁄Regi°îAddrOff
 < 0x80) || (udProtectionRegisterAddrOff > 0x8C) )

1244  
Fœsh_AddªssInvÆid
;

1247 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0090) );

1250 *
u˝VÆue
 = 
	`FœshRód
–
udPrŸe˘i⁄Regi°îAddrOff
 );

1253 
	`FœshRe£t
();

1255  
Fœsh_Suc˚ss
;

1256 
	}
}

1273 
uCPUBusTy≥
 
	$FœshRódSètusRegi°î
() {

1274 
uCPUBusTy≥
 
ucSètus
;

1277 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0070) );

1280 
ucSètus
 = 
	`FœshRód
–
ANY_ADDR
 );

1283 
	`FœshRe£t
( );

1286  
ucSètus
;

1287 
	}
}

1306 
Rëu∫Ty≥
 
	$FœshRe£t
( ) {

1308 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x00FF) );

1311  
Fœsh_Suc˚ss
;

1312 
	}
}

1350 
Rëu∫Ty≥
 
	$FœshRe•⁄£I¡egrôyCheck
(
uCPUBusTy≥
 *
u˝FœshRe•⁄£
) {

1351 
ubyã
 
a
;

1353 
uCPUBusTy≥
 
ucFœshRe•⁄£
;

1354 
ubyã
 
ubByãs
[(
uCPUBusTy≥
)];

1355 } 
FuŒRe•⁄£
;

1358 
uCPUBusTy≥
 
ucSögÀRe•⁄£
;

1359 
ubyã
 
ubByãs
[
FLASH_BIT_DEPTH
/8];

1360 } 
SögÀRe•⁄£
;

1362 
SögÀRe•⁄£
.
ucSögÀRe•⁄£
 = 0;

1363 
FuŒRe•⁄£
.
ucFœshRe•⁄£
 = *
u˝FœshRe•⁄£
;

1366 
	`mem˝y
(
SögÀRe•⁄£
.
ubByãs
, 
FuŒRe•⁄£
.ubByãs, 
FLASH_BIT_DEPTH
/8);

1369 
a
 = 0;á < (
uCPUBusTy≥
);á +
FLASH_BIT_DEPTH
/8) {

1370 i‡(
	`memcmp
 (&
FuŒRe•⁄£
.
ubByãs
[
a
], 
SögÀRe•⁄£
.ubByãs, 
FLASH_BIT_DEPTH
/8) != 0)

1372  
Fœsh_Re•⁄£Un˛ór
;

1376 *
u˝FœshRe•⁄£
 = 
SögÀRe•⁄£
.
ucSögÀRe•⁄£
;

1378  
Fœsh_Suc˚ss
;

1379 
	}
}

1396 
Rëu∫Ty≥
 
	$FœshResume
( ) {

1397 
uCPUBusTy≥
 
ucSètus
;

1400 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0070) );

1401 
ucSètus
 = 
	`FœshRód
–
ANY_ADDR
 );

1404 i‡((
ucSètus
 & 
	`CMD
(0x0044)) != 0)

1405 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x00D0) );

1406  
Fœsh_Suc˚ss
;

1407 
	}
}

1434 
Rëu∫Ty≥
 
	$FœshSögÀProgøm
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
 ) {

1435 
Rëu∫Ty≥
 
rRëVÆ
;

1436 
uCPUBusTy≥
 
ucSètus
;

1439 if–
udAddrOff
 >
FLASH_SIZE
 )

1440  
Fœsh_AddªssInvÆid
;

1442 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

1446 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0040) );

1447 
	`FœshWrôe
–
udAddrOff
, 
ucVÆ
 );

1450 
	`FœshTimeOut
(0);

1452 
ucSètus
 = 
	`FœshRód
(
udAddrOff
);

1453 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

1454 
	`FœshRe£t
();

1455  
Fœsh_O≥øti⁄TimeOut
;

1457 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

1460 if–
ucSètus
 & (0x001A) ) {

1461 i‡–
ucSètus
 & 
	`CMD
(0x0008) )

1462 
rRëVÆ
 = 
Fœsh_VµInvÆid
;

1463 i‡–
ucSètus
 & 
	`CMD
(0x0002) )

1464 
rRëVÆ
 = 
Fœsh_BlockPrŸe˘ed
;

1466 
rRëVÆ
 = 
Fœsh_ProgømFaûed
;

1467 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

1469 
rRëVÆ
 = 
Fœsh_Suc˚ss
;

1472 
	`FœshRe£t
();

1475  
rRëVÆ
;

1476 
	}
}

1496 
Rëu∫Ty≥
 
	$FœshSu•íd
( ) {

1497 
uCPUBusTy≥
 
ucSètus
;

1500 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x0050) );

1504 
	`FœshWrôe
–
ANY_ADDR
, 
	`CMD
(0x00B0) );

1506 
	`FœshWrôe
(
ANY_ADDR
, 
	`CMD
(0x0070));

1509 
	`FœshTimeOut
(0);

1511 
ucSètus
 = 
	`FœshRód
(
ANY_ADDR
);

1512 i‡(
	`FœshTimeOut
(5Ë=
Fœsh_O≥øti⁄TimeOut
) {

1513 
	`FœshRe£t
();

1514  
Fœsh_O≥øti⁄TimeOut
;

1516 }  (
ucSètus
 & 
	`CMD
(0x0080)) != CMD(0x0080) );

1519 i‡–(
ucSètus
 & 
	`CMD
(0x0044)) != 0 )

1520  
Fœsh_Suc˚ss
;

1522  
Fœsh_NoO≥øti⁄ToSu•íd
;

1525 
	`FœshRe£t
();

1526 
	}
}

1549 #ifde‡
TIME_H_EXISTS


1555 
Rëu∫Ty≥
 
	$FœshTimeOut
(
udw‹d
 
udSec⁄ds
){

1556 
˛ock_t
 
˛kRe£t
,
˛kCou¡
;

1558 i‡(
udSec⁄ds
 == 0) {

1559 
˛kRe£t
=
	`˛ock
();

1562 
˛kCou¡
 = 
	`˛ock
(Ë- 
˛kRe£t
;

1564 i‡(
˛kCou¡
<(
CLOCKS_PER_SEC
*(
˛ock_t
)
udSec⁄ds
))

1565  
Fœsh_O≥øti⁄Ongoög
;

1567  
Fœsh_O≥øti⁄TimeOut
;

1568 
	}
}

1578 
Rëu∫Ty≥
 
	$FœshTimeOut
(
udw‹d
 
udSec⁄ds
) {

1580 
udw‹d
 
udCou¡î
;

1582 i‡(
udSec⁄ds
 == 0) {

1583 
udCou¡î
 = 0;

1586 i‡(
udCou¡î
 =(
udSec⁄ds
 * 
COUNT_FOR_A_SECOND
)) {

1587  
Fœsh_O≥øti⁄TimeOut
;

1589 
udCou¡î
++;

1590  
Fœsh_O≥øti⁄Ongoög
;

1593 
	}
}

1601 
Rëu∫Ty≥
 
	$MyFœshBlockEø£
(
uBlockTy≥
 
blockNumbî
)

1603 
	`FœshWrôe
(
ANY_ADDR
, 0x20);

1604 
	`FœshWrôe
(
BlockOff£t
[
blockNumbî
], 0xD0);

1606 
uCPUBusTy≥
 
°©us
;

1608 
°©us
 = 
	`FœshRód
(
ANY_ADDR
);

1609 } (
°©us
 & 0x80) != 0x80);

1611 
	`FœshWrôe
(
ANY_ADDR
, 0x50);

1613 
°©us
 &= ~0x80;

1614 i‡((
°©us
 & 0x08) != 0)

1615  
Fœsh_VµInvÆid
;

1616 i‡((
°©us
 & 0x30) != 0)

1617  
Fœsh_BlockEø£Faûed
;

1618 i‡((
°©us
 & 1) != 0)

1619  
Fœsh_BlockPrŸe˘ed
;

1620  
Fœsh_Suc˚ss
;

1621 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\c2414ReadAndWrite.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~"c2414FœshRódAndWrôe.h
"

35 
uCPUBusTy≥
 
	$FœshRód
–
udw‹d
 
udAddrOff
 ) {

37  
BASE_ADDR
[
udAddrOff
];

38 
	}
}

49 
	$FœshWrôe
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
 ) {

51 
BASE_ADDR
[
udAddrOff
] = 
ucVÆ
;

52 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\HomeAutomation\LightScheduler.c

9 
	~"LightScheduÀr.h
"

10 
	~"LightC⁄åﬁÀr.h
"

15 
	mUNUSED
 = -1,

16 
	mTURNOFF
, 
	mTURNON
,

20 
	mid
;

21 
Day
 
	mday
;

22 
	mmöuã
;

23 
	mevít
;

25 } 
	tScheduÀdLightEvít
;

27 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

29 
	$LightScheduÀr_Cª©e
()

31 
scheduÀdEvít
.
id
 = 
UNUSED
;

33 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60,

34 
LightScheduÀr_Wakeup
);

35 
	}
}

41 
	mUNUSED
 = -1,

42 
	mTURNOFF
, 
	mTURNON
,

43 
	mMAX_EVENTS
 = 128

47 
	mid
;

48 
Day
 
	mday
;

49 
	mmöuã
;

50 
	mevít
;

52 } 
	tScheduÀdLightEvít
;

54 
ScheduÀdLightEvít
 
	gscheduÀdEvíts
[
MAX_EVENTS
];

60 
	$LightScheduÀr_Cª©e
()

62 
i
;

64 
i
 = 0; i < 
MAX_EVENTS
; i++)

65 
scheduÀdEvíts
[
i
].
id
 = 
UNUSED
;

67 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60,

68 
LightScheduÀr_Wakeup
);

69 
	}
}

73 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

74 
ScheduÀdLightEvít
 
	gscheduÀdEvíts
[
MAX_EVENTS
];

76 
	$LightScheduÀr_Cª©e
()

78 
i
;

80 
scheduÀdEvít
.
id
 = 
UNUSED
;

82 
i
 = 0; i < 
MAX_EVENTS
; i++)

83 
scheduÀdEvíts
[
i
].
id
 = 
UNUSED
;

85 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60,

86 
LightScheduÀr_Wakeup
);

87 
	}
}

91 
	$LightScheduÀr_De°roy
()

93 
	`TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(60,

94 
LightScheduÀr_Wakeup
);

95 
	}
}

99 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

101 
i
;

103 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

104  
LS_ID_OUT_OF_BOUNDS
;

106 
i
 = 0; i < 
MAX_EVENTS
; i++)

108 i‡(
scheduÀdEvíts
[
i
].
id
 =
UNUSED
)

110 
scheduÀdEvíts
[
i
].
day
 = day;

111 
scheduÀdEvíts
[
i
].
möuã
 = minute;

112 
scheduÀdEvíts
[
i
].
evít
 =Évent;

113 
scheduÀdEvíts
[
i
].
id
 = id;

114  
LS_OK
;

117  
LS_TOO_MANY_EVENTS
;

118 
	}
}

120 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

122  
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
);

123 
	}
}

125 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
)

127  
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
);

128 
	}
}

134 
	$LightScheduÀr_De°roy
()

136 
	}
}

140 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

142 
i
;

144 
i
 = 0; i < 
MAX_EVENTS
; i++)

146 i‡(
scheduÀdEvíts
[
i
].
id
 =
UNUSED
)

148 
scheduÀdEvíts
[
i
].
day
 = day;

149 
scheduÀdEvíts
[
i
].
möuã
 = minute;

150 
scheduÀdEvíts
[
i
].
evít
 =Évent;

151 
scheduÀdEvíts
[
i
].
id
 = id;

156 i‡(
scheduÀdEvít
.
id
 =
UNUSED
)

158 
scheduÀdEvít
.
day
 = day;

159 
scheduÀdEvít
.
möuã
 = minute;

160 
scheduÀdEvít
.
evít
 =Évent;

161 
scheduÀdEvít
.
id
 = id;

163 
	}
}

169 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

171 i‡(
scheduÀdEvít
.
id
 =
UNUSED
)

173 
scheduÀdEvít
.
day
 = day;

174 
scheduÀdEvít
.
möuã
 = minute;

175 
scheduÀdEvít
.
evít
 =Évent;

176 
scheduÀdEvít
.
id
 = id;

178 
	}
}

183 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
)

185 
i
;

187 
i
 = 0; i < 
MAX_EVENTS
; i++)

189 i‡(
scheduÀdEvíts
[
i
].
id
 =
UNUSED
)

191 
scheduÀdEvíts
[
i
].
day
 = day;

192 
scheduÀdEvíts
[
i
].
möuã
 = minute;

193 
scheduÀdEvíts
[
i
].
evít
 =Évent;

194 
scheduÀdEvíts
[
i
].
id
 = id;

198 
	}
}

202 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

204 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
);

205 
	}
}

207 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
)

209 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
);

210 
	}
}

215 
	$D€sLightRe•⁄dToday
(
Time
 * 
time
, 
ªa˘i⁄Day
)

217 
today
 = 
time
->
dayOfWìk
;

219 i‡(
ªa˘i⁄Day
 =
EVERYDAY
)

221 i‡(
ªa˘i⁄Day
 =
today
)

223 i‡(
ªa˘i⁄Day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

225 i‡(
ªa˘i⁄Day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

228 
	}
}

232 
	$›î©eLight
(
ScheduÀdLightEvít
 * 
lightEvít
)

234 i‡(
lightEvít
->
evít
 =
TURNON
)

235 
	`LightC⁄åﬁÀr_On
(
lightEvít
->
id
);

236 i‡(
lightEvít
->
evít
 =
TURNOFF
)

237 
	`LightC⁄åﬁÀr_Off
(
lightEvít
->
id
);

239 
	}
}

243 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
lightEvít
)

245 i‡(
lightEvít
->
id
 =
UNUSED
)

247 i‡(!
	`D€sLightRe•⁄dToday
(
time
, 
lightEvít
->
day
))

249 i‡(
time
->
möuãOfDay
 !
lightEvít
->
möuã
)

252 
	`›î©eLight
(
lightEvít
);

253 
	}
}

256 
	$LightScheduÀr_Wakeup
()

258 
Time
 
time
;

259 
	`TimeSîvi˚_GëTime
(&
time
);

260 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

261 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvít
);

262 
	}
}

267 
	$LightScheduÀr_Wakeup
()

269 
i
;

270 
Time
 
time
;

271 
	`TimeSîvi˚_GëTime
(&
time
);

273 
i
 = 0; i < 
MAX_EVENTS
; i++)

275 i‡(
scheduÀdEvíts
[
i
].
id
 !
UNUSED
)

276 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvíts
[
i
]);

279 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

280 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvít
);

281 
	}
}

286 
	$LightScheduÀr_Wakeup
()

288 
i
;

290 
Time
 
time
;

291 
	`TimeSîvi˚_GëTime
(&
time
);

293 
i
 = 0; i < 
MAX_EVENTS
; i++)

295 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvíts
[
i
]);

297 
	}
}

301 
	$LightScheduÀr_Wakeup
()

303 
i
;

305 
Time
 
time
;

306 
	`TimeSîvi˚_GëTime
(&
time
);

308 
i
 = 0; i < 
MAX_EVENTS
; i++)

310 i‡(
scheduÀdEvíts
[
i
].
id
 !
UNUSED
)

311 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvíts
[
i
]);

313 
	}
}

317 
	$LightScheduÀr_Wakeup
()

319 
i
;

320 
Time
 
time
;

321 
	`TimeSîvi˚_GëTime
(&
time
);

323 
i
 = 0; i < 
MAX_EVENTS
; i++)

325 i‡(
scheduÀdEvíts
[
i
].
id
 !
UNUSED
)

326 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvíts
[
i
]);

329 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

330 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvít
);

331 
	}
}

335 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

337 
i
;

339 
i
 = 0; i < 
MAX_EVENTS
; i++)

341 i‡(
scheduÀdEvíts
[
i
].
id
 == id

342 && 
scheduÀdEvíts
[
i
].
day
 == day

343 && 
scheduÀdEvíts
[
i
].
möuã
 == minute)

345 
scheduÀdEvíts
[
i
].
id
 = 
UNUSED
;

348 
	}
}

352 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

354 i‡(
scheduÀdEvít
.
id
 == id

355 && 
scheduÀdEvít
.
day
 == day

356 && 
scheduÀdEvít
.
möuã
 == minute)

358 
scheduÀdEvít
.
id
 = 
UNUSED
;

360 
	}
}

364 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

367 
	$D€sLightRe•⁄dToday
(
Time
 * 
time
, 
ªa˘i⁄Day
)

369 
today
 = 
time
->
dayOfWìk
;

371 i‡(
ªa˘i⁄Day
 =
EVERYDAY
)

373 i‡(
ªa˘i⁄Day
 =
today
)

375 i‡(
ªa˘i⁄Day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

377 i‡(
ªa˘i⁄Day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

380 
	}
}

384 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
lightEvít
)

386 i‡(!(
time
, 
lightEvít
->
day
))

388 i‡(
time
->
möuãOfDay
 !
lightEvít
->
möuã
)

391 i‡(
lightEvít
->
evít
 =
TURNON
)

392 
	`LightC⁄åﬁÀr_On
(
lightEvít
->
id
);

393 i‡(
lightEvít
->
evít
 =
TURNOFF
)

394 
	`LightC⁄åﬁÀr_Off
(
lightEvít
->
id
);

396 
	}
}

398 
	$LightScheduÀr_Wakeup
()

400 
Time
 
time
;

401 
	`TimeSîvi˚_GëTime
(&
time
);

403 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

404 
	`¥o˚ssEvítsDueNow
(&
time
, &
scheduÀdEvít
);

405 
	}
}

411 
ScheduÀdLightEvít
 
	gscheduÀdEvít
;

413 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

415 i‡(
scheduÀdEvít
.
id
 =
UNUSED
)

417 
scheduÀdEvít
.
day
 = day;

418 
scheduÀdEvít
.
möuã
 = minute;

419 
scheduÀdEvít
.
evít
 = 
TURNON
;

420 
scheduÀdEvít
.
id
 = id;

422 
	}
}

426 
	$LightScheduÀr_Wakeup
()

428 
Time
 
time
;

429 
ScheduÀdLightEvít
 * 
lightEvít
 = &
scheduÀdEvít
;

430 
	`TimeSîvi˚_GëTime
(&
time
);

432 i‡(
scheduÀdEvít
.
id
 !
UNUSED
)

434 i‡(
time
.
möuãOfDay
 !
lightEvít
->
möuã
)

437 i‡(
lightEvít
->
evít
 =
TURNON
)

438 
	`LightC⁄åﬁÀr_On
(
lightEvít
->
id
);

439 i‡(
lightEvít
->
evít
 =
TURNOFF
)

440 
	`LightC⁄åﬁÀr_Off
(
lightEvít
->
id
);

444 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\HomeAutomation\RandomMinute.c

9 
	~"R™domMöuã.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

15 
	gbound
 = 0;

17 
	$R™domMöuã_Cª©e
(
b
)

19 
bound
 = 
b
;

20 
	}
}

23 
	$R™domMöuã_Gë
()

25  
bound
 - 
	`ønd
() % (bound * 2 + 1);

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\IO\Flash.c

9 
	~"Fœsh.h
"

10 
	~"IO.h
"

11 
	~"m28w160e˘.h
"

15 
	$Fœsh_Cª©e
()

17 
	}
}

19 
	$Fœsh_De°roy
()

21 
	}
}

24 
	$Fœsh_Progøm
(
ioAddªss_t
 
addªss
, 
ioD©a_t
 
d©a
)

26 
	`IO_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

27 
	`IO_Wrôe
(
addªss
, 
d©a
);

28 
	`IO_Ród
(
SètusRegi°î
);

29 
	`IO_Ród
(
addªss
);

30  
FœshSuc˚ss
;

31 
	}
}

36 
	$Fœsh_Progøm
(
ioAddªss_t
 
addªss
, 
ioD©a_t
 
d©a
)

38 
ioD©a_t
 
°©us
 = 0;

40 
	`IO_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

41 
	`IO_Wrôe
(
addªss
, 
d©a
);

43 (
°©us
 & 
RódyBô
) == 0)

44 
°©us
 = 
	`IO_Ród
(
SètusRegi°î
);

46 
	`IO_Ród
(
addªss
);

48  
FœshSuc˚ss
;

49 
	}
}

54 
ölöe
 
	$¥ogømEº‹
(
°©us
)

56 
	`IO_Wrôe
(
Comm™dRegi°î
, 
Re£t
);

58 i‡(
°©us
 & 
VµEº‹Bô
)

59  
FœshVµEº‹
;

60 i‡(
°©us
 & 
ProgømEº‹Bô
)

61  
FœshProgømEº‹
;

62 i‡(
°©us
 & 
BlockPrŸe˘i⁄Eº‹Bô
)

63  
FœshProgømPrŸe˘edBlockEº‹
;

65  
FœshUnknownProgømEº‹
;

66 
	}
}

70 
	$Fœsh_Progøm
(
ioAddªss_t
 
off£t
, 
ioD©a_t
 
d©a
)

72 
ioD©a_t
 
°©us
 = 0;

74 
	`IO_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

75 
	`IO_Wrôe
(
off£t
, 
d©a
);

77 (
°©us
 & 
RódyBô
) == 0)

78 
°©us
 = 
	`IO_Ród
(
SètusRegi°î
);

80 i‡(
°©us
 !
RódyBô
)

81  
	`¥ogømEº‹
(
°©us
);

83 i‡(
d©a
 !
	`IO_Ród
(
off£t
))

84  
FœshRódBackEº‹
;

86  
FœshSuc˚ss
;

87 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\LedDriver\LedDriver.c

9 
	~"LedDrivî.h
"

10 
	~"Ru¡imeEº‹.h
"

14 íum {
	mALL_LEDS_ON
 = ~0, 
	mALL_LEDS_OFF
 = ~
ALL_LEDS_ON
};

16 
uöt16_t
 * 
	gÀdsAddªss
;

17 
uöt16_t
 
	gÀdsImage
;

19 
	$LedDrivî_Cª©e
(
uöt16_t
 * 
addªss
)

21 
ÀdsAddªss
 = 
addªss
;

22 
ÀdsImage
 = 
ALL_LEDS_OFF
;

23 *
ÀdsAddªss
 = 
ÀdsImage
;

24 
	}
}

26 
	$LedDrivî_De°roy
()

28 
	}
}

30 íum {
	mFIRST_LED
 = 1, 
	mLAST_LED
 = 16};

32 
BOOL
 
	$IsLedOutOfBounds
(
ÀdNumbî
)

34 i‡((
ÀdNumbî
 < 
FIRST_LED
Ë|| (ÀdNumbî > 
LAST_LED
))

36 
	`RUNTIME_ERROR
("LED Drivî: out-of-bound†LED", 
ÀdNumbî
);

37  
TRUE
;

39  
FALSE
;

40 
	}
}

42 
ölöe
 
uöt16_t
 
	$c⁄vîtLedNumbîToBô
(
ÀdNumbî
)

44  1 << (
ÀdNumbî
 - 1);

45 
	}
}

48 
	$upd©eH¨dw¨e
()

50 *
ÀdsAddªss
 = 
ÀdsImage
;

51 
	}
}

55 
	$£tLedImageBô
(
ÀdNumbî
)

57 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

58 
	}
}

60 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

62 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

65 
	`£tLedImageBô
(
ÀdNumbî
);

66 
	`upd©eH¨dw¨e
();

67 
	}
}

69 
	$˛órLedImageBô
(
ÀdNumbî
)

71 
ÀdsImage
 &~
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

72 
	}
}

74 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

76 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

79 
	`˛órLedImageBô
(
ÀdNumbî
);

80 
	`upd©eH¨dw¨e
();

81 
	}
}

85 
	$LedDrivî_Tu∫AŒOn
()

87 
ÀdsImage
 = 
ALL_LEDS_ON
;

88 
	`upd©eH¨dw¨e
();

89 
	}
}

92 
	$LedDrivî_Tu∫AŒOff
()

94 
ÀdsImage
 = 
ALL_LEDS_OFF
;

95 
	`upd©eH¨dw¨e
();

96 
	}
}

98 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

100 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

101  
FALSE
;

103  0 !(
ÀdsImage
 & 
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

104 
	}
}

106 
BOOL
 
	$LedDrivî_IsOff
(
ÀdNumbî
)

108  ! 
	`LedDrivî_IsOn
(
ÀdNumbî
);

109 
	}
}

118 
BOOL
 
	$LedDrivî_IsOff
(
ÀdNumbî
)

120  
FALSE
;

121 
	}
}

126 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

128  
TRUE
;

130  0 !(
ÀdsImage
 & 
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

131 
	}
}

139 íum {
	mALL_LEDS_ON
 = ~0, 
	mALL_LEDS_OFF
 = ~
ALL_LEDS_ON
};

143 
uöt16_t
 * 
	gÀdsAddªss
;

145 
uöt16_t
 
	gÀdsImage
;

147 
	$LedDrivî_Cª©e
(
uöt16_t
 * 
addªss
)

149 
ÀdsAddªss
 = 
addªss
;

150 
ÀdsImage
 = 
ALL_LEDS_OFF
;

151 *
ÀdsAddªss
 = 
ÀdsImage
;

152 
	}
}

156 
	$LedDrivî_De°roy
()

158 
	}
}

161 íum {
	mFIRST_LED
 = 1, 
	mLAST_LED
 = 16};

163 
BOOL
 
	$IsLedOutOfBounds
(
ÀdNumbî
)

165  (
ÀdNumbî
 < 
FIRST_LED
Ë|| (ÀdNumbî > 
LAST_LED
);

166 
	}
}

170 íum {
	mFIRST_LED
 = 1, 
	mLAST_LED
 = 16};

172 
BOOL
 
	$IsLedOutOfBounds
(
ÀdNumbî
)

174 i‡((
ÀdNumbî
 < 
FIRST_LED
Ë|| (ÀdNumbî > 
LAST_LED
))

176 
	`RUNTIME_ERROR
("LED Drivî: out-of-bound†LED", 
ÀdNumbî
);

177  
TRUE
;

179  
FALSE
;

180 
	}
}

184 
uöt16_t
 
	$c⁄vîtLedNumbîToBô
(
ÀdNumbî
)

186  1 << (
ÀdNumbî
 - 1);

187 
	}
}

191 
	$upd©eH¨dw¨e
()

193 *
ÀdsAddªss
 = 
ÀdsImage
;

194 
	}
}

196 
	$£tLedImageBô
(
ÀdNumbî
)

198 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

199 
	`upd©eH¨dw¨e
();

200 
	}
}

203 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

205 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

208 
	`£tLedImageBô
(
ÀdNumbî
);

209 
	}
}

211 
	$˛órLedImageBô
(
ÀdNumbî
)

213 
ÀdsImage
 &~
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

214 
	`upd©eH¨dw¨e
();

215 
	}
}

217 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

219 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

222 
	`˛órLedImageBô
(
ÀdNumbî
);

223 
	}
}

228 
	$LedDrivî_Tu∫AŒOn
()

230 
ÀdsImage
 = 
ALL_LEDS_ON
;

231 
	`upd©eH¨dw¨e
();

232 
	}
}

234 
	$LedDrivî_Tu∫AŒOff
()

236 
ÀdsImage
 = 
ALL_LEDS_OFF
;

237 
	`upd©eH¨dw¨e
();

238 
	}
}

242 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

245 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

246  
FALSE
;

248  0 !(
ÀdsImage
 & 
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

249 
	}
}

253 
BOOL
 
	$LedDrivî_IsOff
(
ÀdNumbî
)

255  ! 
	`LedDrivî_IsOn
(
ÀdNumbî
);

256 
	}
}

262 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

264  
ÀdsImage
 & (
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

265 
	}
}

270 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

273 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

274  
FALSE
;

276  
ÀdsImage
 & (
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

277 
	}
}

283 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

285 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

288 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

289 
	`upd©eH¨dw¨e
();

290 
	}
}

292 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

294 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

297 
ÀdsImage
 &~(
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

298 
	`upd©eH¨dw¨e
();

299 
	}
}

304 
	~"LedDrivî.h
"

306 
	$LedDrivî_Cª©e
()

308 
	}
}

310 
	$LedDrivî_De°roy
()

312 
	}
}

317 
	$LedDrivî_Cª©e
(
uöt16_t
 * 
addªss
)

319 *
addªss
 = 0;

320 
	}
}

325 
	$LedDrivî_Cª©e
(
uöt16_t
 * 
addªss
)

327 
ÀdsAddªss
 = 
addªss
;

328 *
ÀdsAddªss
 = 0;

329 
	}
}

334 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

336 
	}
}

340 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

342 *
ÀdsAddªss
 = 1;

343 
	}
}

348 
	~"LedDrivî.h
"

350 
uöt16_t
 * 
	gÀdsAddªss
;

352 
	$LedDrivî_Cª©e
(
uöt16_t
 * 
addªss
)

354 
ÀdsAddªss
 = 
addªss
;

355 *
ÀdsAddªss
 = 0;

356 
	}
}

358 
	$LedDrivî_De°roy
()

360 
	}
}

362 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

364 *
ÀdsAddªss
 = 1;

365 
	}
}

367 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

369 *
ÀdsAddªss
 = 0;

370 
	}
}

375 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

377 *
ÀdsAddªss
 |(1 << 
ÀdNumbî
);

378 
	}
}

383 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

385 *
ÀdsAddªss
 |1 << (
ÀdNumbî
 - 1);

386 
	}
}

391 
uöt16_t
 
	$c⁄vîtLedNumbîToBô
(
ÀdNumbî
)

393  1 << (
ÀdNumbî
 - 1);

394 
	}
}

396 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

398 *
ÀdsAddªss
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

399 
	}
}

405 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

407 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

408 *
ÀdsAddªss
 = 
ÀdsImage
;

409 
	}
}

415 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

417 i‡(
ÀdNumbî
 > 16 ||ÜedNumber <= 0)

420 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

421 
	`upd©eH¨dw¨e
();

422 
	}
}

427 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

432 i‡(
ÀdNumbî
 > 16 ||ÜedNumber <= 0)

435 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

436 
	`upd©eH¨dw¨e
();

437 
	}
}

442 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

444 *
ÀdsAddªss
 = 0;

445 
	}
}

450 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

452 *
ÀdsAddªss
 &~(
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

453 
	}
}

459 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

461 
ÀdsImage
 &~(
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

462 *
ÀdsAddªss
 = 
ÀdsImage
;

463 
	}
}

469 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

471 i‡(
ÀdNumbî
 > 16 ||ÜedNumber <= 0)

474 
ÀdsImage
 &~(
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
));

475 
	`upd©eH¨dw¨e
();

476 
	}
}

481 
	$LedDrivî_Tu∫AŒOn
()

483 *
ÀdsAddªss
 = 0xffff;

484 
	}
}

489 íum {
	mALL_LEDS_ON
 = ~0, 
	mALL_LEDS_OFF
 = ~
ALL_LEDS_ON
};

491 
	$LedDrivî_Tu∫AŒOn
()

493 *
ÀdsAddªss
 = 
ALL_LEDS_ON
;

494 
	}
}

501 
	$LedDrivî_Tu∫AŒOn
()

503 
ÀdsImage
 = 
ALL_LEDS_ON
;

504 *
ÀdsAddªss
 = 
ÀdsImage
;

505 
	}
}

512 
	$LedDrivî_Tu∫AŒOn
()

514 
	}
}

519 
	$LedDrivî_Tu∫AŒOff
()

521 
ÀdsImage
 = 
ALL_LEDS_OFF
;

522 
	`upd©eH¨dw¨e
();

523 
	}
}

528 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

530  
FALSE
;

531 
	}
}

536 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

538  
TRUE
;

539 
	}
}

544 
BOOL
 
	$LedDrivî_IsOn
(
ÀdNumbî
)

546 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

547  
FALSE
;

549  
FALSE
;

550 
	}
}

554 
	$LedDrivî_Tu∫On
(
ÀdNumbî
)

556 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

559 
ÀdsImage
 |
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

560 
	`upd©eH¨dw¨e
();

561 
	}
}

563 
	$LedDrivî_Tu∫Off
(
ÀdNumbî
)

565 i‡(
	`IsLedOutOfBounds
(
ÀdNumbî
))

568 
ÀdsImage
 &~
	`c⁄vîtLedNumbîToBô
(
ÀdNumbî
);

569 
	`upd©eH¨dw¨e
();

570 
	}
}

576 
	$LedDrivî_Tu∫AŒOn
()

578 
ÀdsImage
 = 
ALL_LEDS_ON
;

579 *
ÀdsAddªss
 = 
ÀdsImage
;

580 
	}
}

582 
	$LedDrivî_Tu∫AŒOff
()

584 
ÀdsImage
 = 
ALL_LEDS_OFF
;

585 *
ÀdsAddªss
 = 
ÀdsImage
;

586 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\dvr\DvRecorder.c

9 
	~"DvRec‹dî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

13 
	$DvrRec‹dî_Cª©e
()

16 
	}
}

18 
	$DvRec‹dî_Re°‹eProgøms
(
DvRec‹dî
 * 
¥ogøms
)

20 
	}
}

22 
	$DvRec‹dî_De°roy
()

24 
	}
}

27 
	~<±hªad.h
>

29 
	$DvRec‹dî_°¨tScheduÀdProgøms
()

31 
ScheduÀdProgøm
 
p
;

32 
Fûe
 
de°
;

34 
	`boss_muãx_lock
(
ScheduÀdProgøm_muãx
);

35 
p
 = 
	`DvRec‹dî_gëNextScheduÀdProgøm
();

36 
p
)

38 i‡(
	`ScheduÀdProgøm_isTimeToSèπ
(
p
)) {

39 i‡(
dvr
->
isSÀïög
) {

40 
	`boss_muãx_lock
(
audioOut
->
muãx
);

41 
audioOut
->
muãd
 = 
TRUE
;

42 
	`tu∫OffAudio
(
audioOut
->
p‹t
);

43 
	`boss_muãx_lock
(
dvr
->
muãx
);

44 i‡(
dvr
->
a˘iveRec‹dögsCou¡


45 >
MAX_SIMULTANEOUS_RECORDINGS
) {

46 
	`boss_muãx_u∆ock
(
ScheduÀdProgøm_muãx
);

47 
	`boss_muãx_u∆ock
(
dvr
->
muãx
);

50 
de°
 = 
	`›íRec‹dögFûe
(
p
);

51 
dvr
->
a˘iveRec‹dögsCou¡
++;

52 
	`ªc‹d
(
de°
, 
p
->
ch™√l
);

53 
	`boss_muãx_lock
(
audioOut
->
muãx
);

54 
	`boss_muãx_lock
(
dvr
->
muãx
);

58 
p
 = 
	`DvRec‹dî_gëNextScheduÀdProgøm
(p);

60 
	`boss_muãx_u∆ock
(
ScheduÀdProgøm_muãx
);

61 
	}
}

63 
	$DvRec‹dî_°¨tScheduÀdProgøms
()

65 
ScheduÀdProgøm
 
p
;

67 
	`Acquúe_ProgømScheduÀ_locks
();

68 
p
 = 
	`DvRec‹dî_gëFú°ScheduÀdProgøm
();

70 
p
 && ! 
	`ªc‹dögLimôRóched
())

72 
	`ScheduÀdProgøm_°¨tRódyProgøm
(
p
);

73 
p
 = 
	`DvRec‹dî_gëNextScheduÀdProgøm
(p);

75 
	`Rñó£_ProgømScheduÀ_locks
();

76 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\eyeMovement\eye.c

9 
	~<°dio.h
>

11 
	$makeSum
(
max
)

13 
i
, 
sum
;

14 
sum
 = 0;

15 
i
 = 0;

16 
i
 < 
max
)

18 
sum
 = sum + 
i
;

19 
i
 = i + 1;

21  
sum
;

22 
	}
}

23 
	$maö
()

25 
öput
, 
sum
;

26 
	`sˇnf
("%d",&
öput
);

27 
sum
 = 
	`makeSum
(
öput
);

28 
	`¥ötf
("Sum from 1Åÿ%d i†%d\n", 
öput
, 
sum
);

30 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\util\CircularBuffer.c

11 
	~"CúcuœrBuf„r.h
"

12 
	~"Utûs.h
"

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

17 
	sCúcuœrBuf„r


19 
	mcou¡
;

20 
	mödex
;

21 
	moutdex
;

22 
	mˇ∑côy
;

23 * 
	mvÆues
;

26 íum {
	mBUFFER_GUARD
 = -999};

28 
CúcuœrBuf„r
* 
	$CúcuœrBuf„r_Cª©e
(
ˇ∑côy
)

30 
CúcuœrBuf„r
* 
£lf
 = 
	`mÆloc
((CircularBuffer));

31 
	`mem£t
(
£lf
, 0, (
CúcuœrBuf„r
));

32 
£lf
->
ˇ∑côy
 = capacity;

33 
£lf
->
vÆues
 = 
	`mÆloc
((
ˇ∑côy
 + 1) * ());

34 
£lf
->
vÆues
[
ˇ∑côy
] = 
BUFFER_GUARD
;

35  
£lf
;

36 
	}
}

38 
	$CúcuœrBuf„r_De°roy
(
CúcuœrBuf„r
* 
£lf
)

40 
	`‰ì
(
£lf
->
vÆues
);

41 
	`‰ì
(
£lf
);

42 
	}
}

44 
	$CúcuœrBuf„r_VîifyI¡egrôy
(
CúcuœrBuf„r
* 
£lf
)

46  
£lf
->
vÆues
[£lf->
ˇ∑côy
] =
BUFFER_GUARD
;

47 
	}
}

49 
	$CúcuœrBuf„r_IsEm±y
(
CúcuœrBuf„r
* 
£lf
)

51  
£lf
->
cou¡
 == 0;

52 
	}
}

54 
	$CúcuœrBuf„r_IsFuŒ
(
CúcuœrBuf„r
* 
£lf
)

56  
£lf
->
cou¡
 =£lf->
ˇ∑côy
;

57 
	}
}

59 
	$CúcuœrBuf„r_Put
(
CúcuœrBuf„r
* 
£lf
, 
vÆue
)

61 i‡(
£lf
->
cou¡
 >£lf->
ˇ∑côy
)

64 
£lf
->
cou¡
++;

65 
£lf
->
vÆues
[£lf->
ödex
++] = 
vÆue
;

66 i‡(
£lf
->
ödex
 >£lf->
ˇ∑côy
)

67 
£lf
->
ödex
 = 0;

70 
	}
}

72 
	$CúcuœrBuf„r_Gë
(
CúcuœrBuf„r
* 
£lf
)

74 
vÆue
;

75 i‡(
£lf
->
cou¡
 <= 0)

78 
vÆue
 = 
£lf
->
vÆues
[£lf->
outdex
++];

79 
£lf
->
cou¡
--;

80 i‡(
£lf
->
outdex
 >£lf->
ˇ∑côy
)

81 
£lf
->
outdex
 = 0;

83  
vÆue
;

84 
	}
}

86 
	$CúcuœrBuf„r_C≠acôy
(
CúcuœrBuf„r
* 
£lf
)

88  
£lf
->
ˇ∑côy
;

89 
	}
}

91 
	$CúcuœrBuf„r_Pröt
(
CúcuœrBuf„r
* 
£lf
)

93 
i
;

94 
cuºítVÆue
;

96 
cuºítVÆue
 = 
£lf
->
outdex
;

98 
	`F‹m©Ouçut
("Circular buffer content:\n<");

100 
i
 = 0; i < 
£lf
->
cou¡
; i++) {

101 i‡(
i
 != 0)

102 
	`F‹m©Ouçut
(", ");

103 
	`F‹m©Ouçut
("%d", 
£lf
->
vÆues
[
cuºítVÆue
++]);

104 i‡(
cuºítVÆue
 >
£lf
->
ˇ∑côy
)

105 
cuºítVÆue
 = 0;

108 
	`F‹m©Ouçut
(">\n");

109 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\util\Utils.c

9 
	~"Utûs.h
"

11 
	$F‹m©Ouçut_Im∂
(c⁄° * 
f‹m©
, ...)

17 
	}
}

19 (*
F‹m©Ouçut
)(c⁄° * 
f‹m©
, ...Ë
F‹m©Ouçut_Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\zune\RtcTime.c

1 
	~"RtcTime.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

4 
	~"comm⁄.h
"

7 
	sRtcTime


9 
	mdaysSö˚1980
;

10 
	myór
;

11 
	mdayOfYór
;

12 
	mm⁄th
;

13 
	mdayOfM⁄th
;

14 
	mdayOfWìk
;

19 
	mSTARTING_YEAR
 = 1980, 
	mSTARTING_WEEKDAY
 = 
Tuesday


22 c⁄° 
	gn⁄LópYórDaysPîM⁄th
[12] =

25 c⁄° 
	gÀ≠YórDaysPîM⁄th
[12] =

28 
BOOL
 
	$isLópYór
(
yór
)

30 i‡(
yór
 % 400 == 0)

31  
TRUE
;

32 i‡(
yór
 % 100 == 0)

33  
FALSE
;

34 i‡(
yór
 % 4 == 0)

35  
TRUE
;

36  
FALSE
;

37 
	}
}

39 
	$GëDaysInYór
(
yór
)

41 i‡(
	`isLópYór
(
yór
))

45 
	}
}

48 
	$SëYórAndDayOfYór
(
RtcTime
* 
time
)

50 
days
 = 
time
->
daysSö˚1980
;

51 
yór
 = 
STARTING_YEAR
;

52 
days
 > 365)

54 i‡(
	`IsLópYór
(
yór
))

56 i‡(
days
 > 366)

58 
days
 -= 366;

59 
yór
 += 1;

64 
days
 -= 365;

65 
yór
 += 1;

69 
time
->
dayOfYór
 = 
days
;

70 
time
->
yór
 = year;

71 
	}
}

75 
m⁄ô‹Lo›
(
days
);

77 
	$SëYórAndDayOfYór
(
RtcTime
* 
time
)

79 
days
 = 
time
->
daysSö˚1980
;

80 
yór
 = 
STARTING_YEAR
;

81 
days
 > 365)

83 i‡(
	`IsLópYór
(
yór
))

85 i‡(
days
 > 366)

87 
days
 -= 366;

88 
yór
 += 1;

93 
days
 -= 365;

94 
yór
 += 1;

96 
	`m⁄ô‹Lo›
(
days
);

100 
time
->
dayOfYór
 = 
days
;

101 
time
->
yór
 = year;

102 
	}
}

105 
	$Fú°SëYórAndDayOfYór
(
RtcTime
* 
£lf
)

107 
days
 = 
£lf
->
daysSö˚1980
;

108 
yór
 = 
STARTING_YEAR
;

109 
daysInYór
 = 
	`GëDaysInYór
(
yór
);

111 
days
 > 
daysInYór
)

113 
yór
++;

114 
days
 -
daysInYór
;

115 
daysInYór
 = 
	`GëDaysInYór
(
yór
);

118 
£lf
->
dayOfYór
 = 
days
;

119 
£lf
->
yór
 = year;

120 
	}
}

122 
	$ThíSëM⁄thAndDayOfM⁄th
(
RtcTime
 * 
£lf
)

124 
m⁄th
 = 0;

125 
days
 = 
£lf
->
dayOfYór
;

126 c⁄° * 
daysPîM⁄th
 = 
n⁄LópYórDaysPîM⁄th
;

127 i‡(
	`isLópYór
(
£lf
->
yór
))

128 
daysPîM⁄th
 = 
À≠YórDaysPîM⁄th
;

130 
days
 > 
daysPîM⁄th
[
m⁄th
])

132 
days
 -
daysPîM⁄th
[
m⁄th
];

133 
m⁄th
++;

135 
£lf
->
m⁄th
 = month + 1;

136 
£lf
->
dayOfM⁄th
 = 
days
;

137 
	}
}

139 
	$£tDayOfWìk
(
RtcTime
* 
£lf
)

141 
£lf
->
dayOfWìk
 = ((£lf->
daysSö˚1980
-1)+
STARTING_WEEKDAY
)%7;

142 
	}
}

145 
	$öôRtcTime
(
RtcTime
* 
£lf
)

147 
	`Fú°SëYórAndDayOfYór
(
£lf
);

148 
	`ThíSëM⁄thAndDayOfM⁄th
(
£lf
);

149 
	`£tDayOfWìk
(
£lf
);

150 
	}
}

153 
RtcTime
* 
	$RtcTime_Cª©e
(
daysSö˚1980
)

155 
RtcTime
* 
£lf
 = 
	`mÆloc
((RtcTime));

156 
	`mem£t
(
£lf
, 0, (
RtcTime
));

157 
£lf
->
daysSö˚1980
 = daysSince1980;

158 
	`öôRtcTime
(
£lf
);

159  
£lf
;

160 
	}
}

162 
	$RtcTime_De°roy
(
RtcTime
* 
£lf
)

164 
	`‰ì
(
£lf
);

165 
	}
}

167 
	$RtcTime_GëYór
(
RtcTime
* 
£lf
)

169  
£lf
->
yór
;

170 
	}
}

172 
	$RtcTime_GëM⁄th
(
RtcTime
* 
£lf
)

174  
£lf
->
m⁄th
;

175 
	}
}

177 
	$RtcTime_GëDayOfM⁄th
(
RtcTime
* 
£lf
)

179  
£lf
->
dayOfM⁄th
;

180 
	}
}

182 
	$RtcTime_GëDayOfWìk
(
RtcTime
* 
£lf
)

184  
£lf
->
dayOfWìk
;

185 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightController.h

9 #i‚de‡
D_LightC⁄åﬁÀr_H


10 
	#D_LightC⁄åﬁÀr_H


	)

12 íum { 
	mMAX_LIGHTS
 = 32 };

14 
LightC⁄åﬁÀr_Cª©e
();

15 
LightC⁄åﬁÀr_De°roy
();

16 
LightC⁄åﬁÀr_Tu∫On
(
id
);

17 
LightC⁄åﬁÀr_Tu∫Off
(
id
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightScheduler.h

9 #i‚de‡
D_LightScheduÀr_H


10 
	#D_LightScheduÀr_H


	)

13 
	~"TimeSîvi˚.h
"

15 íum { 
	mLS_OK
=0, 
	mLS_TOO_MANY_EVENTS
, 
	mLS_ID_OUT_OF_BOUNDS
 };

17 
LightScheduÀr_Cª©e
();

18 
LightScheduÀr_De°roy
();

19 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
);

20 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
);

21 
LightScheduÀr_R™domize
(
id
, 
Day
 
day
, 
möuã
);

22 
LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
);

23 
LightScheduÀr_WakeUp
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightSwitch.h

9 #i‚de‡
D_LightSwôch_H


10 
	#D_LightSwôch_H


	)

12 
LightSwôch
 
	tLightSwôch
;

14 
	sLightSwôch


16 (*
	mTu∫On
)(
	mLightSwôch
*);

17 (*
	mTu∫Off
)(
	mLightSwôch
*);

18 (*
	mBrighãr
)(
	mLightSwôch
*);

19 (*
	mD¨kî
)(
	mLightSwôch
*);

20 * 
	m«me
;

21 
	mid
;

24 
LightSwôch_Tu∫On
(
LightSwôch
*);

25 
LightSwôch_Tu∫Off
(
LightSwôch
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\RandomMinute.h

9 #i‚de‡
D_R™domMöuã_H


10 
	#D_R™domMöuã_H


	)

19 
R™domMöuã_Cª©e
(
bound
);

20 (*
R™domMöuã_Gë
)();

24 
R™domMöuã_Cª©e
(
bound
);

25 
R™domMöuã_Gë
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\OurPrintf.h

11 #i‚de‡
D_OurPrötf_H


12 
	#D_OurPrötf_H


	)

14 (*
OurPrötf
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

18 
	~"comm⁄.h
"

20 
	eDay
 {

21 
	mNOT_A_DAY
=-4,

22 
	mEVERYDAY
=-3, 
	mWEEKDAY
=-2, 
	mWEEKEND
=-1,

23 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


24 } 
	tDay
;

26 
	eM⁄th
 {

27 
	mJAN
=1, 
	mFEB
, 
	mMAR
, 
	mAPR
, 
	mMAY
, 
	mJUN
, 
	mJUL
, 
	mAUG
, 
	mSEP
, 
	mOCT
, 
	mNOV
, 
	mDEC


28 } 
	tM⁄th
;

31 
Time
 
	tTime
;

34 
	sTime


36 
	mu£c
;

37 
	m£c
;

38 
	mmöuãOfDay
;

39 
	mmöuãOfHour
;

40 
Day
 
	mdayOfWìk
;

41 
	mdayOfM⁄th
;

42 
M⁄th
 
	mm⁄th
;

45 
TimeSîvi˚_Cª©e
();

46 
TimeSîvi˚_De°roy
();

47 
TimeSîvi˚_GëMöuã
();

48 
TimeSîvi˚_GëDay
();

50 
TimeSîvi˚_GëTime
(
Time
*);

52 
BOOL
 
TimeSîvi˚_M©chesDayOfWìk
(
Time
*, 
Day
 
day
);

53 
BOOL
 
TimeSîvi˚_M©chesMöuãOfDay
(
Time
*, 
möuã
);

54 
BOOL
 
TimeSîvi˚_M©chesNow
(
ªa˘i⁄Day
, 
möuã
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\common.h

11 #i‚de‡
D_comm⁄_H


12 
	#D_comm⁄_H


	)

14 #i‚de‡
BOOL


15 
	#BOOL
 

	)

18 #i‚de‡
TRUE


19 
	#TRUE
 1

	)

22 #i‚de‡
FALSE


23 
	#FALSE
 0

	)

26 #i‚de‡
NULL


27 
	#NULL
 0

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightController.c

1 
	~"FakeLightC⁄åﬁÀr.h
"

2 
	~"mem‹y.h
"

6 
	gœ°Id
;

7 
	gœ°Levñ
;

8 
	gcou¡
;

9 
	glights
[
MAX_LIGHTS
];

11 
	$LightC⁄åﬁÀr_Cª©e
()

13 
œ°Id
 = 
NO_ID
;

14 
œ°Levñ
 = 
UNKNOWN_STATE
;

15 
cou¡
 = 0;

16 
	`mem£t
(
lights
, 
UNKNOWN_STATE
, (lights));

17 
	}
}

19 
	$LightC⁄åﬁÀr_De°roy
()

21 
	}
}

23 
	$FakeLightC⁄åﬁÀr_gëLa°Id
()

25  
œ°Id
;

26 
	}
}

28 
	$FakeLightC⁄åﬁÀr_gëLa°Sèã
()

30  
œ°Levñ
;

31 
	}
}

33 
	$isIdInR™ge
(
id
)

35  
id
 > 0 && id <=32;

36 
	}
}

37 
	$LightC⁄åﬁÀr_Tu∫On
(
id
)

39 
œ°Id
 = 
id
;

40 
œ°Levñ
 = 1;

41 
cou¡
++;

42 i‡(
	`isIdInR™ge
(
id
))

43 
lights
[
id
-1] = 
LIGHT_ON
;

44 
	}
}

46 
	$LightC⁄åﬁÀr_Tu∫Off
(
id
)

48 
œ°Id
 = 
id
;

49 
œ°Levñ
 = 0;

50 
cou¡
++;

51 i‡(
	`isIdInR™ge
(
id
))

52 
lights
[
id
-1] = 
LIGHT_OFF
;

53 
	}
}

55 
	$FakeLightC⁄åﬁÀr_gëEvítCou¡s
()

57  
cou¡
;

58 
	}
}

60 
LightSèã
 
	$FakeLightC⁄åﬁÀr_gëLightSèã
(
id
)

62 i‡(!
	`isIdInR™ge
(
id
))

63  
UNKNOWN_STATE
;

64  
lights
[
id
-1];

65 
	}
}

69 
	~"LightC⁄åﬁÀr.h
"

73 
	gœ°Id
;

74 
	gœ°Levñ
;

76 
	$LightC⁄åﬁÀr_Cª©e
()

78 
œ°Id
 = -1;

79 
œ°Levñ
 = -1;

80 
	}
}

82 
	$LightC⁄åﬁÀr_De°roy
()

84 
	}
}

86 
	$LightC⁄åﬁÀr_Tu∫On
(
id
)

88 
œ°Id
 = 
id
;

89 
œ°Levñ
 = 1;

90 
	}
}

92 
	$LightC⁄åﬁÀr_Tu∫Off
(
id
)

94 
œ°Id
 = 
id
;

95 
œ°Levñ
 = 0;

96 
	}
}

98 
	$FakeLightC⁄åﬁÀr_gëLa°Id
()

100  
œ°Id
;

101 
	}
}

103 
	$FakeLightC⁄åﬁÀr_gëLa°Sèã
()

105  
œ°Levñ
;

106 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightController.h

1 #i‚de‡
D_FakeLightC⁄åﬁÀr_H


2 
	#D_FakeLightC⁄åﬁÀr_H


	)

4 
	~"LightC⁄åﬁÀr.h
"

9 
	mNO_ID
 = -1, 
	mUNKNOWN_STATE
 = -1,

10 
	mLIGHT_OFF
 = 0, 
	mLIGHT_ON
 = 1

11 } 
	tLightSèã
;

13 
LightSèã
 
FakeLightC⁄åﬁÀr_gëLightSèã
(
id
);

16 
FakeLightC⁄åﬁÀr_gëLa°Id
();

17 
FakeLightC⁄åﬁÀr_gëLa°Sèã
();

18 
FakeLightC⁄åﬁÀr_gëEvítCou¡s
();

24 #i‚de‡
D_FakeLightC⁄åﬁÀr_H


25 
	#D_FakeLightC⁄åﬁÀr_H


	)

27 
	~"LightC⁄åﬁÀr.h
"

29 
FakeLightC⁄åﬁÀr_gëLa°Id
();

30 
FakeLightC⁄åﬁÀr_gëLa°Sèã
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightControllerTest.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	~"FakeLightC⁄åﬁÀr.h
"

9 
	$TEST_GROUP
(
LightC⁄åﬁÀr
)

11 
	`£tup
()

13 
	`LightC⁄åﬁÀr_Cª©e
();

16 
	`ã¨down
()

18 
	`LightC⁄åﬁÀr_De°roy
();

20 
	}
};

22 
	$TEST
(
LightC⁄åﬁÀr
, 
Cª©e
)

24 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

25 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

26 
	}
}

28 
	$TEST
(
LightC⁄åﬁÀr
, 
RemembîTheLa°LightIdC⁄åﬁÀd
)

30 
	`LightC⁄åﬁÀr_Tu∫On
(10);

31 
	`LONGS_EQUAL
(10, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

32 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

33 
	}
}

37 
	$TEST
(
LightC⁄åﬁÀr
, 
RemembîAŒLightSèãs
)

39 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

41 
	`LightC⁄åﬁÀr_Tu∫On
(4);

42 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

44 
	`LightC⁄åﬁÀr_Tu∫Off
(4);

45 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

46 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeRandomMinute.c

4 
	~"FakeR™domMöuã.h
"

6 
	g£ed
 = -1;

7 
	gö¸emít
 = -1;

9 
	$FakeR™domMöuã_Re£t
()

11 
£ed
 = -1;

12 
ö¸emít
 = -1;

13 
	}
}

15 
	$FakeR™domMöuã_SëFú°AndIn¸emít
(
s
, 
i
)

17 
£ed
 = 
s
;

18 
ö¸emít
 = 
i
;

19 
	}
}

21 
	$FakeR™domMöuã_Gë
()

23 
ªsu…
 = 
£ed
;

24 
£ed
 +
ö¸emít
;

25  
ªsu…
;

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeRandomMinute.h

5 #i‚de‡
D_FakeR™domMöuã_H


6 
	#D_FakeR™domMöuã_H


	)

13 
	~"R™domMöuã.h
"

15 
FakeR™domMöuã_SëFú°AndIn¸emít
(
£ed
, 
ö¸emít
);

16 
FakeR™domMöuã_Gë
();

17 
FakeR™domMöuã_Re£t
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeService.c

5 
	~"TimeSîvi˚.h
"

8 
	gtheMöuã
;

9 
	gtheDay
;

11 
	$TimeSîvi˚_Cª©e
()

13 
theMöuã
 = -1;

14 
theDay
 = -1;

15 
	}
}

17 
	$TimeSîvi˚_De°roy
()

19 
	}
}

21 
	$TimeSîvi˚_GëTime
(
Time
* 
time
)

23 
time
->
möuãOfDay
 = 
theMöuã
;

24 
time
->
dayOfWìk
 = 
theDay
;

25 
	}
}

28 
	$TimeSîvi˚_GëMöuã
()

30  
theMöuã
;

31 
	}
}

33 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

35 
theMöuã
 = 
möuã
;

36 
	}
}

38 
	$FakeTimeSîvi˚_SëDay
(
day
)

40 
theDay
 = 
day
;

41 
	}
}

43 
	$TimeSîvi˚_GëDay
()

45  
theDay
;

46 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeService.h

7 #i‚de‡
D_FakeTimeSîvi˚_H


8 
	#D_FakeTimeSîvi˚_H


	)

17 
	~"TimeSîvi˚.h
"

19 
FakeTimeSîvi˚_SëMöuã
();

20 
FakeTimeSîvi˚_SëDay
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeServiceTest.cpp

5 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	~"TimeSîvi˚.h
"

10 
	~"FakeTimeSîvi˚.h
"

13 
	$TEST_GROUP
(
TimeSîvi˚
)

15 
	`£tup
()

17 
	`TimeSîvi˚_Cª©e
();

20 
	`ã¨down
()

22 
	`TimeSîvi˚_De°roy
();

24 
	}
};

26 
	$TEST
(
TimeSîvi˚
, 
Cª©e
)

28 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëMöuã
());

29 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëDay
());

30 
	}
}

32 
	$TEST
(
TimeSîvi˚
, 
Së
)

34 
	`FakeTimeSîvi˚_SëMöuã
(42);

35 
	`LONGS_EQUAL
(42, 
	`TimeSîvi˚_GëMöuã
());

36 
	`FakeTimeSîvi˚_SëDay
(3);

37 
	`LONGS_EQUAL
(3, 
	`TimeSîvi˚_GëDay
());

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfSpy.c

7 
	~"OurPrötfSpy.h
"

8 
	~<°dio.h
>

9 
	~<°d¨g.h
>

11 * 
	gbuf„r_±r
;

12 
	gbuf„r_size
 = 0;

13 
	gbuf„r_off£t
 = 0;

14 
	gbuf„r_u£d
 = 0;

16 
	#WINDOWS_VSNPRINTF_OVERWRITE
 -1

	)

18 
	$OurPrötf_•y
(c⁄° * 
f‹m©
, ...)

20 
wrôãn_size
;

21 
va_li°
 
¨gumíts
;

22 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

23 
wrôãn_size
 = 
	`v¢¥ötf
(
buf„r_±r
 + 
buf„r_off£t
, 
buf„r_size
 - 
buf„r_u£d
, 
f‹m©
, 
¨gumíts
);

24 i‡(
wrôãn_size
 =
WINDOWS_VSNPRINTF_OVERWRITE
)

26 
wrôãn_size
 = 
buf„r_size
 - 
buf„r_u£d
;

27 
buf„r_±r
[
buf„r_off£t
 + 
wrôãn_size
 - 1] = 0;

30 
buf„r_off£t
 +
wrôãn_size
;

31 
buf„r_u£d
 +
wrôãn_size
;

32 
	`va_íd
(
¨gumíts
);

34 
	}
}

36 
	$OurPrötf_•y_£tBuf„r
(* 
buf„r
, 
size
)

38 
buf„r_±r
 = 
buf„r
;

39 
buf„r_size
 = 
size
;

40 
buf„r_off£t
 = 0;

41 
buf„r_u£d
 = 0;

42 
buf„r
[0] = '\0';

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfSpy.h

7 #i‚de‡
D_OurPrötfSpy_H


8 
	#D_OurPrötfSpy_H


	)

10 
	~"OurPrötf.h
"

12 
OurPrötf_•y
(c⁄° * 
f‹m©
, ...);

13 
OurPrötf_•y_£tBuf„r
(* 
buf„r
, 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfTestSpy.cpp

7 
	~"CµUTe°/Te°H¨√ss.h
"

11 
	~"OurPrötf.h
"

12 
	~"OurPrötfSpy.h
"

15 
	$TEST_GROUP
(
OurPrötfSpy
)

17 
	`£tup
()

19 
	`UT_PTR_SET
(
OurPrötf
, 
OurPrötf_•y
);

22 
	`ã¨down
()

25 
	}
};

27 
	$TEST
(
OurPrötfSpy
, 
ã°HñloW‹ld
)

29 
buf„r
[20];

30 
	`OurPrötf_•y_£tBuf„r
(
buf„r
, (buffer));

31 
	`OurPrötf
("Hello, World\n");

32 
	`STRCMP_EQUAL
("Hñlo, W‹ld\n", 
buf„r
);

33 
	}
}

35 
	$TEST
(
OurPrötfSpy
, 
ã°LimôTheOuçutBuf„rSize
)

37 
buf„r
[5];

38 
	`OurPrötf_•y_£tBuf„r
(
buf„r
, (buffer));

39 
	`OurPrötf
("Hello, World\n");

40 
	`STRCMP_EQUAL
("Hñl", 
buf„r
);

41 
	}
}

43 
	$TEST
(
OurPrötfSpy
, 
ã°PrötMu…ùÀTimes
)

45 
buf„r
[25];

46 
	`OurPrötf_•y_£tBuf„r
(
buf„r
, (buffer));

47 
	`OurPrötf
("Hello");

48 
	`OurPrötf
(", World\n");

49 
	`STRCMP_EQUAL
("Hñlo, W‹ld\n", 
buf„r
);

50 
	}
}

52 
	$TEST
(
OurPrötfSpy
, 
ã°PrötMu…ùÀTime¢oBuf„rOvîÊow
)

54 
buf„r
[10];

55 
buf„r
[9] = 'x';

56 
	`OurPrötf_•y_£tBuf„r
(
buf„r
, (buffer)-1);

57 
	`OurPrötf
("12345");

58 
	`OurPrötf
("67890");

59 
	`STRCMP_EQUAL
("12345678", 
buf„r
);

60 
	`BYTES_EQUAL
('x', 
buf„r
[9]);

61 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\HomeAutomation\LightScheduler.c

9 
	~"LightScheduÀr.h
"

10 
	~"LightC⁄åﬁÀr.h
"

11 
	~"TimeSîvi˚.h
"

12 
	~"R™domMöuã.h
"

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

18 
	mTURNON
, 
	mTURNOFF
, 
	mDIM
, 
	mRANDOM_ON
, 
	mRANDOM_OFF


23 
	mMAX_EVENTS
 = 128, 
	mUNUSED
 = -1

28 
	mid
;

29 
Day
 
	mday
;

30 
	mmöuã
;

31 
	mevít
;

32 
	møndomize
;

33 
	møndomMöuãs
;

35 } 
	tScheduÀdLightEvít
;

37 
ScheduÀdLightEvít
 
	gevítLi°
[
MAX_EVENTS
];

39 
	$LightScheduÀr_Cª©e
()

41 
i
;

42 
i
 = 0; i < 
MAX_EVENTS
; i++)

44 
evítLi°
[
i
].
id
 = 
UNUSED
;

46 
	}
}

48 
	$LightScheduÀr_De°roy
()

50 
	}
}

52 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

54 
i
;

56 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

57  
LS_ID_OUT_OF_BOUNDS
;

59 
i
 = 0; i < 
MAX_EVENTS
; i++)

61 i‡(
evítLi°
[
i
].
id
 =
UNUSED
)

63 
evítLi°
[
i
].
id
 = id;

64 
evítLi°
[
i
].
day
 = day;

65 
evítLi°
[
i
].
möuã
 = minute;

66 
evítLi°
[
i
].
evít
 = 
TURNON
;

67 
evítLi°
[
i
].
øndomize
 = 
RANDOM_OFF
;

68  
LS_OK
;

71  
LS_TOO_MANY_EVENTS
;

72 
	}
}

74 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
Day
 
day
, 
möuã
)

76 
i
;

78 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

79  
LS_ID_OUT_OF_BOUNDS
;

81 
i
 = 0; i < 
MAX_EVENTS
; i++)

83 i‡(
evítLi°
[
i
].
id
 =
UNUSED
)

85 
evítLi°
[
i
].
id
 = id;

86 
evítLi°
[
i
].
day
 = day;

87 
evítLi°
[
i
].
möuã
 = minute;

88 
evítLi°
[
i
].
evít
 = 
TURNOFF
;

89 
evítLi°
[
i
].
øndomize
 = 
RANDOM_OFF
;

90  
LS_OK
;

93  
LS_TOO_MANY_EVENTS
;

94 
	}
}

96 
	$LightScheduÀr_R™domize
(
id
, 
Day
 
day
, 
möuã
)

98 
i
;

99 
i
 = 0; i < 
MAX_EVENTS
; i++)

101 
ScheduÀdLightEvít
* 
e
 = &
evítLi°
[
i
];

102 i‡(
e
->
id
 =id &&É->
day
 =day &&É->
möuã
 == minute)

104 
e
->
øndomize
 = 
RANDOM_ON
;

105 
e
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

108 
	}
}

110 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

112 
i
;

114 
i
 = 0; i < 
MAX_EVENTS
; i++)

116 i‡(
evítLi°
[
i
].
id
 =id &&ÉvítLi°[i].
day
 == day

117 && 
evítLi°
[
i
].
möuã
 == minute)

119 
evítLi°
[
i
].
id
 = 
UNUSED
;

122 
	}
}

125 
	$LightScheduÀr_WakeUp
()

127 
i
;

128 
Time
 
time
;

130 
	`TimeSîvi˚_GëTime
(&
time
);

131 
Day
 
td
 = 
time
.
dayOfWìk
;

132 
mö
 = 
time
.
möuãOfDay
;

134 
i
 = 0; i < 
MAX_EVENTS
; i++)

136 
ScheduÀdLightEvít
* 
£
 = &
evítLi°
[
i
];

137 i‡(
£
->
id
 !
UNUSED
)

139 
Day
 
d
 = 
£
->
day
;

140 i‡–(
d
 =
EVERYDAY
Ë|| (d =
td
Ë|| (d =
WEEKEND
 &&

141 (
SATURDAY
 =
td
 || 
SUNDAY
 ==Åd)) ||

142 (
d
 =
WEEKDAY
 && (
td
 >
MONDAY


143 && 
td
 <
FRIDAY
)))

146 i‡(
mö
 =
£
->
möuã
 + se->
øndomMöuãs
)

148 i‡(
TURNON
 =
£
->
evít
)

149 
	`LightC⁄åﬁÀr_Tu∫On
(
£
->
id
);

150 i‡(
TURNOFF
 =
£
->
evít
)

151 
	`LightC⁄åﬁÀr_Tu∫Off
(
£
->
id
);

153 i‡(
£
->
øndomize
 =
RANDOM_ON
)

154 
£
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

156 
£
->
øndomMöuãs
 = 0;

162 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\HomeAutomation\RandomMinute.c

9 
	~"R™domMöuã.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

15 
	gbound
 = 0;

18 
	$R™domMöuã_Cª©e
(
b
)

20 
bound
 = 
b
;

21 
	`§™d
(10);

22 
	}
}

26 
	$R™domMöuã_GëIm∂
()

28  
bound
 - 
	`ønd
() % (bound * 2 + 1);

29 
	}
}

31 (*
	gR™domMöuã_Gë
)(Ë
R™domMöuã_GëIm∂
;

35 
	$R™domMöuã_Gë
()

37  
bound
 - 
	`ønd
() % (bound * 2 + 1);

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\util\OurPrintf.c

12 
	~"OurPrötf.h
"

13 
	~<°dio.h
>

15 (*
OurPrötf
)(c⁄° * 
f‹m©
, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\LightSchedulerRandomizeTest.cpp

11 
	~"LightScheduÀr.h
"

12 
	~"FakeLightC⁄åﬁÀr.h
"

13 
	~"FakeTimeSîvi˚.h
"

14 
	~"FakeR™domMöuã.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
LightScheduÀrRamdomize
)

21 
	`£tup
()

23 
	`LightC⁄åﬁÀr_Cª©e
();

24 
	`LightScheduÀr_Cª©e
();

25 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

28 
	`ã¨down
()

30 
	`LightScheduÀr_De°roy
();

31 
	`LightC⁄åﬁÀr_De°roy
();

33 
	}
};

37 
	$TEST
(
LightScheduÀrRamdomize
, 
Tu∫sOnE¨ly
)

39 
	`FakeR™domMöuã_SëFú°AndIn¸emít
(-10, 5);

40 
	`LightScheduÀr_ScheduÀTu∫On
(4, 
EVERYDAY
, 600);

41 
	`LightScheduÀr_R™domize
(4, 
EVERYDAY
, 600);

43 
	`FakeTimeSîvi˚_SëMöuã
(600-10);

45 
	`LightScheduÀr_WakeUp
();

47 
	`LONGS_EQUAL
(4, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

48 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

49 
	}
}

53 
	$TEST_GROUP
(
LightScheduÀrRamdomize
)

55 (*
ßvedR™domMöuã_Gë
)();

57 
	`£tup
()

59 
	`LightC⁄åﬁÀr_Cª©e
();

60 
	`LightScheduÀr_Cª©e
();

61 
ßvedR™domMöuã_Gë
 = 
R™domMöuã_Gë
;

62 
R™domMöuã_Gë
 = 
FakeR™domMöuã_Gë
;

65 
	`ã¨down
()

67 
	`LightScheduÀr_De°roy
();

68 
	`LightC⁄åﬁÀr_De°roy
();

69 
R™domMöuã_Gë
 = 
ßvedR™domMöuã_Gë
;

71 
	}
};

75 
	$TEST
(
LightScheduÀrRamdomize
, 
E«bÀR™domizeE¨lyO∆yO√EvítFúes
)

77 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

78 
	`FakeR™domMöuã_SëFú°AndIn¸emít
(-10, 1);

80 
	`LightScheduÀr_ScheduÀTu∫On
(4, 
EVERYDAY
, 600);

81 
	`LightScheduÀr_R™domize
(4, 
EVERYDAY
, 600);

83 
	`FakeTimeSîvi˚_SëMöuã
(590);

84 
	`LightScheduÀr_WakeUp
();

85 
	`LightC⁄åﬁÀr_Cª©e
();

86 
	`FakeTimeSîvi˚_SëMöuã
(591);

87 
	`LightScheduÀr_WakeUp
();

89 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

90 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\LightSchedulerTest.cpp

11 
	~"LightScheduÀr.h
"

12 
	~"FakeLightC⁄åﬁÀr.h
"

13 
	~"FakeTimeSîvi˚.h
"

14 
	~"FakeR™domMöuã.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
LightScheduÀr
)

21 
id
;

23 
	`£tup
()

25 
	`LightC⁄åﬁÀr_Cª©e
();

26 
	`LightScheduÀr_Cª©e
();

30 
	`ã¨down
()

32 
	`LightScheduÀr_De°roy
();

37 
	}
};

39 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

41 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

42 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

43 
	}
}

45 
	$TEST
(
LightScheduÀr
, 
Cª©eSèπsO√MöuãAœrm
)

50 
	}
}

52 
	$TEST
(
LightScheduÀr
, 
NoCh™geToLightsDurögInôüliz©i⁄
)

54 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

55 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

56 
	}
}

58 
	$TEST
(
LightScheduÀr
, 
NoScheduÀNŸhögH≠≥ns
)

60 
	`LightScheduÀr_WakeUp
();

61 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

62 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

63 
	}
}

65 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayNŸTimeYë
)

67 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 1200);

68 
	`FakeTimeSîvi˚_SëMöuã
(1199);

69 
	`LightScheduÀr_WakeUp
();

70 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

71 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

72 
	}
}

74 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀNŸO≥øãdOnSunday
)

76 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

77 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

78 
	`FakeTimeSîvi˚_SëMöuã
(1200);

79 
	`LightScheduÀr_WakeUp
();

80 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

81 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

82 
	}
}

84 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀIsO≥øãdOnM⁄day
)

86 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

87 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

88 
	`FakeTimeSîvi˚_SëMöuã
(1200);

89 
	`LightScheduÀr_WakeUp
();

90 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

91 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

92 
	}
}

93 
	$TEST
(
LightScheduÀr
, 
ScheduÀTwoEvítsAtTheSameTIme
)

95 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

96 
	`LightScheduÀr_ScheduÀTu∫On
(12, 
WEEKDAY
, 1200);

97 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

98 
	`FakeTimeSîvi˚_SëMöuã
(1200);

100 
	`LightScheduÀr_WakeUp
();

102 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(3));

103 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(12));

104 
	}
}

106 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

108 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 100);

110 
	`FakeTimeSîvi˚_SëMöuã
(99);

111 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

112 
	`LightScheduÀr_WakeUp
();

113 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

114 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

115 
	}
}

117 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnEvîydayItsTime
)

119 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 200);

120 
	`FakeTimeSîvi˚_SëMöuã
(200);

121 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

122 
	`LightScheduÀr_WakeUp
();

123 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

124 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

125 
	}
}

127 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayButItsTime
)

129 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

131 
	`FakeTimeSîvi˚_SëMöuã
(100);

132 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

133 
	`LightScheduÀr_WakeUp
();

134 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

135 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

136 
	}
}

138 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

140 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

141 
	`FakeTimeSîvi˚_SëMöuã
(100);

142 
	`FakeTimeSîvi˚_SëDay
(
TUESDAY
);

143 
	`LightScheduÀr_WakeUp
();

144 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

145 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

146 
	}
}

148 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

150 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
TUESDAY
, 200);

151 
	`FakeTimeSîvi˚_SëMöuã
(200);

152 
	`FakeTimeSîvi˚_SëDay
(
TUESDAY
);

153 
	`LightScheduÀr_WakeUp
();

154 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

155 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

156 
	}
}

159 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

161 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
WEEKEND
, 200);

163 
	`FakeTimeSîvi˚_SëMöuã
(200);

164 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

165 
	`LightScheduÀr_WakeUp
();

166 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

167 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

168 
	}
}

171 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

173 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

175 
	`FakeTimeSîvi˚_SëMöuã
(100);

176 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

177 
	`LightScheduÀr_WakeUp
();

178 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

179 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

180 
	}
}

182 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

184 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

186 
	`FakeTimeSîvi˚_SëMöuã
(100);

187 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

188 
	`LightScheduÀr_WakeUp
();

189 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

190 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

191 
	}
}

193 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

195 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 100);

197 
	`FakeTimeSîvi˚_SëMöuã
(100);

198 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

199 
	`LightScheduÀr_WakeUp
();

200 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

201 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

202 
	}
}

204 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

206 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 200);

208 
	`FakeTimeSîvi˚_SëMöuã
(200);

209 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

210 
	`LightScheduÀr_WakeUp
();

211 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

212 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

213 
	}
}

215 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

217 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

219 
	`FakeTimeSîvi˚_SëMöuã
(1000);

220 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

221 
	`LightScheduÀr_WakeUp
();

222 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

223 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

224 
	}
}

226 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

228 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

230 
	`FakeTimeSîvi˚_SëMöuã
(1000);

231 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

232 
	`LightScheduÀr_WakeUp
();

233 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

234 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

235 
	}
}

237 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

239 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

240 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

242 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

243 
	`FakeTimeSîvi˚_SëMöuã
(6000);

245 
	`LightScheduÀr_WakeUp
();

247 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

248 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

249 
	}
}

251 
	$TEST
(
LightScheduÀr
, 
RemoveMu…ùÀScheduÀdEvít
)

253 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

254 
	`LightScheduÀr_ScheduÀTu∫On
(7, 
MONDAY
, 600);

256 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

257 
	`LightScheduÀr_ScheduÀRemove
(7, 
MONDAY
, 600);

259 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

260 
	`FakeTimeSîvi˚_SëMöuã
(600);

262 
	`LightScheduÀr_WakeUp
();

264 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

265 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

266 
	}
}

268 
	$TEST
(
LightScheduÀr
, 
Reje˘sTooM™yEvíts
)

270 
i
;

271 
i
 = 0; i < 128; i++)

272 
	`LONGS_EQUAL
(
LS_OK
,

273 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

275 
	`LONGS_EQUAL
(
LS_TOO_MANY_EVENTS
,

276 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

277 
	}
}

279 
	$TEST
(
LightScheduÀr
, 
Ac˚±sVÆidLightIds
)

281 
	`LONGS_EQUAL
(
LS_OK
,

282 
	`LightScheduÀr_ScheduÀTu∫On
(0, 
MONDAY
, 600));

283 
	`LONGS_EQUAL
(
LS_OK
,

284 
	`LightScheduÀr_ScheduÀTu∫On
(15, 
MONDAY
, 600));

285 
	`LONGS_EQUAL
(
LS_OK
,

286 
	`LightScheduÀr_ScheduÀTu∫On
(31, 
MONDAY
, 600));

287 
	}
}

289 
	$TEST
(
LightScheduÀr
, 
Reje˘sInvÆidLightIds
)

291 
	`LONGS_EQUAL
(
LS_ID_OUT_OF_BOUNDS
,

292 
	`LightScheduÀr_ScheduÀTu∫On
(-1, 
MONDAY
, 600));

293 
	`LONGS_EQUAL
(
LS_ID_OUT_OF_BOUNDS
,

294 
	`LightScheduÀr_ScheduÀTu∫On
(32, 
MONDAY
, 600));

295 
	}
}

297 
	$TEST
(
LightScheduÀr
, 
RemoveRecy˛esEvítSlŸ
)

299 
i
;

300 
i
 = 0; i < 128; i++)

301 
	`LONGS_EQUAL
(
LS_OK
,

302 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

304 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

306 
	`LONGS_EQUAL
(
LS_OK
,

307 
	`LightScheduÀr_ScheduÀTu∫On
(13, 
MONDAY
, 1000));

308 
	}
}

310 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsSameTime
)

312 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 500);

313 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 500);

315 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

316 
	`FakeTimeSîvi˚_SëMöuã
(500);

318 
	`LightScheduÀr_WakeUp
();

319 
	`LONGS_EQUAL
(2, 
	`FakeLightC⁄åﬁÀr_gëEvítCou¡s
());

320 
	}
}

322 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsDif„ª¡Times
)

324 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 600);

325 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 500);

327 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

328 
	`FakeTimeSîvi˚_SëMöuã
(500);

330 
	`LightScheduÀr_WakeUp
();

331 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

332 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

334 
	`FakeTimeSîvi˚_SëMöuã
(600);

336 
	`LightScheduÀr_WakeUp
();

337 
	`LONGS_EQUAL
(4, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

338 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

339 
	}
}

341 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsFriday
)

343 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

344 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

345 
	`FakeTimeSîvi˚_SëMöuã
(1200);

346 
	`LightScheduÀr_WakeUp
();

347 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

348 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

349 
	}
}

351 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsS©urday
)

353 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 100);

354 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

355 
	`FakeTimeSîvi˚_SëMöuã
(100);

356 
	`LightScheduÀr_WakeUp
();

357 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

358 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

359 
	}
}

361 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsSunday
)

363 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
WEEKEND
, 1200);

364 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

365 
	`FakeTimeSîvi˚_SëMöuã
(1200);

366 
	`LightScheduÀr_WakeUp
();

367 
	`LONGS_EQUAL
(6, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

368 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

369 
	}
}

371 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsM⁄day
)

373 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

374 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

375 
	`FakeTimeSîvi˚_SëMöuã
(1200);

376 
	`LightScheduÀr_WakeUp
();

377 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

378 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

379 
	}
}

382 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEnd
)

384 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

385 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

386 
	`FakeTimeSîvi˚_SëMöuã
(1200);

387 
	`LightScheduÀr_WakeUp
();

388 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

389 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

390 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

391 
	`FakeTimeSîvi˚_SëMöuã
(1200);

392 
	`LightScheduÀr_WakeUp
();

393 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

394 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

395 
	`LightC⁄åﬁÀr_Tu∫Off
(3);

396 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

397 
	`FakeTimeSîvi˚_SëMöuã
(1200);

398 
	`LightScheduÀr_WakeUp
();

399 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

400 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

401 
	`LightC⁄åﬁÀr_Cª©e
();

402 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

403 
	`FakeTimeSîvi˚_SëMöuã
(1200);

404 
	`LightScheduÀr_WakeUp
();

405 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

406 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

407 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\RandomMinuteTest.cpp

9 
	~"°rög.h
"

10 
	~"CµUTe°/Te°H¨√ss.h
"

14 
	~"R™domMöuã.h
"

15 
	~<°dio.h
>

19 íum { 
BOUND
=30 };

21 
	$TEST_GROUP
(
R™domMöuã
)

23 
möuã
;

25 
	`£tup
()

27 
	`R™domMöuã_Cª©e
(
BOUND
);

28 
	`§™d
(1);

31 
	`ã¨down
()

35 
	`As£πMöuãIsInR™ge
()

37 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

39 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

40 
	`FAIL
("Minute out ofÑange");

43 
	}
};

47 
	$TEST
(
R™domMöuã
, 
GëIsInR™ge
)

49 
i
 = 0; i < 100; i++)

51 
möuã
 = 
	`R™domMöuã_Gë
();

52 
	`As£πMöuãIsInR™ge
();

54 
	}
}

58 
	$TEST
(
R™domMöuã
, 
AŒVÆuesPossibÀ
)

60 
hô
[2*
BOUND
 + 1];

61 
	`mem£t
(
hô
, 0, (hit));

63 
i
 = 0; i < 225; i++)

65 
möuã
 = 
	`R™domMöuã_Gë
();

66 
	`As£πMöuãIsInR™ge
();

67 
hô
[
möuã
 + 
BOUND
]++;

70 
i
 = 0; i < 2* 
BOUND
 + 1; i++) {

71 
	`CHECK
(
hô
[
i
] > 0);

73 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\LightController.h

9 #i‚de‡
D_LightC⁄åﬁÀr_H


10 
	#D_LightC⁄åﬁÀr_H


	)

17 
	~"LightDrivî.h
"

18 
	~"comm⁄.h
"

20 íum {
	mMAX_LIGHTS
 = 32};

22 
LightC⁄åﬁÀr_Cª©e
();

23 
LightC⁄åﬁÀr_De°roy
();

24 
BOOL
 
LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
*);

25 
LightC⁄åﬁÀr_Tu∫On
(
id
);

26 
LightC⁄åﬁÀr_Tu∫Off
(
id
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\LightScheduler.h

9 #i‚de‡
D_LightScheduÀr_H


10 
	#D_LightScheduÀr_H


	)

13 
LightScheduÀr_Cª©e
();

14 
LightScheduÀr_De°roy
();

15 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
day
, 
möuã
);

16 
LightScheduÀr_R™domize
(
id
, 
day
, 
möuã
);

17 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
);

18 
LightScheduÀr_ScheduÀRemove
(
id
, 
day
, 
möuã
);

19 
LightScheduÀr_WakeUp
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\RandomMinute.h

9 #i‚de‡
D_R™domMöuã_H


10 
	#D_R™domMöuã_H


	)

19 
R™domMöuã_Cª©e
(
bound
);

20 (*
R™domMöuã_Gë
)();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\AcmeWirelessLightDriver.h

9 #i‚de‡
D_AcmeWúñessLightDrivî_H


10 
	#D_AcmeWúñessLightDrivî_H


	)

17 
	~"LightDrivî.h
"

19 
AcmeWúñessLightDrivî
 
	tAcmeWúñessLightDrivî
;

21 
	eAcmeWúñess_Hou£Code
 { 
	mAcme_A
,
	mAcme_B
,
	mAcme_C
,
	mAcme_D
,
	mAcme_E
,
	mAcme_F
,
	mAcme_G
 } 
	tAcmeWúñess_Hou£Code
;

23 
AcmeWúñessLightDrivî
* 
AcmeWúñessLightDrivî_Cª©e
(
lightId
, 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
);

24 
AcmeWúñessLightDrivî_De°roy
(
LightDrivî
*);

25 
AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
*);

26 
AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\LightDriver.h

9 #i‚de‡
D_LightDrivî_H


10 
	#D_LightDrivî_H


	)

19 
LightDrivî
 
	tLightDrivî
;

20 
	eLightDrivîTy≥
 {

21 
	mTe°LightDrivî
,

22 
	mX10
,

23 
	mAcmeWúñess
,

24 
	mMem‹yM≠≥d


25 } 
	tLightDrivîTy≥
;

27 
	sLightDrivî


29 
LightDrivîTy≥
 
	mty≥
;

30 
	mid
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\MemMappedLightDriver.h

9 #i‚de‡
D_MemM≠≥dLightDrivî_H


10 
	#D_MemM≠≥dLightDrivî_H


	)

17 
	~"LightDrivî.h
"

18 
	~<°döt.h
>

20 
MemM≠≥dLightDrivî
 
	tMemM≠≥dLightDrivî
;

22 
MemM≠≥dLightDrivî
* 
MemM≠≥dLightDrivî_Cª©e
(
lightId
, 
uöt32_t
* 
addªss
);

23 
MemM≠≥dLightDrivî_De°roy
(
LightDrivî
*);

24 
MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
*);

25 
MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\X10LightDriver.h

9 #i‚de‡
D_X10LightDrivî_H


10 
	#D_X10LightDrivî_H


	)

17 
	~"LightDrivî.h
"

19 
X10LightDrivî
 
	tX10LightDrivî
;

21 
	eX10_Hou£Code
 { 
	mX10_A
,
	mX10_B
,
	mX10_C
,
	mX10_D
,
	mX10_E
,
	mX10_F
,

22 
	mX10_G
,
	mX10_H
,
	mX10_I
,
	mX10_J
,
	mX10_K
,
	mX10_L
,
	mX10_M
,
	mX10_N
,
	mX10_O
,
	mX10_P
 } 
	tX10_Hou£Code
;

24 
X10LightDrivî
* 
X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
code
, 
unô
);

25 
X10LightDrivî_De°roy
(
LightDrivî
*);

26 
X10LightDrivî_Tu∫On
(
LightDrivî
*);

27 
X10LightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\util\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

18 
	~"comm⁄.h
"

20 
	eDay
 {

21 
	mEVERYDAY
=-3, 
	mWEEKDAY
=-2, 
	mWEEKEND
=-1,

22 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


23 } 
	tDay
;

25 
	eM⁄th
 {

26 
	mJAN
=1, 
	mFEB
, 
	mMAR
, 
	mAPR
, 
	mMAY
, 
	mJUN
, 
	mJUL
, 
	mAUG
, 
	mSEP
, 
	mOCT
, 
	mNOV
, 
	mDEC


27 } 
	tM⁄th
;

30 
Time
 
	tTime
;

33 
	sTime


35 
	mu£c
;

36 
	m£c
;

37 
	mmöuãOfDay
;

38 
	mmöuãOfHour
;

39 
Day
 
	mdayOfWìk
;

40 
	mdayOfM⁄th
;

41 
M⁄th
 
	mm⁄th
;

44 
TimeSîvi˚_Cª©e
();

45 
TimeSîvi˚_De°roy
();

46 
TimeSîvi˚_GëMöuã
();

47 
TimeSîvi˚_GëDay
();

49 
TimeSîvi˚_GëTime
(
Time
*);

51 
BOOL
 
TimeSîvi˚_M©chesDayOfWìk
(
Time
*, 
Day
 
day
);

52 
BOOL
 
TimeSîvi˚_M©chesMöuãOfDay
(
Time
*, 
möuã
);

53 
BOOL
 
TimeSîvi˚_M©chesNow
(
ªa˘i⁄Day
, 
möuã
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\util\common.h

9 #i‚de‡
D_comm⁄_H


10 
	#D_comm⁄_H


	)

12 #i‚de‡
BOOL


13 
	#BOOL
 

	)

16 #i‚de‡
TRUE


17 
	#TRUE
 1

	)

20 #i‚de‡
FALSE


21 
	#FALSE
 0

	)

24 #i‚de‡
NULL


25 
	#NULL
 0

	)

30 
ex∂odesInTe°Envú⁄mít
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeRandomMinute.c

4 
	~"FakeR™domMöuã.h
"

5 
	~"CµUTe°/Te°H¨√ss_c.h
"

7 
	g£ed
 = -1;

8 
	gö¸emít
 = -1;

10 
	$FackR™domMöuã_Re£t
()

12 
£ed
 = -1;

13 
ö¸emít
 = -1;

14 
	}
}

16 
	$FakeR™domMöuã_SëFú°AndIn¸emít
(
s
, 
i
)

18 
£ed
 = 
s
;

19 
ö¸emít
 = 
i
;

20 
	}
}

22 
	$FakeR™domMöuã_Gë
()

24 
ªsu…
 = 
£ed
;

25 
£ed
 +
ö¸emít
;

26  
ªsu…
;

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeRandomMinute.h

5 #i‚de‡
D_FakeR™domMöuã_H


6 
	#D_FakeR™domMöuã_H


	)

13 
	~"R™domMöuã.h
"

15 
FakeR™domMöuã_SëFú°AndIn¸emít
(
£ed
, 
ö¸emít
);

16 
FakeR™domMöuã_Gë
();

17 
FackR™domMöuã_Re£t
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeService.c

5 
	~"TimeSîvi˚.h
"

8 
	gtheMöuã
;

9 
	gtheDay
;

11 
	$TimeSîvi˚_Cª©e
()

13 
theMöuã
 = -1;

14 
theDay
 = -1;

15 
	}
}

17 
	$TimeSîvi˚_De°roy
()

19 
	}
}

21 
	$TimeSîvi˚_GëTime
(
Time
* 
time
)

23 
time
->
möuãOfDay
 = 
theMöuã
;

24 
time
->
dayOfWìk
 = 
theDay
;

25 
	}
}

28 
	$TimeSîvi˚_GëMöuã
()

30  
theMöuã
;

31 
	}
}

33 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

35 
theMöuã
 = 
möuã
;

36 
	}
}

38 
	$FakeTimeSîvi˚_SëDay
(
day
)

40 
theDay
 = 
day
;

41 
	}
}

43 
	$TimeSîvi˚_GëDay
()

45  
theDay
;

46 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeService.h

7 #i‚de‡
D_FakeTimeSîvi˚_H


8 
	#D_FakeTimeSîvi˚_H


	)

17 
	~"TimeSîvi˚.h
"

19 
FakeTimeSîvi˚_SëMöuã
();

20 
FakeTimeSîvi˚_SëDay
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeServiceTest.cpp

5 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	~"TimeSîvi˚.h
"

10 
	~"FakeTimeSîvi˚.h
"

13 
	$TEST_GROUP
(
TimeSîvi˚
)

15 
	`£tup
()

17 
	`TimeSîvi˚_Cª©e
();

20 
	`ã¨down
()

22 
	`TimeSîvi˚_De°roy
();

24 
	}
};

26 
	$TEST
(
TimeSîvi˚
, 
Cª©e
)

28 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëMöuã
());

29 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëDay
());

30 
	}
}

32 
	$TEST
(
TimeSîvi˚
, 
Së
)

34 
	`FakeTimeSîvi˚_SëMöuã
(42);

35 
	`LONGS_EQUAL
(42, 
	`TimeSîvi˚_GëMöuã
());

36 
	`FakeTimeSîvi˚_SëDay
(3);

37 
	`LONGS_EQUAL
(3, 
	`TimeSîvi˚_GëDay
());

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpy.c

1 
	~"LightDrivîSpy.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

4 
	~"comm⁄.h
"

5 
	~"CµUTe°/Te°H¨√ss_c.h
"

8 
	sLightDrivîSpy


10 
LightDrivî
 
	mba£
;

13 
	g°©es
[
MAX_LIGHTS
];

14 
	gœ°Id
;

15 
	gœ°Sèã
;

17 
	$LightDrivîSpy_Re£t
()

19 
i
;

20 
i
 = 0; i < 
MAX_LIGHTS
; i++)

22 
°©es
[
i
] = 
LIGHT_STATE_UNKNOWN
;

24 
œ°Id
 = 
NO_LIGHT_ID
;

25 
œ°Sèã
 = 
LIGHT_STATE_UNKNOWN
;

26 
	}
}

28 
	$LightDrivîSpy_AddAŒToC⁄åﬁÀr
()

30 
i
;

31 
i
 = 0; i < 
MAX_LIGHTS
; i++)

33 
LightDrivî
* 
•y
 = (LightDrivî*)
	`LightDrivîSpy_Cª©e
(
i
);

34 
	`LightC⁄åﬁÀr_Add
(
i
, 
•y
);

36 
	}
}

39 
LightDrivîSpy
* 
	$LightDrivîSpy_Cª©e
(
id
)

41 
LightDrivîSpy
* 
£lf
 = 
	`mÆloc
((LightDriverSpy));

42 
£lf
->
ba£
.
ty≥
 = 
Te°LightDrivî
;

43 
£lf
->
ba£
.
id
 = id;

44  
£lf
;

45 
	}
}

47 
	$LightDrivîSpy_De°roy
(
LightDrivî
* 
su≥r
)

49 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

50 
°©es
[
£lf
->
ba£
.
id
] = 
LIGHT_STATE_UNKNOWN
;

51 
	`‰ì
(
£lf
);

52 
	}
}

54 
	$ßve
(
id
, 
°©e
)

56 
°©es
[
id
] = 
°©e
;

57 
œ°Id
 = 
id
;

58 
œ°Sèã
 = 
°©e
;

59 
	}
}

61 
	$LightDrivîSpy_Tu∫On
(
LightDrivî
* 
su≥r
)

63 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

64 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_ON
);

65 
	}
}

67 
	$LightDrivîSpy_Tu∫Off
(
LightDrivî
* 
su≥r
)

69 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

70 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_OFF
);

71 
	}
}

73 
	$LightDrivîSpy_GëSèã
(
id
)

75  
°©es
[
id
];

76 
	}
}

78 
	$LightDrivîSpy_GëLa°Id
()

80  
œ°Id
;

81 
	}
}

83 
	$LightDrivîSpy_GëLa°Sèã
()

85  
œ°Sèã
;

86 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpy.h

1 #i‚de‡
D_LightDrivîSpy_H


2 
	#D_LightDrivîSpy_H


	)

9 
	~"LightDrivî.h
"

10 
	~"LightC⁄åﬁÀr.h
"

12 íum { 
	mNO_LIGHT_ID
 = -1, 
	mLIGHT_STATE_UNKNOWN
 = -1, 
	mLIGHT_OFF
 = 0, 
	mLIGHT_ON
 = 1 };

14 
LightDrivîSpy
 
	tLightDrivîSpy
;

16 
LightDrivîSpy_Re£t
();

17 
LightDrivîSpy_AddAŒToC⁄åﬁÀr
();

18 
LightDrivîSpy
* 
LightDrivîSpy_Cª©e
(
id
);

19 
LightDrivîSpy_De°roy
(
LightDrivî
*);

20 
LightDrivîSpy_Tu∫On
(
LightDrivî
*);

21 
LightDrivîSpy_Tu∫Off
(
LightDrivî
*);

22 
LightDrivîSpy_GëSèã
(
id
);

23 
LightDrivîSpy_GëLa°Id
();

24 
LightDrivîSpy_GëLa°Sèã
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpyTest.cpp

3 
	~"LightDrivîSpy.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
LightDrivîSpy
)

11 
LightDrivîSpy
* 
lightDrivîSpy
;

13 
	`£tup
()

15 
	`LightDrivîSpy_Re£t
();

16 
lightDrivîSpy
 = 
	`LightDrivîSpy_Cª©e
(1);

19 
	`ã¨down
()

21 
	`LightDrivîSpy_De°roy
((
LightDrivî
*)
lightDrivîSpy
);

23 
	}
};

25 
	$TEST
(
LightDrivîSpy
, 
Cª©e
)

27 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

28 
	}
}

30 
	$TEST
(
LightDrivîSpy
, 
On
)

32 
	`LightDrivîSpy_Tu∫On
((
LightDrivî
*)
lightDrivîSpy
);

33 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

34 
	}
}

36 
	$TEST
(
LightDrivîSpy
, 
Off
)

38 
	`LightDrivîSpy_Tu∫Off
((
LightDrivî
*)
lightDrivîSpy
);

39 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(1));

40 
	}
}

42 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫On
)

44 
	`LightDrivîSpy_Tu∫Off
((
LightDrivî
*)
lightDrivîSpy
);

45 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

46 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëLa°Sèã
());

47 
	}
}

49 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫Off
)

51 
	`LightDrivîSpy_Tu∫On
((
LightDrivî
*)
lightDrivîSpy
);

52 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

53 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëLa°Sèã
());

54 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\LightController.c

9 
	~"LightC⁄åﬁÀr.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"X10LightDrivî.h
"

13 
	~"LightDrivîSpy.h
"

14 
	~"AcmeWúñessLightDrivî.h
"

15 
	~"MemM≠≥dLightDrivî.h
"

16 
	~"comm⁄.h
"

18 
	glightTy≥
 = 0;

20 
LightDrivî
* 
	glightDrivîs
[
MAX_LIGHTS
] = {
NULL
};

22 
	$LightC⁄åﬁÀr_Cª©e
()

24 
	`mem£t
(
lightDrivîs
, 0, (lightDrivers));

25 
	}
}

27 
	$de°roy
(
LightDrivî
* 
drivî
)

29 
drivî
->
ty≥
)

31 
X10
:

32 
	`X10LightDrivî_De°roy
(
drivî
);

34 
AcmeWúñess
:

35 
	`AcmeWúñessLightDrivî_De°roy
(
drivî
);

37 
Mem‹yM≠≥d
:

38 
	`MemM≠≥dLightDrivî_De°roy
(
drivî
);

40 
Te°LightDrivî
:

41 
	`LightDrivîSpy_De°roy
(
drivî
);

47 
	}
}

49 
	$LightC⁄åﬁÀr_De°roy
()

51 
i
;

52 
i
 = 0; i < 
MAX_LIGHTS
; i++)

54 
LightDrivî
* 
drivî
 = 
lightDrivîs
[
i
];

55 i‡(
drivî
 !
NULL
)

56 
	`de°roy
(
drivî
);

57 
lightDrivîs
[
i
] = 
NULL
;

59 
	}
}

61 
BOOL
 
	$LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
* 
lightDrivî
)

63 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

64  
FALSE
;

66 i‡(
lightDrivîs
[
id
] !
NULL
)

67 
	`de°roy
(
lightDrivîs
[
id
]);

69 
lightDrivîs
[
id
] = 
lightDrivî
;

70  
TRUE
;

71 
	}
}

74 
	$LightC⁄åﬁÀr_Tu∫On
(
id
)

76 
LightDrivî
* 
drivî
 = 
lightDrivîs
[
id
];

77 i‡(
NULL
 =
drivî
)

80 
drivî
->
ty≥
)

82 
X10
:

83 
	`X10LightDrivî_Tu∫On
(
drivî
);

85 
AcmeWúñess
:

86 
	`AcmeWúñessLightDrivî_Tu∫On
(
drivî
);

88 
Mem‹yM≠≥d
:

89 
	`MemM≠≥dLightDrivî_Tu∫On
(
drivî
);

91 
Te°LightDrivî
:

92 
	`LightDrivîSpy_Tu∫On
(
drivî
);

98 
	}
}

101 
	$LightC⁄åﬁÀr_Tu∫Off
(
id
)

103 
LightDrivî
* 
drivî
 = 
lightDrivîs
[
id
];

104 i‡(
NULL
 =
drivî
)

107 
drivî
->
ty≥
)

109 
X10
:

110 
	`X10LightDrivî_Tu∫Off
(
drivî
);

112 
AcmeWúñess
:

113 
	`AcmeWúñessLightDrivî_Tu∫Off
(
drivî
);

115 
Mem‹yM≠≥d
:

116 
	`MemM≠≥dLightDrivî_Tu∫Off
(
drivî
);

118 
Te°LightDrivî
:

119 
	`LightDrivîSpy_Tu∫Off
(
drivî
);

125 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\LightScheduler.c

9 
	~"LightScheduÀr.h
"

10 
	~"LightC⁄åﬁÀr.h
"

11 
	~"TimeSîvi˚.h
"

12 
	~"R™domMöuã.h
"

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

18 
	mTURNON
, 
	mTURNOFF
, 
	mDIM
, 
	mRANDOM_ON
, 
	mRANDOM_OFF


23 
	mMAX_EVENTS
 = 128, 
	mUNUSED
 = -1

28 
	mid
;

29 
Day
 
	mday
;

30 
	mmöuã
;

31 
	mevít
;

32 
	møndomize
;

33 
	møndomMöuãs
;

35 } 
	tScheduÀdLightEvít
;

37 
ScheduÀdLightEvít
 
	gevítLi°
[
MAX_EVENTS
];

39 
	$LightScheduÀr_Cª©e
()

41 
i
;

42 
i
 = 0; i < 
MAX_EVENTS
; i++)

44 
evítLi°
[
i
].
id
 = 
UNUSED
;

46 
	}
}

48 
	$LightScheduÀr_De°roy
()

50 
	}
}

52 
ª£tR™domize
(
ScheduÀdLightEvít
* 
e
);

54 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
evít
,

55 
øndomize
)

57 
i
;

59 
i
 = 0; i < 
MAX_EVENTS
; i++)

61 i‡(
evítLi°
[
i
].
id
 =
UNUSED
)

63 
evítLi°
[
i
].
id
 = id;

64 
evítLi°
[
i
].
day
 = day;

65 
evítLi°
[
i
].
möuã
 = minute;

66 
evítLi°
[
i
].
evít
 =Évent;

67 
evítLi°
[
i
].
øndomize
 =Ñandomize;

68 
	`ª£tR™domize
(&
evítLi°
[
i
]);

72 
	}
}

74 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

76 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_OFF
);

77 
	}
}

79 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
)

81 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
, 
RANDOM_OFF
);

82 
	}
}

84 
	$LightScheduÀr_R™domize
(
id
, 
Day
 
day
, 
möuã
)

86 
i
;

87 
i
 = 0; i < 
MAX_EVENTS
; i++)

89 
ScheduÀdLightEvít
* 
e
 = &
evítLi°
[
i
];

90 i‡(
e
->
id
 =id &&É->
day
 =day &&É->
möuã
 == minute)

92 
e
->
øndomize
 = 
RANDOM_ON
;

93 
	`ª£tR™domize
(
e
);

96 
	}
}

98 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

100 
i
;

102 
i
 = 0; i < 
MAX_EVENTS
; i++)

104 i‡(
evítLi°
[
i
].
id
 =id &&ÉvítLi°[i].
day
 == day

105 && 
evítLi°
[
i
].
möuã
 == minute)

107 
evítLi°
[
i
].
id
 = 
UNUSED
;

110 
	}
}

113 
BOOL
 
	$TimeSîvi˚_M©chesDayOfWìk
(
Time
* 
time
, 
Day
 
day
)

115 
today
 = 
time
->
dayOfWìk
;

117 i‡(
day
 =
EVERYDAY
)

118  
TRUE
;

119 i‡(
day
 =
today
)

120  
TRUE
;

121 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

122  
TRUE
;

123 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

124  
TRUE
;

125  
FALSE
;

126 
	}
}

130 
BOOL
 
	$m©chesDay
(
Time
* 
time
, 
ScheduÀdLightEvít
 * 
evít
)

132  
	`TimeSîvi˚_M©chesDayOfWìk
(
time
, 
evít
->
day
);

133 
	}
}

138 
BOOL
 
	$m©chesDay
(
Time
* 
time
, 
ScheduÀdLightEvít
 * 
evít
)

140 
today
 = 
time
->
dayOfWìk
;

141 
Day
 
day
 = 
evít
->day;

143 i‡(
day
 =
EVERYDAY
)

144  
TRUE
;

145 i‡(
day
 =
today
)

146  
TRUE
;

147 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

148  
TRUE
;

149 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

150  
TRUE
;

151  
FALSE
;

152 
	}
}

157 
	$›î©eLight
(
ScheduÀdLightEvít
* 
lightEvít
)

159 i‡(
TURNON
 =
lightEvít
->
evít
)

160 
	`LightC⁄åﬁÀr_Tu∫On
(
lightEvít
->
id
);

161 i‡(
TURNOFF
 =
lightEvít
->
evít
)

162 
	`LightC⁄åﬁÀr_Tu∫Off
(
lightEvít
->
id
);

163 
	}
}

165 
	$ª£tR™domize
(
ScheduÀdLightEvít
* 
e
)

167 i‡(
e
->
øndomize
 =
RANDOM_ON
)

168 
e
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

170 
e
->
øndomMöuãs
 = 0;

171 
	}
}

173 
BOOL
 
	$evítIsRódyToExecuã
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

175 
möuã
 = 
time
->
möuãOfDay
;

177 i‡(
evít
->
id
 =
UNUSED
)

178  
FALSE
;

179 i‡(!
	`m©chesDay
(
time
, 
evít
))

180  
FALSE
;

181 i‡(
möuã
 !
evít
->möuã +Évít->
øndomMöuãs
)

182  
FALSE
;

183  
TRUE
;

184 
	}
}

189 
	$LightScheduÀr_WakeUp
()

191 
i
;

192 
Time
 
time
;

194 
	`TimeSîvi˚_GëTime
(&
time
);

195 
Day
 
td
 = 
time
.
dayOfWìk
;

196 
mö
 = 
time
.
möuãOfDay
;

198 
i
 = 0; i < 
MAX_EVENTS
; i++)

200 
ScheduÀdLightEvít
* 
£
 = &
evítLi°
[
i
];

201 i‡(
£
->
id
 !
UNUSED
)

203 
Day
 
d
 = 
£
->
day
;

204 i‡–(
d
 =
EVERYDAY
Ë|| (d =
td
Ë|| (d =
WEEKEND
 &&

205 (
SATURDAY
 =
td
 || 
SUNDAY
 ==Åd)) ||

206 (
d
 =
WEEKDAY
 && (
td
 >
MONDAY


207 && 
td
 <
FRIDAY
)))

210 i‡(
mö
 =
£
->
möuã
 + se->
øndomMöuãs
)

212 i‡(
TURNON
 =
£
->
evít
)

213 
	`LightC⁄åﬁÀr_Tu∫On
(
£
->
id
);

214 i‡(
TURNOFF
 =
£
->
evít
)

215 
	`LightC⁄åﬁÀr_Tu∫Off
(
£
->
id
);

217 i‡(
£
->
øndomize
 =
RANDOM_ON
)

218 
£
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

220 
£
->
øndomMöuãs
 = 0;

226 
	}
}

232 
	$LightScheduÀr_WakeUp
()

234 
i
;

235 
Time
 
time
;

237 
	`TimeSîvi˚_GëTime
(&
time
);

238 
Day
 
today
 = 
time
.
dayOfWìk
;

239 
möuã
 = 
time
.
möuãOfDay
;

241 
i
 = 0; i < 
MAX_EVENTS
; i++)

243 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

244 i‡(
evít
->
id
 !
UNUSED
)

246 
Day
 
day
 = 
evít
->day;

247 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

248 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

249 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


250 && 
today
 <
FRIDAY
)))

253 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

255 i‡(
TURNON
 =
evít
->event)

256 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

257 i‡(
TURNOFF
 =
evít
->event)

258 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

260 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

261 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

263 
evít
->
øndomMöuãs
 = 0;

269 
	}
}

274 
	$LightScheduÀr_WakeUp
()

276 
i
;

277 
Time
 
time
;

279 
	`TimeSîvi˚_GëTime
(&
time
);

280 
Day
 
today
 = 
time
.
dayOfWìk
;

281 
möuã
 = 
time
.
möuãOfDay
;

283 
i
 = 0; i < 
MAX_EVENTS
; i++)

285 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

286 i‡(
evít
->
id
 !
UNUSED
)

288 
Day
 
day
 = 
evít
->day;

289 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

290 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

291 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


292 && 
today
 <
FRIDAY
)))

295 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

297 i‡(
TURNON
 =
evít
->event)

298 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

299 i‡(
TURNOFF
 =
evít
->event)

300 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

302 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

303 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

305 
evít
->
øndomMöuãs
 = 0;

310 
	}
}

315 
	$LightScheduÀr_WakeUp
()

317 
i
;

318 
Time
 
time
;

320 
	`TimeSîvi˚_GëTime
(&
time
);

321 
Day
 
today
 = 
time
.
dayOfWìk
;

322 
möuã
 = 
time
.
möuãOfDay
;

324 
i
 = 0; i < 
MAX_EVENTS
; i++)

328 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

329 i‡(
evít
->
id
 !
UNUSED
)

331 
Day
 
day
 = 
evít
->day;

333 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

334 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

335 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


336 && 
today
 <
FRIDAY
)))

339 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

342 i‡(
TURNON
 =
evít
->event)

343 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

344 i‡(
TURNOFF
 =
evít
->event)

345 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

348 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

349 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

351 
evít
->
øndomMöuãs
 = 0;

356 
	}
}

361 
	$LightScheduÀr_WakeUp
()

363 
i
;

364 
Time
 
time
;

366 
	`TimeSîvi˚_GëTime
(&
time
);

367 
Day
 
today
 = 
time
.
dayOfWìk
;

368 
möuã
 = 
time
.
möuãOfDay
;

370 
i
 = 0; i < 
MAX_EVENTS
; i++)

374 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

375 i‡(
evít
->
id
 !
UNUSED
)

379 
Day
 
day
 = 
evít
->day;

380 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

381 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

382 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


383 && 
today
 <
FRIDAY
)))

388 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

391 i‡(
TURNON
 =
evít
->event)

392 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

393 i‡(
TURNOFF
 =
evít
->event)

394 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

397 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

398 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

400 
evít
->
øndomMöuãs
 = 0;

406 
	}
}

410 
	$LightScheduÀr_WakeUp
()

412 
i
;

413 
Time
 
time
;

415 
	`TimeSîvi˚_GëTime
(&
time
);

416 
Day
 
today
 = 
time
.
dayOfWìk
;

417 
möuã
 = 
time
.
möuãOfDay
;

419 
i
 = 0; i < 
MAX_EVENTS
; i++)

421 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

424 i‡(
evít
->
id
 !
UNUSED
)

426 i‡(
	`m©chesDay
(&
time
, 
evít
))

429 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

431 
	`›î©eLight
(
evít
);

432 
	`ª£tR™domize
(
evít
);

437 
	}
}

442 
	$LightScheduÀr_WakeUp
()

444 
i
;

445 
Time
 
time
;

447 
	`TimeSîvi˚_GëTime
(&
time
);

448 
Day
 
today
 = 
time
.
dayOfWìk
;

449 
möuã
 = 
time
.
möuãOfDay
;

451 
i
 = 0; i < 
MAX_EVENTS
; i++)

453 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

457 i‡(
evít
->
id
 =
UNUSED
)

459 i‡(!
	`m©chesDay
(&
time
, 
evít
))

461 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

463 
	`›î©eLight
(
evít
);

464 
	`ª£tR™domize
(
evít
);

467 
	}
}

472 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

474 i‡(
	`evítIsRódyToExecuã
(
time
, 
evít
))

476 
	`›î©eLight
(
evít
);

477 
	`ª£tR™domize
(
evít
);

479 
	}
}

483 
	$LightScheduÀr_WakeUp
()

485 
i
;

486 
Time
 
time
;

488 
	`TimeSîvi˚_GëTime
(&
time
);

490 
i
 = 0; i < 
MAX_EVENTS
; i++)

492 
	`¥o˚ssEvítsDueNow
(&
time
, &
evítLi°
[
i
]);

494 
	}
}

498 
	$LightScheduÀr_WakeUp
()

500 
i
;

501 
Time
 
time
;

503 
	`TimeSîvi˚_GëTime
(&
time
);

505 
i
 = 0; i < 
MAX_EVENTS
; i++)

507 
ScheduÀdLightEvít
* 
evít
 = &
evítLi°
[
i
];

508 i‡(
	`evítIsRódyToExecuã
(&
time
, 
evít
))

510 
	`›î©eLight
(
evít
);

511 
	`ª£tR™domize
(
evít
);

514 
	}
}

520 
Day
 
	gday
 = 
evít
->
day
;

521 i‡(!(
	gday
 =
EVERYDAY
 || 
day
 =
today


522 ||(
day
 =
WEEKEND
 && (
SATURDAY
 =
today


523 || 
SUNDAY
 =
today
)Ë|| (
day
 =
WEEKDAY


524 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)))

527 i‡(!
	$m©chesToday
(
evít
))

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\RandomMinute.c

9 
	~"R™domMöuã.h
"

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

15 
	gbound
 = 0;

17 
	$R™domMöuã_Cª©e
(
b
)

19 
bound
 = 
b
;

20 
	}
}

23 
	$R™domMöuã_GëIm∂
()

26  
bound
 - 
	`ønd
() % (bound * 2 + 1);

27 
	}
}

29 (*
	gR™domMöuã_Gë
)(Ë
R™domMöuã_GëIm∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\AcmeWirelessLightDriver.c

9 
	~"AcmeWúñessLightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

15 
	sAcmeWúñessLightDrivî


17 
LightDrivî
 
	mba£
;

18 
	mch™√l
;

19 
	mkey
;

20 * 
	mssid
;

21 * 
	mwï
;

25 
AcmeWúñessLightDrivî
* 
	$AcmeWúñessLightDrivî_Cª©e
(
id
, 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
)

27 
AcmeWúñessLightDrivî
* 
£lf
 = 
	`mÆloc
((AcmeWirelessLightDriver));

28 
	`mem£t
(
£lf
, 0, (
AcmeWúñessLightDrivî
));

29 
£lf
->
ba£
.
ty≥
 = 
AcmeWúñess
;

30 
£lf
->
ba£
.
id
 = id;

31  
£lf
;

32 
	}
}

34 
	$AcmeWúñessLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

36 
	`‰ì
(
su≥r
);

37 
	}
}

39 
	$AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

41 
	`ex∂odesInTe°Envú⁄mít
();

42 
	}
}

44 
	$AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

46 
	`ex∂odesInTe°Envú⁄mít
();

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\MemMappedLightDriver.c

9 
	~"MemM≠≥dLightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

15 
	sMemM≠≥dLightDrivî


17 
LightDrivî
 
	mba£
;

18 
uöt32_t
* 
	maddªss
;

22 
MemM≠≥dLightDrivî
* 
	$MemM≠≥dLightDrivî_Cª©e
(
id
, 
uöt32_t
* 
addªss
)

24 
MemM≠≥dLightDrivî
* 
£lf
 = 
	`mÆloc
((MemMappedLightDriver));

25 
	`mem£t
(
£lf
, 0, (
MemM≠≥dLightDrivî
));

26 
£lf
->
ba£
.
ty≥
 = 
Mem‹yM≠≥d
;

27 
£lf
->
ba£
.
id
 = id;

28  
£lf
;

29 
	}
}

31 
	$MemM≠≥dLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

33 
	`‰ì
(
su≥r
);

34 
	}
}

36 
	$MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

38 
	`ex∂odesInTe°Envú⁄mít
();

39 
	}
}

41 
	$MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

43 
	`ex∂odesInTe°Envú⁄mít
();

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\X10LightDriver.c

9 
	~"X10LightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

16 
	sX10LightDrivî


18 
LightDrivî
 
	mba£
;

19 
X10_Hou£Code
 
	mhou£
;

20 
	munô
;

25 
X10LightDrivî
* 
	$X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
hou£
, 
unô
)

27 
X10LightDrivî
* 
£lf
 = 
	`mÆloc
((X10LightDriver));

28 
	`mem£t
(
£lf
, 0, (
X10LightDrivî
));

29 
£lf
->
ba£
.
ty≥
 = 
X10
;

30 
£lf
->
ba£
.
id
 = id;

31 
£lf
->
hou£
 = house;

32 
£lf
->
unô
 = unit;

33  
£lf
;

34 
	}
}

36 
	$X10LightDrivî_De°roy
(
LightDrivî
* 
£lf
)

38 
	`‰ì
(
£lf
);

39 
	}
}

41 
	$X10LightDrivî_Tu∫On
(
LightDrivî
* 
£lf
)

43 
	`ex∂odesInTe°Envú⁄mít
();

44 
	}
}

46 
	$X10LightDrivî_Tu∫Off
(
LightDrivî
* 
£lf
)

48 
	`ex∂odesInTe°Envú⁄mít
();

49 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\TimeService.c

9 
	~"TimeSîvi˚.h
"

10 
	~"comm⁄.h
"

14 
	$TimeSîvi˚_Cª©e
()

17 
	`ex∂odesInTe°Envú⁄mít
();

18 
	}
}

20 
	$TimeSîvi˚_De°roy
()

23 
	`ex∂odesInTe°Envú⁄mít
();

24 
	}
}

26 
	$TimeSîvi˚_GëMöuã
()

29 
	`ex∂odesInTe°Envú⁄mít
();

31 
	}
}

33 
	$TimeSîvi˚_GëDay
()

36 
	`ex∂odesInTe°Envú⁄mít
();

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\TimeService_Helpers.c

9 
	~"TimeSîvi˚.h
"

11 
BOOL
 
	$TimeSîvi˚_M©chesNow
(
Day
 
day
, 
möuã
)

13 
today
 = 
	`TimeSîvi˚_GëDay
();

15 i‡(
	`TimeSîvi˚_GëMöuã
(Ë!
möuã
)

16  
FALSE
;

18 i‡(
day
 =
EVERYDAY
)

19  
TRUE
;

20 i‡(
day
 =
today
)

21  
TRUE
;

22 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

23  
TRUE
;

24 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

25  
TRUE
;

26  
FALSE
;

27 
	}
}

29 
BOOL
 
	$TimeSîvi˚_M©chesDayOfWìk
(
Time
* 
time
, 
Day
 
day
)

31 
today
 = 
time
->
dayOfWìk
;

33 i‡(
day
 =
EVERYDAY
)

34  
TRUE
;

35 i‡(
day
 =
today
)

36  
TRUE
;

37 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

38  
TRUE
;

39 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

40  
TRUE
;

41  
FALSE
;

42 
	}
}

44 
BOOL
 
	$TimeSîvi˚_M©chesMöuãOfDay
(
Time
* 
time
, 
möuã
)

46 i‡(
time
->
möuãOfDay
 !
möuã
)

47  
FALSE
;

49  
TRUE
;

50 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\common.c

9 
	~"comm⁄.h
"

10 
	~<as£π.h
>

12 
	$ex∂odesInTe°Envú⁄mít
()

14 
	`as£π
(0 == "Explode - intercepted callÅhat cannot be made inÅestÉnvironment");

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
	`RUN_ALL_TESTS
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\LightControllerTest.cpp

11 
	~"LightC⁄åﬁÀr.h
"

12 
	~"LightDrivîSpy.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

18 
	$TEST_GROUP
(
LightC⁄åﬁÀr
)

20 
	`£tup
()

22 
	`LightC⁄åﬁÀr_Cª©e
();

23 
	`LightDrivîSpy_AddAŒToC⁄åﬁÀr
();

26 
	`ã¨down
()

28 
	`LightC⁄åﬁÀr_De°roy
();

30 
	}
};

32 
	$TEST
(
LightC⁄åﬁÀr
, 
Cª©eDe°roy
)

34 
	}
}

36 
	$TEST
(
LightC⁄åﬁÀr
, 
DrivîIsDe°royedByLightC⁄åﬁÀr
)

38 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(1);

39 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
*)
•y
);

40 
	}
}

42 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫On
)

44 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(1);

45 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
*)
•y
);

46 
	`LightC⁄åﬁÀr_Tu∫On
(1);

47 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

48 
	}
}

50 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫Off
)

52 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(1);

53 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
*)
•y
);

54 
	`LightC⁄åﬁÀr_Tu∫Off
(1);

55 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(1));

56 
	}
}

58 
	$TEST
(
LightC⁄åﬁÀr
, 
AŒDrivîsDe°royed
)

60 
i
 = 0; i < 
MAX_LIGHTS
; i++)

62 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
i
);

63 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
i
, (
LightDrivî
*)
•y
));

65 
	}
}

67 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdLowîR™ge
)

69 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(0);

70 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(0, (
LightDrivî
*)
•y
));

71 
	}
}

73 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdUµîR™ge
)

75 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

76 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
-1, (
LightDrivî
*)
•y
));

77 
	}
}

79 
	$TEST
(
LightC⁄åﬁÀr
, 
InVÆidIdBey⁄dUµîR™ge
)

81 
LightDrivîSpy
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

82 
	`LONGS_EQUAL
(
FALSE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
, (
LightDrivî
*)
•y
));

83 
	`‰ì
(
•y
);

84 
	}
}

86 
	$TEST
(
LightC⁄åﬁÀr
, 
N⁄AddedLightD€sNŸhög
)

88 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
*)
NULL
);

89 
	`LightC⁄åﬁÀr_Tu∫On
(1);

90 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

91 
	`LightC⁄åﬁÀr_Tu∫Off
(1);

92 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

93 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\LightSchedulerTest.cpp

11 
	~"LightScheduÀr.h
"

12 
	~"LightDrivîSpy.h
"

13 
	~"FakeTimeSîvi˚.h
"

14 
	~"FakeR™domMöuã.h
"

17 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
LightScheduÀr
)

21 
scheduÀdMöuã
;

22 
ex≥˘edId
;

23 
ex≥˘edLevñ
;

24 
lightNumbî
;

25 
fú°R™domMöuã
;

28 (*
ßvedR™domMöuã_Gë
)();

30 
	`£tup
()

33 
ßvedR™domMöuã_Gë
 = 
R™domMöuã_Gë
;

34 
R™domMöuã_Gë
 = 
FakeR™domMöuã_Gë
;

37 
	`ã¨down
()

40 
R™domMöuã_Gë
 = 
ßvedR™domMöuã_Gë
;

46 
	`£tup
()

49 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

52 
	`ã¨down
()

59 
	`£tup
()

61 
	`LightC⁄åﬁÀr_Cª©e
();

62 
	`LightDrivîSpy_Re£t
();

63 
	`LightDrivîSpy_AddAŒToC⁄åﬁÀr
();

64 
	`LightScheduÀr_Cª©e
();

66 
scheduÀdMöuã
 = 1234;

67 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

68 
lightNumbî
 = 4;

70 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

71 
	`FackR™domMöuã_Re£t
();

72 
fú°R™domMöuã
 = -10;

75 
	`ã¨down
()

77 
	`LightScheduÀr_De°roy
();

78 
	`LightC⁄åﬁÀr_De°roy
();

82 
	`whíItBecomes
(
day
, 
möuã
)

84 
	`FakeTimeSîvi˚_SëDay
(
day
);

85 
	`FakeTimeSîvi˚_SëMöuã
(
möuã
);

86 
	`LightScheduÀr_WakeUp
();

89 
	`thíEx≥˘
(
id
, 
Àvñ
)

91 
	`LONGS_EQUAL
(
id
, 
	`LightDrivîSpy_GëLa°Id
());

92 
	`LONGS_EQUAL
(
Àvñ
, 
	`LightDrivîSpy_GëLa°Sèã
());

96 
	}
};

98 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

100 
	`LONGS_EQUAL
(
NO_LIGHT_ID
, 
	`LightDrivîSpy_GëLa°Id
());

101 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëLa°Sèã
());

102 
	}
}

104 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

106 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

107 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
-1);

108 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

109 
	}
}

111 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayItsTime
)

113 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

114 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

115 
	`thíEx≥˘
(3, 
LIGHT_ON
);

116 
	}
}

118 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayAndItsTime
)

120 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

121 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

122 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

123 
	}
}

125 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

127 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

128 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

129 
	`thíEx≥˘
(3, 
LIGHT_ON
);

130 
	}
}

132 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

134 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
TUESDAY
, 
scheduÀdMöuã
);

135 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

136 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_OFF
);

137 
	}
}

140 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

142 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

143 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

144 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_OFF
);

145 
	}
}

149 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAtTheScheduÀdTime
)

151 
	`giví
(
lightNumbî
); 
	`isScheduÀdF‹
(
WEEKEND
); 
	`toTu∫OffAt
(
scheduÀdMöuã
);

152 
	`whíItBecomes
(
SATURDAY
); 
	`©
(
scheduÀdMöuã
);

153 
	`thí
(
lightNumbî
); 
	`is
(
LIGHT_OFF
);

154 
	}
}

157 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

159 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

160 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

161 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

162 
	}
}

164 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

166 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

167 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

168 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

169 
	}
}

171 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

173 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

174 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

175 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

176 
	}
}

178 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

180 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

181 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

182 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

183 
	}
}

185 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

187 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

188 
	`whíItBecomes
(
FRIDAY
, 
scheduÀdMöuã
);

189 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

190 
	}
}

192 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

194 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

195 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

196 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

197 
	}
}

199 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

201 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 
scheduÀdMöuã
);

202 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 
scheduÀdMöuã
);

204 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

205 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

206 
	}
}

208 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsSameTime
)

210 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

211 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
);

213 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

215 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(4));

216 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(3));

217 
	}
}

219 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsDif„ª¡Times
)

221 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

222 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
+1);

224 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

225 
	`thíEx≥˘
(4, 
LIGHT_OFF
);

227 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
+1);

228 
	`thíEx≥˘
(3, 
LIGHT_ON
);

229 
	}
}

232 
	$TEST
(
LightScheduÀr
, 
E«bÀR™domize
)

234 
	`FakeR™domMöuã_SëFú°AndIn¸emít
(10, 1);

236 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

237 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

239 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

240 
	`thíEx≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

242 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 10);

243 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

244 
	}
}

247 
	$TEST
(
LightScheduÀr
, 
Dif„ª¡R™dmomFa˘‹TheSec⁄dDay
)

249 
	`FakeR™domMöuã_SëFú°AndIn¸emít
(
fú°R™domMöuã
, 1);

251 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

252 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

254 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
fú°R™domMöuã
);

255 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

256 
	}
}

258 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀR™domC⁄åﬁs
)

260 
	`FakeR™domMöuã_SëFú°AndIn¸emít
(
fú°R™domMöuã
, 5);

262 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

263 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

264 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
+1, 
EVERYDAY
, 
scheduÀdMöuã
+3);

265 
	`LightScheduÀr_R™domize
(
lightNumbî
+1, 
EVERYDAY
, 
scheduÀdMöuã
+3);

267 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
fú°R™domMöuã
);

268 
	`thíEx≥˘
(
lightNumbî
, 
LIGHT_ON
);

270 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 +
fú°R™domMöuã
 + 3 + 5);

271 
	`thíEx≥˘
(
lightNumbî
+1, 
LIGHT_ON
);

272 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\RandomMinuteTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"R™domMöuã.h
"

18 íum { 
BOUND
=30 };

20 
	$TEST_GROUP
(
R™domMöuã
)

23 
	`£tup
()

25 
	`R™domMöuã_Cª©e
(
BOUND
);

28 
	`ã¨down
()

31 
	}
}

34 
	$TEST
(
R™domMöuã
, 
GëIsInR™ge
)

36 
möuã
;

38 
i
 = 0; i < 100; i++)

40 
möuã
 = 
	`R™domMöuã_Gë
();

41 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

43 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

44 
	`FAIL
("Minute out ofÑange");

47 
	}
}

49 
	$TEST
(
R™domMöuã
, 
AŒVÆuesPossibÀ
)

51 
möuã
;

52 
hô
[2*
BOUND
 + 1];

53 
	`mem£t
(
hô
, 0, (hit));

55 
i
 = 0; i < 500; i++)

57 
möuã
 = 
	`R™domMöuã_Gë
();

58 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

60 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

61 
	`FAIL
("Minute out ofÑange");

63 
hô
[
möuã
 + 
BOUND
]++;

67 
j
 = 0; j < 2*(
BOUND
) + 1; j++) {

68 
	`CHECK
(
hô
[
j
] > 0);

70 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\AcmeWirelessLightDriverTest.cpp

11 
	~"AcmeWúñessLightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
AcmeWúñessLightDrivî
)

19 
AcmeWúñessLightDrivî
* 
acmeWúñessLightDrivî
;

21 
	`£tup
()

23 
acmeWúñessLightDrivî
 = 
	`AcmeWúñessLightDrivî_Cª©e
(1, 
Acme_G
, 16);

26 
	`ã¨down
()

28 
	`AcmeWúñessLightDrivî_De°roy
((
LightDrivî
*)
acmeWúñessLightDrivî
);

30 
	}
};

32 
	$TEST
(
AcmeWúñessLightDrivî
, 
Cª©e
)

34 
LightDrivî
* 
drivî
 = (LightDrivî*)
acmeWúñessLightDrivî
;

35 
	`LONGS_EQUAL
(
AcmeWúñess
, 
drivî
->
ty≥
);

36 
	`LONGS_EQUAL
(1, 
drivî
->
id
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\MemMappedLightDriverTest.cpp

11 
	~"MemM≠≥dLightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
MemM≠≥dLightDrivî
)

21 
MemM≠≥dLightDrivî
* 
memM≠≥dLightDrivî
;

22 
uöt32_t
 
mockLights
;

24 
	`£tup
()

26 
memM≠≥dLightDrivî
 = 
	`MemM≠≥dLightDrivî_Cª©e
(4, &
mockLights
);

29 
	`ã¨down
()

31 
	`MemM≠≥dLightDrivî_De°roy
–(
LightDrivî
*)
memM≠≥dLightDrivî
);

33 
	}
};

35 
	$TEST
(
MemM≠≥dLightDrivî
, 
Cª©e
)

37 
LightDrivî
* 
drivî
 = (LightDrivî*)
memM≠≥dLightDrivî
;

38 
	`LONGS_EQUAL
(
Mem‹yM≠≥d
, 
drivî
->
ty≥
);

39 
	`LONGS_EQUAL
(4, 
drivî
->
id
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\X10LightDriverTest.cpp

11 
	~"X10LightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
X10LightDrivî
)

19 
X10LightDrivî
* 
x10LightDrivî
;

21 
	`£tup
()

23 
x10LightDrivî
 = 
	`X10LightDrivî_Cª©e
(1, 
X10_A
, 12);

26 
	`ã¨down
()

28 
	`X10LightDrivî_De°roy
((
LightDrivî
*)
x10LightDrivî
);

30 
	}
};

32 
	$TEST
(
X10LightDrivî
, 
Cª©e
)

34 
LightDrivî
* 
drivî
 = (LightDrivî*)
x10LightDrivî
;

35 
	`LONGS_EQUAL
(
X10
, 
drivî
->
ty≥
);

36 
	`LONGS_EQUAL
(1, 
drivî
->
id
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\util\TimeServiceHelpersTest.cpp

11 
	~<mem‹y.h
>

12 
	~"FakeTimeSîvi˚.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
TimeSîvi˚Hñ≥rs
)

19 
Time
 
time
;

20 
	`£tup
()

22 
	`TimeSîvi˚_Cª©e
();

25 
	`givíTh©ItIs
(
Day
 
day
)

27 
	`FakeTimeSîvi˚_SëDay
(
day
);

28 
	`TimeSîvi˚_GëTime
(&
time
);

30 
	}
};

32 
	$TEST
(
TimeSîvi˚Hñ≥rs
, 
Exa˘M©ch
)

34 
	`givíTh©ItIs
(
MONDAY
);

35 
	`CHECK
(
	`TimeSîvi˚_M©chesDayOfWìk
(&
time
, 
MONDAY
));

36 
	}
}

38 
	$TEST
(
TimeSîvi˚Hñ≥rs
, 
WìkídDays
)

40 
	`givíTh©ItIs
(
SATURDAY
);

41 
	`CHECK
(
	`TimeSîvi˚_M©chesDayOfWìk
(&
time
, 
WEEKEND
));

42 
	`givíTh©ItIs
(
SUNDAY
);

43 
	`CHECK
(
	`TimeSîvi˚_M©chesDayOfWìk
(&
time
, 
WEEKEND
));

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\LightController.h

11 #i‚de‡
D_LightC⁄åﬁÀr_H


12 
	#D_LightC⁄åﬁÀr_H


	)

19 
	~"LightDrivî.h
"

20 
	~"comm⁄.h
"

22 íum {
	mMAX_LIGHTS
 = 32};

24 
LightC⁄åﬁÀr_Cª©e
(
LightDrivîTy≥
);

25 
LightC⁄åﬁÀr_De°roy
();

26 
LightC⁄åﬁÀr_Tu∫On
(
id
);

27 
LightC⁄åﬁÀr_Tu∫Off
(
id
);

28 
BOOL
 
LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
*);

30 
LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(

31 
LightDrivîFun˘i⁄
* 
De°roy
,

32 
LightDrivîFun˘i⁄
* 
Tu∫On
,

33 
LightDrivîFun˘i⁄
* 
Tu∫Off
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\LightScheduler.h

11 #i‚de‡
D_LightScheduÀr_H


12 
	#D_LightScheduÀr_H


	)

20 
LightScheduÀr_Cª©e
();

21 
LightScheduÀr_De°roy
();

22 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
day
, 
möuã
);

23 
LightScheduÀr_R™domize
(
id
, 
day
, 
möuã
);

24 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
);

25 
LightScheduÀr_ScheduÀRemove
(
id
, 
day
, 
möuã
);

26 
LightScheduÀr_WakeUp
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\RandomMinute.h

11 #i‚de‡
D_R™domMöuã_H


12 
	#D_R™domMöuã_H


	)

19 
	~<°dlib.h
>

21 
R™domMöuã_Cª©e
(
bound
);

22 (*
R™domMöuã_Gë
)();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\AcmeWirelessLightDriver.h

11 #i‚de‡
D_AcmeWúñessLightDrivî_H


12 
	#D_AcmeWúñessLightDrivî_H


	)

19 
	~"LightDrivî.h
"

21 
AcmeWúñessLightDrivî
 
	tAcmeWúñessLightDrivî
;

23 
	eAcmeWúñess_Hou£Code
 { 
	mAcme_A
,
	mAcme_B
,
	mAcme_C
,
	mAcme_D
,
	mAcme_E
,
	mAcme_F
,
	mAcme_G
 } 
	tAcmeWúñess_Hou£Code
;

25 
AcmeWúñessLightDrivî
* 
AcmeWúñessLightDrivî_Cª©e
(
lightId
, 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
);

26 
AcmeWúñessLightDrivî_De°roy
(
LightDrivî
*);

27 
AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
*);

28 
AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\LightDriver.h

11 #i‚de‡
D_LightDrivî_H


12 
	#D_LightDrivî_H


	)

20 
LightDrivî
 
	tLightDrivî
;

22 
	tLightDrivîFun˘i⁄
(
	tLightDrivî
 *);

24 
	eLightDrivîTy≥
 {

25 
	mUnknown
,

26 
	mX10
,

27 
	mAcmeWúñess
,

28 
	mMem‹yM≠≥d


29 } 
	tLightDrivîTy≥
;

31 
	sLightDrivî


33 
LightDrivîTy≥
 
	mty≥
;

34 
	mid
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\MemMappedLightDriver.h

11 #i‚de‡
D_MemM≠≥dLightDrivî_H


12 
	#D_MemM≠≥dLightDrivî_H


	)

19 
	~"LightDrivî.h
"

20 
	~<°döt.h
>

22 
MemM≠≥dLightDrivî
 
	tMemM≠≥dLightDrivî
;

24 
MemM≠≥dLightDrivî
* 
MemM≠≥dLightDrivî_Cª©e
(
lightId
, 
uöt32_t
* 
addªss
);

25 
MemM≠≥dLightDrivî_De°roy
(
LightDrivî
*);

26 
MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
*);

27 
MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\X10LightDriver.h

11 #i‚de‡
D_X10LightDrivî_H


12 
	#D_X10LightDrivî_H


	)

19 
	~"LightDrivî.h
"

21 
X10LightDrivî
 
	tX10LightDrivî
;

23 
	eX10_Hou£Code
 { 
	mX10_A
,
	mX10_B
,
	mX10_C
,
	mX10_D
,
	mX10_E
,
	mX10_F
,

24 
	mX10_G
,
	mX10_H
,
	mX10_I
,
	mX10_J
,
	mX10_K
,
	mX10_L
,
	mX10_M
,
	mX10_N
,
	mX10_O
,
	mX10_P
 } 
	tX10_Hou£Code
;

26 
X10LightDrivî
* 
X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
code
, 
unô
);

27 
X10LightDrivî_De°roy
(
LightDrivî
*);

28 
X10LightDrivî_Tu∫On
(
LightDrivî
*);

29 
X10LightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\RuntimeError.h

9 #i‚de‡
D_Ru¡imeEº‹_H


10 
	#D_Ru¡imeEº‹_H


	)

12 
Ru¡imeEº‹
(* 
des¸ùti⁄
, 
∑ømëî
, * 
fûe
, 
löe
);

14 
	#RUNTIME_ERROR
(
des¸ùti⁄
, 
∑ømëî
Ë
	`Ru¡imeEº‹
(des¸ùti⁄,Ö¨amëî, 
__FILE__
, 
__LINE__
)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

18 
	~"comm⁄.h
"

20 
	eDay
 {

21 
	mEVERYDAY
=-3, 
	mWEEKDAY
=-2, 
	mWEEKEND
=-1,

22 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


23 } 
	tDay
;

25 
	eM⁄th
 {

26 
	mJAN
=1, 
	mFEB
, 
	mMAR
, 
	mAPR
, 
	mMAY
, 
	mJUN
, 
	mJUL
, 
	mAUG
, 
	mSEP
, 
	mOCT
, 
	mNOV
, 
	mDEC


27 } 
	tM⁄th
;

30 
Time
 
	tTime
;

33 
	sTime


35 
	mu£c
;

36 
	m£c
;

37 
	mmöuãOfDay
;

38 
	mmöuãOfHour
;

39 
Day
 
	mdayOfWìk
;

40 
	mdayOfM⁄th
;

41 
M⁄th
 
	mm⁄th
;

44 
TimeSîvi˚_Cª©e
();

45 
TimeSîvi˚_De°roy
();

46 
TimeSîvi˚_GëMöuã
();

47 
TimeSîvi˚_GëDay
();

49 
TimeSîvi˚_GëTime
(
Time
*);

51 
BOOL
 
Time_M©chesDayOfWìk
(
Time
*, 
Day
 
day
);

52 
BOOL
 
Time_M©chesMöuãOfDay
(
Time
*, 
möuã
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\common.h

11 #i‚de‡
D_comm⁄_H


12 
	#D_comm⁄_H


	)

14 #i‚de‡
BOOL


15 
	#BOOL
 

	)

18 #i‚de‡
TRUE


19 
	#TRUE
 1

	)

22 #i‚de‡
FALSE


23 
	#FALSE
 0

	)

26 #i‚de‡
NULL


27 
	#NULL
 0

	)

32 
ex∂odesInTe°Envú⁄mít
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeRandomMinute.c

7 
	~"FakeR™domMöuã.h
"

8 
	~"CµUTe°/Te°H¨√ss_c.h
"

10 
	g£ed
 = -1;

11 
	gö¸emít
 = -1;

13 
	$FakeR™domMöuã_Re£t
()

15 
£ed
 = -1;

16 
ö¸emít
 = -1;

17 
	}
}

19 
	$FakeR™domMöuã_SëSìdAndIn¸emít
(
s
, 
i
)

21 
£ed
 = 
s
;

22 
ö¸emít
 = 
i
;

23 
	}
}

25 
	$FakeR™domMöuã_Gë
()

27 
ªsu…
 = 
£ed
;

28 
£ed
 +
ö¸emít
;

29  
ªsu…
;

30 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeRandomMinute.h

7 #i‚de‡
D_MockR™domMöuã_H


8 
	#D_MockR™domMöuã_H


	)

15 
	~"R™domMöuã.h
"

17 
FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 
ö¸emít
);

18 
FakeR™domMöuã_Gë
();

19 
FakeR™domMöuã_Re£t
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeService.c

6 
	~"TimeSîvi˚.h
"

9 
	gtheMöuã
;

10 
	gtheDay
;

12 
	$TimeSîvi˚_Cª©e
()

14 
theMöuã
 = -1;

15 
theDay
 = -1;

16 
	}
}

18 
	$TimeSîvi˚_De°roy
()

20 
	}
}

22 
	$TimeSîvi˚_GëTime
(
Time
* 
time
)

24 
time
->
möuãOfDay
 = 
theMöuã
;

25 
time
->
dayOfWìk
 = 
theDay
;

26 
	}
}

28 
	$TimeSîvi˚_GëMöuã
()

30  
theMöuã
;

31 
	}
}

33 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

35 
theMöuã
 = 
möuã
;

36 
	}
}

38 
	$FakeTimeSîvi˚_SëDay
(
day
)

40 
theDay
 = 
day
;

41 
	}
}

43 
	$TimeSîvi˚_GëDay
()

45  
theDay
;

46 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeService.h

7 #i‚de‡
D_FakeTimeSîvi˚_H


8 
	#D_FakeTimeSîvi˚_H


	)

17 
	~"TimeSîvi˚.h
"

19 
FakeTimeSîvi˚_SëMöuã
();

20 
FakeTimeSîvi˚_SëDay
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeServiceTest.cpp

7 
	~"CµUTe°/Te°H¨√ss.h
"

11 
	~"TimeSîvi˚.h
"

12 
	~"FakeTimeSîvi˚.h
"

15 
	$TEST_GROUP
(
TimeSîvi˚
)

17 
	`£tup
()

19 
	`TimeSîvi˚_Cª©e
();

22 
	`ã¨down
()

24 
	`TimeSîvi˚_De°roy
();

26 
	}
};

28 
	$TEST
(
TimeSîvi˚
, 
Cª©e
)

30 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëMöuã
());

31 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëDay
());

32 
	}
}

34 
	$TEST
(
TimeSîvi˚
, 
Së
)

36 
	`FakeTimeSîvi˚_SëMöuã
(42);

37 
	`LONGS_EQUAL
(42, 
	`TimeSîvi˚_GëMöuã
());

38 
	`FakeTimeSîvi˚_SëDay
(3);

39 
	`LONGS_EQUAL
(3, 
	`TimeSîvi˚_GëDay
());

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpy.c

7 
	~"LightDrivîSpy.h
"

8 
	~<°dlib.h
>

9 
	~<mem‹y.h
>

10 
	~"comm⁄.h
"

11 
	~"CµUTe°/Te°H¨√ss_c.h
"

14 
	sLightDrivîSpy


16 
LightDrivî
 
	mba£
;

19 
	g°©es
[
MAX_LIGHTS
];

20 
	gœ°Id
;

21 
	gœ°Sèã
;

23 
	$LightDrivîSpy_Re£t
()

25 
i
;

26 
i
 = 0; i < 
MAX_LIGHTS
; i++)

28 
°©es
[
i
] = 
LIGHT_STATE_UNKNOWN
;

30 
œ°Id
 = 
NO_LIGHT_ID
;

31 
œ°Sèã
 = 
LIGHT_STATE_UNKNOWN
;

32 
	}
}

35 
	$LightDrivîSpy_AddSpõsToC⁄åﬁÀr
()

37 
i
;

38 
i
 = 0; i < 
MAX_LIGHTS
; i++)

40 
LightDrivî
* 
•y
 = (LightDrivî*)
	`LightDrivîSpy_Cª©e
(
i
);

41 
	`LightC⁄åﬁÀr_Add
(
i
, 
•y
);

43 
	`LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(
LightDrivîSpy_De°roy
,

44 
LightDrivîSpy_Tu∫On
, 
LightDrivîSpy_Tu∫Off
);

45 
	}
}

49 
LightDrivîSpy
* 
	$LightDrivîSpy_Cª©e
(
id
)

51 
LightDrivîSpy
* 
£lf
 = 
	`mÆloc
((LightDriverSpy));

52 
£lf
->
ba£
.
ty≥
 = 
Unknown
;

53 
£lf
->
ba£
.
id
 = id;

54  
£lf
;

55 
	}
}

57 
	$LightDrivîSpy_De°roy
(
LightDrivî
* 
su≥r
)

59 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

60 
°©es
[
£lf
->
ba£
.
id
] = 
LIGHT_STATE_UNKNOWN
;

61 
	`‰ì
(
£lf
);

62 
	}
}

64 
	$ßve
(
id
, 
°©e
)

66 
°©es
[
id
] = 
°©e
;

67 
œ°Id
 = 
id
;

68 
œ°Sèã
 = 
°©e
;

69 
	}
}

71 
	$LightDrivîSpy_Tu∫On
(
LightDrivî
* 
su≥r
)

73 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

74 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_ON
);

75 
	}
}

77 
	$LightDrivîSpy_Tu∫Off
(
LightDrivî
* 
su≥r
)

79 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

80 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_OFF
);

81 
	}
}

83 
	$LightDrivîSpy_GëSèã
(
id
)

85  
°©es
[
id
];

86 
	}
}

88 
	$LightDrivîSpy_GëLa°Id
()

90  
œ°Id
;

91 
	}
}

93 
	$LightDrivîSpy_GëLa°Sèã
()

95  
œ°Sèã
;

96 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpy.h

7 #i‚de‡
D_LightDrivîSpy_H


8 
	#D_LightDrivîSpy_H


	)

15 
	~"LightDrivî.h
"

16 
	~"LightC⁄åﬁÀr.h
"

18 íum { 
	mNO_LIGHT_ID
 = -1, 
	mLIGHT_STATE_UNKNOWN
 = -1, 
	mLIGHT_OFF
 = 0, 
	mLIGHT_ON
 = 1 };

20 
LightDrivîSpy
 
	tLightDrivîSpy
;

22 
LightDrivîSpy
* 
LightDrivîSpy_Cª©e
(
id
);

23 
LightDrivîSpy_De°roy
(
LightDrivî
*);

24 
LightDrivîSpy_Tu∫On
(
LightDrivî
*);

25 
LightDrivîSpy_Tu∫Off
(
LightDrivî
*);

27 
LightDrivîSpy_Re£t
();

28 
LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

29 
LightDrivîSpy_GëSèã
(
id
);

30 
LightDrivîSpy_GëLa°Id
();

31 
LightDrivîSpy_GëLa°Sèã
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpyTest.cpp

9 
	~"LightDrivîSpy.h
"

13 
	~"CµUTe°/Te°H¨√ss.h
"

15 
	$TEST_GROUP
(
LightDrivîSpy
)

17 
LightDrivîSpy
* 
lightDrivîSpy
;

19 
	`£tup
()

21 
	`LightDrivîSpy_Re£t
();

22 
lightDrivîSpy
 = 
	`LightDrivîSpy_Cª©e
(1);

25 
	`ã¨down
()

27 
	`LightDrivîSpy_De°roy
((
LightDrivî
*)
lightDrivîSpy
);

29 
	}
};

32 
	$TEST
(
LightDrivîSpy
, 
LightSèãUnknownA·îCª©e
)

34 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

35 
	}
}

37 
	$TEST
(
LightDrivîSpy
, 
On
)

39 
	`LightDrivîSpy_Tu∫On
((
LightDrivî
*)
lightDrivîSpy
);

40 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

41 
	}
}

44 
	$TEST
(
LightDrivîSpy
, 
Off
)

46 
	`LightDrivîSpy_Tu∫Off
((
LightDrivî
*)
lightDrivîSpy
);

47 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(1));

48 
	}
}

50 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫On
)

52 
	`LightDrivîSpy_Tu∫Off
((
LightDrivî
*)
lightDrivîSpy
);

53 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

54 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëLa°Sèã
());

55 
	}
}

57 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫Off
)

59 
	`LightDrivîSpy_Tu∫On
((
LightDrivî
*)
lightDrivîSpy
);

60 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

61 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëLa°Sèã
());

62 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\RuntimeErrorStub.c

1 
	~"Ru¡imeEº‹Stub.h
"

3 c⁄° * 
	gîr‹
 = "No Error";

4 
	g∑ømëî
 = -1;

5 
	$Ru¡imeEº‹Stub_Re£t
()

7 
îr‹
 = "No Error";

8 
∑ømëî
 = -1;

9 
	}
}

11 c⁄° * 
	$Ru¡imeEº‹Stub_GëLa°Eº‹
()

13  
îr‹
;

14 
	}
}

16 
	$Ru¡imeEº‹
(c⁄° * 
des¸ùti⁄
, 
∑øm
, c⁄° * 
fûe
, 
löe
)

18 
îr‹
 = 
des¸ùti⁄
;

19 
∑ømëî
 = 
∑øm
;

20 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\RuntimeErrorStub.h

1 
	~"comm⁄.h
"

3 
Ru¡imeEº‹Stub_Re£t
();

4 c⁄° * 
Ru¡imeEº‹Stub_GëLa°Eº‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\LightController.c

9 
	~"LightC⁄åﬁÀr.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"X10LightDrivî.h
"

13 
	~"LightDrivîSpy.h
"

14 
	~"AcmeWúñessLightDrivî.h
"

15 
	~"MemM≠≥dLightDrivî.h
"

16 
	~"Ru¡imeEº‹.h
"

17 
	~"comm⁄.h
"

21 
	$nuŒDrivî
(
LightDrivî
 * 
d
Ë{
	}
}

22 
LightDrivî
 * 
	glightDrivîs
[
MAX_LIGHTS
] = {
NULL
};

23 
LightDrivîFun˘i⁄
 * 
	glightDrivî_Tu∫On
 = 
nuŒDrivî
;

24 
LightDrivîFun˘i⁄
 * 
	glightDrivî_Tu∫Off
 = 
nuŒDrivî
;

25 
LightDrivîFun˘i⁄
 * 
	glightDrivî_De°roy
 = 
nuŒDrivî
;

29 
	$£tDrivîFun˘i⁄s
(
LightDrivîTy≥
 
lightTy≥
)

31 
lightTy≥
)

33 
X10
:

34 
	`LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(
X10LightDrivî_De°roy
,

35 
X10LightDrivî_Tu∫On
, 
X10LightDrivî_Tu∫Off
);

37 
AcmeWúñess
:

38 
	`LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(
AcmeWúñessLightDrivî_De°roy
,

39 
AcmeWúñessLightDrivî_Tu∫On
, 
AcmeWúñessLightDrivî_Tu∫Off
);

41 
Mem‹yM≠≥d
:

42 
	`LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(
MemM≠≥dLightDrivî_De°roy
,

43 
MemM≠≥dLightDrivî_Tu∫On
, 
MemM≠≥dLightDrivî_Tu∫Off
);

45 
Unknown
:

47 
	`RUNTIME_ERROR
("Unknow¿lighàdrivîÅy≥ %d", 
lightTy≥
);

50 
	}
}

54 
	$LightC⁄åﬁÀr_Cª©e
(
LightDrivîTy≥
 
ty≥
)

56 
	`mem£t
(
lightDrivîs
, 0, (lightDrivers));

57 
	`£tDrivîFun˘i⁄s
(
ty≥
);

58 
	}
}

62 
	$LightC⁄åﬁÀr_De°roy
()

64 
i
;

65 
i
 = 0; i < 
MAX_LIGHTS
; i++)

67 
LightDrivî
 * 
drivî
 = 
lightDrivîs
[
i
];

68 i‡(
drivî
 !
NULL
)

69 
	`lightDrivî_De°roy
(
drivî
);

70 
lightDrivîs
[
i
] = 
NULL
;

72 
	}
}

76 
BOOL
 
	$LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
 * 
lightDrivî
)

78 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

79  
FALSE
;

81 i‡(
lightDrivîs
[
id
] !
NULL
)

82 
	`lightDrivî_De°roy
(
lightDrivîs
[
id
]);

84 
lightDrivîs
[
id
] = 
lightDrivî
;

85  
TRUE
;

86 
	}
}

90 
	$LightC⁄åﬁÀr_OvîrideI¡îÁ˚
(

91 
LightDrivîFun˘i⁄
 * 
de°roy
,

92 
LightDrivîFun˘i⁄
 * 
tu∫On
,

93 
LightDrivîFun˘i⁄
 * 
tu∫Off
)

95 
lightDrivî_Tu∫On
 = 
tu∫On
;

96 
lightDrivî_Tu∫Off
 = 
tu∫Off
;

97 
lightDrivî_De°roy
 = 
de°roy
;

98 
	}
}

102 
	$LightC⁄åﬁÀr_Tu∫On
(
id
)

104 i‡(
lightDrivîs
[
id
])

105 
	`lightDrivî_Tu∫On
(
lightDrivîs
[
id
]);

106 
	}
}

108 
	$LightC⁄åﬁÀr_Tu∫Off
(
id
)

110 i‡(
lightDrivîs
[
id
])

111 
	`lightDrivî_Tu∫Off
(
lightDrivîs
[
id
]);

112 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\LightScheduler.c

9 
	~"LightScheduÀr.h
"

10 
	~"LightC⁄åﬁÀr.h
"

11 
	~"TimeSîvi˚.h
"

12 
	~"R™domMöuã.h
"

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

18 
	mTURNON
, 
	mTURNOFF
, 
	mDIM
, 
	mRANDOM_ON
, 
	mRANDOM_OFF


23 
	mMAX_EVENTS
 = 64, 
	mUNUSED
 = -1

28 
	mid
;

29 
Day
 
	mday
;

30 
	mmöuã
;

31 
	mevít
;

32 
	møndomize
;

33 
	møndomMöuãs
;

35 } 
	tScheduÀdLightEvít
;

37 
ScheduÀdLightEvít
 
	gevítLi°
[
MAX_EVENTS
];

39 
	$LightScheduÀr_Cª©e
()

41 
i
;

42 
ScheduÀdLightEvít
* 
evít
 = 
evítLi°
;

44 
i
 = 0; i < 
MAX_EVENTS
; i++, 
evít
++)

46 
evít
->
id
 = 
UNUSED
;

48 
	}
}

50 
	$LightScheduÀr_De°roy
()

52 
	}
}

54 
ª£tR™domize
(
ScheduÀdLightEvít
* 
e
);

57 
	$£tEvítScheduÀ
(
ScheduÀdLightEvít
* 
evít
,

58 
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
, 
øndomize
)

60 
evít
->
id
 = id;

61 
evít
->
day
 = day;

62 
evít
->
möuã
 = minute;

63 
evít
->evíà
c⁄åﬁ
;

64 
evít
->
øndomize
 =Ñandomize;

65 
	`ª£tR™domize
(
evít
);

66 
	}
}

70 
BOOL
 
	$isInU£
(
ScheduÀdLightEvít
 * 
evít
)

72  
evít
->
id
 !
UNUSED
;

73 
	}
}

77 
ScheduÀdLightEvít
* 
	$födUnu£dEvít
()

79 
i
;

80 
ScheduÀdLightEvít
* 
evít
 = 
evítLi°
;

82 
i
 = 0; i < 
MAX_EVENTS
; i++, 
evít
++)

84 i‡(!
	`isInU£
(
evít
))

85  
evít
;

87  
NULL
;

88 
	}
}

92 
ScheduÀdLightEvít
* 
	$födUnu£dEvít
(
id
)

94 
i
;

95 
ScheduÀdLightEvít
* 
evít
 = 0;

97 
i
 = 0; i < 
MAX_EVENTS
; i++)

99 i‡(!
	`isInU£
(&
evítLi°
[
i
]))

101 
evít
 = &
evítLi°
[
i
];

102  
evít
;

105  
NULL
;

106 
	}
}

110 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
,

111 
øndomize
)

114 
ScheduÀdLightEvít
* 
evít
 = 
	`födUnu£dEvít
(
UNUSED
);

116 i‡(
evít
)

117 
	`£tEvítScheduÀ
(
evít
, 
id
, 
day
, 
möuã
, 
c⁄åﬁ
, 
øndomize
);

118 
	}
}

122 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
,

123 
øndomize
)

126 
ScheduÀdLightEvít
* 
evít
 = 
	`födUnu£dEvít
(
UNUSED
);

128 i‡(
evít
)

130 
evít
->
id
 = id;

131 
evít
->
day
 = day;

132 
evít
->
möuã
 = minute;

133 
evít
->evíà
c⁄åﬁ
;

134 
evít
->
øndomize
 =Ñandomize;

135 
	`ª£tR™domize
(
evít
);

138 
	}
}

142 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
Day
 
day
, 
möuã
)

144 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_OFF
);

145 
	}
}

147 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
)

149 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
, 
RANDOM_OFF
);

150 
	}
}

152 
BOOL
 
	$m©chEvít
(
ScheduÀdLightEvít
* 
e
, 
id
, 
Day
 
day
, 
möuã
)

154  
e
->
id
 =id &&É->
day
 =day &&É->
möuã
 == minute;

155 
	}
}

157 
	$LightScheduÀr_R™domize
(
id
, 
Day
 
day
, 
möuã
)

159 
i
;

160 
ScheduÀdLightEvít
* 
evít
 = 
evítLi°
;

162 
i
 = 0; i < 
MAX_EVENTS
; i++, 
evít
++)

164 i‡(
	`m©chEvít
(
evít
, 
id
, 
day
, 
möuã
))

166 
evít
->
øndomize
 = 
RANDOM_ON
;

167 
	`ª£tR™domize
(
evít
);

170 
	}
}

172 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
Day
 
day
, 
möuã
)

174 
i
;

175 
ScheduÀdLightEvít
* 
evít
 = 
evítLi°
;

177 
i
 = 0; i < 
MAX_EVENTS
; i++, 
evít
++)

179 i‡(
	`m©chEvít
(
evít
, 
id
, 
day
, 
möuã
))

180 
evít
->
id
 = 
UNUSED
;

182 
	}
}

185 
	$›î©eLight
(
ScheduÀdLightEvít
 * 
evít
)

187 i‡(
TURNON
 =
evít
->event)

188 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

189 i‡(
TURNOFF
 =
evít
->event)

190 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

191 
	}
}

195 
	$ª£tR™domize
(
ScheduÀdLightEvít
 * 
evít
)

197 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

198 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

200 
evít
->
øndomMöuãs
 = 0;

201 
	}
}

205 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
,

206 
øndomize
)

208 
i
;

209 
ScheduÀdLightEvít
* 
evít
 = 0;

211 
i
 = 0; i < 
MAX_EVENTS
; i++)

213 i‡(!
	`isInU£
(&
evítLi°
[
i
]))

215 
evít
 = &
evítLi°
[
i
];

220 i‡(
evít
)

222 
evít
->
id
 = id;

223 
evít
->
day
 = day;

224 
evít
->
möuã
 = minute;

225 
evít
->evíà
c⁄åﬁ
;

226 
evít
->
øndomize
 =Ñandomize;

227 
	`ª£tR™domize
(
evít
);

229 
	}
}

233 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
,

234 
øndomize
)

236 
i
;

237 
ScheduÀdLightEvít
* 
evít
 = 0;

239 
i
 = 0; i < 
MAX_EVENTS
; i++)

241 i‡(!
	`isInU£
(&
evítLi°
[
i
]))

243 
evít
 = &
evítLi°
[
i
];

244 
evít
->
id
 = id;

245 
evít
->
day
 = day;

246 
evít
->
möuã
 = minute;

247 
evít
->evíà
c⁄åﬁ
;

248 
evít
->
øndomize
 =Ñandomize;

249 
	`ª£tR™domize
(
evít
);

253 
	}
}

257 
	$scheduÀEvít
(
id
, 
Day
 
day
, 
möuã
, 
c⁄åﬁ
,

258 
øndomize
)

260 
i
;

262 
i
 = 0; i < 
MAX_EVENTS
; i++)

264 i‡(!
	`isInU£
(&
evítLi°
[
i
]))

266 
evítLi°
[
i
].
id
 = id;

267 
evítLi°
[
i
].
day
 = day;

268 
evítLi°
[
i
].
möuã
 = minute;

269 
evítLi°
[
i
].
evít
 = 
c⁄åﬁ
;

270 
evítLi°
[
i
].
øndomize
 =Ñandomize;

271 
	`ª£tR™domize
(&
evítLi°
[
i
]);

275 
	}
}

279 
BOOL
 
	$Time_M©chesMöuãOfDay
(
Time
* 
time
, 
möuã
)

281  
time
->
möuãOfDay
 =
möuã
;

282 
	}
}

286 
BOOL
 
	$Time_M©chesDayOfWìk
(
Time
* 
time
, 
Day
 
day
)

288 
today
 = 
time
->
dayOfWìk
;

290 i‡(
day
 =
EVERYDAY
)

291  
TRUE
;

292 i‡(
day
 =
today
)

293  
TRUE
;

294 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

295  
TRUE
;

296 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

297  
TRUE
;

298  
FALSE
;

299 
	}
}

303 
BOOL
 
	$daysM©ch
(
Day
 
today
, Day 
scheduÀdDay
)

305 i‡(
scheduÀdDay
 =
EVERYDAY
)

306  
TRUE
;

307 i‡(
scheduÀdDay
 =
today
)

308  
TRUE
;

309 i‡(
scheduÀdDay
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

310  
TRUE
;

311 i‡(
scheduÀdDay
 =
WEEKDAY
 && (
today
 >
MONDAY
 &&Åoday <
FRIDAY
))

312  
TRUE
;

313  
FALSE
;

314 
	}
}

318 
BOOL
 
	$daysM©ch
(
Day
 
scheduÀdDay
, Day 
today
)

320 i‡(
scheduÀdDay
 =
EVERYDAY
)

321  
TRUE
;

322 i‡(
scheduÀdDay
 =
today
)

323  
TRUE
;

324 i‡(
scheduÀdDay
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

325  
TRUE
;

326 i‡(
scheduÀdDay
 =
WEEKDAY
 && (
today
 >
MONDAY
 &&Åoday <
FRIDAY
))

327  
TRUE
;

328  
FALSE
;

329 
	}
}

333 
BOOL
 
	$daysM©ch
(
Day
 
scheduÀdDay
, Day 
today
)

335 i‡((
day
 =
EVERYDAY
Ë|| (day =
today
)

336 || (
day
 =
WEEKEND
 &&

337 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

338 || (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


339 && 
today
 <
FRIDAY
)))

340  
TRUE
;

341  
FALSE
;

342 
	}
}

346 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

348 
möuã
 = 
time
->
möuãOfDay
;

349 
Day
 
day
 = 
evít
->day;

351 i‡(
möuã
 !
evít
->möuã +Évít->
øndomMöuãs
)

352  
FALSE
;

354 i‡(!
	`Time_M©chesDayOfWìk
(
time
, 
day
))

355  
FALSE
;

357  
TRUE
;

358 
	}
}

362 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

364 
möuã
 = 
time
->
möuãOfDay
;

365 
Day
 
day
 = 
evít
->day;

367 i‡(
möuã
 !
evít
->möuã +Évít->
øndomMöuãs
)

368  
FALSE
;

370 i‡(!
	`daysM©ch
(
time
, 
day
))

371  
FALSE
;

373  
TRUE
;

374 
	}
}

378 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

380 
Day
 
today
 = 
time
->
dayOfWìk
;

381 
möuã
 = 
time
->
möuãOfDay
;

382 
Day
 
day
 = 
evít
->day;

384 i‡(
möuã
 !
evít
->möuã +Évít->
øndomMöuãs
)

385  
FALSE
;

388 i‡(
	`daysM©ch
(
today
, 
day
))

389  
TRUE
;

391 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
)

392 || (
day
 =
WEEKEND
 &&

393 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

394 || (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


395 && 
today
 <
FRIDAY
)))

396  
TRUE
;

398  
FALSE
;

399 
	}
}

403 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

405 
Day
 
today
 = 
time
->
dayOfWìk
;

406 
möuã
 = 
time
->
möuãOfDay
;

407 
Day
 
day
 = 
evít
->day;

409 i‡(
möuã
 !
evít
->möuã +Évít->
øndomMöuãs
)

410  
FALSE
;

412 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
)

413 || (
day
 =
WEEKEND
 &&

414 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

415 || (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


416 && 
today
 <
FRIDAY
)))

417  
TRUE
;

419  
FALSE
;

420 
	}
}

424 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

426 
Day
 
today
 = 
time
->
dayOfWìk
;

427 
möuã
 = 
time
->
möuãOfDay
;

428 
Day
 
day
 = 
evít
->day;

429 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

430 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

431 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


432 && 
today
 <
FRIDAY
)))

434 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

435  
TRUE
;

437  
FALSE
;

438 
	}
}

442 
BOOL
 
	$isEvítDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

444 
todaysMöuã
 = 
evít
->
möuã
 +Évít->
øndomMöuãs
;

445 
Day
 
day
 = 
evít
->day;

447 i‡(!
	`Time_M©chesMöuãOfDay
(
time
, 
todaysMöuã
))

448  
FALSE
;

450 i‡(!
	`Time_M©chesDayOfWìk
(
time
, 
day
))

451  
FALSE
;

453  
TRUE
;

454 
	}
}

458 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

460 i‡(
	`isInU£
(
evít
))

462 i‡(
	`isEvítDueNow
(
time
, 
evít
))

464 
	`›î©eLight
(
evít
);

465 
	`ª£tR™domize
(
evít
);

468 
	}
}

472 
	$LightScheduÀr_WakeUp
()

474 
i
;

475 
Time
 
time
;

477 
	`TimeSîvi˚_GëTime
(&
time
);

479 
i
 = 0; i < 
MAX_EVENTS
; i++)

481 
	`¥o˚ssEvítsDueNow
(&
time
, &
evítLi°
[
i
]);

483 
	}
}

488 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

490 i‡(
evít
->
id
 !
UNUSED
)

492 i‡(
	`isEvítDueNow
(
time
, 
evít
))

494 
	`›î©eLight
(
evít
);

495 
	`ª£tR™domize
(
evít
);

498 
	}
}

502 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

504 
Day
 
today
 = 
time
->
dayOfWìk
;

505 
möuã
 = 
time
->
möuãOfDay
;

507 i‡(
evít
->
id
 !
UNUSED
)

509 
Day
 
day
 = 
evít
->day;

511 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

512 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

513 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


514 && 
today
 <
FRIDAY
)))

516 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

518 
	`›î©eLight
(
evít
);

521 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

522 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

524 
evít
->
øndomMöuãs
 = 0;

528 
	}
}

532 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

534 
Day
 
today
 = 
time
->
dayOfWìk
;

535 
möuã
 = 
time
->
möuãOfDay
;

537 i‡(
evít
->
id
 !
UNUSED
)

539 
Day
 
day
 = 
evít
->day;

541 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

542 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

543 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


544 && 
today
 <
FRIDAY
)))

546 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

550 i‡(
TURNON
 =
evít
->event)

551 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

552 i‡(
TURNOFF
 =
evít
->event)

553 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

557 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

558 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

560 
evít
->
øndomMöuãs
 = 0;

564 
	}
}

570 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

572 
Day
 
today
 = 
time
->
dayOfWìk
;

573 
möuã
 = 
time
->
möuãOfDay
;

575 i‡(
evít
->
id
 !
UNUSED
)

577 
Day
 
day
 = 
evít
->day;

579 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

580 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

581 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


582 && 
today
 <
FRIDAY
)))

584 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

587 i‡(
TURNON
 =
evít
->event)

588 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

589 i‡(
TURNOFF
 =
evít
->event)

590 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

593 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

594 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

596 
evít
->
øndomMöuãs
 = 0;

600 
	}
}

604 
	$¥o˚ssEvítsDueNow
(
Time
 * 
time
, 
ScheduÀdLightEvít
 * 
evít
)

606 
Day
 
today
 = 
time
->
dayOfWìk
;

607 
möuã
 = 
time
->
möuãOfDay
;

609 i‡(
evít
->
id
 !
UNUSED
)

611 
Day
 
day
 = 
evít
->day;

612 i‡–(
day
 =
EVERYDAY
Ë|| (day =
today
Ë|| (day =
WEEKEND
 &&

613 (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday)) ||

614 (
day
 =
WEEKDAY
 && (
today
 >
MONDAY


615 && 
today
 <
FRIDAY
)))

618 i‡(
möuã
 =
evít
->möuã +Évít->
øndomMöuãs
)

620 i‡(
TURNON
 =
evít
->event)

621 
	`LightC⁄åﬁÀr_Tu∫On
(
evít
->
id
);

622 i‡(
TURNOFF
 =
evít
->event)

623 
	`LightC⁄åﬁÀr_Tu∫Off
(
evít
->
id
);

625 i‡(
evít
->
øndomize
 =
RANDOM_ON
)

626 
evít
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

628 
evít
->
øndomMöuãs
 = 0;

632 
	}
}

636 
	$LightScheduÀr_WakeUp
()

638 
i
;

639 
Time
 
time
;

641 
	`TimeSîvi˚_GëTime
(&
time
);

642 
Day
 
td
 = 
time
.
dayOfWìk
;

643 
mö
 = 
time
.
möuãOfDay
;

645 
i
 = 0; i < 
MAX_EVENTS
; i++)

647 
ScheduÀdLightEvít
* 
£
 = &
evítLi°
[
i
];

648 i‡(
£
->
id
 !
UNUSED
)

650 
Day
 
d
 = 
£
->
day
;

651 i‡–(
d
 =
EVERYDAY
Ë|| (d =
td
Ë|| (d =
WEEKEND
 &&

652 (
SATURDAY
 =
td
 || 
SUNDAY
 ==Åd)) ||

653 (
d
 =
WEEKDAY
 && (
td
 >
MONDAY


654 && 
td
 <
FRIDAY
)))

657 i‡(
mö
 =
£
->
möuã
 + se->
øndomMöuãs
)

659 i‡(
TURNON
 =
£
->
evít
)

660 
	`LightC⁄åﬁÀr_Tu∫On
(
£
->
id
);

661 i‡(
TURNOFF
 =
£
->
evít
)

662 
	`LightC⁄åﬁÀr_Tu∫Off
(
£
->
id
);

664 i‡(
£
->
øndomize
 =
RANDOM_ON
)

665 
£
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

667 
£
->
øndomMöuãs
 = 0;

673 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\RandomMinute.c

11 
	~"R™domMöuã.h
"

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

17 
	gbound
 = 0;

19 
	$R™domMöuã_Cª©e
(
b
)

21 
bound
 = 
b
;

22 
	}
}

25 
	$R™domMöuã_GëIm∂
()

27  
bound
 - 
	`ønd
() % (bound * 2 + 1);

28 
	}
}

30 (*
	gR™domMöuã_Gë
)(Ë
R™domMöuã_GëIm∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\AcmeWirelessLightDriver.c

11 
	~"AcmeWúñessLightDrivî.h
"

12 
	~<°dlib.h
>

13 
	~<mem‹y.h
>

14 
	~"comm⁄.h
"

17 
	sAcmeWúñessLightDrivî


19 
LightDrivî
 
	mba£
;

20 
	mch™√l
;

21 
	mkey
;

22 * 
	mssid
;

23 * 
	mwï
;

27 
AcmeWúñessLightDrivî
* 
	$AcmeWúñessLightDrivî_Cª©e
(
id
, 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
)

29 
AcmeWúñessLightDrivî
* 
£lf
 = 
	`mÆloc
((AcmeWirelessLightDriver));

30 
	`mem£t
(
£lf
, 0, (
AcmeWúñessLightDrivî
));

31 
£lf
->
ba£
.
ty≥
 = 
AcmeWúñess
;

32 
£lf
->
ba£
.
id
 = id;

33  
£lf
;

34 
	}
}

36 
	$AcmeWúñessLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

38 
AcmeWúñessLightDrivî
* 
£lf
 = (AcmeWúñessLightDrivî*)
su≥r
;

39 
	`‰ì
(
£lf
);

40 
	}
}

42 
	$AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

45 
	`ex∂odesInTe°Envú⁄mít
();

46 
	}
}

48 
	$AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

51 
	`ex∂odesInTe°Envú⁄mít
();

52 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\MemMappedLightDriver.c

11 
	~"MemM≠≥dLightDrivî.h
"

12 
	~<°dlib.h
>

13 
	~<mem‹y.h
>

14 
	~"comm⁄.h
"

17 
	sMemM≠≥dLightDrivî


19 
LightDrivî
 
	mba£
;

20 
uöt32_t
* 
	maddªss
;

24 
MemM≠≥dLightDrivî
* 
	$MemM≠≥dLightDrivî_Cª©e
(
id
, 
uöt32_t
* 
addªss
)

26 
MemM≠≥dLightDrivî
* 
£lf
 = 
	`mÆloc
((MemMappedLightDriver));

27 
	`mem£t
(
£lf
, 0, (
MemM≠≥dLightDrivî
));

28 
£lf
->
ba£
.
ty≥
 = 
Mem‹yM≠≥d
;

29 
£lf
->
ba£
.
id
 = id;

30  
£lf
;

31 
	}
}

33 
	$MemM≠≥dLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

35 
MemM≠≥dLightDrivî
* 
£lf
 = (MemM≠≥dLightDrivî*)
su≥r
;

36 
	`‰ì
(
£lf
);

37 
	}
}

39 
	$MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

42 
	`ex∂odesInTe°Envú⁄mít
();

43 
	}
}

45 
	$MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

48 
	`ex∂odesInTe°Envú⁄mít
();

49 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\X10LightDriver.c

11 
	~"X10LightDrivî.h
"

12 
	~<°dlib.h
>

13 
	~<mem‹y.h
>

14 
	~"comm⁄.h
"

17 
	sX10LightDrivî


19 
LightDrivî
 
	mba£
;

20 
X10_Hou£Code
 
	mhou£
;

21 
	munô
;

24 
X10LightDrivî
* 
	$X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
hou£
, 
unô
)

26 
X10LightDrivî
* 
£lf
 = 
	`mÆloc
((X10LightDriver));

27 
	`mem£t
(
£lf
, 0, (
X10LightDrivî
));

28 
£lf
->
ba£
.
ty≥
 = 
X10
;

29 
£lf
->
ba£
.
id
 = id;

30 
£lf
->
hou£
 = house;

31 
£lf
->
unô
 = unit;

32  
£lf
;

33 
	}
}

35 
	$X10LightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

37 
X10LightDrivî
* 
£lf
 = (X10LightDrivî*)
su≥r
;

38 
	`‰ì
(
£lf
);

39 
	}
}

41 
	$X10LightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

44 
	`ex∂odesInTe°Envú⁄mít
();

45 
	}
}

47 
	$X10LightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

50 
	`ex∂odesInTe°Envú⁄mít
();

51 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\Time.c

9 
	~"TimeSîvi˚.h
"

12 
BOOL
 
	$Time_M©chesDayOfWìk
(
Time
* 
time
, 
Day
 
day
)

14 
today
 = 
time
->
dayOfWìk
;

16 i‡(
day
 =
EVERYDAY
)

17  
TRUE
;

18 i‡(
day
 =
today
)

19  
TRUE
;

20 i‡(
day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

21  
TRUE
;

22 i‡(
day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

23  
TRUE
;

24  
FALSE
;

25 
	}
}

27 
BOOL
 
	$Time_M©chesMöuãOfDay
(
Time
* 
time
, 
möuã
)

29 i‡(
time
->
möuãOfDay
 !
möuã
)

30  
FALSE
;

32  
TRUE
;

33 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\TimeService.c

11 
	~"TimeSîvi˚.h
"

12 
	~"comm⁄.h
"

16 
	$TimeSîvi˚_Cª©e
()

19 
	`ex∂odesInTe°Envú⁄mít
();

20 
	}
}

22 
	$TimeSîvi˚_De°roy
()

25 
	`ex∂odesInTe°Envú⁄mít
();

26 
	}
}

28 
	$TimeSîvi˚_GëMöuã
()

31 
	`ex∂odesInTe°Envú⁄mít
();

33 
	}
}

35 
	$TimeSîvi˚_GëDay
()

38 
	`ex∂odesInTe°Envú⁄mít
();

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\common.c

11 
	~"comm⁄.h
"

12 
	~<as£π.h
>

14 
	$ex∂odesInTe°Envú⁄mít
()

16 
	`as£π
(0 == "Explode - intercepted callÅhat cannot be made inÅestÉnvironment");

17 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\AllTests.cpp

7 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

9 
	$maö
(
ac
, ** 
av
)

11  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\LightControllerTest.cpp

13 
	~"LightC⁄åﬁÀr.h
"

14 
	~"LightDrivîSpy.h
"

18 
	~"CµUTe°/Te°H¨√ss.h
"

20 
	$TEST_GROUP
(
LightC⁄åﬁÀr
)

22 
	`£tup
()

24 
	`LightC⁄åﬁÀr_Cª©e
(
Unknown
);

25 
	`LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

28 
	`ã¨down
()

30 
	`LightC⁄åﬁÀr_De°roy
();

32 
	}
};

35 
	$TEST
(
LightC⁄åﬁÀr
, 
Cª©eDe°roy
)

37 
	}
}

39 
	$TEST
(
LightC⁄åﬁÀr
, 
DrivîIsDe°royedByLightC⁄åﬁÀr
)

41 
LightDrivîSpy
 * 
•y
 = 
	`LightDrivîSpy_Cª©e
(1);

42 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
 *)
•y
);

43 
	}
}

48 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫On
)

50 
	`LightC⁄åﬁÀr_Tu∫On
(1);

51 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

52 
	}
}

56 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫Off
)

58 
	`LightC⁄åﬁÀr_Tu∫Off
(1);

59 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(1));

60 
	}
}

62 
	$TEST
(
LightC⁄åﬁÀr
, 
AŒDrivîsDe°royed
)

64 
i
 = 0; i < 
MAX_LIGHTS
; i++)

66 
LightDrivîSpy
 * 
•y
 = 
	`LightDrivîSpy_Cª©e
(
i
);

67 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
i
, (
LightDrivî
 *)
•y
));

69 
	}
}

71 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdLowîR™ge
)

73 
LightDrivîSpy
 * 
•y
 = 
	`LightDrivîSpy_Cª©e
(0);

74 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(0, (
LightDrivî
 *)
•y
));

75 
	}
}

77 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdUµîR™ge
)

79 
LightDrivîSpy
 * 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

80 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
-1, (
LightDrivî
 *)
•y
));

81 
	}
}

83 
	$TEST
(
LightC⁄åﬁÀr
, 
InVÆidIdBey⁄dUµîR™ge
)

85 
LightDrivîSpy
 * 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

86 
	`LONGS_EQUAL
(
FALSE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
, (
LightDrivî
 *)
•y
));

87 
	`‰ì
(
•y
);

88 
	}
}

90 
	$TEST
(
LightC⁄åﬁÀr
, 
N⁄AddedLightD€sNŸhög
)

92 
	`LightC⁄åﬁÀr_Add
(1, (
LightDrivî
 *)
NULL
);

93 
	`LightC⁄åﬁÀr_Tu∫On
(1);

94 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

95 
	`LightC⁄åﬁÀr_Tu∫Off
(1);

96 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

97 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\LightSchedulerTest.cpp

11 
	~"CµUTe°/Te°H¨√ss.h
"

15 
	~"LightScheduÀr.h
"

16 
	~"LightDrivîSpy.h
"

17 
	~"FakeTimeSîvi˚.h
"

18 
	~"FakeR™domMöuã.h
"

21 
	$TEST_GROUP
(
LightScheduÀr
)

23 
scheduÀdMöuã
;

24 
ex≥˘edId
;

25 
ex≥˘edLevñ
;

26 
lightNumbî
;

27 
£ed
;

28 
p£udoR™domIn¸emít
;

31 
	`£tup
()

33 
	`LightC⁄åﬁÀr_Cª©e
(
Unknown
);

34 
	`LightDrivîSpy_Re£t
();

35 
	`LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

36 
	`LightScheduÀr_Cª©e
();

38 
scheduÀdMöuã
 = 1234;

39 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

40 
lightNumbî
 = 4;

42 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

43 
	`FakeR™domMöuã_Re£t
();

44 
£ed
 = -10;

45 
p£udoR™domIn¸emít
 = 5;

48 
	`ã¨down
()

50 
	`LightScheduÀr_De°roy
();

51 
	`LightC⁄åﬁÀr_De°roy
();

54 
	`wakeupAndCheck
()

56 
	`LightScheduÀr_WakeUp
();

58 
	`LONGS_EQUAL
(
ex≥˘edId
, 
	`LightDrivîSpy_GëLa°Id
());

59 
	`LONGS_EQUAL
(
ex≥˘edLevñ
, 
	`LightDrivîSpy_GëLa°Sèã
());

62 
	`£tNow
(
day
, 
möuã
)

64 
	`FakeTimeSîvi˚_SëDay
(
day
);

65 
	`FakeTimeSîvi˚_SëMöuã
(
möuã
);

68 
	`ex≥˘
(
id
, 
Àvñ
)

70 
ex≥˘edId
 = 
id
;

71 
ex≥˘edLevñ
 = 
Àvñ
;

74 
	`whíItBecomes
(
day
, 
möuã
)

76 
	`£tNow
(
day
, 
möuã
);

77 
	`wakeupAndCheck
();

80 
	}
};

82 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

84 
	`LONGS_EQUAL
(
NO_LIGHT_ID
, 
	`LightDrivîSpy_GëLa°Id
());

85 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëLa°Sèã
());

86 
	}
}

88 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

90 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

91 
	`ex≥˘
(
NO_LIGHT_ID
,
LIGHT_STATE_UNKNOWN
);

92 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
-1);

93 
	}
}

95 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayItsTime
)

97 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

98 
	`ex≥˘
(3, 
LIGHT_ON
);

99 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

100 
	}
}

102 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayAndItsTime
)

104 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

105 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

106 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

107 
	}
}

109 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

111 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

112 
	`ex≥˘
(3, 
LIGHT_ON
);

113 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

114 
	}
}

116 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

118 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
TUESDAY
, 
scheduÀdMöuã
);

119 
	`ex≥˘
(
lightNumbî
, 
LIGHT_OFF
);

120 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

121 
	}
}

123 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

125 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

126 
	`ex≥˘
(
lightNumbî
, 
LIGHT_OFF
);

127 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

128 
	}
}

130 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

132 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

133 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

134 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

135 
	}
}

137 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

139 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

140 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

141 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

142 
	}
}

144 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

146 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

147 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

148 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

149 
	}
}

151 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

153 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

154 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

155 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

156 
	}
}

158 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

160 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

161 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

162 
	`whíItBecomes
(
FRIDAY
, 
scheduÀdMöuã
);

163 
	}
}

165 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

167 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

168 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

169 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

170 
	}
}

172 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

174 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 
scheduÀdMöuã
);

175 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 
scheduÀdMöuã
);

177 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

178 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

179 
	}
}

181 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsSameTime
)

183 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

184 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
);

185 
	`£tNow
(
MONDAY
, 
scheduÀdMöuã
);

187 
	`LightScheduÀr_WakeUp
();

189 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(4));

190 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(3));

191 
	}
}

193 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsDif„ª¡Times
)

195 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

196 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
+1);

198 
	`ex≥˘
(4, 
LIGHT_OFF
);

199 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

201 
	`ex≥˘
(3, 
LIGHT_ON
);

202 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
+1);

203 
	}
}

204 
	$TEST
(
LightScheduÀr
, 
E«bÀR™domize
)

206 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 1);

207 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

208 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

210 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

211 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

212 
	}
}

214 
	$TEST
(
LightScheduÀr
, 
Dif„ª¡R™dmomFa˘‹TheSec⁄dDay
)

216 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 1);

218 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

219 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

221 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

222 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

223 
	}
}

225 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀR™domC⁄åﬁs
)

227 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 5);

229 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

230 
	`LightScheduÀr_R™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

231 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
+1, 
EVERYDAY
, 
scheduÀdMöuã
+3);

232 
	`LightScheduÀr_R™domize
(
lightNumbî
+1, 
EVERYDAY
, 
scheduÀdMöuã
+3);

234 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

235 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

236 
	`ex≥˘
(
lightNumbî
+1, 
LIGHT_ON
);

237 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 +
£ed
 + 3 + 5);

238 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp

11 
	~"CµUTe°/Te°H¨√ss.h
"

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~"R™domMöuã.h
"

20 íum { 
BOUND
=30 };

22 
	$TEST_GROUP
(
R™domMöuã
)

25 
	`£tup
()

27 
	`R™domMöuã_Cª©e
(
BOUND
);

30 
	`ã¨down
()

33 
	}
}

36 
	$TEST
(
R™domMöuã
, 
GëIsInR™ge
)

38 
möuã
;

40 
i
 = 0; i < 100; i++)

42 
möuã
 = 
	`R™domMöuã_Gë
();

43 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

45 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

46 
	`FAIL
("Minute out ofÑange");

49 
	}
}

51 
	$TEST
(
R™domMöuã
, 
AŒVÆuesPossibÀ
)

53 
möuã
;

54 
hô
[2*
BOUND
 + 1];

55 
	`mem£t
(
hô
, 0, (hit));

57 
i
 = 0; i < 500; i++)

59 
möuã
 = 
	`R™domMöuã_Gë
();

60 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

62 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

63 
	`FAIL
("Minute out ofÑange");

65 
hô
[
möuã
 + 
BOUND
]++;

69 
j
 = 0; j < 2*(
BOUND
) + 1; j++) {

70 
	`CHECK
(
hô
[
j
] > 0);

72 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\AcmeWirelessLightDriverTest.cpp

13 
	~"AcmeWúñessLightDrivî.h
"

17 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
AcmeWúñessLightDrivî
)

21 
AcmeWúñessLightDrivî
* 
acmeWúñessLightDrivî
;

23 
	`£tup
()

25 
acmeWúñessLightDrivî
 = 
	`AcmeWúñessLightDrivî_Cª©e
(1, 
Acme_G
, 16);

28 
	`ã¨down
()

30 
	`AcmeWúñessLightDrivî_De°roy
((
LightDrivî
*)
acmeWúñessLightDrivî
);

32 
	}
};

34 
	$TEST
(
AcmeWúñessLightDrivî
, 
Cª©e
)

36 
LightDrivî
* 
drivî
 = (LightDrivî*)
acmeWúñessLightDrivî
;

37 
	`LONGS_EQUAL
(
AcmeWúñess
, 
drivî
->
ty≥
);

38 
	`LONGS_EQUAL
(1, 
drivî
->
id
);

39 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\MemMappedLightDriverTest.cpp

13 
	~"MemM≠≥dLightDrivî.h
"

17 
	~"CµUTe°/Te°H¨√ss.h
"

21 
	$TEST_GROUP
(
MemM≠≥dLightDrivî
)

23 
MemM≠≥dLightDrivî
* 
memM≠≥dLightDrivî
;

24 
uöt32_t
 
mockLights
;

26 
	`£tup
()

28 
memM≠≥dLightDrivî
 = 
	`MemM≠≥dLightDrivî_Cª©e
(4, &
mockLights
);

31 
	`ã¨down
()

33 
	`MemM≠≥dLightDrivî_De°roy
–(
LightDrivî
*)
memM≠≥dLightDrivî
);

35 
	}
};

37 
	$TEST
(
MemM≠≥dLightDrivî
, 
Cª©e
)

39 
LightDrivî
* 
drivî
 = (LightDrivî*)
memM≠≥dLightDrivî
;

40 
	`LONGS_EQUAL
(
Mem‹yM≠≥d
, 
drivî
->
ty≥
);

41 
	`LONGS_EQUAL
(4, 
drivî
->
id
);

42 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\X10LightDriverTest.cpp

13 
	~"X10LightDrivî.h
"

17 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
X10LightDrivî
)

21 
X10LightDrivî
* 
x10LightDrivî
;

23 
	`£tup
()

25 
x10LightDrivî
 = 
	`X10LightDrivî_Cª©e
(1, 
X10_A
, 12);

28 
	`ã¨down
()

30 
	`X10LightDrivî_De°roy
((
LightDrivî
*)
x10LightDrivî
);

32 
	}
};

34 
	$TEST
(
X10LightDrivî
, 
Cª©e
)

36 
LightDrivî
* 
drivî
 = (LightDrivî*)
x10LightDrivî
;

37 
	`LONGS_EQUAL
(
X10
, 
drivî
->
ty≥
);

38 
	`LONGS_EQUAL
(1, 
drivî
->
id
);

39 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\util\TimeTest.cpp

11 
	~<mem‹y.h
>

12 
	~"FakeTimeSîvi˚.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
Time
)

19 
Time
 
time
;

20 
	`£tup
()

22 
	`TimeSîvi˚_Cª©e
();

25 
	`givíTh©ItIs
(
Day
 
day
)

27 
	`FakeTimeSîvi˚_SëDay
(
day
);

30 
	`CheckTh©TimeM©ches
(
Day
 
day
)

32 
	`TimeSîvi˚_GëTime
(&
time
);

33 
	`CHECK
(
	`Time_M©chesDayOfWìk
(&
time
, 
day
));

36 
	`CheckTh©TimeD€sNŸM©ch
(
Day
 
day
)

38 
	`TimeSîvi˚_GëTime
(&
time
);

39 
	`CHECK
(!
	`Time_M©chesDayOfWìk
(&
time
, 
day
));

41 
	}
};

43 
	$TEST
(
Time
, 
Exa˘M©ch
)

45 
	`givíTh©ItIs
(
MONDAY
);

46 
	`CheckTh©TimeM©ches
(
MONDAY
);

47 
	`givíTh©ItIs
(
TUESDAY
);

48 
	`CheckTh©TimeM©ches
(
TUESDAY
);

49 
	`givíTh©ItIs
(
WEDNESDAY
);

50 
	`CheckTh©TimeM©ches
(
WEDNESDAY
);

51 
	`givíTh©ItIs
(
THURSDAY
);

52 
	`CheckTh©TimeM©ches
(
THURSDAY
);

53 
	`givíTh©ItIs
(
FRIDAY
);

54 
	`CheckTh©TimeM©ches
(
FRIDAY
);

55 
	`givíTh©ItIs
(
SATURDAY
);

56 
	`CheckTh©TimeM©ches
(
SATURDAY
);

57 
	`givíTh©ItIs
(
SUNDAY
);

58 
	`CheckTh©TimeM©ches
(
SUNDAY
);

59 
	}
}

61 
	$TEST
(
Time
, 
WìkídDays
)

63 
	`givíTh©ItIs
(
SATURDAY
);

64 
	`CheckTh©TimeM©ches
(
WEEKEND
);

65 
	`givíTh©ItIs
(
SUNDAY
);

66 
	`CheckTh©TimeM©ches
(
WEEKEND
);

67 
	`givíTh©ItIs
(
MONDAY
);

68 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKEND
);

69 
	`givíTh©ItIs
(
TUESDAY
);

70 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKEND
);

71 
	`givíTh©ItIs
(
WEDNESDAY
);

72 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKEND
);

73 
	`givíTh©ItIs
(
THURSDAY
);

74 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKEND
);

75 
	`givíTh©ItIs
(
FRIDAY
);

76 
	}
}

78 
	$TEST
(
Time
, 
WìkDays
)

80 
	`givíTh©ItIs
(
SATURDAY
);

81 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKDAY
);

82 
	`givíTh©ItIs
(
SUNDAY
);

83 
	`CheckTh©TimeD€sNŸM©ch
(
WEEKDAY
);

84 
	`givíTh©ItIs
(
MONDAY
);

85 
	`CheckTh©TimeM©ches
(
WEEKDAY
);

86 
	`givíTh©ItIs
(
TUESDAY
);

87 
	`CheckTh©TimeM©ches
(
WEEKDAY
);

88 
	`givíTh©ItIs
(
WEDNESDAY
);

89 
	`CheckTh©TimeM©ches
(
WEEKDAY
);

90 
	`givíTh©ItIs
(
THURSDAY
);

91 
	`CheckTh©TimeM©ches
(
WEEKDAY
);

92 
	`givíTh©ItIs
(
FRIDAY
);

93 
	}
}

95 
	$TEST
(
Time
, 
Evîyday
)

97 
	`givíTh©ItIs
(
SATURDAY
);

98 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

99 
	`givíTh©ItIs
(
SUNDAY
);

100 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

101 
	`givíTh©ItIs
(
MONDAY
);

102 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

103 
	`givíTh©ItIs
(
TUESDAY
);

104 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

105 
	`givíTh©ItIs
(
WEDNESDAY
);

106 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

107 
	`givíTh©ItIs
(
THURSDAY
);

108 
	`CheckTh©TimeM©ches
(
EVERYDAY
);

109 
	`givíTh©ItIs
(
FRIDAY
);

110 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\LightController.h

9 #i‚de‡
D_LightC⁄åﬁÀr_H


10 
	#D_LightC⁄åﬁÀr_H


	)

20 
	~"LightDrivî.h
"

21 
	~"comm⁄.h
"

23 íum {
	mMAX_LIGHTS
 = 32};

25 
LightC⁄åﬁÀr_Cª©e
();

26 
LightC⁄åﬁÀr_De°roy
();

27 
BOOL
 
LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
*);

28 
BOOL
 
LightC⁄åﬁÀr_Remove
(
id
);

29 
LightC⁄åﬁÀr_Tu∫On
(
id
);

30 
LightC⁄åﬁÀr_Tu∫Off
(
id
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\LightScheduler.h

9 #i‚de‡
D_LightScheduÀr_H


10 
	#D_LightScheduÀr_H


	)

18 
LightScheduÀr_Cª©e
();

19 
LightScheduÀr_De°roy
();

20 
LightScheduÀr_ScheduÀTu∫On
(
id
, 
day
, 
möuã
);

21 
LightScheduÀr_ScheduÀTu∫OnR™domize
(
id
, 
day
, 
möuã
);

22 
LightScheduÀr_ScheduÀTu∫OffR™domize
(
id
, 
day
, 
möuã
);

23 
LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
);

24 
LightScheduÀr_ScheduÀRemove
(
id
, 
day
, 
möuã
);

25 
LightScheduÀr_TimeToCheckTheScheduÀ
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\RandomMinute.h

9 #i‚de‡
D_R™domMöuã_H


10 
	#D_R™domMöuã_H


	)

17 
	~<°dlib.h
>

19 
R™domMöuã_Cª©e
(
bound
);

20 (*
R™domMöuã_Gë
)();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\AcmeWirelessLightDriver.h

9 #i‚de‡
D_AcmeWúñessLightDrivî_H


10 
	#D_AcmeWúñessLightDrivî_H


	)

17 
	~"LightDrivî.h
"

19 
AcmeWúñessLightDrivî
 
	tAcmeWúñessLightDrivî
;

21 
	eAcmeWúñess_Hou£Code
 { 
	mAcme_A
,
	mAcme_B
,
	mAcme_C
,
	mAcme_D
,
	mAcme_E
,
	mAcme_F
,
	mAcme_G
 } 
	tAcmeWúñess_Hou£Code
;

23 
LightDrivî
* 
AcmeWúñessLightDrivî_Cª©e
(
lightId
, 
ch™√l
, 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
);

24 
AcmeWúñessLightDrivî_De°roy
(
LightDrivî
*);

25 
AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
*);

26 
AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\LightDriver.h

9 #i‚de‡
D_LightDrivî_H


10 
	#D_LightDrivî_H


	)

19 
LightDrivî
 
	tLightDrivî
;

21 
LightDrivî_De°roy
(
LightDrivî
*);

22 
LightDrivî_Tu∫On
(
LightDrivî
*);

23 
LightDrivî_Tu∫Off
(
LightDrivî
*);

24 c⁄° * 
LightDrivî_GëTy≥
(
LightDrivî
*);

25 
LightDrivî_GëId
(
LightDrivî
*);

27 
	tLightDrivîFun˘i⁄
(
	tLightDrivî
*);

29 
LightDrivî
* 
LightDrivî_Cª©e
(LightDrivî* 
£lf
,

30 c⁄° * 
ty≥
,

31 
id
,

32 
LightDrivîFun˘i⁄
* 
de°roy
,

33 
LightDrivîFun˘i⁄
* 
⁄
,

34 
LightDrivîFun˘i⁄
* 
off
);

38 
LightDrivî
* 
LightDrivî_Cª©eNuŒ
(
id
);

41 
	sLightDrivî


43 c⁄° * 
	mty≥
;

44 
	mid
;

45 
LightDrivîFun˘i⁄
* 
	mde°roy
;

46 
LightDrivîFun˘i⁄
* 
	m⁄
;

47 
LightDrivîFun˘i⁄
* 
	moff
;

53 
	sLightDrivî


55 c⁄° * 
	mty≥
;

56 
	mid
;

57 
LightDrivîFun˘i⁄
* 
	mde°roy
;

58 
LightDrivîFun˘i⁄
* 
	m⁄
;

59 
LightDrivîFun˘i⁄
* 
	moff
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\MemMappedLightDriver.h

9 #i‚de‡
D_MemM≠≥dLightDrivî_H


10 
	#D_MemM≠≥dLightDrivî_H


	)

17 
	~"LightDrivî.h
"

18 
	~<°döt.h
>

20 
MemM≠≥dLightDrivî
 
	tMemM≠≥dLightDrivî
;

22 
LightDrivî
* 
MemM≠≥dLightDrivî_Cª©e
(
lightId
, 
uöt32_t
* 
addªss
);

23 
MemM≠≥dLightDrivî_De°roy
(
LightDrivî
*);

24 
MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
*);

25 
MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\X10LightDriver.h

9 #i‚de‡
D_X10LightDrivî_H


10 
	#D_X10LightDrivî_H


	)

17 
	~"LightDrivî.h
"

20 
	eX10_Hou£Code
 { 
	mX10_A
,
	mX10_B
,
	mX10_C
,
	mX10_D
,
	mX10_E
,
	mX10_F
,

21 
	mX10_G
,
	mX10_H
,
	mX10_I
,
	mX10_J
,
	mX10_K
,
	mX10_L
,
	mX10_M
,
	mX10_N
,
	mX10_O
,
	mX10_P
 } 
	tX10_Hou£Code
;

23 
LightDrivî
* 
X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
code
, 
unô
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\util\TimeService.h

9 #i‚de‡
D_TimeSîvi˚_H


10 
	#D_TimeSîvi˚_H


	)

18 
	~"comm⁄.h
"

19 
	eDAY
 {

20 
	mEVERYDAY
=-3, 
	mWEEKDAY
=-2, 
	mWEEKEND
=-1,

21 
	mSUNDAY
=1, 
	mMONDAY
, 
	mTUESDAY
, 
	mWEDNESDAY
, 
	mTHURSDAY
, 
	mFRIDAY
, 
	mSATURDAY


24 
TimeSîvi˚_Cª©e
();

25 
TimeSîvi˚_De°roy
();

26 
TimeSîvi˚_GëMöuã
();

27 
TimeSîvi˚_GëDay
();

29 
BOOL
 
TimeSîvi˚_M©chesNow
(
ªa˘i⁄Day
, 
möuã
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\util\common.h

9 #i‚de‡
D_comm⁄_H


10 
	#D_comm⁄_H


	)

12 #i‚de‡
BOOL


13 
	#BOOL
 

	)

16 #i‚de‡
TRUE


17 
	#TRUE
 1

	)

20 #i‚de‡
FALSE


21 
	#FALSE
 0

	)

24 #i‚de‡
NULL


25 
	#NULL
 0

	)

30 
ex∂odesInTe°Envú⁄mít
(*);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeRandomMinute.c

4 
	~"FakeR™domMöuã.h
"

5 
	~"CµUTe°/Te°H¨√ss_c.h
"

7 
	g£ed
 = -1;

8 
	gö¸emít
 = -1;

10 
	$FakeR™domMöuã_Re£t
()

12 
£ed
 = -1;

13 
ö¸emít
 = -1;

14 
	}
}

16 
	$FakeR™domMöuã_SëSìdAndIn¸emít
(
s
, 
i
)

18 
£ed
 = 
s
;

19 
ö¸emít
 = 
i
;

20 
	}
}

22 
	$FakeR™domMöuã_Gë
()

24 
ªsu…
 = 
£ed
;

25 
£ed
 +
ö¸emít
;

26  
ªsu…
;

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeRandomMinute.h

5 #i‚de‡
D_FakeR™domMöuã_H


6 
	#D_FakeR™domMöuã_H


	)

13 
	~"R™domMöuã.h
"

15 
FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 
ö¸emít
);

16 
FakeR™domMöuã_Gë
();

17 
FakeR™domMöuã_Re£t
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeService.c

5 
	~"TimeSîvi˚.h
"

8 
	gtheMöuã
;

9 
	gtheDay
;

11 
	$TimeSîvi˚_Cª©e
()

13 
theMöuã
 = -1;

14 
theDay
 = -1;

15 
	}
}

17 
	$TimeSîvi˚_De°roy
()

19 
	}
}

21 
	$TimeSîvi˚_GëMöuã
()

23  
theMöuã
;

24 
	}
}

26 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

28 
theMöuã
 = 
möuã
;

29 
	}
}

31 
	$FakeTimeSîvi˚_SëDay
(
day
)

33 
theDay
 = 
day
;

34 
	}
}

36 
	$TimeSîvi˚_GëDay
()

38  
theDay
;

39 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeService.h

5 #i‚de‡
D_FakeTimeSîvi˚_H


6 
	#D_FakeTimeSîvi˚_H


	)

15 
	~"TimeSîvi˚.h
"

17 
FakeTimeSîvi˚_SëMöuã
();

18 
FakeTimeSîvi˚_SëDay
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeServiceTest.cpp

5 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	~"TimeSîvi˚.h
"

10 
	~"FakeTimeSîvi˚.h
"

13 
	$TEST_GROUP
(
TimeSîvi˚
)

15 
	`£tup
()

17 
	`TimeSîvi˚_Cª©e
();

20 
	`ã¨down
()

22 
	`TimeSîvi˚_De°roy
();

24 
	}
};

26 
	$TEST
(
TimeSîvi˚
, 
Cª©e
)

28 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëMöuã
());

29 
	`LONGS_EQUAL
(-1, 
	`TimeSîvi˚_GëDay
());

30 
	}
}

32 
	$TEST
(
TimeSîvi˚
, 
Së
)

34 
	`FakeTimeSîvi˚_SëMöuã
(42);

35 
	`LONGS_EQUAL
(42, 
	`TimeSîvi˚_GëMöuã
());

36 
	`FakeTimeSîvi˚_SëDay
(3);

37 
	`LONGS_EQUAL
(3, 
	`TimeSîvi˚_GëDay
());

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpy.c

1 
	~"LightDrivîSpy.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

4 
	~"comm⁄.h
"

5 
	~"CµUTe°/Te°H¨√ss_c.h
"

8 
	sLightDrivîSpy


10 
LightDrivî
 
	mba£
;

13 
	g°©es
[
MAX_LIGHTS
];

14 
	gœ°Id
;

15 
	gœ°Sèã
;

17 
	$LightDrivîSpy_Re£t
()

19 
i
;

20 
i
 = 0; i < 
MAX_LIGHTS
; i++)

22 
°©es
[
i
] = 
LIGHT_STATE_UNKNOWN
;

24 
œ°Id
 = 
NO_LIGHT_ID
;

25 
œ°Sèã
 = 
LIGHT_STATE_UNKNOWN
;

26 
	}
}

28 
	$LightDrivîSpy_AddSpõsToC⁄åﬁÀr
()

30 
i
;

31 
i
 = 0; i < 
MAX_LIGHTS
; i++)

33 
LightDrivî
* 
•y
 = (LightDrivî*)
	`LightDrivîSpy_Cª©e
(
i
);

34 
	`LightC⁄åﬁÀr_Add
(
i
, 
•y
);

36 
	}
}

38 
LightDrivî
* 
	$LightDrivîSpy_Cª©e
(
id
)

40 
LightDrivî
* 
£lf
 = 
	`mÆloc
((
LightDrivîSpy
));

41  
	`LightDrivî_Cª©e
(
£lf
, "Spy", 
id
,

42 
LightDrivîSpy_De°roy
, 
LightDrivîSpy_Tu∫On
, 
LightDrivîSpy_Tu∫Off
);

43 
	}
}

45 
	$LightDrivîSpy_De°roy
(
LightDrivî
* 
su≥r
)

47 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

48 
°©es
[
£lf
->
ba£
.
id
] = 
LIGHT_STATE_UNKNOWN
;

49 
	`‰ì
(
£lf
);

50 
	}
}

52 
	$ßve
(
id
, 
°©e
)

54 
°©es
[
id
] = 
°©e
;

55 
œ°Id
 = 
id
;

56 
œ°Sèã
 = 
°©e
;

57 
	}
}

59 
	$LightDrivîSpy_Tu∫On
(
LightDrivî
* 
su≥r
)

61 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

62 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_ON
);

63 
	}
}

65 
	$LightDrivîSpy_Tu∫Off
(
LightDrivî
* 
su≥r
)

67 
LightDrivîSpy
* 
£lf
 = (LightDrivîSpy*)
su≥r
;

68 
	`ßve
(
£lf
->
ba£
.
id
, 
LIGHT_OFF
);

69 
	}
}

71 
	$LightDrivîSpy_GëSèã
(
id
)

73  
°©es
[
id
];

74 
	}
}

76 
	$LightDrivîSpy_GëLa°Id
()

78  
œ°Id
;

79 
	}
}

81 
	$LightDrivîSpy_GëLa°Sèã
()

83  
œ°Sèã
;

84 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpy.h

1 #i‚de‡
D_LightDrivîSpy_H


2 
	#D_LightDrivîSpy_H


	)

9 
	~"LightDrivî.h
"

10 
	~"LightC⁄åﬁÀr.h
"

12 íum { 
	mNO_LIGHT_ID
 = -1, 
	mLIGHT_STATE_UNKNOWN
 = -1, 
	mLIGHT_OFF
 = 0, 
	mLIGHT_ON
 = 1 };

14 
LightDrivîSpy
 
	tLightDrivîSpy
;

16 
LightDrivî
* 
LightDrivîSpy_Cª©e
(
id
);

17 
LightDrivîSpy_De°roy
(
LightDrivî
*);

18 
LightDrivîSpy_Tu∫On
(
LightDrivî
*);

19 
LightDrivîSpy_Tu∫Off
(
LightDrivî
*);

21 
LightDrivîSpy_Re£t
();

22 
LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

23 
LightDrivîSpy_GëSèã
(
id
);

24 
LightDrivîSpy_GëLa°Id
();

25 
LightDrivîSpy_GëLa°Sèã
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpyTest.cpp

3 
	~"LightDrivîSpy.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
LightDrivîSpy
)

11 
LightDrivî
* 
lightDrivîSpy
;

13 
	`£tup
()

15 
	`LightDrivîSpy_Re£t
();

16 
lightDrivîSpy
 = 
	`LightDrivîSpy_Cª©e
(1);

19 
	`ã¨down
()

21 
	`LightDrivîSpy_De°roy
(
lightDrivîSpy
);

23 
	}
};

25 
	$TEST
(
LightDrivîSpy
, 
Cª©e
)

27 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëSèã
(1));

28 
	}
}

30 
	$TEST
(
LightDrivîSpy
, 
On
)

32 
	`LightDrivîSpy_Tu∫On
(
lightDrivîSpy
);

33 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

34 
	}
}

36 
	$TEST
(
LightDrivîSpy
, 
Off
)

38 
	`LightDrivîSpy_Tu∫Off
(
lightDrivîSpy
);

39 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(1));

40 
	}
}

42 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫On
)

44 
	`LightDrivîSpy_Tu∫Off
(
lightDrivîSpy
);

45 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

46 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëLa°Sèã
());

47 
	}
}

49 
	$TEST
(
LightDrivîSpy
, 
Rec‹dsLa°IdLa°Tu∫Off
)

51 
	`LightDrivîSpy_Tu∫On
(
lightDrivîSpy
);

52 
	`LONGS_EQUAL
(1, 
	`LightDrivîSpy_GëLa°Id
());

53 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëLa°Sèã
());

54 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\LightController.c

9 
	~"LightC⁄åﬁÀr.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"X10LightDrivî.h
"

13 
	~"LightDrivîSpy.h
"

14 
	~"AcmeWúñessLightDrivî.h
"

15 
	~"MemM≠≥dLightDrivî.h
"

16 
	~"comm⁄.h
"

20 
LightDrivî
* 
	glightDrivîs
[
MAX_LIGHTS
] = { 
NULL
 };

25 
	$LightC⁄åﬁÀr_Cª©e
()

27 
	`mem£t
(
lightDrivîs
, 0, (lightDrivers));

28 
	}
}

32 
	$LightC⁄åﬁÀr_De°roy
()

34 
i
;

35 
i
 = 0; i < 
MAX_LIGHTS
; i++)

37 
LightDrivî
* 
drivî
 = 
lightDrivîs
[
i
];

38 i‡(
drivî
 !
NULL
)

39 
	`LightDrivî_De°roy
(
drivî
);

40 
lightDrivîs
[
i
] = 
NULL
;

42 
	}
}

46 
BOOL
 
	$LightC⁄åﬁÀr_Add
(
id
, 
LightDrivî
* 
lightDrivî
)

48 i‡(
id
 < 0 || id >
MAX_LIGHTS
 || !
lightDrivî
)

49  
FALSE
;

51 i‡(
lightDrivîs
[
id
] !
NULL
)

52 
	`LightDrivî_De°roy
(
lightDrivîs
[
id
]);

54 
lightDrivîs
[
id
] = 
lightDrivî
;

55  
TRUE
;

56 
	}
}

60 
BOOL
 
	$LightC⁄åﬁÀr_Remove
(
id
)

62 i‡(
id
 < 0 || id >
MAX_LIGHTS
)

63  
FALSE
;

65 i‡(
lightDrivîs
[
id
] !
NULL
)

66 
	`LightDrivî_De°roy
(
lightDrivîs
[
id
]);

68 
lightDrivîs
[
id
] = 
NULL
;

69  
TRUE
;

70 
	}
}

74 
	$LightC⁄åﬁÀr_Tu∫On
(
id
)

76 
	`LightDrivî_Tu∫On
(
lightDrivîs
[
id
]);

77 
	}
}

79 
	$LightC⁄åﬁÀr_Tu∫Off
(
id
)

81 
	`LightDrivî_Tu∫Off
(
lightDrivîs
[
id
]);

82 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\LightScheduler.c

9 
	~"LightScheduÀr.h
"

10 
	~"LightC⁄åﬁÀr.h
"

11 
	~"TimeSîvi˚.h
"

12 
	~"R™domMöuã.h
"

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

17 
	mTURNON
, 
	mTURNOFF
, 
	mDIM
, 
	mRANDOM_ON
, 
	mRANDOM_OFF


21 
	mMAX_EVENTS
 = 64,

22 
	mUNUSED
 = -1

26 
	mid
;

27 
	mday
;

28 
	mmöuã
;

29 
	mevít
;

30 
	møndomize
;

31 
	møndomMöuãs
;

32 
	mexåaR™domEvítPªvíãr
;

34 } 
	tScheduÀdLightEvít
;

36 
ScheduÀdLightEvít
 
	gevítLi°
[
MAX_EVENTS
];

38 
	$LightScheduÀr_Cª©e
()

40 
i
;

41 
i
 = 0; i < 
MAX_EVENTS
; i++)

43 
evítLi°
[
i
].
id
 = 
UNUSED
;

45 
	}
}

47 
	$LightScheduÀr_De°roy
()

49 
	}
}

51 
	$ScheduÀdLightEvít_R™domize
(
ScheduÀdLightEvít
* 
e
)

53 i‡(
e
->
øndomize
 =
RANDOM_ON
)

54 
e
->
øndomMöuãs
 = 
	`R™domMöuã_Gë
();

56 
e
->
øndomMöuãs
 = 0;

57 
	}
}

58 
	$scheduÀEvít
(
id
, 
day
, 
möuã
, 
evít
, 
øndomize
)

60 
i
;

62 
i
 = 0; i < 
MAX_EVENTS
; i++)

64 i‡(
evítLi°
[
i
].
id
 =
UNUSED
)

66 
evítLi°
[
i
].
id
 = id;

67 
evítLi°
[
i
].
day
 = day;

68 
evítLi°
[
i
].
möuã
 = minute;

69 
evítLi°
[
i
].
evít
 =Évent;

70 
evítLi°
[
i
].
øndomize
 =Ñandomize;

71 
evítLi°
[
i
].
exåaR™domEvítPªvíãr
 = 0;

72 
	`ScheduÀdLightEvít_R™domize
(&
evítLi°
[
i
]);

76 
	}
}

78 
	$LightScheduÀr_ScheduÀTu∫On
(
id
, 
day
, 
möuã
)

80 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_OFF
);

81 
	}
}

83 
	$LightScheduÀr_ScheduÀTu∫OnR™domize
(
id
, 
day
, 
möuã
)

85 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_ON
);

86 
	}
}

88 
	$LightScheduÀr_ScheduÀTu∫Off
(
id
, 
day
, 
möuã
)

90 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNOFF
, 
RANDOM_OFF
);

91 
	}
}

93 
	$LightScheduÀr_ScheduÀTu∫OffR™domize
(
id
, 
day
, 
möuã
)

95 
	`scheduÀEvít
(
id
, 
day
, 
möuã
, 
TURNON
, 
RANDOM_ON
);

96 
	}
}

98 
BOOL
 
	$øndomEvítAÃódyH≠≥√dToday
(
ScheduÀdLightEvít
* 
lightEvít
)

100 i‡(
lightEvít
->
exåaR™domEvítPªvíãr
 > 0)

102 
lightEvít
->
exåaR™domEvítPªvíãr
--;

103  
TRUE
;

105  
FALSE
;

106 
	}
}

108 
	$›î©eLight
(
ScheduÀdLightEvít
* 
lightEvít
)

110 i‡(
TURNON
 =
lightEvít
->
evít
)

111 
	`LightC⁄åﬁÀr_Tu∫On
(
lightEvít
->
id
);

112 i‡(
TURNOFF
 =
lightEvít
->
evít
)

113 
	`LightC⁄åﬁÀr_Tu∫Off
(
lightEvít
->
id
);

114 
	}
}

116 
	$¥evítAnŸhîR™domLightO≥øti⁄
(
ScheduÀdLightEvít
* 
lightEvít
)

118 i‡(
lightEvít
->
øndomize
 =
RANDOM_ON
)

119 
lightEvít
->
exåaR™domEvítPªvíãr
 = 61;

120 
	}
}

122 
	$checkEvít
(
ScheduÀdLightEvít
* 
lightEvít
)

124 i‡(
	`øndomEvítAÃódyH≠≥√dToday
(
lightEvít
))

127 i‡(!
	`TimeSîvi˚_M©chesNow
(
lightEvít
->
day
,ÜightEvít->
möuã
 +ÜightEvít->
øndomMöuãs
))

130 
	`›î©eLight
(
lightEvít
);

132 
	`ScheduÀdLightEvít_R™domize
(
lightEvít
);

133 
	`¥evítAnŸhîR™domLightO≥øti⁄
(
lightEvít
);

134 
	}
}

136 
	$LightScheduÀr_TimeToCheckTheScheduÀ
()

138 
i
;

140 
i
 = 0; i < 
MAX_EVENTS
; i++)

142 i‡(
evítLi°
[
i
].
id
 !
UNUSED
)

143 
	`checkEvít
(&
evítLi°
[
i
]);

145 
	}
}

147 
	$LightScheduÀr_ScheduÀRemove
(
id
, 
day
, 
möuã
)

149 
i
;

151 
i
 = 0; i < 
MAX_EVENTS
; i++)

153 i‡(
evítLi°
[
i
].
id
 == id

154 && 
evítLi°
[
i
].
day
 == day

155 && 
evítLi°
[
i
].
möuã
 == minute)

157 
evítLi°
[
i
].
id
 = 
UNUSED
;

160 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\RandomMinuteGenerator.c

9 
	~"R™domMöuã.h
"

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

15 
	gbound
 = 0;

17 
	$R™domMöuã_Cª©e
(
b
)

19 
bound
 = 
b
;

20 
	}
}

23 
	$R™domMöuã_GëIm∂
()

25  
bound
 - 
	`ønd
() % (bound * 2 + 1);

26 
	}
}

28 (*
	gR™domMöuã_Gë
)(Ë
R™domMöuã_GëIm∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\AcmeWirelessLightDriver.c

9 
	~"AcmeWúñessLightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

15 
	sAcmeWúñessLightDrivî


17 
LightDrivî
 
	mba£
;

18 
	mch™√l
;

19 
AcmeWúñess_Hou£Code
 
	mcode
;

20 
	munô
;

24 
LightDrivî
* 
	$AcmeWúñessLightDrivî_Cª©e
(
id
, 
ch™√l
,

25 
AcmeWúñess_Hou£Code
 
code
, 
unôNumbî
)

27 
AcmeWúñessLightDrivî
* 
£lf
 = 
	`mÆloc
((AcmeWirelessLightDriver));

28 
	`mem£t
(
£lf
, 0, (
AcmeWúñessLightDrivî
));

29 
£lf
->
ch™√l
 = channel;

30 
£lf
->
code
 = code;

31 
£lf
->
unô
 = 
unôNumbî
;

32  
	`LightDrivî_Cª©e
(&
£lf
->
ba£
, "AcmeWúñess", 
id
,

33 
AcmeWúñessLightDrivî_De°roy
,

34 
AcmeWúñessLightDrivî_Tu∫On
,

35 
AcmeWúñessLightDrivî_Tu∫Off
);

36 
	}
}

38 
	$AcmeWúñessLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

40 
	`‰ì
(
su≥r
);

41 
	}
}

43 
	$AcmeWúñessLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

45 
AcmeWúñessLightDrivî
* 
£lf
 = (AcmeWúñessLightDrivî*)
su≥r
;

46 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

47 
	}
}

49 
	$AcmeWúñessLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

51 
AcmeWúñessLightDrivî
* 
£lf
 = (AcmeWúñessLightDrivî*)
su≥r
;

52 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

53 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\LightDriver.c

9 
	~"LightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

15 
LightDrivî
* 
	$LightDrivî_Cª©e
(
LightDrivî
* 
£lf
,

16 c⁄° * 
ty≥
, 
id
,

17 
LightDrivîFun˘i⁄
* 
de°roy
,

18 
LightDrivîFun˘i⁄
* 
⁄
,

19 
LightDrivîFun˘i⁄
* 
off
)

21 
£lf
->
ty≥
 =Åype;

22 
£lf
->
id
 = id;

23 
£lf
->
de°roy
 = destroy;

24 
£lf
->
⁄
 = on;

25 
£lf
->
off
 = off;

27  
£lf
;

28 
	}
}

33 
	$LightDrivî_De°roy
(
LightDrivî
* 
£lf
)

35 
£lf
->
	`de°roy
(self);

36 
	}
}

38 
	$LightDrivî_Tu∫On
(
LightDrivî
* 
£lf
)

40 
£lf
->
	`⁄
(self);

41 
	}
}

43 
	$LightDrivî_Tu∫Off
(
LightDrivî
* 
£lf
)

45 
£lf
->
	`off
(self);

46 
	}
}

50 
	$nuŒDrivî
(
LightDrivî
* 
d
Ë{
	}
}

51 
	$nuŒDe°royî
(
LightDrivî
* 
d
Ë{ 
	`‰ì
(d); 
	}
}

53 
LightDrivî
* 
	$LightDrivî_Cª©eNuŒ
(
id
)

55 
LightDrivî
* 
£lf
 = 
	`mÆloc
((LightDriver));

56  
	`LightDrivî_Cª©e
(
£lf
, "NuŒLightDrivî", 
id
,

57 
nuŒDe°royî
, 
nuŒDrivî
,ÇullDriver);

58 
	}
}

62 c⁄° * 
	$LightDrivî_GëTy≥
(
LightDrivî
* 
drivî
)

64  
drivî
->
ty≥
;

65 
	}
}

67 
	$LightDrivî_GëId
(
LightDrivî
* 
drivî
)

69  
drivî
->
id
;

70 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\MemMappedLightDriver.c

9 
	~"MemM≠≥dLightDrivî.h
"

10 
	~<°dlib.h
>

11 
	~<mem‹y.h
>

12 
	~"comm⁄.h
"

15 
	sMemM≠≥dLightDrivî


17 
LightDrivî
 
	mba£
;

18 
uöt32_t
* 
	maddªss
;

22 
LightDrivî
* 
	$MemM≠≥dLightDrivî_Cª©e
(
id
, 
uöt32_t
* 
addªss
)

24 
MemM≠≥dLightDrivî
* 
£lf
 = 
	`mÆloc
((MemMappedLightDriver));

25 
	`mem£t
(
£lf
, 0, (
MemM≠≥dLightDrivî
));

26 
£lf
->
addªss
 =áddress;

27  
	`LightDrivî_Cª©e
(&
£lf
->
ba£
, "Mem‹yM≠≥d", 
id
,

28 
MemM≠≥dLightDrivî_De°roy
,

29 
MemM≠≥dLightDrivî_Tu∫On
,

30 
MemM≠≥dLightDrivî_Tu∫Off
);

31 
	}
}

33 
	$MemM≠≥dLightDrivî_De°roy
(
LightDrivî
* 
su≥r
)

35 
	`‰ì
(
su≥r
);

36 
	}
}

38 
	$MemM≠≥dLightDrivî_Tu∫On
(
LightDrivî
* 
su≥r
)

40 
MemM≠≥dLightDrivî
* 
£lf
 = (MemM≠≥dLightDrivî*)
su≥r
;

41 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

42 
	}
}

44 
	$MemM≠≥dLightDrivî_Tu∫Off
(
LightDrivî
* 
su≥r
)

46 
MemM≠≥dLightDrivî
* 
£lf
 = (MemM≠≥dLightDrivî*)
su≥r
;

47 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

48 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\X10LightDriver.c

9 
	~"X10LightDrivî.h
"

10 
	~"LightDrivî.h
"

11 
	~<°dlib.h
>

12 
	~<mem‹y.h
>

13 
	~"comm⁄.h
"

15 
X10LightDrivî_De°roy
(
LightDrivî
*);

16 
X10LightDrivî_Tu∫On
(
LightDrivî
*);

17 
X10LightDrivî_Tu∫Off
(
LightDrivî
*);

20 
	sX10LightDrivî


22 
LightDrivî
 
	mba£
;

23 
X10_Hou£Code
 
	mhou£
;

24 
	munô
;

26 }
	tX10LightDrivî
;

30 
LightDrivî
* 
	$X10LightDrivî_Cª©e
(
id
, 
X10_Hou£Code
 
hou£
, 
unô
)

32 
X10LightDrivî
* 
£lf
 = 
	`mÆloc
((X10LightDriver));

33 
	`mem£t
(
£lf
, 0, (
X10LightDrivî
));

34 
£lf
->
hou£
 = house;

35 
£lf
->
unô
 = unit;

36  
	`LightDrivî_Cª©e
(&
£lf
->
ba£
, "X10", 
id
, 
X10LightDrivî_De°roy
,

37 
X10LightDrivî_Tu∫On
, 
X10LightDrivî_Tu∫Off
);

38 
	}
}

42 
	$X10LightDrivî_De°roy
(
LightDrivî
* 
ba£
)

45 
	`‰ì
(
ba£
);

46 
	}
}

50 
	$X10LightDrivî_Tu∫On
(
LightDrivî
* 
ba£
)

52 
X10LightDrivî
* 
£lf
 = (X10LightDrivî*Ë
ba£
;

53 
hou£
 = 
£lf
->house;

54 
unô
 = 
£lf
->unit;

57 vﬁ©ûê* 
ju°ToGëRidOfW¨nög
 = (*) 0xdeadbeef;

58 *
ju°ToGëRidOfW¨nög
 +(
hou£
 + 
unô
);

59 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

61 
	}
}

64 
	$X10LightDrivî_Tu∫Off
(
LightDrivî
* 
ba£
)

66 
X10LightDrivî
* 
£lf
 = (X10LightDrivî*Ë
ba£
;

67 
hou£
 = 
£lf
->house;

68 
unô
 = 
£lf
->unit;

71 vﬁ©ûê* 
ju°ToGëRidOfW¨nög
 = (*) 0xdeadbeef;

72 *
ju°ToGëRidOfW¨nög
 +(
hou£
 + 
unô
);

73 
	`ex∂odesInTe°Envú⁄mít
(
£lf
);

75 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\TimeService.c

9 
	~"TimeSîvi˚.h
"

10 
	~"comm⁄.h
"

14 
	$TimeSîvi˚_Cª©e
()

17 
	`ex∂odesInTe°Envú⁄mít
(
NULL
);

18 
	}
}

20 
	$TimeSîvi˚_De°roy
()

23 
	`ex∂odesInTe°Envú⁄mít
(
NULL
);

24 
	}
}

26 
	$TimeSîvi˚_GëMöuã
()

29 
	`ex∂odesInTe°Envú⁄mít
(
NULL
);

31 
	}
}

33 
	$TimeSîvi˚_GëDay
()

36 
	`ex∂odesInTe°Envú⁄mít
(
NULL
);

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\TimeService_Helpers.c

9 
	~"TimeSîvi˚.h
"

11 
BOOL
 
	$TimeSîvi˚_M©chesNow
(
ªa˘i⁄Day
, 
möuã
)

13 
today
;

15 i‡(
	`TimeSîvi˚_GëMöuã
(Ë!
möuã
)

16  
FALSE
;

18 
today
 = 
	`TimeSîvi˚_GëDay
();

19 i‡(
ªa˘i⁄Day
 =
EVERYDAY
)

20  
TRUE
;

21 i‡(
ªa˘i⁄Day
 =
today
)

22  
TRUE
;

23 i‡(
ªa˘i⁄Day
 =
WEEKEND
 && (
SATURDAY
 =
today
 || 
SUNDAY
 ==Åoday))

24  
TRUE
;

25 i‡(
ªa˘i⁄Day
 =
WEEKDAY
 && 
today
 >
MONDAY
 &&Åoday <
FRIDAY
)

26  
TRUE
;

27  
FALSE
;

28 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\common.c

9 
	~"comm⁄.h
"

10 
	~<as£π.h
>

12 
	$ex∂odesInTe°Envú⁄mít
(* 
nŸhög
)

14 
	`as£π
(0 == "Explode - intercepted callÅhat cannot be made inÅestÉnvironment");

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\LightControllerTest.cpp

11 
	~"LightC⁄åﬁÀr.h
"

12 
	~"LightDrivîSpy.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
LightC⁄åﬁÀr
)

21 
	`£tup
()

23 
	`LightC⁄åﬁÀr_Cª©e
();

24 
	`LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

27 
	`ã¨down
()

29 
	`LightC⁄åﬁÀr_De°roy
();

31 
	}
};

34 
	$TEST
(
LightC⁄åﬁÀr
, 
Cª©e
)

36 
	}
}

38 
	$TEST
(
LightC⁄åﬁÀr
, 
DrivîIsDe°royedByLightC⁄åﬁÀr
)

40 
LightDrivî
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(1);

41 
	`LightC⁄åﬁÀr_Add
(1, 
•y
);

42 
	}
}

45 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫On
)

47 
	`LightC⁄åﬁÀr_Tu∫On
(1);

48 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(1));

49 
	}
}

51 
	$TEST
(
LightC⁄åﬁÀr
, 
Tu∫Off
)

53 
	`LightC⁄åﬁÀr_Tu∫Off
(14);

54 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(14));

55 
	}
}

58 
	$TEST
(
LightC⁄åﬁÀr
, 
AŒDrivîsDe°royed
)

60 
i
 = 0; i < 
MAX_LIGHTS
; i++)

62 
LightDrivî
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
i
);

63 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
i
, 
•y
));

65 
	}
}

69 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdLowîR™ge
)

71 
LightDrivî
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(0);

72 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(0, 
•y
));

73 
	}
}

75 
	$TEST
(
LightC⁄åﬁÀr
, 
VÆidIdUµîR™ge
)

77 
LightDrivî
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

78 
	`LONGS_EQUAL
(
TRUE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
-1, 
•y
));

79 
	}
}

81 
	$TEST
(
LightC⁄åﬁÀr
, 
InVÆidIdBey⁄dUµîR™ge
)

83 
LightDrivî
* 
•y
 = 
	`LightDrivîSpy_Cª©e
(
MAX_LIGHTS
);

84 
	`LONGS_EQUAL
(
FALSE
, 
	`LightC⁄åﬁÀr_Add
(
MAX_LIGHTS
, 
•y
));

85 
	`‰ì
(
•y
);

86 
	}
}

88 
	$TEST
(
LightC⁄åﬁÀr
, 
Reje˘sNuŒDrivîs
)

90 
	`LONGS_EQUAL
(
FALSE
, 
	`LightC⁄åﬁÀr_Add
(1, 
NULL
));

91 
	}
}

96 
	$TEST
(
LightC⁄åﬁÀr
, 
RemoveExi°ögLightDrivîSuc˚eds
)

98 
	`CHECK
(
	`LightC⁄åﬁÀr_Remove
(10));

99 
	}
}

101 
	$TEST
(
LightC⁄åﬁÀr
, 
RemoveN⁄Exi°ögLightDrivîD€sNoH¨m
)

103 
	`CHECK
(
	`LightC⁄åﬁÀr_Remove
(10));

104 
	`CHECK
(
	`LightC⁄åﬁÀr_Remove
(10));

105 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\LightSchedulerTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"LightScheduÀr.h
"

14 
	~"LightDrivîSpy.h
"

15 
	~"FakeTimeSîvi˚.h
"

16 
	~"FakeR™domMöuã.h
"

19 
	$TEST_GROUP
(
LightScheduÀr
)

21 
scheduÀdMöuã
;

22 
ex≥˘edId
;

23 
ex≥˘edLevñ
;

24 
lightNumbî
;

25 
£ed
;

26 
p£udoR™domIn¸emít
;

29 
	`£tup
()

31 
	`LightC⁄åﬁÀr_Cª©e
();

32 
	`LightDrivîSpy_Re£t
();

33 
	`LightDrivîSpy_AddSpõsToC⁄åﬁÀr
();

34 
	`LightScheduÀr_Cª©e
();

36 
scheduÀdMöuã
 = 1234;

37 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

38 
lightNumbî
 = 4;

40 
	`UT_PTR_SET
(
R™domMöuã_Gë
, 
FakeR™domMöuã_Gë
);

41 
	`FakeR™domMöuã_Re£t
();

42 
£ed
 = -10;

43 
p£udoR™domIn¸emít
 = 5;

46 
	`ã¨down
()

48 
	`LightScheduÀr_De°roy
();

49 
	`LightC⁄åﬁÀr_De°roy
();

52 
	`wakeupAndCheck
()

54 
	`LightScheduÀr_TimeToCheckTheScheduÀ
();

56 
	`LONGS_EQUAL
(
ex≥˘edId
, 
	`LightDrivîSpy_GëLa°Id
());

57 
	`LONGS_EQUAL
(
ex≥˘edLevñ
, 
	`LightDrivîSpy_GëLa°Sèã
());

60 
	`£tNow
(
day
, 
möuã
)

62 
	`FakeTimeSîvi˚_SëDay
(
day
);

63 
	`FakeTimeSîvi˚_SëMöuã
(
möuã
);

66 
	`ex≥˘
(
id
, 
Àvñ
)

68 
ex≥˘edId
 = 
id
;

69 
ex≥˘edLevñ
 = 
Àvñ
;

72 
	`whíItBecomes
(
day
, 
möuã
)

74 
	`£tNow
(
day
, 
möuã
);

75 
	`wakeupAndCheck
();

78 
	}
};

80 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

82 
	`LONGS_EQUAL
(
NO_LIGHT_ID
, 
	`LightDrivîSpy_GëLa°Id
());

83 
	`LONGS_EQUAL
(
LIGHT_STATE_UNKNOWN
, 
	`LightDrivîSpy_GëLa°Sèã
());

84 
	}
}

86 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

88 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

89 
	`ex≥˘
(
NO_LIGHT_ID
,
LIGHT_STATE_UNKNOWN
);

90 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
-1);

91 
	}
}

93 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayItsTime
)

95 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 
scheduÀdMöuã
);

96 
	`ex≥˘
(3, 
LIGHT_ON
);

97 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

98 
	}
}

100 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayAndItsTime
)

102 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

103 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

104 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

105 
	}
}

107 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

109 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
TUESDAY
, 
scheduÀdMöuã
);

110 
	`ex≥˘
(3, 
LIGHT_ON
);

111 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

112 
	}
}

114 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

116 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
TUESDAY
, 
scheduÀdMöuã
);

117 
	`ex≥˘
(
lightNumbî
, 
LIGHT_OFF
);

118 
	`whíItBecomes
(
TUESDAY
, 
scheduÀdMöuã
);

119 
	}
}

121 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

123 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

124 
	`ex≥˘
(
lightNumbî
, 
LIGHT_OFF
);

125 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

126 
	}
}

128 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

130 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

131 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

132 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

133 
	}
}

135 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

137 
	`LightScheduÀr_ScheduÀTu∫Off
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

138 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

139 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

140 
	}
}

142 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

144 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKEND
, 
scheduÀdMöuã
);

145 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

146 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

147 
	}
}

149 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

151 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

152 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

153 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

154 
	}
}

156 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

158 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

159 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

160 
	`whíItBecomes
(
FRIDAY
, 
scheduÀdMöuã
);

161 
	}
}

163 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

165 
	`LightScheduÀr_ScheduÀTu∫On
(
lightNumbî
, 
WEEKDAY
, 
scheduÀdMöuã
);

166 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

167 
	`whíItBecomes
(
SATURDAY
, 
scheduÀdMöuã
);

168 
	}
}

170 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

172 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 
scheduÀdMöuã
);

173 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 
scheduÀdMöuã
);

175 
	`ex≥˘
(
NO_LIGHT_ID
, 
LIGHT_STATE_UNKNOWN
);

176 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

177 
	}
}

179 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsSameTime
)

181 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

182 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
);

183 
	`£tNow
(
MONDAY
, 
scheduÀdMöuã
);

185 
	`LightScheduÀr_TimeToCheckTheScheduÀ
();

187 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`LightDrivîSpy_GëSèã
(4));

188 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`LightDrivîSpy_GëSèã
(3));

189 
	}
}

191 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀScheduÀdEvítsDif„ª¡Times
)

193 
	`LightScheduÀr_ScheduÀTu∫Off
(4, 
MONDAY
, 
scheduÀdMöuã
);

194 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
MONDAY
, 
scheduÀdMöuã
+1);

196 
	`ex≥˘
(4, 
LIGHT_OFF
);

197 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
);

199 
	`ex≥˘
(3, 
LIGHT_ON
);

200 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
+1);

201 
	}
}

202 
	$TEST
(
LightScheduÀr
, 
E«bÀR™domize
)

204 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 1);

205 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

207 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

208 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

209 
	}
}

211 
	$TEST
(
LightScheduÀr
, 
Dif„ª¡R™dmomFa˘‹TheSec⁄dDay
)

213 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 1);

215 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

217 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

218 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

219 
	}
}

221 
	$TEST
(
LightScheduÀr
, 
Mu…ùÀR™domC⁄åﬁs
)

223 
	`FakeR™domMöuã_SëSìdAndIn¸emít
(
£ed
, 5);

225 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(
lightNumbî
, 
EVERYDAY
, 
scheduÀdMöuã
);

226 
	`LightScheduÀr_ScheduÀTu∫OnR™domize
(
lightNumbî
+1, 
EVERYDAY
, 
scheduÀdMöuã
+3);

228 
	`ex≥˘
(
lightNumbî
, 
LIGHT_ON
);

229 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 + 
£ed
);

230 
	`ex≥˘
(
lightNumbî
+1, 
LIGHT_ON
);

231 
	`whíItBecomes
(
MONDAY
, 
scheduÀdMöuã
 +
£ed
 + 3 + 5);

232 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~"R™domMöuã.h
"

18 íum { 
BOUND
=30 };

20 
	$TEST_GROUP
(
R™domMöuã
)

23 
	`£tup
()

25 
	`R™domMöuã_Cª©e
(
BOUND
);

28 
	`ã¨down
()

31 
	}
}

34 
	$TEST
(
R™domMöuã
, 
GëIsInR™ge
)

36 
möuã
;

38 
i
 = 0; i < 100; i++)

40 
möuã
 = 
	`R™domMöuã_Gë
();

41 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

43 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

44 
	`FAIL
("Minute out ofÑange");

47 
	}
}

49 
	$TEST
(
R™domMöuã
, 
AŒVÆuesPossibÀ
)

51 
möuã
;

52 
hô
[2*
BOUND
 + 1];

53 
	`mem£t
(
hô
, 0, (hit));

55 
i
 = 0; i < 500; i++)

57 
möuã
 = 
	`R™domMöuã_Gë
();

58 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

60 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

61 
	`FAIL
("Minute out ofÑange");

63 
hô
[
möuã
 + 
BOUND
]++;

67 
j
 = 0; j < 2*(
BOUND
) + 1; j++) {

68 
	`CHECK
(
hô
[
j
] > 0);

70 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\AcmeWirelessLightDriverTest.cpp

11 
	~"AcmeWúñessLightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
AcmeWúñessLightDrivî
)

19 
LightDrivî
* 
lightDrivî
;

21 
	`£tup
()

23 
lightDrivî
 = 
	`AcmeWúñessLightDrivî_Cª©e
(1, 42, 
Acme_G
, 16);

26 
	`ã¨down
()

28 
	`AcmeWúñessLightDrivî_De°roy
(
lightDrivî
);

30 
	}
};

32 
	$TEST
(
AcmeWúñessLightDrivî
, 
Cª©e
)

34 
LightDrivî
* 
drivî
 = 
lightDrivî
;

35 
	`STRCMP_EQUAL
("AcmeWúñess", 
drivî
->
ty≥
);

36 
	`LONGS_EQUAL
(1, 
drivî
->
id
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\LightDriverTest.cpp

11 
	~"comm⁄.h
"

12 
	~"LightDrivî.h
"

13 
	~<°dlib.h
>

14 
	~"CµUTe°/Te°H¨√ss_c.h
"

18 
de°royCÆÀd
;

19 
	g⁄CÆÀd
;

20 
	goffCÆÀd
;

21 
	$de°roy
(
LightDrivî
* 
d
Ë{ 
de°royCÆÀd
 = 
TRUE
; 
	`‰ì
(d);
	}
}

22 
	$⁄
(
LightDrivî
* 
d
Ë{ 
⁄CÆÀd
 = 
TRUE
;
	}
}

23 
	$off
(
LightDrivî
* 
d
Ë{ 
offCÆÀd
 = 
TRUE
;
	}
}

27 
	sExam∂eDrivî


29 
LightDrivî
 
	mba£
;

30 
	mexam∂eS≥cificD©a
;

31 } 
	tExam∂eDrivî
;

35 
Exam∂eDrivî
 * 
	gßvedExam∂eDrivî
 = 0;

37 
LightDrivî
 * 
	$Exam∂eDrivî_Cª©e
(
id
, 
exam∂eS≥cificD©a
)

39 
Exam∂eDrivî
 * 
exam∂eDrivî
 = (Exam∂eDrivî*)
	`mÆloc
((ExampleDriver));

40 
ßvedExam∂eDrivî
 = 
exam∂eDrivî
;

41 
exam∂eDrivî
->
exam∂eS≥cificD©a
 =ÉxampleSpecificData;

42  
	`LightDrivî_Cª©e
(&
exam∂eDrivî
->
ba£
, "Exam∂e", 
id
,

43 
de°roy
, 
⁄
, 
off
);

44 
	}
}

48 
	~"CµUTe°/Te°H¨√ss.h
"

51 
	$TEST_GROUP
(
LightDrivî
)

53 
LightDrivî
 * 
drivî
;

54 
id
;

56 
	`£tup
()

58 
id
 = 12;

59 
ßvedExam∂eDrivî
 = 0;

60 
drivî
 = 
	`Exam∂eDrivî_Cª©e
(
id
, 42);

62 
de°royCÆÀd
 = 
FALSE
;

63 
⁄CÆÀd
 = 
FALSE
;

64 
offCÆÀd
 = 
FALSE
;

67 
	`ã¨down
()

69 
	`LightDrivî_De°roy
(
drivî
);

70 
	`CHECK
(
TRUE
 =
de°royCÆÀd
);

72 
	}
};

76 
	$TEST
(
LightDrivî
, 
C⁄èöedLightDrivîMu°BeFú°
)

78 
	`POINTERS_EQUAL
(
ßvedExam∂eDrivî
, 
drivî
);

79 
	}
}

83 
	$TEST
(
LightDrivî
, 
DrivîsHaveTy≥AndId
)

85 
	`STRCMP_EQUAL
("Exam∂e", 
	`LightDrivî_GëTy≥
(
drivî
));

86 
	`LONGS_EQUAL
(
id
, 
	`LightDrivî_GëId
(
drivî
));

87 
	}
}

91 
	$TEST
(
LightDrivî
, 
TrunOnDi•©chesThroughFun˘i⁄Poöãr
)

93 
	`LightDrivî_Tu∫On
(
drivî
);

94 
	`CHECK
(
FALSE
 =
de°royCÆÀd
);

95 
	`CHECK
(
TRUE
 =
⁄CÆÀd
);

96 
	`CHECK
(
FALSE
 =
offCÆÀd
);

97 
	}
}

101 
	$TEST
(
LightDrivî
, 
TrunOffDi•©chesThroughFun˘i⁄Poöãr
)

103 
	`LightDrivî_Tu∫Off
(
drivî
);

104 
	`CHECK
(
FALSE
 =
de°royCÆÀd
);

105 
	`CHECK
(
FALSE
 =
⁄CÆÀd
);

106 
	`CHECK
(
TRUE
 =
offCÆÀd
);

107 
	}
}

111 
	$TEST
(
LightDrivî
, 
NuŒDrivîD€sNoH¨m
)

113 
LightDrivî
* 
nuŒDrivî
 = 
	`LightDrivî_Cª©eNuŒ
(1);

114 
	`STRCMP_EQUAL
("NuŒLightDrivî", 
nuŒDrivî
->
ty≥
);

115 
	`LightDrivî_Tu∫On
(
nuŒDrivî
);

116 
	`LightDrivî_Tu∫Off
(
nuŒDrivî
);

117 
	`LightDrivî_De°roy
(
nuŒDrivî
);

118 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\MemMappedLightDriverTest.cpp

11 
	~"MemM≠≥dLightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
MemM≠≥dLightDrivî
)

19 
LightDrivî
* 
lightDrivî
;

20 
uöt32_t
 
mockLights
;

22 
	`£tup
()

24 
lightDrivî
 = 
	`MemM≠≥dLightDrivî_Cª©e
(4, &
mockLights
);

27 
	`ã¨down
()

29 
	`MemM≠≥dLightDrivî_De°roy
–(
LightDrivî
*)
lightDrivî
);

31 
	}
};

33 
	$TEST
(
MemM≠≥dLightDrivî
, 
Cª©e
)

35 
LightDrivî
* 
drivî
 = (LightDrivî*Ë
lightDrivî
;

36 
	`STRCMP_EQUAL
("Mem‹yM≠≥d", 
drivî
->
ty≥
);

37 
	`LONGS_EQUAL
(4, 
drivî
->
id
);

38 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\X10LightDriverTest.cpp

12 
	~"X10LightDrivî.h
"

15 
	~"CµUTe°/Te°H¨√ss.h
"

17 
	$TEST_GROUP
(
X10LightDrivî
)

19 
LightDrivî
* 
lightDrivî
;

21 
	`£tup
()

23 
lightDrivî
 = 
	`X10LightDrivî_Cª©e
(1, 
X10_A
, 12);

26 
	`ã¨down
()

28 
	`LightDrivî_De°roy
(
lightDrivî
);

30 
	}
};

32 
	$TEST
(
X10LightDrivî
, 
Cª©e
)

34 
	`STRCMP_EQUAL
("X10", 
lightDrivî
->
ty≥
);

35 
	`LONGS_EQUAL
(1, 
lightDrivî
->
id
);

36 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6 
ªsu…
 = 
	`RUN_ALL_TESTS
(
ac
, 
av
);

8  
ªsu…
;

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\FAKE2.h

9 
Re£t_FœshRód_™d_FœshWrôe
();

10 
Ex≥˘_FœshWrôe
(
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
);

11 
Ex≥˘_FœshRód
(
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
);

12 
Check_FœshWrôe_Ex≥˘©i⁄s
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Fakec2414ReadAndWrite.c

9 
	~"c2414.h
"

10 
	~"CµUTe°/Te°H¨√ss_c.h
"

14 
	gÊashQuîySåu˘uª
[0x40] = {0};

16 
	$Re£t_FœshRód_™d_FœshWrôe
() {

17 
	`mem£t
(
ÊashQuîySåu˘uª
, 0, (flashQueryStructure));

18 
	}
}

20 
uCPUBusTy≥
 
	$FœshRód
–
udw‹d
 
addªss
 ) {

21  
ÊashQuîySåu˘uª
[
addªss
];

22 
	}
}

24 
	$FœshWrôe
–
udw‹d
 
addªss
, 
uCPUBusTy≥
 
vÆue
 ) {

25 i‡(
addªss
 =0x55 && 
vÆue
 == 0x98) {

26 
ÊashQuîySåu˘uª
[0x10] = 'Q';

27 
ÊashQuîySåu˘uª
[0x11] = 'R';

28 
ÊashQuîySåu˘uª
[0x12] = 'Y';

30 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Fakec2414ReadAndWrite.h

9 #i‚de‡
D_FakeC2414FœshRódAndWrôe_H


10 
	#D_FakeC2414FœshRódAndWrôe_H


	)

12 
	~"c2414RódAndWrôe.h
"

14 
Re£t_FœshRód_™d_FœshWrôe
();

15 
GëLa°_FœshWrôe_Addªss
();

16 
GëLa°_FœshWrôe_VÆue
();

17 
GëLa°_FœshRód_Addªss
();

18 
Së_FœshRód_VÆue
(
uCPUBusTy≥
 
ucVÆ
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\FlashTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

12 
	~"MockC2414RódAndWrôe.h
"

16 
	$TEST_GROUP
(
Fœsh
)

19 
îa£Block
 = 0x20,

20 
wrôeEø£C⁄fúm
 = 0xD0,

21 
blockNumbî
 = 4,

22 
ÊashD⁄e
 = 1<<7,

23 
ÊashNŸD⁄e
 = 0,

24 
vµEº‹
 = 1<<3,

25 
comm™dSequí˚Eº‹
 = 1<<4 | 1<<5,

26 
îa£Eº‹
 = 1<<5,

27 
wrôeToPrŸe˘edBlock
 = 1,

28 
˛órSètusW‹d
 = 0x50,

31 
	`£tup
()

33 
	`Re£t_FœshRód_™d_FœshWrôe
();

35 
	`ã¨down
()

38 
	}
};

43 
	$TEST
(
Fœsh
, 
CheckCfiComm™d
)

45 
P¨amëîTy≥
 
p
;

46 
Rëu∫Ty≥
 
ªsu…
;

47 
	`Re£t_FœshRód_™d_FœshWrôe
();

49 
ªsu…
 = 
	`Fœsh
(
RódCfi
, &
p
);

51 
	`LONGS_EQUAL
(
Fœsh_Suc˚ss
, 
ªsu…
);

52 
	}
}

58 
	$TEST
(
Fœsh
, 
CheckCfiComm™d
)

60 
	`FœshWrôe
(0x55, 0x98);

61 
	`CHECK
–'Q' =
	`FœshRód
(0x10);

62 
	`CHECK
–'R' =
	`FœshRód
(0x11);

63 
	`CHECK
–'Y' =
	`FœshRód
(0x12);

64 
	}
}

68 
	$TEST
(
Fœsh
, 
CheckCfiComm™d
)

70 
P¨amëîTy≥
 
p
;

71 
Rëu∫Ty≥
 
ªsu…
;

73 
p
.
RódCfi
.
uwCfiFunc
 = 0x24;

75 
	`Ex≥˘_FœshWrôe
(0x0, 0x98);

76 
	`Ex≥˘_FœshRód
(0x10, 'Q');

77 
	`Ex≥˘_FœshRód
(0x11, 'R');

78 
	`Ex≥˘_FœshRód
(0x12, 'Y');

79 
	`Ex≥˘_FœshRód
(
p
.
RódCfi
.
uwCfiFunc
, 0xAA);

80 
	`Ex≥˘_FœshWrôe
(0x0, 0xff);

82 
ªsu…
 = 
	`Fœsh
(
RódCfi
, &
p
);

84 
	`LONGS_EQUAL
(
Fœsh_Suc˚ss
, 
ªsu…
);

85 
	`LONGS_EQUAL
(0xAA, 
p
.
RódCfi
.
ucCfiVÆue
);

86 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

87 
	}
}

91 
	$TEST
(
Fœsh
, 
Eø£BlockH≠pyP©h
)

93 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

94 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 
wrôeEø£C⁄fúm
);

95 
	`Ex≥˘_FœshRód
(0x0, 
ÊashNŸD⁄e
);

96 
	`Ex≥˘_FœshRód
(0x0, 
ÊashNŸD⁄e
);

97 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
);

98 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

100 
Rëu∫Ty≥
 
ªsu…
 = 
	`MyFœshBlockEø£
(
blockNumbî
);

102 
	`LONGS_EQUAL
(
Fœsh_Suc˚ss
, 
ªsu…
);

103 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

104 
	}
}

108 
	$TEST
(
Fœsh
, 
Eø£BlockVµEº‹
)

110 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

111 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 
wrôeEø£C⁄fúm
);

112 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
 | 
vµEº‹
);

113 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

115 
Rëu∫Ty≥
 
ªsu…
 = 
	`MyFœshBlockEø£
(
blockNumbî
);

117 
	`LONGS_EQUAL
(
Fœsh_VµInvÆid
, 
ªsu…
);

118 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

119 
	}
}

123 
	$TEST
(
Fœsh
, 
Eø£BlockComm™dSequí˚Eº‹Dëe˘ed
)

125 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

126 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 
wrôeEø£C⁄fúm
);

127 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
 | 
comm™dSequí˚Eº‹
);

128 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

130 
Rëu∫Ty≥
 
ªsu…
 = 
	`MyFœshBlockEø£
(
blockNumbî
);

132 
	`LONGS_EQUAL
(
Fœsh_BlockEø£Faûed
, 
ªsu…
);

133 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

134 
	}
}

138 
	$TEST
(
Fœsh
, 
Eø£Eº‹
)

140 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

141 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 
wrôeEø£C⁄fúm
);

142 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
 | 
îa£Eº‹
);

143 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

145 
Rëu∫Ty≥
 
ªsu…
 = 
	`MyFœshBlockEø£
(
blockNumbî
);

147 
	`LONGS_EQUAL
(
Fœsh_BlockEø£Faûed
, 
ªsu…
);

148 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

149 
	}
}

153 
	$TEST
(
Fœsh
, 
WrôeToPrŸe˘edBlock
)

155 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

156 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 
wrôeEø£C⁄fúm
);

157 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
 | 
wrôeToPrŸe˘edBlock
);

158 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

160 
Rëu∫Ty≥
 
ªsu…
 = 
	`MyFœshBlockEø£
(
blockNumbî
);

162 
	`LONGS_EQUAL
(
Fœsh_BlockPrŸe˘ed
, 
ªsu…
);

163 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

164 
	}
}

167 
	$TEST
(
Fœsh
, 
Eø£BlockH≠pyP©h2
)

169 
P¨amëîTy≥
 
p
;

170 
Rëu∫Ty≥
 
ªsu…
;

172 
îa£Block
 = 0x20;

173 
blockNumbî
 = 4;

174 
ÊashD⁄e
 = 1<<7;

175 
ÊashBusy
 = 0;

176 
˛órSètusW‹d
 = 0x50;

178 
	`Ex≥˘_FœshWrôe
(0x0, 
˛órSètusW‹d
);

179 
	`Ex≥˘_FœshWrôe
(0x0, 
îa£Block
);

180 
	`Ex≥˘_FœshWrôe
(
BlockOff£t
[
blockNumbî
], 0xD0);

181 
	`Ex≥˘_FœshRód
(0x0, 
ÊashBusy
);

182 
	`Ex≥˘_FœshRód
(0x0, 
ÊashBusy
);

183 
	`Ex≥˘_FœshRód
(0x0, 
ÊashBusy
);

184 
	`Ex≥˘_FœshRód
(0x0, 
ÊashD⁄e
);

185 
	`Ex≥˘_FœshWrôe
(0x0, 0xff);

187 
p
.
BlockEø£
.
ublBlockNr
 = 
blockNumbî
;

188 
ªsu…
 = 
	`Fœsh
(
BlockEø£
, &
p
);

190 
	`LONGS_EQUAL
(
Fœsh_Suc˚ss
, 
ªsu…
);

191 
	`Check_FœshWrôe_Ex≥˘©i⁄s
();

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\IoPortTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"IoP‹t.h
"

14 
uöt16_t
 
ªadVÆue
 = 0;

15 
uöt16_t
 
wrôeVÆue
 = 0;

17 
uöt16_t
 
FakeRód
(
IoP‹t
*)

19  
ªadVÆue
;

22 
FakeWrôe
(
IoP‹t
*, 
uöt16_t
 
vÆue
)

24 
wrôeVÆue
 = 
vÆue
;

28 
	$TEST_GROUP
(
IoP‹t
)

30 
IoP‹t
* 
ioP‹t
;

32 
	`£tup
()

34 
ioP‹t
 = 
	`IoP‹t_Cª©e
(0xb000, "FakePort");

35 
ªadVÆue
 = 0xdead;

36 
wrôeVÆue
 = 0xdead;

37 
ioP‹t
->
Ród
 = 
FakeRód
;

38 
ioP‹t
->
Wrôe
 = 
FakeWrôe
;;

41 
	`ã¨down
()

43 
	`IoP‹t_De°roy
(
ioP‹t
);

45 
	}
};

47 
	$TEST
(
IoP‹t
, 
FakeRód
)

49 
	`LONGS_EQUAL
(0xdód, 
ioP‹t
->
	`Ród
(ioPort));

50 
	}
}

52 
	$TEST
(
IoP‹t
, 
FakeWrôe
)

54 
ioP‹t
->
	`Wrôe
(ioPort, 0xbeef);

55 
	`LONGS_EQUAL
(0xbìf, 
wrôeVÆue
);

56 
	}
}

58 
	$TEST
(
IoP‹t
, 
GëName
)

60 
	`STRCMP_EQUAL
("FakeP‹t", 
	`IoP‹t_GëName
(
ioP‹t
));

61 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\MockC2414ReadAndWrite.h

9 #i‚de‡
D_MockC2414FœshRódAndWrôe_H


10 
	#D_MockC2414FœshRódAndWrôe_H


	)

12 
	~"c2414FœshRódAndWrôe.h
"

14 
Re£t_FœshRód_™d_FœshWrôe
();

15 
Ex≥˘_FœshWrôe
(
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
);

16 
Ex≥˘_FœshRód
(
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
);

17 
Check_FœshWrôe_Ex≥˘©i⁄s
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Mockc2414ReadAndWrite.c

9 
	~<°rög.h
>

10 
	~<°dio.h
>

11 
	~"c2414.h
"

12 
	~"CµUTe°/Te°H¨√ss_c.h
"

14 
	#FLASH_READ
 1

	)

15 
	#FLASH_WRITE
 2

	)

17 
	sRwEx≥˘©i⁄
 {

18 
	mköd
;

19 
udw‹d
 
	maddr
;

20 
uCPUBusTy≥
 
	mvÆue
;

21 } 
	tRwEx≥˘©i⁄
;

23 
RwEx≥˘©i⁄
 
	grwEx≥˘©i⁄s
[20];

24 
	g£tEx≥˘©i⁄Cou¡
;

25 
	ggëEx≥˘©i⁄Cou¡
;

27 
	$Re£t_FœshRód_™d_FœshWrôe
() {

28 
	`mem£t
(
rwEx≥˘©i⁄s
, 0, (rwExpectations));

29 
£tEx≥˘©i⁄Cou¡
 = 0;

30 
gëEx≥˘©i⁄Cou¡
 = 0;

31 
	}
}

33 
	$Ex≥˘_FœshWrôe
(
udw‹d
 
addr
, 
uCPUBusTy≥
 
vÆue
) {

34 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
köd
 = 
FLASH_WRITE
;

35 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
addr
 =áddr;

36 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
vÆue
 = value;

37 
£tEx≥˘©i⁄Cou¡
++;

38 
	}
}

40 
	$Ex≥˘_FœshRód
(
udw‹d
 
addr
, 
uCPUBusTy≥
 
vÆue
) {

41 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
köd
 = 
FLASH_READ
;

42 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
addr
 =áddr;

43 
rwEx≥˘©i⁄s
[
£tEx≥˘©i⁄Cou¡
].
vÆue
 = value;

44 
£tEx≥˘©i⁄Cou¡
++;

45 
	}
}

47 
	$checkEx≥˘©i⁄Cou¡
() {

48 i‡(
gëEx≥˘©i⁄Cou¡
 >
£tEx≥˘©i⁄Cou¡
) {

49 
	`FAIL_TEXT_C
("NotÉnoughÉxpectations set");

51 
	}
}

53 
uCPUBusTy≥
 
	$FœshRód
–
udw‹d
 
addr
 ) {

54 
uCPUBusTy≥
 
ªsu…
 = 0xff;

55 
buf„r
[100];

56 
udw‹d
 
ex≥˘edAddr
 = 
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
addr
;

58 
	`checkEx≥˘©i⁄Cou¡
();

59 i‡(
FLASH_READ
 !
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
köd
) {

60 
	`FAIL_TEXT_C
("Unexpected READ");

63 i‡(
ex≥˘edAddr
 !
addr
 ) {

64 
	`•rötf
(
buf„r
, "Expectation #%d: ExpectedÑead 0x%x\n"

66 
gëEx≥˘©i⁄Cou¡
+1, 
ex≥˘edAddr
, 
addr
);

67 
	`FAIL_TEXT_C
(
buf„r
);

69 
ªsu…
 = 
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
vÆue
;

70 
gëEx≥˘©i⁄Cou¡
++;

73  
ªsu…
;

74 
	}
}

76 
	$FœshWrôe
–
udw‹d
 
addr
, 
uCPUBusTy≥
 
vÆue
 ) {

78 
buf„r
[100];

79 
udw‹d
 
ex≥˘edAddr
 = 
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
addr
;

80 
uCPUBusTy≥
 
ex≥˘edVÆue
 = 
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
vÆue
;

82 
	`checkEx≥˘©i⁄Cou¡
();

83 i‡(
FLASH_WRITE
 !
rwEx≥˘©i⁄s
[
gëEx≥˘©i⁄Cou¡
].
köd
) {

84 
	`•rötf
(
buf„r
, "Expectation #%d: Unexpected writeÅo 0x%x=0x%x",

85 
gëEx≥˘©i⁄Cou¡
+1, 
addr
, 
vÆue
);

86 
	`FAIL_TEXT_C
(
buf„r
);

89 i‡(
ex≥˘edAddr
 !
addr
 || 
ex≥˘edVÆue
 !
vÆue
) {

90 
	`•rötf
(
buf„r
, "Expectation #%d: Expected write 0x%x=0x%x\n"

92 
gëEx≥˘©i⁄Cou¡
+1, 
ex≥˘edAddr
, 
ex≥˘edVÆue
, 
addr
, 
vÆue
);

93 
	`FAIL_TEXT_C
(
buf„r
);

95 
gëEx≥˘©i⁄Cou¡
++;

97 
	}
}

99 
	$Check_FœshWrôe_Ex≥˘©i⁄s
() {

100 
buf„r
[100];

101 i‡(
gëEx≥˘©i⁄Cou¡
 =
£tEx≥˘©i⁄Cou¡
)

104 
	`•rötf
(
buf„r
, "Expected %dÑeads/writes but got %d",

105 
£tEx≥˘©i⁄Cou¡
, 
gëEx≥˘©i⁄Cou¡
);

106 
	`FAIL_TEXT_C
(
buf„r
);

108 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\StubC2414ReadAndWrite.c

9 
	~"c2414FœshRódAndWrôe.h
"

13 
uCPUBusTy≥
 
	$FœshRód
–
udw‹d
 
udAddrOff
 )

16 
	}
}

17 
	$FœshWrôe
–
udw‹d
 
udAddrOff
, 
uCPUBusTy≥
 
ucVÆ
 )

20 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightController.c

9 
	~"FakeLightC⁄åﬁÀr.h
"

10 
	~"mem‹y.h
"

14 
	gœ°Id
;

15 
	gœ°Levñ
;

16 
	gcou¡
;

17 
	glights
[
MAX_LIGHTS
];

19 
	$LightC⁄åﬁÀr_Cª©e
()

21 
œ°Id
 = 
NO_ID
;

22 
œ°Levñ
 = 
UNKNOWN_STATE
;

23 
cou¡
 = 0;

24 
	`mem£t
(
lights
, 
UNKNOWN_STATE
, (lights));

25 
	}
}

27 
	$LightC⁄åﬁÀr_De°roy
()

29 
	}
}

31 
	$FakeLightC⁄åﬁÀr_gëLa°Id
()

33  
œ°Id
;

34 
	}
}

36 
	$FakeLightC⁄åﬁÀr_gëLa°Sèã
()

38  
œ°Levñ
;

39 
	}
}

41 
	$isIdInR™ge
(
id
)

43  
id
 > 0 && id <=32;

44 
	}
}

45 
	$LightC⁄åﬁÀr_On
(
id
)

47 
œ°Id
 = 
id
;

48 
œ°Levñ
 = 1;

49 
cou¡
++;

50 i‡(
	`isIdInR™ge
(
id
))

51 
lights
[
id
-1] = 
LIGHT_ON
;

52 
	}
}

54 
	$LightC⁄åﬁÀr_Off
(
id
)

56 
œ°Id
 = 
id
;

57 
œ°Levñ
 = 0;

58 
cou¡
++;

59 i‡(
	`isIdInR™ge
(
id
))

60 
lights
[
id
-1] = 
LIGHT_OFF
;

61 
	}
}

63 
	$FakeLightC⁄åﬁÀr_gëEvítCou¡s
()

65  
cou¡
;

66 
	}
}

68 
LightSèã
 
	$FakeLightC⁄åﬁÀr_gëLightSèã
(
id
)

70 i‡(!
	`isIdInR™ge
(
id
))

71  
UNKNOWN_STATE
;

72  
lights
[
id
-1];

73 
	}
}

77 
	~"LightC⁄åﬁÀr.h
"

81 
	gœ°Id
;

82 
	gœ°Levñ
;

84 
	$LightC⁄åﬁÀr_Cª©e
()

86 
œ°Id
 = -1;

87 
œ°Levñ
 = -1;

88 
	}
}

90 
	$LightC⁄åﬁÀr_De°roy
()

92 
	}
}

94 
	$LightC⁄åﬁÀr_On
(
id
)

96 
œ°Id
 = 
id
;

97 
œ°Levñ
 = 1;

98 
	}
}

100 
	$LightC⁄åﬁÀr_Off
(
id
)

102 
œ°Id
 = 
id
;

103 
œ°Levñ
 = 0;

104 
	}
}

106 
	$FakeLightC⁄åﬁÀr_gëLa°Id
()

108  
œ°Id
;

109 
	}
}

111 
	$FakeLightC⁄åﬁÀr_gëLa°Sèã
()

113  
œ°Levñ
;

114 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightController.h

9 #i‚de‡
D_FakeLightC⁄åﬁÀr_H


10 
	#D_FakeLightC⁄åﬁÀr_H


	)

12 
	~"LightC⁄åﬁÀr.h
"

17 
	mNO_ID
 = -1, 
	mUNKNOWN_STATE
 = -1,

18 
	mLIGHT_OFF
 = 0, 
	mLIGHT_ON
 = 1

19 } 
	tLightSèã
;

21 
LightSèã
 
FakeLightC⁄åﬁÀr_gëLightSèã
(
id
);

22 
FakeLightC⁄åﬁÀr_gëLa°Id
();

23 
FakeLightC⁄åﬁÀr_gëLa°Sèã
();

30 #i‚de‡
D_FakeLightC⁄åﬁÀr_H


31 
	#D_FakeLightC⁄åﬁÀr_H


	)

33 
	~"LightC⁄åﬁÀr.h
"

35 
FakeLightC⁄åﬁÀr_gëLa°Id
();

36 
FakeLightC⁄åﬁÀr_gëLa°Sèã
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightControllerTest.cpp

10 
	~"CµUTe°/Te°H¨√ss.h
"

14 
	~"FakeLightC⁄åﬁÀr.h
"

17 
	$TEST_GROUP
(
LightC⁄åﬁÀr
)

19 
	`£tup
()

21 
	`LightC⁄åﬁÀr_Cª©e
();

24 
	`ã¨down
()

26 
	`LightC⁄åﬁÀr_De°roy
();

28 
	}
};

30 
	$TEST
(
LightC⁄åﬁÀr
, 
Cª©e
)

32 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

33 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

34 
	}
}

36 
	$TEST
(
LightC⁄åﬁÀr
, 
RemembîTheLa°LightIdC⁄åﬁÀd
)

38 
	`LightC⁄åﬁÀr_On
(10);

39 
	`LONGS_EQUAL
(10, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

40 
	`LONGS_EQUAL
(1, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

41 
	}
}

45 
	$TEST
(
LightC⁄åﬁÀr
, 
RemembîAŒLightSèãs
)

47 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

49 
	`LightC⁄åﬁÀr_On
(4);

50 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

52 
	`LightC⁄åﬁÀr_Off
(4);

53 
	`LONGS_EQUAL
(
LIGHT_OFF
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(4));

54 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeService.c

9 
	~"FakeTimeSîvi˚.h
"

10 
	~"CµUTe°/Te°H¨√ss_c.h
"

13 
Time
 
	gÁkeTime
;

14 
WakeupCÆlback
 
	gˇŒback
;

15 
	g≥riod
;

17 
	$TimeSîvi˚_Cª©e
()

19 
ÁkeTime
.
möuãOfDay
 = -1;

20 
ÁkeTime
.
dayOfWìk
 = -1;

21 
ˇŒback
 = 0;

22 
≥riod
 = -1;

23 
	}
}

25 
	$TimeSîvi˚_De°roy
()

27 
	}
}

30 
	$FakeTimeSîvi˚_MöuãIsUp
()

32 
	`CHECK_C
(
ˇŒback
 != 0);

33 
	`ˇŒback
(&
ÁkeTime
);

34 
	}
}

36 
	$TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(
£c⁄ds
, 
WakeupCÆlback
 
cb
)

38 
ˇŒback
 = 
cb
;

39 
≥riod
 = 
£c⁄ds
;

40 
	}
}

42 
	$TimeSîvi˚_C™˚lPîiodicAœrmInSec⁄ds
(

43 
£c⁄ds
, 
WakeupCÆlback
 
cb
)

45 
ˇŒback
 = 0;

46 
≥riod
 = 0;

47 
	}
}

50 
	$TimeSîvi˚_GëTime
(
Time
 * 
time
)

52 
time
->
möuãOfDay
 = 
ÁkeTime
.minuteOfDay;

53 
time
->
dayOfWìk
 = 
ÁkeTime
.dayOfWeek;

54 
	}
}

56 
	$FakeTimeSîvi˚_SëMöuã
(
möuã
)

58 
ÁkeTime
.
möuãOfDay
 = 
möuã
;

59 
	}
}

61 
	$FakeTimeSîvi˚_SëDay
(
day
)

63 
ÁkeTime
.
dayOfWìk
 = 
day
;

64 
	}
}

66 
WakeupCÆlback
 
	$FakeTimeSour˚_GëAœrmCÆlback
()

68  
ˇŒback
;

69 
	}
}

71 
	$FakeTimeSour˚_GëAœrmPîiod
()

73  
≥riod
;

74 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeService.h

9 #i‚de‡
D_FakeTimeSîvi˚_H


10 
	#D_FakeTimeSîvi˚_H


	)

12 
	~"TimeSîvi˚.h
"

14 íum {
	mTIME_UNKNOWN
 = -1};

16 
FakeTimeSîvi˚_SëMöuã
();

17 
FakeTimeSîvi˚_SëDay
();

18 
WakeupCÆlback
 
FakeTimeSour˚_GëAœrmCÆlback
();

19 
FakeTimeSour˚_GëAœrmPîiod
();

20 
FakeTimeSîvi˚_MöuãIsUp
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeServiceTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"FakeTimeSîvi˚.h
"

14 
	~"LightScheduÀr.h
"

15 
	~"mem‹y.h
"

18 
ˇŒBackCÆÀd
;

20 
	$TEST_GROUP
(
FakeTimeSîvi˚
)

22 
	`£tup
()

24 
ˇŒBackCÆÀd
 = 0;

25 
	`TimeSîvi˚_Cª©e
();

28 
	`ã¨down
()

30 
	`TimeSîvi˚_De°roy
();

32 
	}
};

35 
	$Te°CÆlback
()

37 
ˇŒBackCÆÀd
 = 1;

38 
	}
}

40 
	$TEST
(
FakeTimeSîvi˚
, 
SimuœãATic
)

42 
	`TimeSîvi˚_SëPîiodicAœrmInSec⁄ds
(60, 
Te°CÆlback
);

44 
	`FakeTimeSîvi˚_SëMöuã
(42);

45 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

46 
	`FakeTimeSîvi˚_MöuãIsUp
();

48 
	`LONGS_EQUAL
(1, 
ˇŒBackCÆÀd
);

49 
	}
}

54 
	$TEST
(
FakeTimeSîvi˚
, 
Cª©e
)

56 
Time
 
time
;

57 
	`TimeSîvi˚_GëTime
(&
time
);

59 
	`LONGS_EQUAL
(
TIME_UNKNOWN
, 
time
.
möuãOfDay
);

60 
	`LONGS_EQUAL
(
TIME_UNKNOWN
, 
time
.
dayOfWìk
);

61 
	}
}

63 
	$TEST
(
FakeTimeSîvi˚
, 
Së
)

65 
Time
 
time
;

66 
	`FakeTimeSîvi˚_SëMöuã
(42);

67 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

69 
	`TimeSîvi˚_GëTime
(&
time
);

71 
	`LONGS_EQUAL
(42, 
time
.
möuãOfDay
);

72 
	`LONGS_EQUAL
(
SATURDAY
, 
time
.
dayOfWìk
);

73 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\LightSchedulerTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"LightScheduÀr.h
"

14 
	~"FakeLightC⁄åﬁÀr.h
"

15 
	~"FakeTimeSîvi˚.h
"

16 
	~"R™domMöuã.h
"

20 
	$TEST_GROUP
(
LightScheduÀr
)

22 
id
;

23 
Day
 
ÁkeDay
;

24 
Day
 
scheduÀdDay
;

25 
ÁkeMöuã
;

26 
scheduÀdMöuã
;

27 
ex≥˘edId
;

28 
ex≥˘edSèã
;

30 
	`£tup
()

32 
	`LightC⁄åﬁÀr_Cª©e
();

33 
	`LightScheduÀr_Cª©e
();

35 
id
 = 4;

36 
ÁkeDay
 = 
MONDAY
;

37 
scheduÀdDay
 = 
NONE
;

38 
ÁkeMöuã
 = 1234;

39 
scheduÀdMöuã
 = 1234;

40 
	`ex≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

44 
	`ã¨down
()

46 
	`LightScheduÀr_De°roy
();

47 
	`POINTERS_EQUAL
(
NULL
, (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

51 
	`ex≥˘
(
id
, 
Àvñ
)

53 
ex≥˘edId
 = 
id
;

54 
ex≥˘edSèã
 = 
Àvñ
;

58 
	`whíItBecomes
(
day
, 
möuã
)

60 
	`FakeTimeSîvi˚_SëDay
(
day
);

61 
	`FakeTimeSîvi˚_SëMöuã
(
möuã
);

62 
	`LightScheduÀr_Wakeup
();

64 
	`thíEx≥˘
(
id
, 
Àvñ
)

66 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

67 
	`LONGS_EQUAL
(
Àvñ
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

70 
	`whíItBecomes
(
day
, 
möuã
)

72 
	`FakeTimeSîvi˚_SëDay
(
day
);

73 
	`FakeTimeSîvi˚_SëMöuã
(
möuã
);

74 
	`LightScheduÀr_Wakeup
();

77 
	`thíEx≥˘
(
id
, 
Àvñ
)

79 i‡(
id
 =
NO_ID
)

81 
	`LONGS_EQUAL
(
id
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

82 
	`LONGS_EQUAL
(
Àvñ
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

85 
	`LONGS_EQUAL
(
Àvñ
, 
	`FakeLightC⁄åﬁÀr_gëLightSèã
(
id
));

89 
	}
};

91 
	$TEST
(
LightScheduÀr
, 
Cª©eD€sNŸCh™geTheLights
)

93 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

94 
	`LONGS_EQUAL
(
NONE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

95 
	}
}

98 
	$TEST
(
LightScheduÀr
, 
Cª©eSèπsO√MöuãAœrm
)

100 
	`POINTERS_EQUAL
((*)
LightScheduÀr_Wakeup
,

101 (*)
	`FakeTimeSour˚_GëAœrmCÆlback
());

102 
	`LONGS_EQUAL
(60, 
	`FakeTimeSour˚_GëAœrmPîiod
());

103 
	}
}

114 
	$TEST
(
LightScheduÀr
, 
NoCh™geToLightsDurögInôüliz©i⁄
)

116 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

117 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

118 
	}
}

122 
	$TEST
(
LightScheduÀr
, 
NoScheduÀNŸhögH≠≥ns
)

124 
	`LightScheduÀr_Wakeup
();

125 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

126 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

127 
	}
}

130 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTodayNŸTimeYë
)

132 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
EVERYDAY
, 1200);

133 
	`FakeTimeSîvi˚_SëMöuã
(1199);

134 
	`LightScheduÀr_Wakeup
();

135 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

136 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

137 
	}
}

140 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀNŸO≥øãdOnSunday
)

142 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

143 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

144 
	`FakeTimeSîvi˚_SëMöuã
(1200);

145 
	`LightScheduÀr_Wakeup
();

146 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

147 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

148 
	}
}

151 
	$TEST
(
LightScheduÀr
, 
WìkdayScheduÀIsO≥øãdOnM⁄day
)

153 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKDAY
, 1200);

154 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

155 
	`FakeTimeSîvi˚_SëMöuã
(1200);

156 
	`LightScheduÀr_Wakeup
();

157 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

158 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

159 
	}
}

164 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsFriday
)

166 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

167 
	`FakeTimeSîvi˚_SëDay
(
FRIDAY
);

168 
	`FakeTimeSîvi˚_SëMöuã
(1200);

169 
	`LightScheduÀr_Wakeup
();

170 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

171 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

172 
	}
}

174 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsS©urday
)

176 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 100);

177 
	`FakeTimeSîvi˚_SëDay
(
SATURDAY
);

178 
	`FakeTimeSîvi˚_SëMöuã
(100);

179 
	`LightScheduÀr_Wakeup
();

180 
	`LONGS_EQUAL
(3, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

181 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

182 
	}
}

184 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsSunday
)

186 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
WEEKEND
, 1200);

187 
	`FakeTimeSîvi˚_SëDay
(
SUNDAY
);

188 
	`FakeTimeSîvi˚_SëMöuã
(1200);

189 
	`LightScheduÀr_Wakeup
();

190 
	`LONGS_EQUAL
(6, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

191 
	`LONGS_EQUAL
(
LIGHT_ON
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

192 
	}
}

194 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsM⁄day
)

196 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

197 
	`FakeTimeSîvi˚_SëDay
(
MONDAY
);

198 
	`FakeTimeSîvi˚_SëMöuã
(1200);

199 
	`LightScheduÀr_Wakeup
();

200 
	`LONGS_EQUAL
(
NO_ID
, 
	`FakeLightC⁄åﬁÀr_gëLa°Id
());

201 
	`LONGS_EQUAL
(
UNKNOWN_STATE
, 
	`FakeLightC⁄åﬁÀr_gëLa°Sèã
());

202 
	}
}

206 
	$TEST
(
LightScheduÀr
, 
ScheduÀWìkEndItsM⁄day
)

208 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
WEEKEND
, 1200);

209 
	`whíItBecomes
(
MONDAY
, 1200);

210 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

211 
	}
}

215 
	$TEST
(
LightScheduÀr
, 
ScheduÀTwoEvítsAtTheSameTIme
)

217 
	`LightScheduÀr_ScheduÀTu∫On
(3, 
SUNDAY
, 1200);

218 
	`LightScheduÀr_ScheduÀTu∫On
(12, 
SUNDAY
, 1200);

220 
	`whíItBecomes
(
SUNDAY
, 1200);

222 
	`thíEx≥˘
(3, 
LIGHT_ON
);

223 
	`thíEx≥˘
(12, 
LIGHT_ON
);

224 
	}
}

227 
	$TEST
(
LightScheduÀr
, 
ScheduÀEvîydayNŸTimeYë
)

229 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 100);

230 
	`whíItBecomes
(
SUNDAY
, 1200);

231 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

232 
	}
}

234 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnEvîydayItsTime
)

236 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
EVERYDAY
, 
scheduÀdMöuã
);

237 
	`whíItBecomes
(
SUNDAY
, 
scheduÀdMöuã
);

238 
	`thíEx≥˘
(
id
, 
LIGHT_ON
);

239 
	}
}

241 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsNŸTuesdayButItsTime
)

243 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

244 
	`whíItBecomes
(
MONDAY
, 100);

245 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

246 
	}
}

248 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnTuesdayAndItsTuesdayAndItsTime
)

250 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
TUESDAY
, 100);

251 
	`whíItBecomes
(
TUESDAY
, 100);

252 
	`thíEx≥˘
(
id
, 
LIGHT_ON
);

253 
	}
}

255 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffTuesdayAndItsTuesdayAndItsTime
)

257 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
TUESDAY
, 200);

258 
	`whíItBecomes
(
TUESDAY
, 200);

259 
	`thíEx≥˘
(
id
, 
LIGHT_OFF
);

260 
	}
}

262 
	$TEST
(
LightScheduÀr
, 
ScheduÀOffWìkídAndItsS©urdayAndItsTime
)

264 
	`LightScheduÀr_ScheduÀTu∫Off
(
id
, 
WEEKEND
, 200);

265 
	`whíItBecomes
(
SATURDAY
, 200);

266 
	`thíEx≥˘
(
id
, 
LIGHT_OFF
);

267 
	}
}

269 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsSundayAndItsTime
)

271 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

273 
	`whíItBecomes
(
SUNDAY
, 100);

274 
	`thíEx≥˘
(
id
, 
LIGHT_ON
);

275 
	}
}

277 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkídAndItsM⁄dayAndItsTime
)

279 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKEND
, 100);

280 
	`whíItBecomes
(
MONDAY
, 100);

281 
	`thíEx≥˘
(
id
, 
UNKNOWN_STATE
);

282 
	}
}

284 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsSundayAndItsTime
)

286 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 100);

287 
	`whíItBecomes
(
SUNDAY
, 100);

288 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

289 
	}
}

291 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsM⁄dayAndItsTime
)

293 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 200);

294 
	`whíItBecomes
(
MONDAY
, 200);

295 
	`thíEx≥˘
(
id
, 
LIGHT_ON
);

296 
	}
}

298 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsFridayAndItsTime
)

300 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

301 
	`whíItBecomes
(
FRIDAY
, 1000);

302 
	`thíEx≥˘
(
id
, 
LIGHT_ON
);

303 
	}
}

305 
	$TEST
(
LightScheduÀr
, 
ScheduÀOnWìkdayAndItsS©urdayAndItsTime
)

307 
	`LightScheduÀr_ScheduÀTu∫On
(
id
, 
WEEKDAY
, 1000);

308 
	`whíItBecomes
(
SATURDAY
, 1000);

309 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

310 
	}
}

312 
	$TEST
(
LightScheduÀr
, 
RemoveScheduÀdEvít
)

314 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

315 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

316 
	`whíItBecomes
(
MONDAY
, 599);

317 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

318 
	}
}

321 
	$TEST
(
LightScheduÀr
, 
RemoveMu…ùÀScheduÀdEvít
)

323 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600);

324 
	`LightScheduÀr_ScheduÀTu∫On
(7, 
MONDAY
, 600);

326 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

327 
	`LightScheduÀr_ScheduÀRemove
(7, 
MONDAY
, 600);

329 
	`whíItBecomes
(
MONDAY
, 600);

330 
	`thíEx≥˘
(
NO_ID
, 
UNKNOWN_STATE
);

331 
	}
}

335 
	$TEST
(
LightScheduÀr
, 
Reje˘sTooM™yEvíts
)

337 
i
;

338 
i
 = 0; i < 128; i++)

339 
	`LONGS_EQUAL
(
LS_OK
,

340 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

342 
	`LONGS_EQUAL
(
LS_TOO_MANY_EVENTS
,

343 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

344 
	}
}

348 
	$TEST
(
LightScheduÀr
, 
Ac˚±sVÆidLightIds
)

350 
	`LONGS_EQUAL
(
LS_OK
,

351 
	`LightScheduÀr_ScheduÀTu∫On
(0, 
MONDAY
, 600));

352 
	`LONGS_EQUAL
(
LS_OK
,

353 
	`LightScheduÀr_ScheduÀTu∫On
(15, 
MONDAY
, 600));

354 
	`LONGS_EQUAL
(
LS_OK
,

355 
	`LightScheduÀr_ScheduÀTu∫On
(31, 
MONDAY
, 600));

356 
	}
}

358 
	$TEST
(
LightScheduÀr
, 
Reje˘sInvÆidLightIds
)

360 
	`LONGS_EQUAL
(
LS_ID_OUT_OF_BOUNDS
,

361 
	`LightScheduÀr_ScheduÀTu∫On
(-1, 
MONDAY
, 600));

362 
	`LONGS_EQUAL
(
LS_ID_OUT_OF_BOUNDS
,

363 
	`LightScheduÀr_ScheduÀTu∫On
(32, 
MONDAY
, 600));

364 
	}
}

368 
	$TEST
(
LightScheduÀr
, 
RemoveRecy˛esEvítSlŸ
)

370 
i
;

371 
i
 = 0; i < 128; i++)

372 
	`LONGS_EQUAL
(
LS_OK
,

373 
	`LightScheduÀr_ScheduÀTu∫On
(6, 
MONDAY
, 600+
i
));

375 
	`LightScheduÀr_ScheduÀRemove
(6, 
MONDAY
, 600);

377 
	`LONGS_EQUAL
(
LS_OK
,

378 
	`LightScheduÀr_ScheduÀTu∫On
(13, 
MONDAY
, 1000));

379 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

10 
	~"°rög.h
"

14 
	~"R™domMöuã.h
"

15 
	~<°dio.h
>

18 íum { 
BOUND
=30 };

20 
	$TEST_GROUP
(
R™domMöuã
)

23 
	`£tup
()

25 
	`R™domMöuã_Cª©e
(
BOUND
);

28 
	`ã¨down
()

31 
	}
}

34 
	$TEST
(
R™domMöuã
, 
GëIsInR™ge
)

36 
möuã
;

38 
i
 = 0; i < 100; i++)

40 
möuã
 = 
	`R™domMöuã_Gë
();

41 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

43 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

44 
	`FAIL
("Minute out ofÑange");

47 
	}
}

49 
	$TEST
(
R™domMöuã
, 
AŒVÆuesPossibÀ
)

51 
möuã
;

52 
hô
[2*
BOUND
 + 1];

53 
	`mem£t
(
hô
, 0, (hit));

55 
i
 = 0; i < 500; i++)

57 
möuã
 = 
	`R™domMöuã_Gë
();

58 i‡(
möuã
 < -
BOUND
 || minute > BOUND)

60 
	`¥ötf
("bad möuã vÆue: %d\n", 
möuã
);

61 
	`FAIL
("Minute out ofÑange");

63 
hô
[
möuã
 + 
BOUND
]++;

66 
i
 = 0; i < 
BOUND
 + 1; i++) {

67 
	`CHECK
(
hô
[
i
] > 0);

69 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\IO\FlashTest.cpp

11 
	~"Fœsh.h
"

12 
	~"MockIO.h
"

13 
	~"m28w160e˘.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
Fœsh
)

21 
ioAddªss_t
 
addªss
;

22 
ioD©a_t
 
d©a
;

23 
ªsu…
;

25 
	`£tup
()

27 
addªss
 = 0x1000;

28 
d©a
 = 0xBEEF;

29 
ªsu…
 = -1;

31 
	`MockIO_Cª©e
(10);

32 
	`Fœsh_Cª©e
();

35 
	`ã¨down
()

37 
	`Fœsh_De°roy
();

38 
	`MockIO_Vîify_Com∂ëe
();

39 
	`MockIO_De°roy
();

41 
	}
};

46 
	$TEST
(
Fœsh
, 
ProgømSuc˚edsRódyImmedüãly
)

48 
ªsu…
 = 0;

49 
	`MockIO_Ex≥˘_Wrôe
(0, 0x40);

50 
	`MockIO_Ex≥˘_Wrôe
(0x1000, 0xBEEF);

51 
	`MockIO_Ex≥˘_Ród
(0, 1<<7);

52 
	`MockIO_Ex≥˘_Ród
(0x1000, 0xBEEF);

54 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

56 
	`LONGS_EQUAL
(0, 
ªsu…
);

57 
	`MockIO_Vîify_Com∂ëe
();

58 
	}
}

64 
	$TEST
(
Fœsh
, 
ProgømSuc˚edsRódyImmedüãly
)

66 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

67 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

68 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

69 
	`MockIO_Ex≥˘_Ród
(
addªss
, 
d©a
);

71 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

73 
	`LONGS_EQUAL
(
FœshSuc˚ss
, 
ªsu…
);

74 
	}
}

78 
	$TEST
(
Fœsh
, 
ProgømSuc˚edsNŸImmedüãlyRódy
)

80 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

81 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

82 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

83 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

84 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

85 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

86 
	`MockIO_Ex≥˘_Ród
(
addªss
, 
d©a
);

88 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

90 
	`LONGS_EQUAL
(
FœshSuc˚ss
, 
ªsu…
);

91 
	}
}

95 
	$TEST
(
Fœsh
, 
ProgømFaûs_VµEº‹
)

97 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

98 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

99 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
 | 
VµEº‹Bô
);

100 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
Re£t
);

102 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

104 
	`LONGS_EQUAL
(
FœshVµEº‹
, 
ªsu…
);

105 
	}
}

109 
	$TEST
(
Fœsh
, 
ProgømFaûs_ProgømEº‹
)

111 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

112 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

113 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
 | 
ProgømEº‹Bô
);

114 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
Re£t
);

116 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

118 
	`LONGS_EQUAL
(
FœshProgømEº‹
, 
ªsu…
);

119 
	}
}

123 
	$TEST
(
Fœsh
, 
ProgømFaûs_PrŸe˘edBlockEº‹
)

125 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

126 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

127 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
 | 
BlockPrŸe˘i⁄Eº‹Bô
);

128 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
Re£t
);

130 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

132 
	`LONGS_EQUAL
(
FœshProgømPrŸe˘edBlockEº‹
, 
ªsu…
);

133 
	}
}

137 
	$TEST
(
Fœsh
, 
ProgømFaûs_FœshUnknownProgømEº‹
)

139 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

140 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

141 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
 | 
Eø£Su•ídBô
 | 
Eø£Eº‹Bô
 | 
ProgømSu•ídBô
 | 
Re£rvedBô
);

142 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
Re£t
);

144 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

146 
	`LONGS_EQUAL
(
FœshUnknownProgømEº‹
, 
ªsu…
);

147 
	}
}

151 
	$TEST
(
Fœsh
, 
ProgømFaûs_FœshRódBackEº‹
)

153 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

154 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

155 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

156 
	`MockIO_Ex≥˘_Ród
(
addªss
, 
d©a
-1);

158 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

160 
	`LONGS_EQUAL
(
FœshRódBackEº‹
, 
ªsu…
);

161 
	}
}

165 
	$TEST
(
Fœsh
, 
ProgømSuc˚eds_Ign‹esOthîBôsU¡ûRódy
)

167 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

168 
	`MockIO_Ex≥˘_Wrôe
(
addªss
, 
d©a
);

169 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, ~
RódyBô
);

170 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

171 
	`MockIO_Ex≥˘_Ród
(
addªss
, 
d©a
);

173 
ªsu…
 = 
	`Fœsh_Progøm
(
addªss
, 
d©a
);

175 
	`LONGS_EQUAL
(
FœshSuc˚ss
, 
ªsu…
);

176 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\IO\LegacyFlashTest.cpp

11 
	~"Fœsh.h
"

12 
	~"MockIO.h
"

13 
	~"m28w160e˘.h
"

16 
	~"CµUTe°/Te°H¨√ss.h
"

19 
	$TEST_GROUP
(
LegacyFœsh
)

21 
ªsu…
;

23 
	`£tup
()

25 
	`MockIO_Cª©e
(10);

26 
	`Fœsh_Cª©e
();

27 
ªsu…
 = 0;

30 
	`ã¨down
()

32 
	`Fœsh_De°roy
();

33 
	`MockIO_Vîify_Com∂ëe
();

34 
	`MockIO_De°roy
();

36 
	}
};

39 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

41 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

42 
	`MockIO_Ex≥˘_Wrôe
(0x1000, 0xBEEF);

43 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

44 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

45 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

46 
	`MockIO_Ex≥˘_Ród
(0x1000, 0xBEEF);

48 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

50 
	`LONGS_EQUAL
(0, 
ªsu…
);

51 
	}
}

55 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

57 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

58 
	`MockIO_Ex≥˘_Wrôe
(0x1000, 0xBEEF);

59 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

60 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 0);

61 
	`MockIO_Ex≥˘_Ród
(
SètusRegi°î
, 
RódyBô
);

63 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

65 
	`LONGS_EQUAL
(0, 
ªsu…
);

66 
	}
}

70 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

72 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

73 
	`MockIO_Ex≥˘_Wrôe
(0x1000, 0xBEEF);

74 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

76 
	`LONGS_EQUAL
(0, 
ªsu…
);

77 
	}
}

81 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

83 
	`MockIO_Ex≥˘_Wrôe
(
Comm™dRegi°î
, 
ProgømComm™d
);

84 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

86 
	`LONGS_EQUAL
(0, 
ªsu…
);

87 
	}
}

91 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

93 
ªsu…
 = 
	`Fœsh_Progøm
(0x1000, 0xBEEF);

95 
	`LONGS_EQUAL
(0, 
ªsu…
);

96 
	}
}

100 
	$TEST
(
LegacyFœsh
, 
FœshProgømSuc˚ss
)

102 
	`FAIL
("Getting started");

103 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\LedDriver\LedDriverTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"LedDrivî.h
"

14 
	~"Ru¡imeEº‹Stub.h
"

18 
	~"CµUTe°/Te°H¨√ss.h
"

22 
	~"LedDrivî.h
"

25 
	$TEST_GROUP
(
LedDrivî
)

27 
	`£tup
()

29 
	`LedDrivî_Cª©e
();

32 
	`ã¨down
()

34 
	`LedDrivî_De°roy
();

36 
	}
};

38 
	$TEST
(
LedDrivî
, 
Cª©e
)

40 
	`FAIL
("Start here");

41 
	}
}

45 
	$TEST_GROUP
(
LedDrivî
)

47 
	`£tup
()

49 
	`LedDrivî_Cª©e
();

52 
	`ã¨down
()

54 
	`LedDrivî_De°roy
();

56 
	}
};

58 
	$TEST
(
LedDrivî
, 
Cª©e
)

60 
	}
}

66 
	$TEST_GROUP
(
LedDrivî
)

68 
uöt16_t
 
vútuÆLeds
;

70 
	`£tup
()

73 
vútuÆLeds
 = 0xffff;

74 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

76 
	`ã¨down
()

78 
	`LedDrivî_De°roy
();

80 
	}
};

87 
	$TEST_GROUP
(
LedDrivî
)

89 
uöt16_t
 
vútuÆLeds
;

91 
	`£tup
()

93 
vútuÆLeds
 = 0xffff;

94 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

96 
	`ã¨down
()

98 
	`LedDrivî_De°roy
();

100 
	}
};

105 
	$TEST
(
LedDrivî
, 
LedsAªOffA·îInôüliz©i⁄
)

107 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

108 
	}
}

112 
	$TEST
(
LedDrivî
, 
Tu∫OnLedO√
)

114 
	`LedDrivî_Tu∫On
(1);

115 
	`LONGS_EQUAL
(1, 
vútuÆLeds
);

116 
	}
}

120 
	$TEST
(
LedDrivî
, 
Tu∫OffLedO√
)

122 
	`LedDrivî_Tu∫On
(1);

123 
	`LedDrivî_Tu∫Off
(1);

124 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

125 
	}
}

130 
	$TEST
(
LedDrivî
, 
Tu∫OnMu…ùÀLeds
)

132 
	`LedDrivî_Tu∫On
(9);

133 
	`LedDrivî_Tu∫On
(8);

134 
	`LONGS_EQUAL
(0x180, 
vútuÆLeds
);

135 
	}
}

139 
	$TEST
(
LedDrivî
, 
Tu∫OffAnyLed
)

141 
	`LedDrivî_Tu∫AŒOn
();

142 
	`LedDrivî_Tu∫Off
(8);

143 
	`LONGS_EQUAL
(0xff7f, 
vútuÆLeds
);

144 
	}
}

148 
	$TEST
(
LedDrivî
, 
LedMem‹yIsNŸRódabÀ
)

150 
vútuÆLeds
 = 0xffff;

151 
	`LedDrivî_Tu∫On
(8);

152 
	`LONGS_EQUAL
(0x80, 
vútuÆLeds
);

153 
	}
}

157 
	$TEST
(
LedDrivî
, 
UµîAndLowîBounds
)

159 
	`LedDrivî_Tu∫On
(1);

160 
	`LedDrivî_Tu∫On
(16);

161 
	`LONGS_EQUAL
(0x8001, 
vútuÆLeds
);

162 
	}
}

166 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OnD€sNoH¨m
)

168 
	`LedDrivî_Tu∫On
(-1);

169 
	`LedDrivî_Tu∫On
(0);

170 
	`LedDrivî_Tu∫On
(17);

171 
	`LedDrivî_Tu∫On
(3141);

173 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

174 
	}
}

178 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

180 
	`LedDrivî_Tu∫AŒOn
();

182 
	`LedDrivî_Tu∫Off
(-1);

183 
	`LedDrivî_Tu∫Off
(0);

184 
	`LedDrivî_Tu∫Off
(17);

185 
	`LedDrivî_Tu∫Off
(3141);

187 
	`LONGS_EQUAL
(0xffff, 
vútuÆLeds
);

188 
	}
}

192 
	$IGNORE_TEST
(
LedDrivî
, 
OutOfBoundsToDo
)

195 
	}
}

199 
	$TEST
(
LedDrivî
, 
OutOfBoundsProdu˚sRu¡imeEº‹
)

201 
	`LedDrivî_Tu∫On
(-1);

202 
	`STRCMP_EQUAL
("LED Drivî: out-of-bound†LED", 
	`Ru¡imeEº‹Stub_GëLa°Eº‹
());

203 
	}
}

207 
	$TEST
(
LedDrivî
, 
IsOn
)

209 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOn
(1));

210 
	`LedDrivî_Tu∫On
(1);

211 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOn
(1));

212 
	}
}

216 
	$TEST
(
LedDrivî
, 
IsOff
)

218 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOff
(12));

219 
	`LedDrivî_Tu∫On
(12);

220 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOff
(12));

221 
	}
}

225 
	$TEST
(
LedDrivî
, 
OutOfBoundsLedsAªAlwaysOff
)

227 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOff
(0));

228 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOff
(17));

229 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOn
(0));

230 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOn
(17));

231 
	}
}

235 
	$TEST
(
LedDrivî
, 
AŒOn
)

237 
	`LedDrivî_Tu∫AŒOn
();

238 
	`LONGS_EQUAL
(0xffff, 
vútuÆLeds
);

239 
	}
}

243 
	$TEST
(
LedDrivî
, 
AŒOn
)

245 
	`LedDrivî_Tu∫AŒOn
();

246 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOn
(1));

247 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOn
(8));

248 
	`CHECK_EQUAL
(
åue
, 
	`LedDrivî_IsOn
(16));

249 
	`LONGS_EQUAL
(0xffff, 
vútuÆLeds
);

250 
	}
}

255 
	$TEST
(
LedDrivî
, 
AŒOff
)

257 
	`LedDrivî_Tu∫AŒOn
();

258 
	`LedDrivî_Tu∫AŒOff
();

259 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

260 
	}
}

268 
	$TEST
(
LedDrivî
, 
Tu∫OffAnyLed
)

270 
	`LedDrivî_Tu∫On
(9);

271 
	`LedDrivî_Tu∫On
(8);

272 
	`LedDrivî_Tu∫Off
(8);

273 
	`LONGS_EQUAL
(0x100, 
vútuÆLeds
);

274 
	}
}

278 
	$TEST
(
LedDrivî
, 
Cª©e
)

280 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

281 
	}
}

284 
	$TEST
(
LedDrivî
, 
OutOfBoundsCh™gesNŸhög
)

286 
	`LedDrivî_Tu∫On
(-1);

287 
	`LedDrivî_Tu∫On
(0);

288 
	`LedDrivî_Tu∫On
(17);

289 
	`LedDrivî_Tu∫On
(3141);

291 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

292 
	}
}

295 
	$TEST
(
LedDrivî
, 
OutOfBoundsCh™gesNŸhög
)

297 
	`LedDrivî_Tu∫On
(-1);

298 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

299 
	`LedDrivî_Tu∫On
(0);

300 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

301 
	`LedDrivî_Tu∫On
(17);

302 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

303 
	`LedDrivî_Tu∫On
(33);

304 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

305 
	`LedDrivî_Tu∫On
(3141);

307 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

308 
	}
}

311 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

313 
	`LedDrivî_Tu∫Off
(-1);

314 
	`LedDrivî_Tu∫Off
(0);

315 
	`LedDrivî_Tu∫Off
(17);

316 
	`LedDrivî_Tu∫Off
(3141);

318 
	`LONGS_EQUAL
(0, 
vútuÆLeds
);

319 
	}
}

322 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

324 
	`LedDrivî_Tu∫AŒOn
();

326 
	`LedDrivî_Tu∫Off
(-1);

327 
	`LedDrivî_Tu∫Off
(0);

328 
	`LedDrivî_Tu∫Off
(17);

329 
	`LedDrivî_Tu∫Off
(3141);

331 
	`LONGS_EQUAL
(0xffff, 
vútuÆLeds
);

332 
	}
}

336 
	$TEST
(
LedDrivî
, 
OutOfBoundsLedsAªAlwaysOff
)

338 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOn
(0));

339 
	`CHECK_EQUAL
(
Ál£
, 
	`LedDrivî_IsOn
(17));

340 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\TestRefactor\TestHelper.c

9 
	$sy°em_öô_f‹_myã°
()

11 
ªsu…
 = 0;

12 
imp‹è¡_d©a_ty≥
 = 12;

13 
°¨t_time
 = 14;

14 
mesßge_t
 
msg
;

15 
ù_addªss_t
 
c⁄åﬁÀr_addr
;

17 
	`mem£t
(&
msg
, 0, (msg));

18 
	`öô_ù_addªss
(
c⁄åﬁÀr_addr
, 127, 1, 0 ,0);

19 
msg
.
id
 = 1;

20 
msg
.
ty≥
 = 
CONFIG
;

21 
msg
.
ty≥s
.
c⁄fuguøti⁄
.
age
 = 44

22 
msg
.
ty≥s
.
c⁄fuguøti⁄
.
di˘i⁄¨y
 = 
DEFAULT
;

23 
msg
.
ty≥s
.
c⁄fuguøti⁄
.
modifõr
 = 
NONE
;

24 
msg
.
ty≥s
.
c⁄fuguøti⁄
.
«me
 = "A";

26 
ªsu…
 = 
	`sy°em_öô
(

27 &
msg
,

28 
imp‹è¡_d©a_ty≥
,

29 
°¨t_time
,

30 &
c⁄åﬁÀr_addr
);

32  
ªsu…
;

33 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\dvr\DvRecorderTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~"DvRec‹dî.h
"

14 
	~<mem‹y.h
>

18 
DvRec‹dî
 
ªc‹dîD©a
 = {

21 {"Rockyánd BuŒwökÀ", 
ª≥©
, 2, 8, 30, 30, 
high_¥i‹ôy
, 
Æl_ïisodes
},

22 {"Bug†Bu¬y", 
ª≥©
, 9, 8, 30, 30, 
high_¥i‹ôy
, 
Æl_ïisodes
},

23 {"Dr. Who", 
ª≥©
, 11, 23, 0, 90, 
high_¥i‹ôy
, 
ª≥©ed_ïisodes
},

24 {"Lawánd Ordî", 
ª≥©
, 5, 21, 0, 60, 
high_¥i‹ôy
, 
Æl_ïisodes
},

31 
	$TEST_GROUP
(
DvRec‹dî
)

33 
DvRec‹dî
 
ªc‹dî
;

34 
	`£tup
()

36 
	`mem˝y
(&
ªc‹dî
, &
ªc‹dîD©a
, (recorder));

37 
	`DvrRec‹dî_Cª©e
();

38 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

41 
	`ã¨down
()

43 
	`DvRec‹dî_De°roy
();

45 
	}
};

50 
	$TEST_GROUP
(
DvRec‹dî
)

52 
DvRec‹dî
 
ªc‹dî
;

53 
	`£tup
()

55 
	`mem˝y
(&
ªc‹dî
, &
ªc‹dîD©a
, (recorder));

56 
	`DvrRec‹dî_Cª©e
();

59 
	`ã¨down
()

61 
	`DvRec‹dî_De°roy
();

63 
	}
};

65 
	$TEST
(
DvRec‹dî
, 
Re°‹eSomeProgøms
)

67 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

69 
	}
}

74 
	$TEST
(
DvRec‹dî
, 
Re°‹eNoProgøms
)

76 
ªc‹dî
.
¥ogømCou¡
 = 0;

77 
ªc‹dî
.
¥ogøms
[0].
«me
 = 0;

78 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

80 
	}
}

82 
	$TEST
(
DvRec‹dî
, 
Rec‹dWôhRïót
)

84 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

86 
	}
}

88 
	$TEST
(
DvRec‹dî
, 
Rec‹dWôhNoRïót
)

90 
ªc‹dî
.
¥ogøms
[0].
ª≥©
 = 
ª≥©_no
;

91 
ªc‹dî
.
¥ogøms
[1].
ª≥©
 = 
ª≥©_no
;

92 
ªc‹dî
.
¥ogøms
[2].
ª≥©
 = 
ª≥©_no
;

93 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

95 
	}
}

97 
	$TEST
(
DvRec‹dî
, 
Rec‹dC⁄Êi˘Fú°HighPri‹ôyWös
)

99 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

101 
	}
}

103 
	$TEST
(
DvRec‹dî
, 
Rec‹dC⁄Êi˘HighPri‹ôyWös
)

105 
ªc‹dî
.
¥ogøms
[0].
¥i‹ôy
 = 
low_¥i‹ôy
;

106 
	`DvRec‹dî_Re°‹eProgøms
(&
ªc‹dî
);

108 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\stdio\SprintfTest.cpp

9 
	~"CµUTe°/Te°H¨√ss.h
"

13 
	~<°dio.h
>

14 
	~<mem‹y.h
>

18 
	$TEST_GROUP
(
•rötf
)

20 
buf„r
[100];

21 c⁄° * 
ex≥˘ed
;

22 
Àngth
;

24 
	`£tup
()

26 
	`mem£t
(
buf„r
, 0xaa, (buffer));

27 
ex≥˘ed
 = "";

28 
Àngth
 = 0;

31 
	`ã¨down
()

35 
	`ex≥˘
(c⁄° * 
s
)

37 
ex≥˘ed
 = 
s
;

40 
	`giví
(
ch¨sWrôãn
)

42 
Àngth
 = 
ch¨sWrôãn
;

43 
	`LONGS_EQUAL
(
	`°æí
(
ex≥˘ed
), 
Àngth
);

44 
	`STRCMP_EQUAL
(
ex≥˘ed
, 
buf„r
);

45 
	`BYTES_EQUAL
(0xØ, 
buf„r
[
	`°æí
(
ex≥˘ed
) + 1]);

49 
	}
};

53 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

55 
	`ex≥˘
("hey");

56 
	`giví
(
	`•rötf
(
buf„r
, "hey"));

57 
	}
}

59 
	$TEST
(
•rötf
, 
In£πSåög
)

61 
	`ex≥˘
("Hello World\n");

62 
	`giví
(
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

63 
	}
}

68 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

70 
buf„r
[5];

71 
	`mem£t
(
buf„r
, 0xaa, (buffer));

73 
	`LONGS_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

74 
	`STRCMP_EQUAL
("hey", 
buf„r
);

75 
	`BYTES_EQUAL
(0xØ, 
buf„r
[2]);

76 
	}
}

79 
	$TEST
(
•rötf
, 
In£πSåög
)

81 
buf„r
[20];

82 
	`mem£t
(
buf„r
, 0xaa, (buffer));

84 
	`LONGS_EQUAL
(12, 
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

85 
	`STRCMP_EQUAL
("HñlÿW‹ld\n", 
buf„r
);

86 
	`BYTES_EQUAL
(0xØ, 
buf„r
[13]);

87 
	}
}

92 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

94 
buf„r
[5];

96 
	`LONGS_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

97 
	`STRCMP_EQUAL
("hey", 
buf„r
);

98 
	}
}

103 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

105 
buf„r
[5] = "";

107 
	`LONGS_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

108 
	`STRCMP_EQUAL
("hey", 
buf„r
);

109 
	}
}

115 
	$TEST
(
•rötf
, 
In£πSåög
)

117 
buf„r
[20] = "";

119 
	`LONGS_EQUAL
(12, 
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

120 
	`STRCMP_EQUAL
("HñlÿW‹ld\n", 
buf„r
);

121 
	}
}

126 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

128 
buf„r
[5];

130 
	`LONGS_EQUAL
(2, 
	`•rötf
(
buf„r
, "hey"));

131 
	`STRCMP_EQUAL
("hey", 
buf„r
);

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\util\CircularBufferPrintTest.cpp

11 
	~"CµUTe°/Te°H¨√ss.h
"

15 
	~"CúcuœrBuf„r.h
"

16 
	~"Utûs.h
"

17 
	~"F‹m©OuçutSpy.h
"

21 
	$TEST_GROUP
(
CúcuœrBuf„rPröt
)

23 
CúcuœrBuf„r
 * 
buf„r
;

24 c⁄° * 
ex≥˘edOuçut
;

25 c⁄° * 
a˘uÆOuçut
;

27 
	`£tup
()

29 
	`UT_PTR_SET
(
F‹m©Ouçut
, 
F‹m©OuçutSpy
);

30 
	`F‹m©OuçutSpy_Cª©e
(100);

31 
a˘uÆOuçut
 = 
	`F‹m©OuçutSpy_GëOuçut
();

32 
buf„r
 = 
	`CúcuœrBuf„r_Cª©e
(10);

35 
	`ã¨down
()

37 
	`CHECK
(
	`CúcuœrBuf„r_VîifyI¡egrôy
(
buf„r
));

38 
	`CúcuœrBuf„r_De°roy
(
buf„r
);

39 
	`F‹m©OuçutSpy_De°roy
();

42 
	`putM™yInTheBuf„r
(
£ed
, 
howM™y
)

44 
i
 = 0; i < 
howM™y
; i++)

45 
	`CúcuœrBuf„r_Put
(
buf„r
, 
i
+
£ed
);

48 
	}
};

52 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötEm±y
)

54 
ex≥˘edOuçut
 = "Circular buffer content:\n<>\n";

56 
	`CúcuœrBuf„r_Pröt
(
buf„r
);

58 
	`STRCMP_EQUAL
(
ex≥˘edOuçut
, 
a˘uÆOuçut
);

59 
	}
}

69 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötA·îO√IsPut
)

71 
ex≥˘edOuçut
 = "Circular buffer content:\n<17>\n";

73 
	`CúcuœrBuf„r_Put
(
buf„r
, 17);

74 
	`CúcuœrBuf„r_Pröt
(
buf„r
);

76 
	`STRCMP_EQUAL
(
ex≥˘edOuçut
, 
a˘uÆOuçut
);

77 
	}
}

81 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötNŸYëWøµedOrFuŒ
)

83 
ex≥˘edOuçut
 = "Circular buffer content:\n<10, 20, 30>\n";

85 
	`CúcuœrBuf„r_Put
(
buf„r
, 10);

86 
	`CúcuœrBuf„r_Put
(
buf„r
, 20);

87 
	`CúcuœrBuf„r_Put
(
buf„r
, 30);

88 
	`CúcuœrBuf„r_Pröt
(
buf„r
);

90 
	`STRCMP_EQUAL
(
ex≥˘edOuçut
, 
a˘uÆOuçut
);

91 
	}
}

95 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötNŸYëWøµedAndIsFuŒ
)

97 
ex≥˘edOuçut
 =

101 
CúcuœrBuf„r
 * 
b
 = 
	`CúcuœrBuf„r_Cª©e
(5);

102 
	`CúcuœrBuf„r_Put
(
b
, 31);

103 
	`CúcuœrBuf„r_Put
(
b
, 41);

104 
	`CúcuœrBuf„r_Put
(
b
, 59);

105 
	`CúcuœrBuf„r_Put
(
b
, 26);

106 
	`CúcuœrBuf„r_Put
(
b
, 53);

108 
	`CúcuœrBuf„r_Pröt
(
b
);

111 
	`STRCMP_EQUAL
(
ex≥˘edOuçut
, 
a˘uÆOuçut
);

112 
	`CúcuœrBuf„r_De°roy
(
b
);

113 
	}
}

117 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

119 
ex≥˘edOuçut
 =

123 
CúcuœrBuf„r
 * 
b
 = 
	`CúcuœrBuf„r_Cª©e
(5);

124 
	`CúcuœrBuf„r_Put
(
b
, 200);

125 
	`CúcuœrBuf„r_Put
(
b
, 201);

126 
	`CúcuœrBuf„r_Put
(
b
, 202);

127 
	`CúcuœrBuf„r_Put
(
b
, 203);

128 
	`CúcuœrBuf„r_Put
(
b
, 204);

129 
	`CúcuœrBuf„r_Gë
(
b
);

130 
	`CúcuœrBuf„r_Put
(
b
, 999);

132 
	`CúcuœrBuf„r_Pröt
(
b
);

135 
	`STRCMP_EQUAL
(
ex≥˘edOuçut
, 
a˘uÆOuçut
);

136 
	`CúcuœrBuf„r_De°roy
(
b
);

137 
	}
}

141 
	$TEST
(
CúcuœrBuf„rPröt
, 
FûlThíEm±yThíPröt
)

143 * 
ex≥˘edOuçut
 =

146 
	}
}

148 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötAMesßgeF‹PutToFuŒ
)

151 
	}
}

153 
	$TEST
(
CúcuœrBuf„rPröt
, 
PrötAMesßgeF‹GëFromEm±y
)

156 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\util\CircularBufferTest.cpp

11 
	~"CµUTe°/Te°H¨√ss.h
"

15 
	~"CúcuœrBuf„r.h
"

16 
	~"F‹m©OuçutSpy.h
"

19 
	$TEST_GROUP
(
CúcuœrBuf„r
)

21 
CúcuœrBuf„r
* 
buf„r
;

23 
	`£tup
()

25 
buf„r
 = 
	`CúcuœrBuf„r_Cª©e
(10);

28 
	`ã¨down
()

30 
	`CHECK
(
	`CúcuœrBuf„r_VîifyI¡egrôy
(
buf„r
));

31 
	`CúcuœrBuf„r_De°roy
(
buf„r
);

34 
	`putM™yInTheBuf„r
(
£ed
, 
howM™y
)

36 
i
 = 0; i < 
howM™y
; i++)

37 
	`CúcuœrBuf„r_Put
(
buf„r
, 
i
+
£ed
);

39 
	}
};

41 
	$TEST
(
CúcuœrBuf„r
, 
Cª©e
)

43 
	}
}

54 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

56 
	`CHECK
(
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

57 
	}
}

59 
	$TEST
(
CúcuœrBuf„r
, 
NŸFuŒA·îCª©i⁄
)

61 
	`CHECK
(!
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

62 
	}
}

64 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

66 
	`CúcuœrBuf„r_Put
(
buf„r
, 10046);

67 
	`CHECK
(!
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

68 
	}
}

70 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

72 
	`CúcuœrBuf„r_Put
(
buf„r
, 4567);

73 
	`CHECK
(!
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

74 
	`CúcuœrBuf„r_Gë
(
buf„r
);

75 
	`CHECK
(
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

76 
	}
}

78 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

80 
	`CúcuœrBuf„r_Put
(
buf„r
, 4567);

81 
	`LONGS_EQUAL
(4567, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

82 
	}
}

84 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

86 
	`CúcuœrBuf„r_Put
(
buf„r
, 1);

87 
	`CúcuœrBuf„r_Put
(
buf„r
, 2);

88 
	`CúcuœrBuf„r_Put
(
buf„r
, 3);

89 
	`LONGS_EQUAL
(1, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

90 
	`LONGS_EQUAL
(2, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

91 
	`LONGS_EQUAL
(3, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

92 
	}
}

94 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

96 
CúcuœrBuf„r
* 
b
 = 
	`CúcuœrBuf„r_Cª©e
(2);

97 
	`LONGS_EQUAL
(2, 
	`CúcuœrBuf„r_C≠acôy
(
b
));

98 
	`CúcuœrBuf„r_De°roy
(
b
);

99 
	}
}

102 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

104 
i
 = 0; i < 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
); i++)

105 
	`CúcuœrBuf„r_Put
(
buf„r
, 
i
+100);

107 
	`CHECK
(
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

108 
	}
}

110 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

112 
i
 = 0; i < 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
); i++)

113 
	`CúcuœrBuf„r_Put
(
buf„r
, 
i
+100);

115 
	`CHECK
(
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

117 
j
 = 0; j < 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
); j++)

118 
	`LONGS_EQUAL
(
j
+100, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

120 
	`CHECK
(
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

121 
	`CHECK
(!
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

122 
	}
}

124 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

126 
ˇ∑côy
 = 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
);

127 
i
 = 0; i < 
ˇ∑côy
; i++)

128 
	`CúcuœrBuf„r_Put
(
buf„r
, 
i
+100);

130 
	`CHECK
(
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

131 
	`LONGS_EQUAL
(100, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

132 
	`CHECK
(!
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

133 
	`CúcuœrBuf„r_Put
(
buf„r
, 1000);

134 
	`CHECK
(
	`CúcuœrBuf„r_IsFuŒ
(
buf„r
));

136 
j
 = 1; j < 
ˇ∑côy
; j++)

137 
	`LONGS_EQUAL
(
j
+100, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

139 
	`LONGS_EQUAL
(1000, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

140 
	`CHECK
(
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

141 
	}
}

143 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒThrows
)

145 
	`putM™yInTheBuf„r
(900, 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
));

146 
	`CHECK
(!
	`CúcuœrBuf„r_Put
(
buf„r
, 9999));

147 
	}
}

149 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒD€sNŸDamageC⁄ã¡s
)

151 
	`putM™yInTheBuf„r
(900, 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
));

153 
	`CúcuœrBuf„r_Put
(
buf„r
, 9999);

155 
i
 = 0; i < 
	`CúcuœrBuf„r_C≠acôy
(
buf„r
); i++)

156 
	`LONGS_EQUAL
(
i
+900, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

158 
	`CHECK
(
	`CúcuœrBuf„r_IsEm±y
(
buf„r
));

159 
	}
}

161 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±yRëu∫s0
)

163 
	`LONGS_EQUAL
(0, 
	`CúcuœrBuf„r_Gë
(
buf„r
));

164 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\zune\RtcTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	~"RtcTime.h
"

8 
œ°M⁄ô‹edDays
;

9 
m⁄ô‹Lo›
(
days
)

11 
CHECK
(
œ°M⁄ô‹edDays
 !
days
);

12 
œ°M⁄ô‹edDays
 = 
days
;

17 
	$TEST_GROUP
(
RtcTime
)

19 
RtcTime
* 
πcTime
;

22 
	`£tup
()

24 
œ°M⁄ô‹edDays
 = -1;

28 
	`ã¨down
()

30 
	`RtcTime_De°roy
(
πcTime
);

33 
	`as£πD©e
(
yór
, 
m⁄th
, 
dayOfM⁄th
, 
dayOfWìk
)

35 
	`LONGS_EQUAL
(
yór
, 
	`RtcTime_GëYór
(
πcTime
));

36 
	`LONGS_EQUAL
(
dayOfM⁄th
, 
	`RtcTime_GëDayOfM⁄th
(
πcTime
));

37 
	`LONGS_EQUAL
(
m⁄th
, 
	`RtcTime_GëM⁄th
(
πcTime
));

38 
	`LONGS_EQUAL
(
dayOfWìk
, 
	`RtcTime_GëDayOfWìk
(
πcTime
));

42 
	`daysF‹Yór
(
yór
)

44 i‡(
	`isLópYór
(
yór
))

50 
	`daysSö˚1980F‹Yór
(
ídYór
)

52 
days
 = 0;

54 
yór
 = 1980; yó∏< 
ídYór
; year++)

56 
days
 +
	`daysF‹Yór
(
yór
);

58  
days
;

62 
	}
};

64 
	$TEST
(
RtcTime
, 1980
_1_1
)

66 
πcTime
 = 
	`RtcTime_Cª©e
(1);

67 
	`as£πD©e
(1980, 1, 1, 
Tuesday
);

68 
	}
}

70 
	$TEST
(
RtcTime
, 1980
_1_2
)

72 
πcTime
 = 
	`RtcTime_Cª©e
(2);

73 
	`as£πD©e
(1980, 1, 2, 
Wed√sday
);

74 
	}
}

76 
	$TEST
(
RtcTime
, 1980
_1_31
)

78 
πcTime
 = 
	`RtcTime_Cª©e
(31);

79 
	`as£πD©e
(1980, 1, 31, 
Thursday
);

80 
	}
}

82 
	$TEST
(
RtcTime
, 1980
_2_1
)

84 
πcTime
 = 
	`RtcTime_Cª©e
(31+1);

85 
	`as£πD©e
(1980, 2, 1, 
Friday
);

86 
	}
}

88 
	$TEST
(
RtcTime
, 1980
_2_29_À≠
)

90 
πcTime
 = 
	`RtcTime_Cª©e
(31+28+1);

91 
	`as£πD©e
(1980, 2, 29, 
Friday
);

92 
	}
}

94 
	$TEST
(
RtcTime
, 1980
_3_1_À≠
)

96 
πcTime
 = 
	`RtcTime_Cª©e
(31+29+1);

97 
	`as£πD©e
(1980, 3, 1, 
S©urday
);

98 
	}
}

100 
	$TEST
(
RtcTime
, 1980
_4_1
)

102 
πcTime
 = 
	`RtcTime_Cª©e
(31+29+31+1);

103 
	`as£πD©e
(1980, 4, 1, 
Tuesday
);

104 
	}
}

106 
	$TEST
(
RtcTime
, 1980
_5_1
)

108 
πcTime
 = 
	`RtcTime_Cª©e
(31+29+31+30+1);

109 
	`as£πD©e
(1980, 5, 1, 
Thursday
);

110 
	}
}

112 
	$TEST
(
RtcTime
, 1980
_6_1
)

114 
πcTime
 = 
	`RtcTime_Cª©e
(31+29+31+30+31+1);

115 
	`as£πD©e
(1980, 6, 1, 
Sunday
);

116 
	}
}

118 
	$TEST
(
RtcTime
, 1981
_1_1
)

120 
πcTime
 = 
	`RtcTime_Cª©e
(366+1);

121 
	`as£πD©e
(1981, 1, 1, 
Thursday
);

122 
	}
}

124 
	$TEST
(
RtcTime
, 2000
_1_1
)

126 
yórSèπ
 = 
	`daysSö˚1980F‹Yór
(2000);

127 
πcTime
 = 
	`RtcTime_Cª©e
(
yórSèπ
+1);

128 
	`as£πD©e
(2000, 1, 1, 
S©urday
);

129 
	}
}

131 
	$TEST
(
RtcTime
, 2000
_3_1_À≠
)

133 
yórSèπ
 = 
	`daysSö˚1980F‹Yór
(2000);

134 
πcTime
 = 
	`RtcTime_Cª©e
(
yórSèπ
+31+29+1);

135 
	`as£πD©e
(2000, 3, 1, 
Wed√sday
);

136 
	}
}

139 
	$TEST
(
RtcTime
, 2008
_12_31_œ°_day_of_À≠_yór
)

141 
yórSèπ
 = 
	`daysSö˚1980F‹Yór
(2008);

142 
πcTime
 = 
	`RtcTime_Cª©e
(
yórSèπ
+366);

143 
	`as£πD©e
(2008, 12, 31, 
Wed√sday
);

144 
	}
}

147 
	$TEST
(
RtcTime
, 2008
_12_31_zu√_bug_Áûs_this_ã°
)

149 
yórSèπ
 = 
	`daysSö˚1980F‹Yór
(2008);

150 
πcTime
 = 
	`RtcTime_Cª©e
(
yórSèπ
+366);

151 
	`as£πD©e
(2008, 12, 31, 
Wed√sday
);

152 
	}
}

155 
	$TEST
(
RtcTime
, 2100
_3_1_nŸ_À≠_yór
)

157 
yórSèπ
 = 
	`daysSö˚1980F‹Yór
(2100);

158 
πcTime
 = 
	`RtcTime_Cª©e
(
yórSèπ
+31+28+1);

159 
	`as£πD©e
(2100, 3, 1, 
M⁄day
);

160 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\AllTests.c

10 
	~"unôy_fixtuª.h
"

16 
	$runAŒTe°s
()

18 
	`RUN_TEST_GROUP
(
LedDrivî
);

19 
	}
}

23 
	$runAŒTe°s
()

25 
	`RUN_TEST_GROUP
(
•rötf
);

26 
	}
}

29 
	$runAŒTe°s
()

32 
	`RUN_TEST_GROUP
(
LedDrivî
);

33 
	`RUN_TEST_GROUP
(
•rötf
);

34 
	`RUN_TEST_GROUP
(
UnôyFixtuª
);

35 
	`RUN_TEST_GROUP
(
UnôyOuçut
);

36 
	`RUN_TEST_GROUP
(
UnôyComm™dO±i⁄s
);

37 
	`RUN_TEST_GROUP
(
LókDëe˘i⁄
)

38 
	}
}

43 
	$maö
(
ac
, c⁄° * 
av
[])

45  
	`UnôyMaö
(
ac
, 
av
, 
runAŒTe°s
);

46 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\LedDriver\LedDriverTest.c

9 
	~"unôy_fixtuª.h
"

10 
	~"LedDrivî.h
"

11 
	~"Ru¡imeEº‹Stub.h
"

16 
	$TEST_GROUP
(
LedDrivî
)

18 
uöt16_t
 
vútuÆLeds
;

20 
	$TEST_SETUP
(
LedDrivî
)

22 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

23 
	}
}

25 
	$TEST_TEAR_DOWN
(
LedDrivî
)

27 
	}
}

32 
	$TEST
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
)

34 
vútuÆLeds
 = 0xffff;

35 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

36 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

37 
	}
}

40 
	$TEST
(
LedDrivî
, 
Tu∫OnLedO√
)

42 
	`LedDrivî_Tu∫On
(1);

43 
	`TEST_ASSERT_EQUAL_HEX16
(1, 
vútuÆLeds
);

44 
	}
}

46 
	$TEST
(
LedDrivî
, 
Tu∫OffLedO√
)

48 
	`LedDrivî_Tu∫On
(1);

49 
	`LedDrivî_Tu∫Off
(1);

50 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

51 
	}
}

55 
	$TEST
(
LedDrivî
, 
Tu∫OnMu…ùÀLeds
)

57 
	`LedDrivî_Tu∫On
(9);

58 
	`LedDrivî_Tu∫On
(8);

59 
	`TEST_ASSERT_EQUAL_HEX16
(0x180, 
vútuÆLeds
);

60 
	}
}

64 
	$TEST
(
LedDrivî
, 
Tu∫OffMu…ùÀLeds
)

66 
	`LedDrivî_Tu∫AŒOn
();

67 
	`LedDrivî_Tu∫Off
(9);

68 
	`LedDrivî_Tu∫Off
(8);

69 
	`TEST_ASSERT_EQUAL_HEX16
((~0x180)&0xffff, 
vútuÆLeds
);

70 
	}
}

74 
	$TEST
(
LedDrivî
, 
Tu∫OffAnyLed
)

76 
	`LedDrivî_Tu∫AŒOn
();

77 
	`LedDrivî_Tu∫Off
(8);

78 
	`TEST_ASSERT_EQUAL_HEX16
(0xff7f, 
vútuÆLeds
);

79 
	}
}

83 
	$TEST
(
LedDrivî
, 
LedMem‹yIsNŸRódabÀ
)

85 
vútuÆLeds
 = 0xffff;

86 
	`LedDrivî_Tu∫On
(8);

87 
	`TEST_ASSERT_EQUAL_HEX16
(0x80, 
vútuÆLeds
);

88 
	}
}

92 
	$TEST
(
LedDrivî
, 
UµîAndLowîBounds
)

94 
	`LedDrivî_Tu∫On
(1);

95 
	`LedDrivî_Tu∫On
(16);

96 
	`TEST_ASSERT_EQUAL_HEX16
(0x8001, 
vútuÆLeds
);

97 
	}
}

101 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OnD€sNoH¨m
)

103 
	`LedDrivî_Tu∫On
(-1);

104 
	`LedDrivî_Tu∫On
(0);

105 
	`LedDrivî_Tu∫On
(17);

106 
	`LedDrivî_Tu∫On
(3141);

108 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

109 
	}
}

113 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

115 
	`LedDrivî_Tu∫AŒOn
();

117 
	`LedDrivî_Tu∫Off
(-1);

118 
	`LedDrivî_Tu∫Off
(0);

119 
	`LedDrivî_Tu∫Off
(17);

120 
	`LedDrivî_Tu∫Off
(3141);

122 
	`TEST_ASSERT_EQUAL_HEX16
(0xffff, 
vútuÆLeds
);

123 
	}
}

127 
	$IGNORE_TEST
(
LedDrivî
, 
OutOfBoundsToDo
)

130 
	}
}

134 
	$TEST
(
LedDrivî
, 
OutOfBoundsProdu˚sRu¡imeEº‹
)

136 
	`LedDrivî_Tu∫On
(-1);

137 
	`TEST_ASSERT_EQUAL_STRING
("LED Driver: out-of-bounds LED",

138 
	`Ru¡imeEº‹Stub_GëLa°Eº‹
());

139 
	}
}

143 
	$TEST
(
LedDrivî
, 
IsOn
)

145 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOn
(11));

146 
	`LedDrivî_Tu∫On
(11);

147 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOn
(11));

148 
	}
}

152 
	$TEST
(
LedDrivî
, 
IsOff
)

154 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOff
(12));

155 
	`LedDrivî_Tu∫On
(12);

156 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOff
(12));

157 
	}
}

161 
	$TEST
(
LedDrivî
, 
OutOfBoundsLedsAªAlwaysOff
)

163 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOff
(0));

164 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOff
(17));

165 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOn
(0));

166 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOn
(17));

167 
	}
}

171 
	$TEST
(
LedDrivî
, 
AŒOn
)

173 
	`LedDrivî_Tu∫AŒOn
();

174 
	`TEST_ASSERT_EQUAL_HEX16
(0xffff, 
vútuÆLeds
);

175 
	}
}

179 
	$TEST
(
LedDrivî
, 
AŒOff
)

181 
	`LedDrivî_Tu∫AŒOn
();

182 
	`LedDrivî_Tu∫AŒOff
();

183 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

184 
	}
}

193 
	$TEST
(
LedDrivî
, 
Tu∫OnLedO√
)

195 
uöt16_t
 
vútuÆLeds
;

196 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

197 
	`LedDrivî_Tu∫On
(1);

198 
	`TEST_ASSERT_EQUAL_HEX16
(1, 
vútuÆLeds
);

199 
	}
}

203 
	$TEST
(
LedDrivî
, 
Tu∫OffLedO√
)

205 
uöt16_t
 
vútuÆLeds
;

206 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

207 
	`LedDrivî_Tu∫On
(1);

208 
	`LedDrivî_Tu∫Off
(1);

209 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

210 
	}
}

216 
	$TEST
(
LedDrivî
, 
AŒOn
)

218 
	`LedDrivî_Tu∫AŒOn
();

219 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOn
(1));

220 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOn
(8));

221 
	`TEST_ASSERT_TRUE
(
	`LedDrivî_IsOn
(16));

222 
	`TEST_ASSERT_EQUAL_HEX16
(0xffff, 
vútuÆLeds
);

223 
	}
}

229 
	$TEST
(
LedDrivî
, 
Tu∫OffAnyLed
)

231 
	`LedDrivî_Tu∫On
(9);

232 
	`LedDrivî_Tu∫On
(8);

233 
	`LedDrivî_Tu∫Off
(8);

234 
	`TEST_ASSERT_EQUAL_HEX16
(0x100, 
vútuÆLeds
);

235 
	}
}

239 
	$TEST
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
)

241 
vútuÆLeds
 = 0xffff;

242 
	`LedDrivî_Cª©e
(&
vútuÆLeds
);

243 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

244 
	}
}

247 
	$TEST
(
LedDrivî
, 
OutOfBoundsCh™gesNŸhög
)

249 
	`LedDrivî_Tu∫On
(-1);

250 
	`LedDrivî_Tu∫On
(0);

251 
	`LedDrivî_Tu∫On
(17);

252 
	`LedDrivî_Tu∫On
(3141);

254 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

255 
	}
}

258 
	$TEST
(
LedDrivî
, 
OutOfBoundsCh™gesNŸhög
)

260 
	`LedDrivî_Tu∫On
(-1);

261 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

262 
	`LedDrivî_Tu∫On
(0);

263 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

264 
	`LedDrivî_Tu∫On
(17);

265 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

266 
	`LedDrivî_Tu∫On
(33);

267 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

268 
	`LedDrivî_Tu∫On
(3141);

270 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

271 
	}
}

274 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

276 
	`LedDrivî_Tu∫Off
(-1);

277 
	`LedDrivî_Tu∫Off
(0);

278 
	`LedDrivî_Tu∫Off
(17);

279 
	`LedDrivî_Tu∫Off
(3141);

281 
	`TEST_ASSERT_EQUAL_HEX16
(0, 
vútuÆLeds
);

282 
	}
}

285 
	$TEST
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
)

287 
	`LedDrivî_Tu∫AŒOn
();

289 
	`LedDrivî_Tu∫Off
(-1);

290 
	`LedDrivî_Tu∫Off
(0);

291 
	`LedDrivî_Tu∫Off
(17);

292 
	`LedDrivî_Tu∫Off
(3141);

294 
	`TEST_ASSERT_EQUAL_HEX16
(0xffff, 
vútuÆLeds
);

295 
	}
}

299 
	$TEST
(
LedDrivî
, 
OutOfBoundsLedsAªAlwaysOff
)

301 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOn
(0));

302 
	`TEST_ASSERT_FALSE
(
	`LedDrivî_IsOn
(17));

303 
	}
}

308 
	~"unôy_fixtuª.h
"

310 
	$TEST_GROUP
(
LedDrivî
)

312 
	$TEST_SETUP
(
LedDrivî
)

314 
	}
}

316 
	$TEST_TEAR_DOWN
(
LedDrivî
)

318 
	}
}

320 
	$TEST
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
)

322 
	`TEST_FAIL
("Start here");

323 
	}
}

327 
	$TEST_GROUP
(
LedDrivî
)

329 
	$TEST_SETUP
(
LedDrivî
)

331 
	}
}

333 
	$TEST_TEAR_DOWN
(
LedDrivî
)

335 
	}
}

338 
	$TEST
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
)

340 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\LedDriver\LedDriverTestRunner.c

4 
	~"unôy_fixtuª.h
"

7 
	$TEST_GROUP_RUNNER
(
LedDrivî
)

9 
	`RUN_TEST_CASE
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
);

10 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OnLedO√
);

11 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OffLedO√
);

12 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OnMu…ùÀLeds
);

13 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OffMu…ùÀLeds
);

14 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OffAnyLed
);

15 
	`RUN_TEST_CASE
(
LedDrivî
, 
LedMem‹yIsNŸRódabÀ
);

16 
	`RUN_TEST_CASE
(
LedDrivî
, 
UµîAndLowîBounds
);

17 
	`RUN_TEST_CASE
(
LedDrivî
, 
OutOfBoundsTu∫OnD€sNoH¨m
);

18 
	`RUN_TEST_CASE
(
LedDrivî
, 
OutOfBoundsTu∫OffD€sNoH¨m
);

19 
	`RUN_TEST_CASE
(
LedDrivî
, 
OutOfBoundsToDo
);

20 
	`RUN_TEST_CASE
(
LedDrivî
, 
OutOfBoundsProdu˚sRu¡imeEº‹
);

21 
	`RUN_TEST_CASE
(
LedDrivî
, 
IsOn
);

22 
	`RUN_TEST_CASE
(
LedDrivî
, 
IsOff
);

23 
	`RUN_TEST_CASE
(
LedDrivî
, 
OutOfBoundsLedsAªAlwaysOff
);

24 
	`RUN_TEST_CASE
(
LedDrivî
, 
AŒOn
);

25 
	`RUN_TEST_CASE
(
LedDrivî
, 
AŒOff
);

26 
	}
}

30 
	$TEST_GROUP_RUNNER
(
LedDrivî
)

32 
	`RUN_TEST_CASE
(
LedDrivî
, 
LedsAªOffA·îInôüliz©i⁄
);

33 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OnLedO√
);

34 
	}
}

38 
	$TEST_GROUP_RUNNER
(
LedDrivî
)

40 
	`RUN_TEST_CASE
(
LedDrivî
, 
LedsAªOffA·îInôüliz©i⁄
);

41 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OnLedO√
);

42 
	`RUN_TEST_CASE
(
LedDrivî
, 
Tu∫OffLedO√
);

43 
	}
}

47 
	$TEST_GROUP_RUNNER
(
LedDrivî
)

49 
	`RUN_TEST_CASE
(
LedDrivî
, 
LedsOffA·îInôüliz©i⁄
);

50 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity.h

1 #i‚de‡
UNITY_FRAMEWORK_H


2 
	#UNITY_FRAMEWORK_H


	)

4 
	#UNITY


	)

6 
	~"unôy_öã∫Æs.h
"

32 
	#TEST_PROTECT
(Ë(
	`£tjmp
(
Unôy
.
Ab‹tFøme
Ë=0)

	)

34 
	#TEST_ABORT
(Ë{
	`l⁄gjmp
(
Unôy
.
Ab‹tFøme
, 1);}

	)

36 
	#RUN_TEST
(
func
, 
löe_num
) \

37 
Unôy
.
CuºítTe°Name
 = #func; \

38 
Unôy
.
CuºítTe°LöeNumbî
 = 
löe_num
; \

39 
Unôy
.
NumbîOfTe°s
++; \

40 
	`runTe°
(
func
); \

41 
	`UnôyC⁄˛udeTe°
();

	)

43 
	#TEST_LINE_NUM
 (
Unôy
.
CuºítTe°LöeNumbî
)

	)

49 
	#TEST_FAIL
(
mesßge
Ë
	`UNITY_TEST_FAIL
(
__LINE__
, mesßge)

	)

50 
	#TEST_IGNORE_MESSAGE
(
mesßge
Ë
	`UNITY_TEST_IGNORE
(
__LINE__
, mesßge)

	)

51 
	#TEST_IGNORE
(
mesßge
Ë
	`UNITY_TEST_IGNORE
(
__LINE__
, 
NULL
)

	)

52 
	#TEST_ONLY
()

	)

59 
	#TEST_ASSERT
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, " Ex¥essi⁄ EvÆu©ed TÿFALSE")

	)

60 
	#TEST_ASSERT_TRUE
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, " Ex≥˘ed TRUE Wa†FALSE")

	)

61 
	#TEST_ASSERT_UNLESS
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, " Ex¥essi⁄ EvÆu©ed TÿTRUE")

	)

62 
	#TEST_ASSERT_FALSE
(
c⁄dôi⁄
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, " Ex≥˘ed FALSE Wa†TRUE")

	)

63 
	#TEST_ASSERT_NULL
(
poöãr
Ë
	`UNITY_TEST_ASSERT_NULL
–’oöãr), 
__LINE__
, " Ex≥˘ed NuŒ")

	)

64 
	#TEST_ASSERT_NOT_NULL
(
poöãr
Ë
	`UNITY_TEST_ASSERT_NOT_NULL
(’oöãr), 
__LINE__
, " Ex≥˘ed N⁄-NuŒ")

	)

67 
	#TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

68 
	#TEST_ASSERT_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

69 
	#TEST_ASSERT_NOT_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT
((”x≥˘edË!◊˘uÆ)), 
__LINE__
, " Ex≥˘ed N⁄-EequÆ")

	)

70 
	#TEST_ASSERT_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

71 
	#TEST_ASSERT_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

72 
	#TEST_ASSERT_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

73 
	#TEST_ASSERT_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

74 
	#TEST_ASSERT_EQUAL_HEX
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

75 
	#TEST_ASSERT_BITS
(
mask
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (ex≥˘ed), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

76 
	#TEST_ASSERT_BITS_HIGH
(
mask
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
_UU32
)(-1), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

77 
	#TEST_ASSERT_BITS_LOW
(
mask
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
_UU32
)(0), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

78 
	#TEST_ASSERT_BIT_HIGH
(
bô
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
(((
_UU32
)1 << bô), (_UU32)(-1), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

79 
	#TEST_ASSERT_BIT_LOW
(
bô
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_BITS
(((
_UU32
)1 << bô), (_UU32)(0), (a˘uÆ), 
__LINE__
, 
NULL
)

	)

82 
	#TEST_ASSERT_INT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_INT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

83 
	#TEST_ASSERT_UINT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_UINT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

84 
	#TEST_ASSERT_HEX8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX8_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

85 
	#TEST_ASSERT_HEX16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX16_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

86 
	#TEST_ASSERT_HEX32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

87 
	#TEST_ASSERT_HEX_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

90 
	#TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING
”x≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

91 
	#TEST_ASSERT_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY
”x≥˘ed,á˘uÆ,Üí, 
__LINE__
, 
NULL
)

	)

94 
	#TEST_ASSERT_EQUAL_INT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

95 
	#TEST_ASSERT_EQUAL_UINT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

96 
	#TEST_ASSERT_EQUAL_HEX8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

97 
	#TEST_ASSERT_EQUAL_HEX16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

98 
	#TEST_ASSERT_EQUAL_HEX32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

99 
	#TEST_ASSERT_EQUAL_HEX_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

100 
	#TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
”x≥˘ed,á˘uÆ,Üí,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

103 
	#TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

104 
	#TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT
”x≥˘ed,á˘uÆ, 
__LINE__
, 
NULL
)

	)

105 
	#TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, 
NULL
)

	)

112 
	#TEST_ASSERT_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, mesßge)

	)

113 
	#TEST_ASSERT_TRUE_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–(c⁄dôi⁄), 
__LINE__
, mesßge)

	)

114 
	#TEST_ASSERT_UNLESS_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, mesßge)

	)

115 
	#TEST_ASSERT_FALSE_MESSAGE
(
c⁄dôi⁄
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
–!(c⁄dôi⁄), 
__LINE__
, mesßge)

	)

116 
	#TEST_ASSERT_NULL_MESSAGE
(
poöãr
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_NULL
–’oöãr), 
__LINE__
, mesßge)

	)

117 
	#TEST_ASSERT_NOT_NULL_MESSAGE
(
poöãr
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_NOT_NULL
(’oöãr), 
__LINE__
, mesßge)

	)

120 
	#TEST_ASSERT_EQUAL_INT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

121 
	#TEST_ASSERT_EQUAL_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

122 
	#TEST_ASSERT_NOT_EQUAL_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((”x≥˘edË!◊˘uÆ)), 
__LINE__
, mesßge)

	)

123 
	#TEST_ASSERT_EQUAL_UINT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT
–”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

124 
	#TEST_ASSERT_EQUAL_HEX8_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8
–”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

125 
	#TEST_ASSERT_EQUAL_HEX16_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16
(”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

126 
	#TEST_ASSERT_EQUAL_HEX32_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

127 
	#TEST_ASSERT_EQUAL_HEX_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32
(”x≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

128 
	#TEST_ASSERT_BITS_MESSAGE
(
mask
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (ex≥˘ed), (a˘uÆ), 
__LINE__
, mesßge)

	)

129 
	#TEST_ASSERT_BITS_HIGH_MESSAGE
(
mask
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
_UU32
)(-1), (a˘uÆ), 
__LINE__
, mesßge)

	)

130 
	#TEST_ASSERT_BITS_LOW_MESSAGE
(
mask
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
((mask), (
_UU32
)(0), (a˘uÆ), 
__LINE__
, mesßge)

	)

131 
	#TEST_ASSERT_BIT_HIGH_MESSAGE
(
bô
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
(((
_UU32
)1 << bô), (_UU32)(-1), (a˘uÆ), 
__LINE__
, mesßge)

	)

132 
	#TEST_ASSERT_BIT_LOW_MESSAGE
(
bô
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_BITS
(((
_UU32
)1 << bô), (_UU32)(0), (a˘uÆ), 
__LINE__
, mesßge)

	)

135 
	#TEST_ASSERT_INT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_INT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

136 
	#TEST_ASSERT_UINT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_UINT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

137 
	#TEST_ASSERT_HEX8_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX8_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

138 
	#TEST_ASSERT_HEX16_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX16_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

139 
	#TEST_ASSERT_HEX32_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

140 
	#TEST_ASSERT_HEX_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_HEX32_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

143 
	#TEST_ASSERT_EQUAL_STRING_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_STRING
”x≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

144 
	#TEST_ASSERT_EQUAL_MEMORY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY
”x≥˘ed,á˘uÆ,Üí, 
__LINE__
, mesßge)

	)

147 
	#TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

148 
	#TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

149 
	#TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

150 
	#TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

151 
	#TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

152 
	#TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

153 
	#TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
”x≥˘ed,á˘uÆ,Üí,Çum_ñemíts, 
__LINE__
, mesßge)

	)

156 
	#TEST_ASSERT_FLOAT_WITHIN_MESSAGE
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
(dñè,Éx≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

157 
	#TEST_ASSERT_EQUAL_FLOAT_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT
”x≥˘ed,á˘uÆ, 
__LINE__
, mesßge)

	)

158 
	#TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
”x≥˘ed,á˘uÆ,Çum_ñemíts, 
__LINE__
, mesßge)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture.h

8 #i‚de‡
UNITY_FIXTURE_H_


9 
	#UNITY_FIXTURE_H_


	)

11 
	~"unôy.h
"

12 
	~"unôy_öã∫Æs.h
"

13 
	~"unôy_fixtuª_öã∫Æs.h
"

15 
UnôyMaö
(
ac
, c⁄° * 
av
[], (*
runAŒTe°s
)());

18 
	#TEST_GROUP
(
group
)\

19 
TEST_GROUP_
##
group
 = 0;\

20 

	)

21 
	#TEST_SETUP
(
group
Ë
TEST_
##group##
	`_SETUP
()

	)

23 
	#TEST_TEAR_DOWN
(
group
Ë
TEST_
##group##
	`_TEAR_DOWN
()

	)

26 
	#TEST
(
group
, 
«me
) \

27 
TEST_
##
group
##
_
##
«me
##
	`_ã°Body
();\

28 
TEST_
##
group
##
_
##
«me
##
	`_run
()\

30 
	`UnôyTe°Ru¬î
(
TEST_
##
group
##
_SETUP
,\

31 
TEST_
##
group
##
_
##
«me
##
_ã°Body
,\

32 
TEST_
##
group
##
_TEAR_DOWN
,\

35 
__FILE__
, 
__LINE__
);\

37 
TEST_
##
group
##
_
##
«me
##
	`_ã°Body
()

	)

39 
	#IGNORE_TEST
(
group
, 
«me
) \

40 
TEST_
##
group
##
_
##
«me
##
	`_ã°Body
();\

41 
TEST_
##
group
##
_
##
«me
##
	`_run
()\

44 
TEST_
##
group
##
_
##
«me
##
	`_ã°Body
()

	)

46 
	#DECLARE_TEST_CASE
(
group
, 
«me
) \

47 
TEST_
##
group
##
_
##
«me
##
	`_run
()

	)

49 
	#RUN_TEST_CASE
(
group
, 
«me
) \

50 
	`DECLARE_TEST_CASE
(
group
, 
«me
);\

51 
TEST_
##
group
##
_
##
«me
##
	`_run
();

	)

54 
	#TEST_GROUP_RUNNER
(
group
)\

55 
TEST_
##
group
##
	`_GROUP_RUNNER_runAŒ
();\

56 
TEST_
##
group
##
	`_GROUP_RUNNER
()\

58 
TEST_
##
group
##
	`_GROUP_RUNNER_runAŒ
();\

60 
TEST_
##
group
##
	`_GROUP_RUNNER_runAŒ
()

	)

63 
	#RUN_TEST_GROUP
(
group
)\

64 
TEST_
##
group
##
	`_GROUP_RUNNER
();\

65 
TEST_
##
group
##
	`_GROUP_RUNNER
();

	)

68 
	#UT_PTR_SET
(
±r
, 
√wPoöãrVÆue
Ë
	`UnôyPoöãr_Së
((**)&±r, (*ÍewPoöãrVÆue)

	)

69 
	#TEST_ASSERT_POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`UnôyAs£πEquÆPoöãr
”x≥˘ed,á˘uÆ, 0, 
__LINE__
)

	)

70 
	#TEST_ASSERT_BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_HEX8
(0xf‡& (ex≥˘ed), 0xf‡& (a˘uÆ))

	)

71 
	#FAIL
(
mesßge
Ë
	`TEST_FAIL
((mesßge))

	)

72 
	#CHECK
(
c⁄dôi⁄
Ë
	`TEST_ASSERT_TRUE
((c⁄dôi⁄))

	)

73 
	#LONGS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_INT
(”x≥˘ed), (a˘uÆ))

	)

74 
	#STRCMP_EQUAL
(
ex≥˘ed
, 
a˘uÆ
Ë
	`TEST_ASSERT_EQUAL_STRING
(”x≥˘ed), (a˘uÆ))

	)

75 
	#DOUBLES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
, 
dñè
Ë
	`TEST_ASSERT_FLOAT_WITHIN
((”x≥˘ed), (a˘uÆ), (dñè))

	)

77 
UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(
cou¡
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture_internals.h

8 #i‚de‡
UNITY_FIXTURE_INTERNALS_H_


9 
	#UNITY_FIXTURE_INTERNALS_H_


	)

11 
	tunôyfun˘i⁄
();

12 
UnôyTe°Ru¬î
(
unôyfun˘i⁄
 * 
£tup
,

13 
unôyfun˘i⁄
 * 
body
,

14 
unôyfun˘i⁄
 * 
ã¨down
,

15 c⁄° * 
¥öèbÀName
,

16 c⁄° * 
group
,

17 c⁄° * 
«me
,

18 c⁄° * 
fûe
, 
löe
);

20 
UnôyMÆloc_SèπTe°
();

21 
UnôyMÆloc_EndTe°
();

22 
UnôyFaûuªCou¡
();

23 
UnôyGëComm™dLöeO±i⁄s
(
¨gc
, c⁄° * 
¨gv
[]);

24 
UnôyC⁄˛udeFixtuªTe°
();

26 
UnôyPoöãr_Së
(** 
±r
, * 
√wVÆue
);

27 
UnôyPoöãr_UndoAŒSës
();

28 
UnôyPoöãr_Inô
();

30 
UnôyAs£πEquÆPoöãr
(c⁄° * 
ex≥˘ed
,

31 c⁄° * 
a˘uÆ
,

32 c⁄° * 
msg
,

33 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture_malloc_overrides.h

8 #i‚de‡
UNITY_FIXTURE_MALLOC_OVERRIDES_H_


9 
	#UNITY_FIXTURE_MALLOC_OVERRIDES_H_


	)

11 
	#mÆloc
 
unôy_mÆloc


	)

12 
	#ˇŒoc
 
unôy_ˇŒoc


	)

13 
	#ªÆloc
 
unôy_ªÆloc


	)

14 
	#‰ì
 
unôy_‰ì


	)

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_internals.h

1 #i‚de‡
UNITY_INTERNALS_H


2 
	#UNITY_INTERNALS_H


	)

4 
	~<°dio.h
>

5 
	~<£tjmp.h
>

11 #i‚de‡
UNITY_INT_WIDTH


12 
	#UNITY_INT_WIDTH
 (32)

	)

15 #i‡(
UNITY_INT_WIDTH
 == 32)

16 
	t_UU8
;

17 
	t_UU16
;

18 
	t_UU32
;

19 sig√d 
	t_US8
;

20 sig√d 
	t_US16
;

21 sig√d 
	t_US32
;

22 #ñi‡(
UNITY_INT_WIDTH
 == 16)

23 
	t_UU8
;

24 
	t_UU16
;

25 
	t_UU32
;

26 sig√d 
	t_US8
;

27 sig√d 
	t_US16
;

28 sig√d 
	t_US32
;

30 #îr‹ 
InvÆid
 
UNITY_INT_WIDTH
 
•ecifõd
! (32 
‹
 16 
⁄ly
 
¨e
 
cuºíéy
 
suµ‹ãd
)

37 #ifde‡
UNITY_EXCLUDE_FLOAT


40 #unde‡
UNITY_FLOAT_PRECISION


41 #unde‡
UNITY_FLOAT_TYPE


42 #unde‡
UNITY_FLOAT_VERBOSE


47 #i‚de‡
UNITY_FLOAT_PRECISION


48 
	#UNITY_FLOAT_PRECISION
 (0.00001f)

	)

50 #i‚de‡
UNITY_FLOAT_TYPE


51 
	#UNITY_FLOAT_TYPE
 

	)

53 
UNITY_FLOAT_TYPE
 
	t_UF
;

62 (*
ouçutCh¨
)();

63 
	#UNITY_OUTPUT_CHAR
(
a
Ë
	`ouçutCh¨
◊)

	)

66 #i‚de‡
UNITY_OUTPUT_CHAR


67 
	#UNITY_OUTPUT_CHAR
(
a
Ë
	`putch¨
◊)

	)

74 #i‚de‡
UNITY_LINE_TYPE


75 
	#UNITY_LINE_TYPE
 

	)

82 (*
	tUnôyTe°Fun˘i⁄
)();

86 
UNITY_DISPLAY_STYLE_INT
,

87 
UNITY_DISPLAY_STYLE_UINT
,

88 
UNITY_DISPLAY_STYLE_HEX8
,

89 
UNITY_DISPLAY_STYLE_HEX16
,

90 
UNITY_DISPLAY_STYLE_HEX32


91 } 
	tUNITY_DISPLAY_STYLE_T
;

93 
	s_Unôy


95 c⁄° * 
Te°Fûe
;

96 c⁄° * 
CuºítTe°Name
;

97 
_UU32
 
CuºítTe°LöeNumbî
;

98 
NumbîOfTe°s
;

99 
Te°Faûuªs
;

100 
Te°Ign‹es
;

101 
CuºítTe°Faûed
;

102 
CuºítTe°Ign‹ed
;

103 
Vîbo£
;

104 c⁄° * 
GroupFûãr
;

105 c⁄° * 
NameFûãr
;

106 
RïótCou¡
;

107 
jmp_buf
 
Ab‹tFøme
;

110 
_Unôy
 
Unôy
;

116 
	`UnôyBegö
();

117 
	`UnôyEnd
();

118 
	`UnôyC⁄˛udeTe°
();

124 
	`UnôyPröt
(c⁄° * 
°rög
);

125 
	`UnôyPrötMask
(c⁄° 
_UU32
 
mask
, c⁄° _UU32 
numbî
);

126 
	`UnôyPrötNumbîByStyÀ
(c⁄° 
_US32
 
numbî
, c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

127 
	`UnôyPrötNumbî
(c⁄° 
_US32
 
numbî
);

128 
	`UnôyPrötNumbîUnsig√d
(c⁄° 
_UU32
 
numbî
);

129 
	`UnôyPrötNumbîHex
(c⁄° 
_UU32
 
numbî
, c⁄° 
nibbÀs
);

131 #ifde‡
UNITY_FLOAT_VERBOSE


132 
	`UnôyPrötFlﬂt
(c⁄° 
_UF
 
numbî
);

143 
	`UnôyAs£πEquÆNumbî
(c⁄° 
_US32
 
ex≥˘ed
,

144 c⁄° 
_US32
 
a˘uÆ
,

145 c⁄° * 
msg
,

146 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

147 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

149 
	`UnôyAs£πEquÆI¡Aºay
(c⁄° * 
ex≥˘ed
,

150 c⁄° * 
a˘uÆ
,

151 c⁄° 
_UU32
 
num_ñemíts
,

152 c⁄° * 
msg
,

153 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

154 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

156 
	`UnôyAs£πBôs
(c⁄° 
_US32
 
mask
,

157 c⁄° 
_US32
 
ex≥˘ed
,

158 c⁄° 
_US32
 
a˘uÆ
,

159 c⁄° * 
msg
,

160 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

162 
	`UnôyAs£πEquÆSåög
(c⁄° * 
ex≥˘ed
,

163 c⁄° * 
a˘uÆ
,

164 c⁄° * 
msg
,

165 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

168 
	`UnôyAs£πEquÆMem‹y
–c⁄° * 
ex≥˘ed
,

169 c⁄° * 
a˘uÆ
,

170 c⁄° 
_UU32
 
Àngth
,

171 c⁄° 
_UU32
 
num_ñemíts
,

172 c⁄° * 
msg
,

173 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

175 
	`UnôyAs£πNumbîsWôhö
(c⁄° 
_US32
 
dñè
,

176 c⁄° 
_US32
 
ex≥˘ed
,

177 c⁄° 
_US32
 
a˘uÆ
,

178 c⁄° * 
msg
,

179 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

180 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

182 
	`UnôyFaû
(c⁄° * 
mesßge
, c⁄° 
UNITY_LINE_TYPE
 
löe
);

184 
	`UnôyIgn‹e
(c⁄° * 
mesßge
, c⁄° 
UNITY_LINE_TYPE
 
löe
);

186 #i‚de‡
UNITY_EXCLUDE_FLOAT


187 
	`UnôyAs£πFlﬂtsWôhö
(c⁄° 
_UF
 
dñè
,

188 c⁄° 
_UF
 
ex≥˘ed
,

189 c⁄° 
_UF
 
a˘uÆ
,

190 c⁄° * 
msg
,

191 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

193 
	`UnôyAs£πEquÆFlﬂtAºay
(c⁄° 
_UF
* 
ex≥˘ed
,

194 c⁄° 
_UF
* 
a˘uÆ
,

195 c⁄° 
_UU32
 
num_ñemíts
,

196 c⁄° * 
msg
,

197 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
);

204 
	#UNITY_TEST_FAIL
(
löe
, 
mesßge
Ë{ 
	`UnôyFaû
–(mesßge), (
UNITY_LINE_TYPE
Óöe); 
	}

	)
}

205 
	#UNITY_TEST_IGNORE
(
löe
, 
mesßge
Ë{ 
	`UnôyIgn‹e
–(mesßge), (
UNITY_LINE_TYPE
Óöe); }

	)

211 
	#UNITY_TEST_ASSERT
(
c⁄dôi⁄
, 
löe
, 
mesßge
Ëi‡(c⁄dôi⁄Ë{} {
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
Óöe, mesßge);}

	)

212 
	#UNITY_TEST_ASSERT_NULL
(
poöãr
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((’oöãrË=
NULL
), (
UNITY_LINE_TYPE
Óöe, mesßge)

	)

213 
	#UNITY_TEST_ASSERT_NOT_NULL
(
poöãr
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT
((’oöãrË!
NULL
), (
UNITY_LINE_TYPE
Óöe, mesßge)

	)

215 
	#UNITY_TEST_ASSERT_EQUAL_INT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
_US32
)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_INT
)

	)

216 
	#UNITY_TEST_ASSERT_EQUAL_UINT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
_US32
)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_UINT
)

	)

217 
	#UNITY_TEST_ASSERT_EQUAL_HEX8
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
_US32
)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX8
)

	)

218 
	#UNITY_TEST_ASSERT_EQUAL_HEX16
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
_US32
)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX16
)

	)

219 
	#UNITY_TEST_ASSERT_EQUAL_HEX32
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆNumbî
((
_US32
)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX32
)

	)

220 
	#UNITY_TEST_ASSERT_BITS
(
mask
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πBôs
((
_US32
)(mask), (_US32)”x≥˘ed), (_US32)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

222 
	#UNITY_TEST_ASSERT_INT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
_US32
)(dñè), (_US32)”x≥˘ed), (_US32)◊˘uÆ), 
NULL
, (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_INT
)

	)

223 
	#UNITY_TEST_ASSERT_UINT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
_US32
)(dñè), (_US32)”x≥˘ed), (_US32)◊˘uÆ), 
NULL
, (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_UINT
)

	)

224 
	#UNITY_TEST_ASSERT_HEX8_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
_US32
)(dñè), (_US32)”x≥˘ed), (_US32)◊˘uÆ), 
NULL
, (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX8
)

	)

225 
	#UNITY_TEST_ASSERT_HEX16_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
_US32
)(dñè), (_US32)”x≥˘ed), (_US32)◊˘uÆ), 
NULL
, (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX16
)

	)

226 
	#UNITY_TEST_ASSERT_HEX32_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πNumbîsWôhö
((
_US32
)(dñè), (_US32)”x≥˘ed), (_US32)◊˘uÆ), 
NULL
, (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX32
)

	)

228 
	#UNITY_TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆSåög
((c⁄° *)”x≥˘ed), (c⁄° *)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

229 
	#UNITY_TEST_ASSERT_EQUAL_MEMORY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆMem‹y
((*)”x≥˘ed), (*)◊˘uÆ), (
_UU32
)÷í), 1, (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

231 
	#UNITY_TEST_ASSERT_EQUAL_INT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((c⁄° 
_US32
*)”x≥˘ed), (c⁄° _US32*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_INT
)

	)

232 
	#UNITY_TEST_ASSERT_EQUAL_UINT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((c⁄° 
_US32
*)”x≥˘ed), (c⁄° _US32*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_UINT
)

	)

233 
	#UNITY_TEST_ASSERT_EQUAL_HEX8_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((c⁄° 
_US32
*)”x≥˘ed), (c⁄° _US32*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX8
)

	)

234 
	#UNITY_TEST_ASSERT_EQUAL_HEX16_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((c⁄° 
_US32
*)”x≥˘ed), (c⁄° _US32*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX16
)

	)

235 
	#UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆI¡Aºay
((c⁄° 
_US32
*)”x≥˘ed), (c⁄° _US32*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe, 
UNITY_DISPLAY_STYLE_HEX32
)

	)

236 
	#UNITY_TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
Àn
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆMem‹y
((*)”x≥˘ed), (*)◊˘uÆ), (
_UU32
)÷í), (_UU32)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

238 #ifde‡
UNITY_EXCLUDE_FLOAT


239 
	#UNITY_TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
Óöe, "Unôy Flﬂtög PoöàDißbÀd")

	)

240 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
Óöe, "Unôy Flﬂtög PoöàDißbÀd")

	)

241 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_FAIL
((
UNITY_LINE_TYPE
Óöe, "Unôy Flﬂtög PoöàDißbÀd")

	)

243 
	#UNITY_TEST_ASSERT_FLOAT_WITHIN
(
dñè
, 
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UnôyAs£πFlﬂtsWôhö
((
_UF
)(dñè), (_UF)”x≥˘ed), (_UF)◊˘uÆ), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

244 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT
(
ex≥˘ed
, 
a˘uÆ
, 
löe
, 
mesßge
Ë
	`UNITY_TEST_ASSERT_FLOAT_WITHIN
((
_UF
)”x≥˘edË* (_UF)
UNITY_FLOAT_PRECISION
, (_UFÎx≥˘ed, (_UFÔ˘uÆ, (
UNITY_LINE_TYPE
Óöe, mesßge)

	)

245 
	#UNITY_TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
ex≥˘ed
, 
a˘uÆ
, 
num_ñemíts
, 
löe
, 
mesßge
Ë
	`UnôyAs£πEquÆFlﬂtAºay
((
_UF
*)”x≥˘ed), (_UF*)◊˘uÆ), (
_UU32
)“um_ñemíts), (mesßge), (
UNITY_LINE_TYPE
Óöe)

	)

250 
	#UNITY_FAIL_AND_BAIL
 { 
Unôy
.
CuºítTe°Faûed
 = 1; 
	`UNITY_OUTPUT_CHAR
('\n'); 
	`l⁄gjmp
(Unôy.
Ab‹tFøme
, 1); }

	)

251 c⁄° * 
UnôySåEx≥˘ed
;

252 c⁄° * 
UnôySåWas
;

253 
UnôyTe°Resu…sFaûBegö
(
UNITY_LINE_TYPE
 
löeNumbî
);

254 
UnôyPrötNumbîByStyÀ
(c⁄° 
_US32
 
numbî
, c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
);

255 
UnôyAddMsgIfS≥cifõd
(const *);

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_output_Spy.h

1 #i‚de‡
D_unôy_ouçut_Spy_H


2 
	#D_unôy_ouçut_Spy_H


	)

4 
UnôyOuçutCh¨Spy_Cª©e
(
s
);

5 
UnôyOuçutCh¨Spy_De°roy
();

6 
UnôyOuçutCh¨Spy_OuçutCh¨
(
c
);

7 c⁄° * 
UnôyOuçutCh¨Spy_Gë
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity.c

1 
	~"unôy.h
"

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	#UNITY_FAIL_AND_BAIL
 { 
Unôy
.
CuºítTe°Faûed
 = 1; 
	`UNITY_OUTPUT_CHAR
('\n'); 
	`l⁄gjmp
(Unôy.
Ab‹tFøme
, 1); }

	)

6 
	#UNITY_IGNORE_AND_BAIL
 { 
Unôy
.
CuºítTe°Ign‹ed
 = 1; 
	`UNITY_OUTPUT_CHAR
('\n'); 
	`l⁄gjmp
(Unôy.
Ab‹tFøme
, 1); }

	)

8 
_Unôy
 
	gUnôy
 = { 0 };

10 c⁄° * 
	gUnôySåEx≥˘ed
 = "Expected ";

11 c⁄° * 
	gUnôySåWas
 = " Was ";

12 c⁄° * 
	gUnôySåTo
 = " To ";

13 c⁄° * 
	gUnôySåEÀmít
 = " Element ";

14 c⁄° * 
	gUnôySåMem‹y
 = " Memory Mismatch.";

15 c⁄° * 
	gUnôySåDñè
 = " Values Not Within Delta ";

16 c⁄° * 
	gUnôySåPoöéess
= " You Asked Me To Compare Nothing, Which Was Pointless.";

17 c⁄° * 
	gUnôySåS∑˚r
 = ". ";

19 
UnôyAddMsgIfS≥cifõd
(c⁄° * 
msg
);

25 
	$UnôyPröt
(c⁄° * 
°rög
)

27 * 
pch
 = (*)
°rög
;

29 i‡(
pch
 !
NULL
)

31 *
pch
)

33 
	`UNITY_OUTPUT_CHAR
(*
pch
);

34 
pch
++;

37 
	}
}

39 
	$UnôyPrötNumbîByStyÀ
(c⁄° 
_US32
 
numbî
, c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

41 
°yÀ
)

43 
UNITY_DISPLAY_STYLE_HEX8
: 
	`UnôyPrötNumbîHex
((
_UU32
)
numbî
, 2); ;

44 
UNITY_DISPLAY_STYLE_HEX16
: 
	`UnôyPrötNumbîHex
((
_UU32
)
numbî
, 4); ;

45 
UNITY_DISPLAY_STYLE_HEX32
: 
	`UnôyPrötNumbîHex
((
_UU32
)
numbî
, 8); ;

46 
UNITY_DISPLAY_STYLE_UINT
: 
	`UnôyPrötNumbîUnsig√d
((
_UU32
)
numbî
); ;

47 : 
	`UnôyPrötNumbî
(
numbî
); ;

49 
	}
}

52 
	$UnôyPrötNumbî
(c⁄° 
_US32
 
numbî_to_¥öt
)

54 
_US32
 
divis‹
 = 1;

55 
_US32
 
√xt_divis‹
;

56 
_US32
 
numbî
 = 
numbî_to_¥öt
;

58 i‡(
numbî
 < 0)

60 
	`UNITY_OUTPUT_CHAR
('-');

61 
numbî
 = -number;

65 
numbî
 / 
divis‹
 > 9)

67 
√xt_divis‹
 = 
divis‹
 * 10;

68 i‡(
√xt_divis‹
 > 
divis‹
)

69 
divis‹
 = 
√xt_divis‹
;

77 
	`UNITY_OUTPUT_CHAR
(()('0' + (
numbî
 / 
divis‹
 % 10)));

78 
divis‹
 /= 10;

80 
divis‹
 > 0);

81 
	}
}

84 
	$UnôyPrötNumbîUnsig√d
(c⁄° 
_UU32
 
numbî
)

86 
_UU32
 
divis‹
 = 1;

87 
_UU32
 
√xt_divis‹
;

90 
numbî
 / 
divis‹
 > 9)

92 
√xt_divis‹
 = 
divis‹
 * 10;

93 i‡(
√xt_divis‹
 > 
divis‹
)

94 
divis‹
 = 
√xt_divis‹
;

102 
	`UNITY_OUTPUT_CHAR
(()('0' + (
numbî
 / 
divis‹
 % 10)));

103 
divis‹
 /= 10;

105 
divis‹
 > 0);

106 
	}
}

108 
	$UnôyPrötNumbîHex
(c⁄° 
_UU32
 
numbî
, c⁄° 
nibbÀs_to_¥öt
)

110 
_UU32
 
nibbÀ
;

111 
nibbÀs
 = 
nibbÀs_to_¥öt
;

112 
	`UnôyPröt
("0x");

114 
nibbÀs
 > 0)

116 
nibbÀ
 = (
numbî
 >> (--
nibbÀs
 << 2)) & 0x0000000F;

117 i‡(
nibbÀ
 <= 9)

119 
	`UNITY_OUTPUT_CHAR
(()('0' + 
nibbÀ
));

123 
	`UNITY_OUTPUT_CHAR
(()('A' - 10 + 
nibbÀ
));

126 
	}
}

128 
	$UnôyPrötMask
(c⁄° 
_UU32
 
mask
, c⁄° _UU32 
numbî
)

130 
_UU32
 
bô
 = 0x80000000;

131 
_US32
 
i
;

133 
i
 = 0; i < 32; i++)

135 i‡(
bô
 & 
mask
)

137 i‡(
bô
 & 
numbî
)

139 
	`UNITY_OUTPUT_CHAR
('1');

143 
	`UNITY_OUTPUT_CHAR
('0');

148 
	`UNITY_OUTPUT_CHAR
('X');

150 
bô
 = bit >> 1;

152 
	}
}

154 #ifde‡
UNITY_FLOAT_VERBOSE


155 
	$UnôyPrötFlﬂt
(
_UF
 
numbî
)

157 
TempBuf„r
[32];

158 
	`•rötf
(
TempBuf„r
, "%.6f", 
numbî
);

159 
	`UnôyPröt
(
TempBuf„r
);

160 
	}
}

163 
	$UnôyIndít
()

165 
	`UnôyPröt
(" ");

166 
	}
}

168 
	$UnôyNewLöe
()

170 
	`UNITY_OUTPUT_CHAR
('\n');

171 
	}
}

173 
	$UnôyQuŸe
()

175 
	`UNITY_OUTPUT_CHAR
('\'');

176 
	}
}

178 
	$UnôyTe°Resu…sBegö
(c⁄° * 
fûe
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

180 i‡(!
Unôy
.
Vîbo£
)

182 
	`UnôyNewLöe
();

183 
	`UnôyPröt
(
Unôy
.
CuºítTe°Name
);

184 
	`UnôyNewLöe
();

185 
	`UnôyIndít
();

187 
	`UnôyPröt
(
fûe
);

188 
	`UnôyPröt
(":");

189 
	`UnôyPrötNumbî
(
löe
);

190 
	`UnôyPröt
(": ");

191 
	}
}

193 
	$UnôyTe°Resu…sFaûBegö
(c⁄° 
UNITY_LINE_TYPE
 
löe
)

195 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

196 
	`UnôyPröt
("FAIL\n ");

197 
	}
}

200 
	$UnôyC⁄˛udeTe°
()

202 i‡(
Unôy
.
CuºítTe°Ign‹ed
)

204 
Unôy
.
Te°Ign‹es
++;

206 i‡(!
Unôy
.
CuºítTe°Faûed
)

209 
	`UnôyPröt
("....PASS\n");

213 
Unôy
.
Te°Faûuªs
++;

216 
Unôy
.
CuºítTe°Faûed
 = 0;

217 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

218 
	}
}

220 
	$UnôyAddMsgIfS≥cifõd
(c⁄° * 
msg
)

222 i‡(
msg
)

225 
	`UnôyNewLöe
();

226 
	`UnôyIndít
();

227 
	`UnôyPröt
(
msg
);

229 
	}
}

235 
	$UnôyAs£πBôs
(c⁄° 
_US32
 
mask
,

236 c⁄° 
_US32
 
ex≥˘ed
,

237 c⁄° 
_US32
 
a˘uÆ
,

238 c⁄° * 
msg
,

239 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

241 i‡((
mask
 & 
ex≥˘ed
Ë!(mask & 
a˘uÆ
))

243 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

244 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

245 
	`UnôyPrötMask
(
mask
, 
ex≥˘ed
);

246 
	`UnôyPröt
(
UnôySåWas
);

247 
	`UnôyPrötMask
(
mask
, 
a˘uÆ
);

248 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

249 
UNITY_FAIL_AND_BAIL
;

251 
	}
}

253 
	$UnôyAs£πEquÆNumbî
(c⁄° 
_US32
 
ex≥˘ed
,

254 c⁄° 
_US32
 
a˘uÆ
,

255 c⁄° * 
msg
,

256 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

257 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

259 i‡(
ex≥˘ed
 !
a˘uÆ
)

261 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

262 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

263 
	`UnôyPrötNumbîByStyÀ
(
ex≥˘ed
, 
°yÀ
);

264 
	`UnôyPröt
(
UnôySåWas
);

265 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ
, 
°yÀ
);

266 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

267 
UNITY_FAIL_AND_BAIL
;

269 
	}
}

271 
	$UnôyAs£πEquÆI¡Aºay
(c⁄° * 
ex≥˘ed
,

272 c⁄° * 
a˘uÆ
,

273 c⁄° 
_UU32
 
num_ñemíts
,

274 c⁄° * 
msg
,

275 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

276 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

278 
_UU32
 
ñemíts
 = 
num_ñemíts
;

279 c⁄° 
_US32
* 
±r_exp32
 = (_US32*)
ex≥˘ed
;

280 c⁄° 
_US16
* 
±r_exp16
 = (_US16*)
ex≥˘ed
;

281 c⁄° 
_US8
* 
±r_exp8
 = (_US8*)
ex≥˘ed
;

282 c⁄° 
_US32
* 
±r_a˘32
 = (_US32*)
a˘uÆ
;

283 c⁄° 
_US16
* 
±r_a˘16
 = (_US16*)
a˘uÆ
;

284 c⁄° 
_US8
* 
±r_a˘8
 = (_US8*)
a˘uÆ
;

286 i‡(
ñemíts
 == 0)

288 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

289 
	`UnôyPröt
(
UnôySåPoöéess
);

290 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

291 
UNITY_FAIL_AND_BAIL
;

294 
°yÀ
)

296 
UNITY_DISPLAY_STYLE_HEX8
:

297 
ñemíts
--)

299 i‡(*
±r_exp8
++ !*
±r_a˘8
++)

301 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

302 
	`UnôyPröt
(
UnôySåEÀmít
);

303 
	`UnôyPrötNumbîByStyÀ
((
num_ñemíts
 - 
ñemíts
 - 1), 
UNITY_DISPLAY_STYLE_UINT
);

304 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

305 
	`UnôyPrötNumbîByStyÀ
(*--
±r_exp8
, 
°yÀ
);

306 
	`UnôyPröt
(
UnôySåWas
);

307 
	`UnôyPrötNumbîByStyÀ
(*--
±r_a˘8
, 
°yÀ
);

308 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

309 
UNITY_FAIL_AND_BAIL
;

313 
UNITY_DISPLAY_STYLE_HEX16
:

314 
ñemíts
--)

316 i‡(*
±r_exp16
++ !*
±r_a˘16
++)

318 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

319 
	`UnôyPröt
(
UnôySåEÀmít
);

320 
	`UnôyPrötNumbîByStyÀ
((
num_ñemíts
 - 
ñemíts
 - 1), 
UNITY_DISPLAY_STYLE_UINT
);

321 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

322 
	`UnôyPrötNumbîByStyÀ
(*--
±r_exp16
, 
°yÀ
);

323 
	`UnôyPröt
(
UnôySåWas
);

324 
	`UnôyPrötNumbîByStyÀ
(*--
±r_a˘16
, 
°yÀ
);

325 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

326 
UNITY_FAIL_AND_BAIL
;

331 
ñemíts
--)

333 i‡(*
±r_exp32
++ !*
±r_a˘32
++)

335 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

336 
	`UnôyPröt
(
UnôySåEÀmít
);

337 
	`UnôyPrötNumbîByStyÀ
((
num_ñemíts
 - 
ñemíts
 - 1), 
UNITY_DISPLAY_STYLE_UINT
);

338 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

339 
	`UnôyPrötNumbîByStyÀ
(*--
±r_exp32
, 
°yÀ
);

340 
	`UnôyPröt
(
UnôySåWas
);

341 
	`UnôyPrötNumbîByStyÀ
(*--
±r_a˘32
, 
°yÀ
);

342 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

343 
UNITY_FAIL_AND_BAIL
;

348 
	}
}

350 #i‚de‡
UNITY_EXCLUDE_FLOAT


351 
	$UnôyAs£πEquÆFlﬂtAºay
(c⁄° 
_UF
* 
ex≥˘ed
,

352 c⁄° 
_UF
* 
a˘uÆ
,

353 c⁄° 
_UU32
 
num_ñemíts
,

354 c⁄° * 
msg
,

355 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

357 
_UU32
 
ñemíts
 = 
num_ñemíts
;

358 c⁄° 
_UF
* 
±r_ex≥˘ed
 = 
ex≥˘ed
;

359 c⁄° 
_UF
* 
±r_a˘uÆ
 = 
a˘uÆ
;

360 
_UF
 
diff
, 
tﬁ
;

362 i‡(
ñemíts
 == 0)

364 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

365 
	`UnôyPröt
(
UnôySåPoöéess
);

366 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

367 
UNITY_FAIL_AND_BAIL
;

370 
ñemíts
--)

372 
diff
 = *
±r_ex≥˘ed
 - *
±r_a˘uÆ
;

373 i‡(
diff
 < 0.0)

374 
diff
 = 0.0 - diff;

375 
tﬁ
 = 
UNITY_FLOAT_PRECISION
 * *
±r_ex≥˘ed
;

376 i‡(
tﬁ
 < 0.0)

377 
tﬁ
 = 0.0 -Åol;

378 i‡(
diff
 > 
tﬁ
)

380 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

381 
	`UnôyPröt
(
UnôySåEÀmít
);

382 
	`UnôyPrötNumbîByStyÀ
((
num_ñemíts
 - 
ñemíts
 - 1), 
UNITY_DISPLAY_STYLE_UINT
);

383 #ifde‡
UNITY_FLOAT_VERBOSE


384 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

385 
	`UnôyPrötFlﬂt
(*
±r_ex≥˘ed
);

386 
	`UnôyPröt
(
UnôySåWas
);

387 
	`UnôyPrötFlﬂt
(*
±r_a˘uÆ
);

389 
	`UnôyPröt
(
UnôySåDñè
);

391 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

392 
UNITY_FAIL_AND_BAIL
;

394 
±r_ex≥˘ed
++;

395 
±r_a˘uÆ
++;

397 
	}
}

399 
	$UnôyAs£πFlﬂtsWôhö
(c⁄° 
_UF
 
dñè
,

400 c⁄° 
_UF
 
ex≥˘ed
,

401 c⁄° 
_UF
 
a˘uÆ
,

402 c⁄° * 
msg
,

403 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

405 
_UF
 
diff
 = 
a˘uÆ
 - 
ex≥˘ed
;

406 
_UF
 
pos_dñè
 = 
dñè
;

408 i‡(
diff
 < 0)

410 
diff
 = 0.0f - diff;

412 i‡(
pos_dñè
 < 0)

414 
pos_dñè
 = 0.0f -Öos_delta;

417 i‡(
pos_dñè
 < 
diff
)

419 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

420 #ifde‡
UNITY_FLOAT_VERBOSE


421 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

422 
	`UnôyPrötFlﬂt
(
ex≥˘ed
);

423 
	`UnôyPröt
(
UnôySåWas
);

424 
	`UnôyPrötFlﬂt
(
a˘uÆ
);

426 
	`UnôyPröt
(
UnôySåDñè
);

428 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

429 
UNITY_FAIL_AND_BAIL
;

431 
	}
}

434 
	$UnôyAs£πNumbîsWôhö
–c⁄° 
_US32
 
dñè
,

435 c⁄° 
_US32
 
ex≥˘ed
,

436 c⁄° 
_US32
 
a˘uÆ
,

437 c⁄° * 
msg
,

438 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
,

439 c⁄° 
UNITY_DISPLAY_STYLE_T
 
°yÀ
)

441 i‡(
°yÀ
 =
UNITY_DISPLAY_STYLE_INT
)

443 i‡(
a˘uÆ
 > 
ex≥˘ed
)

444 
Unôy
.
CuºítTe°Faûed
 = ((
a˘uÆ
 - 
ex≥˘ed
Ë> 
dñè
);

446 
Unôy
.
CuºítTe°Faûed
 = ((
ex≥˘ed
 - 
a˘uÆ
Ë> 
dñè
);

450 i‡((
_UU32
)
a˘uÆ
 > (_UU32)
ex≥˘ed
)

451 
Unôy
.
CuºítTe°Faûed
 = ((
_UU32
)(
a˘uÆ
 - 
ex≥˘ed
Ë> (_UU32)
dñè
);

453 
Unôy
.
CuºítTe°Faûed
 = ((
_UU32
)(
ex≥˘ed
 - 
a˘uÆ
Ë> (_UU32)
dñè
);

456 i‡(
Unôy
.
CuºítTe°Faûed
)

458 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

459 
	`UnôyPröt
(
UnôySåDñè
);

460 
	`UnôyPrötNumbîByStyÀ
(
dñè
, 
°yÀ
);

461 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

462 
	`UnôyPrötNumbîByStyÀ
(
ex≥˘ed
, 
°yÀ
);

463 
	`UnôyPröt
(
UnôySåWas
);

464 
	`UnôyPrötNumbîByStyÀ
(
a˘uÆ
, 
°yÀ
);

465 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

466 
UNITY_FAIL_AND_BAIL
;

468 
	}
}

470 
	$UnôyAs£πEquÆSåög
(c⁄° * 
ex≥˘ed
,

471 c⁄° * 
a˘uÆ
,

472 c⁄° * 
msg
,

473 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

475 
_UU32
 
i
;

478 i‡(
ex≥˘ed
 && 
a˘uÆ
)

480 
i
 = 0; 
ex≥˘ed
[i] || 
a˘uÆ
[i]; i++)

482 i‡(
ex≥˘ed
[
i
] !
a˘uÆ
[i])

484 
Unôy
.
CuºítTe°Faûed
 = 1;

491 i‡(
ex≥˘ed
 !
a˘uÆ
)

493 
Unôy
.
CuºítTe°Faûed
 = 1;

497 i‡(
Unôy
.
CuºítTe°Faûed
)

499 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

500 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

501 
	`UNITY_OUTPUT_CHAR
('\'');

502 
	`UnôyPröt
(
ex≥˘ed
);

503 
	`UNITY_OUTPUT_CHAR
('\'');

504 
	`UnôyPröt
(
UnôySåWas
);

505 
	`UNITY_OUTPUT_CHAR
('\'');

506 
	`UnôyPröt
(
a˘uÆ
);

507 
	`UNITY_OUTPUT_CHAR
('\'');

508 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

509 
UNITY_FAIL_AND_BAIL
;

511 
	}
}

513 
	$UnôyAs£πEquÆMem‹y
–c⁄° * 
ex≥˘ed
,

514 c⁄° * 
a˘uÆ
,

515 
_UU32
 
Àngth
,

516 
_UU32
 
num_ñemíts
,

517 c⁄° * 
msg
,

518 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

520 * 
ex≥˘ed_±r
 = (*)
ex≥˘ed
;

521 * 
a˘uÆ_±r
 = (*)
a˘uÆ
;

522 
_UU32
 
ñemíts
 = 
num_ñemíts
;

523 i‡((
ñemíts
 =0Ë|| (
Àngth
 == 0))

525 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

526 
	`UnôyPröt
(
UnôySåPoöéess
);

527 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

528 
UNITY_FAIL_AND_BAIL
;

532 i‡(
ex≥˘ed_±r
 && 
a˘uÆ_±r
)

534 
ñemíts
--)

536 i‡(
	`memcmp
((c⁄° *)
ex≥˘ed_±r
, (c⁄° *)
a˘uÆ_±r
, 
Àngth
) != 0)

538 
Unôy
.
CuºítTe°Faûed
 = 1;

541 
ex≥˘ed_±r
 +
Àngth
;

542 
a˘uÆ_±r
 +
Àngth
;

547 i‡(
ex≥˘ed_±r
 !
a˘uÆ_±r
)

549 
Unôy
.
CuºítTe°Faûed
 = 1;

553 i‡(
Unôy
.
CuºítTe°Faûed
)

555 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

556 i‡(
num_ñemíts
 > 1)

558 
	`UnôyPröt
(
UnôySåEÀmít
);

559 
	`UnôyPrötNumbîByStyÀ
((
num_ñemíts
 - 
ñemíts
 - 1), 
UNITY_DISPLAY_STYLE_UINT
);

561 
	`UnôyPröt
(
UnôySåMem‹y
);

562 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

563 
UNITY_FAIL_AND_BAIL
;

565 
	}
}

571 
	$UnôyFaû
(c⁄° * 
msg
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

573 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

574 
	`UnôyPröt
(" FAIL\n ");

575 i‡(
msg
 !
NULL
)

578 
	`UnôyPröt
(
msg
);

580 
UNITY_FAIL_AND_BAIL
;

581 
	}
}

583 
	$UnôyIgn‹e
(c⁄° * 
msg
, c⁄° 
UNITY_LINE_TYPE
 
löe
)

585 
	`UnôyTe°Resu…sBegö
(
Unôy
.
Te°Fûe
, 
löe
);

586 
	`UnôyPröt
("IGNORE");

587 i‡(
msg
 !
NULL
)

589 
	`UNITY_OUTPUT_CHAR
(':');

590 
	`UnôyPröt
(
msg
);

592 
UNITY_IGNORE_AND_BAIL
;

593 
	}
}

595 
	$UnôyBegö
()

597 
Unôy
.
NumbîOfTe°s
 = 0;

598 
	}
}

600 
	$UnôyEnd
()

602 
	`UnôyPröt
("-----------------------\n");

603 
	`UnôyPrötNumbî
(
Unôy
.
NumbîOfTe°s
);

604 
	`UnôyPröt
(" Tests ");

605 
	`UnôyPrötNumbî
(
Unôy
.
Te°Faûuªs
);

606 
	`UnôyPröt
(" Failures ");

607 
	`UnôyPrötNumbî
(
Unôy
.
Te°Ign‹es
);

608 
	`UnôyPröt
(" Ignored\n");

609 i‡(
Unôy
.
Te°Faûuªs
 == 0U)

611 
	`UnôyPröt
("OK\n");

615 
	`UnôyPröt
("FAIL\n");

617 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity_fixture.c

2 
	~"unôy_fixtuª.h
"

3 
	~"unôy_öã∫Æs.h
"

4 
	~<°rög.h
>

7 (*
ouçutCh¨
)(Ë
putch¨
;

9 
vîbo£
 = 0;

11 
	$™noun˚Te°Run
(
runNumbî
)

13 
	`UnôyPröt
("UnityÅestÑun ");

14 
	`UnôyPrötNumbî
(
runNumbî
+1);

15 
	`UnôyPröt
(" of ");

16 
	`UnôyPrötNumbî
(
Unôy
.
RïótCou¡
);

17 
	`UnôyPröt
("\n");

18 
	}
}

20 
UnôyMaö
(
ac
, c⁄° * 
av
[], (*
runAŒTe°s
)())

22 
ªsu…
 = 
	`UnôyGëComm™dLöeO±i⁄s
(
ac
, 
av
);

23 
r
;

24 i‡(
ªsu…
 != 0)

25  
ªsu…
;

27 
r
 = 0;Ñ < 
Unôy
.
RïótCou¡
;Ñ++)

29 
	`™noun˚Te°Run
(
r
);

30 
	`UnôyBegö
();

31 
	`runAŒTe°s
();

32 
	`UnôyPröt
("\n");

33 
	`UnôyEnd
();

36  
	`UnôyFaûuªCou¡
();

37 
	}
}

39 
	$£À˘ed
(c⁄° * 
fûãr
, c⁄° * 
«me
)

41 i‡(
fûãr
 == 0)

43  
	`°r°r
(
«me
, 
fûãr
) ? 1 : 0;

44 
	}
}

46 
	$ã°Sñe˘ed
(c⁄° * 
ã°
)

48  
	`£À˘ed
(
Unôy
.
NameFûãr
, 
ã°
);

49 
	}
}

51 
	$groupSñe˘ed
(c⁄° * 
group
)

53  
	`£À˘ed
(
Unôy
.
GroupFûãr
, 
group
);

54 
	}
}

56 
	$runTe°Ca£
()

59 
	}
}

61 
	$UnôyTe°Ru¬î
(
unôyfun˘i⁄
* 
£tup
,

62 
unôyfun˘i⁄
* 
ã°Body
,

63 
unôyfun˘i⁄
* 
ã¨down
,

64 c⁄° * 
¥öèbÀName
,

65 c⁄° * 
group
,

66 c⁄° * 
«me
,

67 c⁄° * 
fûe
, 
löe
)

69 i‡(
	`ã°Sñe˘ed
(
«me
Ë&& 
	`groupSñe˘ed
(
group
))

71 
Unôy
.
CuºítTe°Faûed
 = 0;

72 
Unôy
.
Te°Fûe
 = 
fûe
;

73 
Unôy
.
CuºítTe°Name
 = 
¥öèbÀName
;

74 
Unôy
.
CuºítTe°LöeNumbî
 = 
löe
;

75 i‡(! 
Unôy
.
Vîbo£
)

76 
	`UNITY_OUTPUT_CHAR
('.');

78 
	`UnôyPröt
(
¥öèbÀName
);

80 
Unôy
.
NumbîOfTe°s
++;

81 
	`UnôyMÆloc_SèπTe°
();

82 
	`UnôyPoöãr_Inô
();

84 
	`runTe°Ca£
();

85 i‡(
	`TEST_PROTECT
())

87 
	`£tup
();

88 
	`ã°Body
();

90 i‡(
	`TEST_PROTECT
())

92 
	`ã¨down
();

94 i‡(
	`TEST_PROTECT
())

96 
	`UnôyPoöãr_UndoAŒSës
();

97 i‡(!
Unôy
.
CuºítTe°Faûed
)

98 
	`UnôyMÆloc_EndTe°
();

99 
	`UnôyC⁄˛udeFixtuªTe°
();

106 
	}
}

112 
	#MALLOC_DONT_FAIL
 -1

	)

113 
	gmÆloc_cou¡
;

114 
	gmÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

116 
	$UnôyMÆloc_SèπTe°
()

118 
mÆloc_cou¡
 = 0;

119 
mÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

121 
	}
}

123 
	$UnôyMÆloc_EndTe°
()

125 
mÆloc_Áû_cou¡down
 = 
MALLOC_DONT_FAIL
;

126 i‡(
mÆloc_cou¡
 != 0)

128 
Unôy
.
CuºítTe°Faûed
 = 1;

129 
	`UnôyTe°Resu…sFaûBegö
(
Unôy
.
CuºítTe°LöeNumbî
);

130 
	`UnôyPröt
("ThisÅestÜeaks!\n");

132 
	}
}

134 
	$UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(
cou¡down
)

136 
mÆloc_Áû_cou¡down
 = 
cou¡down
;

137 
	}
}

139 #ifde‡
mÆloc


140 #unde‡
mÆloc


143 #ifde‡
‰ì


144 #unde‡
‰ì


147 
	~<°dlib.h
>

148 
	~<°rög.h
>

150 
	sGu¨dByãs


152 
	msize
;

153 
	mgu¨d
[()];

154 } 
	tGu¨d
;

157 c⁄° * 
	gíd
 = "END";

159 * 
	$unôy_mÆloc
(
size_t
 
size
)

161 * 
mem
;

162 
Gu¨d
* 
gu¨d
;

164 i‡(
mÆloc_Áû_cou¡down
 !
MALLOC_DONT_FAIL
)

166 i‡(
mÆloc_Áû_cou¡down
 == 0)

168 
mÆloc_Áû_cou¡down
--;

171 
mÆloc_cou¡
++;

173 
gu¨d
 = (
Gu¨d
*)
	`mÆloc
(
size
 + (Guard) + 4);

174 
gu¨d
->
size
 = size;

175 
mem
 = (*)&(
gu¨d
[1]);

176 
	`mem˝y
(&
mem
[
size
], 
íd
, 
	`°æí
(end) + 1);

178  (*)
mem
;

179 
	}
}

181 
	$unôy_‰ì
(* 
mem
)

183 
Gu¨d
* 
gu¨d
 = (Gu¨d*)
mem
;

184 * 
memAsCh¨
 = (*)
mem
;

185 
gu¨d
--;

186 i‡(
	`°rcmp
(&
memAsCh¨
[
gu¨d
->
size
], 
íd
) != 0)

188 
Unôy
.
CuºítTe°Faûed
 = 1;

189 
	`UnôyTe°Resu…sFaûBegö
(
Unôy
.
CuºítTe°LöeNumbî
);

190 
	`UnôyPröt
("Buffer overrun detected during free()");

194 
mÆloc_cou¡
--;

195 
	`‰ì
((*)
gu¨d
);

196 
	}
}

198 * 
	$unôy_ˇŒoc
(
size_t
 
num
, size_à
size
)

200 * 
mem
 = 
	`unôy_mÆloc
(
num
 * 
size
);

201 
	`mem£t
(
mem
, 0, 
num
*
size
);

202  
mem
;

203 
	}
}

205 * 
	$unôy_ªÆloc
(* 
ﬁdMem
, 
size_t
 
size
)

207 
Gu¨d
* 
gu¨d
 = (Gu¨d*)
ﬁdMem
;

208 * 
memAsCh¨
 = (*)
ﬁdMem
;

209 * 
√wMem
;

211 i‡(
ﬁdMem
 == 0)

212  
	`unôy_mÆloc
(
size
);

214 
gu¨d
--;

215 i‡(
	`°rcmp
(&
memAsCh¨
[
gu¨d
->
size
], 
íd
) != 0)

217 
Unôy
.
CuºítTe°Faûed
 = 1;

218 
	`UnôyTe°Resu…sFaûBegö
(
Unôy
.
CuºítTe°LöeNumbî
);

219 
	`UnôyPröt
("Buffer overrun detected duringÑealloc()");

223 i‡(
size
 == 0)

225 
	`unôy_‰ì
(
ﬁdMem
);

229 i‡(
gu¨d
->
size
 >= size)

230  
ﬁdMem
;

232 
√wMem
 = 
	`unôy_mÆloc
(
size
);

233 
	`mem˝y
(
√wMem
, 
ﬁdMem
, 
size
);

234 
	`unôy_‰ì
(
ﬁdMem
);

235  
√wMem
;

236 
	}
}

241 
	s_PoöãrPaú


243 
_PoöãrPaú
 * 
	m√xt
;

244 ** 
	mpoöãr
;

245 * 
	mﬁd_vÆue
;

246 } 
	tPoöãrPaú
;

248 íum {
	mMAX_POINTERS
=50};

249 
PoöãrPaú
 
	gpoöãr_°‹e
[
MAX_POINTERS
];

250 
	gpoöãr_ödex
 = 0;

252 
	$UnôyPoöãr_Inô
()

254 
poöãr_ödex
 = 0;

255 
	}
}

257 
	$UnôyPoöãr_Së
(** 
poöãr
, * 
√wVÆue
)

259 i‡(
poöãr_ödex
 >
MAX_POINTERS
)

260 
	`TEST_FAIL
("Too manyÖointers set");

262 
poöãr_°‹e
[
poöãr_ödex
].
poöãr
 =Öointer;

263 
poöãr_°‹e
[
poöãr_ödex
].
ﬁd_vÆue
 = *
poöãr
;

264 *
poöãr
 = 
√wVÆue
;

265 
poöãr_ödex
++;

266 
	}
}

268 
	$UnôyPoöãr_UndoAŒSës
()

270 
poöãr_ödex
 > 0)

272 
poöãr_ödex
--;

273 *(
poöãr_°‹e
[
poöãr_ödex
].
poöãr
) =

274 
poöãr_°‹e
[
poöãr_ödex
].
ﬁd_vÆue
;

277 
	}
}

280 
	$UnôyAs£πEquÆPoöãr
(c⁄° * 
ex≥˘ed
,

281 c⁄° * 
a˘uÆ
,

282 c⁄° * 
msg
,

283 c⁄° 
UNITY_LINE_TYPE
 
löeNumbî
)

285 i‡(
ex≥˘ed
 !
a˘uÆ
)

287 
	`UnôyTe°Resu…sFaûBegö
(
löeNumbî
);

288 
	`UnôyPröt
(
UnôySåEx≥˘ed
);

289 
	`UnôyPrötNumbîByStyÀ
(()
ex≥˘ed
, 
UNITY_DISPLAY_STYLE_HEX32
);

290 
	`UnôyPröt
(
UnôySåWas
);

291 
	`UnôyPrötNumbîByStyÀ
(()
a˘uÆ
, 
UNITY_DISPLAY_STYLE_HEX32
);

292 
	`UnôyAddMsgIfS≥cifõd
(
msg
);

293 
UNITY_FAIL_AND_BAIL
;

295 
	}
}

297 
	$UnôyFaûuªCou¡
()

299  
Unôy
.
Te°Faûuªs
;

300 
	}
}

302 
	$UnôyGëComm™dLöeO±i⁄s
(
¨gc
, c⁄° * 
¨gv
[])

304 
i
;

305 
Unôy
.
Vîbo£
 = 0;

306 
Unôy
.
GroupFûãr
 = 0;

307 
Unôy
.
NameFûãr
 = 0;

308 
Unôy
.
RïótCou¡
 = 1;

310 i‡(
¨gc
 == 1)

313 
i
 = 1; i < 
¨gc
; )

315 i‡(
	`°rcmp
(
¨gv
[
i
], "-v") == 0)

317 
Unôy
.
Vîbo£
 = 1;

318 
i
++;

320 i‡(
	`°rcmp
(
¨gv
[
i
], "-g") == 0)

322 
i
++;

323 i‡(
i
 >
¨gc
)

325 
Unôy
.
GroupFûãr
 = 
¨gv
[
i
];

326 
i
++;

328 i‡(
	`°rcmp
(
¨gv
[
i
], "-n") == 0)

330 
i
++;

331 i‡(
i
 >
¨gc
)

333 
Unôy
.
NameFûãr
 = 
¨gv
[
i
];

334 
i
++;

336 i‡(
	`°rcmp
(
¨gv
[
i
], "-r") == 0)

338 
Unôy
.
RïótCou¡
 = 2;

339 
i
++;

340 i‡(
i
 < 
¨gc
)

342 i‡(*(
¨gv
[
i
]) >= '0' && *(argv[i]) <= '9')

344 
Unôy
.
RïótCou¡
 = 
	`©oi
(
¨gv
[
i
]);

345 
i
++;

351 
	}
}

353 
	$UnôyC⁄˛udeFixtuªTe°
()

355 i‡(
Unôy
.
CuºítTe°Ign‹ed
)

357 
Unôy
.
Te°Ign‹es
++;

359 i‡(!
Unôy
.
CuºítTe°Faûed
)

361 i‡(
Unôy
.
Vîbo£
)

362 
	`UnôyPröt
(" PASS\n");

364 i‡(
Unôy
.
CuºítTe°Faûed
)

366 
Unôy
.
Te°Faûuªs
++;

369 
Unôy
.
CuºítTe°Faûed
 = 0;

370 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

371 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity_output_Spy.c

9 
	~"unôy_ouçut_Spy.h
"

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	gsize
;

14 
	gcou¡
;

15 * 
	gbuf„r
;

17 
	$UnôyOuçutCh¨Spy_Cª©e
(
s
)

19 
size
 = 
s
;

20 
cou¡
 = 0;

21 
buf„r
 = 
	`mÆloc
(
size
);

22 
	`mem£t
(
buf„r
, 0, 
size
);

23 
	}
}

25 
	$UnôyOuçutCh¨Spy_De°roy
()

27 
size
 = 0;

28 
	`‰ì
(
buf„r
);

29 
	}
}

31 
	$UnôyOuçutCh¨Spy_OuçutCh¨
(
c
)

33 i‡(
cou¡
 < (
size
-1))

34 
buf„r
[
cou¡
++] = 
c
;

35  
c
;

36 
	}
}

38 c⁄° * 
	$UnôyOuçutCh¨Spy_Gë
()

40  
buf„r
;

41 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\testMain\AllTests.c

1 
	~"unôy_fixtuª.h
"

3 
	$runAŒTe°s
()

5 
	`RUN_TEST_GROUP
(
UnôyFixtuª
);

6 
	`RUN_TEST_GROUP
(
UnôyOuçut
);

7 
	`RUN_TEST_GROUP
(
UnôyComm™dO±i⁄s
);

8 
	`RUN_TEST_GROUP
(
LókDëe˘i⁄
)

9 
	}
}

11 
	$maö
(
ac
, c⁄° * 
av
[])

13  
	`UnôyMaö
(
ac
, 
av
, 
runAŒTe°s
);

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity.c

1 
	#UNITY_ENABLE_EXTERNAL_ASSERTIONS


	)

3 
	~<£tjmp.h
>

4 
	~"unôy.h
"

5 
	~"unôy_fixtuª.h
"

7 
	#EXPECT_ABORT_BEGIN
 \

9 i‡(
	`TEST_PROTECT
()) \

10 {

	)

12 
	#EXPECT_ABORT_END
 \

14 }

	)

16 
	#VERIFY_FAILURE_WAS_CAUGHT
 \

17 
EXPECT_ABORT_BEGIN
 \

18 
	`TEST_ASSERT_MESSAGE
((1u =
Áûed
), "<---- [ This Test Should Have Failed But Did Not ]"); \

19 
EXPECT_ABORT_END


	)

21 
	$£tUp
()

23 
	}
}

25 
	$ã¨Down
()

27 
	}
}

29 
	$ã°True
()

31 
	`TEST_ASSERT
(1);

33 
	`TEST_ASSERT_TRUE
(1);

34 
	}
}

36 
	$ã°FÆ£
()

38 
	`TEST_ASSERT_FALSE
(0);

40 
	`TEST_ASSERT_UNLESS
(0);

41 
	}
}

43 
	$ã°PªviousPass
()

45 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

46 
	}
}

48 
	$ã°NŸV™ûœ
()

50 
Áûed
;

52 
EXPECT_ABORT_BEGIN


53 
	`TEST_ASSERT
(0);

54 
EXPECT_ABORT_END


56 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

57 
Unôy
.
CuºítTe°Faûed
 = 0;

59 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

60 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

61 
	}
}

63 
	$ã°NŸTrue
()

65 
Áûed
;

67 
EXPECT_ABORT_BEGIN


68 
	`TEST_ASSERT_TRUE
(0);

69 
EXPECT_ABORT_END


71 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

72 
Unôy
.
CuºítTe°Faûed
 = 0;

74 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

75 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

76 
	}
}

78 
	$ã°NŸFÆ£
()

80 
Áûed
;

82 
EXPECT_ABORT_BEGIN


83 
	`TEST_ASSERT_FALSE
(1);

84 
EXPECT_ABORT_END


86 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

87 
Unôy
.
CuºítTe°Faûed
 = 0;

89 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

90 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

91 
	}
}

93 
	$ã°NŸU∆ess
()

95 
Áûed
;

97 
EXPECT_ABORT_BEGIN


98 
	`TEST_ASSERT_UNLESS
(1);

99 
EXPECT_ABORT_END


101 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

102 
Unôy
.
CuºítTe°Faûed
 = 0;

104 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

105 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

106 
	}
}

108 
	$ã°NŸNŸEquÆ
()

110 
Áûed
;

112 
EXPECT_ABORT_BEGIN


113 
	`TEST_ASSERT_NOT_EQUAL
(10, 10);

114 
EXPECT_ABORT_END


116 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

117 
Unôy
.
CuºítTe°Faûed
 = 0;

119 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

120 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

121 
	}
}

123 
	$ã°Faû
()

125 
Áûed
;

127 
EXPECT_ABORT_BEGIN


128 
	`TEST_FAIL
("Expected forÅesting");

129 
EXPECT_ABORT_END


131 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

132 
Unôy
.
CuºítTe°Faûed
 = 0;

134 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

135 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

136 
	}
}

138 
	$ã°IsNuŒ
()

140 * 
±r1
 = 
NULL
;

141 * 
±r2
 = "hello";

143 
	`TEST_ASSERT_NULL
(
±r1
);

144 
	`TEST_ASSERT_NOT_NULL
(
±r2
);

145 
	}
}

147 
	$ã°IsNuŒShouldFaûIfNŸ
()

149 
Áûed
;

150 * 
±r1
 = "hello";

152 
EXPECT_ABORT_BEGIN


153 
	`TEST_ASSERT_NULL
(
±r1
);

154 
EXPECT_ABORT_END


156 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

157 
Unôy
.
CuºítTe°Faûed
 = 0;

159 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

160 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

161 
	}
}

163 
	$ã°NŸNuŒShouldFaûIfNULL
()

165 
Áûed
;

166 * 
±r1
 = 
NULL
;

168 
EXPECT_ABORT_BEGIN


169 
	`TEST_ASSERT_NOT_NULL
(
±r1
);

170 
EXPECT_ABORT_END


172 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

173 
Unôy
.
CuºítTe°Faûed
 = 0;

175 
	`TEST_ASSERT_EQUAL_INT
(1U, 
Áûed
);

176 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

177 
	}
}

179 
	$ã°Ign‹e
()

181 
ign‹ed
;

183 
EXPECT_ABORT_BEGIN


184 
	`TEST_IGNORE
();

185 
	`TEST_FAIL
("This shouldÇot beÑeached");

186 
EXPECT_ABORT_END


188 
ign‹ed
 = 
Unôy
.
CuºítTe°Ign‹ed
;

189 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

191 
	`TEST_ASSERT
(
ign‹ed
);

192 
	}
}

194 
	$ã°Ign‹eMesßge
()

196 
ign‹ed
;

198 
EXPECT_ABORT_BEGIN


199 
	`TEST_IGNORE_MESSAGE
("This isánÉxpected TEST_IGNORE_MESSAGE string!");

200 
	`TEST_FAIL
("This shouldÇot beÑeached");

201 
EXPECT_ABORT_END


203 
ign‹ed
 = 
Unôy
.
CuºítTe°Ign‹ed
;

204 
Unôy
.
CuºítTe°Ign‹ed
 = 0;

206 
	`TEST_ASSERT
(
ign‹ed
);

207 
	}
}

209 
	$ã°NŸEquÆI¡s
()

211 
Áûed
;

213 
EXPECT_ABORT_BEGIN


214 
	`TEST_ASSERT_EQUAL_INT
(3982, 3983);

215 
EXPECT_ABORT_END


217 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

218 
Unôy
.
CuºítTe°Faûed
 = 0;

220 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

221 
	}
}

223 
	$ã°NŸEquÆBôs
()

225 
Áûed
;

227 
EXPECT_ABORT_BEGIN


228 
	`TEST_ASSERT_BITS
(0xFF00, 0x5555, 0x5A55);

229 
EXPECT_ABORT_END


231 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

232 
Unôy
.
CuºítTe°Faûed
 = 0;

234 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

235 
	}
}

237 
	$ã°NŸEquÆUI¡s
()

239 
Áûed
;

240 
_UU16
 
v0
, 
v1
;

242 
v0
 = 9000;

243 
v1
 = 9001;

245 
EXPECT_ABORT_BEGIN


246 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

247 
EXPECT_ABORT_END


249 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

250 
Unôy
.
CuºítTe°Faûed
 = 0;

252 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

253 
	}
}

255 
	$ã°NŸEquÆHex8s
()

257 
Áûed
;

258 
_UU8
 
v0
, 
v1
;

260 
v0
 = 0x23;

261 
v1
 = 0x22;

263 
EXPECT_ABORT_BEGIN


264 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

265 
EXPECT_ABORT_END


267 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

268 
Unôy
.
CuºítTe°Faûed
 = 0;

270 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

271 
	}
}

273 
	$ã°NŸEquÆHex8sIfSig√d
()

275 
Áûed
;

276 
_US8
 
v0
, 
v1
;

278 
v0
 = -2;

279 
v1
 = 2;

281 
EXPECT_ABORT_BEGIN


282 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

283 
EXPECT_ABORT_END


285 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

286 
Unôy
.
CuºítTe°Faûed
 = 0;

288 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

289 
	}
}

291 
	$ã°NŸEquÆHex16s
()

293 
Áûed
;

294 
_UU16
 
v0
, 
v1
;

296 
v0
 = 0x1234;

297 
v1
 = 0x1235;

299 
EXPECT_ABORT_BEGIN


300 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

301 
EXPECT_ABORT_END


303 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

304 
Unôy
.
CuºítTe°Faûed
 = 0;

306 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

307 
	}
}

309 
	$ã°NŸEquÆHex16sIfSig√d
()

311 
Áûed
;

312 
_US16
 
v0
, 
v1
;

314 
v0
 = -1024;

315 
v1
 = -1028;

317 
EXPECT_ABORT_BEGIN


318 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

319 
EXPECT_ABORT_END


321 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

322 
Unôy
.
CuºítTe°Faûed
 = 0;

324 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

325 
	}
}

327 
	$ã°NŸEquÆHex32s
()

329 
Áûed
;

330 
_UU32
 
v0
, 
v1
;

332 
v0
 = 900000;

333 
v1
 = 900001;

335 
EXPECT_ABORT_BEGIN


336 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

337 
EXPECT_ABORT_END


339 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

340 
Unôy
.
CuºítTe°Faûed
 = 0;

342 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

343 
	}
}

345 
	$ã°NŸEquÆHex32sIfSig√d
()

347 
Áûed
;

348 
_US32
 
v0
, 
v1
;

350 
v0
 = -900000;

351 
v1
 = 900001;

353 
EXPECT_ABORT_BEGIN


354 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

355 
EXPECT_ABORT_END


357 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

358 
Unôy
.
CuºítTe°Faûed
 = 0;

360 
	`TEST_ASSERT_MESSAGE
(1U =
Áûed
, "This isÉxpected");

361 
	}
}

363 
	$ã°EquÆI¡s
()

365 
v0
, 
v1
;

366 *
p0
, *
p1
;

368 
v0
 = 19467;

369 
v1
 = 19467;

370 
p0
 = &
v0
;

371 
p1
 = &
v1
;

373 
	`TEST_ASSERT_EQUAL_INT
(1837, 1837);

374 
	`TEST_ASSERT_EQUAL_INT
(-27365, -27365);

375 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

376 
	`TEST_ASSERT_EQUAL_INT
(19467, 
v1
);

377 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 19467);

378 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

379 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

380 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 19467);

381 
	}
}

383 
	$ã°EquÆUöts
()

385 
v0
, 
v1
;

386 *
p0
, *
p1
;

388 
v0
 = 19467;

389 
v1
 = 19467;

390 
p0
 = &
v0
;

391 
p1
 = &
v1
;

393 
	`TEST_ASSERT_EQUAL_UINT
(1837, 1837);

394 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

395 
	`TEST_ASSERT_EQUAL_UINT
(19467, 
v1
);

396 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 19467);

397 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 
v1
);

398 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, *
p1
);

399 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 19467);

400 
	`TEST_ASSERT_EQUAL_UINT
(60872u, 60872u);

401 
	}
}

403 
	$ã°NŸEquÆ
()

405 
	`TEST_ASSERT_NOT_EQUAL
(0, 1);

406 
	`TEST_ASSERT_NOT_EQUAL
(1, 0);

407 
	`TEST_ASSERT_NOT_EQUAL
(100, 101);

408 
	`TEST_ASSERT_NOT_EQUAL
(0, -1);

409 
	`TEST_ASSERT_NOT_EQUAL
(65535, -65535);

410 
	`TEST_ASSERT_NOT_EQUAL
(75, 900);

411 
	`TEST_ASSERT_NOT_EQUAL
(-100, -101);

412 
	}
}

414 
	$ã°EquÆHex8s
()

416 
_UU8
 
v0
, 
v1
;

417 
_UU8
 *
p0
, *
p1
;

419 
v0
 = 0x22;

420 
v1
 = 0x22;

421 
p0
 = &
v0
;

422 
p1
 = &
v1
;

424 
	`TEST_ASSERT_EQUAL_HEX8
(0x22, 0x22);

425 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 
v1
);

426 
	`TEST_ASSERT_EQUAL_HEX8
(0x22, 
v1
);

427 
	`TEST_ASSERT_EQUAL_HEX8
(
v0
, 0x22);

428 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 
v1
);

429 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, *
p1
);

430 
	`TEST_ASSERT_EQUAL_HEX8
(*
p0
, 0x22);

431 
	}
}

433 
	$ã°EquÆHex16s
()

435 
_UU16
 
v0
, 
v1
;

436 
_UU16
 *
p0
, *
p1
;

438 
v0
 = 0x9876;

439 
v1
 = 0x9876;

440 
p0
 = &
v0
;

441 
p1
 = &
v1
;

443 
	`TEST_ASSERT_EQUAL_HEX16
(0x9876, 0x9876);

444 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 
v1
);

445 
	`TEST_ASSERT_EQUAL_HEX16
(0x9876, 
v1
);

446 
	`TEST_ASSERT_EQUAL_HEX16
(
v0
, 0x9876);

447 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, 
v1
);

448 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, *
p1
);

449 
	`TEST_ASSERT_EQUAL_HEX16
(*
p0
, 0x9876);

450 
	}
}

452 
	$ã°EquÆHex32s
()

454 
_UU32
 
v0
, 
v1
;

455 
_UU32
 *
p0
, *
p1
;

457 
v0
 = 0x98765432ul;

458 
v1
 = 0x98765432ul;

459 
p0
 = &
v0
;

460 
p1
 = &
v1
;

462 
	`TEST_ASSERT_EQUAL_HEX32
(0x98765432ul, 0x98765432ul);

463 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 
v1
);

464 
	`TEST_ASSERT_EQUAL_HEX32
(0x98765432ul, 
v1
);

465 
	`TEST_ASSERT_EQUAL_HEX32
(
v0
, 0x98765432ul);

466 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, 
v1
);

467 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, *
p1
);

468 
	`TEST_ASSERT_EQUAL_HEX32
(*
p0
, 0x98765432ul);

469 
	}
}

471 
	$ã°EquÆBôs
()

473 
_UU32
 
v0
 = 0xFF55AA00;

474 
_UU32
 
v1
 = 0x55550000;

476 
	`TEST_ASSERT_BITS
(
v1
, 
v0
, 0x55550000);

477 
	`TEST_ASSERT_BITS
(
v1
, 
v0
, 0xFF55CC00);

478 
	`TEST_ASSERT_BITS
(0xFFFFFFFF, 
v0
, 0xFF55AA00);

479 
	`TEST_ASSERT_BITS
(0xFFFFFFFF, 
v0
, v0);

480 
	`TEST_ASSERT_BITS
(0xF0F0F0F0, 
v0
, 0xFC5DAE0F);

481 
	`TEST_ASSERT_BITS_HIGH
(
v1
, 
v0
);

482 
	`TEST_ASSERT_BITS_LOW
(0x000055FF, 
v0
);

483 
	`TEST_ASSERT_BIT_HIGH
(30, 
v0
);

484 
	`TEST_ASSERT_BIT_LOW
(5, 
v0
);

485 
	}
}

487 
	$ã°EquÆSh‹ts
()

489 
v0
, 
v1
;

490 *
p0
, *
p1
;

492 
v0
 = 19467;

493 
v1
 = 19467;

494 
p0
 = &
v0
;

495 
p1
 = &
v1
;

497 
	`TEST_ASSERT_EQUAL_INT
(1837, 1837);

498 
	`TEST_ASSERT_EQUAL_INT
(-2987, -2987);

499 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

500 
	`TEST_ASSERT_EQUAL_INT
(19467, 
v1
);

501 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 19467);

502 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

503 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

504 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 19467);

505 
	}
}

507 
	$ã°EquÆUSh‹ts
()

509 
v0
, 
v1
;

510 *
p0
, *
p1
;

512 
v0
 = 19467;

513 
v1
 = 19467;

514 
p0
 = &
v0
;

515 
p1
 = &
v1
;

517 
	`TEST_ASSERT_EQUAL_UINT
(1837, 1837);

518 
	`TEST_ASSERT_EQUAL_UINT
(2987, 2987);

519 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 
v1
);

520 
	`TEST_ASSERT_EQUAL_UINT
(19467, 
v1
);

521 
	`TEST_ASSERT_EQUAL_UINT
(
v0
, 19467);

522 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 
v1
);

523 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, *
p1
);

524 
	`TEST_ASSERT_EQUAL_UINT
(*
p0
, 19467);

525 
	}
}

527 
	$ã°EquÆCh¨s
()

529 sig√d 
v0
, 
v1
;

530 sig√d *
p0
, *
p1
;

532 
v0
 = 109;

533 
v1
 = 109;

534 
p0
 = &
v0
;

535 
p1
 = &
v1
;

537 
	`TEST_ASSERT_EQUAL_INT
(42, 42);

538 
	`TEST_ASSERT_EQUAL_INT
(-116, -116);

539 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

540 
	`TEST_ASSERT_EQUAL_INT
(109, 
v1
);

541 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 109);

542 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

543 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

544 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 109);

545 
	}
}

547 
	$ã°EquÆUCh¨s
()

549 
v0
, 
v1
;

550 *
p0
, *
p1
;

552 
v0
 = 251;

553 
v1
 = 251;

554 
p0
 = &
v0
;

555 
p1
 = &
v1
;

557 
	`TEST_ASSERT_EQUAL_INT
(42, 42);

558 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 
v1
);

559 
	`TEST_ASSERT_EQUAL_INT
(251, 
v1
);

560 
	`TEST_ASSERT_EQUAL_INT
(
v0
, 251);

561 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 
v1
);

562 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, *
p1
);

563 
	`TEST_ASSERT_EQUAL_INT
(*
p0
, 251);

564 
	}
}

566 
	$ã°EquÆPoöãrs
()

568 
v0
, 
v1
;

569 *
p0
, *
p1
, *
p2
;

571 
v0
 = 19467;

572 
v1
 = 18271;

573 
p0
 = &
v0
;

574 
p1
 = &
v1
;

575 
p2
 = &
v1
;

577 
	`TEST_ASSERT_POINTERS_EQUAL
(
p0
, &
v0
);

578 
	`TEST_ASSERT_POINTERS_EQUAL
(&
v1
, 
p1
);

579 
	`TEST_ASSERT_POINTERS_EQUAL
(
p2
, 
p1
);

580 
	`TEST_ASSERT_POINTERS_EQUAL
(&
v0
, &v0);

581 
	}
}

583 
	$ã°FlﬂtsWôhöDñè
()

585 
	`TEST_ASSERT_FLOAT_WITHIN
(0.00003f, 187245.03485f, 187245.03488f);

586 
	`TEST_ASSERT_FLOAT_WITHIN
(1.0f, 187245.0f, 187246.0f);

587 
	`TEST_ASSERT_FLOAT_WITHIN
(0.05f, 9273.2549f, 9273.2049f);

588 
	`TEST_ASSERT_FLOAT_WITHIN
(0.007f, -726.93724f, -726.94424f);

589 
	}
}

591 
	$ã°FlﬂtsNŸWôhöDñè
()

593 
Áûed
;

595 
EXPECT_ABORT_BEGIN


596 
	`TEST_ASSERT_FLOAT_WITHIN
(0.05f, 9273.2649f, 9273.2049f);

597 
EXPECT_ABORT_END


599 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

600 
Unôy
.
CuºítTe°Faûed
 = 0;

602 
VERIFY_FAILURE_WAS_CAUGHT


603 
	}
}

605 
	$ã°FlﬂtsEquÆ
()

607 
	`TEST_ASSERT_EQUAL_FLOAT
(187245.0f, 187246.0f);

608 
	`TEST_ASSERT_EQUAL_FLOAT
(18724.5f, 18724.6f);

609 
	`TEST_ASSERT_EQUAL_FLOAT
(9273.2549f, 9273.2599f);

610 
	`TEST_ASSERT_EQUAL_FLOAT
(-726.93724f, -726.9374f);

611 
	}
}

613 
	$ã°FlﬂtsNŸEquÆ
()

615 
Áûed
;

617 
EXPECT_ABORT_BEGIN


618 
	`TEST_ASSERT_EQUAL_FLOAT
(9273.9649f, 9273.0049f);

619 
EXPECT_ABORT_END


621 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

622 
Unôy
.
CuºítTe°Faûed
 = 0;

624 
VERIFY_FAILURE_WAS_CAUGHT


625 
	}
}

627 
	$ã°FlﬂtsNŸEquÆNeg©ive1
()

629 
Áûed
;

631 
EXPECT_ABORT_BEGIN


632 
	`TEST_ASSERT_EQUAL_FLOAT
(-9273.9649f, -9273.0049f);

633 
EXPECT_ABORT_END


635 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

636 
Unôy
.
CuºítTe°Faûed
 = 0;

638 
VERIFY_FAILURE_WAS_CAUGHT


639 
	}
}

641 
	$ã°FlﬂtsNŸEquÆNeg©ive2
()

643 
Áûed
;

645 
EXPECT_ABORT_BEGIN


646 
	`TEST_ASSERT_EQUAL_FLOAT
(-9273.0049f, -9273.9649f);

647 
EXPECT_ABORT_END


649 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

650 
Unôy
.
CuºítTe°Faûed
 = 0;

652 
VERIFY_FAILURE_WAS_CAUGHT


653 
	}
}

655 
	$ã°I¡sWôhöDñè
()

657 
	`TEST_ASSERT_INT_WITHIN
(1, 5000, 5001);

658 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 4996);

659 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 5005);

660 
	`TEST_ASSERT_INT_WITHIN
(500, 50, -440);

662 
	`TEST_ASSERT_INT_WITHIN
(2, 2147483647, -1);

663 
	`TEST_ASSERT_INT_WITHIN
(5, 1, -1);

664 
	`TEST_ASSERT_INT_WITHIN
(5, -1, 1);

665 
	}
}

667 
	$ã°I¡sNŸWôhöDñè
()

669 
Áûed
;

671 
EXPECT_ABORT_BEGIN


672 
	`TEST_ASSERT_INT_WITHIN
(5, 5000, 5006);

673 
EXPECT_ABORT_END


675 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

676 
Unôy
.
CuºítTe°Faûed
 = 0;

678 
VERIFY_FAILURE_WAS_CAUGHT


679 
	}
}

681 
	$ã°UI¡sWôhöDñè
()

683 
	`TEST_ASSERT_UINT_WITHIN
(1, 5000, 5001);

684 
	`TEST_ASSERT_UINT_WITHIN
(5, 5000, 4996);

685 
	`TEST_ASSERT_UINT_WITHIN
(5, 5000, 5005);

686 
	}
}

688 
	$ã°UI¡sNŸWôhöDñè
()

690 
Áûed
;

692 
EXPECT_ABORT_BEGIN


693 
	`TEST_ASSERT_UINT_WITHIN
(1, 2147483647, 2147483649);

694 
EXPECT_ABORT_END


696 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

697 
Unôy
.
CuºítTe°Faûed
 = 0;

699 
VERIFY_FAILURE_WAS_CAUGHT


700 
	}
}

702 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassSmÆlFú°
()

704 
Áûed
;

706 
EXPECT_ABORT_BEGIN


707 
	`TEST_ASSERT_UINT_WITHIN
(5, 1, -1);

708 
EXPECT_ABORT_END


710 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

711 
Unôy
.
CuºítTe°Faûed
 = 0;

713 
VERIFY_FAILURE_WAS_CAUGHT


714 
	}
}

716 
	$ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassBigFú°
()

718 
Áûed
;

720 
EXPECT_ABORT_BEGIN


721 
	`TEST_ASSERT_UINT_WITHIN
(5, -1, 1);

722 
EXPECT_ABORT_END


724 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

725 
Unôy
.
CuºítTe°Faûed
 = 0;

727 
VERIFY_FAILURE_WAS_CAUGHT


728 
	}
}

730 
	$ã°HEX32sWôhöDñè
()

732 
	`TEST_ASSERT_HEX32_WITHIN
(1, 5000, 5001);

733 
	`TEST_ASSERT_HEX32_WITHIN
(5, 5000, 4996);

734 
	`TEST_ASSERT_HEX32_WITHIN
(5, 5000, 5005);

735 
	}
}

737 
	$ã°HEX32sNŸWôhöDñè
()

739 
Áûed
;

741 
EXPECT_ABORT_BEGIN


742 
	`TEST_ASSERT_HEX32_WITHIN
(1, 2147483647, 2147483649);

743 
EXPECT_ABORT_END


745 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

746 
Unôy
.
CuºítTe°Faûed
 = 0;

748 
VERIFY_FAILURE_WAS_CAUGHT


749 
	}
}

751 
	$ã°HEX32sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
()

753 
Áûed
;

755 
EXPECT_ABORT_BEGIN


756 
	`TEST_ASSERT_HEX32_WITHIN
(5, 1, -1);

757 
EXPECT_ABORT_END


759 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

760 
Unôy
.
CuºítTe°Faûed
 = 0;

762 
VERIFY_FAILURE_WAS_CAUGHT


763 
	}
}

765 
	$ã°HEX16sWôhöDñè
()

767 
	`TEST_ASSERT_HEX16_WITHIN
(1, 5000, 5001);

768 
	`TEST_ASSERT_HEX16_WITHIN
(5, 5000, 4996);

769 
	`TEST_ASSERT_HEX16_WITHIN
(5, 5000, 5005);

770 
	}
}

772 
	$ã°HEX16sNŸWôhöDñè
()

774 
Áûed
;

776 
EXPECT_ABORT_BEGIN


777 
	`TEST_ASSERT_HEX16_WITHIN
(2, 65535, 0);

778 
EXPECT_ABORT_END


780 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

781 
Unôy
.
CuºítTe°Faûed
 = 0;

783 
VERIFY_FAILURE_WAS_CAUGHT


784 
	}
}

786 
	$ã°HEX8sWôhöDñè
()

788 
	`TEST_ASSERT_HEX8_WITHIN
(1, 254, 255);

789 
	`TEST_ASSERT_HEX8_WITHIN
(5, 251, 255);

790 
	`TEST_ASSERT_HEX8_WITHIN
(5, 1, 4);

791 
	}
}

793 
	$ã°HEX8sNŸWôhöDñè
()

795 
Áûed
;

797 
EXPECT_ABORT_BEGIN


798 
	`TEST_ASSERT_HEX8_WITHIN
(2, 255, 0);

799 
EXPECT_ABORT_END


801 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

802 
Unôy
.
CuºítTe°Faûed
 = 0;

804 
VERIFY_FAILURE_WAS_CAUGHT


805 
	}
}

807 
	$ã°EquÆSåögs
()

809 c⁄° *
ã°Såög
 = "foo";

811 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
,ÅestString);

812 
	`TEST_ASSERT_EQUAL_STRING
("foo", "foo");

813 
	`TEST_ASSERT_EQUAL_STRING
("foo", 
ã°Såög
);

814 
	`TEST_ASSERT_EQUAL_STRING
(
ã°Såög
, "foo");

815 
	`TEST_ASSERT_EQUAL_STRING
("", "");

816 
	`TEST_ASSERT_EQUAL_INT
(0U, 
Unôy
.
Te°Faûuªs
);

817 
	}
}

819 
	$ã°NŸEquÆSåög1
()

821 
Áûed
;

823 
EXPECT_ABORT_BEGIN


824 
	`TEST_ASSERT_EQUAL_STRING
("foo", "bar");

825 
EXPECT_ABORT_END


827 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

828 
Unôy
.
CuºítTe°Faûed
 = 0;

830 
VERIFY_FAILURE_WAS_CAUGHT


831 
	}
}

833 
	$ã°NŸEquÆSåög2
()

835 
Áûed
;

837 
EXPECT_ABORT_BEGIN


838 
	`TEST_ASSERT_EQUAL_STRING
("foo", "");

839 
EXPECT_ABORT_END


841 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

842 
Unôy
.
CuºítTe°Faûed
 = 0;

844 
VERIFY_FAILURE_WAS_CAUGHT


845 
	}
}

847 
	$ã°NŸEquÆSåög3
()

849 
Áûed
;

851 
EXPECT_ABORT_BEGIN


852 
	`TEST_ASSERT_EQUAL_STRING
("", "bar");

853 
EXPECT_ABORT_END


855 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

856 
Unôy
.
CuºítTe°Faûed
 = 0;

858 
VERIFY_FAILURE_WAS_CAUGHT


859 
	}
}

861 
	$ã°NŸEquÆSåög_Ex≥˘edSåögIsNuŒ
()

863 
Áûed
;

865 
EXPECT_ABORT_BEGIN


866 
	`TEST_ASSERT_EQUAL_STRING
(
NULL
, "bar");

867 
EXPECT_ABORT_END


869 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

870 
Unôy
.
CuºítTe°Faûed
 = 0;

872 
VERIFY_FAILURE_WAS_CAUGHT


873 
	}
}

875 
	$ã°NŸEquÆSåög_A˘uÆSåögIsNuŒ
()

877 
Áûed
;

879 
EXPECT_ABORT_BEGIN


880 
	`TEST_ASSERT_EQUAL_STRING
("foo", 
NULL
);

881 
EXPECT_ABORT_END


883 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

884 
Unôy
.
CuºítTe°Faûed
 = 0;

886 
VERIFY_FAILURE_WAS_CAUGHT


887 
	}
}

889 
	$ã°EquÆMem‹y
()

891 c⁄° *
ã°Såög
 = "whatever";

893 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
,ÅestString, 8);

894 
	`TEST_ASSERT_EQUAL_MEMORY
("whatever", "whatever", 8);

895 
	`TEST_ASSERT_EQUAL_MEMORY
("wh©evî", 
ã°Såög
, 8);

896 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
, "whatever", 8);

897 
	`TEST_ASSERT_EQUAL_MEMORY
(
ã°Såög
, "whatever", 2);

898 
	`TEST_ASSERT_EQUAL_MEMORY
(
NULL
, NULL, 1);

899 
	}
}

901 
	$ã°NŸEquÆMem‹y1
()

903 
Áûed
;

905 
EXPECT_ABORT_BEGIN


906 
	`TEST_ASSERT_EQUAL_MEMORY
("foo", "bar", 3);

907 
EXPECT_ABORT_END


909 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

910 
Unôy
.
CuºítTe°Faûed
 = 0;

912 
VERIFY_FAILURE_WAS_CAUGHT


913 
	}
}

915 
	$ã°NŸEquÆMem‹y2
()

917 
Áûed
;

919 
EXPECT_ABORT_BEGIN


920 
	`TEST_ASSERT_EQUAL_MEMORY
("fool", "food", 4);

921 
EXPECT_ABORT_END


923 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

924 
Unôy
.
CuºítTe°Faûed
 = 0;

926 
VERIFY_FAILURE_WAS_CAUGHT


927 
	}
}

929 
	$ã°NŸEquÆMem‹y3
()

931 
Áûed
;

933 
EXPECT_ABORT_BEGIN


934 
	`TEST_ASSERT_EQUAL_MEMORY
(
NULL
, "food", 4);

935 
EXPECT_ABORT_END


937 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

938 
Unôy
.
CuºítTe°Faûed
 = 0;

940 
VERIFY_FAILURE_WAS_CAUGHT


941 
	}
}

943 
	$ã°NŸEquÆMem‹y4
()

945 
Áûed
;

947 
EXPECT_ABORT_BEGIN


948 
	`TEST_ASSERT_EQUAL_MEMORY
("foﬁ", 
NULL
, 4);

949 
EXPECT_ABORT_END


951 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

952 
Unôy
.
CuºítTe°Faûed
 = 0;

954 
VERIFY_FAILURE_WAS_CAUGHT


955 
	}
}

957 
	$ã°EquÆI¡Aºays
()

959 
p0
[] = {1, 8, 987, -2};

960 
p1
[] = {1, 8, 987, -2};

961 
p2
[] = {1, 8, 987, 2};

962 
p3
[] = {1, 500, 600, 700};

964 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
,Ö0, 1);

965 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
,Ö0, 4);

966 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

967 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p2
, 3);

968 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p3
, 1);

969 
	}
}

971 
	$ã°NŸEquÆI¡Aºays1
()

973 
p0
[] = {1, 8, 987, -2};

974 
p1
[] = {1, 8, 987, 2};

976 
Áûed
;

978 
EXPECT_ABORT_BEGIN


979 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

980 
EXPECT_ABORT_END


982 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

983 
Unôy
.
CuºítTe°Faûed
 = 0;

985 
VERIFY_FAILURE_WAS_CAUGHT


986 
	}
}

988 
	$ã°NŸEquÆI¡Aºays2
()

990 
p0
[] = {1, 8, 987, -2};

991 
p1
[] = {2, 8, 987, -2};

993 
Áûed
;

995 
EXPECT_ABORT_BEGIN


996 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

997 
EXPECT_ABORT_END


999 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1000 
Unôy
.
CuºítTe°Faûed
 = 0;

1002 
VERIFY_FAILURE_WAS_CAUGHT


1003 
	}
}

1005 
	$ã°NŸEquÆI¡Aºays3
()

1007 
p0
[] = {1, 8, 987, -2};

1008 
p1
[] = {1, 8, 986, -2};

1010 
Áûed
;

1012 
EXPECT_ABORT_BEGIN


1013 
	`TEST_ASSERT_EQUAL_INT_ARRAY
(
p0
, 
p1
, 4);

1014 
EXPECT_ABORT_END


1016 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1017 
Unôy
.
CuºítTe°Faûed
 = 0;

1019 
VERIFY_FAILURE_WAS_CAUGHT


1020 
	}
}

1022 
	$ã°EquÆUI¡Aºays
()

1024 
p0
[] = {1, 8, 987, 65132u};

1025 
p1
[] = {1, 8, 987, 65132u};

1026 
p2
[] = {1, 8, 987, 2};

1027 
p3
[] = {1, 500, 600, 700};

1029 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
,Ö0, 1);

1030 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
,Ö0, 4);

1031 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

1032 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p2
, 3);

1033 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p3
, 1);

1034 
	}
}

1036 
	$ã°NŸEquÆUI¡Aºays1
()

1038 
p0
[] = {1, 8, 987, 65132u};

1039 
p1
[] = {1, 8, 987, 65131u};

1041 
Áûed
;

1043 
EXPECT_ABORT_BEGIN


1044 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

1045 
EXPECT_ABORT_END


1047 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1048 
Unôy
.
CuºítTe°Faûed
 = 0;

1050 
VERIFY_FAILURE_WAS_CAUGHT


1051 
	}
}

1053 
	$ã°NŸEquÆUI¡Aºays2
()

1055 
p0
[] = {1, 8, 987, 65132u};

1056 
p1
[] = {2, 8, 987, 65132u};

1058 
Áûed
;

1060 
EXPECT_ABORT_BEGIN


1061 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

1062 
EXPECT_ABORT_END


1064 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1065 
Unôy
.
CuºítTe°Faûed
 = 0;

1067 
VERIFY_FAILURE_WAS_CAUGHT


1068 
	}
}

1070 
	$ã°NŸEquÆUI¡Aºays3
()

1072 
p0
[] = {1, 8, 987, 65132u};

1073 
p1
[] = {1, 8, 986, 65132u};

1075 
Áûed
;

1077 
EXPECT_ABORT_BEGIN


1078 
	`TEST_ASSERT_EQUAL_UINT_ARRAY
(
p0
, 
p1
, 4);

1079 
EXPECT_ABORT_END


1081 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1082 
Unôy
.
CuºítTe°Faûed
 = 0;

1084 
VERIFY_FAILURE_WAS_CAUGHT


1085 
	}
}

1087 
	$ã°EquÆHEXAºays
()

1089 
p0
[] = {1, 8, 987, 65132u};

1090 
p1
[] = {1, 8, 987, 65132u};

1091 
p2
[] = {1, 8, 987, 2};

1092 
p3
[] = {1, 500, 600, 700};

1094 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
,Ö0, 1);

1095 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
,Ö0, 4);

1096 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
, 
p1
, 4);

1097 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p2
, 3);

1098 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p3
, 1);

1099 
	}
}

1101 
	$ã°NŸEquÆHEXAºays1
()

1103 
p0
[] = {1, 8, 987, 65132u};

1104 
p1
[] = {1, 8, 987, 65131u};

1106 
Áûed
;

1108 
EXPECT_ABORT_BEGIN


1109 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

1110 
EXPECT_ABORT_END


1112 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1113 
Unôy
.
CuºítTe°Faûed
 = 0;

1115 
VERIFY_FAILURE_WAS_CAUGHT


1116 
	}
}

1118 
	$ã°NŸEquÆHEXAºays2
()

1120 
p0
[] = {1, 8, 987, 65132u};

1121 
p1
[] = {2, 8, 987, 65132u};

1123 
Áûed
;

1125 
EXPECT_ABORT_BEGIN


1126 
	`TEST_ASSERT_EQUAL_HEX32_ARRAY
(
p0
, 
p1
, 4);

1127 
EXPECT_ABORT_END


1129 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1130 
Unôy
.
CuºítTe°Faûed
 = 0;

1132 
VERIFY_FAILURE_WAS_CAUGHT


1133 
	}
}

1135 
	$ã°NŸEquÆHEXAºays3
()

1137 
p0
[] = {1, 8, 987, 65132u};

1138 
p1
[] = {1, 8, 986, 65132u};

1140 
Áûed
;

1142 
EXPECT_ABORT_BEGIN


1143 
	`TEST_ASSERT_EQUAL_HEX_ARRAY
(
p0
, 
p1
, 4);

1144 
EXPECT_ABORT_END


1146 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1147 
Unôy
.
CuºítTe°Faûed
 = 0;

1149 
VERIFY_FAILURE_WAS_CAUGHT


1150 
	}
}

1152 
	$ã°EquÆHEX16Aºays
()

1154 
p0
[] = {1, 8, 987, 65132u};

1155 
p1
[] = {1, 8, 987, 65132u};

1156 
p2
[] = {1, 8, 987, 2};

1157 
p3
[] = {1, 500, 600, 700};

1159 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
,Ö0, 1);

1160 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
,Ö0, 4);

1161 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

1162 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p2
, 3);

1163 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p3
, 1);

1164 
	}
}

1166 
	$ã°NŸEquÆHEX16Aºays1
()

1168 
p0
[] = {1, 8, 987, 65132u};

1169 
p1
[] = {1, 8, 987, 65131u};

1171 
Áûed
;

1173 
EXPECT_ABORT_BEGIN


1174 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

1175 
EXPECT_ABORT_END


1177 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1178 
Unôy
.
CuºítTe°Faûed
 = 0;

1180 
VERIFY_FAILURE_WAS_CAUGHT


1181 
	}
}

1183 
	$ã°NŸEquÆHEX16Aºays2
()

1185 
p0
[] = {1, 8, 987, 65132u};

1186 
p1
[] = {2, 8, 987, 65132u};

1188 
Áûed
;

1190 
EXPECT_ABORT_BEGIN


1191 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

1192 
EXPECT_ABORT_END


1194 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1195 
Unôy
.
CuºítTe°Faûed
 = 0;

1197 
VERIFY_FAILURE_WAS_CAUGHT


1198 
	}
}

1200 
	$ã°NŸEquÆHEX16Aºays3
()

1202 
p0
[] = {1, 8, 987, 65132u};

1203 
p1
[] = {1, 8, 986, 65132u};

1205 
Áûed
;

1207 
EXPECT_ABORT_BEGIN


1208 
	`TEST_ASSERT_EQUAL_HEX16_ARRAY
(
p0
, 
p1
, 4);

1209 
EXPECT_ABORT_END


1211 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1212 
Unôy
.
CuºítTe°Faûed
 = 0;

1214 
VERIFY_FAILURE_WAS_CAUGHT


1215 
	}
}

1217 
	$ã°EquÆHEX8Aºays
()

1219 
p0
[] = {1, 8, 254u, 123};

1220 
p1
[] = {1, 8, 254u, 123};

1221 
p2
[] = {1, 8, 254u, 2};

1222 
p3
[] = {1, 23, 25, 26};

1224 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
,Ö0, 1);

1225 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
,Ö0, 4);

1226 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

1227 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p2
, 3);

1228 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p3
, 1);

1229 
	}
}

1231 
	$ã°NŸEquÆHEX8Aºays1
()

1233 
p0
[] = {1, 8, 254u, 253u};

1234 
p1
[] = {1, 8, 254u, 252u};

1236 
Áûed
;

1238 
EXPECT_ABORT_BEGIN


1239 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

1240 
EXPECT_ABORT_END


1242 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1243 
Unôy
.
CuºítTe°Faûed
 = 0;

1245 
VERIFY_FAILURE_WAS_CAUGHT


1246 
	}
}

1248 
	$ã°NŸEquÆHEX8Aºays2
()

1250 
p0
[] = {1, 8, 254u, 253u};

1251 
p1
[] = {2, 8, 254u, 253u};

1253 
Áûed
;

1255 
EXPECT_ABORT_BEGIN


1256 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

1257 
EXPECT_ABORT_END


1259 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1260 
Unôy
.
CuºítTe°Faûed
 = 0;

1262 
VERIFY_FAILURE_WAS_CAUGHT


1263 
	}
}

1265 
	$ã°NŸEquÆHEX8Aºays3
()

1267 
p0
[] = {1, 8, 254u, 253u};

1268 
p1
[] = {1, 8, 255u, 253u};

1270 
Áûed
;

1272 
EXPECT_ABORT_BEGIN


1273 
	`TEST_ASSERT_EQUAL_HEX8_ARRAY
(
p0
, 
p1
, 4);

1274 
EXPECT_ABORT_END


1276 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1277 
Unôy
.
CuºítTe°Faûed
 = 0;

1279 
VERIFY_FAILURE_WAS_CAUGHT


1280 
	}
}

1282 
	$ã°EquÆFlﬂtAºays
()

1284 
p0
[] = {1.0, -8.0, 25.4, -0.123};

1285 
p1
[] = {1.0, -8.0, 25.4, -0.123};

1286 
p2
[] = {1.0, -8.0, 25.4, -0.2};

1287 
p3
[] = {1.0, -23.0, 25.0, -0.26};

1289 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
,Ö0, 1);

1290 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
,Ö0, 4);

1291 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1292 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p2
, 3);

1293 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p3
, 1);

1294 
	}
}

1296 
	$ã°NŸEquÆFlﬂtAºays1
()

1298 
p0
[] = {1.0, 8.0, 25.4, 0.253};

1299 
p1
[] = {1.0, 8.0, 25.4, 0.252};

1301 
Áûed
;

1303 
EXPECT_ABORT_BEGIN


1304 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1305 
EXPECT_ABORT_END


1307 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1308 
Unôy
.
CuºítTe°Faûed
 = 0;

1310 
VERIFY_FAILURE_WAS_CAUGHT


1311 
	}
}

1313 
	$ã°NŸEquÆFlﬂtAºays2
()

1315 
p0
[] = {1.0, 8.0, 25.4, 0.253};

1316 
p1
[] = {2.0, 8.0, 25.4, 0.253};

1318 
Áûed
;

1320 
EXPECT_ABORT_BEGIN


1321 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1322 
EXPECT_ABORT_END


1324 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1325 
Unôy
.
CuºítTe°Faûed
 = 0;

1327 
VERIFY_FAILURE_WAS_CAUGHT


1328 
	}
}

1330 
	$ã°NŸEquÆFlﬂtAºays3
()

1332 
p0
[] = {1.0, 8.0, 25.4, 0.253};

1333 
p1
[] = {1.0, 8.0, 25.5, 0.253};

1335 
Áûed
;

1337 
EXPECT_ABORT_BEGIN


1338 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1339 
EXPECT_ABORT_END


1341 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1342 
Unôy
.
CuºítTe°Faûed
 = 0;

1344 
VERIFY_FAILURE_WAS_CAUGHT


1345 
	}
}

1347 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive1
()

1349 
p0
[] = {-1.0, -8.0, -25.4, -0.253};

1350 
p1
[] = {-1.0, -8.0, -25.4, -0.252};

1352 
Áûed
;

1354 
EXPECT_ABORT_BEGIN


1355 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1356 
EXPECT_ABORT_END


1358 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1359 
Unôy
.
CuºítTe°Faûed
 = 0;

1361 
VERIFY_FAILURE_WAS_CAUGHT


1362 
	}
}

1364 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive2
()

1366 
p0
[] = {-1.0, -8.0, -25.4, -0.253};

1367 
p1
[] = {-2.0, -8.0, -25.4, -0.253};

1369 
Áûed
;

1371 
EXPECT_ABORT_BEGIN


1372 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1373 
EXPECT_ABORT_END


1375 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1376 
Unôy
.
CuºítTe°Faûed
 = 0;

1378 
VERIFY_FAILURE_WAS_CAUGHT


1379 
	}
}

1381 
	$ã°NŸEquÆFlﬂtAºaysNeg©ive3
()

1383 
p0
[] = {-1.0, -8.0, -25.4, -0.253};

1384 
p1
[] = {-1.0, -8.0, -25.5, -0.253};

1386 
Áûed
;

1388 
EXPECT_ABORT_BEGIN


1389 
	`TEST_ASSERT_EQUAL_FLOAT_ARRAY
(
p0
, 
p1
, 4);

1390 
EXPECT_ABORT_END


1392 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1393 
Unôy
.
CuºítTe°Faûed
 = 0;

1395 
VERIFY_FAILURE_WAS_CAUGHT


1396 
	}
}

1398 
	$ã°EquÆMem‹yAºays
()

1400 
p0
[] = {1, 8, 987, -2};

1401 
p1
[] = {1, 8, 987, -2};

1402 
p2
[] = {1, 8, 987, 2};

1403 
p3
[] = {1, 500, 600, 700};

1405 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
,Ö0, 4, 1);

1406 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
,Ö0, 4, 4);

1407 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, 4, 4);

1408 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p2
, 4, 3);

1409 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p3
, 4, 1);

1410 
	}
}

1412 
	$ã°NŸEquÆMem‹yAºays1
()

1414 
p0
[] = {1, 8, 987, -2};

1415 
p1
[] = {1, 8, 987, 2};

1417 
Áûed
;

1419 
EXPECT_ABORT_BEGIN


1420 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, 4, 4);

1421 
EXPECT_ABORT_END


1423 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1424 
Unôy
.
CuºítTe°Faûed
 = 0;

1426 
VERIFY_FAILURE_WAS_CAUGHT


1427 
	}
}

1429 
	$ã°NŸEquÆMem‹yAºays2
()

1431 
p0
[] = {1, 8, 987, -2};

1432 
p1
[] = {2, 8, 987, -2};

1434 
Áûed
;

1436 
EXPECT_ABORT_BEGIN


1437 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, 4, 4);

1438 
EXPECT_ABORT_END


1440 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1441 
Unôy
.
CuºítTe°Faûed
 = 0;

1443 
VERIFY_FAILURE_WAS_CAUGHT


1444 
	}
}

1446 
	$ã°NŸEquÆMem‹yAºays3
()

1448 
p0
[] = {1, 8, 987, -2};

1449 
p1
[] = {1, 8, 986, -2};

1451 
Áûed
;

1453 
EXPECT_ABORT_BEGIN


1454 
	`TEST_ASSERT_EQUAL_MEMORY_ARRAY
(
p0
, 
p1
, 4, 4);

1455 
EXPECT_ABORT_END


1457 
Áûed
 = 
Unôy
.
CuºítTe°Faûed
;

1458 
Unôy
.
CuºítTe°Faûed
 = 0;

1460 
VERIFY_FAILURE_WAS_CAUGHT


1461 
	}
}

1463 
	$ã°PrŸe˘i⁄
()

1465 vﬁ©ûê
mask
 = 0;

1467 i‡(
	`TEST_PROTECT
())

1469 
mask
 |= 1;

1470 
	`TEST_ABORT
();

1474 
Unôy
.
CuºítTe°Faûed
 = 0;

1475 
mask
 |= 2;

1478 
	`TEST_ASSERT_EQUAL
(3, 
mask
);

1479 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity_fixture.c

8 
	~"unôy_fixtuª.h
"

10 
	gd©a
 = -1;

12 
TEST_GROUP
(
mygroup
);

14 
	$TEST_SETUP
(
mygroup
)

16 
d©a
 = 0;

17 
	}
}

19 
	$TEST_TEAR_DOWN
(
mygroup
)

21 
d©a
 = -1;

22 
	}
}

24 
	$TEST
(
mygroup
, 
ã°1
)

26 
	`TEST_ASSERT_EQUAL_INT
(0, 
d©a
);

27 
	}
}

29 
	$TEST
(
mygroup
, 
ã°2
)

31 
	`TEST_ASSERT_EQUAL_INT
(0, 
d©a
);

32 
	}
}

34 
	$TEST
(
mygroup
, 
ã°3
)

36 
	`TEST_ASSERT_EQUAL_INT
(0, 
d©a
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity_runner.c

4 
	~"unôy_fixtuª.h
"

6 
ã°True
(Ë;
ã°FÆ£
(Ë;
ã°PªviousPass
(Ë;
ã°NŸV™ûœ
(Ë;
ã°NŸTrue
(Ë;
ã°NŸFÆ£
(Ë;
ã°NŸU∆ess
(Ë;
ã°NŸNŸEquÆ
(Ë;
ã°Faû
(Ë;
ã°IsNuŒ
(Ë;
ã°IsNuŒShouldFaûIfNŸ
(Ë;
ã°NŸNuŒShouldFaûIfNULL
(Ë;
ã°Ign‹e
(Ë;
ã°Ign‹eMesßge
(Ë;
ã°NŸEquÆI¡s
(Ë;
ã°NŸEquÆBôs
(Ë;
ã°NŸEquÆUI¡s
(Ë;
ã°NŸEquÆHex8s
(Ë;
ã°NŸEquÆHex8sIfSig√d
(Ë;
ã°NŸEquÆHex16s
(Ë;
ã°NŸEquÆHex16sIfSig√d
(Ë;
ã°NŸEquÆHex32s
(Ë;
ã°NŸEquÆHex32sIfSig√d
(Ë;
ã°EquÆI¡s
(Ë;
ã°EquÆUöts
(Ë;
ã°NŸEquÆ
(Ë;
ã°EquÆHex8s
(Ë;
ã°EquÆHex16s
(Ë;
ã°EquÆHex32s
(Ë;
ã°EquÆBôs
(Ë;
ã°EquÆSh‹ts
(Ë;
ã°EquÆUSh‹ts
(Ë;
ã°EquÆCh¨s
(Ë;
ã°EquÆUCh¨s
(Ë;
ã°EquÆPoöãrs
(Ë;
ã°FlﬂtsWôhöDñè
(Ë;
ã°FlﬂtsNŸWôhöDñè
(Ë;
ã°FlﬂtsEquÆ
(Ë;
ã°FlﬂtsNŸEquÆ
(Ë;
ã°FlﬂtsNŸEquÆNeg©ive1
(Ë;
ã°FlﬂtsNŸEquÆNeg©ive2
(Ë;
ã°I¡sWôhöDñè
(Ë;
ã°I¡sNŸWôhöDñè
(Ë;
ã°UI¡sWôhöDñè
(Ë;
ã°UI¡sNŸWôhöDñè
(Ë;
ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassSmÆlFú°
(Ë;
ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassBigFú°
(Ë;
ã°HEX32sWôhöDñè
(Ë;
ã°HEX32sNŸWôhöDñè
(Ë;
ã°HEX32sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
(Ë;
ã°HEX16sWôhöDñè
(Ë;
ã°HEX16sNŸWôhöDñè
(Ë;
ã°HEX8sWôhöDñè
(Ë;
ã°HEX8sNŸWôhöDñè
(Ë;
ã°EquÆSåögs
(Ë;
ã°NŸEquÆSåög1
(Ë;
ã°NŸEquÆSåög2
(Ë;
ã°NŸEquÆSåög3
(Ë;
ã°NŸEquÆSåög_Ex≥˘edSåögIsNuŒ
(Ë;
ã°NŸEquÆSåög_A˘uÆSåögIsNuŒ
(Ë;
ã°EquÆMem‹y
(Ë;
ã°NŸEquÆMem‹y1
(Ë;
ã°NŸEquÆMem‹y2
(Ë;
ã°NŸEquÆMem‹y3
(Ë;
ã°NŸEquÆMem‹y4
(Ë;
ã°EquÆI¡Aºays
(Ë;
ã°NŸEquÆI¡Aºays1
(Ë;
ã°NŸEquÆI¡Aºays2
(Ë;
ã°NŸEquÆI¡Aºays3
(Ë;
ã°EquÆUI¡Aºays
(Ë;
ã°NŸEquÆUI¡Aºays1
(Ë;
ã°NŸEquÆUI¡Aºays2
(Ë;
ã°NŸEquÆUI¡Aºays3
(Ë;
ã°EquÆHEXAºays
(Ë;
ã°NŸEquÆHEXAºays1
(Ë;
ã°NŸEquÆHEXAºays2
(Ë;
ã°NŸEquÆHEXAºays3
(Ë;
ã°EquÆHEX16Aºays
(Ë;
ã°NŸEquÆHEX16Aºays1
(Ë;
ã°NŸEquÆHEX16Aºays2
(Ë;
ã°NŸEquÆHEX16Aºays3
(Ë;
ã°EquÆHEX8Aºays
(Ë;
ã°NŸEquÆHEX8Aºays1
(Ë;
ã°NŸEquÆHEX8Aºays2
(Ë;
ã°NŸEquÆHEX8Aºays3
(Ë;
ã°EquÆFlﬂtAºays
(Ë;
ã°NŸEquÆFlﬂtAºays1
(Ë;
ã°NŸEquÆFlﬂtAºays2
(Ë;
ã°NŸEquÆFlﬂtAºays3
(Ë;
ã°NŸEquÆFlﬂtAºaysNeg©ive1
(Ë;
ã°NŸEquÆFlﬂtAºaysNeg©ive2
(Ë;
ã°NŸEquÆFlﬂtAºaysNeg©ive3
(Ë;
ã°EquÆMem‹yAºays
(Ë;
ã°NŸEquÆMem‹yAºays1
(Ë;
ã°NŸEquÆMem‹yAºays2
(Ë;
ã°NŸEquÆMem‹yAºays3
(Ë;
ã°PrŸe˘i⁄
() ;

8 
	$TEST_GROUP_RUNNER
(
unôy
)

10 
	`ã°True
(); 
	`ã°FÆ£
(); 
	`ã°PªviousPass
(); 
	`ã°NŸV™ûœ
(); 
	`ã°NŸTrue
(); 
	`ã°NŸFÆ£
(); 
	`ã°NŸU∆ess
(); 
	`ã°NŸNŸEquÆ
(); 
	`ã°Faû
(); 
	`ã°IsNuŒ
(); 
	`ã°IsNuŒShouldFaûIfNŸ
(); 
	`ã°NŸNuŒShouldFaûIfNULL
(); 
	`ã°Ign‹e
(); 
	`ã°Ign‹eMesßge
(); 
	`ã°NŸEquÆI¡s
(); 
	`ã°NŸEquÆBôs
(); 
	`ã°NŸEquÆUI¡s
(); 
	`ã°NŸEquÆHex8s
(); 
	`ã°NŸEquÆHex8sIfSig√d
(); 
	`ã°NŸEquÆHex16s
(); 
	`ã°NŸEquÆHex16sIfSig√d
(); 
	`ã°NŸEquÆHex32s
(); 
	`ã°NŸEquÆHex32sIfSig√d
(); 
	`ã°EquÆI¡s
(); 
	`ã°EquÆUöts
(); 
	`ã°NŸEquÆ
(); 
	`ã°EquÆHex8s
(); 
	`ã°EquÆHex16s
(); 
	`ã°EquÆHex32s
(); 
	`ã°EquÆBôs
(); 
	`ã°EquÆSh‹ts
(); 
	`ã°EquÆUSh‹ts
(); 
	`ã°EquÆCh¨s
(); 
	`ã°EquÆUCh¨s
(); 
	`ã°EquÆPoöãrs
(); 
	`ã°FlﬂtsWôhöDñè
(); 
	`ã°FlﬂtsNŸWôhöDñè
(); 
	`ã°FlﬂtsEquÆ
(); 
	`ã°FlﬂtsNŸEquÆ
(); 
	`ã°FlﬂtsNŸEquÆNeg©ive1
(); 
	`ã°FlﬂtsNŸEquÆNeg©ive2
(); 
	`ã°I¡sWôhöDñè
(); 
	`ã°I¡sNŸWôhöDñè
(); 
	`ã°UI¡sWôhöDñè
(); 
	`ã°UI¡sNŸWôhöDñè
(); 
	`ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassSmÆlFú°
(); 
	`ã°UI¡sNŸWôhöDñèEvíThoughASig√dI¡WouldPassBigFú°
(); 
	`ã°HEX32sWôhöDñè
(); 
	`ã°HEX32sNŸWôhöDñè
(); 
	`ã°HEX32sNŸWôhöDñèEvíThoughASig√dI¡WouldPass
(); 
	`ã°HEX16sWôhöDñè
(); 
	`ã°HEX16sNŸWôhöDñè
(); 
	`ã°HEX8sWôhöDñè
(); 
	`ã°HEX8sNŸWôhöDñè
(); 
	`ã°EquÆSåögs
(); 
	`ã°NŸEquÆSåög1
(); 
	`ã°NŸEquÆSåög2
(); 
	`ã°NŸEquÆSåög3
(); 
	`ã°NŸEquÆSåög_Ex≥˘edSåögIsNuŒ
(); 
	`ã°NŸEquÆSåög_A˘uÆSåögIsNuŒ
(); 
	`ã°EquÆMem‹y
(); 
	`ã°NŸEquÆMem‹y1
(); 
	`ã°NŸEquÆMem‹y2
(); 
	`ã°NŸEquÆMem‹y3
(); 
	`ã°NŸEquÆMem‹y4
(); 
	`ã°EquÆI¡Aºays
(); 
	`ã°NŸEquÆI¡Aºays1
(); 
	`ã°NŸEquÆI¡Aºays2
(); 
	`ã°NŸEquÆI¡Aºays3
(); 
	`ã°EquÆUI¡Aºays
(); 
	`ã°NŸEquÆUI¡Aºays1
(); 
	`ã°NŸEquÆUI¡Aºays2
(); 
	`ã°NŸEquÆUI¡Aºays3
(); 
	`ã°EquÆHEXAºays
(); 
	`ã°NŸEquÆHEXAºays1
(); 
	`ã°NŸEquÆHEXAºays2
(); 
	`ã°NŸEquÆHEXAºays3
(); 
	`ã°EquÆHEX16Aºays
(); 
	`ã°NŸEquÆHEX16Aºays1
(); 
	`ã°NŸEquÆHEX16Aºays2
(); 
	`ã°NŸEquÆHEX16Aºays3
(); 
	`ã°EquÆHEX8Aºays
(); 
	`ã°NŸEquÆHEX8Aºays1
(); 
	`ã°NŸEquÆHEX8Aºays2
(); 
	`ã°NŸEquÆHEX8Aºays3
(); 
	`ã°EquÆFlﬂtAºays
(); 
	`ã°NŸEquÆFlﬂtAºays1
(); 
	`ã°NŸEquÆFlﬂtAºays2
(); 
	`ã°NŸEquÆFlﬂtAºays3
(); 
	`ã°NŸEquÆFlﬂtAºaysNeg©ive1
(); 
	`ã°NŸEquÆFlﬂtAºaysNeg©ive2
(); 
	`ã°NŸEquÆFlﬂtAºaysNeg©ive3
(); 
	`ã°EquÆMem‹yAºays
(); 
	`ã°NŸEquÆMem‹yAºays1
(); 
	`ã°NŸEquÆMem‹yAºays2
(); 
	`ã°NŸEquÆMem‹yAºays3
(); 
	`ã°PrŸe˘i⁄
(); 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_fixture_Test.c

9 
	~"unôy_fixtuª.h
"

10 
	~"unôy_ouçut_Spy.h
"

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
TEST_GROUP
(
UnôyFixtuª
);

16 
	$TEST_SETUP
(
UnôyFixtuª
)

18 
	}
}

20 
	$TEST_TEAR_DOWN
(
UnôyFixtuª
)

22 
	}
}

24 
	gmy_öt
;

25 * 
	gpoöãr1
 = 0;

26 * 
	gpoöãr2
 = (*)2;

27 * 
	gpoöãr3
 = (*)3;

28 
	göt1
;

29 
	göt2
;

30 
	göt3
;

31 
	göt4
;

33 
	$TEST
(
UnôyFixtuª
, 
PoöãrSëtög
)

35 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, 0);

36 
	`UT_PTR_SET
(
poöãr1
, &
öt1
);

37 
	`UT_PTR_SET
(
poöãr2
, &
öt2
);

38 
	`UT_PTR_SET
(
poöãr3
, &
öt3
);

39 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, &
öt1
);

40 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr2
, &
öt2
);

41 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr3
, &
öt3
);

42 
	`UT_PTR_SET
(
poöãr1
, &
öt4
);

43 
	`UnôyPoöãr_UndoAŒSës
();

44 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr1
, 0);

45 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr2
, (*)2);

46 
	`TEST_ASSERT_POINTERS_EQUAL
(
poöãr3
, (*)3);

47 
	}
}

49 
	$TEST
(
UnôyFixtuª
, 
F‹˚MÆlocFaû
)

51 
	`UnôyMÆloc_MakeMÆlocFaûA·îCou¡
(1);

52 * 
m
 = 
	`mÆloc
(10);

53 
	`CHECK
(
m
);

54 * 
mÁûs
 = 
	`mÆloc
(10);

55 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
mÁûs
);

56 
	`‰ì
(
m
);

57 
	}
}

59 
	$TEST
(
UnôyFixtuª
, 
RóŒocSmÆÀrIsUnch™ged
)

61 * 
m1
 = 
	`mÆloc
(10);

62 * 
m2
 = 
	`ªÆloc
(
m1
, 5);

63 
	`TEST_ASSERT_POINTERS_EQUAL
(
m1
, 
m2
);

64 
	`‰ì
(
m2
);

65 
	}
}

67 
	$TEST
(
UnôyFixtuª
, 
RóŒocSameIsUnch™ged
)

69 * 
m1
 = 
	`mÆloc
(10);

70 * 
m2
 = 
	`ªÆloc
(
m1
, 10);

71 
	`TEST_ASSERT_POINTERS_EQUAL
(
m1
, 
m2
);

72 
	`‰ì
(
m2
);

73 
	}
}

75 
	$TEST
(
UnôyFixtuª
, 
RóŒocL¨gîNìded
)

77 * 
m1
 = 
	`mÆloc
(10);

78 
	`°r˝y
((*)
m1
, "123456789");

79 * 
m2
 = 
	`ªÆloc
(
m1
, 15);

80 
	`CHECK
(
m1
 !
m2
);

81 
	`STRCMP_EQUAL
("123456789", 
m2
);

82 
	`‰ì
(
m2
);

83 
	}
}

85 
	$TEST
(
UnôyFixtuª
, 
RóŒocNuŒPoöãrIsLikeMÆloc
)

87 * 
m
 = 
	`ªÆloc
(0, 15);

88 
	`CHECK
(
m
 != 0);

89 
	`‰ì
(
m
);

90 
	}
}

92 
	$TEST
(
UnôyFixtuª
, 
RóŒocSizeZîoFªesMemAndRëu∫sNuŒPoöãr
)

94 * 
m1
 = 
	`mÆloc
(10);

95 * 
m2
 = 
	`ªÆloc
(
m1
, 0);

96 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
m2
);

97 
	}
}

99 
	$TEST
(
UnôyFixtuª
, 
CÆlocFûlsWôhZîo
)

101 * 
m
 = 
	`ˇŒoc
(3, ());

102 * 
s
 = (*)
m
;

103 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[0]);

104 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[1]);

105 
	`TEST_ASSERT_BYTES_EQUAL
(0, 
s
[2]);

106 
	`‰ì
(
m
);

107 
	}
}

109 * 
	gp1
;

110 * 
	gp2
;

112 
	$TEST
(
UnôyFixtuª
, 
PoöãrSë
)

114 
c1
;

115 
c2
;

116 
√wC1
;

117 
√wC2
;

118 
p1
 = &
c1
;

119 
p2
 = &
c2
;

121 
	`UnôyPoöãr_Inô
(10);

122 
	`UT_PTR_SET
(
p1
, &
√wC1
);

123 
	`UT_PTR_SET
(
p2
, &
√wC2
);

124 
	`TEST_ASSERT_POINTERS_EQUAL
(&
√wC1
, 
p1
);

125 
	`TEST_ASSERT_POINTERS_EQUAL
(&
√wC2
, 
p2
);

126 
	`UnôyPoöãr_UndoAŒSës
();

127 
	`TEST_ASSERT_POINTERS_EQUAL
(&
c1
, 
p1
);

128 
	`TEST_ASSERT_POINTERS_EQUAL
(&
c2
, 
p2
);

129 
	}
}

133 
TEST_GROUP
(
UnôyComm™dO±i⁄s
);

135 
	gßvedVîbo£
;

136 
	gßvedRïót
;

137 c⁄° * 
	gßvedName
;

138 c⁄° * 
	gßvedGroup
;

140 
	$TEST_SETUP
(
UnôyComm™dO±i⁄s
)

142 
ßvedVîbo£
 = 
Unôy
.
Vîbo£
;

143 
ßvedRïót
 = 
Unôy
.
RïótCou¡
;

144 
ßvedName
 = 
Unôy
.
NameFûãr
;

145 
ßvedGroup
 = 
Unôy
.
GroupFûãr
;

146 
	}
}

148 
	$TEST_TEAR_DOWN
(
UnôyComm™dO±i⁄s
)

150 
Unôy
.
Vîbo£
 = 
ßvedVîbo£
;

151 
Unôy
.
RïótCou¡

ßvedRïót
;

152 
Unôy
.
NameFûãr
 = 
ßvedName
;

153 
Unôy
.
GroupFûãr
 = 
ßvedGroup
;

154 
	}
}

157 c⁄° * 
	gnoO±i⁄s
[] = {

161 
	$TEST
(
UnôyComm™dO±i⁄s
, 
DeÁu…O±i⁄s
)

163 
	`UnôyGëComm™dLöeO±i⁄s
(1, 
noO±i⁄s
);

164 
	`TEST_ASSERT_EQUAL
(0, 
Unôy
.
Vîbo£
);

165 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
Unôy
.
GroupFûãr
);

166 
	`TEST_ASSERT_POINTERS_EQUAL
(0, 
Unôy
.
NameFûãr
);

167 
	`TEST_ASSERT_EQUAL
(1, 
Unôy
.
RïótCou¡
);

168 
	}
}

170 c⁄° * 
	gvîbo£
[] = {

175 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Vîbo£
)

177 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(2, 
vîbo£
));

178 
	`TEST_ASSERT_EQUAL
(1, 
Unôy
.
Vîbo£
);

179 
	}
}

181 c⁄° * 
	ggroup
[] = {

186 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByGroup
)

188 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
group
));

189 
	`STRCMP_EQUAL
("grou≤ame", 
Unôy
.
GroupFûãr
);

190 
	}
}

192 c⁄° * 
	g«me
[] = {

197 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByName
)

199 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
«me
));

200 
	`STRCMP_EQUAL
("ã°«me", 
Unôy
.
NameFûãr
);

201 
	}
}

203 c⁄° * 
	gª≥©
[] = {

208 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sDeÁu…Cou¡
)

210 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(2, 
ª≥©
));

211 
	`TEST_ASSERT_EQUAL
(2, 
Unôy
.
RïótCou¡
);

212 
	}
}

214 
	$TEST
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sS≥cificCou¡
)

216 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(3, 
ª≥©
));

217 
	`TEST_ASSERT_EQUAL
(99, 
Unôy
.
RïótCou¡
);

218 
	}
}

220 c⁄° * 
	gmu…ùÀ
[] = {

228 
	$TEST
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄s
)

230 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(8, 
mu…ùÀ
));

231 
	`TEST_ASSERT_EQUAL
(1, 
Unôy
.
Vîbo£
);

232 
	`STRCMP_EQUAL
("grou≤ame", 
Unôy
.
GroupFûãr
);

233 
	`STRCMP_EQUAL
("ã°«me", 
Unôy
.
NameFûãr
);

234 
	`TEST_ASSERT_EQUAL
(98, 
Unôy
.
RïótCou¡
);

235 
	}
}

237 c⁄° * 
	gdashRNŸLa°
[] = {

245 
	$TEST
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄sDashRNŸLa°AndNoVÆueS≥cifõd
)

247 
	`TEST_ASSERT_EQUAL
(0, 
	`UnôyGëComm™dLöeO±i⁄s
(7, 
dashRNŸLa°
));

248 
	`TEST_ASSERT_EQUAL
(1, 
Unôy
.
Vîbo£
);

249 
	`STRCMP_EQUAL
("gggg", 
Unôy
.
GroupFûãr
);

250 
	`STRCMP_EQUAL
("ââ", 
Unôy
.
NameFûãr
);

251 
	`TEST_ASSERT_EQUAL
(2, 
Unôy
.
RïótCou¡
);

252 
	}
}

257 
TEST_GROUP
(
LókDëe˘i⁄
);

259 
	$TEST_SETUP
(
LókDëe˘i⁄
)

261 
	`UnôyOuçutCh¨Spy_Cª©e
(1000);

262 
	}
}

264 
	$TEST_TEAR_DOWN
(
LókDëe˘i⁄
)

266 
	`UnôyOuçutCh¨Spy_De°roy
();

267 
	}
}

269 
	$TEST
(
LókDëe˘i⁄
, 
Dëe˘sLók
)

271 * 
m
 = 
	`mÆloc
(10);

272 
	`UT_PTR_SET
(
ouçutCh¨
, 
UnôyOuçutCh¨Spy_OuçutCh¨
);

273 
	`UnôyMÆloc_EndTe°
();

274 
	`UnôyPoöãr_UndoAŒSës
();

275 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "ThisÅestÜeaks!"));

276 
	`‰ì
(
m
);

277 
Unôy
.
CuºítTe°Faûed
 = 0;

278 
	}
}

280 
	#EXPECT_ABORT_BEGIN
 \

282 i‡(
	`TEST_PROTECT
()) \

283 {

	)

285 
	#EXPECT_ABORT_END
 \

287 }

	)

289 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögFªe
)

291 * 
m
 = 
	`mÆloc
(10);

292 * 
s
 = (*)
m
;

293 
	`UT_PTR_SET
(
ouçutCh¨
, 
UnôyOuçutCh¨Spy_OuçutCh¨
);

294 
s
[10] = 0xff;

296 
	`‰ì
(
m
);

298 
	`UnôyPoöãr_UndoAŒSës
();

299 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected during free()"));

300 
Unôy
.
CuºítTe°Faûed
 = 0;

301 
	}
}

303 
	$TEST
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögRóŒoc
)

305 * 
m
 = 
	`mÆloc
(10);

306 * 
s
 = (*)
m
;

307 
	`UT_PTR_SET
(
ouçutCh¨
, 
UnôyOuçutCh¨Spy_OuçutCh¨
);

308 
s
[10] = 0xff;

310 
m
 = 
	`ªÆloc
(m, 100);

312 
	`UnôyPoöãr_UndoAŒSës
();

313 
	`CHECK
(
	`°r°r
(
	`UnôyOuçutCh¨Spy_Gë
(), "Buffer overrun detected duringÑealloc()"));

314 
	`‰ì
(
m
);

315 
Unôy
.
CuºítTe°Faûed
 = 0;

316 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_fixture_TestRunner.c

2 
	~"unôy_fixtuª.h
"

4 
	$TEST_GROUP_RUNNER
(
UnôyFixtuª
)

6 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
PoöãrSëtög
);

7 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
F‹˚MÆlocFaû
);

8 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSmÆÀrIsUnch™ged
);

9 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSameIsUnch™ged
);

10 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocL¨gîNìded
);

11 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocNuŒPoöãrIsLikeMÆloc
);

12 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
RóŒocSizeZîoFªesMemAndRëu∫sNuŒPoöãr
);

13 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
CÆlocFûlsWôhZîo
);

14 
	`RUN_TEST_CASE
(
UnôyFixtuª
, 
PoöãrSë
);

16 
	}
}

18 
	$TEST_GROUP_RUNNER
(
UnôyComm™dO±i⁄s
)

20 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
DeÁu…O±i⁄s
);

21 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Vîbo£
);

22 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByGroup
);

23 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘Te°ByName
);

24 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sDeÁu…Cou¡
);

25 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
O±i⁄Sñe˘RïótTe°sS≥cificCou¡
);

26 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄s
);

27 
	`RUN_TEST_CASE
(
UnôyComm™dO±i⁄s
, 
Mu…ùÀO±i⁄sDashRNŸLa°AndNoVÆueS≥cifõd
);

28 
	}
}

30 
	$TEST_GROUP_RUNNER
(
LókDëe˘i⁄
)

32 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Dëe˘sLók
);

33 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögFªe
);

34 
	`RUN_TEST_CASE
(
LókDëe˘i⁄
, 
Buf„rOvîrunFoundDurögRóŒoc
);

35 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_output_SpyTest.c

9 
	~"unôy_fixtuª.h
"

10 
	~"unôy_ouçut_Spy.h
"

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	$TEST_GROUP
(
UnôyOuçut
)

16 
	$TEST_SETUP
(
UnôyOuçut
)

19 
	}
}

21 
	$TEST_TEAR_DOWN
(
UnôyOuçut
)

24 
	}
}

26 
	$TEST
(
UnôyOuçut
, 
UnôyOuçutCh¨Spy
)

28 
	`UnôyOuçutCh¨Spy_Cª©e
(20);

29 
ouçutCh¨
 = 
UnôyOuçutCh¨Spy_OuçutCh¨
;

30 
	`UnôyPröt
("Hello World");

31 
ouçutCh¨
 = 
putch¨
;

32 
	`TEST_ASSERT_EQUAL_STRING
("HñlÿW‹ld", 
	`UnôyOuçutCh¨Spy_Gë
());

33 
	`UnôyOuçutCh¨Spy_De°roy
();

34 
	}
}

36 
	$TEST
(
UnôyOuçut
, 
UnôyOuçutCh¨SpyFuŒBuf„r
)

38 
	`UnôyOuçutCh¨Spy_Cª©e
(5);

39 
ouçutCh¨
 = 
UnôyOuçutCh¨Spy_OuçutCh¨
;

40 
	`UnôyPröt
("Hello World");

41 
ouçutCh¨
 = 
putch¨
;

42 
	`TEST_ASSERT_EQUAL_STRING
("Hñl", 
	`UnôyOuçutCh¨Spy_Gë
());

43 
	`UnôyOuçutCh¨Spy_De°roy
();

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_output_SpyTestRunner.c

2 
	~"unôy_fixtuª.h
"

4 
	$TEST_GROUP_RUNNER
(
UnôyOuçut
)

6 
	`RUN_TEST_CASE
(
UnôyOuçut
, 
UnôyOuçutCh¨Spy
);

7 
	`RUN_TEST_CASE
(
UnôyOuçut
, 
UnôyOuçutCh¨SpyFuŒBuf„r
);

8 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\mocks\RuntimeErrorStub.c

1 
	~"Ru¡imeEº‹Stub.h
"

3 c⁄° * 
	gîr‹
 = "No Error";

4 
	$Ru¡imeEº‹Stub_Re£t
()

6 
îr‹
 = "No Error";

7 
	}
}

9 c⁄° * 
	$Ru¡imeEº‹Stub_GëLa°Eº‹
()

11  
îr‹
;

12 
	}
}

14 
	$Ru¡imeEº‹
(c⁄° * 
des¸ùti⁄
, c⁄° * 
fûe
, 
löe
)

16 
îr‹
 = 
des¸ùti⁄
;

17 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\mocks\RuntimeErrorStub.h

1 
	~"comm⁄.h
"

3 
Ru¡imeEº‹Stub_Re£t
();

4 c⁄° * 
Ru¡imeEº‹Stub_GëLa°Eº‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\stdio\SprintfTest.c

9 
	~"unôy_fixtuª.h
"

10 
	~<°dio.h
>

11 
	~<mem‹y.h
>

14 
	$TEST_GROUP
(
•rötf
)

16 
buf„r
[100];

17 c⁄° * 
ex≥˘ed
;

18 
Àngth
;

20 
	$TEST_SETUP
(
•rötf
)

22 
	`mem£t
(
buf„r
, 0xaa, (buffer));

23 
ex≥˘ed
 = "";

24 
Àngth
 = 0;

25 
	}
}

27 
	$TEST_TEAR_DOWN
(
•rötf
)

29 
	}
}

31 
	$ex≥˘
(c⁄° * 
s
)

33 
ex≥˘ed
 = 
s
;

34 
	}
}

36 
	$giví
(
ch¨sWrôãn
)

38 
	`TEST_ASSERT_EQUAL
(
	`°æí
(
ex≥˘ed
), 
ch¨sWrôãn
);

39 
	`TEST_ASSERT_EQUAL_STRING
(
ex≥˘ed
, 
buf„r
);

40 
	`TEST_ASSERT_BYTES_EQUAL
(0xØ, 
buf„r
[
	`°æí
(
ex≥˘ed
) + 1]);

41 
	}
}

46 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

48 
	`ex≥˘
("hey");

49 
	`giví
(
	`•rötf
(
buf„r
, "hey"));

50 
	}
}

52 
	$TEST
(
•rötf
, 
In£πSåög
)

54 
	`ex≥˘
("Hello World\n");

55 
	`giví
(
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

56 
	}
}

61 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

63 
buf„r
[5];

65 
	`TEST_ASSERT_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

66 
	`TEST_ASSERT_EQUAL_STRING
("hey", 
buf„r
);

67 
	}
}

72 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

74 
buf„r
[5];

75 
	`mem£t
(
buf„r
, 0xaa, (buffer));

77 
	`TEST_ASSERT_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

78 
	`TEST_ASSERT_EQUAL_STRING
("hey", 
buf„r
);

79 
	`TEST_ASSERT_BYTES_EQUAL
(0xØ, 
buf„r
[4]);

80 
	}
}

82 
	$TEST
(
•rötf
, 
In£πSåög
)

84 
buf„r
[20];

85 
	`mem£t
(
buf„r
, 0xaa, (buffer));

87 
	`TEST_ASSERT_EQUAL
(12, 
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

88 
	`TEST_ASSERT_EQUAL_STRING
("HñlÿW‹ld\n", 
buf„r
);

89 
	`TEST_ASSERT_BYTES_EQUAL
(0xØ, 
buf„r
[13]);

90 
	}
}

95 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

97 
buf„r
[5];

99 
	`TEST_ASSERT_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

100 
	`TEST_ASSERT_EQUAL_STRING
("hey", 
buf„r
);

101 
	}
}

106 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

108 
buf„r
[5] = "";

109 
	`TEST_ASSERT_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

110 
	`TEST_ASSERT_EQUAL_STRING
("hey", 
buf„r
);

111 
	}
}

116 
	$TEST
(
•rötf
, 
NoF‹m©O≥øti⁄s
)

118 
buf„r
[5];

119 
	`mem£t
(
buf„r
, 0xaa, (buffer));

121 
	`TEST_ASSERT_EQUAL
(3, 
	`•rötf
(
buf„r
, "hey"));

122 
	`TEST_ASSERT_EQUAL_STRING
("hey", 
buf„r
);

123 
	}
}

129 
	$TEST
(
•rötf
, 
In£πSåög
)

131 
buf„r
[20] = "";

133 
	`TEST_ASSERT_EQUAL
(12, 
	`•rötf
(
buf„r
, "%s\n", "Hello World"));

134 
	`TEST_ASSERT_EQUAL_STRING
("HñlÿW‹ld\n", 
buf„r
);

135 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\stdio\SprintfTestRunner.c

9 
	~"unôy_fixtuª.h
"

11 
	$TEST_GROUP_RUNNER
(
•rötf
)

13 
	`RUN_TEST_CASE
(
•rötf
, 
NoF‹m©O≥øti⁄s
);

14 
	`RUN_TEST_CASE
(
•rötf
, 
In£πSåög
);

17 
	`RUN_TEST_CASE
(
•rötf
, 
SåögWôhS∑˚
);

20 
	}
}

	@
1
.
0
969
91360
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WConstants.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WInterrupts.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WMath.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WProgram.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\binary.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_analog.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_digital.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_private.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_pulse.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_shift.c
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Bounce.h
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\main.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\testpoint.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce1.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\main.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp~
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp~
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\ChordedKeyboard\tests\test_press_button.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\AllTests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBuffer.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcher.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcher.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\HelloTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\MockDocumentationTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\MockPrinter.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\Printer.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\Printer.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\PrinterTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\hello.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\examples\ApplicationLib\hello.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReportAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockActualFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockNamedValue.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupport.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupportPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\MockSupport_c.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTestExt\OrderedTest.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\CommandLineArguments.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\CommandLineTestRunner.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\JUnitTestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetector.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\PlatformSpecificFunctions.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\SimpleString.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestFailure.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestHarness.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestHarness_c.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestRegistry.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestResult.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\TestTestingFixture.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\Utest.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\UtestMacros.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\CppUTest\VirtualCall.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\Gcc\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\StarterKit\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\Symbian\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\VisualCpp\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\include\Platforms\VisualCpp\stdint.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriver.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriver.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameC.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameC.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockNamedValue.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupportPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\MockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTestExt\OrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\CommandLineArguments.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\CommandLineTestRunner.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\JUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakDetector.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\SimpleString.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestHarness_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestRegistry.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\TestResult.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\CppUTest\Utest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Iar\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCFile.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCFile.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCppFile.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\AllocationInCppFile.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CommandLineArgumentsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CommandLineTestRunnerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\Extensions\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\JUnitOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakAllocatorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakDetectorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\MemoryLeakWarningTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\NullTestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\PluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\SetPluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\SimpleStringTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestFailureTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestHarness_cTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestHarness_cTestCFile.c
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestInstallerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestRegistryTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\TestResultTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\BrandNew\CppUTest\tests\UtestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\keyevent.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\keyevent.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\realtime.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\realtime.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\keyevent.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\keyevent.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_keyevent.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\time.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\time.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\AllTests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\#HelloTest.cpp#
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\#PrinterTest.cpp#
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\HelloTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockPrinter.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\PrinterTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineArguments.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineTestRunner.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\OrderedTest.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\SimpleStringExtensions.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Extensions\SimpleStringFromStdint.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Failure.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\JUnitTestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetector.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\PlatformSpecificFunctions.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\SimpleString.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness_c.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestRegistry.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestResult.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestTestingFixture.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Utest.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\UtestMacros.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\VirtualCall.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Gcc\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\StarterKit\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Symbian\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\XTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineArguments.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineTestRunner.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\OrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\SimpleStringExtensions.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Extensions\SimpleStringFromStdint.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Failure.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\JUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakDetector.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\SimpleString.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestHarness_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestRegistry.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestResult.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Utest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Iar\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineArgumentsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineTestRunnerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\FailureTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\JUnitOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakAllocatorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakDetectorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakWarningTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\NullTestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\PluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SetPluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SimpleStringTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestInstallerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestRegistryTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestResultTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\UtestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\AllTests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBuffer.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcher.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcher.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\EventDispatcherTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\ExamplesNewOverrides.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\HelloTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\MockDocumentationTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\MockPrinter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\Printer.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\Printer.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\PrinterTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\hello.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\examples\ApplicationLib\hello.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\CodeMemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReportAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MemoryReporterPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockActualFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockExpectedFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockExpectedFunctionsList.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockNamedValue.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupport.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupportPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\MockSupport_c.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTestExt\OrderedTest.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\CommandLineArguments.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\CommandLineTestRunner.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\JUnitTestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetector.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetectorMallocMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakDetectorNewMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\MemoryLeakWarningPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\PlatformSpecificFunctions.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\SimpleString.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestHarness.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestHarness_c.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestRegistry.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestResult.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\TestTestingFixture.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\Utest.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\UtestMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\CppUTest\VirtualCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\Gcc\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\StarterKit\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\Symbian\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\VisualCpp\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\include\Platforms\VisualCpp\stdint.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\CodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockNamedValue.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupportPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\MockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTestExt\OrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\CommandLineArguments.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\CommandLineTestRunner.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\JUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakDetector.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\MemoryLeakWarningPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\Nulls\NullJUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\SimpleString.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestHarness_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestRegistry.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\TestResult.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\CppUTest\Utest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Gcc\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Iar\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\StarterKit\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\Symbian\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\src\Platforms\VisualCpp\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCFile.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCFile.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCppFile.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\AllocationInCppFile.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CommandLineArgumentsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CommandLineTestRunnerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_cCFile.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestMockSupport_cCFile.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\CppUTestExt\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\SimpleStringExtensionsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\SimpleStringFromStdintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\Extensions\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\JUnitOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakAllocatorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakDetectorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakOperatorOverloadsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\MemoryLeakWarningTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\NullTestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\PluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\SetPluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\SimpleStringTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestFailureTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestHarness_cTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestHarness_cTestCFile.c
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestInstallerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestRegistryTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\TestResultTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\CppUTest-v2.2d\tests\UtestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\AllTests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBuffer.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcher.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcher.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\HelloTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\MockPrinter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\Printer.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\Printer.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\PrinterTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\hello.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\examples\ApplicationLib\hello.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReportAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockActualFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\MockSupport.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTestExt\OrderedTest.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\CommandLineArguments.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\CommandLineTestRunner.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\JUnitTestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetector.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\PlatformSpecificFunctions.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\SimpleString.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestHarness.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestHarness_c.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestRegistry.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestResult.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\TestTestingFixture.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\Utest.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\UtestMacros.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\CppUTest\VirtualCall.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\Gcc\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\StarterKit\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\Symbian\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\VisualCpp\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\include\Platforms\VisualCpp\stdint.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\MockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTestExt\OrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\CommandLineArguments.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\CommandLineTestRunner.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\JUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakDetector.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\SimpleString.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestHarness_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestRegistry.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\TestResult.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\CppUTest\Utest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Iar\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCFile.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCFile.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCppFile.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\AllocationInCppFile.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CommandLineArgumentsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CommandLineTestRunnerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestMockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\Extensions\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\JUnitOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakAllocatorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakDetectorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\MemoryLeakWarningTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\NullTestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\PluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\SetPluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\SimpleStringTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestFailureTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestHarness_cTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestInstallerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestRegistryTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\TestResultTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\CppUTest\tests\UtestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\OrphanCode\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\include\LedDriver\LedDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\src\LedDriver\LedDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\tests\LedDriver\LedDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\AllTests.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\LedDriver\LedDriverTest.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\SandBox\unity\LedDriver\LedDriverTestRunner.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\LightSwitch.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\RandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\HomeAutomation\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\Flash.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\IO.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\VendorsReferenceDriver\c2414.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\VendorsReferenceDriver\c2414FlashReadAndWrite.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\IO\m28w160ect.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\LedDriver\LedDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\dvr\DvRecorder.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\RuntimeError.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\Utils.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\util\common.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\include\zune\RtcTime.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\FormatOutputSpyTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIO.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIO.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\MockIOTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\RuntimeErrorStub.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\RuntimeErrorStub.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\cmock\MockIO.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\mocks\cmock\MockIO.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\Action\Action.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\Action\CallbackAction.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BFwAdaptor.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BFwAdaptor.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFramework.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFramework.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFrameworkClient.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\BigFrameworkClient.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurCode.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurCode.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceClient.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceClient.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceRequests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\OurServiceRequests.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\StartOurCode.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\BigFramework\StartOurCode.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\IoPort.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\c2414.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\FlashDriver\c2414ReadAndWrite.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\HomeAutomation\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\HomeAutomation\RandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\IO\Flash.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\LedDriver\LedDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\dvr\DvRecorder.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\eyeMovement\eye.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\util\CircularBuffer.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\util\Utils.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\src\zune\RtcTime.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\LightSwitch.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\HomeAutomation\RandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\OurPrintf.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\include\util\common.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightController.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeLightControllerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeRandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeRandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfSpy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfSpy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\mocks\OurPrintfTestSpy.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\HomeAutomation\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\HomeAutomation\RandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\src\util\OurPrintf.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\LightSchedulerRandomizeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t0\tests\HomeAutomation\RandomMinuteTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\LightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\HomeAutomation\RandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\AcmeWirelessLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\MemMappedLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\devices\X10LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\util\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\include\util\common.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeRandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeRandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\mocks\LightDriverSpyTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\LightController.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\HomeAutomation\RandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\AcmeWirelessLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\MemMappedLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\devices\X10LightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\TimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\TimeService_Helpers.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\src\util\common.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\LightControllerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\HomeAutomation\RandomMinuteTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\AcmeWirelessLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\MemMappedLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\devices\X10LightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t1\tests\util\TimeServiceHelpersTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\LightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\HomeAutomation\RandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\AcmeWirelessLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\MemMappedLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\devices\X10LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\RuntimeError.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\include\util\common.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeRandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeRandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\LightDriverSpyTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\RuntimeErrorStub.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\mocks\RuntimeErrorStub.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\LightController.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\HomeAutomation\RandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\AcmeWirelessLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\MemMappedLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\devices\X10LightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\Time.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\TimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\src\util\common.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\LightControllerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\AcmeWirelessLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\MemMappedLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\devices\X10LightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t2\tests\util\TimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\LightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\LightScheduler.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\HomeAutomation\RandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\AcmeWirelessLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\MemMappedLightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\devices\X10LightDriver.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\util\TimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\include\util\common.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeRandomMinute.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeRandomMinute.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\mocks\LightDriverSpyTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\LightController.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\LightScheduler.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\HomeAutomation\RandomMinuteGenerator.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\AcmeWirelessLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\LightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\MemMappedLightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\devices\X10LightDriver.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\TimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\TimeService_Helpers.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\src\util\common.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\LightControllerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\AcmeWirelessLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\LightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\MemMappedLightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\t3\tests\devices\X10LightDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\FAKE2.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Fakec2414ReadAndWrite.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Fakec2414ReadAndWrite.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\FlashTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\IoPortTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\MockC2414ReadAndWrite.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\Mockc2414ReadAndWrite.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\FlashDriver\StubC2414ReadAndWrite.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightController.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightController.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeLightControllerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeService.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeService.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\FakeTimeServiceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\LightSchedulerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\HomeAutomation\RandomMinuteGeneratorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\IO\FlashTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\IO\LegacyFlashTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\LedDriver\LedDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\TestRefactor\TestHelper.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\dvr\DvRecorderTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\stdio\SprintfTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\util\CircularBufferPrintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\util\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\tests\zune\RtcTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\AllTests.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\LedDriver\LedDriverTest.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\LedDriver\LedDriverTestRunner.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture_internals.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_fixture_malloc_overrides.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_internals.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\include\unity_output_Spy.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity_fixture.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\src\unity_output_Spy.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\testMain\AllTests.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity_fixture.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\testunity_runner.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_fixture_Test.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_fixture_TestRunner.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_output_SpyTest.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\harness\tests\unity_output_SpyTestRunner.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\mocks\RuntimeErrorStub.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\mocks\RuntimeErrorStub.h
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\stdio\SprintfTest.c
C:\work\workspace\EmbeddedTddWorkshop\docs\jgade-code\code\unity\stdio\SprintfTestRunner.c
