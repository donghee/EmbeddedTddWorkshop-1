cscope 15 C:\work\workspace\EmbeddedTddWorkshop"               0000531382
	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<öây≥s.h
>

25 
	~"wúög.h
"

26 
	~"wúög_¥iv©e.h
"

28 
	~"H¨dw¨eSîül.h
"

34 
	#RX_BUFFER_SIZE
 128

	)

36 
	srög_buf„r
 {

37 
	mbuf„r
[
RX_BUFFER_SIZE
];

38 
	mhód
;

39 
	mèû
;

42 
rög_buf„r
 
	grx_buf„r
 = { { 0 }, 0, 0 };

44 #i‡
deföed
(
__AVR_ATmega1280__
)

45 
rög_buf„r
 
	grx_buf„r1
 = { { 0 }, 0, 0 };

46 
rög_buf„r
 
	grx_buf„r2
 = { { 0 }, 0, 0 };

47 
rög_buf„r
 
	grx_buf„r3
 = { { 0 }, 0, 0 };

50 
ölöe
 
	$°‹e_ch¨
(
c
, 
rög_buf„r
 *
rx_buf„r
)

52 
i
 = (
rx_buf„r
->
hód
 + 1Ë% 
RX_BUFFER_SIZE
;

58 i‡(
i
 !
rx_buf„r
->
èû
) {

59 
rx_buf„r
->
buf„r
[rx_buf„r->
hód
] = 
c
;

60 
rx_buf„r
->
hód
 = 
i
;

62 
	}
}

64 #i‡
deföed
(
__AVR_ATmega1280__
)

66 
	$SIGNAL
(
SIG_USART0_RECV
)

68 
c
 = 
UDR0
;

69 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

70 
	}
}

72 
	$SIGNAL
(
SIG_USART1_RECV
)

74 
c
 = 
UDR1
;

75 
	`°‹e_ch¨
(
c
, &
rx_buf„r1
);

76 
	}
}

78 
	$SIGNAL
(
SIG_USART2_RECV
)

80 
c
 = 
UDR2
;

81 
	`°‹e_ch¨
(
c
, &
rx_buf„r2
);

82 
	}
}

84 
	$SIGNAL
(
SIG_USART3_RECV
)

86 
c
 = 
UDR3
;

87 
	`°‹e_ch¨
(
c
, &
rx_buf„r3
);

88 
	}
}

92 #i‡
deföed
(
__AVR_ATmega8__
)

93 
	$SIGNAL
(
SIG_UART_RECV
)

95 
	$SIGNAL
(
USART_RX_ve˘
)

98 #i‡
	`deföed
(
__AVR_ATmega8__
)

99 
c
 = 
UDR
;

101 
c
 = 
UDR0
;

103 
	`°‹e_ch¨
(
c
, &
rx_buf„r
);

104 
	}
}

110 
	gH¨dw¨eSîül
::
	$H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

111 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

112 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

113 vﬁ©ûê
uöt8_t
 *
udr
,

114 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
)

116 
_rx_buf„r
 = 
rx_buf„r
;

117 
_ubºh
 = 
ubºh
;

118 
_ubºl
 = 
ubºl
;

119 
_uc§a
 = 
uc§a
;

120 
_uc§b
 = 
uc§b
;

121 
_udr
 = 
udr
;

122 
_rxí
 = 
rxí
;

123 
_txí
 = 
txí
;

124 
_rxcõ
 = 
rxcõ
;

125 
_udª
 = 
udª
;

126 
_u2x
 = 
u2x
;

127 
	}
}

131 
	gH¨dw¨eSîül
::
	$begö
(
baud
)

133 
uöt16_t
 
baud_£âög
;

134 
boﬁ
 
u£_u2x
;

137 i‡(
baud
 > 
F_CPU
 / 16) {

138 
u£_u2x
 = 
åue
;

144 
uöt8_t
 
n⁄u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(16*(((F_CPU/8/
baud
-1)/2)+1))*255)/baud)));

145 
uöt8_t
 
u2x_baud_îr‹
 = 
	`abs
(()(255-((
F_CPU
/(8*(((F_CPU/4/
baud
-1)/2)+1))*255)/baud)));

148 
u£_u2x
 = (
n⁄u2x_baud_îr‹
 > 
u2x_baud_îr‹
);

151 i‡(
u£_u2x
) {

152 *
_uc§a
 = 1 << 
_u2x
;

153 
baud_£âög
 = (
F_CPU
 / 4 / 
baud
 - 1) / 2;

155 *
_uc§a
 = 0;

156 
baud_£âög
 = (
F_CPU
 / 8 / 
baud
 - 1) / 2;

160 *
_ubºh
 = 
baud_£âög
 >> 8;

161 *
_ubºl
 = 
baud_£âög
;

163 
	`sbi
(*
_uc§b
, 
_rxí
);

164 
	`sbi
(*
_uc§b
, 
_txí
);

165 
	`sbi
(*
_uc§b
, 
_rxcõ
);

166 
	}
}

168 
uöt8_t
 
	gH¨dw¨eSîül
::
	$avaûabÀ
()

170  (
RX_BUFFER_SIZE
 + 
_rx_buf„r
->
hód
 - _rx_buf„r->
èû
) % RX_BUFFER_SIZE;

171 
	}
}

173 
	gH¨dw¨eSîül
::
	$ªad
()

176 i‡(
_rx_buf„r
->
hód
 =_rx_buf„r->
èû
) {

179 
c
 = 
_rx_buf„r
->
buf„r
[_rx_buf„r->
èû
];

180 
_rx_buf„r
->
èû
 = (_rx_buf„r->èû + 1Ë% 
RX_BUFFER_SIZE
;

181  
c
;

183 
	}
}

185 
	gH¨dw¨eSîül
::
	$Êush
()

196 
_rx_buf„r
->
hód
 = _rx_buf„r->
èû
;

197 
	}
}

199 
	gH¨dw¨eSîül
::
	$wrôe
(
uöt8_t
 
c
)

201 !((*
_uc§a
Ë& (1 << 
_udª
)))

204 *
_udr
 = 
c
;

205 
	}
}

209 #i‡
deföed
(
__AVR_ATmega8__
)

210 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRRH
, &
UBRRL
, &
UCSRA
, &
UCSRB
, &
UDR
, 
RXEN
, 
TXEN
, 
RXCIE
, 
UDRE
, 
U2X
);

212 
H¨dw¨eSîül
 
Sîül
(&
rx_buf„r
, &
UBRR0H
, &
UBRR0L
, &
UCSR0A
, &
UCSR0B
, &
UDR0
, 
RXEN0
, 
TXEN0
, 
RXCIE0
, 
UDRE0
, 
U2X0
);

215 #i‡
deföed
(
__AVR_ATmega1280__
)

216 
H¨dw¨eSîül
 
Sîül1
(&
rx_buf„r1
, &
UBRR1H
, &
UBRR1L
, &
UCSR1A
, &
UCSR1B
, &
UDR1
, 
RXEN1
, 
TXEN1
, 
RXCIE1
, 
UDRE1
, 
U2X1
);

217 
H¨dw¨eSîül
 
Sîül2
(&
rx_buf„r2
, &
UBRR2H
, &
UBRR2L
, &
UCSR2A
, &
UCSR2B
, &
UDR2
, 
RXEN2
, 
TXEN2
, 
RXCIE2
, 
UDRE2
, 
U2X2
);

218 
H¨dw¨eSîül
 
Sîül3
(&
rx_buf„r3
, &
UBRR3H
, &
UBRR3L
, &
UCSR3A
, &
UCSR3B
, &
UDR3
, 
RXEN3
, 
TXEN3
, 
RXCIE3
, 
UDRE3
, 
U2X3
);

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.h

20 #i‚de‡
H¨dw¨eSîül_h


21 
	#H¨dw¨eSîül_h


	)

23 
	~<öây≥s.h
>

25 
	~"Pröt.h
"

27 
	grög_buf„r
;

29 ˛as†
	cH¨dw¨eSîül
 : 
public
 
Pröt


31 
¥iv©e
:

32 
rög_buf„r
 *
_rx_buf„r
;

33 vﬁ©ûê
uöt8_t
 *
	m_ubºh
;

34 vﬁ©ûê
uöt8_t
 *
	m_ubºl
;

35 vﬁ©ûê
uöt8_t
 *
	m_uc§a
;

36 vﬁ©ûê
uöt8_t
 *
	m_uc§b
;

37 vﬁ©ûê
uöt8_t
 *
	m_udr
;

38 
uöt8_t
 
	m_rxí
;

39 
uöt8_t
 
	m_txí
;

40 
uöt8_t
 
	m_rxcõ
;

41 
uöt8_t
 
	m_udª
;

42 
uöt8_t
 
	m_u2x
;

43 
	mpublic
:

44 
H¨dw¨eSîül
(
rög_buf„r
 *
rx_buf„r
,

45 vﬁ©ûê
uöt8_t
 *
ubºh
, vﬁ©ûêuöt8_à*
ubºl
,

46 vﬁ©ûê
uöt8_t
 *
uc§a
, vﬁ©ûêuöt8_à*
uc§b
,

47 vﬁ©ûê
uöt8_t
 *
udr
,

48 
uöt8_t
 
rxí
, uöt8_à
txí
, uöt8_à
rxcõ
, uöt8_à
udª
, uöt8_à
u2x
);

49 
begö
();

50 
uöt8_t
 
avaûabÀ
();

51 
ªad
();

52 
Êush
();

53 
vútuÆ
 
wrôe
(
uöt8_t
);

54 
usög
 
	mPröt
::
wrôe
;

57 
H¨dw¨eSîül
 
Sîül
;

59 #i‡
deföed
(
__AVR_ATmega1280__
)

60 
H¨dw¨eSîül
 
Sîül1
;

61 
H¨dw¨eSîül
 
Sîül2
;

62 
H¨dw¨eSîül
 
Sîül3
;

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.cpp

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<m©h.h
>

25 
	~"wúög.h
"

27 
	~"Pröt.h
"

32 
	gPröt
::
	$wrôe
(c⁄° *
°r
)

34 *
°r
)

35 
	`wrôe
(*
°r
++);

36 
	}
}

39 
	gPröt
::
	$wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

41 
size
--)

42 
	`wrôe
(*
buf„r
++);

43 
	}
}

45 
	gPröt
::
	$¥öt
(
uöt8_t
 
b
)

47 
this
->
	`wrôe
(
b
);

48 
	}
}

50 
	gPröt
::
	$¥öt
(
c
)

52 
	`¥öt
((
byã
Ë
c
);

53 
	}
}

55 
	gPröt
::
	$¥öt
(c⁄° 
°r
[])

57 
	`wrôe
(
°r
);

58 
	}
}

60 
	gPröt
::
	$¥öt
(
n
)

62 
	`¥öt
((Ë
n
);

63 
	}
}

65 
	gPröt
::
	$¥öt
(
n
)

67 
	`¥öt
((Ë
n
);

68 
	}
}

70 
	gPröt
::
	$¥öt
(
n
)

72 i‡(
n
 < 0) {

73 
	`¥öt
('-');

74 
n
 = -n;

76 
	`¥ötNumbî
(
n
, 10);

77 
	}
}

79 
	gPröt
::
	$¥öt
(
n
)

81 
	`¥ötNumbî
(
n
, 10);

82 
	}
}

84 
	gPröt
::
	$¥öt
(
n
, 
ba£
)

86 i‡(
ba£
 == 0)

87 
	`¥öt
((Ë
n
);

88 i‡(
ba£
 == 10)

89 
	`¥öt
(
n
);

91 
	`¥ötNumbî
(
n
, 
ba£
);

92 
	}
}

94 
	gPröt
::
	$¥öt
(
n
)

96 
	`¥ötFlﬂt
(
n
, 2);

97 
	}
}

99 
	gPröt
::
	$¥öén
()

101 
	`¥öt
('\r');

102 
	`¥öt
('\n');

103 
	}
}

105 
	gPröt
::
	$¥öén
(
c
)

107 
	`¥öt
(
c
);

108 
	`¥öén
();

109 
	}
}

111 
	gPröt
::
	$¥öén
(c⁄° 
c
[])

113 
	`¥öt
(
c
);

114 
	`¥öén
();

115 
	}
}

117 
	gPröt
::
	$¥öén
(
uöt8_t
 
b
)

119 
	`¥öt
(
b
);

120 
	`¥öén
();

121 
	}
}

123 
	gPröt
::
	$¥öén
(
n
)

125 
	`¥öt
(
n
);

126 
	`¥öén
();

127 
	}
}

129 
	gPröt
::
	$¥öén
(
n
)

131 
	`¥öt
(
n
);

132 
	`¥öén
();

133 
	}
}

135 
	gPröt
::
	$¥öén
(
n
)

137 
	`¥öt
(
n
);

138 
	`¥öén
();

139 
	}
}

141 
	gPröt
::
	$¥öén
(
n
)

143 
	`¥öt
(
n
);

144 
	`¥öén
();

145 
	}
}

147 
	gPröt
::
	$¥öén
(
n
, 
ba£
)

149 
	`¥öt
(
n
, 
ba£
);

150 
	`¥öén
();

151 
	}
}

153 
	gPröt
::
	$¥öén
(
n
)

155 
	`¥öt
(
n
);

156 
	`¥öén
();

157 
	}
}

161 
	gPröt
::
	$¥ötNumbî
(
n
, 
uöt8_t
 
ba£
)

163 
buf
[8 * ()];

164 
i
 = 0;

166 i‡(
n
 == 0) {

167 
	`¥öt
('0');

171 
n
 > 0) {

172 
buf
[
i
++] = 
n
 % 
ba£
;

173 
n
 /
ba£
;

176 ; 
i
 > 0; i--)

177 
	`¥öt
((Ë(
buf
[
i
 - 1] < 10 ?

178 '0' + 
buf
[
i
 - 1] :

179 'A' + 
buf
[
i
 - 1] - 10));

180 
	}
}

182 
	gPröt
::
	$¥ötFlﬂt
(
numbî
, 
uöt8_t
 
digôs
)

185 i‡(
numbî
 < 0.0)

187 
	`¥öt
('-');

188 
numbî
 = -number;

192 
roundög
 = 0.5;

193 
uöt8_t
 
i
=0; i<
digôs
; ++i)

194 
roundög
 /= 10.0;

196 
numbî
 +
roundög
;

199 
öt_∑π
 = ()
numbî
;

200 
ªmaödî
 = 
numbî
 - ()
öt_∑π
;

201 
	`¥öt
(
öt_∑π
);

204 i‡(
digôs
 > 0)

205 
	`¥öt
(".");

208 
digôs
-- > 0)

210 
ªmaödî
 *= 10.0;

211 
toPröt
 = (
ªmaödî
);

212 
	`¥öt
(
toPröt
);

213 
ªmaödî
 -
toPröt
;

215 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.h

20 #i‚de‡
Pröt_h


21 
	#Pröt_h


	)

23 
	~<öây≥s.h
>

24 
	~<°dio.h
>

26 
	#DEC
 10

	)

27 
	#HEX
 16

	)

28 
	#OCT
 8

	)

29 
	#BIN
 2

	)

30 
	#BYTE
 0

	)

32 ˛as†
	cPröt


34 
	m¥iv©e
:

35 
¥ötNumbî
(, 
uöt8_t
);

36 
¥ötFlﬂt
(, 
uöt8_t
);

37 
	mpublic
:

38 
vútuÆ
 
wrôe
(
uöt8_t
) = 0;

39 
vútuÆ
 
wrôe
(c⁄° *
°r
);

40 
vútuÆ
 
wrôe
(c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
);

41 
¥öt
();

42 
¥öt
(const []);

43 
¥öt
(
uöt8_t
);

44 
¥öt
();

45 
¥öt
();

46 
¥öt
();

47 
¥öt
();

48 
¥öt
(, );

49 
¥öt
();

50 
¥öén
();

51 
¥öén
();

52 
¥öén
(const []);

53 
¥öén
(
uöt8_t
);

54 
¥öén
();

55 
¥öén
();

56 
¥öén
();

57 
¥öén
();

58 
¥öén
(, );

59 
¥öén
();

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WConstants.h

1 
	~"wúög.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WInterrupts.c

26 
	~<öây≥s.h
>

27 
	~<avr/io.h
>

28 
	~<avr/öãºu±.h
>

29 
	~<avr/pgm•a˚.h
>

30 
	~<°dio.h
>

32 
	~"WC⁄°™ts.h
"

33 
	~"wúög_¥iv©e.h
"

35 vﬁ©ûê
voidFuncPå
 
	götFunc
[
EXTERNAL_NUM_INTERRUPTS
];

38 #i‡
deföed
(
__AVR_ATmega8__
)

39 
	#EICRA
 
MCUCR


	)

40 
	#EIMSK
 
GICR


	)

43 
©èchI¡îru±
(
uöt8_t
 
öãºu±Num
, (*
u£rFunc
)(), 
mode
) {

44 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

45 
ötFunc
[
öãºu±Num
] = 
u£rFunc
;

54 
öãºu±Num
) {

55 #i‡
	`deföed
(
__AVR_ATmega1280__
)

57 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

58 
EIMSK
 |(1 << 
INT0
);

61 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

62 
EIMSK
 |(1 << 
INT1
);

65 
EICRA
 = (EICRA & ~((1 << 
ISC20
Ë| (1 << 
ISC21
))Ë| (
mode
 << ISC20);

66 
EIMSK
 |(1 << 
INT2
);

69 
EICRA
 = (EICRA & ~((1 << 
ISC30
Ë| (1 << 
ISC31
))Ë| (
mode
 << ISC30);

70 
EIMSK
 |(1 << 
INT3
);

73 
EICRB
 = (EICRB & ~((1 << 
ISC40
Ë| (1 << 
ISC41
))Ë| (
mode
 << ISC40);

74 
EIMSK
 |(1 << 
INT4
);

77 
EICRB
 = (EICRB & ~((1 << 
ISC50
Ë| (1 << 
ISC51
))Ë| (
mode
 << ISC50);

78 
EIMSK
 |(1 << 
INT5
);

81 
EICRB
 = (EICRB & ~((1 << 
ISC60
Ë| (1 << 
ISC61
))Ë| (
mode
 << ISC60);

82 
EIMSK
 |(1 << 
INT6
);

85 
EICRB
 = (EICRB & ~((1 << 
ISC70
Ë| (1 << 
ISC71
))Ë| (
mode
 << ISC70);

86 
EIMSK
 |(1 << 
INT7
);

90 
EICRA
 = (EICRA & ~((1 << 
ISC00
Ë| (1 << 
ISC01
))Ë| (
mode
 << ISC00);

91 
EIMSK
 |(1 << 
INT0
);

94 
EICRA
 = (EICRA & ~((1 << 
ISC10
Ë| (1 << 
ISC11
))Ë| (
mode
 << ISC10);

95 
EIMSK
 |(1 << 
INT1
);

100 
	}
}

102 
	$dëachI¡îru±
(
uöt8_t
 
öãºu±Num
) {

103 if(
öãºu±Num
 < 
EXTERNAL_NUM_INTERRUPTS
) {

107 
öãºu±Num
) {

108 #i‡
	`deföed
(
__AVR_ATmega1280__
)

110 
EIMSK
 &~(1 << 
INT0
);

113 
EIMSK
 &~(1 << 
INT1
);

116 
EIMSK
 &~(1 << 
INT2
);

119 
EIMSK
 &~(1 << 
INT3
);

122 
EIMSK
 &~(1 << 
INT4
);

125 
EIMSK
 &~(1 << 
INT5
);

128 
EIMSK
 &~(1 << 
INT6
);

131 
EIMSK
 &~(1 << 
INT7
);

135 
EIMSK
 &~(1 << 
INT0
);

138 
EIMSK
 &~(1 << 
INT1
);

143 
ötFunc
[
öãºu±Num
] = 0;

145 
	}
}

153 #i‡
deföed
(
__AVR_ATmega1280__
)

155 
	$SIGNAL
(
INT0_ve˘
) {

156 if(
ötFunc
[
EXTERNAL_INT_2
])

157 
ötFunc
[
EXTERNAL_INT_2
]();

158 
	}
}

160 
	$SIGNAL
(
INT1_ve˘
) {

161 if(
ötFunc
[
EXTERNAL_INT_3
])

162 
ötFunc
[
EXTERNAL_INT_3
]();

163 
	}
}

165 
	$SIGNAL
(
INT2_ve˘
) {

166 if(
ötFunc
[
EXTERNAL_INT_4
])

167 
ötFunc
[
EXTERNAL_INT_4
]();

168 
	}
}

170 
	$SIGNAL
(
INT3_ve˘
) {

171 if(
ötFunc
[
EXTERNAL_INT_5
])

172 
ötFunc
[
EXTERNAL_INT_5
]();

173 
	}
}

175 
	$SIGNAL
(
INT4_ve˘
) {

176 if(
ötFunc
[
EXTERNAL_INT_0
])

177 
ötFunc
[
EXTERNAL_INT_0
]();

178 
	}
}

180 
	$SIGNAL
(
INT5_ve˘
) {

181 if(
ötFunc
[
EXTERNAL_INT_1
])

182 
ötFunc
[
EXTERNAL_INT_1
]();

183 
	}
}

185 
	$SIGNAL
(
INT6_ve˘
) {

186 if(
ötFunc
[
EXTERNAL_INT_6
])

187 
ötFunc
[
EXTERNAL_INT_6
]();

188 
	}
}

190 
	$SIGNAL
(
INT7_ve˘
) {

191 if(
ötFunc
[
EXTERNAL_INT_7
])

192 
ötFunc
[
EXTERNAL_INT_7
]();

193 
	}
}

197 
	$SIGNAL
(
INT0_ve˘
) {

198 if(
ötFunc
[
EXTERNAL_INT_0
])

199 
ötFunc
[
EXTERNAL_INT_0
]();

200 
	}
}

202 
	$SIGNAL
(
INT1_ve˘
) {

203 if(
ötFunc
[
EXTERNAL_INT_1
])

204 
ötFunc
[
EXTERNAL_INT_1
]();

205 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WMath.cpp

27 
	~"°dlib.h
"

30 
	$øndomSìd
(
£ed
)

32 i‡(
£ed
 != 0) {

33 
	`§™dom
(
£ed
);

35 
	}
}

37 
	$øndom
(
howbig
)

39 i‡(
howbig
 == 0) {

42  
	`øndom
(Ë% 
howbig
;

43 
	}
}

45 
	$øndom
(
howsmÆl
, 
howbig
)

47 i‡(
howsmÆl
 >
howbig
) {

48  
howsmÆl
;

50 
diff
 = 
howbig
 - 
howsmÆl
;

51  
	`øndom
(
diff
Ë+ 
howsmÆl
;

52 
	}
}

54 
	$m≠
(
x
, 
ö_mö
, 
ö_max
, 
out_mö
, 
out_max
)

56  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

57 
	}
}

59 
	$makeW‹d
(
w
Ë{  w; 
	}
}

60 
	$makeW‹d
(
h
, 
l
Ë{  (h << 8Ë|Ü; 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WProgram.h

1 #i‚de‡
WProgøm_h


2 
	#WProgøm_h


	)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<m©h.h
>

8 
	~<avr/öãºu±.h
>

10 
	~"wúög.h
"

12 #ifde‡
__˝lu•lus


13 
	~"H¨dw¨eSîül.h
"

15 
uöt16_t
 
makeW‹d
(uöt16_à
w
);

16 
uöt16_t
 
makeW‹d
(
byã
 
h
, byã 
l
);

18 
	#w‹d
(...Ë
	`makeW‹d
(
__VA_ARGS__
)

	)

20 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
 = 1000000L);

23 
øndom
();

24 
øndom
(, );

25 
øndomSìd
();

26 
m≠
(, , , , );

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\binary.h

1 #i‚de‡
Bö¨y_h


2 
	#Bö¨y_h


	)

4 
	#B0
 0

	)

5 
	#B00
 0

	)

6 
	#B000
 0

	)

7 
	#B0000
 0

	)

8 
	#B00000
 0

	)

9 
	#B000000
 0

	)

10 
	#B0000000
 0

	)

11 
	#B00000000
 0

	)

12 
	#B1
 1

	)

13 
	#B01
 1

	)

14 
	#B001
 1

	)

15 
	#B0001
 1

	)

16 
	#B00001
 1

	)

17 
	#B000001
 1

	)

18 
	#B0000001
 1

	)

19 
	#B00000001
 1

	)

20 
	#B10
 2

	)

21 
	#B010
 2

	)

22 
	#B0010
 2

	)

23 
	#B00010
 2

	)

24 
	#B000010
 2

	)

25 
	#B0000010
 2

	)

26 
	#B00000010
 2

	)

27 
	#B11
 3

	)

28 
	#B011
 3

	)

29 
	#B0011
 3

	)

30 
	#B00011
 3

	)

31 
	#B000011
 3

	)

32 
	#B0000011
 3

	)

33 
	#B00000011
 3

	)

34 
	#B100
 4

	)

35 
	#B0100
 4

	)

36 
	#B00100
 4

	)

37 
	#B000100
 4

	)

38 
	#B0000100
 4

	)

39 
	#B00000100
 4

	)

40 
	#B101
 5

	)

41 
	#B0101
 5

	)

42 
	#B00101
 5

	)

43 
	#B000101
 5

	)

44 
	#B0000101
 5

	)

45 
	#B00000101
 5

	)

46 
	#B110
 6

	)

47 
	#B0110
 6

	)

48 
	#B00110
 6

	)

49 
	#B000110
 6

	)

50 
	#B0000110
 6

	)

51 
	#B00000110
 6

	)

52 
	#B111
 7

	)

53 
	#B0111
 7

	)

54 
	#B00111
 7

	)

55 
	#B000111
 7

	)

56 
	#B0000111
 7

	)

57 
	#B00000111
 7

	)

58 
	#B1000
 8

	)

59 
	#B01000
 8

	)

60 
	#B001000
 8

	)

61 
	#B0001000
 8

	)

62 
	#B00001000
 8

	)

63 
	#B1001
 9

	)

64 
	#B01001
 9

	)

65 
	#B001001
 9

	)

66 
	#B0001001
 9

	)

67 
	#B00001001
 9

	)

68 
	#B1010
 10

	)

69 
	#B01010
 10

	)

70 
	#B001010
 10

	)

71 
	#B0001010
 10

	)

72 
	#B00001010
 10

	)

73 
	#B1011
 11

	)

74 
	#B01011
 11

	)

75 
	#B001011
 11

	)

76 
	#B0001011
 11

	)

77 
	#B00001011
 11

	)

78 
	#B1100
 12

	)

79 
	#B01100
 12

	)

80 
	#B001100
 12

	)

81 
	#B0001100
 12

	)

82 
	#B00001100
 12

	)

83 
	#B1101
 13

	)

84 
	#B01101
 13

	)

85 
	#B001101
 13

	)

86 
	#B0001101
 13

	)

87 
	#B00001101
 13

	)

88 
	#B1110
 14

	)

89 
	#B01110
 14

	)

90 
	#B001110
 14

	)

91 
	#B0001110
 14

	)

92 
	#B00001110
 14

	)

93 
	#B1111
 15

	)

94 
	#B01111
 15

	)

95 
	#B001111
 15

	)

96 
	#B0001111
 15

	)

97 
	#B00001111
 15

	)

98 
	#B10000
 16

	)

99 
	#B010000
 16

	)

100 
	#B0010000
 16

	)

101 
	#B00010000
 16

	)

102 
	#B10001
 17

	)

103 
	#B010001
 17

	)

104 
	#B0010001
 17

	)

105 
	#B00010001
 17

	)

106 
	#B10010
 18

	)

107 
	#B010010
 18

	)

108 
	#B0010010
 18

	)

109 
	#B00010010
 18

	)

110 
	#B10011
 19

	)

111 
	#B010011
 19

	)

112 
	#B0010011
 19

	)

113 
	#B00010011
 19

	)

114 
	#B10100
 20

	)

115 
	#B010100
 20

	)

116 
	#B0010100
 20

	)

117 
	#B00010100
 20

	)

118 
	#B10101
 21

	)

119 
	#B010101
 21

	)

120 
	#B0010101
 21

	)

121 
	#B00010101
 21

	)

122 
	#B10110
 22

	)

123 
	#B010110
 22

	)

124 
	#B0010110
 22

	)

125 
	#B00010110
 22

	)

126 
	#B10111
 23

	)

127 
	#B010111
 23

	)

128 
	#B0010111
 23

	)

129 
	#B00010111
 23

	)

130 
	#B11000
 24

	)

131 
	#B011000
 24

	)

132 
	#B0011000
 24

	)

133 
	#B00011000
 24

	)

134 
	#B11001
 25

	)

135 
	#B011001
 25

	)

136 
	#B0011001
 25

	)

137 
	#B00011001
 25

	)

138 
	#B11010
 26

	)

139 
	#B011010
 26

	)

140 
	#B0011010
 26

	)

141 
	#B00011010
 26

	)

142 
	#B11011
 27

	)

143 
	#B011011
 27

	)

144 
	#B0011011
 27

	)

145 
	#B00011011
 27

	)

146 
	#B11100
 28

	)

147 
	#B011100
 28

	)

148 
	#B0011100
 28

	)

149 
	#B00011100
 28

	)

150 
	#B11101
 29

	)

151 
	#B011101
 29

	)

152 
	#B0011101
 29

	)

153 
	#B00011101
 29

	)

154 
	#B11110
 30

	)

155 
	#B011110
 30

	)

156 
	#B0011110
 30

	)

157 
	#B00011110
 30

	)

158 
	#B11111
 31

	)

159 
	#B011111
 31

	)

160 
	#B0011111
 31

	)

161 
	#B00011111
 31

	)

162 
	#B100000
 32

	)

163 
	#B0100000
 32

	)

164 
	#B00100000
 32

	)

165 
	#B100001
 33

	)

166 
	#B0100001
 33

	)

167 
	#B00100001
 33

	)

168 
	#B100010
 34

	)

169 
	#B0100010
 34

	)

170 
	#B00100010
 34

	)

171 
	#B100011
 35

	)

172 
	#B0100011
 35

	)

173 
	#B00100011
 35

	)

174 
	#B100100
 36

	)

175 
	#B0100100
 36

	)

176 
	#B00100100
 36

	)

177 
	#B100101
 37

	)

178 
	#B0100101
 37

	)

179 
	#B00100101
 37

	)

180 
	#B100110
 38

	)

181 
	#B0100110
 38

	)

182 
	#B00100110
 38

	)

183 
	#B100111
 39

	)

184 
	#B0100111
 39

	)

185 
	#B00100111
 39

	)

186 
	#B101000
 40

	)

187 
	#B0101000
 40

	)

188 
	#B00101000
 40

	)

189 
	#B101001
 41

	)

190 
	#B0101001
 41

	)

191 
	#B00101001
 41

	)

192 
	#B101010
 42

	)

193 
	#B0101010
 42

	)

194 
	#B00101010
 42

	)

195 
	#B101011
 43

	)

196 
	#B0101011
 43

	)

197 
	#B00101011
 43

	)

198 
	#B101100
 44

	)

199 
	#B0101100
 44

	)

200 
	#B00101100
 44

	)

201 
	#B101101
 45

	)

202 
	#B0101101
 45

	)

203 
	#B00101101
 45

	)

204 
	#B101110
 46

	)

205 
	#B0101110
 46

	)

206 
	#B00101110
 46

	)

207 
	#B101111
 47

	)

208 
	#B0101111
 47

	)

209 
	#B00101111
 47

	)

210 
	#B110000
 48

	)

211 
	#B0110000
 48

	)

212 
	#B00110000
 48

	)

213 
	#B110001
 49

	)

214 
	#B0110001
 49

	)

215 
	#B00110001
 49

	)

216 
	#B110010
 50

	)

217 
	#B0110010
 50

	)

218 
	#B00110010
 50

	)

219 
	#B110011
 51

	)

220 
	#B0110011
 51

	)

221 
	#B00110011
 51

	)

222 
	#B110100
 52

	)

223 
	#B0110100
 52

	)

224 
	#B00110100
 52

	)

225 
	#B110101
 53

	)

226 
	#B0110101
 53

	)

227 
	#B00110101
 53

	)

228 
	#B110110
 54

	)

229 
	#B0110110
 54

	)

230 
	#B00110110
 54

	)

231 
	#B110111
 55

	)

232 
	#B0110111
 55

	)

233 
	#B00110111
 55

	)

234 
	#B111000
 56

	)

235 
	#B0111000
 56

	)

236 
	#B00111000
 56

	)

237 
	#B111001
 57

	)

238 
	#B0111001
 57

	)

239 
	#B00111001
 57

	)

240 
	#B111010
 58

	)

241 
	#B0111010
 58

	)

242 
	#B00111010
 58

	)

243 
	#B111011
 59

	)

244 
	#B0111011
 59

	)

245 
	#B00111011
 59

	)

246 
	#B111100
 60

	)

247 
	#B0111100
 60

	)

248 
	#B00111100
 60

	)

249 
	#B111101
 61

	)

250 
	#B0111101
 61

	)

251 
	#B00111101
 61

	)

252 
	#B111110
 62

	)

253 
	#B0111110
 62

	)

254 
	#B00111110
 62

	)

255 
	#B111111
 63

	)

256 
	#B0111111
 63

	)

257 
	#B00111111
 63

	)

258 
	#B1000000
 64

	)

259 
	#B01000000
 64

	)

260 
	#B1000001
 65

	)

261 
	#B01000001
 65

	)

262 
	#B1000010
 66

	)

263 
	#B01000010
 66

	)

264 
	#B1000011
 67

	)

265 
	#B01000011
 67

	)

266 
	#B1000100
 68

	)

267 
	#B01000100
 68

	)

268 
	#B1000101
 69

	)

269 
	#B01000101
 69

	)

270 
	#B1000110
 70

	)

271 
	#B01000110
 70

	)

272 
	#B1000111
 71

	)

273 
	#B01000111
 71

	)

274 
	#B1001000
 72

	)

275 
	#B01001000
 72

	)

276 
	#B1001001
 73

	)

277 
	#B01001001
 73

	)

278 
	#B1001010
 74

	)

279 
	#B01001010
 74

	)

280 
	#B1001011
 75

	)

281 
	#B01001011
 75

	)

282 
	#B1001100
 76

	)

283 
	#B01001100
 76

	)

284 
	#B1001101
 77

	)

285 
	#B01001101
 77

	)

286 
	#B1001110
 78

	)

287 
	#B01001110
 78

	)

288 
	#B1001111
 79

	)

289 
	#B01001111
 79

	)

290 
	#B1010000
 80

	)

291 
	#B01010000
 80

	)

292 
	#B1010001
 81

	)

293 
	#B01010001
 81

	)

294 
	#B1010010
 82

	)

295 
	#B01010010
 82

	)

296 
	#B1010011
 83

	)

297 
	#B01010011
 83

	)

298 
	#B1010100
 84

	)

299 
	#B01010100
 84

	)

300 
	#B1010101
 85

	)

301 
	#B01010101
 85

	)

302 
	#B1010110
 86

	)

303 
	#B01010110
 86

	)

304 
	#B1010111
 87

	)

305 
	#B01010111
 87

	)

306 
	#B1011000
 88

	)

307 
	#B01011000
 88

	)

308 
	#B1011001
 89

	)

309 
	#B01011001
 89

	)

310 
	#B1011010
 90

	)

311 
	#B01011010
 90

	)

312 
	#B1011011
 91

	)

313 
	#B01011011
 91

	)

314 
	#B1011100
 92

	)

315 
	#B01011100
 92

	)

316 
	#B1011101
 93

	)

317 
	#B01011101
 93

	)

318 
	#B1011110
 94

	)

319 
	#B01011110
 94

	)

320 
	#B1011111
 95

	)

321 
	#B01011111
 95

	)

322 
	#B1100000
 96

	)

323 
	#B01100000
 96

	)

324 
	#B1100001
 97

	)

325 
	#B01100001
 97

	)

326 
	#B1100010
 98

	)

327 
	#B01100010
 98

	)

328 
	#B1100011
 99

	)

329 
	#B01100011
 99

	)

330 
	#B1100100
 100

	)

331 
	#B01100100
 100

	)

332 
	#B1100101
 101

	)

333 
	#B01100101
 101

	)

334 
	#B1100110
 102

	)

335 
	#B01100110
 102

	)

336 
	#B1100111
 103

	)

337 
	#B01100111
 103

	)

338 
	#B1101000
 104

	)

339 
	#B01101000
 104

	)

340 
	#B1101001
 105

	)

341 
	#B01101001
 105

	)

342 
	#B1101010
 106

	)

343 
	#B01101010
 106

	)

344 
	#B1101011
 107

	)

345 
	#B01101011
 107

	)

346 
	#B1101100
 108

	)

347 
	#B01101100
 108

	)

348 
	#B1101101
 109

	)

349 
	#B01101101
 109

	)

350 
	#B1101110
 110

	)

351 
	#B01101110
 110

	)

352 
	#B1101111
 111

	)

353 
	#B01101111
 111

	)

354 
	#B1110000
 112

	)

355 
	#B01110000
 112

	)

356 
	#B1110001
 113

	)

357 
	#B01110001
 113

	)

358 
	#B1110010
 114

	)

359 
	#B01110010
 114

	)

360 
	#B1110011
 115

	)

361 
	#B01110011
 115

	)

362 
	#B1110100
 116

	)

363 
	#B01110100
 116

	)

364 
	#B1110101
 117

	)

365 
	#B01110101
 117

	)

366 
	#B1110110
 118

	)

367 
	#B01110110
 118

	)

368 
	#B1110111
 119

	)

369 
	#B01110111
 119

	)

370 
	#B1111000
 120

	)

371 
	#B01111000
 120

	)

372 
	#B1111001
 121

	)

373 
	#B01111001
 121

	)

374 
	#B1111010
 122

	)

375 
	#B01111010
 122

	)

376 
	#B1111011
 123

	)

377 
	#B01111011
 123

	)

378 
	#B1111100
 124

	)

379 
	#B01111100
 124

	)

380 
	#B1111101
 125

	)

381 
	#B01111101
 125

	)

382 
	#B1111110
 126

	)

383 
	#B01111110
 126

	)

384 
	#B1111111
 127

	)

385 
	#B01111111
 127

	)

386 
	#B10000000
 128

	)

387 
	#B10000001
 129

	)

388 
	#B10000010
 130

	)

389 
	#B10000011
 131

	)

390 
	#B10000100
 132

	)

391 
	#B10000101
 133

	)

392 
	#B10000110
 134

	)

393 
	#B10000111
 135

	)

394 
	#B10001000
 136

	)

395 
	#B10001001
 137

	)

396 
	#B10001010
 138

	)

397 
	#B10001011
 139

	)

398 
	#B10001100
 140

	)

399 
	#B10001101
 141

	)

400 
	#B10001110
 142

	)

401 
	#B10001111
 143

	)

402 
	#B10010000
 144

	)

403 
	#B10010001
 145

	)

404 
	#B10010010
 146

	)

405 
	#B10010011
 147

	)

406 
	#B10010100
 148

	)

407 
	#B10010101
 149

	)

408 
	#B10010110
 150

	)

409 
	#B10010111
 151

	)

410 
	#B10011000
 152

	)

411 
	#B10011001
 153

	)

412 
	#B10011010
 154

	)

413 
	#B10011011
 155

	)

414 
	#B10011100
 156

	)

415 
	#B10011101
 157

	)

416 
	#B10011110
 158

	)

417 
	#B10011111
 159

	)

418 
	#B10100000
 160

	)

419 
	#B10100001
 161

	)

420 
	#B10100010
 162

	)

421 
	#B10100011
 163

	)

422 
	#B10100100
 164

	)

423 
	#B10100101
 165

	)

424 
	#B10100110
 166

	)

425 
	#B10100111
 167

	)

426 
	#B10101000
 168

	)

427 
	#B10101001
 169

	)

428 
	#B10101010
 170

	)

429 
	#B10101011
 171

	)

430 
	#B10101100
 172

	)

431 
	#B10101101
 173

	)

432 
	#B10101110
 174

	)

433 
	#B10101111
 175

	)

434 
	#B10110000
 176

	)

435 
	#B10110001
 177

	)

436 
	#B10110010
 178

	)

437 
	#B10110011
 179

	)

438 
	#B10110100
 180

	)

439 
	#B10110101
 181

	)

440 
	#B10110110
 182

	)

441 
	#B10110111
 183

	)

442 
	#B10111000
 184

	)

443 
	#B10111001
 185

	)

444 
	#B10111010
 186

	)

445 
	#B10111011
 187

	)

446 
	#B10111100
 188

	)

447 
	#B10111101
 189

	)

448 
	#B10111110
 190

	)

449 
	#B10111111
 191

	)

450 
	#B11000000
 192

	)

451 
	#B11000001
 193

	)

452 
	#B11000010
 194

	)

453 
	#B11000011
 195

	)

454 
	#B11000100
 196

	)

455 
	#B11000101
 197

	)

456 
	#B11000110
 198

	)

457 
	#B11000111
 199

	)

458 
	#B11001000
 200

	)

459 
	#B11001001
 201

	)

460 
	#B11001010
 202

	)

461 
	#B11001011
 203

	)

462 
	#B11001100
 204

	)

463 
	#B11001101
 205

	)

464 
	#B11001110
 206

	)

465 
	#B11001111
 207

	)

466 
	#B11010000
 208

	)

467 
	#B11010001
 209

	)

468 
	#B11010010
 210

	)

469 
	#B11010011
 211

	)

470 
	#B11010100
 212

	)

471 
	#B11010101
 213

	)

472 
	#B11010110
 214

	)

473 
	#B11010111
 215

	)

474 
	#B11011000
 216

	)

475 
	#B11011001
 217

	)

476 
	#B11011010
 218

	)

477 
	#B11011011
 219

	)

478 
	#B11011100
 220

	)

479 
	#B11011101
 221

	)

480 
	#B11011110
 222

	)

481 
	#B11011111
 223

	)

482 
	#B11100000
 224

	)

483 
	#B11100001
 225

	)

484 
	#B11100010
 226

	)

485 
	#B11100011
 227

	)

486 
	#B11100100
 228

	)

487 
	#B11100101
 229

	)

488 
	#B11100110
 230

	)

489 
	#B11100111
 231

	)

490 
	#B11101000
 232

	)

491 
	#B11101001
 233

	)

492 
	#B11101010
 234

	)

493 
	#B11101011
 235

	)

494 
	#B11101100
 236

	)

495 
	#B11101101
 237

	)

496 
	#B11101110
 238

	)

497 
	#B11101111
 239

	)

498 
	#B11110000
 240

	)

499 
	#B11110001
 241

	)

500 
	#B11110010
 242

	)

501 
	#B11110011
 243

	)

502 
	#B11110100
 244

	)

503 
	#B11110101
 245

	)

504 
	#B11110110
 246

	)

505 
	#B11110111
 247

	)

506 
	#B11111000
 248

	)

507 
	#B11111001
 249

	)

508 
	#B11111010
 250

	)

509 
	#B11111011
 251

	)

510 
	#B11111100
 252

	)

511 
	#B11111101
 253

	)

512 
	#B11111110
 254

	)

513 
	#B11111111
 255

	)

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.c

25 
	~<avr/io.h
>

26 
	~"wúög_¥iv©e.h
"

27 
	~"pös_¨duöo.h
"

68 
	#PA
 1

	)

69 
	#PB
 2

	)

70 
	#PC
 3

	)

71 
	#PD
 4

	)

72 
	#PE
 5

	)

73 
	#PF
 6

	)

74 
	#PG
 7

	)

75 
	#PH
 8

	)

76 
	#PJ
 10

	)

77 
	#PK
 11

	)

78 
	#PL
 12

	)

80 
	#REPEAT8
(
x
Ëx, x, x, x, x, x, x, 
	)
x

81 
	#BV0TO7
 
	`_BV
(0), _BV(1), _BV(2), _BV(3), _BV(4), _BV(5), _BV(6), _BV(7)

	)

82 
	#BV7TO0
 
	`_BV
(7), _BV(6), _BV(5), _BV(4), _BV(3), _BV(2), _BV(1), _BV(0)

	)

85 #i‡
deföed
(
__AVR_ATmega1280__
)

86 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

87 
NOT_A_PORT
,

88 &
DDRA
,

89 &
DDRB
,

90 &
DDRC
,

91 &
DDRD
,

92 &
DDRE
,

93 &
DDRF
,

94 &
DDRG
,

95 &
DDRH
,

96 
NOT_A_PORT
,

97 &
DDRJ
,

98 &
DDRK
,

99 &
DDRL
,

102 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

103 
NOT_A_PORT
,

104 &
PORTA
,

105 &
PORTB
,

106 &
PORTC
,

107 &
PORTD
,

108 &
PORTE
,

109 &
PORTF
,

110 &
PORTG
,

111 &
PORTH
,

112 
NOT_A_PORT
,

113 &
PORTJ
,

114 &
PORTK
,

115 &
PORTL
,

118 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

119 
NOT_A_PIN
,

120 &
PINA
,

121 &
PINB
,

122 &
PINC
,

123 &
PIND
,

124 &
PINE
,

125 &
PINF
,

126 &
PING
,

127 &
PINH
,

128 
NOT_A_PIN
,

129 &
PINJ
,

130 &
PINK
,

131 &
PINL
,

134 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

137 
PE
 ,

138 
PE
 ,

139 
PE
 ,

140 
PE
 ,

141 
PG
 ,

142 
PE
 ,

143 
PH
 ,

144 
PH
 ,

145 
PH
 ,

146 
PH
 ,

147 
PB
 ,

148 
PB
 ,

149 
PB
 ,

150 
PB
 ,

151 
PJ
 ,

152 
PJ
 ,

153 
PH
 ,

154 
PH
 ,

155 
PD
 ,

156 
PD
 ,

157 
PD
 ,

158 
PD
 ,

159 
PA
 ,

160 
PA
 ,

161 
PA
 ,

162 
PA
 ,

163 
PA
 ,

164 
PA
 ,

165 
PA
 ,

166 
PA
 ,

167 
PC
 ,

168 
PC
 ,

169 
PC
 ,

170 
PC
 ,

171 
PC
 ,

172 
PC
 ,

173 
PC
 ,

174 
PC
 ,

175 
PD
 ,

176 
PG
 ,

177 
PG
 ,

178 
PG
 ,

179 
PL
 ,

180 
PL
 ,

181 
PL
 ,

182 
PL
 ,

183 
PL
 ,

184 
PL
 ,

185 
PL
 ,

186 
PL
 ,

187 
PB
 ,

188 
PB
 ,

189 
PB
 ,

190 
PB
 ,

191 
PF
 ,

192 
PF
 ,

193 
PF
 ,

194 
PF
 ,

195 
PF
 ,

196 
PF
 ,

197 
PF
 ,

198 
PF
 ,

199 
PK
 ,

200 
PK
 ,

201 
PK
 ,

202 
PK
 ,

203 
PK
 ,

204 
PK
 ,

205 
PK
 ,

206 
PK
 ,

209 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

212 
_BV
( 0 ) ,

213 
_BV
( 1 ) ,

214 
_BV
( 4 ) ,

215 
_BV
( 5 ) ,

216 
_BV
( 5 ) ,

217 
_BV
( 3 ) ,

218 
_BV
( 3 ) ,

219 
_BV
( 4 ) ,

220 
_BV
( 5 ) ,

221 
_BV
( 6 ) ,

222 
_BV
( 4 ) ,

223 
_BV
( 5 ) ,

224 
_BV
( 6 ) ,

225 
_BV
( 7 ) ,

226 
_BV
( 1 ) ,

227 
_BV
( 0 ) ,

228 
_BV
( 1 ) ,

229 
_BV
( 0 ) ,

230 
_BV
( 3 ) ,

231 
_BV
( 2 ) ,

232 
_BV
( 1 ) ,

233 
_BV
( 0 ) ,

234 
_BV
( 0 ) ,

235 
_BV
( 1 ) ,

236 
_BV
( 2 ) ,

237 
_BV
( 3 ) ,

238 
_BV
( 4 ) ,

239 
_BV
( 5 ) ,

240 
_BV
( 6 ) ,

241 
_BV
( 7 ) ,

242 
_BV
( 7 ) ,

243 
_BV
( 6 ) ,

244 
_BV
( 5 ) ,

245 
_BV
( 4 ) ,

246 
_BV
( 3 ) ,

247 
_BV
( 2 ) ,

248 
_BV
( 1 ) ,

249 
_BV
( 0 ) ,

250 
_BV
( 7 ) ,

251 
_BV
( 2 ) ,

252 
_BV
( 1 ) ,

253 
_BV
( 0 ) ,

254 
_BV
( 7 ) ,

255 
_BV
( 6 ) ,

256 
_BV
( 5 ) ,

257 
_BV
( 4 ) ,

258 
_BV
( 3 ) ,

259 
_BV
( 2 ) ,

260 
_BV
( 1 ) ,

261 
_BV
( 0 ) ,

262 
_BV
( 3 ) ,

263 
_BV
( 2 ) ,

264 
_BV
( 1 ) ,

265 
_BV
( 0 ) ,

266 
_BV
( 0 ) ,

267 
_BV
( 1 ) ,

268 
_BV
( 2 ) ,

269 
_BV
( 3 ) ,

270 
_BV
( 4 ) ,

271 
_BV
( 5 ) ,

272 
_BV
( 6 ) ,

273 
_BV
( 7 ) ,

274 
_BV
( 0 ) ,

275 
_BV
( 1 ) ,

276 
_BV
( 2 ) ,

277 
_BV
( 3 ) ,

278 
_BV
( 4 ) ,

279 
_BV
( 5 ) ,

280 
_BV
( 6 ) ,

281 
_BV
( 7 ) ,

284 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

287 
NOT_ON_TIMER
 ,

288 
NOT_ON_TIMER
 ,

289 
TIMER3B
 ,

290 
TIMER3C
 ,

291 
TIMER0B
 ,

292 
TIMER3A
 ,

293 
TIMER4A
 ,

294 
TIMER4B
 ,

295 
TIMER4C
 ,

296 
TIMER2B
 ,

297 
TIMER2A
 ,

298 
TIMER1A
 ,

299 
TIMER1B
 ,

300 
TIMER0A
 ,

301 
NOT_ON_TIMER
 ,

302 
NOT_ON_TIMER
 ,

303 
NOT_ON_TIMER
 ,

304 
NOT_ON_TIMER
 ,

305 
NOT_ON_TIMER
 ,

306 
NOT_ON_TIMER
 ,

307 
NOT_ON_TIMER
 ,

308 
NOT_ON_TIMER
 ,

309 
NOT_ON_TIMER
 ,

310 
NOT_ON_TIMER
 ,

311 
NOT_ON_TIMER
 ,

312 
NOT_ON_TIMER
 ,

313 
NOT_ON_TIMER
 ,

314 
NOT_ON_TIMER
 ,

315 
NOT_ON_TIMER
 ,

316 
NOT_ON_TIMER
 ,

317 
NOT_ON_TIMER
 ,

318 
NOT_ON_TIMER
 ,

319 
NOT_ON_TIMER
 ,

320 
NOT_ON_TIMER
 ,

321 
NOT_ON_TIMER
 ,

322 
NOT_ON_TIMER
 ,

323 
NOT_ON_TIMER
 ,

324 
NOT_ON_TIMER
 ,

325 
NOT_ON_TIMER
 ,

326 
NOT_ON_TIMER
 ,

327 
NOT_ON_TIMER
 ,

328 
NOT_ON_TIMER
 ,

329 
NOT_ON_TIMER
 ,

330 
NOT_ON_TIMER
 ,

331 
TIMER5C
 ,

332 
TIMER5B
 ,

333 
TIMER5A
 ,

334 
NOT_ON_TIMER
 ,

335 
NOT_ON_TIMER
 ,

336 
NOT_ON_TIMER
 ,

337 
NOT_ON_TIMER
 ,

338 
NOT_ON_TIMER
 ,

339 
NOT_ON_TIMER
 ,

340 
NOT_ON_TIMER
 ,

341 
NOT_ON_TIMER
 ,

342 
NOT_ON_TIMER
 ,

343 
NOT_ON_TIMER
 ,

344 
NOT_ON_TIMER
 ,

345 
NOT_ON_TIMER
 ,

346 
NOT_ON_TIMER
 ,

347 
NOT_ON_TIMER
 ,

348 
NOT_ON_TIMER
 ,

349 
NOT_ON_TIMER
 ,

350 
NOT_ON_TIMER
 ,

351 
NOT_ON_TIMER
 ,

352 
NOT_ON_TIMER
 ,

353 
NOT_ON_TIMER
 ,

354 
NOT_ON_TIMER
 ,

355 
NOT_ON_TIMER
 ,

356 
NOT_ON_TIMER
 ,

362 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_mode_PGM
[] = {

363 
NOT_A_PORT
,

364 
NOT_A_PORT
,

365 &
DDRB
,

366 &
DDRC
,

367 &
DDRD
,

370 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_ouçut_PGM
[] = {

371 
NOT_A_PORT
,

372 
NOT_A_PORT
,

373 &
PORTB
,

374 &
PORTC
,

375 &
PORTD
,

378 c⁄° 
uöt16_t
 
PROGMEM
 
	gp‹t_to_öput_PGM
[] = {

379 
NOT_A_PORT
,

380 
NOT_A_PORT
,

381 &
PINB
,

382 &
PINC
,

383 &
PIND
,

386 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_p‹t_PGM
[] = {

387 
PD
,

388 
PD
,

389 
PD
,

390 
PD
,

391 
PD
,

392 
PD
,

393 
PD
,

394 
PD
,

395 
PB
,

396 
PB
,

397 
PB
,

398 
PB
,

399 
PB
,

400 
PB
,

401 
PC
,

402 
PC
,

403 
PC
,

404 
PC
,

405 
PC
,

406 
PC
,

409 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_bô_mask_PGM
[] = {

410 
_BV
(0),

411 
_BV
(1),

412 
_BV
(2),

413 
_BV
(3),

414 
_BV
(4),

415 
_BV
(5),

416 
_BV
(6),

417 
_BV
(7),

418 
_BV
(0),

419 
_BV
(1),

420 
_BV
(2),

421 
_BV
(3),

422 
_BV
(4),

423 
_BV
(5),

424 
_BV
(0),

425 
_BV
(1),

426 
_BV
(2),

427 
_BV
(3),

428 
_BV
(4),

429 
_BV
(5),

432 c⁄° 
uöt8_t
 
PROGMEM
 
	gdigôÆ_pö_to_timî_PGM
[] = {

433 
NOT_ON_TIMER
,

434 
NOT_ON_TIMER
,

435 
NOT_ON_TIMER
,

437 #i‡
deföed
(
__AVR_ATmega8__
)

438 
NOT_ON_TIMER
,

440 
TIMER2B
,

442 
NOT_ON_TIMER
,

444 #i‡
deföed
(
__AVR_ATmega8__
)

445 
NOT_ON_TIMER
,

446 
NOT_ON_TIMER
,

448 
TIMER0B
,

449 
TIMER0A
,

451 
NOT_ON_TIMER
,

452 
NOT_ON_TIMER
,

453 
TIMER1A
,

454 
TIMER1B
,

455 #i‡
deföed
(
__AVR_ATmega8__
)

456 
TIMER2
,

458 
TIMER2A
,

460 
NOT_ON_TIMER
,

461 
NOT_ON_TIMER
,

462 
NOT_ON_TIMER
,

463 
NOT_ON_TIMER
,

464 
NOT_ON_TIMER
,

465 
NOT_ON_TIMER
,

466 
NOT_ON_TIMER
,

467 
NOT_ON_TIMER
,

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.h

25 #i‚de‡
Pös_Arduöo_h


26 
	#Pös_Arduöo_h


	)

28 
	~<avr/pgm•a˚.h
>

30 
	#NOT_A_PIN
 0

	)

31 
	#NOT_A_PORT
 0

	)

33 
	#NOT_ON_TIMER
 0

	)

34 
	#TIMER0A
 1

	)

35 
	#TIMER0B
 2

	)

36 
	#TIMER1A
 3

	)

37 
	#TIMER1B
 4

	)

38 
	#TIMER2
 5

	)

39 
	#TIMER2A
 6

	)

40 
	#TIMER2B
 7

	)

42 
	#TIMER3A
 8

	)

43 
	#TIMER3B
 9

	)

44 
	#TIMER3C
 10

	)

45 
	#TIMER4A
 11

	)

46 
	#TIMER4B
 12

	)

47 
	#TIMER4C
 13

	)

48 
	#TIMER5A
 14

	)

49 
	#TIMER5B
 15

	)

50 
	#TIMER5C
 16

	)

54 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_mode_PGM
[];

55 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_öput_PGM
[];

56 c⁄° 
uöt16_t
 
PROGMEM
 
p‹t_to_ouçut_PGM
[];

58 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_p‹t_PGM
[];

60 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_bô_mask_PGM
[];

61 c⁄° 
uöt8_t
 
PROGMEM
 
digôÆ_pö_to_timî_PGM
[];

68 
	#digôÆPöToP‹t
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_p‹t_PGM
 + (PËË)

	)

69 
	#digôÆPöToBôMask
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_bô_mask_PGM
 + (PËË)

	)

70 
	#digôÆPöToTimî
(
P
Ë–
	`pgm_ªad_byã
–
digôÆ_pö_to_timî_PGM
 + (PËË)

	)

71 
	#™ÆogInPöToBô
(
P
Ë(P)

	)

72 
	#p‹tOuçutRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_ouçut_PGM
 + (P))Ë)

	)

73 
	#p‹tI≈utRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_öput_PGM
 + (P))Ë)

	)

74 
	#p‹tModeRegi°î
(
P
Ë–(vﬁ©ûê
uöt8_t
 *)–
	`pgm_ªad_w‹d
–
p‹t_to_mode_PGM
 + (P))Ë)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.c

25 
	~"wúög_¥iv©e.h
"

29 
	#MICROSECONDS_PER_TIMER0_OVERFLOW
 (
	`˛ockCy˛esToMi¸o£c⁄ds
(64 * 256))

	)

32 
	#MILLIS_INC
 (
MICROSECONDS_PER_TIMER0_OVERFLOW
 / 1000)

	)

37 
	#FRACT_INC
 ((
MICROSECONDS_PER_TIMER0_OVERFLOW
 % 1000Ë>> 3)

	)

38 
	#FRACT_MAX
 (1000 >> 3)

	)

40 vﬁ©ûê
	gtimî0_ovîÊow_cou¡
 = 0;

41 vﬁ©ûê
	gtimî0_mûlis
 = 0;

42 
	gtimî0_‰a˘
 = 0;

44 
	$SIGNAL
(
TIMER0_OVF_ve˘
)

48 
m
 = 
timî0_mûlis
;

49 
f
 = 
timî0_‰a˘
;

51 
m
 +
MILLIS_INC
;

52 
f
 +
FRACT_INC
;

53 i‡(
f
 >
FRACT_MAX
) {

54 
f
 -
FRACT_MAX
;

55 
m
 += 1;

58 
timî0_‰a˘
 = 
f
;

59 
timî0_mûlis
 = 
m
;

60 
timî0_ovîÊow_cou¡
++;

61 
	}
}

63 
	$mûlis
()

65 
m
;

66 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

70 
	`˛i
();

71 
m
 = 
timî0_mûlis
;

72 
SREG
 = 
ﬁdSREG
;

74  
m
;

75 
	}
}

77 
	$mi¸os
() {

78 
m
, 
t
;

79 
uöt8_t
 
ﬁdSREG
 = 
SREG
;

81 
	`˛i
();

82 
t
 = 
TCNT0
;

84 #ifde‡
TIFR0


85 i‡((
TIFR0
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

86 
t
 = 256;

88 i‡((
TIFR
 & 
	`_BV
(
TOV0
)Ë&& (
t
 == 0))

89 
t
 = 256;

92 
m
 = 
timî0_ovîÊow_cou¡
;

93 
SREG
 = 
ﬁdSREG
;

95  ((
m
 << 8Ë+ 
t
Ë* (64 / 
	`˛ockCy˛esPîMi¸o£c⁄d
());

96 
	}
}

98 
	$dñay
(
ms
)

100 
°¨t
 = 
	`mûlis
();

102 
	`mûlis
(Ë- 
°¨t
 <
ms
)

104 
	}
}

109 
	$dñayMi¸o£c⁄ds
(
us
)

111 
uöt8_t
 
ﬁdSREG
;

117 #i‡
F_CPU
 >= 16000000L

122 i‡(--
us
 == 0)

128 
us
 <<= 2;

131 
us
 -= 2;

138 i‡(--
us
 == 0)

140 i‡(--
us
 == 0)

146 
us
 <<= 1;

150 
us
--;

155 
ﬁdSREG
 = 
SREG
;

156 
	`˛i
();

159 
__asm__
 
	`__vﬁ©ûe__
 (

161 "b∫ê1b" : "=w" (
us
) : "0" (us)

165 
SREG
 = 
ﬁdSREG
;

166 
	}
}

168 
	$öô
()

172 
	`£i
();

177 #i‡!
	`deföed
(
__AVR_ATmega8__
)

178 
	`sbi
(
TCCR0A
, 
WGM01
);

179 
	`sbi
(
TCCR0A
, 
WGM00
);

182 #i‡
	`deföed
(
__AVR_ATmega8__
)

183 
	`sbi
(
TCCR0
, 
CS01
);

184 
	`sbi
(
TCCR0
, 
CS00
);

186 
	`sbi
(
TCCR0B
, 
CS01
);

187 
	`sbi
(
TCCR0B
, 
CS00
);

190 #i‡
	`deföed
(
__AVR_ATmega8__
)

191 
	`sbi
(
TIMSK
, 
TOIE0
);

193 
	`sbi
(
TIMSK0
, 
TOIE0
);

202 
	`sbi
(
TCCR1B
, 
CS11
);

203 
	`sbi
(
TCCR1B
, 
CS10
);

205 
	`sbi
(
TCCR1A
, 
WGM10
);

208 #i‡
	`deföed
(
__AVR_ATmega8__
)

209 
	`sbi
(
TCCR2
, 
CS22
);

211 
	`sbi
(
TCCR2B
, 
CS22
);

214 #i‡
	`deföed
(
__AVR_ATmega8__
)

215 
	`sbi
(
TCCR2
, 
WGM20
);

217 
	`sbi
(
TCCR2A
, 
WGM20
);

220 #i‡
	`deföed
(
__AVR_ATmega1280__
)

222 
	`sbi
(
TCCR3B
, 
CS31
); sbi(TCCR3B, 
CS30
);

223 
	`sbi
(
TCCR4B
, 
CS41
); sbi(TCCR4B, 
CS40
);

224 
	`sbi
(
TCCR5B
, 
CS51
); sbi(TCCR5B, 
CS50
);

226 
	`sbi
(
TCCR3A
, 
WGM30
);

227 
	`sbi
(
TCCR4A
, 
WGM40
);

228 
	`sbi
(
TCCR5A
, 
WGM50
);

235 
	`sbi
(
ADCSRA
, 
ADPS2
);

236 
	`sbi
(
ADCSRA
, 
ADPS1
);

237 
	`sbi
(
ADCSRA
, 
ADPS0
);

240 
	`sbi
(
ADCSRA
, 
ADEN
);

245 #i‡
	`deföed
(
__AVR_ATmega8__
)

246 
UCSRB
 = 0;

248 
UCSR0B
 = 0;

250 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.h

25 #i‚de‡
Wúög_h


26 
	#Wúög_h


	)

28 
	~<avr/io.h
>

29 
	~"bö¨y.h
"

31 #ifde‡
__˝lu•lus


35 #i‚de‡
ARDUINO


36 
	#ARDUINO
 16

	)

39 
	#HIGH
 0x1

	)

40 
	#LOW
 0x0

	)

42 
	#INPUT
 0x0

	)

43 
	#OUTPUT
 0x1

	)

45 
	#åue
 0x1

	)

46 
	#Ál£
 0x0

	)

48 
	#PI
 3.1415926535897932384626433832795

	)

49 
	#HALF_PI
 1.5707963267948966192313216916398

	)

50 
	#TWO_PI
 6.283185307179586476925286766559

	)

51 
	#DEG_TO_RAD
 0.017453292519943295769236907684886

	)

52 
	#RAD_TO_DEG
 57.295779513082320876798154814105

	)

54 
	#SERIAL
 0x0

	)

55 
	#DISPLAY
 0x1

	)

57 
	#LSBFIRST
 0

	)

58 
	#MSBFIRST
 1

	)

60 
	#CHANGE
 1

	)

61 
	#FALLING
 2

	)

62 
	#RISING
 3

	)

64 
	#INTERNAL
 3

	)

65 
	#DEFAULT
 1

	)

66 
	#EXTERNAL
 0

	)

69 #ifde‡
abs


70 #unde‡
abs


73 
	#mö
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

74 
	#max
(
a
,
b
Ë(◊)>(b)?◊):(b))

	)

75 
	#abs
(
x
Ë((x)>0?(x):-(x))

	)

76 
	#c⁄°øö
(
amt
,
low
,
high
Ë(◊mt)<÷ow)?÷ow):(◊mt)>(high)?(high):◊mt)))

	)

77 
	#round
(
x
Ë((x)>=0?()((x)+0.5):()((x)-0.5))

	)

78 
	#ødüns
(
deg
Ë((deg)*
DEG_TO_RAD
)

	)

79 
	#degªes
(
ød
Ë(‘ad)*
RAD_TO_DEG
)

	)

80 
	#sq
(
x
Ë((x)*(x))

	)

82 
	#öãºu±s
(Ë
	`£i
()

	)

83 
	#noI¡îru±s
(Ë
	`˛i
()

	)

85 
	#˛ockCy˛esPîMi¸o£c⁄d
(Ë–
F_CPU
 / 1000000L )

	)

86 
	#˛ockCy˛esToMi¸o£c⁄ds
(
a
Ë–◊Ë/ 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

87 
	#mi¸o£c⁄dsToClockCy˛es
(
a
Ë–◊Ë* 
	`˛ockCy˛esPîMi¸o£c⁄d
(Ë)

	)

89 
	#lowByã
(
w
Ë((
uöt8_t
Ë((wË& 0xff))

	)

90 
	#highByã
(
w
Ë((
uöt8_t
Ë((wË>> 8))

	)

92 
	#bôRód
(
vÆue
, 
bô
Ë(((vÆueË>> (bô)Ë& 0x01)

	)

93 
	#bôSë
(
vÆue
, 
bô
Ë((vÆueË|(1UL << (bô)))

	)

94 
	#bôCÀ¨
(
vÆue
, 
bô
Ë((vÆueË&~(1UL << (bô)))

	)

95 
	#bôWrôe
(
vÆue
, 
bô
, 
bôvÆue
Ë(bôvÆuê? 
	`bôSë
(vÆue, bôË: 
	`bôCÀ¨
(vÆue, bô))

	)

97 
	tw‹d
;

99 
	#bô
(
b
Ë(1UL << (b))

	)

101 
uöt8_t
 
	tboﬁón
;

102 
uöt8_t
 
	tbyã
;

104 
öô
();

106 
pöMode
(
uöt8_t
, uint8_t);

107 
digôÆWrôe
(
uöt8_t
, uint8_t);

108 
digôÆRód
(
uöt8_t
);

109 
™ÆogRód
(
uöt8_t
);

110 
™ÆogRe„ªn˚
(
uöt8_t
 
mode
);

111 
™ÆogWrôe
(
uöt8_t
, );

113 
begöSîül
();

114 
£rülWrôe
();

115 
£rülAvaûabÀ
();

116 
£rülRód
();

117 
£rülFlush
();

119 
mûlis
();

120 
mi¸os
();

121 
dñay
();

122 
dñayMi¸o£c⁄ds
(
us
);

123 
pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
);

125 
shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
);

127 
©èchI¡îru±
(
uöt8_t
, (*)(), 
mode
);

128 
dëachI¡îru±
(
uöt8_t
);

130 
£tup
();

131 
lo›
();

133 #ifde‡
__˝lu•lus


	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_analog.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
uöt8_t
 
	g™Æog_ª„ªn˚
 = 
DEFAULT
;

30 
	$™ÆogRe„ªn˚
(
uöt8_t
 
mode
)

35 
™Æog_ª„ªn˚
 = 
mode
;

36 
	}
}

38 
	$™ÆogRód
(
uöt8_t
 
pö
)

40 
uöt8_t
 
low
, 
high
;

45 
ADMUX
 = (
™Æog_ª„ªn˚
 << 6Ë| (
pö
 & 0x0f);

47 #i‡
	`deföed
(
__AVR_ATmega1280__
)

50 
ADCSRB
 = (ADCSRB & ~(1 << 
MUX5
)Ë| (((
pö
 >> 3) & 0x01) << MUX5);

57 
	`sbi
(
ADCSRA
, 
ADSC
);

60 
	`bô_is_£t
(
ADCSRA
, 
ADSC
));

66 
low
 = 
ADCL
;

67 
high
 = 
ADCH
;

70  (
high
 << 8Ë| 
low
;

71 
	}
}

77 
	$™ÆogWrôe
(
uöt8_t
 
pö
, 
vÆ
)

84 
	`pöMode
(
pö
, 
OUTPUT
);

86 i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1A
) {

88 
	`sbi
(
TCCR1A
, 
COM1A1
);

90 
OCR1A
 = 
vÆ
;

91 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER1B
) {

93 
	`sbi
(
TCCR1A
, 
COM1B1
);

95 
OCR1B
 = 
vÆ
;

96 #i‡
	`deföed
(
__AVR_ATmega8__
)

97 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2
) {

99 
	`sbi
(
TCCR2
, 
COM21
);

101 
OCR2
 = 
vÆ
;

103 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0A
) {

104 i‡(
vÆ
 == 0) {

105 
	`digôÆWrôe
(
pö
, 
LOW
);

108 
	`sbi
(
TCCR0A
, 
COM0A1
);

110 
OCR0A
 = 
vÆ
;

112 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER0B
) {

113 i‡(
vÆ
 == 0) {

114 
	`digôÆWrôe
(
pö
, 
LOW
);

117 
	`sbi
(
TCCR0A
, 
COM0B1
);

119 
OCR0B
 = 
vÆ
;

121 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2A
) {

123 
	`sbi
(
TCCR2A
, 
COM2A1
);

125 
OCR2A
 = 
vÆ
;

126 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER2B
) {

128 
	`sbi
(
TCCR2A
, 
COM2B1
);

130 
OCR2B
 = 
vÆ
;

132 #i‡
	`deföed
(
__AVR_ATmega1280__
)

134 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3A
) {

136 
	`sbi
(
TCCR3A
, 
COM3A1
);

138 
OCR3A
 = 
vÆ
;

139 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3B
) {

141 
	`sbi
(
TCCR3A
, 
COM3B1
);

143 
OCR3B
 = 
vÆ
;

144 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER3C
) {

146 
	`sbi
(
TCCR3A
, 
COM3C1
);

148 
OCR3C
 = 
vÆ
;

149 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4A
) {

151 
	`sbi
(
TCCR4A
, 
COM4A1
);

153 
OCR4A
 = 
vÆ
;

154 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4B
) {

156 
	`sbi
(
TCCR4A
, 
COM4B1
);

158 
OCR4B
 = 
vÆ
;

159 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER4C
) {

161 
	`sbi
(
TCCR4A
, 
COM4C1
);

163 
OCR4C
 = 
vÆ
;

164 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER5A
) {

166 
	`sbi
(
TCCR5A
, 
COM5A1
);

168 
OCR5A
 = 
vÆ
;

169 } i‡(
	`digôÆPöToTimî
(
pö
Ë=
TIMER5B
) {

171 
	`sbi
(
TCCR5A
, 
COM5B1
);

173 
OCR5B
 = 
vÆ
;

175 } i‡(
vÆ
 < 128)

176 
	`digôÆWrôe
(
pö
, 
LOW
);

178 
	`digôÆWrôe
(
pö
, 
HIGH
);

179 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_digital.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

28 
	$pöMode
(
uöt8_t
 
pö
, uöt8_à
mode
)

30 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

31 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

32 vﬁ©ûê
uöt8_t
 *
ªg
;

34 i‡(
p‹t
 =
NOT_A_PIN
) ;

37 
ªg
 = 
	`p‹tModeRegi°î
(
p‹t
);

39 i‡(
mode
 =
INPUT
Ë*
ªg
 &~
bô
;

40 *
ªg
 |
bô
;

41 
	}
}

50 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

51 
ölöe
 
	$tu∫OffPWM
(
uöt8_t
 
timî
)

53 i‡(
timî
 =
TIMER1A
Ë
	`cbi
(
TCCR1A
, 
COM1A1
);

54 i‡(
timî
 =
TIMER1B
Ë
	`cbi
(
TCCR1A
, 
COM1B1
);

56 #i‡
	`deföed
(
__AVR_ATmega8__
)

57 i‡(
timî
 =
TIMER2
Ë
	`cbi
(
TCCR2
, 
COM21
);

59 i‡(
timî
 =
TIMER0A
Ë
	`cbi
(
TCCR0A
, 
COM0A1
);

60 i‡(
timî
 =
TIMER0B
Ë
	`cbi
(
TCCR0A
, 
COM0B1
);

61 i‡(
timî
 =
TIMER2A
Ë
	`cbi
(
TCCR2A
, 
COM2A1
);

62 i‡(
timî
 =
TIMER2B
Ë
	`cbi
(
TCCR2A
, 
COM2B1
);

65 #i‡
	`deföed
(
__AVR_ATmega1280__
)

66 i‡(
timî
 =
TIMER3A
Ë
	`cbi
(
TCCR3A
, 
COM3A1
);

67 i‡(
timî
 =
TIMER3B
Ë
	`cbi
(
TCCR3A
, 
COM3B1
);

68 i‡(
timî
 =
TIMER3C
Ë
	`cbi
(
TCCR3A
, 
COM3C1
);

69 i‡(
timî
 =
TIMER4A
Ë
	`cbi
(
TCCR4A
, 
COM4A1
);

70 i‡(
timî
 =
TIMER4B
Ë
	`cbi
(
TCCR4A
, 
COM4B1
);

71 i‡(
timî
 =
TIMER4C
Ë
	`cbi
(
TCCR4A
, 
COM4C1
);

72 i‡(
timî
 =
TIMER5A
Ë
	`cbi
(
TCCR5A
, 
COM5A1
);

73 i‡(
timî
 =
TIMER5B
Ë
	`cbi
(
TCCR5A
, 
COM5B1
);

74 i‡(
timî
 =
TIMER5C
Ë
	`cbi
(
TCCR5A
, 
COM5C1
);

76 
	}
}

78 
	$digôÆWrôe
(
uöt8_t
 
pö
, uöt8_à
vÆ
)

80 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

81 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

82 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

83 vﬁ©ûê
uöt8_t
 *
out
;

85 i‡(
p‹t
 =
NOT_A_PIN
) ;

89 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

91 
out
 = 
	`p‹tOuçutRegi°î
(
p‹t
);

93 i‡(
vÆ
 =
LOW
Ë*
out
 &~
bô
;

94 *
out
 |
bô
;

95 
	}
}

97 
	$digôÆRód
(
uöt8_t
 
pö
)

99 
uöt8_t
 
timî
 = 
	`digôÆPöToTimî
(
pö
);

100 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

101 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

103 i‡(
p‹t
 =
NOT_A_PIN
Ë 
LOW
;

107 i‡(
timî
 !
NOT_ON_TIMER
Ë
	`tu∫OffPWM
(timer);

109 i‡(*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë 
HIGH
;

110  
LOW
;

111 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_private.h

25 #i‚de‡
WúögPriv©e_h


26 
	#WúögPriv©e_h


	)

28 
	~<avr/io.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<avr/dñay.h
>

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

34 
	~"wúög.h
"

36 #ifde‡
__˝lu•lus


40 #i‚de‡
cbi


41 
	#cbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë&~
	`_BV
(bô))

	)

43 #i‚de‡
sbi


44 
	#sbi
(
s‰
, 
bô
Ë(
	`_SFR_BYTE
(s‰Ë|
	`_BV
(bô))

	)

47 
	#EXTERNAL_INT_0
 0

	)

48 
	#EXTERNAL_INT_1
 1

	)

49 
	#EXTERNAL_INT_2
 2

	)

50 
	#EXTERNAL_INT_3
 3

	)

51 
	#EXTERNAL_INT_4
 4

	)

52 
	#EXTERNAL_INT_5
 5

	)

53 
	#EXTERNAL_INT_6
 6

	)

54 
	#EXTERNAL_INT_7
 7

	)

56 #i‡
deföed
(
__AVR_ATmega1280__
)

57 
	#EXTERNAL_NUM_INTERRUPTS
 8

	)

59 
	#EXTERNAL_NUM_INTERRUPTS
 2

	)

62 (*
voidFuncPå
)();

64 #ifde‡
__˝lu•lus


	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_pulse.c

25 
	~"wúög_¥iv©e.h
"

26 
	~"pös_¨duöo.h
"

32 
	$pul£In
(
uöt8_t
 
pö
, uöt8_à
°©e
, 
timeout
)

37 
uöt8_t
 
bô
 = 
	`digôÆPöToBôMask
(
pö
);

38 
uöt8_t
 
p‹t
 = 
	`digôÆPöToP‹t
(
pö
);

39 
uöt8_t
 
°©eMask
 = (
°©e
 ? 
bô
 : 0);

40 
width
 = 0;

44 
numlo›s
 = 0;

45 
maxlo›s
 = 
	`mi¸o£c⁄dsToClockCy˛es
(
timeout
) / 16;

48 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

49 i‡(
numlo›s
++ =
maxlo›s
)

53 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë!
°©eMask
)

54 i‡(
numlo›s
++ =
maxlo›s
)

58 (*
	`p‹tI≈utRegi°î
(
p‹t
Ë& 
bô
Ë=
°©eMask
)

59 
width
++;

65  
	`˛ockCy˛esToMi¸o£c⁄ds
(
width
 * 10 + 16);

66 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_shift.c

25 
	~"wúög_¥iv©e.h
"

27 
	$shi·Out
(
uöt8_t
 
d©aPö
, uöt8_à
˛ockPö
, uöt8_à
bôOrdî
, 
byã
 
vÆ
)

29 
i
;

31 
i
 = 0; i < 8; i++) {

32 i‡(
bôOrdî
 =
LSBFIRST
)

33 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << 
i
)));

35 
	`digôÆWrôe
(
d©aPö
, !!(
vÆ
 & (1 << (7 - 
i
))));

37 
	`digôÆWrôe
(
˛ockPö
, 
HIGH
);

38 
	`digôÆWrôe
(
˛ockPö
, 
LOW
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Bounce.h

27 #i‚de‡
Boun˚_h


28 
	#Boun˚_h


	)

30 
	~<öây≥s.h
>

32 ˛as†
	cBoun˚


35 
	mpublic
:

37 
Boun˚
(
uöt8_t
 
pö
, 
öãrvÆ_mûlis
 );

39 
öãrvÆ
(
öãrvÆ_mûlis
);

43 
upd©e
();

47 
ªboun˚
(
öãrvÆ
);

49 
ªad
();

51 
wrôe
(
√w_°©e
);

53 
duøti⁄
();

55 
	m¥Ÿe˘ed
:

56 
deboun˚
();

57 
	m¥evious_mûlis
, 
	möãrvÆ_mûlis
, 
	mªboun˚_mûlis
;

58 
uöt8_t
 
	m°©e
;

59 
uöt8_t
 
	mpö
;

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\main.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
ÀdPö
 = 13;

10 
boﬁón
 
	gA
;

11 
	gevít
;

12 
byã
 
	gfú°A
;

13 
byã
 
	g£c⁄dA
;

14 
	ga
;

17 
	$£tup
() {

19 
	`pöMode
(5, 
INPUT
);

20 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

21 
Sîül
.
	`begö
(9600);

22 
	`£t_un˚πaö_cou¡
(100);

23 
	}
}

25 
	$maö
() {

27 
	`öô
();

28 
	`£tup
();

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
A
 = 
	`digôÆRód
(5);

32 i‡(
A
 =
LOW
) {

33 
	`key_°ï
(
ON
);

36 
	`key_°ï
(
OFF
);

38 
evít
 = 
	`gë_evít
();

39 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

41 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\testpoint.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	gÀdPö
 = 13;

7 
	gaPö
 = 3;

8 
	gbPö
 = 5;

9 
	gcPö
 = 6;

10 
	gdPö
 = 7;

11 
	gePö
 = 8;

13 
boﬁón
 
	gA
,
	gB
,
	gC
,
	gD
,
	gE
;

16 
	$£tup
() {

18 
	`pöMode
(
aPö
, 
INPUT
);

19 
	`pöMode
(
bPö
, 
INPUT
);

20 
	`pöMode
(
cPö
, 
INPUT
);

21 
	`pöMode
(
dPö
, 
INPUT
);

22 
	`pöMode
(
ePö
, 
INPUT
);

24 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

25 
Sîül
.
	`begö
(9600);

27 
	}
}

29 
	$bUpd©e
() {

31 
	}
}

33 
boﬁón
 
	$bRód
(
pö
) {

34 
boﬁón
 
vÆue
;

35 
vÆue
 = 
	`digôÆRód
(
pö
);

36  
vÆue
;

37 
	}
}

39 
	$maö
() {

41 
	`öô
();

42 
	`£tup
();

44 
	`bUpd©e
();

45 
A
 = 
	`bRód
(
aPö
);

46 
	`digôÆWrôe
(
ÀdPö
, !
A
);

48 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce1.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	gÀdPö
 = 13;

7 
	gaPö
 = 3;

8 
	gbPö
 = 5;

9 
	gcPö
 = 6;

10 
	gdPö
 = 7;

11 
	gePö
 = 8;

13 
boﬁón
 
	gA
,
	gB
,
	gC
,
	gD
,
	gE
;

18 
	$£tup
() {

20 
	`pöMode
(
aPö
, 
INPUT
);

21 
	`pöMode
(
bPö
, 
INPUT
);

22 
	`pöMode
(
cPö
, 
INPUT
);

23 
	`pöMode
(
dPö
, 
INPUT
);

24 
	`pöMode
(
ePö
, 
INPUT
);

25 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

27 
	}
}

30 
	$maö
() {

32 
	`öô
();

33 
	`£tup
();

35 
A

	`digôÆRód
(
ÀdPö
);

37 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\main.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
ÀdPö
 = 13;

10 
boﬁón
 
	gA
;

11 
	gevít
;

12 
byã
 
	gfú°A
;

13 
byã
 
	g£c⁄dA
;

14 
	ga
;

17 
	$£tup
() {

19 
	`pöMode
(5, 
INPUT
);

20 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

21 
Sîül
.
	`begö
(9600);

22 
	`£t_un˚πaö_cou¡
(200);

23 
	}
}

25 
	$maö
() {

27 
	`öô
();

28 
	`£tup
();

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
A
 = 
	`digôÆRód
(5);

33 i‡(
A
 =
LOW
) {

34 
	`key_°ï
(
ON
);

37 
	`key_°ï
(
OFF
);

39 
evít
 = 
	`gë_evít
();

40 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

42 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp~

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

4 
	gÀdPö
 = 13;

6 
boﬁón
 
	gA
;

9 
	$£tup
() {

11 
	`pöMode
(5, 
INPUT
);

12 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

13 
Sîül
.
	`begö
(9600);

14 
	}
}

16 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

21 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

22 
A
 = 
	`digôÆRód
(5);

23 
Sîül
.
	`¥öt
(
A
, 
BYTE
);

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
	#BUF_SIZE
 700

	)

10 
ÀdPö
 = 13;

12 
boﬁón
 
	gA
;

13 
	gevít
;

14 
	gevít_ˇŒs
;

16 
byã
 
	gfú°A
;

17 
byã
 
	g£c⁄dA
;

18 
	gi
=0;

21 
	gbuf„r
[
BUF_SIZE
];

24 
	$£tup
() {

26 
	`pöMode
(5, 
INPUT
);

27 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

28 
Sîül
.
	`begö
(1200);

29 
	`£t_un˚πaö_cou¡
(200);

30 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

31 
	}
}

33 
	$¥ötBuf„r
(){

34 
i
=0; i< 
BUF_SIZE
 ;i++) {

36 
Sîül
.
	`¥öt
(
buf„r
[
i
], 
DEC
);

38 
	}
}

40 
	$maö
() {

41 
˘ime
=0;

42 
k
=0;

44 
	`öô
();

45 
	`£tup
();

52 ;;
k
++) {

53 
A
 = 
	`digôÆRód
(5);

63 i‡(
A
 =
LOW
) {

64 
	`key_°ï
(
ON
);

67 
	`key_°ï
(
OFF
);

69 
evít
 = 
	`gë_evít
();

70 i‡(
evít
 !
NOEVT
Ë
Sîül
.
	`¥öt
”vít, 
DEC
);

99 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp~

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../../Ch‹dedKeybﬂrd/ã°s/keyevít.h
"

8 
	#BUF_SIZE
 500

	)

10 
ÀdPö
 = 13;

12 
boﬁón
 
	gA
;

13 
	gevít
;

14 
byã
 
	gfú°A
;

15 
byã
 
	g£c⁄dA
;

16 
	gi
=0;

18 
	gbuf„r
[
BUF_SIZE
];

21 
	$£tup
() {

23 
	`pöMode
(5, 
INPUT
);

24 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

25 
Sîül
.
	`begö
(9600);

26 
	`£t_un˚πaö_cou¡
(100);

27 
	}
}

29 
	$¥ötBuf„r
(){

30 
i
=0; i< 
BUF_SIZE
 ;i++) {

31 
Sîül
.
	`¥öt
(1,
DEC
);

34 
	}
}

36 
	$maö
() {

38 
	`öô
();

39 
	`£tup
();

41 
	`digôÆWrôe
(
ÀdPö
, 
HIGH
);

42 
A
 = 
	`digôÆRód
(5);

43 i‡(
A
 =
LOW
) {

44 
	`key_°ï
(
ON
);

47 
	`key_°ï
(
OFF
);

49 
evít
 = 
	`gë_evít
();

52 
buf„r
[
i
] = 
A
;

53 
i
++;

55 i‡(
evít
 =
RELEASED
) {

56 
	`¥ötBuf„r
();

59 i‡(
i
 >
BUF_SIZE
) {

60 
i
=0;

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\include\debounce.h

1 
£t_deboun˚_time
(
mûli£cs
);

2 
¥o˚ss_debouncög
(
°©e
);

3 (*
_dñay
)(
mûli£cs
);

5 
	#BUTTON_ON
 1

	)

6 
	#BUTTON_OFF
 0

	)

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\include\press_button.h

1 
°¨t
();

2 
buâ⁄_¥es£d
();

3 (*
Àd_⁄
)();

4 (*
Àd_off
)();

5 (*
lo›_°ï
)();

6 (*
is_¥es£d
)();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\debounce.c

1 
	~"deboun˚.h
"

2 
	~"¥ess_buâ⁄.h
"

4 
	gdeboun˚_time
;

6 
	$£t_deboun˚_time
(
mûli£cs
) {

7 
deboun˚_time
 = 
mûli£cs
;

8 
	}
}

10 
	$¥o˚ss_debouncög
(
buâ⁄_°©e
) {

11 i‡(
	`is_¥es£d
()!=
buâ⁄_°©e
) {

12 
	`_dñay
(
deboun˚_time
);

13  
	`is_¥es£d
();

15  
buâ⁄_°©e
;

17 
	}
}

19 (*
_dñay
)();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\press_button.c

2 
	~"¥ess_buâ⁄.h
"

4 
	$buâ⁄_¥es£d
()

6 
	`Àd_⁄
();

7 
	}
}

9 
	$buâ⁄_u≈ªs£d
()

11 
	`Àd_off
();

12 
	}
}

14 
	$imp_lo›_°ï
()

16 i‡(
	`is_¥es£d
()) {

17 
	`buâ⁄_¥es£d
();

19 
	`buâ⁄_u≈ªs£d
();

22 
	}
}

24 
	$°¨t
()

26 
shd_°›
=0;

28 !
shd_°›
) {

29 
shd_°›
=
	`lo›_°ï
();

31 
	}
}

33 (*
	glo›_°ï
)()=
imp_lo›_°ï
;

35 (*
	gÀd_⁄
)();

36 (*
	gÀd_off
)();

37 (*
	gis_¥es£d
)();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\util\imp.c

1 
	~<WProgøm.h
>

3 
	$imp_is_¥es£d
()

5  !
	`digôÆRód
(5);

7 
	}
}

9 
	$imp_Àd_⁄
()

11 
	`digôÆWrôe
(13, 
HIGH
);

13 
	}
}

15 
	$imp_Àd_off
()

17 
	`digôÆWrôe
(13, 
LOW
);

19 
	}
}

21 
	$imp_dñay
(
mûli£cs
) {

22 
	`dñay
(
mûli£cs
);

23 
	}
}

25 (*
_dñay
)()=
imp_dñay
;

26 (*
Àd_⁄
)()=
imp_Àd_⁄
;

27 (*
Àd_off
)()=
imp_Àd_off
;

28 (*
is_¥es£d
)()=
imp_is_¥es£d
;

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

9 
	~"AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.h

1 
IMPORT_TEST_GROUP
(
Lo›SãpPro˚ss
);

2 
IMPORT_TEST_GROUP
(
PªssBuâ⁄
);

3 
IMPORT_TEST_GROUP
(
Debouncög
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_debouncing.cpp

20 
	~"CµUTe°/Te°H¨√ss.h
"

21 
	~"CµUTe°Ext/MockSuµ‹t.h
"

25 
	~"¥ess_buâ⁄.h
"

26 
	~"deboun˚.h
"

29 
	$TEST_GROUP
(
Debouncög
)

31 
cuºít_time
;

32 
	`mock_is_¥es£d
() {

33 
¥es£d
;

34 
¥es£d
 = 
	`mock
().
	`a˘uÆCÆl
("is_¥es£d").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

35  
¥es£d
;

38 
	`mock_dñay
(
mûli£cs
) {

39 
	`mock
().
	`a˘uÆCÆl
("dñay").
	`wôhP¨amëî
("mûli£cs",(Ë
mûli£cs
);

41 
db_time
;

42 
buâ⁄_°©e
;

43 
	`£tup
() {

44 
db_time
 = 20;

45 
	`UT_PTR_SET
(
is_¥es£d
,&
mock_is_¥es£d
);

46 
	`UT_PTR_SET
(
_dñay
,&
mock_dñay
);

49 
	`ã¨down
() {

52 
	}
};

54 
	$TEST
(
Debouncög
, 
ã°_buâ⁄_⁄
)

57 
buâ⁄_°©e
 = 
BUTTON_OFF
;

58 
	`£t_deboun˚_time
(
db_time
);

59 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(
BUTTON_ON
);

60 
	`mock
().
	`ex≥˘O√CÆl
("dñay").
	`wôhP¨amëî
("mûli£cs",
db_time
);

61 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(
BUTTON_ON
);

62 
buâ⁄_°©e
=
	`¥o˚ss_debouncög
(button_state);

63 
	`LONGS_EQUAL
(
buâ⁄_°©e
 , 
BUTTON_ON
);

64 
	}
}

66 
	$TEST
(
Debouncög
, 
ã°_buâ⁄_⁄1
)

68 
buâ⁄_°©e
 = 
BUTTON_OFF
;

69 
	`£t_deboun˚_time
(
db_time
);

70 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(
BUTTON_ON
);

71 
	`mock
().
	`ex≥˘O√CÆl
("dñay").
	`wôhP¨amëî
("mûli£cs",
db_time
);

72 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(
BUTTON_OFF
);

73 
buâ⁄_°©e
=
	`¥o˚ss_debouncög
(button_state);

74 
	`LONGS_EQUAL
(
buâ⁄_°©e
, 
BUTTON_OFF
);

75 
	}
}

77 
	$TEST
(
Debouncög
, 
ã°_buâ⁄_off
)

84 
	}
}

87 
	$TEST
(
Debouncög
, 
ã°_buâ⁄_off1
)

94 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_press_button.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°Ext/MockSuµ‹t.h
"

7 
	~"¥ess_buâ⁄.h
"

10 
	$TEST_GROUP
(
Lo›SãpPro˚ss
)

12 
	`mock_lo›_°ï
() {

13 
shd_°›
;

14 
shd_°›
=
	`mock
().
	`a˘uÆCÆl
("lo›_°ï").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

15  
shd_°›
;

17 
	`£tup
() {

18 
	`UT_PTR_SET
(
lo›_°ï
,&
mock_lo›_°ï
);

21 
	`ã¨down
() {

23 
	}
};

25 
	$TEST
(
Lo›SãpPro˚ss
, 
ã°_°¨t
) {

26 
	`mock
().
	`ex≥˘O√CÆl
("lo›_°ï").
	`™dRëu∫VÆue
(1);

27 
	`°¨t
();

28 
	}
}

30 
	$TEST
(
Lo›SãpPro˚ss
, 
ã°_mu…iful_lo›_°ï
) {

31 
	`mock
().
	`ex≥˘O√CÆl
("lo›_°ï").
	`™dRëu∫VÆue
(0);

32 
	`mock
().
	`ex≥˘O√CÆl
("lo›_°ï").
	`™dRëu∫VÆue
(1);

33 
	`°¨t
();

35 
_∆o›
=5;

36 
shd_°›
=1;

37 
	`mock
().
	`ex≥˘NCÆls
(
_∆o›
-1, "lo›_°ï").
	`™dRëu∫VÆue
(!
shd_°›
);

38 
	`mock
().
	`ex≥˘O√CÆl
("lo›_°ï").
	`™dRëu∫VÆue
(
shd_°›
);

39 
	`°¨t
();

40 
	}
}

43 
	$TEST_GROUP
(
PªssBuâ⁄
)

45 
	`mock_is_¥es£d
() {

46 
¥es£d
;

47 
¥es£d
 = 
	`mock
().
	`a˘uÆCÆl
("is_¥es£d").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

48  
¥es£d
;

51 
	`mock_Àd_⁄
() {

52 
	`mock
().
	`a˘uÆCÆl
("led_on");

55 
	`mock_Àd_off
() {

56 
	`mock
().
	`a˘uÆCÆl
("led_off");

59 
	`£tup
() {

60 
	`UT_PTR_SET
(
is_¥es£d
,&
mock_is_¥es£d
);

61 
	`UT_PTR_SET
(
Àd_⁄
,&
mock_Àd_⁄
);

62 
	`UT_PTR_SET
(
Àd_off
,&
mock_Àd_off
);

65 
	`ã¨down
() {

67 
	}
};

69 
	$TEST
(
PªssBuâ⁄
, 
ã°_is_¥es£d
) {

71 
	}
}

72 
	$TEST
(
PªssBuâ⁄
, 
ã°_¥ess_™d_Àd_⁄
)

74 
	`mock
().
	`ex≥˘O√CÆl
("led_on");

76 
	`buâ⁄_¥es£d
();

77 
	}
}

79 
	$TEST
(
PªssBuâ⁄
, 
ã°_is_¥es£d_™d_Àd_⁄
) {

80 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(1);

81 
	`mock
().
	`ex≥˘O√CÆl
("led_on");

82 
	`lo›_°ï
();

83 
	}
}

85 
	$TEST
(
PªssBuâ⁄
, 
ã°_is_¥es£d_™d_Àd_off
) {

86 
	`mock
().
	`ex≥˘O√CÆl
("is_¥es£d").
	`™dRëu∫VÆue
(0);

87 
	`mock
().
	`ex≥˘O√CÆl
("led_off");

88 
	`lo›_°ï
();

89 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\AllTests.h

1 
IMPORT_TEST_GROUP
(
Fú°Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\keyevent.c

1 
	~"keyevít.h
"

3 
	gkeydown_evít_cou¡
=0;

4 
	gkeydown_evít_cou¡s
[]={0,0,0,0,0};

5 
	gkeydown_evít
=0;

6 
	g_key_°©e
=0;

7 
	g_key_°©es
[]={0,0,0,0,0};

8 
	g_ch™√l
=0;

10 
	$keydown_evít_ˇŒback
() {

11 
keydown_evít_cou¡s
[
_ch™√l
] += 1;

12 
keydown_evít_cou¡
 = 
keydown_evít_cou¡s
[
_ch™√l
];

13 
keydown_evít
=
PRESSED
;

14 
	}
}

16 
	$keydown_evít_ªÀa£_ˇŒback
() {

17 
keydown_evít
=
RELEASED
;

18 
	}
}

22 
	$£t_key_°©e
(
°©e
) {

23 
_key_°©e
=
_key_°©es
[
_ch™√l
];

24 i‡(
_key_°©e
==0 && 
°©e
==1) {

25 
	`keydown_evít_ˇŒback
();

27 i‡(
_key_°©e
==1 && 
°©e
==0) {

28 
	`keydown_evít_ªÀa£_ˇŒback
();

30 
_key_°©es
[
_ch™√l
]=
°©e
;

31 
	}
}

33 
	$£t_key
(
ch™√l
) {

34 
_ch™√l
=
ch™√l
;

35 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\keyevent.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#PRESSED
 1

	)

5 
	#RELEASED
 2

	)

7 
keydown_evít_cou¡
;

8 
keydown_evít_cou¡s
[];

9 * 
keydown_evít_cb
;

10 
keydown_evít
;

12 
£t_key_°©e
(
°©e
);

13 
£t_key
(
ch™√l
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\realtime.c

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\realtime.h

1 
my_dñay
();

2 
my_mûlis
();

5 
	$my_dñay
(
ßm∂e_øã
) {

7 
	}
}

9 
	$my_mûlis
() {

11 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

9 
	~"AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\AllTests.h

1 
IMPORT_TEST_GROUP
(
KeydownEvít
);

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\keyevent.c

1 
	~"keyevít.h
"

2 
	~"time.h
"

4 
	gkey_°©e
=0;

5 
	g_key_°©e
=0;

6 
	gp_key_°©e
=0;

8 
	g_un˚πaö_cou¡
;

10 
	g_°©e
=0;

12 
	g_evít
=
NOEVT
;

14 
	gkeydown_evít
=0;

16 
	gßm∂e_øã
;

18 
	gdeboun˚_≥riod
;

19 
	gœ°_deboun˚_time
=0;

21 
	$öô_°©es
() {

22 
key_°©e
=0;

23 
_°©e
=0;

24 
	}
}

26 
	$keydown_evít_ˇŒback
() {

27 
keydown_evít
=
PRESSED
;

28 
	}
}

30 
	$keydown_evít_ªÀa£_ˇŒback
() {

31 
keydown_evít
=
RELEASED
;

32 
	}
}

34 (*
keydown_evít_cb
)(Ë
keydown_evít_ˇŒback
;

36 
	$£t_key_°©e
(
°©e
) {

37 
_key_°©e
 = 
°©e
;

38 
	}
}

40 
	$ªad_key_°©e
(){

41  
key_°©e
;

42 
	}
}

44 
	$£t_un˚πaö_cou¡
(
cou¡
) {

45 
_un˚πaö_cou¡
 = 
cou¡
;

46 
	`öô_°©es
();

47 
	}
}

49 
	$√xt_°©e
(
öp
, 
k
, 
n
) {

50 i‡(!
öp
 && 
k
)

51  (
k
+1Ë% (
n
+1);

53  
öp
;

54 
	}
}

56 
	$¥o˚ss_key_ch©ãrög
() {

57 
_°©e
 = 
	`√xt_°©e
(
_key_°©e
, _°©e, 
_un˚πaö_cou¡
);

58 
p_key_°©e
=
key_°©e
;

59 
key_°©e
 = 0 < 
_°©e
;

60 
	}
}

62 
	$key_°ï
(
k
) {

63 
	`£t_key_°©e
(
k
);

65 
	`¥o˚ss_debouncög
();

67 
	}
}

69 
	$gë_evít
() {

71 i‡(!
p_key_°©e
 && 
key_°©e
)

72 
_evít
=
PRESSED
;

73 i‡(
p_key_°©e
 && !
key_°©e
)

74 
_evít
=
RELEASED
;

76 
_evít
=
NOEVT
;

77  
_evít
;

78 
	}
}

80 
	$£t_deboun˚_≥riod
(
dñay
) {

81 
deboun˚_≥riod
 = 
dñay
;

82 
	}
}

85 
	$£t_ßm∂ög_øã
(
mûlis
) {

86 
ßm∂e_øã
 = 
mûlis
;

87 
	}
}

89 
	$ª£t_œ°_deboun˚_time
() {

90 
œ°_deboun˚_time
 = 
	`my_mûlis
();

91 
	}
}

93 
	$¥o˚ss_debouncög
() {

94 i‡(
_key_°©e
 !
p_key_°©e
) {

95 
	`ª£t_œ°_deboun˚_time
();

98 i‡((
	`my_mûlis
(Ë- 
œ°_deboun˚_time
Ë> 
deboun˚_≥riod
) {

99 
key_°©e
 = 
_key_°©e
;

103 
p_key_°©e
 = 
_key_°©e
;

104 
	}
}

107 
	$ªad_key
() {

108  
key_°©e
;

109 
	}
}

111 
	$£t_key
(
°©e
) {

112 
_key_°©e
 = 
°©e
;

113 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\keyevent.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#NOEVT
 0

	)

5 
	#PRESSED
 1

	)

6 
	#RELEASED
 2

	)

8 (*
keydown_evít_cb
)();

9 
keydown_evít
;

12 
œ°_deboun˚_time
;

13 
deboun˚_≥riod
;

15 
	`£t_key_°©e
(
°©e
);

17 
	`£t_key_°©e1
(
°©e
);

19 
	`ªad_key_°©e
();

20 
	`ªad_keydown_evít
();

22 
	`£t_un˚πaö_cou¡
(
cou¡
);

23 
	`¥o˚ss_key_ch©ãrög
();

24 
	`¥o˚ss_key_ch©ãrög1
();

26 
	`key_°ï
(
°©e
);

27 
	`gë_evít
();

29 
	`£t_deboun˚_≥riod
(
dñay
);

30 
	`£t_ßm∂ög_øã
(
mûlis
);

31 
	`£t_key
(
°©e
);

32 
	`¥o˚ss_debouncög
();

33 
	`ªad_key
();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\test_keyevent.cpp

1 
	~<io°ªam
>

2 
	~<°rög
>

3 
	~<s°ªam
>

5 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~"keyevít.h
"

12 
	~"time.h
"

16 
	#CHAR2VAL
(
x
Ë((x)=='-'?
ON
:
OFF
)

	)

17 
	#CHAR2EVT
(
x
Ë((x)=='^'?
PRESSED
:((x)=='v'?
RELEASED
:
NOEVT
Ë)

	)

19 
	#ASSERT_KEYSTATE
(
ö
,
out
) \

20 
	`as£π_key°©e_loˇti⁄
((
ö
),(
out
), 
__FILE__
,
__LINE__
)

	)

22 
	#ASSERT_KEYSTATE_t
(
ö
,
out
) \

23 
	`as£π_key°©e_t_loˇti⁄
((
ö
),(
out
), 
__FILE__
,
__LINE__
)

	)

25 
__˘ime
 = 0;

28 
	$as£π_debouncög_buf„r
(
ö
,
out
,

29 
exp_˘ime
,

30 
exp_œ°_deboun˚_time
)

32 
a˘uÆ
;

33 
_˘ime
;

34 
	`my_dñay
(5);

35 
_˘ime
 = 
	`my_mûlis
();

36 
	`LONGS_EQUAL
(
exp_˘ime
, 
_˘ime
);

37 
	`£t_key
(
	`CHAR2VAL
(
ö
));

38 
	`¥o˚ss_debouncög
();

39 
a˘uÆ
 = 
	`ªad_key
();

40 
	`LONGS_EQUAL
(
	`CHAR2VAL
(
out
),
a˘uÆ
);

41 
	`LONGS_EQUAL
(
exp_œ°_deboun˚_time
,
œ°_deboun˚_time
);

42 
	}
}

44 
	$as£π_key°©e_t_loˇti⁄
(* 
ö
, * 
out
,c⁄° * 
fûe
, 
löe
) {

49 
	}
}

51 
	$as£π_key°©e_loˇti⁄
(* 
ö
, * 
out
,c⁄° * 
fûe
, 
löe
)

53 
key_°©e
 = 0;

54 
i
=0;

55 
°d
::
o°rög°ªam
 
ss
;

56 (*
ö
))

58 
	`£t_key_°©e
(
	`CHAR2VAL
(*
ö
));

59 
	`¥o˚ss_key_ch©ãrög
();

61 
key_°©e
 = 
	`ªad_key_°©e
();

63 i‡(
	`CHAR2VAL
(*
out
)!=
key_°©e
)

65 
ss
<<(*
out
Ë<< "Éx≥˘ed buà" << (*
ö
Ë<< "áà" << 
i
;

66 
	`FAIL_LOCATION
(
ss
.
	`°r
().
	`c_°r
(),
fûe
,
löe
);

68 
ö
++;
out
++;
i
++;

70 
	}
}

73 
	$TEST_GROUP
(
KeydownEvít
)

76 
	`my_mock_dñay
(
mûlis
) {

77 
__˘ime
 = __˘imê+ 
mûlis
;

80 
	`my_mock_mûlis
() {

81  
__˘ime
;

85 
	`£tup
()

87 
my_dñay
=
my_mock_dñay
;

88 
my_mûlis
=
my_mock_mûlis
;

90 
	`ã¨down
()

93 
	}
};

96 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄
)

98 
ö_s
[]="__----";

99 
ou_s
[]="__----";

101 
	`£t_un˚πaö_cou¡
(3);

102 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

103 
	}
}

105 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄_off1
)

107 
ö_s
[]="__--__";

108 
ou_s
[]="__----";

110 
	`£t_un˚πaö_cou¡
(3);

111 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

112 
	}
}

114 
	$TEST
(
KeydownEvít
, 
ã°_key_⁄_off2
)

116 
ö_s
[]="__--___";

117 
ou_s
[]="__----_";

119 
	`£t_un˚πaö_cou¡
(3);

120 
	`ASSERT_KEYSTATE
(
ö_s
,
ou_s
);

122 
ö_s1
[]="__--___";

123 
ou_s1
[]="__----_";

125 
	`£t_un˚πaö_cou¡
(3);

126 
	`ASSERT_KEYSTATE
(
ö_s1
,
ou_s1
);

127 
	}
};

129 
	$TEST
(
KeydownEvít
, 
ã°_key_¥ess_ªÀa£
)

141 
	}
}

163 
	$TEST
(
KeydownEvít
, 
ã°2
){

164 
öputBuf„r
[] = "_-----";

165 
ex≥˘edBuf„r
[] = "_____-";

167 
s_øã
 = 5, 
exp_time
=5, 
exp_œ°_deb_time
=0;

168 
i
=0;

170 
	`£t_ßm∂ög_øã
(
s_øã
);

171 
	`£t_deboun˚_≥riod
(15);

173 
	`as£π_debouncög_buf„r
(
öputBuf„r
[
i
],
ex≥˘edBuf„r
[i],

174 
exp_time
,

175 
exp_œ°_deb_time
);

177 
exp_œ°_deb_time
=10;
i
++;

179 ; 
i
 < 
	`°æí
(
öputBuf„r
); i++) {

180 
exp_time
+=
s_øã
;

181 
	`as£π_debouncög_buf„r
(
öputBuf„r
[
i
],
ex≥˘edBuf„r
[i],

182 
exp_time
,

183 
exp_œ°_deb_time
);

185 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\time.c

1 #ifde‡
__AVR__


2 
	~"../../ArduöoC‹e/WProgøm.h
"

3 (*
my_dñay
)(Ë
dñay
;

4 (*
my_mûlis
)(Ë
mûlis
;

6 (*
my_dñay
)();

7 (*
my_mûlis
)();

	@C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\time.h

1 (* 
my_dñay
)();

2 (* 
my_mûlis
)();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\AllTests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	$maö
(
ac
, ** 
av
)

33  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

34 
	}
}

36 
	~"Aµliˇti⁄Lib/AŒTe°s.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\AllTests.h

28 
IMPORT_TEST_GROUP
–
Pröãr
);

29 
IMPORT_TEST_GROUP
–
CúcuœrBuf„r
);

30 
IMPORT_TEST_GROUP
–
HñloW‹ld
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.cpp

28 
	~"CúcuœrBuf„r.h
"

29 
	~"Pröãr.h
"

31 
	gCúcuœrBuf„r
::
	$CúcuœrBuf„r
(
ˇ∑côy
) :

32 
	`ödex
(0), 
	`outdex
(0), 
	`ˇ∑côy
(
ˇ∑côy
), 
	`em±y
(
åue
), 
	$fuŒ
(
Ál£
)

34 
buf„r
 = 
√w
 [
this
->
ˇ∑côy
];

35 
	}
}

37 
	gCúcuœrBuf„r
::~
	$CúcuœrBuf„r
()

39 
dñëe
[] 
buf„r
;

40 
	}
}

42 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsEm±y
()

44  
em±y
;

45 
	}
}

47 
boﬁ
 
	gCúcuœrBuf„r
::
	$IsFuŒ
()

49  
fuŒ
;

50 
	}
}

52 
	gCúcuœrBuf„r
::
	$Put
(
i
)

54 
em±y
 = 
Ál£
;

55 
buf„r
[
ödex
] = 
i
;

56 
ödex
 = 
	`Next
(index);

57 i‡(
fuŒ
Ë
outdex
 = 
	`Next
(outdex);

58 i‡(
ödex
 =
outdex
Ë
fuŒ
 = 
åue
;

59 
	}
}

61 
	gCúcuœrBuf„r
::
	$Gë
()

63 
ªsu…
 = -1;

64 
fuŒ
 = 
Ál£
;

66 i‡(!
em±y
) {

67 
ªsu…
 = 
buf„r
[
outdex
];

68 
outdex
 = 
	`Next
(outdex);

69 i‡(
outdex
 =
ödex
Ë
em±y
 = 
åue
;

71  
ªsu…
;

72 
	}
}

74 
	gCúcuœrBuf„r
::
	$C≠acôy
()

76  
ˇ∑côy
;

77 
	}
}

79 
	gCúcuœrBuf„r
::
	$Next
(
i
)

81 i‡(++
i
 >
ˇ∑côy
) i = 0;

82  
i
;

83 
	}
}

85 
	gCúcuœrBuf„r
::
	$Pröt
(
Pröãr
* 
p
)

87 
p
->
	`Pröt
("Circular buffer content:\n<");

89 
¥ötIndex
 = 
outdex
;

90 
cou¡
 = 
ödex
 - 
outdex
;

92 i‡(!
em±y
 && (
ödex
 <
outdex
)Ë
cou¡
 = 
ˇ∑côy
 - (outdex - index);

94 
i
 = 0; i < 
cou¡
; i++) {

95 
p
->
	`Pröt
(
buf„r
[
¥ötIndex
]);

96 
¥ötIndex
 = 
	`Next
(printIndex);

97 i‡(
i
 + 1 !
cou¡
Ë
p
->
	`Pröt
(", ");

99 
p
->
	`Pröt
(">\n");

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.h

28 #i‚de‡
D_CúcuœrBuf„r_H


29 
	#D_CúcuœrBuf„r_H


	)

38 
˛ass
 
	gPröãr
;

40 ˛as†
	cCúcuœrBuf„r


42 
	mpublic
:

43 
ex∂icô
 
CúcuœrBuf„r
(
ˇ∑côy
 = 
CAPACITY
);

44 
	mvútuÆ
 ~
CúcuœrBuf„r
();

46 
Put
();

47 
Gë
();

48 
boﬁ
 
IsEm±y
();

49 
boﬁ
 
IsFuŒ
();

50 
C≠acôy
();

51 
Next
(
i
);

52 
Pröt
(
Pröãr
*);

54 
	m¥iv©e
:

56 
ödex
;

57 
	moutdex
;

58 * 
	mbuf„r
;

59 
	mˇ∑côy
;

62 
	mCAPACITY
 = 5

64 
boﬁ
 
	gem±y
;

65 
boﬁ
 
	gfuŒ
;

67 
CúcuœrBuf„r
(const CircularBuffer&);

68 
	gCúcuœrBuf„r
& 
	g›î©‹
=(c⁄° 
CúcuœrBuf„r
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp

28 
	~"MockPröãr.h
"

29 
	~"CúcuœrBuf„r.h
"

30 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

33 
	$TEST_GROUP
(
CúcuœrBuf„r
)

34 { 
CúcuœrBuf„r
* 
buf„r
;

36 
	`£tup
()

38 
buf„r
 = 
√w
 
	`CúcuœrBuf„r
();

40 
	`ã¨down
()

42 
dñëe
 
buf„r
;

45 
	`fûlTheQueue
(
£ed
, 
howM™y
)

47 
i
 = 0; i < 
howM™y
; i++)

48 
buf„r
->
	`Put
(
£ed
 + 
i
);

50 
	`ªmoveFromQueue
(
howM™y
)

52 
i
 = 0; i < 
howM™y
; i++)

53 
buf„r
->
	`Gë
();

55 
	}
};

57 
	$TEST
(
CúcuœrBuf„r
, 
Em±yA·îCª©i⁄
)

59 
	`CHECK
(
buf„r
->
	`IsEm±y
());

60 
	}
}

62 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±y
)

64 
buf„r
->
	`Put
(10046);

65 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

66 
	}
}

68 
	$TEST
(
CúcuœrBuf„r
, 
NŸEm±yThíEm±y
)

70 
buf„r
->
	`Put
(4567);

71 
	`CHECK
(!
buf„r
->
	`IsEm±y
());

72 
buf„r
->
	`Gë
();

73 
	`CHECK
(
buf„r
->
	`IsEm±y
());

74 
	}
}

76 
	$TEST
(
CúcuœrBuf„r
, 
GëPutO√VÆue
)

78 
buf„r
->
	`Put
(4567);

79 
	`LONGS_EQUAL
(4567, 
buf„r
->
	`Gë
());

80 
	}
}

82 
	$TEST
(
CúcuœrBuf„r
, 
GëPutAFew
)

84 
buf„r
->
	`Put
(1);

85 
buf„r
->
	`Put
(2);

86 
buf„r
->
	`Put
(3);

87 
	`LONGS_EQUAL
(1, 
buf„r
->
	`Gë
());

88 
	`LONGS_EQUAL
(2, 
buf„r
->
	`Gë
());

89 
	`LONGS_EQUAL
(3, 
buf„r
->
	`Gë
());

90 
	}
}

92 
	$TEST
(
CúcuœrBuf„r
, 
C≠acôy
)

94 
CúcuœrBuf„r
 
	`buf„r
(2);

95 
	`LONGS_EQUAL
(2, 
buf„r
.
	`C≠acôy
());

96 
	}
}

98 
	$TEST
(
CúcuœrBuf„r
, 
IsFuŒ
)

100 
	`fûlTheQueue
(0, 
buf„r
->
	`C≠acôy
());

101 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

102 
	}
}

104 
	$TEST
(
CúcuœrBuf„r
, 
Em±yToFuŒToEm±y
)

106 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

108 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

110 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

112 
	`CHECK
(
buf„r
->
	`IsEm±y
());

113 
	}
}

115 
	$TEST
(
CúcuœrBuf„r
, 
WøpAround
)

117 
	`fûlTheQueue
(100, 
buf„r
->
	`C≠acôy
());

119 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

120 
	`LONGS_EQUAL
(100, 
buf„r
->
	`Gë
());

121 
	`CHECK
(!
buf„r
->
	`IsFuŒ
());

122 
buf„r
->
	`Put
(1000);

123 
	`CHECK
(
buf„r
->
	`IsFuŒ
());

125 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 1);

127 
	`LONGS_EQUAL
(1000, 
buf„r
->
	`Gë
());

128 
	`CHECK
(
buf„r
->
	`IsEm±y
());

129 
	}
}

131 
	$TEST
(
CúcuœrBuf„r
, 
PutToFuŒ
)

133 
ˇ∑côy
 = 
buf„r
->
	`C≠acôy
();

134 
	`fûlTheQueue
(900, 
ˇ∑côy
);

135 
buf„r
->
	`Put
(9999);

137 
i
 = 0; i < 
buf„r
->
	`C≠acôy
() - 1; i++)

138 
	`LONGS_EQUAL
(
i
+900+1, 
buf„r
->
	`Gë
());

140 
	`LONGS_EQUAL
(9999, 
buf„r
->
	`Gë
());

141 
	`CHECK
(
buf„r
->
	`IsEm±y
());

142 
	}
}

148 
	$TEST
(
CúcuœrBuf„r
, 
GëFromEm±y
)

150 
	`LONGS_EQUAL
(-1, 
buf„r
->
	`Gë
());

151 
	`CHECK
(
buf„r
->
	`IsEm±y
());

152 
	}
}

160 
	$TEST
(
CúcuœrBuf„r
, 
PrötEm±y
)

162 
MockPröãr
 
mock
;

163 
Pröãr
* 
p
 = &
mock
;

165 
buf„r
->
	`Pröt
(
p
);

168 
	}
}

170 
	$TEST
(
CúcuœrBuf„r
, 
PrötA·îO√Put
)

172 
MockPröãr
 
mock
;

174 
buf„r
->
	`Put
(1);

175 
buf„r
->
	`Pröt
(&
mock
);

178 
	}
}

180 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedOrFuŒ
)

182 
MockPröãr
 
mock
;

184 
buf„r
->
	`Put
(1);

185 
buf„r
->
	`Put
(2);

186 
buf„r
->
	`Put
(3);

187 
buf„r
->
	`Pröt
(&
mock
);

190 
	}
}

192 
	$TEST
(
CúcuœrBuf„r
, 
PrötNŸYëWøµedAndIsFuŒ
)

194 
MockPröãr
 
mock
;

196 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

198 
buf„r
->
	`Pröt
(&
mock
);

203 
	}
}

205 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndIsFuŒOlde°ToNewe°
)

207 
MockPröãr
 
mock
;

209 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

210 
buf„r
->
	`Gë
();

211 
buf„r
->
	`Put
(999);

213 
buf„r
->
	`Pröt
(&
mock
);

218 
	}
}

220 
	$TEST
(
CúcuœrBuf„r
, 
PrötWøµedAndFuŒOvîwrôeOlde°
)

222 
MockPröãr
 
mock
;

224 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

225 
buf„r
->
	`Put
(9999);

227 
buf„r
->
	`Pröt
(&
mock
);

232 
	}
}

234 
	$TEST
(
CúcuœrBuf„r
, 
PrötBound¨y
)

236 
MockPröãr
 
mock
;

238 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

239 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
() - 2);

240 
buf„r
->
	`Put
(888);

241 
	`fûlTheQueue
(300, 
buf„r
->
	`C≠acôy
() - 1);

243 
buf„r
->
	`Pröt
(&
mock
);

248 
	}
}

250 
	$TEST
(
CúcuœrBuf„r
, 
FûlEm±yThíPröt
)

252 
MockPröãr
 
mock
;

254 
	`fûlTheQueue
(200, 
buf„r
->
	`C≠acôy
());

255 
	`ªmoveFromQueue
(
buf„r
->
	`C≠acôy
());

256 
buf„r
->
	`Pröt
(&
mock
);

261 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcher.cpp

28 
	~"EvítDi•©chî.h
"

30 
	gEvítDi•©chî
::
	$EvítDi•©chî
()

32 
	}
}

34 
EvítDi•©chî
::
	$ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
)

36 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

37 
i
->
£c⁄d
->
	`nŸifyRegi°øti⁄
(
ob£rvî
);

39 
ob£rvîLi°_
.
	`push_back
(
	`make_∑ú
(
ty≥
, 
ob£rvî
));

40 
	}
}

42 
	gEvítDi•©chî
::
	$di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
)

44 
li°
<
∑ú
<
EvítTy≥
, 
EvítOb£rvî
*> >::
ôî©‹
 
i
 = 
ob£rvîLi°_
.
	`begö
(); i !ob£rvîLi°_.
	`íd
(); i++)

46 i‡(
i
->
fú°
 =
evít
.
ty≥
)

47 
i
->
£c⁄d
->
	`nŸify
(
evít
, 
timeoutSec⁄ds
);

49 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcher.h

28 #i‚de‡
EVENTDISPATCHER__H


29 
	#EVENTDISPATCHER__H


	)

31 
	~<li°
>

32 
usög
 
«me•a˚
 
	g°d
;

34 
	eEvítTy≥


36 
	mIMPORTANT_EVENT
,

37 
	mLESS_IMPORTANT_EVENT


40 ˛as†
	cEvít


42 
	mpublic
:

43 
EvítTy≥
 
ty≥
;

46 ˛as†
	cEvítOb£rvî


48 
	mpublic
:

49 
vútuÆ
 
nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)=0;

50 
vútuÆ
 
nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)=0;

53 ˛as†
	cEvítDi•©chî


55 
	mli°
<
	m∑ú
<
	mEvítTy≥
, 
	mEvítOb£rvî
*> > 
	mob£rvîLi°_
;

56 
	mpublic
:

57 
EvítDi•©chî
();

59 
ªgi°îOb£rvî
(
EvítTy≥
 
ty≥
, 
EvítOb£rvî
* 
ob£rvî
);

60 
di•©chEvít
(c⁄° 
Evít
& 
evít
, 
timeoutSec⁄ds
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"EvítDi•©chî.h
"

32 ˛as†
	cOb£rvîMock
 : 
public
 
EvítOb£rvî


34 
public
:

35 
vútuÆ
 
	$nŸify
(c⁄° 
Evít
& 
evít
, 
timeOutInSec⁄ds
)

37 
	`mock
().
	`a˘uÆCÆl
("nŸify").
	`⁄Obje˘
(
this
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", (*Ë&
evít
).
	`wôhP¨amëî
("timeOutInSec⁄ds", 
timeOutInSec⁄ds
);

39 
vútuÆ
 
	$nŸifyRegi°øti⁄
(
EvítOb£rvî
* 
√wOb£rvî
)

41 
	`mock
().
	`a˘uÆCÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("√wOb£rvî", 
√wOb£rvî
);

42 
	}
}

45 ˛as†
	cEvítCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

50  ((
Evít
*)
obje˘1
)->
ty≥
 =((Evít*)
obje˘2
)->type;

52 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

54  
	`SåögFrom
(((
Evít
*)
obje˘
)->
ty≥
);

55 
	}
}

59 
	$TEST_GROUP
(
EvítDi•©chî
)

61 
Evít
 
evít
;

62 
EvítDi•©chî
* 
di•©chî
;

63 
Ob£rvîMock
 
ob£rvî
;

64 
Ob£rvîMock
 
ob£rvî2
;

65 
EvítCom∑øt‹
 
evítCom∑øt‹
;

67 
	`£tup
()

69 
di•©chî
 = 
√w
 
EvítDi•©chî
;

70 
	`mock
().
	`ö°ÆlCom∑øt‹
("Evít", 
evítCom∑øt‹
);

72 
	`ã¨down
()

74 
dñëe
 
di•©chî
;

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

77 
	}
};

80 
	$TEST
(
EvítDi•©chî
, 
EvítWôhoutRegi°øti⁄sResu…sI¡oNoCÆls
)

82 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

83 
	}
}

85 
	$TEST
(
EvítDi•©chî
, 
EvítWôhRegi°øti⁄F‹EvítResu…sI¡oCÆlback
)

87 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

88 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

90 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

91 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

92 
	}
}

94 
	$TEST
(
EvítDi•©chî
, 
Dif„ª¡EvítWôhRegi°øti⁄D€sNŸResu…I¡oCÆlback
)

96 
evít
.
ty≥
 = 
LESS_IMPORTANT_EVENT
;

97 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

98 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

99 
	}
}

101 
	$TEST
(
EvítDi•©chî
, 
Regi°îTwoOb£rvîsResu…I¡oTwoCÆlsAndARegi°øti⁄NŸifiˇti⁄
)

103 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

104 
	`mock
().
	`ex≥˘O√CÆl
("nŸify").
	`⁄Obje˘
(&
ob£rvî2
).
	`wôhP¨amëîOfTy≥
("Evít", "evít", &
evít
).
	`wôhP¨amëî
("timeOutInSeconds", 10);

105 
	`mock
().
	`ex≥˘O√CÆl
("nŸifyRegi°øti⁄").
	`⁄Obje˘
(&
ob£rvî
).
	`wôhP¨amëî
("√wOb£rvî", &
ob£rvî2
);

107 
evít
.
ty≥
 = 
IMPORTANT_EVENT
;

108 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî
);

109 
di•©chî
->
	`ªgi°îOb£rvî
(
IMPORTANT_EVENT
, &
ob£rvî2
);

110 
di•©chî
->
	`di•©chEvít
(
evít
, 10);

111 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h

28 
	~<li°
>

29 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\HelloTest.cpp

3 
	~"hñlo.h
"

6 
	~<°dio.h
>

7 
	~<°d¨g.h
>

8 
	~"CµUTe°/Te°H¨√ss.h
"

10 
Sim∂eSåög
* 
buf„r
;

12 
	$TEST_GROUP
(
HñloW‹ld
)

13 { 
	`ouçut_mëhod
(c⁄° * 
ouçut
, ...)

15 
va_li°
 
¨gumíts
;

16 
	`va_°¨t
(
¨gumíts
, 
ouçut
);

17 *
buf„r
 = 
	`VSåögFromF‹m©
(
ouçut
, 
¨gumíts
);

18 
	`va_íd
(
¨gumíts
);

21 
	`£tup
()

23 
buf„r
 = 
√w
 
	`Sim∂eSåög
();

24 
	`UT_PTR_SET
(
PrötF‹m©ed
, &
ouçut_mëhod
);

26 
	`ã¨down
()

28 
dñëe
 
buf„r
;

30 
	}
};

32 
	$TEST
(
HñloW‹ld
, 
PrötOk
)

34 
	`¥ötHñloW‹ld
();

35 
	`STRCMP_EQUAL
("HñlÿW‹ld!\n", 
buf„r
->
	`asCh¨Såög
());

36 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockDocumentationTest.cpp

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

36 
	$TEST_GROUP
(
Fú°Te°Group
)

38 
	}
};

40 
	$TEST
(
Fú°Te°Group
, 
FúsTe°
)

43 
	}
}

45 
	$TEST
(
Fú°Te°Group
, 
Sec⁄dTe°
)

48 
	}
}

51 
	$TEST_GROUP
(
MockDocumíèti⁄
)

53 
	}
};

55 
	$¥odu˘i⁄Code
()

57 
	`mock
().
	`a˘uÆCÆl
("productionCode");

58 
	}
}

60 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rio
)

62 
	`mock
().
	`ex≥˘O√CÆl
("productionCode");

63 
	`¥odu˘i⁄Code
();

64 
	`mock
().
	`checkEx≥˘©i⁄s
();

65 
	}
}

67 ˛as†
	cCœssFromProdu˘i⁄Code


69 
	mpublic
:

70 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
(){}

71 
	}
};

73 ˛as†
	cCœssFromProdu˘i⁄CodeMock
 : 
public
 
CœssFromProdu˘i⁄Code


75 
public
:

76 
vútuÆ
 
	$imp‹è¡Fun˘i⁄
()

78 
	`mock
().
	`a˘uÆCÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
this
);

80 
	}
};

82 
	$TEST
(
MockDocumíèti⁄
, 
Sim∂eS˚«rioObje˘
)

84 
CœssFromProdu˘i⁄Code
* 
obje˘
 = 
√w
 
CœssFromProdu˘i⁄CodeMock
;

86 
	`mock
().
	`ex≥˘O√CÆl
("imp‹è¡Fun˘i⁄").
	`⁄Obje˘
(
obje˘
);

87 
obje˘
->
	`imp‹è¡Fun˘i⁄
();

88 
	`mock
().
	`checkEx≥˘©i⁄s
();

90 
dñëe
 
obje˘
;

91 
	}
}

93 
	$∑ømëîs_fun˘i⁄
(
p1
, c⁄° * 
p2
)

95 * 
obje˘
 = (*) 1;

96 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 
p1
).wôhP¨amëî("p2", 
p2
);

97 
	}
}

99 
	$TEST
(
MockDocumíèti⁄
, 
∑ømëîs
)

101 * 
obje˘
 = (*) 1;

102 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`⁄Obje˘
(
obje˘
).
	`wôhP¨amëî
("p1", 2).withParameter("p2", "hah");

103 
	`∑ømëîs_fun˘i⁄
(2, "hah");

104 
	}
}

106 ˛as†
	cMyTy≥Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


108 
public
:

109 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

111  
obje˘1
 =
obje˘2
;

113 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

115  
	`SåögFrom
(
obje˘
);

116 
	}
}

119 
	$TEST
(
MockDocumíèti⁄
, 
Obje˘P¨amëîs
)

121 * 
obje˘
 = (*) 1;

122 
MyTy≥Com∑øt‹
 
com∑øt‹
;

123 
	`mock
().
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

124 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("myTy≥", "∑ømëîName", 
obje˘
);

125 
	`mock
().
	`˛ór
();

126 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

127 
	}
}

129 
	$TEST
(
MockDocumíèti⁄
, 
ªtu∫VÆue
)

131 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`™dRëu∫VÆue
(10);

132 
vÆue
 = 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

133 
vÆue
 = 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

134 
	}
}

136 
	$TEST
(
MockDocumíèti⁄
, 
£tD©a
)

138 
CœssFromProdu˘i⁄Code
 
obje˘
;

139 
	`mock
().
	`£tD©a
("importantValue", 10);

140 
	`mock
().
	`£tD©aObje˘
("imp‹è¡Obje˘", "CœssFromProdu˘i⁄Code", &
obje˘
);

142 
CœssFromProdu˘i⁄Code
 * 
pobje˘
;

143 
vÆue
 = 
	`mock
().
	`gëD©a
("imp‹è¡VÆue").
	`gëI¡VÆue
();

144 
pobje˘
 = (
CœssFromProdu˘i⁄Code
*Ë
	`mock
().
	`gëD©a
("imp‹è¡Obje˘").
	`gëObje˘Poöãr
();

146 
	`LONGS_EQUAL
(10, 
vÆue
);

147 
	`POINTERS_EQUAL
(
pobje˘
, &
obje˘
);

148 
	}
}

150 
	$doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
()

152 
	}
}

154 
	$TEST
(
MockDocumíèti⁄
, 
ŸhîMockSuµ‹t
)

156 
	`mock
().
	`¸ashOnFaûuª
();

159 
	`mock
().
	`ex≥˘O√CÆl
("foo");

160 
	`mock
().
	`ign‹eOthîCÆls
();

162 
	`mock
().
	`dißbÀ
();

163 
	`doSomëhögTh©WouldOthîwi£BlowUpTheMockögFømew‹k
();

164 
	`mock
().
	`íabÀ
();

166 
	`mock
().
	`˛ór
();

168 
	}
}

170 
	$TEST
(
MockDocumíèti⁄
, 
sc›e
)

172 
	`mock
("xmÕ¨£r").
	`ex≥˘O√CÆl
("open");

173 
	`mock
("fûesy°em").
	`ign‹eOthîCÆls
();

175 
	`mock
("xmÕ¨£r").
	`a˘uÆCÆl
("open");

176 
	}
}

178 
	$equÆMëhod
(* 
obje˘1
, * 
obje˘2
)

180  
obje˘1
 =
obje˘2
;

181 
	}
}

183 * 
	$toSåögMëhod
(*)

186 
	}
}

188 
	$TEST
(
MockDocumíèti⁄
, 
CI¡îÁ˚
)

190 * 
obje˘
 = (*) 0x1;

192 
	`mock_c
()->
	`ex≥˘O√CÆl
("foo")->
	`wôhI¡P¨amëîs
("öãgî", 10)->
	`™dRëu∫DoubÀVÆue
(1.11);

193 
	`mock_c
()->
	`a˘uÆCÆl
("foo")->
	`wôhI¡P¨amëîs
("öãgî", 10)->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
;

195 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥", 
equÆMëhod
, 
toSåögMëhod
);

196 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

197 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("b¨")->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", 
obje˘
);

198 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

200 
	`mock_c
()->
	`£tI¡D©a
("important", 10);

201 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

202 
	`mock_c
()->
	`˛ór
();

203 
	}
}

205 
	$TEST_GROUP
(
FooTe°Group
)

207 
	`£tup
()

212 
	`ã¨down
()

216 
	}
};

218 
	$TEST
(
FooTe°Group
, 
Foo
)

221 
	}
}

223 
	$TEST
(
FooTe°Group
, 
M‹eFoo
)

226 
	}
}

228 
	$TEST_GROUP
(
B¨Te°Group
)

230 
	`£tup
()

234 
	}
};

236 
	$TEST
(
B¨Te°Group
, 
B¨
)

239 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockPrinter.h

28 #i‚de‡
D_MockPröãr_H


29 
	#D_MockPröãr_H


	)

38 
	~"Pröãr.h
"

39 
	~"CµUTe°/Sim∂eSåög.h
"

40 
	~<°dlib.h
>

41 
	~<°rög
>

43 ˛as†
	cMockPröãr
: 
public
 
Pröãr


45 
public
:

46 
ex∂icô
 
	$MockPröãr
()

49 
vútuÆ
 ~
	$MockPröãr
()

51 
	}
}

53 
vútuÆ
 
	$Pröt
(c⁄° * 
s
)

55 
ßvedOuçut
.
	`≠≥nd
(
s
);

56 
	}
}

58 
vútuÆ
 
	$Pröt
(
vÆue
)

60 
Sim∂eSåög
 
buf„r
;

61 
buf„r
 = 
	`SåögFromF‹m©
("%ld", 
vÆue
);

62 
ßvedOuçut
.
	`≠≥nd
(
buf„r
.
	`asCh¨Såög
());

63 
	}
}

65 
	g°d
::
°rög
 
	$gëOuçut
() const

67  
ßvedOuçut
;

68 
	}
}

70 
	g¥iv©e
:

72 
°d
::
°rög
 
ßvedOuçut
;

74 
MockPröãr
(const MockPrinter&);

75 
	gMockPröãr
& 
	g›î©‹
=(c⁄° 
MockPröãr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.cpp

28 
	~"Pröãr.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Sim∂eSåög.h
"

31 
	~<°dio.h
>

33 
	gPröãr
::
	$Pröãr
()

35 
	}
}

37 
Pröãr
::~
	$Pröãr
()

39 
	}
}

41 
Pröãr
::
	$Pröt
(c⁄° * 
s
)

43 c⁄° * 
p
 = 
s
; *p;Ö++)

44 
	`putch¨
(*
p
);

45 
	}
}

47 
	gPröãr
::
	$Pröt
(
n
)

49 
	`Pröt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

50 
	}
}

52 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, c⁄° * 
	gs
)

54 
	gp
.
Pröt
(
s
);

55  
	gp
;

58 
	gPröãr
& 
	g›î©‹
<<(Pröãr& 
	gp
, 
	gi
)

60 
	gp
.
Pröt
(
i
);

61  
	gp
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.h

28 #i‚de‡
D_Pröãr_H


29 
	#D_Pröãr_H


	)

37 ˛as†
	cPröãr


39 
	mpublic
:

40 
ex∂icô
 
Pröãr
();

41 
	mvútuÆ
 ~
Pröãr
();

43 
vútuÆ
 
Pröt
(const *);

44 
vútuÆ
 
Pröt
();

46 
	m¥iv©e
:

48 
Pröãr
(const Printer&);

49 
	mPröãr
& 
	m›î©‹
=(c⁄° 
Pröãr
&);

53 
	gPröãr
& 
	g›î©‹
<<(Printer&, const *);

54 
	gPröãr
& 
	g›î©‹
<<(Printer&, );

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\PrinterTest.cpp

28 
	~"Pröãr.h
"

29 
	~"MockPröãr.h
"

30 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

33 
	$TEST_GROUP
(
Pröãr
)

34 { 
Pröãr
* 
¥öãr
;

35 
MockPröãr
* 
mockPröãr
;

37 
	`£tup
()

39 
mockPröãr
 = 
√w
 
	`MockPröãr
();

40 
¥öãr
 = 
mockPröãr
;

42 
	`ã¨down
()

44 
dñëe
 
¥öãr
;

46 
	}
};

48 
	$TEST
(
Pröãr
, 
PrötC⁄°Ch¨Sèr
)

50 
¥öãr
->
	`Pröt
("hello");

51 
¥öãr
->
	`Pröt
("hello\n");

52 
	`CHECK_EQUAL
("hñlohñlo\n", 
mockPröãr
->
	`gëOuçut
());

53 
	}
}

55 
	$TEST
(
Pröãr
, 
PrötL⁄g
)

57 
¥öãr
->
	`Pröt
(1234);

59 
	}
}

61 
	$TEST
(
Pröãr
, 
SåómO≥øt‹s
)

63 *
¥öãr
 << "n=" << 1234;

65 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.c

1 
	~<°dio.h
>

2 
	~"hñlo.h
"

4 
	$¥ötHñloW‹ld
()

6 
	`PrötF‹m©ed
("Hello World!\n");

7 
	}
}

9 (*
PrötF‹m©ed
)(c⁄° *, ...Ë
¥ötf
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.h

1 #i‚de‡
HELLO_H_


2 
	#HELLO_H_


	)

4 
¥ötHñloW‹ld
();

6 (*
PrötF‹m©ed
)(const *, ...);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h

28 #i‚de‡
D_CodeMem‹yRï‹tF‹m©ãr_h


29 
	#D_CodeMem‹yRï‹tF‹m©ãr_h


	)

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
˛ass
 
	gCodeRï‹tögAŒoˇti⁄Node
;

34 ˛as†
	cCodeMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


36 
¥iv©e
:

37 
CodeRï‹tögAŒoˇti⁄Node
* 
codeRï‹tögLi°_
;

38 
Mem‹yLókAŒoˇt‹
* 
	möã∫ÆAŒoˇt‹_
;

40 
	mpublic
:

41 
CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
);

42 
	mvútuÆ
 ~
CodeMem‹yRï‹tF‹m©ãr
();

44 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

45 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

47 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

48 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

50 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

51 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

53 
¥iv©e
:

55 
	`addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
);

56 
CodeRï‹tögAŒoˇti⁄Node
* 
	`födNode
(* 
mem‹y
);

57 
boﬁ
 
	`v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
);

58 
	`˛órRï‹tög
();

60 
boﬁ
 
	`isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

61 
Sim∂eSåög
 
	`¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
);

63 
Sim∂eSåög
 
	`gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, 
size_t
 
size
);

64 
Sim∂eSåög
 
	`gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° Sim∂eSåög& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
);

65 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReportAllocator.h

28 #i‚de‡
D_Mem‹yRï‹tAŒoˇt‹_h


29 
	#D_Mem‹yRï‹tAŒoˇt‹_h


	)

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

33 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

35 ˛as†
	cMem‹yRï‹tAŒoˇt‹
 : 
public
 
Mem‹yLókAŒoˇt‹


37 
¥Ÿe˘ed
:

38 
Te°Resu…
* 
ªsu…_
;

39 
Mem‹yLókAŒoˇt‹
* 
	mªÆAŒoˇt‹_
;

40 
Mem‹yRï‹tF‹m©ãr
* 
	mf‹m©ãr_
;

41 
	mpublic
:

42 
Mem‹yRï‹tAŒoˇt‹
();

43 
	mvútuÆ
 ~
Mem‹yRï‹tAŒoˇt‹
();

45 
vútuÆ
 
£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

46 
vútuÆ
 
£tTe°Resu…
(
Te°Resu…
* 
ªsu…
);

47 
vútuÆ
 
£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

49 
vútuÆ
 
boﬁ
 
ÆloˇãMem‹yLókNodeSï¨©ñy
();

50 
vútuÆ
 
Mem‹yLókAŒoˇt‹
* 
gëRólAŒoˇt‹
();

52 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

53 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
);

55 
vútuÆ
 c⁄° * 
«me
();

56 
vútuÆ
 c⁄° * 
Æloc_«me
();

57 
vútuÆ
 c⁄° * 
‰ì_«me
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReportFormatter.h

28 #i‚de‡
D_Mem‹yRï‹tF‹m©ãr_h


29 
	#D_Mem‹yRï‹tF‹m©ãr_h


	)

31 
˛ass
 
	gTe°Ouçut
;

32 
˛ass
 
	gUã°
;

34 ˛as†
	cMem‹yRï‹tF‹m©ãr


36 
	mpublic
:

37 
vútuÆ
 ~
	$Mem‹yRï‹tF‹m©ãr
(){}

39 
vútuÆ
 
	`ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

40 
vútuÆ
 
	`ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

42 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

43 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)=0;

45 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

46 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)=0;

47 
	}
};

49 ˛as†
	cN‹mÆMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


51 
public
:

52 
N‹mÆMem‹yRï‹tF‹m©ãr
();

53 
	mvútuÆ
 ~
N‹mÆMem‹yRï‹tF‹m©ãr
();

55 
vútuÆ
 
ªp‹t_ã°group_°¨t
(
Te°Resu…
* , 
Uã°
& );

56 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* , 
Uã°
& ){};

58 
vútuÆ
 
	`ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

59 
vútuÆ
 
	`ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
);

61 
vútuÆ
 
	`ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

62 
vútuÆ
 
	`ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
);

63 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h

28 #i‚de‡
D_Mem‹yRï‹ãrPlugö_h


29 
	#D_Mem‹yRï‹ãrPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

34 
˛ass
 
	gMem‹yRï‹tF‹m©ãr
;

36 ˛as†
	cMem‹yRï‹ãrPlugö
 : 
public
 
Te°Plugö


38 
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr_
;

40 
Mem‹yRï‹tAŒoˇt‹
 
	mmÆlocAŒoˇt‹
;

41 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAŒoˇt‹
;

42 
Mem‹yRï‹tAŒoˇt‹
 
	m√wAºayAŒoˇt‹
;

44 
Sim∂eSåög
 
	mcuºítTe°Group_
;

45 
	mpublic
:

46 
Mem‹yRï‹ãrPlugö
();

47 
	mvútuÆ
 ~
Mem‹yRï‹ãrPlugö
();

49 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

50 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
 & 
ã°
, 
Te°Resu…
 & 
ªsu…
);

51 
vútuÆ
 
boﬁ
 
∑r£Argumíts
(, const **, );

53 
	m¥Ÿe˘ed
:

54 
vútuÆ
 
Mem‹yRï‹tF‹m©ãr
* 
¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
);

56 
	m¥iv©e
:

57 
de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
);

59 
£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

60 
ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

62 
öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockActualFunctionCall.h

28 #i‚de‡
D_MockA˘uÆFun˘i⁄CÆl_h


29 
	#D_MockA˘uÆFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

34 
˛ass
 
	gMockFaûuªRï‹ãr
;

35 
˛ass
 
	gMockFaûuª
;

36 
˛ass
 
	gMockNamedVÆue
;

38 ˛as†
	cMockA˘uÆFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


40 
public
:

41 
MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

42 
	mvútuÆ
 ~
MockA˘uÆFun˘i⁄CÆl
();

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
boﬁ
 
	$isFulfûÀd
() const;

61 
vútuÆ
 
boﬁ
 
	$hasFaûed
() const;

63 
vútuÆ
 
	`checkEx≥˘©i⁄s
();

65 
vútuÆ
 
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

66 
¥Ÿe˘ed
:

67 
vútuÆ
 
Uã°
* 
	$gëTe°
() const;

68 
vútuÆ
 
	`ˇŒHasSuc˚eded
();

69 
vútuÆ
 
	`fö«lizeCÆlWhíFulfûÀd
();

70 
vútuÆ
 
	`ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

71 
vútuÆ
 
	`checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
);

73 
	eA˘uÆCÆlSèã
 {

74 
CALL_IN_PROGESS
,

75 
CALL_FAILED
,

76 
CALL_SUCCEED


78 
vútuÆ
 c⁄° * 
	`°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
);

79 
vútuÆ
 
	`£tSèã
(
A˘uÆCÆlSèã
 
°©e
);

80 
vútuÆ
 
	`checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
);

82 
¥iv©e
:

83 
MockFaûuªRï‹ãr
* 
ªp‹ãr_
;

85 
A˘uÆCÆlSèã
 
°©e_
;

86 
MockEx≥˘edFun˘i⁄CÆl
* 
_fulfûÀdEx≥˘©i⁄
;

88 
MockEx≥˘edFun˘i⁄sLi°
 
unfulfûÀdEx≥˘©i⁄s_
;

89 c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s_
;

90 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄CÆl_h


29 
	#D_MockEx≥˘edFun˘i⁄CÆl_h


	)

31 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 
Sim∂eSåög
 
SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

36 ˛as†
	cMockEx≥˘edFun˘i⁄CÆl
 : 
public
 
MockFun˘i⁄CÆl


39 
public
:

40 
MockEx≥˘edFun˘i⁄CÆl
();

41 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄CÆl
();

43 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

44 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

45 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ign‹eOthîP¨amëîs
();

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

53 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

54 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

55 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

56 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

58 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

60 
vútuÆ
 
MockNamedVÆue
 
gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

61 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîTy≥
(c⁄° Sim∂eSåög& 
«me
);

62 
vútuÆ
 
Sim∂eSåög
 
gëP¨amëîVÆueSåög
(c⁄° Sim∂eSåög& 
«me
);

64 
vútuÆ
 
boﬁ
 
hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

65 
vútuÆ
 
boﬁ
 
hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

66 
vútuÆ
 
boﬁ
 
ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

67 
vútuÆ
 
boﬁ
 
	$ªœãsToObje˘
(*
obje˘På
) const;

69 
vútuÆ
 
boﬁ
 
	`isFulfûÀd
();

70 
vútuÆ
 
boﬁ
 
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
();

71 
vútuÆ
 
boﬁ
 
	`¨eP¨amëîsFulfûÀd
();

72 
vútuÆ
 
boﬁ
 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

74 
vútuÆ
 
	`ˇŒWasMade
();

75 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
);

76 
vútuÆ
 
	`∑ømëîsWîeIgn‹ed
();

77 
vútuÆ
 
	`wasPas£dToObje˘
();

78 
vútuÆ
 
	`ª£tEx≥˘©i⁄
();

80 
vútuÆ
 
Sim∂eSåög
 
	`ˇŒToSåög
();

81 
vútuÆ
 
Sim∂eSåög
 
	`missögP¨amëîsToSåög
();

83 
¥iv©e
:

85 ˛as†
	cMockEx≥˘edFun˘i⁄P¨amëî
 : 
public
 
MockNamedVÆue


87 
public
:

88 
	`MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
);

89 
	`£tFulfûÀd
(
boﬁ
 
b
);

90 
boﬁ
 
	`isFulfûÀd
() const;

92 
¥iv©e
:

93 
boﬁ
 
fulfûÀd_
;

96 
MockEx≥˘edFun˘i⁄P¨amëî
* 
	`ôem
(
MockNamedVÆueLi°Node
* 
node
);

98 
boﬁ
 
ign‹eOthîP¨amëîs_
;

99 
boﬁ
 
∑ømëîsWîeIgn‹ed_
;

100 
boﬁ
 
wasCÆlMade_
;

101 
MockNamedVÆueLi°
* 
∑ømëîs_
;

102 
MockNamedVÆue
 
ªtu∫VÆue_
;

103 * 
obje˘På_
;

104 
boﬁ
 
wasPas£dToObje˘_
;

105 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h

28 #i‚de‡
D_MockEx≥˘edFun˘i⁄sLi°_h


29 
	#D_MockEx≥˘edFun˘i⁄sLi°_h


	)

31 
˛ass
 
	gMockEx≥˘edFun˘i⁄CÆl
;

32 
˛ass
 
	gMockNamedVÆue
;

34 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°


37 
	mpublic
:

38 
MockEx≥˘edFun˘i⁄sLi°
();

39 
	mvútuÆ
 ~
MockEx≥˘edFun˘i⁄sLi°
();

40 
vútuÆ
 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

42 
vútuÆ
 
	$size
() const;

43 
vútuÆ
 
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const;

44 
vútuÆ
 
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const;

45 
vútuÆ
 
boﬁ
 
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const;

46 
vútuÆ
 
boﬁ
 
	$hasFulfûÀdEx≥˘©i⁄s
() const;

47 
vútuÆ
 
boﬁ
 
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const;

48 
vútuÆ
 
boﬁ
 
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const;

49 
vútuÆ
 
boﬁ
 
	$isEm±y
() const;

51 
vútuÆ
 
	`addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
);

52 
vútuÆ
 
	`addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

53 
vútuÆ
 
	`addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

54 
vútuÆ
 
	`addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
);

56 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

57 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

58 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
vútuÆ
 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

60 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

61 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
);

63 
vútuÆ
 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
);

65 
vútuÆ
 
MockEx≥˘edFun˘i⁄CÆl
* 
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

66 
vútuÆ
 
MockEx≥˘edFun˘i⁄CÆl
* 
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
();

68 
vútuÆ
 
	`ª£tEx≥˘©i⁄s
();

69 
vútuÆ
 
	`ˇŒWasMade
();

70 
vútuÆ
 
	`wasPas£dToObje˘
();

71 
vútuÆ
 
	`∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
);

73 
vútuÆ
 
Sim∂eSåög
 
	`unfulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

74 
vútuÆ
 
Sim∂eSåög
 
	`fulfûÀdFun˘i⁄sToSåög
(c⁄° Sim∂eSåög& 
löePªfix
 = "") const;

75 
vútuÆ
 
Sim∂eSåög
 
	$missögP¨amëîsToSåög
() const;

77 
¥Ÿe˘ed
:

78 
vútuÆ
 
	`¥u√Em±yNodeFromLi°
();

79 
vútuÆ
 
Sim∂eSåög
 
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const;

81 ˛as†
	cMockEx≥˘edFun˘i⁄sLi°Node


83 
public
:

84 
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl_
;

86 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt_
;

87 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
MockEx≥˘edFun˘i⁄CÆl
* 
ex≥˘edCÆl
)

88 : 
	`ex≥˘edCÆl_
(
ex≥˘edCÆl
), 
	`√xt_
(
NULL
) {};

90 
¥iv©e
:

91 
MockEx≥˘edFun˘i⁄sLi°Node
* 
hód_
;

93 
	`MockEx≥˘edFun˘i⁄sLi°
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
&);

94 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockFailure.h

29 #i‚de‡
D_MockFaûuª_h


30 
	#D_MockFaûuª_h


	)

32 
	~"CµUTe°/Te°Faûuª.h
"

34 
˛ass
 
	gMockEx≥˘edFun˘i⁄sLi°
;

35 
˛ass
 
	gMockA˘uÆFun˘i⁄CÆl
;

36 
˛ass
 
	gMockNamedVÆue
;

37 
˛ass
 
	gMockFaûuª
;

39 ˛as†
	cMockFaûuªRï‹ãr


41 
	m¥Ÿe˘ed
:

42 
boﬁ
 
¸ashOnFaûuª_
;

43 
	mpublic
:

44 
	$MockFaûuªRï‹ãr
(Ë: 
	$¸ashOnFaûuª_
(
Ál£
){};

45 
vútuÆ
 ~
	$MockFaûuªRï‹ãr
(Ë{
	}
};

47 
vútuÆ
 
ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
);

48 
vútuÆ
 
Uã°
* 
gëTe°ToFaû
();

50 
vútuÆ
 
	$¸ashOnFaûuª
(Ë{
¸ashOnFaûuª_
 = 
åue
; 
	}
}

53 ˛as†
	cMockFaûuª
 : 
public
 
Te°Faûuª


55 
public
:

56 
MockFaûuª
(
Uã°
* 
ã°
);

57 
	mvútuÆ
 ~
	$MockFaûuª
(){};

58 
¥Ÿe˘ed
:

59 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

60 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

61 
	}
};

63 ˛as†
	cMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


65 
public
:

66 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

67 
	mvútuÆ
 ~
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(){};

68 
	}
};

70 ˛as†
	cMockU√x≥˘edCÆlH≠≥√dFaûuª
 : 
public
 
MockFaûuª


72 
public
:

73 
MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

74 
	mvútuÆ
 ~
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(){};

75 
	}
};

77 ˛as†
	cMockU√x≥˘edP¨amëîFaûuª
 : 
public
 
MockFaûuª


79 
public
:

80 
MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

81 
	mvútuÆ
 ~
	$MockU√x≥˘edP¨amëîFaûuª
(){};

82 
	}
};

84 ˛as†
	cMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


86 
public
:

87 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

88 
	mvútuÆ
 ~
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(){};

89 
	}
};

91 ˛as†
	cMockNoWayToCom∑ªCu°omTy≥Faûuª
 : 
public
 
MockFaûuª


93 
public
:

94 
MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
);

95 
	mvútuÆ
 ~
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(){};

96 
	}
};

98 ˛as†
	cMockU√x≥˘edObje˘Faûuª
 : 
public
 
MockFaûuª


100 
public
:

101 
MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
ex≥˘ed
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

102 
	mvútuÆ
 ~
	$MockU√x≥˘edObje˘Faûuª
(){}

103 
	}
};

105 ˛as†
	cMockEx≥˘edObje˘Did¡H≠≥nFaûuª
 : 
public
 
MockFaûuª


107 
public
:

108 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
);

109 
	mvútuÆ
 ~
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(){}

110 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockFunctionCall.h

28 #i‚de‡
D_MockFun˘i⁄CÆl_h


29 
	#D_MockFun˘i⁄CÆl_h


	)

35 
˛ass
 
	gMockNamedVÆueCom∑øt‹
;

36 
˛ass
 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
;

38 
	~"CµUTe°Ext/MockNamedVÆue.h
"

40 ˛as†
	cMockFun˘i⁄CÆl


42 
	mpublic
:

43 
MockFun˘i⁄CÆl
();

44 
	mvútuÆ
 ~
MockFun˘i⁄CÆl
();

46 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)=0;

47 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)=0;

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)=0;

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)=0;

51 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)=0;

52 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
	$ign‹eOthîP¨amëîs
(Ë{  *
this
;};

54 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

55 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(
vÆue
)=0;

56 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(c⁄° * 
vÆue
)=0;

57 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`™dRëu∫VÆue
(* 
vÆue
)=0;

58 
vútuÆ
 
boﬁ
 
	`hasRëu∫VÆue
()=0;

59 
vútuÆ
 
MockNamedVÆue
 
	`ªtu∫VÆue
()=0;

61 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	`⁄Obje˘
(* 
obje˘På
)=0;

63 
vútuÆ
 
	`£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
);

65 
¥Ÿe˘ed
:

66 
	`£tName
(c⁄° 
Sim∂eSåög
& 
«me
);

67 
Sim∂eSåög
 
	$gëName
() const;

68 
MockNamedVÆueCom∑øt‹
* 
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const;

69 
¥iv©e
:

70 
Sim∂eSåög
 
fun˘i⁄Name_
;

71 
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
com∑øt‹Rïosô‹y_
;

72 
	}
};

74 
	gMockFun˘i⁄CÆlComposôeNode
;

75 ˛as†
	cMockFun˘i⁄CÆlComposôe
 : 
public
 
MockFun˘i⁄CÆl


77 
public
:

78 
MockFun˘i⁄CÆlComposôe
();

79 
	mvútuÆ
 ~
MockFun˘i⁄CÆlComposôe
();

81 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
&);

82 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

83 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, );

84 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, const *);

85 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *);

86 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, const SimpleString&, *);

87 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ign‹eOthîP¨amëîs
();

89 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

90 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
();

91 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(const *);

92 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(*);

93 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

94 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

96 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* );

98 
vútuÆ
 
add
(
MockFun˘i⁄CÆl
& 
ˇŒ
);

99 
vútuÆ
 
˛ór
();

100 
	m¥iv©e
:

101 
MockFun˘i⁄CÆlComposôeNode
* 
hód_
;

104 ˛as†
	cMockIgn‹edCÆl
 : 
public
 
MockFun˘i⁄CÆl


106 
public
:

107 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhName
(c⁄° 
Sim∂eSåög
&Ë{  *
this
;}

108 
vútuÆ
 
MockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

109 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, Ë{  *
this
; 
	}
}

110 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
&, c⁄° *Ë{  *
this
; 
	}
}

111 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& , *Ë{  *
this
; 
	}
}

112 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
&, c⁄° Sim∂eSåög&, *Ë{  *
this
; 
	}
}

114 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
; 
	}
}

115 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(Ë{  *
this
;
	}
}

116 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(c⁄° *Ë{  *
this
; 
	}
}

117 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$™dRëu∫VÆue
(*Ë{  *
this
; 
	}
}

118 
vútuÆ
 
boﬁ
 
	$hasRëu∫VÆue
(Ë{  
Ál£
; 
	}
}

119 
vútuÆ
 
MockNamedVÆue
 
	$ªtu∫VÆue
(Ë{  
	`MockNamedVÆue
(""); 
	}
}

121 
vútuÆ
 
	gMockFun˘i⁄CÆl
& 
	$⁄Obje˘
(* ) {  *
this
; 
	}
}

123 
	gMockFun˘i⁄CÆl
& 
	$ö°™˚
(Ë{ 
MockIgn‹edCÆl
 
ˇŒ
;  cÆl; 
	}
};

126 ˛as†
	cMockFun˘i⁄CÆlTø˚
 : 
public
 
MockFun˘i⁄CÆl


128 
public
:

129 
MockFun˘i⁄CÆlTø˚
();

130 
	mvútuÆ
 ~
MockFun˘i⁄CÆlTø˚
();

132 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhName
(c⁄° 
Sim∂eSåög
& 
«me
);

133 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

134 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

135 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

136 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

137 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
);

138 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ign‹eOthîP¨amëîs
();

140 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

141 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(
vÆue
);

142 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(c⁄° * 
vÆue
);

143 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
™dRëu∫VÆue
(* 
vÆue
);

144 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

145 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

147 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
⁄Obje˘
(* 
obje˘På
);

149 c⁄° * 
gëTø˚Ouçut
();

150 
˛ór
();

151 
	mMockFun˘i⁄CÆlTø˚
& 
ö°™˚
();

153 
	m¥iv©e
:

154 
Sim∂eSåög
 
åa˚Buf„r_
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockNamedValue.h

28 #i‚de‡
D_MockNamedVÆue_h


29 
	#D_MockNamedVÆue_h


	)

35 ˛as†
	cMockNamedVÆueCom∑øt‹


37 
	mpublic
:

38 
	$MockNamedVÆueCom∑øt‹
() {};

39 
vútuÆ
 ~
	$MockNamedVÆueCom∑øt‹
(Ë{
	}
};

41 
vútuÆ
 
boﬁ
 
isEquÆ
(* 
obje˘1
, * 
obje˘2
)=0;

42 
vútuÆ
 
Sim∂eSåög
 
vÆueToSåög
(* 
obje˘
)=0;

45 ˛as†
	cMockFun˘i⁄Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


47 
public
:

48 
	$boﬁ
 (*
	tisEquÆFun˘i⁄
)(*, *);

49 
	$Sim∂eSåög
 (*
	tvÆueToSåögFun˘i⁄
)(*);

51 
	$MockFun˘i⁄Com∑øt‹
(
isEquÆFun˘i⁄
 
equÆ
, 
vÆueToSåögFun˘i⁄
 
vÆToSåög
)

52 : 
	`equÆ_
(
equÆ
), 
	$vÆueToSåög_
(
vÆToSåög
) {}

53 
vútuÆ
 ~
	$MockFun˘i⁄Com∑øt‹
(){
	}
};

55 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
){  
	`equÆ_
(obje˘1, obje˘2); 
	}
}

56 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
Ë{  
	`vÆueToSåög_
(obje˘); 
	}
}

57 
	g¥iv©e
:

58 
isEquÆFun˘i⁄
 
equÆ_
;

59 
vÆueToSåögFun˘i⁄
 
	gvÆueToSåög_
;

69 ˛as†
	cMockNamedVÆue


71 
	mpublic
:

72 
MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
);

73 
	mvútuÆ
 ~
MockNamedVÆue
();

75 
vútuÆ
 
£tVÆue
(
vÆue
);

76 
vútuÆ
 
£tVÆue
(
vÆue
);

77 
vútuÆ
 
£tVÆue
(* 
vÆue
);

78 
vútuÆ
 
£tVÆue
(c⁄° * 
vÆue
);

79 
vútuÆ
 
£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
);

81 
vútuÆ
 
£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
);

82 
vútuÆ
 
£tName
(c⁄° * 
«me
);

84 
vútuÆ
 
boﬁ
 
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const;

86 
vútuÆ
 
Sim∂eSåög
 
	$toSåög
() const;

88 
vútuÆ
 
Sim∂eSåög
 
	$gëName
() const;

89 
vútuÆ
 
Sim∂eSåög
 
	$gëTy≥
() const;

91 
vútuÆ
 
	$gëI¡VÆue
() const;

92 
vútuÆ
 
	$gëDoubÀVÆue
() const;

93 
vútuÆ
 c⁄° * 
	$gëSåögVÆue
() const;

94 
vútuÆ
 * 
	$gëPoöãrVÆue
() const;

95 
vútuÆ
 * 
	$gëObje˘Poöãr
() const;

96 
¥iv©e
:

97 
Sim∂eSåög
 
«me_
;

98 
Sim∂eSåög
 
ty≥_
;

100 
ötVÆue_
;

101 
doubÀVÆue_
;

102 c⁄° * 
°rögVÆue_
;

103 * 
poöãrVÆue_
;

104 * 
obje˘PoöãrVÆue_
;

105 } 
vÆue_
;

106 
MockNamedVÆueCom∑øt‹
* 
com∑øt‹_
;

107 
	}
};

109 ˛as†
	cMockNamedVÆueLi°Node


111 
	mpublic
:

112 
MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
);

114 
Sim∂eSåög
 
	$gëName
() const;

115 
Sim∂eSåög
 
	$gëTy≥
() const;

117 
MockNamedVÆueLi°Node
* 
	`√xt
();

118 
MockNamedVÆue
* 
	`ôem
();

120 
	`de°roy
();

121 
	`£tNext
(
MockNamedVÆueLi°Node
* 
node
);

122 
¥iv©e
:

123 
MockNamedVÆue
* 
d©a_
;

124 
MockNamedVÆueLi°Node
* 
√xt_
;

127 ˛as†
	cMockNamedVÆueLi°


129 
public
:

130 
	`MockNamedVÆueLi°
();

132 
MockNamedVÆueLi°Node
* 
	`begö
();

134 
	`add
(
MockNamedVÆue
* 
√wVÆue
);

135 
	`˛ór
();

137 
MockNamedVÆue
* 
	`gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
);

139 
¥iv©e
:

140 
MockNamedVÆueLi°Node
* 
hód_
;

148 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
;

149 ˛as†
	cMockNamedVÆueCom∑øt‹Rïosô‹y


151 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
hód_
;

152 
public
:

153 
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

154 
vútuÆ
 ~
	`MockNamedVÆueCom∑øt‹Rïosô‹y
();

156 
vútuÆ
 
	`ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

157 
vútuÆ
 
	`ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

158 
vútuÆ
 
MockNamedVÆueCom∑øt‹
* 
	`gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
);

160 
	`˛ór
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupport.h

28 #i‚de‡
D_MockSuµ‹t_h


29 
	#D_MockSuµ‹t_h


	)

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

33 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

34 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

36 
˛ass
 
	gUã°
;

37 
˛ass
 
	gMockSuµ‹t
;

40 
	gMockSuµ‹t
& 
mock
(c⁄° 
Sim∂eSåög
& 
mockName
 = "");

42 ˛as†
	cMockSuµ‹t


44 
	mpublic
:

45 
MockSuµ‹t
();

46 
	mvútuÆ
 ~
MockSuµ‹t
();

48 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

49 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

50 
vútuÆ
 
	mMockFun˘i⁄CÆl
& 
a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
);

51 
vútuÆ
 
boﬁ
 
hasRëu∫VÆue
();

52 
vútuÆ
 
MockNamedVÆue
 
ªtu∫VÆue
();

53 
vútuÆ
 
ötRëu∫VÆue
();

54 
vútuÆ
 c⁄° * 
°rögRëu∫VÆue
();

55 
vútuÆ
 
doubÀRëu∫VÆue
();

56 
vútuÆ
 * 
poöãrRëu∫VÆue
();

58 
boﬁ
 
hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

59 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

60 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
);

61 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
);

62 
£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
);

63 
£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
);

64 
MockNamedVÆue
 
gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

66 
MockSuµ‹t
* 
gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
);

68 c⁄° * 
gëTø˚Ouçut
();

74 
vútuÆ
 
dißbÀ
();

75 
vútuÆ
 
íabÀ
();

76 
vútuÆ
 
åacög
(
boﬁ
 
íabÀd
);

77 
vútuÆ
 
ign‹eOthîCÆls
();

79 
vútuÆ
 
checkEx≥˘©i⁄s
();

80 
vútuÆ
 
boﬁ
 
ex≥˘edCÆlsLe·
();

82 
vútuÆ
 
˛ór
();

83 
vútuÆ
 
£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
);

84 
vútuÆ
 
¸ashOnFaûuª
();

86 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

87 
vútuÆ
 
ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
);

88 
vútuÆ
 
ªmoveAŒCom∑øt‹s
();

90 
	m¥Ÿe˘ed
:

91 
vútuÆ
 
MockA˘uÆFun˘i⁄CÆl
 *
¸óãA˘uÆFun˘i⁄CÆl
();

92 
	m¥iv©e
:

94 
MockFaûuªRï‹ãr
 *
ªp‹ãr_
;

95 
MockFaûuªRï‹ãr
 
	mdeÁu…Rï‹ãr_
;

96 
MockEx≥˘edFun˘i⁄sLi°
 
	mex≥˘©i⁄s_
;

97 
boﬁ
 
	mign‹eOthîCÆls_
;

98 
boﬁ
 
	míabÀd_
;

99 
MockA˘uÆFun˘i⁄CÆl
 *
	mœ°A˘uÆFun˘i⁄CÆl_
;

100 
MockFun˘i⁄CÆlComposôe
 
	mcomposôeCÆls_
;

101 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
	mcom∑øt‹Rïosô‹y_
;

102 
MockNamedVÆueLi°
 
	md©a_
;

104 
boﬁ
 
	måacög_
;

106 
checkEx≥˘©i⁄sOfLa°CÆl
();

107 
boﬁ
 
wasLa°CÆlFulfûÀd
();

108 
ÁûTe°WôhF‹U√x≥˘edCÆls
();

110 
MockNamedVÆue
* 
¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
);

112 
MockSuµ‹t
* 
gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupportPlugin.h

28 #i‚de‡
D_MockSuµ‹tPlugö_h


29 
	#D_MockSuµ‹tPlugö_h


	)

31 
	~"CµUTe°/Te°Plugö.h
"

32 
	~"CµUTe°Ext/MockNamedVÆue.h
"

34 ˛as†
	cMockSuµ‹tPlugö
 : 
public
 
Te°Plugö


36 
public
:

37 
MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
 = "MockSupportPLugin");

38 
	mvútuÆ
 ~
MockSuµ‹tPlugö
();

40 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

41 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

43 
vútuÆ
 
ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
);

44 
	m¥iv©e
:

45 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y_
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupport_c.h

28 #i‚de‡
D_MockSuµ‹t_c_h


29 
	#D_MockSuµ‹t_c_h


	)

32 
	mMOCKVALUETYPE_INTEGER
,

33 
	mMOCKVALUETYPE_DOUBLE
,

34 
	mMOCKVALUETYPE_STRING
,

35 
	mMOCKVALUETYPE_POINTER
,

36 
	mMOCKVALUETYPE_OBJECT


37 } 
	tMockVÆueTy≥_c
;

39 
	sSMockVÆue_c


41 
MockVÆueTy≥_c
 
	mty≥
;

43 
	mötVÆue
;

44 
	mdoubÀVÆue
;

45 c⁄° * 
	m°rögVÆue
;

46 * 
	mpoöãrVÆue
;

47 * 
	mobje˘VÆue
;

48 } 
	mvÆue
;

49 } 
	tMockVÆue_c
;

51 
SMockFun˘i⁄CÆl_c
 
	tMockFun˘i⁄CÆl_c
;

52 
	sSMockFun˘i⁄CÆl_c


54 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhI¡P¨amëîs
)(c⁄° * 
	m«me
, 
	mvÆue
);

55 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhDoubÀP¨amëîs
)(c⁄° * 
	m«me
, 
	mvÆue
);

56 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhSåögP¨amëîs
)(c⁄° * 
	m«me
, c⁄° * 
	mvÆue
);

57 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhPoöãrP¨amëîs
)(c⁄° * 
	m«me
, * 
	mvÆue
);

58 
	mMockFun˘i⁄CÆl_c
* (*
	mwôhP¨amëîOfTy≥
)(c⁄° * 
	mty≥
, c⁄° * 
	m«me
, * 
	mvÆue
);

60 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫I¡VÆue
)(
	mvÆue
);

61 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫DoubÀVÆue
)(
	mvÆue
);

62 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫SåögVÆue
)(c⁄° * 
	mvÆue
);

63 
	mMockFun˘i⁄CÆl_c
* (*
	m™dRëu∫PoöãrVÆue
)(* 
	mvÆue
);

65 
MockVÆue_c
 (*
ªtu∫VÆue
)();

69 (*
	tMockTy≥EquÆFun˘i⁄_c
)(* 
	tobje˘1
, * 
	tobje˘2
);

70 * (*
	tMockTy≥VÆueToSåögFun˘i⁄_c
)(* 
	tobje˘1
);

72 
SMockSuµ‹t_c
 
	tMockSuµ‹t_c
;

73 
	sSMockSuµ‹t_c


75 
MockFun˘i⁄CÆl_c
* (*
ex≥˘O√CÆl
)(c⁄° * 
«me
);

76 
MockFun˘i⁄CÆl_c
* (*
a˘uÆCÆl
)(c⁄° * 
«me
);

77 
	`MockVÆue_c
 (*
ªtu∫VÆue
)();

79 (*
£tI¡D©a
Ë(c⁄° * 
«me
, 
vÆue
);

80 (*
£tDoubÀD©a
Ë(c⁄° * 
«me
, 
vÆue
);

81 (*
£tSåögD©a
Ë(c⁄° * 
«me
, c⁄° * 
vÆue
);

82 (*
£tPoöãrD©a
Ë(c⁄° * 
«me
, * 
vÆue
);

83 (*
£tD©aObje˘
Ë(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

84 
	`MockVÆue_c
 (*
gëD©a
)(c⁄° * 
«me
);

86 (*
checkEx≥˘©i⁄s
)();

87 (*
ex≥˘edCÆlsLe·
)();

89 (*
˛ór
)();

91 (*
ö°ÆlCom∑øt‹
Ë(c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
);

92 (*
ªmoveAŒCom∑øt‹s
)();

96 
MockSuµ‹t_c
* 
	`mock_c
();

97 
MockSuµ‹t_c
* 
	`mock_sc›e_c
(c⁄° * 
sc›e
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\OrderedTest.h

28 #i‚de‡
D_OrdîedTe°_h


29 
	#D_OrdîedTe°_h


	)

31 ˛as†
	cOrdîedTe°
 : 
public
 
Uã°


33 
public
:

34 
OrdîedTe°
();

35 
	mvútuÆ
 ~
OrdîedTe°
();

37 
vútuÆ
 
OrdîedTe°
* 
addOrdîedTe°
(OrdîedTe°* 
ã°
);

38 
vútuÆ
 
OrdîedTe°
* 
gëNextOrdîedTe°
();

40 
gëLevñ
();

41 
£tLevñ
(
Àvñ
);

43 
addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
);

44 
OrdîedTe°
* 
gëOrdîedTe°Hód
();

45 
boﬁ
 
fú°OrdîedTe°
();

47 
£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
);

48 
	m¥iv©e
:

49 
OrdîedTe°
* 
_‹dîedTe°sHód
;

50 
OrdîedTe°
* 
	m_√xtOrdîedTe°
;

52 
	m_Àvñ
;

56 ˛as†
	cOrdîedTe°In°ÆÀr


58 
	mpublic
:

59 
ex∂icô
 
OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
, c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
, 
Àvñ
);

60 
	mvútuÆ
 ~
OrdîedTe°In°ÆÀr
();

62 
	m¥iv©e
:

63 
addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
);

64 
addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
OrdîedTe°
* 
ã°
);

68 
	#TEST_ORDERED
(
ã°Group
, 
ã°Name
, 
ã°Levñ
) \

69 
˛ass
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
TEST_GROUP_
##
CµUTe°Group
##testGroup \

70 { 
public
: 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
TEST_GROUP_
##
CµUTe°Group
##
	`ã°Group
 () {} \

71 
	`ã°Body
(); } \

72 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

73 
OrdîedTe°In°ÆÀr
 
TEST_
##
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&TEST_##ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
, 
ã°Levñ
); \

74 
TEST_
##
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineArguments.h

1 #i‚de‡
D_Comm™dLöeArgumíts_H


2 
	#D_Comm™dLöeArgumíts_H


	)

9 
	~"Sim∂eSåög.h
"

10 
	~"Te°Ouçut.h
"

12 
˛ass
 
	gTe°Plugö
;

14 ˛as†
	cComm™dLöeArgumíts


16 
	mpublic
:

17 
ex∂icô
 
Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
, 
Te°Plugö
*);

18 
	mvútuÆ
 ~
Comm™dLöeArgumíts
();

20 
boﬁ
 
∑r£
();

21 
boﬁ
 
	$isVîbo£
() const;

22 
	$gëRïótCou¡
() const;

23 
Sim∂eSåög
 
	$gëGroupFûãr
() const;

24 
Sim∂eSåög
 
	$gëNameFûãr
() const;

25 
boﬁ
 
	$isJUnôOuçut
() const;

26 
boﬁ
 
	$isE˛ù£Ouçut
() const;

27 c⁄° * 
	$ußge
() const;

29 
¥iv©e
:

31 
	eOuçutTy≥


33 
OUTPUT_ECLIPSE
, 
OUTPUT_JUNIT


35 
ac
;

36 c⁄° ** 
av
;

37 
Te°Plugö
* 
∂ugö_
;

39 
boﬁ
 
vîbo£_
;

40 
ª≥©_
;

41 
Sim∂eSåög
 
groupFûãr_
;

42 
Sim∂eSåög
 
«meFûãr_
;

43 
OuçutTy≥
 
ouçutTy≥_
;

45 
Sim∂eSåög
 
	`gëP¨amëîFõld
(
ac
, c⁄° ** 
av
, & 
i
);

46 
	`SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
ödex
);

47 
	`SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

48 
	`SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
ödex
);

49 
boﬁ
 
	`SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
ödex
);

51 
	`Comm™dLöeArgumíts
(c⁄° 
Comm™dLöeArgumíts
&);

52 
Comm™dLöeArgumíts
& 
›î©‹
=(const CommandLineArguments&);

54 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineTestRunner.h

28 #i‚de‡
D_Comm™dLöeTe°Ru¬î_H


29 
	#D_Comm™dLöeTe°Ru¬î_H


	)

31 
	~"Te°H¨√ss.h
"

32 
	~"Te°Ouçut.h
"

33 
	~"Comm™dLöeArgumíts.h
"

41 
˛ass
 
	gJUnôTe°Ouçut
;

43 
	#DEF_PLUGIN_MEM_LEAK
 "Mem‹yLókPlugö"

	)

44 
	#DEF_PLUGIN_SET_POINTER
 "SëPoöãrPlugö"

	)

46 ˛as†
	cComm™dLöeTe°Ru¬î


48 
	mpublic
:

49 
	eOuçutTy≥


51 
OUTPUT_NORMAL
, 
	mOUTPUT_JUNIT


54 
RunAŒTe°s
(
ac
, c⁄° ** 
av
);

55 
RunAŒTe°s
(
ac
, ** 
av
);

56 
Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
, 
Te°Ouçut
*);

58 
	gvútuÆ
 ~
Comm™dLöeTe°Ru¬î
();

59 
runAŒTe°sMaö
();

61 
	g¥iv©e
:

63 
¨gc
;

64 c⁄° ** 
	g¨gv
;

65 
Te°Ouçut
* 
	gouçut_
;

66 
JUnôTe°Ouçut
* 
	gjUnôOuçut
;

67 
Comm™dLöeArgumíts
* 
	g¨gumíts
;

69 
boﬁ
 
∑r£Argumíts
(
Te°Plugö
*);

70 
runAŒTe°s
();

71 
öôülizeTe°Run
();

72 
boﬁ
 
isVîbo£
();

73 
gëRïótCou¡
();

74 
Sim∂eSåög
 
gëGroupFûãr
();

75 
Sim∂eSåög
 
gëNameFûãr
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\JUnitTestOutput.h

28 #i‚de‡
D_JUnôTe°Ouçut_h


29 
	#D_JUnôTe°Ouçut_h


	)

31 
	~"Te°Ouçut.h
"

32 
	~"Sim∂eSåög.h
"

34 
	gJUnôTe°OuçutIm∂
;

35 
	gJUnôTe°Ca£Resu…Node
;

37 ˛as†
	cJUnôTe°Ouçut
: 
public
 
Te°Ouçut


39 
public
:

40 
JUnôTe°Ouçut
();

41 
	mvútuÆ
 ~
JUnôTe°Ouçut
();

43 
vútuÆ
 
¥ötTe°sSèπed
();

44 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

45 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

46 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

47 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

48 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

50 
vútuÆ
 
vîbo£
();

51 
vútuÆ
 
¥öt
(const *);

52 
vútuÆ
 
¥öt
();

53 
vútuÆ
 
¥öt
(c⁄° 
Faûuª
& 
Áûuª
);

54 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

56 
vútuÆ
 
Êush
();

58 
	m¥Ÿe˘ed
:

60 
JUnôTe°OuçutIm∂
* 
im∂_
;

61 
ª£tTe°GroupResu…
();

63 
vútuÆ
 
›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
);

64 
vútuÆ
 
wrôeTe°GroupToFûe
();

65 
vútuÆ
 
wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
);

66 
vútuÆ
 
˛o£Fûe
();

68 
vútuÆ
 
wrôeXmlHódî
();

69 
vútuÆ
 
wrôeTe°SuôeSummîy
();

70 
vútuÆ
 
wrôePr›îtõs
();

71 
vútuÆ
 
wrôeTe°Ca£s
();

72 
vútuÆ
 
wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
);

73 
vútuÆ
 
wrôeFûeEndög
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakAllocator.h

1 #i‚de‡
D_Mem‹yLókAŒoˇt‹_h


2 
	#D_Mem‹yLókAŒoˇt‹_h


	)

4 ˛as†
	cMem‹yLókAŒoˇt‹


6 
	mpublic
:

7 
vútuÆ
 * 
Æloc_mem‹y
(
size_t
 
size
)=0;

8 
vútuÆ
 
‰ì_mem‹y
(* 
mem‹y
)=0;

10 
vútuÆ
 c⁄° * 
«me
()=0;

11 
vútuÆ
 c⁄° * 
Æloc_«me
()=0;

12 
vútuÆ
 c⁄° * 
‰ì_«me
()=0;

14 
vútuÆ
 
isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

15 
	mvútuÆ
 ~
	$Mem‹yLókAŒoˇt‹
()

20 
	`£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

21 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAŒoˇt‹
();

22 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

24 
	`£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

25 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítNewAºayAŒoˇt‹
();

26 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

28 
	`£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

29 
Mem‹yLókAŒoˇt‹
* 
	`gëCuºítMÆlocAŒoˇt‹
();

30 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

32 
¥iv©e
:

33 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAŒoˇt‹
;

34 
Mem‹yLókAŒoˇt‹
* 
cuºítNewAºayAŒoˇt‹
;

35 
Mem‹yLókAŒoˇt‹
* 
cuºítMÆlocAŒoˇt‹
;

36 
	}
};

38 ˛as†
	cSènd¨dMÆlocAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


40 
public
:

41 * 
Æloc_mem‹y
(
size_t
 
size
);

42 
‰ì_mem‹y
(* 
mem‹y
);

44 c⁄° * 
«me
();

45 c⁄° * 
Æloc_«me
();

46 c⁄° * 
‰ì_«me
();

48 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

51 ˛as†
	cSènd¨dNewAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


53 
public
:

54 * 
Æloc_mem‹y
(
size_t
 
size
);

55 
‰ì_mem‹y
(* 
mem‹y
);

57 c⁄° * 
«me
();

58 c⁄° * 
Æloc_«me
();

59 c⁄° * 
‰ì_«me
();

61 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

64 ˛as†
	cSènd¨dNewAºayAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


66 
public
:

67 * 
Æloc_mem‹y
(
size_t
 
size
);

68 
‰ì_mem‹y
(* 
mem‹y
);

70 c⁄° * 
«me
();

71 c⁄° * 
Æloc_«me
();

72 c⁄° * 
‰ì_«me
();

74 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

77 ˛as†
	cNuŒUnknownAŒoˇt‹
: 
public
 
Mem‹yLókAŒoˇt‹


79 
public
:

80 * 
Æloc_mem‹y
(
size_t
 
size
);

81 
‰ì_mem‹y
(* 
mem‹y
);

83 c⁄° * 
«me
();

84 c⁄° * 
Æloc_«me
();

85 c⁄° * 
‰ì_«me
();

87 
Mem‹yLókAŒoˇt‹
* 
deÁu…AŒoˇt‹
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetector.h

1 #i‚de‡
D_Mem‹yLókDëe˘‹_h


2 
	#D_Mem‹yLókDëe˘‹_h


	)

4 
	#MEM_LEAK_NONE
 "Nÿmem‹yÜók†wîêdëe˘ed."

	)

5 
	#MEM_LEAK_HEADER
 "Mem‹yÜók(sËfound.\n"

	)

6 
	#MEM_LEAK_LEAK
 "Lók size: %d AŒoˇãdát: %†™dÜöe: %d. Ty≥: \"%s\" C⁄ã¡: \"%.15s\"\n"

	)

7 
	#MEM_LEAK_FOOTER
 "TŸÆÇumbî o‡Àaks: "

	)

9 
	#MEM_LEAK_ALLOC_DEALLOC_MISMATCH
 "AŒoˇti⁄/dóŒoˇti⁄Åy≥ mism©ch\n"

	)

10 
	#MEM_LEAK_MEMORY_CORRUPTION
 "Mem‹y c‹ru±i⁄ (wrôã¿ouào‡bounds?)\n"

	)

11 
	#MEM_LEAK_ALLOC_LOCATION
 "áŒoˇãdáàfûe: %†löe: %d size: %dÅy≥: %s\n"

	)

12 
	#MEM_LEAK_DEALLOC_LOCATION
 " dóŒoˇãdáàfûe: %†löe: %dÅy≥: %s\n"

	)

13 
	#MEM_LEAK_DEALLOC_NON_ALLOCATED
 "DóŒoˇtögÇ⁄-Æloˇãd mem‹y\n"

	)

15 
	eMemLókPîiod


17 
	mmem_Àak_≥riod_Æl
,

18 
	mmem_Àak_≥riod_dißbÀd
,

19 
	mmem_Àak_≥riod_íabÀd
,

20 
	mmem_Àak_≥riod_checkög


23 
˛ass
 
	gMem‹yLókAŒoˇt‹
;

25 
	~<°dlib.h
>

27 ˛as†
	cMem‹yLókFaûuª


29 
	mpublic
:

30 
vútuÆ
 ~
	$Mem‹yLókFaûuª
()

34 
vútuÆ
 
	`Áû
(* 
Áû_°rög
)=0;

35 
	}
};

37 
	sSim∂eSåögBuf„r


41 
	mSIMPLE_STRING_BUFFER_LEN
 = 4096

44 
Sim∂eSåögBuf„r
();

45 
˛ór
();

46 
add
(c⁄° * 
f‹m©
, ...);

47 * 
toSåög
();

49 
	m¥iv©e
:

50 
buf„r
[
SIMPLE_STRING_BUFFER_LEN
];

51 
	mposôi⁄s_fûÀd
;

54 
	sMem‹yLókDëe˘‹Node


56 
Mem‹yLókDëe˘‹Node
() :

57 
size
(0), 
√xt
(0)

61 
size_t
 
	msize
;

62 * 
	mmem‹y
;

63 c⁄° * 
	mfûe
;

64 
	mlöe
;

65 
Mem‹yLókAŒoˇt‹
* 
	mÆloˇt‹
;

66 
MemLókPîiod
 
	m≥riod
;

68 
	m¥iv©e
:

69 
‰õnd
 
Mem‹yLókDëe˘‹Li°
;

70 
Mem‹yLókDëe˘‹Node
* 
	m√xt
;

73 
	sMem‹yLókDëe˘‹Li°


75 
Mem‹yLókDëe˘‹Li°
() :

76 
hód
(0)

81 
öôNode
(
Mem‹yLókDëe˘‹Node
* 
node
,

82 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
,

83 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
);

85 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

86 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

88 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

89 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
node
,

90 
MemLókPîiod
 
≥riod
);

91 
Mem‹yLókDëe˘‹Node
* 
gëLókFrom
(Mem‹yLókDëe˘‹Node* 
node
,

92 
MemLókPîiod
 
≥riod
);

94 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

95 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

96 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

98 
boﬁ
 
isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
);

100 
	m¥iv©e
:

101 
Mem‹yLókDëe˘‹Node
* 
hód
;

104 
	sMem‹yLókDëe˘‹TabÀ


106 
˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

108 
addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
);

109 
Mem‹yLókDëe˘‹Node
* 
ªmoveNode
(* 
mem‹y
);

111 
boﬁ
 
hasLóks
(
MemLókPîiod
 
≥riod
);

112 
gëTŸÆLóks
(
MemLókPîiod
 
≥riod
);

114 
Mem‹yLókDëe˘‹Node
* 
gëFú°Lók
(
MemLókPîiod
 
≥riod
);

115 
Mem‹yLókDëe˘‹Node
* 
gëNextLók
(Mem‹yLókDëe˘‹Node* 
Àak
,

116 
MemLókPîiod
 
≥riod
);

118 
	m¥iv©e
:

119 
hash
(* 
mem‹y
);

123 
	mhash_¥ime
 = 
MEMORY_LEAK_HASH_TABLE_SIZE


125 
Mem‹yLókDëe˘‹Li°
 
	mèbÀ
[
hash_¥ime
];

128 ˛as†
	cMem‹yLókDëe˘‹


130 
	mpublic
:

131 
Mem‹yLókDëe˘‹
();

132 ~
	$Mem‹yLókDëe˘‹
()

136 
	`öô
(
Mem‹yLókFaûuª
* 
ªp‹ãr
);

138 
	`íabÀ
();

139 
	`dißbÀ
();

141 
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

142 
	`íabÀAŒoˇti⁄Ty≥Checkög
();

144 
	`°¨tCheckög
();

145 
	`°›Checkög
();

147 c⁄° * 
	`ªp‹t
(
MemLókPîiod
 
≥riod
);

148 
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

149 
	`tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
);

150 
	`˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
);

152 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
);

153 * 
	`ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
,

154 c⁄° * 
fûe
, 
löe
);

155 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
);

156 
	`dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
,

157 c⁄° * 
fûe
, 
löe
);

158 * 
	`ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
,

159 
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

163 
mem‹y_c‹ru±i⁄_buf„r_size
 = 3

164 
	}
};

165 
	g¥iv©e
:

166 
Mem‹yLókFaûuª
* 
ªp‹ãr
;

167 
MemLókPîiod
 
	gcuºít_≥riod
;

168 
Sim∂eSåögBuf„r
 
	gouçut_buf„r
;

169 
Mem‹yLókDëe˘‹TabÀ
 
	gmem‹yTabÀ
;

170 
boﬁ
 
	gdoAŒoˇti⁄Ty≥Checkög
;

172 
C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
);

173 
ªp‹tFaûuª
(c⁄° * 
mesßge
, c⁄° * 
ÆlocFûe
,

174 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

175 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

176 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
);

178 * 
ªÆloˇãMem‹yAndExåaInfo
(* 
mem‹y
, 
size_t
 
size
);

179 * 
ÆloˇãMem‹yAndExåaInfo
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

180 
size_t
 
size
);

181 
addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
, 
size_t
 
size
);

182 
checkF‹AŒocMism©chOrC‹ru±i⁄
(
Mem‹yLókDëe˘‹Node
* 
node
,

183 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

185 
addMem‹yLókInfoAndC‹ru±i⁄Info
(* 
mem‹y
, 
size_t
 
size
,

186 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

187 
boﬁ
 
ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(* 
mem‹y
, c⁄° * 
fûe
,

188 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
);

190 
Mem‹yLókDëe˘‹Node
* 
gëNodeFromMem‹yPoöãr
(* 
mem‹y
, 
size_t
 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h

18 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


19 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


20 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

22 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

26 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


29 #i‚de‡
CPPUTEST_USE_MALLOC_MACROS


31 
	~<°dlib.h
>

33 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

34 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
cou¡
, size_à
size
, c⁄° * 
fûe
, 
löe
);

35 * 
˝puã°_øŒoc_loˇti⁄
(*, 
size_t
, c⁄° * 
fûe
, 
löe
);

36 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

53 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

54 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

55 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

56 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

58 
	#CPPUTEST_USE_MALLOC_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h

28 
	~<°dlib.h
>

30 #i‚de‡
CPPUTEST_USE_MEM_LEAK_DETECTION


31 #ifde‡
CPPUTEST_MEM_LEAK_DETECTION_DISABLED


32 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 0

	)

34 
	#CPPUTEST_USE_MEM_LEAK_DETECTION
 1

	)

38 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


40 #i‚de‡
CPPUTEST_USE_STD_CPP_LIB


41 #ifde‡
CPPUTEST_STD_CPP_LIB_DISABLED


42 
	#CPPUTEST_USE_STD_CPP_LIB
 0

	)

44 
	#CPPUTEST_USE_STD_CPP_LIB
 1

	)

49 #i‚de‡
CPPUTEST_USE_NEW_MACROS


51 #i‡
CPPUTEST_USE_STD_CPP_LIB


52 
	~<√w
>

54 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

55 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
Ë
	`throw
 (
°d
::
bad_Æloc
);

56 * 
›î©‹
 
	$√w
(
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

57 * 
›î©‹
 
√w
[](
size_t
 
size
Ë
	`throw
(
°d
::
bad_Æloc
);

61 * 
›î©‹
 
	`√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

62 * 
›î©‹
 
√w
[](
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

63 * 
›î©‹
 
	`√w
(
size_t
 
size
);

64 * 
›î©‹
 
√w
[](
size_t
 
size
);

69 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

71 #i‚de‡
CPPUTEST_USE_NEW_MACROS


74 
	~"Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

75 #i‚de‡
CPPUTEST_USE_NEW_MACROS


76 
	}
}

80 
	#CPPUTEST_USE_NEW_MACROS
 1

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h

28 #i‚de‡
D_Mem‹yLókW¨nögPlugö_h


29 
	#D_Mem‹yLókW¨nögPlugö_h


	)

31 
	~"Te°Plugö.h
"

42 
	#IGNORE_ALL_LEAKS_IN_TEST
(Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ign‹eAŒLóksInTe°
();

	)

43 
	#EXPECT_N_LEAKS
(
n
Ë
Mem‹yLókW¨nögPlugö
::
	`gëFú°Plugö
()->
	`ex≥˘LóksInTe°
“);

	)

46 
	~"Te°H¨√ss_c.h
"

49 #i‡
UT_NEW_OVERRIDES_ENABLED


50 #ifde‡
√w


51 #unde‡
√w


54 * 
›î©‹
 
√w
(
size_t
 
size
);

55 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
);

56 * 
›î©‹
 
√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

57 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
);

58 
›î©‹
 
dñëe
(* 
mem
, c⁄° * 
fûe
, 
löe
);

59 
›î©‹
 
	gdñëe
[](* 
	gmem
, c⁄° * 
	gfûe
, 
	glöe
);

60 
›î©‹
 
dñëe
(* 
mem
);

61 
›î©‹
 
	gdñëe
[](* 
	gmem
);

63 #i‡
UT_NEW_MACROS_ENABLED


64 
	#√w
 
	`√w
(
__FILE__
, 
__LINE__
)

	)

69 
˛ass
 
	gMem‹yLókDëe˘‹
;

71 ˛as†
	cMem‹yLókW¨nögPlugö
: 
public
 
Te°Plugö


73 
public
:

74 
Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

75 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
 = 0);

76 
	mvútuÆ
 ~
Mem‹yLókW¨nögPlugö
();

78 
vútuÆ
 
¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

79 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

81 
vútuÆ
 c⁄° * 
FöÆRï‹t
(
toBeDñëedLóks
 = 0);

83 
ign‹eAŒLóksInTe°
();

84 
ex≥˘LóksInTe°
(
n
);

86 
Mem‹yLókDëe˘‹
* 
gëMem‹yLókDëe˘‹
();

87 
Mem‹yLókW¨nögPlugö
* 
gëFú°Plugö
();

89 
Mem‹yLókDëe˘‹
* 
gëGlobÆDëe˘‹
();

90 
	m¥iv©e
:

91 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

92 
boﬁ
 
	mign‹eAŒW¨nögs
;

93 
	mex≥˘edLóks
;

94 
	mÁûuªCou¡
;

96 
Mem‹yLókW¨nögPlugö
* 
	mfú°Plugö
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\PlatformSpecificFunctions.h

28 #i‚de‡
PLATFORMSPECIFICFUNCTIONS_H_


29 
	#PLATFORMSPECIFICFUNCTIONS_H_


	)

46 
GëPœtf‹mS≥cificTimeInMûlis
();

47 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
)());

49 c⁄° * 
GëPœtf‹mS≥cificTimeSåög
();

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
)());

53 
Pœtf‹mS≥cificAtoI
(c⁄° *
°r
);

54 
Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
);

55 * 
Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
);

56 * 
Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
);

57 * 
Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
);

58 
Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
);

59 
Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
);

60 * 
Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
);

61 
Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
,

62 
va_li°
 
va_¨gs_li°
);

65 
Pœtf‹mS≥cificFabs
(
d
);

66 
Pœtf‹mS≥cificAtExô
((*
func
)());

69 * 
	tPœtf‹mS≥cificFûe
;

71 
Pœtf‹mS≥cificFûe
 
Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
,

72 c⁄° * 
Êag
);

73 
Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
);

74 
Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
);

76 
Pœtf‹mS≥cificPutch¨
(
c
);

77 
Pœtf‹mS≥cificFlush
();

80 * 
Pœtf‹mS≥cificMÆloc
(
size
);

81 * 
Pœtf‹mS≥cificRóŒoc
(* 
mem‹y
, 
size
);

82 
Pœtf‹mS≥cificFªe
(* 
mem‹y
);

83 * 
Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\SimpleString.h

38 #i‚de‡
D_Sim∂eSåög_h


39 
	#D_Sim∂eSåög_h


	)

41 
	~<°d¨g.h
>

43 
˛ass
 
	gSim∂eSåögCﬁÀ˘i⁄
;

45 ˛as†
	cSim∂eSåög


47 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

48 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	mSim∂eSåög
& 
	mright
);

50 
	mpublic
:

51 
Sim∂eSåög
(c⁄° *
vÆue
 = "");

52 
Sim∂eSåög
(c⁄° *
vÆue
, 
ª≥©Cou¡
);

53 
Sim∂eSåög
(c⁄° Sim∂eSåög& 
Ÿhî
);

54 ~
Sim∂eSåög
();

56 
	mSim∂eSåög
& 
	m›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
);

57 
Sim∂eSåög
 
	m›î©‹
+(c⁄° 
	mSim∂eSåög
&);

58 
	mSim∂eSåög
& 
	m›î©‹
+=(c⁄° 
Sim∂eSåög
&);

59 
	mSim∂eSåög
& 
	m›î©‹
+=(const *);

61 
boﬁ
 
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

62 
boﬁ
 
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

63 
boﬁ
 
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const;

65 
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
,

66 
Sim∂eSåögCﬁÀ˘i⁄
& 
outCﬁÀ˘i⁄
) const;

68 
	$cou¡
(c⁄° 
Sim∂eSåög
& 
°r
) const;

70 
	`ª∂a˚
(
to
, 
wôh
);

71 
	`ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
);

73 c⁄° *
	$asCh¨Såög
() const;

74 
	$size
() const;

76 
¥iv©e
:

77 *
buf„r
;

80 ˛as†
	cSim∂eSåögCﬁÀ˘i⁄


82 
public
:

83 
	`Sim∂eSåögCﬁÀ˘i⁄
();

84 ~
	`Sim∂eSåögCﬁÀ˘i⁄
();

86 
	`Æloˇã
(
size
);

88 
	$size
() const;

89 
Sim∂eSåög
& 
›î©‹
[](
ödex
);

91 
¥iv©e
:

92 
Sim∂eSåög
* 
cﬁÀ˘i⁄
;

93 
Sim∂eSåög
 
em±y
;

94 
_size
;

96 
›î©‹
 =(
Sim∂eSåögCﬁÀ˘i⁄
&);

97 
	`Sim∂eSåögCﬁÀ˘i⁄
(
Sim∂eSåögCﬁÀ˘i⁄
&);

100 
Sim∂eSåög
 
	`SåögFrom
(
boﬁ
 
vÆue
);

101 
Sim∂eSåög
 
	`SåögFrom
(* 
vÆue
);

102 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

103 
Sim∂eSåög
 
	`SåögFrom
(c⁄° *
vÆue
);

104 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

105 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
);

106 
Sim∂eSåög
 
	`HexSåögFrom
(
vÆue
);

107 
Sim∂eSåög
 
	`SåögFrom
(
vÆue
, 
¥ecisi⁄
 = 6);

108 
Sim∂eSåög
 
	`SåögFrom
(c⁄° Sim∂eSåög& 
Ÿhî
);

109 
Sim∂eSåög
 
	`SåögFromF‹m©
(c⁄° * 
f‹m©
, ...);

110 
Sim∂eSåög
 
	`VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestFailure.h

38 #i‚de‡
D_Te°Faûuª_H


39 
	#D_Te°Faûuª_H


	)

41 
	~"Sim∂eSåög.h
"

43 
˛ass
 
	gUã°
;

44 
˛ass
 
	gTe°Ouçut
;

46 ˛as†
	cTe°Faûuª


49 
	mpublic
:

50 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
,

51 c⁄° 
Sim∂eSåög
& 
theMesßge
);

52 
Te°Faûuª
(
Uã°
*, c⁄° 
Sim∂eSåög
& 
theMesßge
);

53 
Te°Faûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
);

54 
Te°Faûuª
(const TestFailure&);

55 
	mvútuÆ
 ~
Te°Faûuª
();

57 
vútuÆ
 
Sim∂eSåög
 
	$gëFûeName
() const;

58 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°Name
() const;

59 
vútuÆ
 
	$gëFaûuªLöeNumbî
() const;

60 
vútuÆ
 
Sim∂eSåög
 
	$gëMesßge
() const;

61 
vútuÆ
 
Sim∂eSåög
 
	$gëTe°FûeName
() const;

62 
vútuÆ
 
	$gëTe°LöeNumbî
() const;

63 
boﬁ
 
	$isOutsideTe°Fûe
() const;

64 
boﬁ
 
	$isInHñ≥rFun˘i⁄
() const;

67 
¥Ÿe˘ed
:

69 
Sim∂eSåög
 
	`¸óãButWasSåög
(c⁄° Sim∂eSåög& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

70 
Sim∂eSåög
 
	`¸óãDif„ªn˚AtPosSåög
(c⁄° Sim∂eSåög& 
a˘uÆ
, 
posôi⁄
);

72 
Sim∂eSåög
 
ã°Name_
;

73 
Sim∂eSåög
 
fûeName_
;

74 
löeNumbî_
;

75 
Sim∂eSåög
 
ã°FûeName_
;

76 
ã°LöeNumbî_
;

77 
Sim∂eSåög
 
mesßge_
;

79 
Te°Faûuª
& 
›î©‹
=(const TestFailure&);

83 ˛as†
	cEquÆsFaûuª
: 
public
 
Te°Faûuª


85 
public
:

86 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

87 
	`EquÆsFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

90 ˛as†
	cDoubÀsEquÆFaûuª
: 
public
 
Te°Faûuª


92 
public
:

93 
	`DoubÀsEquÆFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
);

96 ˛as†
	cCheckEquÆFaûuª
 : 
public
 
Te°Faûuª


98 
public
:

99 
	`CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

102 ˛as†
	cC⁄èösFaûuª
: 
public
 
Te°Faûuª


104 
public
:

105 
	`C⁄èösFaûuª
(
Uã°
*, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
);

109 ˛as†
	cCheckFaûuª
 : 
public
 
Te°Faûuª


111 
public
:

112 
	`CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
);

115 ˛as†
	cFaûFaûuª
 : 
public
 
Te°Faûuª


117 
public
:

118 
	`FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
);

121 ˛as†
	cL⁄gsEquÆFaûuª
 : 
public
 
Te°Faûuª


123 
public
:

124 
	`L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
);

127 ˛as†
	cSåögEquÆFaûuª
 : 
public
 
Te°Faûuª


129 
public
:

130 
	`SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

133 ˛as†
	cSåögEquÆNoCa£Faûuª
 : 
public
 
Te°Faûuª


135 
public
:

136 
	`SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness.h

28 #i‚de‡
D_Te°H¨√ss_h


29 
	#D_Te°H¨√ss_h


	)

43 #i‚de‡
UT_NEW_MACROS_ENABLED


44 #ifde‡
UT_NEW_MACROS_DISABLED


45 
	#UT_NEW_MACROS_ENABLED
 0

	)

47 
	#UT_NEW_MACROS_ENABLED
 1

	)

51 #i‚de‡
UT_NEW_OVERRIDES_ENABLED


52 #ifde‡
UT_NEW_OVERRIDES_DISABLED


53 
	#UT_NEW_OVERRIDES_ENABLED
 0

	)

54 #unde‡
UT_NEW_MACROS_ENABLED


55 
	#UT_NEW_MACROS_ENABLED
 0

	)

57 
	#UT_NEW_OVERRIDES_ENABLED
 1

	)

65 
	#MEMORY_LEAK_HASH_TABLE_SIZE
 73

	)

75 
	~"Uã°.h
"

76 
	~"Uã°Ma¸os.h
"

77 
	~"Sim∂eSåög.h
"

78 
	~"Te°Resu….h
"

79 
	~"Faûuª.h
"

80 
	~"Te°Plugö.h
"

81 
	~"Mem‹yLókW¨nögPlugö.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness_c.h

38 #i‚de‡
D_Te°H¨√ss_c_h


39 
	#D_Te°H¨√ss_c_h


	)

41 
	#CHECK_EQUAL_C_INT
(
ex≥˘ed
,
a˘uÆ
) \

42 
	`CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

44 
	#CHECK_EQUAL_C_REAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
) \

45 
	`CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

47 
	#CHECK_EQUAL_C_CHAR
(
ex≥˘ed
,
a˘uÆ
) \

48 
	`CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

50 
	#CHECK_EQUAL_C_STRING
(
ex≥˘ed
,
a˘uÆ
) \

51 
	`CHECK_EQUAL_C_STRING_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
,
__LINE__
)

	)

53 
	#FAIL_TEXT_C
(
ãxt
) \

54 
	`FAIL_TEXT_C_LOCATION
(
ãxt
,
__FILE__
,
__LINE__
)

	)

56 
	#FAIL_C
() \

57 
	`FAIL_C_LOCATION
(
__FILE__
,
__LINE__
)

	)

59 
	#CHECK_C
(
c⁄dôi⁄
) \

60 
	`CHECK_C_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
,
__LINE__
)

	)

63 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

64 c⁄° * 
fûeName
, 
löeNumbî
);

65 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

66 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

67 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

68 c⁄° * 
fûeName
, 
löeNumbî
);

69 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
,

70 c⁄° * 
a˘uÆ
, c⁄° * 
fûeName
, 
löeNumbî
);

71 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

72 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
);

74 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

75 c⁄° * 
fûeName
, 
löeNumbî
);

79 #i‚de‡
UT_MALLOC_MACROS_ENABLED


80 #ifde‡
UT_MALLOC_MACROS_DISABLED


81 
	#UT_MALLOC_MACROS_ENABLED
 0

	)

83 
	#UT_MALLOC_MACROS_ENABLED
 1

	)

87 #i‡
UT_MALLOC_MACROS_ENABLED


88 #unde‡
mÆloc


89 #unde‡
‰ì


90 
	#mÆloc
 
°d_mÆloc


	)

91 
	#‰ì
 
°d_‰ì


	)

92 
	#ˇŒoc
 
°d_ˇŒoc


	)

93 
	#ªÆloc
 
°d_ªÆloc


	)

94 
	~<°dlib.h
>

95 #unde‡
mÆloc


96 #unde‡
‰ì


97 #unde‡
ªÆloc


98 #unde‡
ˇŒoc


100 
	~<°dlib.h
>

103 * 
˝puã°_mÆloc
(
size_t
 
size
);

104 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
);

105 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
);

106 
˝puã°_‰ì
(* 
buf„r
);

108 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
);

109 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
,

110 c⁄° * 
fûe
, 
löe
);

111 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
,

112 c⁄° * 
fûe
, 
löe
);

113 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
);

115 #i‡
UT_MALLOC_MACROS_ENABLED


116 
	#mÆloc
(
a
Ë
	`˝puã°_mÆloc_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

117 
	#ˇŒoc
(
a
, 
b
Ë
	`˝puã°_ˇŒoc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

118 
	#ªÆloc
(
a
, 
b
Ë
	`˝puã°_ªÆloc_loˇti⁄
◊, b, 
__FILE__
, 
__LINE__
)

	)

119 
	#‰ì
(
a
Ë
	`˝puã°_‰ì_loˇti⁄
◊, 
__FILE__
, 
__LINE__
)

	)

122 
˝puã°_mÆloc_£t_out_of_mem‹y
();

123 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestOutput.h

28 #i‚de‡
D_Te°Ouçut_h


29 
	#D_Te°Ouçut_h


	)

42 
˛ass
 
	gUã°
;

43 
˛ass
 
	gFaûuª
;

44 
˛ass
 
	gTe°Resu…
;

46 ˛as†
	cTe°Ouçut


48 
	mpublic
:

49 
ex∂icô
 
Te°Ouçut
();

50 
	mvútuÆ
 ~
Te°Ouçut
();

52 
vútuÆ
 
¥ötTe°sSèπed
();

53 
vútuÆ
 
¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
);

54 
vútuÆ
 
¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
);

55 
vútuÆ
 
¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
);

56 
vútuÆ
 
¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
);

57 
vútuÆ
 
¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
);

59 
vútuÆ
 
vîbo£
();

60 
vútuÆ
 
¥öt
(const *)=0;

61 
vútuÆ
 
¥öt
();

62 
vútuÆ
 
¥ötDoubÀ
();

63 
vútuÆ
 
¥ötHex
();

64 
vútuÆ
 
¥öt
(c⁄° 
Faûuª
& 
Áûuª
);

65 
vútuÆ
 
¥ötTe°Run
(
numbî
, 
tŸÆ
);

66 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

68 
vútuÆ
 
Êush
();

70 
	m¥iv©e
:

72 
vútuÆ
 
¥ötProgªssIndiˇt‹
();

74 
Te°Ouçut
(const TestOutput&);

75 
	mTe°Ouçut
& 
	m›î©‹
=(c⁄° 
Te°Ouçut
&);

77 
	mdŸCou¡_
;

78 
boﬁ
 
	mvîbo£_
;

79 c⁄° * 
	m¥ogªssIndiˇti⁄
;

82 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, const *);

83 
	gTe°Ouçut
& 
	g›î©‹
<<(TestOutput&, );

93 ˛as†
	cC⁄sﬁeTe°Ouçut
: 
public
 
Te°Ouçut


95 
public
:

96 
ex∂icô
 
	$C⁄sﬁeTe°Ouçut
()

100 
vútuÆ
 ~
	$C⁄sﬁeTe°Ouçut
()

102 
	}
}

105 
vútuÆ
 
¥öt
(c⁄° * 
s
);

106 
vútuÆ
 
Êush
();

108 
	g¥iv©e
:

109 
C⁄sﬁeTe°Ouçut
(const ConsoleTestOutput&);

110 
	gC⁄sﬁeTe°Ouçut
& 
	g›î©‹
=(c⁄° 
C⁄sﬁeTe°Ouçut
&);

122 ˛as†
	cSåögBuf„rTe°Ouçut
: 
public
 
Te°Ouçut


124 
public
:

125 
ex∂icô
 
	$SåögBuf„rTe°Ouçut
()

129 
vútuÆ
 ~
	$SåögBuf„rTe°Ouçut
()

131 
	}
}

134 
	$¥öt
(c⁄° * 
s
)

136 
ouçut
 +
s
;

137 
	}
}

139 
	$Êush
()

141 
ouçut
 = "";

142 
	}
}

144 c⁄° 
	gSim∂eSåög
& 
	$gëOuçut
()

146  
ouçut
;

147 
	}
}

149 
	g¥iv©e
:

150 
Sim∂eSåög
 
ouçut
;

152 
SåögBuf„rTe°Ouçut
(const StringBufferTestOutput&);

153 
	gSåögBuf„rTe°Ouçut
& 
	g›î©‹
=(c⁄° 
SåögBuf„rTe°Ouçut
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestPlugin.h

36 #i‚de‡
D_Te°Plugö_h


37 
	#D_Te°Plugö_h


	)

39 
˛ass
 
	gUã°
;

40 
˛ass
 
	gTe°Resu…
;

42 ˛as†
	cTe°Plugö


44 
	mpublic
:

46 
Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
);

47 
	mvútuÆ
 ~
Te°Plugö
();

49 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

55 
	}
}

57 
vútuÆ
 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

59  
Ál£
;

60 
	}
}

63 
vútuÆ
 
runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

64 
vútuÆ
 
runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

65 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
);

66 
vútuÆ
 
boﬁ
 
∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
);

68 
vútuÆ
 
Te°Plugö
* 
addPlugö
(TestPlugin*);

69 
vútuÆ
 
Te°Plugö
* 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

70 
vútuÆ
 
Te°Plugö
* 
gëNext
();

72 
vútuÆ
 
dißbÀ
();

73 
vútuÆ
 
íabÀ
();

74 
vútuÆ
 
boﬁ
 
isE«bÀd
();

76 c⁄° 
	gSim∂eSåög
& 
gëName
();

77 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

79 
	g¥Ÿe˘ed
:

80 
Te°Plugö
(Te°Plugö* 
√xt
);

82 
	g¥iv©e
:

83 
Te°Plugö
* 
√xt_
;

84 
Sim∂eSåög
 
	g«me_
;

85 
boﬁ
 
	gíabÀd_
;

96 
CµUTe°St‹e
(**
loˇti⁄
, *
vÆue
);

98 ˛as†
	cSëPoöãrPlugö
: 
public
 
Te°Plugö


100 
public
:

101 
SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me
);

102 
	mvútuÆ
 ~
SëPoöãrPlugö
();

103 
vútuÆ
 
po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&);

107 
	mMAX_SET
 = 1024

111 
	#UT_PTR_SET
(
a
, 
b
Ë{ 
	`CµUTe°St‹e
–(**)&a, (*Ëa);á = b; }

	)

115 ˛as†
	cNuŒTe°Plugö
: 
public
 
Te°Plugö


117 
public
:

119 
NuŒTe°Plugö
();

120 
	mvútuÆ
 ~
	$NuŒTe°Plugö
()

125 
vútuÆ
 
	`runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

126 
vútuÆ
 
	`runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
);

128 
NuŒTe°Plugö
* 
	`ö°™˚
();

129 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestRegistry.h

36 #i‚de‡
D_Te°Regi°ry_h


37 
	#D_Te°Regi°ry_h


	)

39 
	~"Sim∂eSåög.h
"

41 
˛ass
 
	gUã°
;

42 
˛ass
 
	gTe°Resu…
;

43 
˛ass
 
	gTe°Plugö
;

45 ˛as†
	cTe°Regi°ry


47 
	mpublic
:

48 
Te°Regi°ry
();

49 
	mvútuÆ
 ~
Te°Regi°ry
();

51 
vútuÆ
 
addTe°
(
Uã°
 *
ã°
);

52 
vútuÆ
 
unDoLa°AddTe°
();

53 
vútuÆ
 
cou¡Te°s
();

54 
vútuÆ
 
runAŒTe°s
(
Te°Resu…
& 
ªsu…
);

55 
vútuÆ
 
«meFûãr
(
Sim∂eSåög
);

56 
vútuÆ
 
groupFûãr
(
Sim∂eSåög
);

58 
vútuÆ
 
ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
);

59 
vútuÆ
 
ª£tPlugös
();

60 
vútuÆ
 
Te°Plugö
* 
gëFú°Plugö
();

61 
vútuÆ
 
Te°Plugö
* 
gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

62 
vútuÆ
 
ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
);

64 
Sim∂eSåög
 
gëGroupFûãr
();

65 
Sim∂eSåög
 
gëNameFûãr
();

67 
vútuÆ
 
Uã°
* 
gëFú°Te°
();

68 
vútuÆ
 
Uã°
* 
gëLa°Te°
();

69 
vútuÆ
 
Uã°
* 
gëTe°WôhNext
(Uã°* 
ã°
);

71 
Te°Regi°ry
* 
gëCuºítRegi°ry
();

72 
vútuÆ
 
£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
);

73 
˛ónup
();

74 
	m¥iv©e
:

76 
boﬁ
 
ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
);

77 
boﬁ
 
ídOfGroup
(
Uã°
* 
ã°
);

79 
Uã°
 * 
	mã°s
;

80 
Sim∂eSåög
* 
	m«meFûãr_
;

81 
Sim∂eSåög
* 
	mgroupFûãr_
;

82 
Te°Plugö
* 
	mfú°Plugö_
;

83 
Te°Regi°ry
* 
	mcuºítRegi°ry_
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestResult.h

38 #i‚de‡
D_Te°Resu…_h


39 
	#D_Te°Resu…_h


	)

41 
˛ass
 
	gFaûuª
;

42 
˛ass
 
	gTe°Ouçut
;

43 
˛ass
 
	gUã°
;

45 ˛as†
	cTe°Resu…


47 
	mpublic
:

48 
Te°Resu…
(
Te°Ouçut
&);

49 
	mvútuÆ
 ~
Te°Resu…
();

51 
vútuÆ
 
ã°sSèπed
();

52 
vútuÆ
 
ã°sEnded
();

53 
vútuÆ
 
cuºítGroupSèπed
(
Uã°
* 
ã°
);

54 
vútuÆ
 
cuºítGroupEnded
(
Uã°
* 
ã°
);

55 
vútuÆ
 
cuºítTe°Sèπed
(
Uã°
* 
ã°
);

56 
vútuÆ
 
cuºítTe°Ended
(
Uã°
* 
ã°
);

58 
vútuÆ
 
cou¡Te°
();

59 
vútuÆ
 
cou¡Run
();

60 
vútuÆ
 
cou¡Check
();

61 
vútuÆ
 
cou¡FûãªdOut
();

62 
vútuÆ
 
cou¡Ign‹ed
();

63 
vútuÆ
 
addFaûuª
(c⁄° 
Faûuª
& 
Áûuª
);

64 
vútuÆ
 
¥öt
(c⁄° * 
ãxt
);

65 
vútuÆ
 
£tProgªssIndiˇt‹
(const *);

67 
	$gëTe°Cou¡
() const

69  
ã°Cou¡
;

71 
	$gëRunCou¡
() const

73  
runCou¡
;

74 
	}
}

75 
	$gëCheckCou¡
() const

77  
checkCou¡
;

78 
	}
}

79 
	$gëFûãªdOutCou¡
() const

81  
fûãªdOutCou¡
;

82 
	}
}

83 
	$gëIgn‹edCou¡
() const

85  
ign‹edCou¡
;

86 
	}
}

87 
	$gëFaûuªCou¡
() const

89  
ÁûuªCou¡
;

90 
	}
}

92 
	$gëTŸÆExecuti⁄Time
() const;

93 
	`£tTŸÆExecuti⁄Time
(
exTime
);

95 
	$gëCuºítTe°TŸÆExecuti⁄Time
() const;

96 
	$gëCuºítGroupTŸÆExecuti⁄Time
() const;

97 
¥iv©e
:

99 
Te°Ouçut
& 
ouçut
;

100 
ã°Cou¡
;

101 
runCou¡
;

102 
checkCou¡
;

103 
ÁûuªCou¡
;

104 
fûãªdOutCou¡
;

105 
ign‹edCou¡
;

106 
tŸÆExecuti⁄Time
;

107 
timeSèπed
;

108 
cuºítTe°TimeSèπed
;

109 
cuºítTe°TŸÆExecuti⁄Time
;

110 
cuºítGroupTimeSèπed
;

111 
cuºítGroupTŸÆExecuti⁄Time
;

112 
	}
};

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestTestingFixture.h

28 #i‚de‡
D_Te°Te°ögFixtuª_H


29 
	#D_Te°Te°ögFixtuª_H


	)

31 ˛as†
	cTe°Te°ögFixtuª


33 
	mpublic
:

35 
	$Te°Te°ögFixtuª
()

37 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

38 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

39 
gíTe°
 = 
√w
 
	`ExecFun˘i⁄Te°
();

40 
ªgi°ry
 = 
√w
 
	`Te°Regi°ry
();

42 
ªgi°ry
->
	`£tCuºítRegi°ry
(registry);

43 
ªgi°ry
->
	`addTe°
(
gíTe°
);

47 
vútuÆ
 ~
	$Te°Te°ögFixtuª
()

49 
ªgi°ry
->
	`£tCuºítRegi°ry
(0);

50 
dñëe
 
ªgi°ry
;

51 
dñëe
 
ªsu…
;

52 
dñëe
 
ouçut
;

53 
dñëe
 
gíTe°
;

54 
	}
}

56 
£tTe°Fun˘i⁄
((*
ã°Fun˘i⁄
)())

58 
gíTe°
->
_ã°Fun˘i⁄
 = 
ã°Fun˘i⁄
;

59 
	}
}

61 
£tSëup
((*
£tupFun˘i⁄
)())

63 
gíTe°
->
£tup_
 = 
£tupFun˘i⁄
;

64 
	}
}

66 
£tTórdown
((*
ã¨downFun˘i⁄
)())

68 
gíTe°
->
ã¨down_
 = 
ã¨downFun˘i⁄
;

69 
	}
}

71 
	$runAŒTe°s
()

73 
ªgi°ry
->
	`runAŒTe°s
(*
ªsu…
);

74 
	}
}

76 
	$gëFaûuªCou¡
()

78  
ªsu…
->
	`gëFaûuªCou¡
();

79 
	}
}

81 
	$as£πPrötC⁄èös
(c⁄° 
Sim∂eSåög
& 
c⁄èös
)

83 
	`as£πPrötC⁄èös
(
ouçut
, 
c⁄èös
);

84 
	}
}

86 
	$as£πPrötC⁄èös
(
SåögBuf„rTe°Ouçut
* 
ouçut
,

87 c⁄° 
Sim∂eSåög
& 
c⁄èös
)

89 i‡(
ouçut
->
	`gëOuçut
().
	`c⁄èös
(
c⁄èös
)) ;

90 
Sim∂eSåög
 
	`mesßge
("\tActual <");

91 
mesßge
 +
ouçut
->
	`gëOuçut
().
	`asCh¨Såög
();

92 
mesßge
 += ">\n";

93 
mesßge
 += "\tdidÇot contain <";

94 
mesßge
 +
c⁄èös
.
	`asCh¨Såög
();

95 
mesßge
 += ">\n";

96 
	`FAIL
(
mesßge
.
	`asCh¨Såög
());

98 
	}
}

100 
Te°Regi°ry
* 
	gªgi°ry
;

101 
ExecFun˘i⁄Te°
* 
	ggíTe°
;

102 
SåögBuf„rTe°Ouçut
* 
	gouçut
;

103 
Te°Resu…
 * 
	gªsu…
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Utest.h

31 #i‚de‡
D_UTe°_h


32 
	#D_UTe°_h


	)

34 
	~"Sim∂eSåög.h
"

45 
˛ass
 
	gTe°Resu…
;

46 
˛ass
 
	gTe°Plugö
;

48 ˛as†
	cUã°


50 
	mpublic
:

52 
Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

53 
löeNumbî
);

55 
	mvútuÆ
 ~
Uã°
();

57 
vútuÆ
 
	$ã°Body
()

62 
vútuÆ
 
	`run
(
Te°Resu…
& 
ªsu…
);

63 
vútuÆ
 
	`runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

64 
vútuÆ
 
Sim∂eSåög
 
	$gëF‹m©ãdName
() const;

66 
vútuÆ
 
Uã°
* 
	`addTe°
(Uã°* 
ã°
);

67 
vútuÆ
 
Uã°
 *
	$gëNext
() const;

68 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

69 
vútuÆ
 
	`cou¡Te°s
();

71 
boﬁ
 
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
,

72 c⁄° 
Sim∂eSåög
& 
«meFûãr
) const;

73 c⁄° 
Sim∂eSåög
 
	$gëName
() const;

74 c⁄° 
Sim∂eSåög
 
	$gëGroup
() const;

75 c⁄° 
Sim∂eSåög
 
	$gëFûe
() const;

76 
	$gëLöeNumbî
() const;

77 
vútuÆ
 c⁄° * 
	$gëProgªssIndiˇt‹
() const;

79 
vútuÆ
 
	`£tup
();

80 
vútuÆ
 
	`ã¨down
();

82 
Te°Resu…
* 
	`gëTe°Resu…
();

83 
Uã°
* 
	`gëCuºít
();

85 
vútuÆ
 
boﬁ
 
	`as£πTrue
(boﬁ 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

86 c⁄° * 
fûeName
, 
löeNumbî
);

87 
vútuÆ
 
boﬁ
 
	`as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

88 c⁄° * 
fûeName
, 
löeNumbî
);

89 
vútuÆ
 
boﬁ
 
	`as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

90 c⁄° * 
fûeName
, 
löeNumbî
);

91 
vútuÆ
 
boﬁ
 
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

92 c⁄° * 
fûeName
, 
löeNumbî
);

93 
vútuÆ
 
boﬁ
 
	`as£πPoöãrsEquÆ
(* 
ex≥˘ed
, * 
a˘uÆ
,

94 c⁄° * 
fûeName
, 
löeNumbî
);

95 
vútuÆ
 
boﬁ
 
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

96 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
);

97 
vútuÆ
 
	`Áû
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
);

98 
vútuÆ
 
	`¥öt
(c⁄° * 
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
);

99 
vútuÆ
 
	`¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
,

100 
löeNumbî
);

102 
	`£tFûeName
(c⁄° * 
fûeName
);

103 
	`£tLöeNumbî
(
löeNumbî
);

104 
	`£tGroupName
(c⁄° * 
groupName
);

105 
	`£tTe°Name
(c⁄° * 
ã°Name
);

107 
	`exôCuºítTe°
();

108 
¥Ÿe˘ed
:

109 
vútuÆ
 
	`runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
);

111 
vútuÆ
 
	`execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
,

112 
Te°Resu…
& 
ªsu…
);

113 
vútuÆ
 
boﬁ
 
	`execuãPœtf‹mS≥cificSëup
();

114 
vútuÆ
 
	`execuãPœtf‹mS≥cificTe°Body
();

115 
vútuÆ
 
	`execuãPœtf‹mS≥cificTórdown
();

116 
vútuÆ
 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

118 
	`Uã°
();

120 
	`Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

121 
löeNumbî
, 
Uã°
* 
√xtTe°
);

123 
vútuÆ
 
Sim∂eSåög
 
	$gëMa¸oName
() const;

125 
¥iv©e
:

127 c⁄° * 
group_
;

128 c⁄° * 
«me_
;

129 c⁄° * 
fûe_
;

130 
löeNumbî_
;

131 
Uã°
 *
√xt_
;

132 
Te°Resu…
* 
ã°Resu…_
;

133 
Uã°
* 
cuºítTe°_
;

134 
	}
};

138 ˛as†
	cNuŒTe°
: 
public
 
Uã°


140 
public
:

141 
ex∂icô
 
NuŒTe°
();

142 
	mvútuÆ
 ~
NuŒTe°
();

144 
	$ã°Body
()

148 
NuŒTe°
& 
	`ö°™˚
();

150 
vútuÆ
 
	`cou¡Te°s
();

151 
vútuÆ
 
Uã°
*
	$gëNext
() const;

152 
vútuÆ
 
boﬁ
 
	$isNuŒ
() const;

153 
¥iv©e
:

155 
	`NuŒTe°
(c⁄° 
NuŒTe°
&);

156 
NuŒTe°
& 
›î©‹
=(const NullTest&);

158 
	}
};

162 ˛as†
	cExecFun˘i⁄Te°
: 
public
 
Uã°


164 
public
:

165 (*
£tup_
)();

166 (*
	mã¨down_
)();

167 (*
	m_ã°Fun˘i⁄
)();

168 
ExecFun˘i⁄Te°
((*
£tup
)(Ë0, (*
ã¨down
)() = 0) :

169 
Uã°
("Gíîic", "Gíîic", "Gíîic", 1), 
£tup_
(
£tup
), 
ã¨down_
(

170 
ã¨down
), 
	$_ã°Fun˘i⁄
(0)

173 
	$ã°Body
()

175 i‡(
_ã°Fun˘i⁄
Ë
	`_ã°Fun˘i⁄
();

176 
	}
}

177 
vútuÆ
 
	$£tup
()

179 i‡(
£tup_
Ë
	`£tup_
();

180 
	}
}

181 
vútuÆ
 
	$ã¨down
()

183 i‡(
ã¨down_
Ë
	`ã¨down_
();

184 
	}
}

189 ˛as†
	cTe°In°ÆÀr


191 
	mpublic
:

192 
ex∂icô
 
Te°In°ÆÀr
(
Uã°
*, c⁄° * 
groupName
, c⁄° * 
ã°Name
,

193 c⁄° * 
fûeName
, 
löeNumbî
);

194 
	mvútuÆ
 ~
Te°In°ÆÀr
();

196 
unDo
();

198 
	m¥iv©e
:

200 
Te°In°ÆÀr
(const TestInstaller&);

201 
	mTe°In°ÆÀr
& 
	m›î©‹
=(c⁄° 
Te°In°ÆÀr
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\UtestMacros.h

28 #i‚de‡
D_UTe°Ma¸os_h


29 
	#D_UTe°Ma¸os_h


	)

40 
	#TEST_GROUP_BASE
(
ã°Group
, 
ba£˛ass
) \

41 
exã∫Te°Group
##
ã°Group
 = 0; \

42 
CµUTe°Group
##
ã°Group
 : 
public
 
ba£˛ass


	)

44 
	#TEST_BASE
(
ã°Ba£Cœss
) \

45 
ã°Ba£Cœss
 : 
public
 
Uã°


	)

47 
	#TEST_GROUP
(
ã°Group
) \

48 
	`TEST_GROUP_BASE
(
ã°Group
, 
Uã°
)

	)

50 
	#TEST_SETUP
() \

51 
vútuÆ
 
	`£tup
()

	)

53 
	#TEST_TEARDOWN
() \

54 
vútuÆ
 
	`ã¨down
()

	)

56 
	#TEST
(
ã°Group
, 
ã°Name
) \

57 
˛ass
 
ã°Group
##
_
##
ã°Name
##
_Te°
 : 
public
 
CµUTe°Group
##testGroup \

58 { 
public
: 
ã°Group
##
_
##
ã°Name
##
	`_Te°
 (Ë: 
CµUTe°Group
##
	`ã°Group
 () {} \

59 
	`ã°Body
(); } \

60 
ã°Group
##
_
##
ã°Name
##
_In°™˚
; \

61 
Te°In°ÆÀr
 
ã°Group
##
_
##
ã°Name
##
	`_In°ÆÀr
(&ã°Group##_##ã°Name##
_In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

62 
ã°Group
##
_
##
ã°Name
##
_Te°
::
	`ã°Body
()

	)

64 
	#IGNORE_TEST
(
ã°Group
, 
ã°Name
)\

65 
˛ass
 
ã°Group
##
ã°Name
##
Te°
 : 
public
 
CµUTe°Group
##testGroup \

66 { 
public
: 
ã°Group
##
ã°Name
##
	`Te°
 (Ë: 
CµUTe°Group
##
	`ã°Group
 () {} \

67 
vútuÆ
 
	`run
 (
Te°Resu…
& 
ªsu…
) { \

68 
ªsu…
.
	`cou¡Ign‹ed
(); } \

69 
vútuÆ
 c⁄° * 
	`gëProgªssIndiˇt‹
() const { "!";} \

70 
¥Ÿe˘ed
: 
vútuÆ
 
Sim∂eSåög
 
	`gëMa¸oName
() const \

72 
public
: 
	`ã°BodyTh©NevîRuns
 (); } \

73 
ã°Group
##
ã°Name
##
In°™˚
; \

74 
Te°In°ÆÀr
 
ã°Group
##
ã°Name
##
	`In°ÆÀr
(&ã°Group##ã°Name##
In°™˚
, #ã°Group, #ã°Name, 
__FILE__
,
__LINE__
); \

75 
ã°Group
##
ã°Name
##
Te°
::
	`ã°BodyTh©NevîRuns
 ()

	)

77 
	#IMPORT_TEST_GROUP
(
ã°Group
) \

78 
exã∫Te°Group
##
ã°Group
;\

79 * 
p
##
ã°Group
 = &
exã∫Te°Group
##
	)
testGroup

83 
	#CHECK_LOCATION
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)\

84 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πTrue
(
c⁄dôi⁄
, 
c⁄dôi⁄Såög
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

86 
	#CHECK
(
c⁄dôi⁄
)\

87 
	`CHECK_LOCATION
(
c⁄dôi⁄
, #c⁄dôi⁄, 
__FILE__
, 
__LINE__
)

	)

90 
	#CHECK_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

91 
	`CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

93 
	#CHECK_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

94 i‡((
ex≥˘ed
Ë!(
a˘uÆ
))\

97 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();\

98 
EquÆsFaûuª
 
	`_f
(
Uã°
::
	`gëCuºít
(), 
fûe
, 
löe
, 
	`SåögFrom
(
ex≥˘ed
), SåögFrom(
a˘uÆ
)); \

99 
Uã°
::
	`gëTe°Resu…
()->
	`addFaûuª
(
_f
);\

101 
Uã°
::
	`gëCuºít
()->
	`exôCuºítTe°
(); \

104 
Uã°
::
	`gëTe°Resu…
()->
	`cou¡Check
();

	)

108 
	#STRCMP_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

109 
	`STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

111 
	#STRCMP_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

112 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πC°rEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

114 
	#STRCMP_CONTAINS
(
ex≥˘ed
,
a˘uÆ
)\

115 
	`STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
__FILE__
, 
__LINE__
)

	)

117 
	#STRCMP_CONTAINS_LOCATION
(
ex≥˘ed
,
a˘uÆ
, 
fûe
, 
löe
)\

118 {i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πC°rC⁄èös
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
();}

	)

121 
	#LONGS_EQUAL
(
ex≥˘ed
,
a˘uÆ
)\

122 
	`LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
__FILE__
, 
__LINE__
)

	)

124 
	#LONGS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

125 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

127 
	#BYTES_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

128 
	`LONGS_EQUAL
((
ex≥˘ed
Ë& 0xff,(
a˘uÆ
Ë& 0xff)

	)

130 
	#POINTERS_EQUAL
(
ex≥˘ed
, 
a˘uÆ
)\

131 
	`POINTERS_EQUAL_LOCATION
((
ex≥˘ed
),(
a˘uÆ
), 
__FILE__
, 
__LINE__
)

	)

133 
	#POINTERS_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
fûe
,
löe
)\

134 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πPoöãrsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

137 
	#DOUBLES_EQUAL
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
)\

138 
	`DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
__FILE__
,
__LINE__
)

	)

140 
	#DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
,
a˘uÆ
,
thªshﬁd
,
fûe
,
löe
)\

141 { i‡(!
Uã°
::
	`gëCuºít
()->
	`as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûe
, 
löe
)ËUã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

145 #i‚de‡
FAIL


146 
	#FAIL
(
ãxt
)\

147 
	`FAIL_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

149 
	#FAIL_LOCATION
(
ãxt
, 
fûe
, 
löe
)\

150 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

153 
	#FAIL_TEST
(
ãxt
)\

154 
	`FAIL_TEST_LOCATION
(
ãxt
, 
__FILE__
,
__LINE__
)

	)

156 
	#FAIL_TEST_LOCATION
(
ãxt
, 
fûe
,
löe
)\

157 { 
Uã°
::
	`gëCuºít
()->
	`Áû
(
ãxt
, 
fûe
, 
löe
); Uã°::gëCuºít()->
	`exôCuºítTe°
(); }

	)

159 
	#UT_PRINT_LOCATION
(
ãxt
, 
fûe
, 
löe
) \

160 { 
Uã°
::
	`gëCuºít
()->
	`¥öt
(
ãxt
, 
fûe
, 
löe
); }

	)

162 
	#UT_PRINT
(
ãxt
) \

163 
	`UT_PRINT_LOCATION
(
ãxt
, 
__FILE__
, 
__LINE__
)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\VirtualCall.h

1 #i‚de‡
D_VútuÆCÆl_H


2 
	#D_VútuÆCÆl_H


	)

4 
	#£nd
(
obj
,
msg
)\

5 ((
obj
)->
	`msg
(obj))

	)

7 
	#£nd1
(
obj
,
msg
,
¨g0
)\

8 ((
obj
)->
	`msg
((obj),(
¨g0
)))

	)

10 
	#£nd2
(
obj
,
msg
,
¨g0
,
¨g1
)\

11 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
)))

	)

13 
	#£nd3
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
)\

14 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
)))

	)

16 
	#£nd4
(
obj
,
msg
,
¨g0
,
¨g1
,
¨g2
,
¨g3
)\

17 ((
obj
)->
	`msg
((obj),(
¨g0
),(
¨g1
),(
¨g2
),(
¨g3
)))

	)

19 
	#vBöd
(
obj
,
msg
,
√wMëhod
)\

20 (
obj
->
msg
=&
√wMëhod
)

	)

22 
	#ˇ°ToDe°royî
(
Cœss
Ë(Cœss* (*)(Cœss*))

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Gcc\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\StarterKit\Platform.h

28 #i‚de‡
D_Gcc_Pœtf‹m_H


29 
	#D_Gcc_Pœtf‹m_H


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Symbian\Platform.h

2 #i‚de‡
PLATFORM_H_


3 
	#PLATFORM_H_


	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\Platform.h

28 #ifde‡
_MSC_VER


29 #¥agm®
w¨nög
(
dißbÀ
:4786)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\stdint.h

20 #i‚de‡
_STDINT_H


21 
	#_STDINT_H


	)

22 
	#__√ed_wöt_t


	)

23 
	#__√ed_wch¨_t


	)

24 
	~<°ddef.h
>

27 sig√d 
	töt8_t
;

28 
	tuöt8_t
;

29 
	töt16_t
;

30 
	tuöt16_t
;

31 
	töt32_t
;

32 
	tuöt32_t
;

37 sig√d 
	töt_Àa°8_t
;

38 
	tuöt_Àa°8_t
;

39 
	töt_Àa°16_t
;

40 
	tuöt_Àa°16_t
;

41 
	töt_Àa°32_t
;

42 
	tuöt_Àa°32_t
;

50 sig√d 
	töt_Á°8_t
;

51 
	tuöt_Á°8_t
;

52 
	töt_Á°16_t
;

53 
	tuöt_Á°16_t
;

54 
	töt_Á°32_t
;

55 
	tuöt_Á°32_t
;

61 #i‚de‡
_INTPTR_T_DEFINED


62 
	#_INTPTR_T_DEFINED


	)

63 #ifde‡
_WIN64


64 
__öt64
 
	töçå_t
;

66 
	töçå_t
;

70 #i‚de‡
_UINTPTR_T_DEFINED


71 
	#_UINTPTR_T_DEFINED


	)

72 #ifde‡
_WIN64


73 
	t__öt64
 
	tuöçå_t
;

75 
	tuöçå_t
;

84 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_LIMIT_MACROS
)

87 
	#INT8_MIN
 (-128)

	)

88 
	#INT16_MIN
 (-32768)

	)

89 
	#INT32_MIN
 (-2147483647 - 1)

	)

90 
	#INT64_MIN
 (-9223372036854775807LL - 1)

	)

92 
	#INT8_MAX
 127

	)

93 
	#INT16_MAX
 32767

	)

94 
	#INT32_MAX
 2147483647

	)

95 
	#INT64_MAX
 9223372036854775807LL

	)

97 
	#UINT8_MAX
 0xf‡

	)

98 
	#UINT16_MAX
 0xfff‡

	)

99 
	#UINT32_MAX
 0xfffffff‡

	)

100 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

108 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

109 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

110 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

111 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

113 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

114 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

115 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

116 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

119 
	#INT_FAST8_MIN
 
INT8_MIN


	)

120 
	#INT_FAST16_MIN
 
INT16_MIN


	)

121 
	#INT_FAST32_MIN
 
INT32_MIN


	)

122 
	#INT_FAST64_MIN
 
INT64_MIN


	)

124 
	#INT_FAST8_MAX
 
INT8_MAX


	)

125 
	#INT_FAST16_MAX
 
INT16_MAX


	)

126 
	#INT_FAST32_MAX
 
INT32_MAX


	)

127 
	#INT_FAST64_MAX
 
INT64_MAX


	)

129 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

130 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

131 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

132 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

136 #ifde‡
_WIN64


137 
	#INTPTR_MIN
 
INT64_MIN


	)

138 
	#INTPTR_MAX
 
INT64_MAX


	)

139 
	#UINTPTR_MAX
 
UINT64_MAX


	)

141 
	#INTPTR_MIN
 
INT32_MIN


	)

142 
	#INTPTR_MAX
 
INT32_MAX


	)

143 
	#UINTPTR_MAX
 
UINT32_MAX


	)

147 
	#INTMAX_MIN
 
INT64_MIN


	)

148 
	#INTMAX_MAX
 
INT64_MAX


	)

149 
	#UINTMAX_MAX
 
UINT64_MAX


	)

152 
	#PTRDIFF_MIN
 
INTPTR_MIN


	)

153 
	#PTRDIFF_MAX
 
INTPTR_MAX


	)

155 
	#SIG_ATOMIC_MIN
 
INTPTR_MIN


	)

156 
	#SIG_ATOMIC_MAX
 
INTPTR_MAX


	)

158 
	#SIZE_MAX
 
UINTPTR_MAX


	)

160 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 0

	)

162 
	#WCHAR_MAX
 0xfff‡

	)

168 
	#WINT_MIN
 0

	)

169 
	#WINT_MAX
 0xfff‡

	)

175 #i‡!
deföed
 ( 
__˝lu•lus
Ë|| deföed (
__STDC_CONSTANT_MACROS
)

190 
	#INT8_C
(
vÆ
Ë
	)
val

191 
	#UINT8_C
(
vÆ
Ë
	)
val

192 
	#INT16_C
(
vÆ
Ë
	)
val

193 
	#UINT16_C
(
vÆ
Ë
	)
val

195 
	#INT32_C
(
vÆ
Ë
	)
val

196 
	#UINT32_C
(
vÆ
ËvÆ##
U


	)

197 
	#INT64_C
(
vÆ
ËvÆ##
LL


	)

198 
	#UINT64_C
(
vÆ
ËvÆ##
ULL


	)

201 
	#INTMAX_C
(
vÆ
Ë
	`INT64_C
(vÆ)

	)

202 
	#UINTMAX_C
(
vÆ
Ë
	`UINT64_C
(vÆ)

	)

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢ame
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

14 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	gÁkeR™
 = 0;

7 
	~"CœssName.h
"

8 
vútuÆFun˘i⁄_ª«meThis_Áke
(
CœssName
*)

10 
ÁkeR™
 = 1;

14 
	$TEST_GROUP
(
CœssName
)

16 
CœssName
* 
aCœssName
;

18 
	`£tup
()

20 
aCœssName
 = 
	`CœssName_Cª©e
();

21 
ÁkeR™
 = 0;

22 
aCœssName
->
vútuÆFun˘i⁄_ª«meThis
 = 
vútuÆFun˘i⁄_ª«meThis_Áke
;

25 
	`ã¨down
()

27 
	`CœssName_De°roy
(
aCœssName
);

29 
	}
};

31 
	$TEST
(
CœssName
, 
Fake
)

33 
aCœssName
->
	`vútuÆFun˘i⁄_ª«meThis
(aClassName);

34 
	`LONGS_EQUAL
(1, 
ÁkeR™
);

35 
	}
}

37 
	$TEST
(
CœssName
, 
Cª©e
)

39 
	`FAIL
("Start here");

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	s_CœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
_CœssName
 
	tCœs¢amePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"CœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

5 ˛as†
	cCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


7 
CPPUNIT_TEST_SUITE
(
CœssNameTe°
);

8 
CPPUNIT_TEST
(
ã°Cª©e
);

9 
CPPUNIT_TEST_SUITE_END
();

11 
CœssName
* 
	maCœssName
;

13 
	mpublic
:

15 
	$£tUp
()

17 
aCœssName
 = 
√w
 
	`CœssName
();

20 
	$ã¨Down
()

22 
dñëe
 
aCœssName
;

23 
	}
}

25 
	$ã°Cª©e
()

27 
	`CPPUNIT_FAIL
("Start here");

28 
	}
}

31 
CPPUNIT_TEST_SUITE_REGISTRATION
(
CœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

5 
	~"FakeCœssName.h
"

8 
	$TEST_GROUP
(
CœssName
)

10 
	`£tup
()

12 
	`CœssName_Cª©e
();

15 
	`ã¨down
()

17 
	`CœssName_De°roy
();

19 
	}
};

21 
	$TEST
(
CœssName
, 
Cª©e
)

23 
	`FAIL
("Start here");

24 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp

1 
	~<˝punô/c⁄fig/Sour˚Pªfix.h
>

2 
	~<˝punô/exãnsi⁄s/Hñ≥rMa¸os.h
>

3 
	~"CœssName.h
"

4 
	~"MockCœssName.h
"

6 ˛as†
	cMockCœssNameTe°
: 
public
 
CPPUNIT_NS
::
Te°Fixtuª


8 
CPPUNIT_TEST_SUITE
(
MockCœssNameTe°
);

9 
CPPUNIT_TEST
(
ã°Cª©e
);

10 
CPPUNIT_TEST_SUITE_END
();

12 
CœssName
* 
	maCœssName
;

13 
MockCœssName
* 
	mmockCœssName
;

15 
	mpublic
:

17 
	$£tUp
()

19 
mockCœssName
 = 
√w
 
	`MockCœssName
();

20 
aCœssName
 = 
mockCœssName
;

23 
	$ã¨Down
()

25 
dñëe
 
aCœssName
;

26 
	}
}

28 
	$ã°Cª©e
()

30 
	`CPPUNIT_FAIL
("Start here");

31 
	}
}

34 
CPPUNIT_TEST_SUITE_REGISTRATION
(
MockCœssNameTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.cpp

1 
	~"CœssName.h
"

3 
	gCœssName
::
	$CœssName
()

5 
	}
}

7 
CœssName
::~
	$CœssName
()

9 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 ˛as†
	cCœssName


12 
	mpublic
:

13 
ex∂icô
 
CœssName
();

14 
	mvútuÆ
 ~
CœssName
();

16 
	m¥iv©e
:

18 
CœssName
(const ClassName&);

19 
	mCœssName
& 
	m›î©‹
=(c⁄° 
CœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName_Cª©e
();

10 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.c

1 
	~"CœssName.h
"

2 
	~"IO.h
"

6 
	$CœssName_Cª©e
()

8 
	}
}

10 
	$CœssName_De°roy
()

12 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
	~<°döt.h
>

11 
CœssName_Cª©e
();

12 
CœssName_De°roy
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp

2 
	~"CœssName.h
"

3 
	~"MockIO.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`Re£t_Mock_IO
();

14 
	`CœssName_Cª©e
();

17 
	`ã¨down
()

19 
	`CœssName_De°roy
();

20 
	`As£π_No_Unu£d_Ex≥˘©i⁄s
();

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssName
;

12 
CœssName
* 
CœssName_Cª©e
();

13 
CœssName_De°roy
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
CœssName
* 
aCœssName
;

13 
	`£tup
()

15 
aCœssName
 = 
	`CœssName_Cª©e
();

18 
	`ã¨down
()

20 
	`CœssName_De°roy
(
aCœssName
);

22 
	}
};

24 
	$TEST
(
CœssName
, 
Cª©e
)

26 
	`FAIL
("Start here");

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

6 
	sCœssName


8 
	m∂a˚HﬁdîF‹HiddíSåu˘EÀmíts
;

11 
CœssName
* 
	$CœssName_Cª©e
()

13 
CœssName
* 
£lf
 = 
	`mÆloc
((ClassName));

14 
	`mem£t
(
£lf
, 0, (
CœssName
));

15  
£lf
;

16 
	}
}

18 
	$CœssName_De°roy
(
CœssName
* 
£lf
)

20 
	`‰ì
(
£lf
);

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

10 
CœssName
 
	tCœssNamePiml
;

14 
CœssName
* 
CœssName_Cª©e
();

15 
CœssName_De°roy
(
CœssName
*);

16 
CœssName_VútuÆFun˘i⁄_im∂
(
CœssName
*);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameTest.cpp

1 
	~"CœssName.h
"

4 
	~"CµUTe°/Te°H¨√ss.h
"

6 
	$TEST_GROUP
(
CœssName
)

8 
CœssName
* 
aCœssName
;

10 
	`£tup
()

12 
aCœssName
 = 
√w
 
	`CœssName
();

14 
	`ã¨down
()

16 
dñëe
 
aCœssName
;

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.c

1 
	~"CœssName.h
"

4 
	$CœssName
()

6 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.h

1 #i‚de‡
D_CœssName_H


2 
	#D_CœssName_H


	)

9 
CœssName
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameCTest.cpp

3 
	~"CœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

15 
	`ã¨down
()

18 
	}
};

20 
	$TEST
(
CœssName
, 
Cª©e
)

22 
	`FAIL
("Start here");

23 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceCTest.cpp

3 
	~"FakeCœssName.h
"

7 
	~"CµUTe°/Te°H¨√ss.h
"

9 
	$TEST_GROUP
(
CœssName
)

11 
	`£tup
()

13 
	`CœssName_Cª©e
();

16 
	`ã¨down
()

18 
	`CœssName_De°roy
();

20 
	}
};

22 
	$TEST
(
CœssName
, 
Cª©e
)

24 
	`FAIL
("Start here");

25 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceTest.cpp

1 
	~"CœssName.h
"

2 
	~"MockCœssName.h
"

5 
	~"CµUTe°/Te°H¨√ss.h
"

7 
	$TEST_GROUP
(
CœssName
)

9 
CœssName
* 
aCœssName
;

10 
MockCœssName
* 
mockCœssName
;

12 
	`£tup
()

14 
mockCœssName
 = 
√w
 
	`MockCœssName
();

15 
aCœssName
 = 
mockCœssName
;

17 
	`ã¨down
()

19 
dñëe
 
aCœssName
;

21 
	}
};

23 
	$TEST
(
CœssName
, 
Cª©e
)

25 
	`FAIL
("Start here");

26 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassName.h

1 #i‚de‡
D_MockCœssName_H


2 
	#D_MockCœssName_H


	)

11 
	~"CœssName.h
"

14 ˛as†
	cMockCœssName
 : 
public
 
CœssName


16 
public
:

17 
ex∂icô
 
	$MockCœssName
()

19 
vútuÆ
 ~
	$MockCœssName
()

20 {
	}
}

22 
¥iv©e
:

24 
MockCœssName
(const MockClassName&);

25 
	gMockCœssName
& 
	g›î©‹
=(c⁄° 
MockCœssName
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.c

1 
	~"CœssName.h
"

2 
	~<°dlib.h
>

3 
	~<mem‹y.h
>

8 
	$CœssName_Cª©e
()

10 
	}
}

12 
	$CœssName_De°roy
()

14 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.h

1 #i‚de‡
D_FakeCœssName_H


2 
	#D_FakeCœssName_H


	)

11 
	~"CœssName.h
"

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h

1 #i‚de‡
D_Proje˘BuûdTime_H


2 
	#D_Proje˘BuûdTime_H


	)

11 ˛as†
	cProje˘BuûdTime


13 
	mpublic
:

14 
ex∂icô
 
Proje˘BuûdTime
();

15 
	mvútuÆ
 ~
Proje˘BuûdTime
();

17 c⁄° * 
GëD©eTime
();

19 
	m¥iv©e
:

21 c⁄° * 
d©eTime
;

23 
Proje˘BuûdTime
(const ProjectBuildTime&);

24 
	mProje˘BuûdTime
& 
	m›î©‹
=(c⁄° 
Proje˘BuûdTime
&);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp

1 
	~"Proje˘BuûdTime.h
"

3 
	gProje˘BuûdTime
::
	$Proje˘BuûdTime
()

4 : 
	`d©eTime
(
__DATE__
 " " 
__TIME__
)

6 
	}
}

8 
Proje˘BuûdTime
::~
	$Proje˘BuûdTime
()

10 
	}
}

12 c⁄° * 
Proje˘BuûdTime
::
	$GëD©eTime
()

14  
d©eTime
;

15 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp

2 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

4 
	$maö
(
ac
, ** 
av
)

6  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"Proje˘BuûdTime.h
"

4 
	$TEST_GROUP
(
Proje˘BuûdTime
)

6 
Proje˘BuûdTime
* 
¥oje˘BuûdTime
;

8 
	`£tup
()

10 
¥oje˘BuûdTime
 = 
√w
 
	`Proje˘BuûdTime
();

12 
	`ã¨down
()

14 
dñëe
 
¥oje˘BuûdTime
;

16 
	}
};

18 
	$TEST
(
Proje˘BuûdTime
, 
Cª©e
)

20 
	`CHECK
(0 !
¥oje˘BuûdTime
->
	`GëD©eTime
());

21 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	#MAX_VARIABLE_NAME_LINE_PART
 10

	)

35 
	#MAX_VARIABLE_NAME_FILE_PART
 53

	)

36 
	#MAX_VARIABLE_NAME_SEPERATOR_PART
 1

	)

37 
	#MAX_VARIABLE_NAME_LENGTH
 
MAX_VARIABLE_NAME_FILE_PART
 + 
MAX_VARIABLE_NAME_SEPERATOR_PART
 + 
MAX_VARIABLE_NAME_LINE_PART


	)

39 
	sCodeRï‹tögAŒoˇti⁄Node


41 
	mv¨übÀName_
[
MAX_VARIABLE_NAME_LENGTH
 + 1];

42 * 
	mmem‹y_
;

43 
CodeRï‹tögAŒoˇti⁄Node
* 
	m√xt_
;

46 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$CodeMem‹yRï‹tF‹m©ãr
(
Mem‹yLókAŒoˇt‹
* 
öã∫ÆAŒoˇt‹
)

47 : 
	`codeRï‹tögLi°_
(
NULL
), 
	$öã∫ÆAŒoˇt‹_
(
öã∫ÆAŒoˇt‹
)

49 
	}
}

51 
	gCodeMem‹yRï‹tF‹m©ãr
::~
	$CodeMem‹yRï‹tF‹m©ãr
()

53 
	`˛órRï‹tög
();

54 
	}
}

56 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$˛órRï‹tög
()

58 
codeRï‹tögLi°_
) {

59 
CodeRï‹tögAŒoˇti⁄Node
* 
ﬁdNode
 = 
codeRï‹tögLi°_
;

60 
codeRï‹tögLi°_
 = codeRï‹tögLi°_->
√xt_
;

61 
öã∫ÆAŒoˇt‹_
->
	`‰ì_mem‹y
((*Ë
ﬁdNode
, 
__FILE__
, 
__LINE__
);

63 
	}
}

65 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$addNodeToLi°
(c⁄° * 
v¨übÀName
, * 
mem‹y
, 
CodeRï‹tögAŒoˇti⁄Node
* 
√xt
)

67 
CodeRï‹tögAŒoˇti⁄Node
* 
√wNode
 = (CodeRï‹tögAŒoˇti⁄Node*Ë
öã∫ÆAŒoˇt‹_
->
	`Æloc_mem‹y
((CodeRï‹tögAŒoˇti⁄Node), 
__FILE__
, 
__LINE__
);

68 
√wNode
->
mem‹y_
 = 
mem‹y
;

69 
√wNode
->
√xt_
 = 
√xt
;

70 
	`Pœtf‹mS≥cificSåNCpy
(
√wNode
->
v¨übÀName_
, 
v¨übÀName
, 
MAX_VARIABLE_NAME_LENGTH
);

71 
codeRï‹tögLi°_
 = 
√wNode
;

72 
	}
}

74 
CodeRï‹tögAŒoˇti⁄Node
* 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$födNode
(* 
mem‹y
)

77 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

78 
cuºít
 && cuºít->
mem‹y_
 !
mem‹y
) {

79 
cuºít
 = cuºít->
√xt_
;

81  
cuºít
;

82 
	}
}

84 
Sim∂eSåög
 
	$exåa˘FûeNameFromP©h
(c⁄° * 
fûe
)

86 c⁄° * 
fûeNameO∆y
 = 
fûe
 + 
	`Pœtf‹mS≥cificSåLí
(file);

87 
fûeNameO∆y
 !
fûe
 && *fileNameOnly != '/')

88 
fûeNameO∆y
--;

89 i‡(*
fûeNameO∆y
 == '/') fileNameOnly++;

90  
fûeNameO∆y
;

91 
	}
}

93 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$¸óãV¨übÀNameFromFûeLöeInfo
(c⁄° *
fûe
, 
löe
)

95 
Sim∂eSåög
 
fûeNameO∆y
 = 
	`exåa˘FûeNameFromP©h
(
fûe
);

96 
fûeNameO∆y
.
	`ª∂a˚
(".", "_");

98 
i
 = 1; i < 100000; i++) {

99 
Sim∂eSåög
 
v¨übÀName
 = 
	`SåögFromF‹m©
("%s_%d_%d", 
fûeNameO∆y
.
	`asCh¨Såög
(), 
löe
, 
i
);

100 i‡(!
	`v¨übÀExi°s
(
v¨übÀName
))

101  
v¨übÀName
;

104 
	}
}

106 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$isNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

108  
	`Pœtf‹mS≥cificSåCmp
(
Æloˇt‹
->
	`Æloc_«me
(), 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
()->Æloc_«me()Ë=0 || Pœtf‹mS≥cificSåCmp◊Œoˇt‹->Æloc_«me(), 
Sènd¨dNewAºayAŒoˇt‹
::defaultAllocator()->alloc_name()) == 0;

109 
	}
}

111 
boﬁ
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$v¨übÀExi°s
(c⁄° 
Sim∂eSåög
& 
v¨übÀName
)

113 
CodeRï‹tögAŒoˇti⁄Node
* 
cuºít
 = 
codeRï‹tögLi°_
;

114 
cuºít
) {

115 i‡(
v¨übÀName
 =
cuºít
->
v¨übÀName_
)

116  
åue
;

117 
cuºít
 = cuºít->
√xt_
;

119  
Ál£
;

120 
	}
}

122 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëAŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, 
size_t
 
size
)

124 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

125  
	`SåögFromF‹m©
("ch¨* %†√w ch¨[%d]; /* usög %†*/", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
, 
Æloˇt‹
->
	`Æloc_«me
());

127  
	`SåögFromF‹m©
("void* %†mÆloc(%d);", 
v¨übÀName
.
	`asCh¨Såög
(), 
size
);

128 
	}
}

130 
Sim∂eSåög
 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$gëDóŒoˇti⁄Såög
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, c⁄° 
Sim∂eSåög
& 
v¨übÀName
, c⁄° * 
fûe
, 
löe
)

132 i‡(
	`isNewAŒoˇt‹
(
Æloˇt‹
))

133  
	`SåögFromF‹m©
("dñëê[] %s; /* usög %†© %s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
Æloˇt‹
->
	`‰ì_«me
(), 
fûe
, 
löe
);

135  
	`SåögFromF‹m©
("‰ì(%s); /*áà%s:%d */", 
v¨übÀName
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

136 
	}
}

138 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

140 
	`˛órRï‹tög
();

141 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/\nTEST(%s_memoryReport, %s)\n{ /*át %s:%d */\n",

142 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCh¨Såög(),Åe°.
	`gëFûe
().asCh¨Såög(),Åe°.
	`gëLöeNumbî
()).asCharString());

143 
	}
}

145 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
&)

147 
ªsu…
->
	`¥öt
("}/*");

148 
	}
}

150 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

152 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("*/TEST_GROUP(%s_memoryReport)\n{\n};\n/*",

153 
ã°
.
	`gëGroup
().
	`asCh¨Såög
()).asCharString());

154 
	}
}

156 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

158 
Sim∂eSåög
 
v¨übÀName
 = 
	`¸óãV¨übÀNameFromFûeLöeInfo
(
fûe
, 
löe
);

159 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëAŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
size
).
	`asCh¨Såög
()).asCharString());

160 
	`addNodeToLi°
(
v¨übÀName
.
	`asCh¨Såög
(), 
mem‹y
, 
codeRï‹tögLi°_
);

161 
	}
}

163 
	gCodeMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

165 
Sim∂eSåög
 
v¨übÀName
;

166 
CodeRï‹tögAŒoˇti⁄Node
* 
node
 = 
	`födNode
(
mem‹y
);

168 i‡(
mem‹y
 =
NULL
Ë
v¨übÀName
 = "NULL";

169 
v¨übÀName
 = 
node
->
v¨übÀName_
;

171 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\t%s\n", 
	`gëDóŒoˇti⁄Såög
(
Æloˇt‹
, 
v¨übÀName
, 
fûe
, 
löe
).
	`asCh¨Såög
()).asCharString());

172 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gMem‹yRï‹tAŒoˇt‹
::
	$Mem‹yRï‹tAŒoˇt‹
(Ë: 
	`ªsu…_
(
NULL
), 
	`ªÆAŒoˇt‹_
(NULL), 
	$f‹m©ãr_
(
NULL
)

34 
	}
}

36 
	gMem‹yRï‹tAŒoˇt‹
::~
	$Mem‹yRï‹tAŒoˇt‹
()

38 
	}
}

40 c⁄° * 
Mem‹yRï‹tAŒoˇt‹
::
	$«me
()

42  
ªÆAŒoˇt‹_
->
	`«me
();

43 
	}
}

45 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_«me
()

47  
ªÆAŒoˇt‹_
->
	`Æloc_«me
();

48 
	}
}

50 c⁄° * 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_«me
()

52  
ªÆAŒoˇt‹_
->
	`‰ì_«me
();

53 
	}
}

55 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

57 
ªÆAŒoˇt‹_
 = 
Æloˇt‹
;

58 
	}
}

60 
boﬁ
 
	gMem‹yRï‹tAŒoˇt‹
::
	$ÆloˇãMem‹yLókNodeSï¨©ñy
()

62  
ªÆAŒoˇt‹_
->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
();

63 
	}
}

65 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yRï‹tAŒoˇt‹
::
	$gëRólAŒoˇt‹
()

67  
ªÆAŒoˇt‹_
;

68 
	}
}

70 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tTe°Resu…
(
Te°Resu…
* 
ªsu…
)

72 
ªsu…_
 = 
ªsu…
;

73 
	}
}

75 
	gMem‹yRï‹tAŒoˇt‹
::
	$£tF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

77 
f‹m©ãr_
 = 
f‹m©ãr
;

78 
	}
}

80 * 
	gMem‹yRï‹tAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

82 * 
mem‹y
 = 
ªÆAŒoˇt‹_
->
	`Æloc_mem‹y
(
size
, 
fûe
, 
löe
);

83 i‡(
ªsu…_
 && 
f‹m©ãr_
)

84 
f‹m©ãr_
->
	`ªp‹t_Æloc_mem‹y
(
ªsu…_
, 
this
, 
size
, 
mem‹y
, 
fûe
, 
löe
);

85  
mem‹y
;

86 
	}
}

88 
	gMem‹yRï‹tAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
, c⁄° * 
fûe
, 
löe
)

90 
ªÆAŒoˇt‹_
->
	`‰ì_mem‹y
(
mem‹y
, 
fûe
, 
löe
);

91 i‡(
ªsu…_
 && 
f‹m©ãr_
)

92 
f‹m©ãr_
->
	`ªp‹t_‰ì_mem‹y
(
ªsu…_
, 
this
, 
mem‹y
, 
fûe
, 
löe
);

93 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

34 
	}
}

36 
N‹mÆMem‹yRï‹tF‹m©ãr
::~
	$N‹mÆMem‹yRï‹tF‹m©ãr
()

38 
	}
}

40 
N‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

42 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("TEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

43 
	}
}

45 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

47 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("ENDTEST(%s, %s)\n", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
(),Åe°.
	`gëName
().asCharString()).asCharString());

48 
	}
}

50 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

52 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög %†o‡size: %dÖoöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`Æloc_«me
(), 
size
, 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

53 
	}
}

55 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

57 
ªsu…
->
	`¥öt
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög %†o‡poöãr: %∞© %s:%d\n", 
Æloˇt‹
->
	`‰ì_«me
(), 
mem‹y
, 
fûe
, 
löe
).
	`asCh¨Såög
());

58 
	}
}

60 
	gN‹mÆMem‹yRï‹tF‹m©ãr
::
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

62 c⁄° 
size_t
 
löe_size
 = 80;

64 
Sim∂eSåög
 
groupName
 = 
	`SåögFromF‹m©
("TEST GROUP(%s)", 
ã°
.
	`gëGroup
().
	`asCh¨Såög
());

65 
size_t
 
begöPos
 = (
löe_size
/2Ë- (
groupName
.
	`size
()/2);

67 
Sim∂eSåög
 
	`löe
("-", 
begöPos
);

68 
löe
 +
groupName
;

69 
löe
 +
	`Sim∂eSåög
("-", 
löe_size
 -Üöe.
	`size
());

70 
löe
 += "\n";

71 
ªsu…
->
	`¥öt
(
löe
.
	`asCh¨Såög
());

72 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	gMem‹yRï‹ãrPlugö
::
	$Mem‹yRï‹ãrPlugö
()

34 : 
	`Te°Plugö
("Mem‹yRï‹ãrPlugö"), 
	$f‹m©ãr_
(
NULL
)

36 
	}
}

38 
	gMem‹yRï‹ãrPlugö
::~
	$Mem‹yRï‹ãrPlugö
()

40 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

41 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

42 
	}
}

44 
boﬁ
 
	gMem‹yRï‹ãrPlugö
::
	$∑r£Argumíts
(, c⁄° ** 
av
, 
ödex
)

46 
Sim∂eSåög
 
	`¨gumít
 (
av
[
ödex
]);

47 i‡(
¨gumít
.
	`c⁄èös
("-pmemoryreport=")) {

48 
¨gumít
.
	`ª∂a˚
("-pmemoryreport=", "");

50 
	`de°royMem‹yF‹m©ãr
(
f‹m©ãr_
);

51 
f‹m©ãr_
 = 
	`¸óãMem‹yF‹m©ãr
(
¨gumít
);

52  
åue
;

54  
Ál£
;

55 
	}
}

57 
Mem‹yRï‹tF‹m©ãr
* 
	gMem‹yRï‹ãrPlugö
::
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

59 i‡(
ty≥
 == "normal") {

60  
√w
 
N‹mÆMem‹yRï‹tF‹m©ãr
;

62 i‡(
ty≥
 == "code") {

63  
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

65  
NULL
;

66 
	}
}

68 
	gMem‹yRï‹ãrPlugö
::
	$de°royMem‹yF‹m©ãr
(
Mem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
)

70 
dñëe
 
f‹m©ãr
;

71 
	}
}

74 
	gMem‹yRï‹ãrPlugö
::
	$£tGlobÆMem‹yRï‹tAŒoˇt‹s
()

76 
mÆlocAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

77 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(&
mÆlocAŒoˇt‹
);

79 
√wAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

80 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(&
√wAŒoˇt‹
);

82 
√wAºayAŒoˇt‹
.
	`£tRólAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

83 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(&
√wAºayAŒoˇt‹
);

84 
	}
}

86 
	gMem‹yRï‹ãrPlugö
::
	$ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
()

88 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(Ë=&
√wAŒoˇt‹
)

89 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

91 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
(Ë=&
√wAºayAŒoˇt‹
)

92 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
√wAºayAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

94 i‡(
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
(Ë=&
mÆlocAŒoˇt‹
)

95 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
mÆlocAŒoˇt‹
.
	`gëRólAŒoˇt‹
());

96 
	}
}

99 
	gMem‹yRï‹ãrPlugö
::
	$öôülizeAŒoˇt‹
(
Mem‹yRï‹tAŒoˇt‹
* 
Æloˇt‹
, 
Te°Resu…
 & 
ªsu…
)

101 
Æloˇt‹
->
	`£tF‹m©ãr
(
f‹m©ãr_
);

102 
Æloˇt‹
->
	`£tTe°Resu…
((&
ªsu…
));

103 
	}
}

105 
	gMem‹yRï‹ãrPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

107 i‡(
f‹m©ãr_
 =
NULL
) ;

109 
	`öôülizeAŒoˇt‹
(&
mÆlocAŒoˇt‹
, 
ªsu…
);

110 
	`öôülizeAŒoˇt‹
(&
√wAŒoˇt‹
, 
ªsu…
);

111 
	`öôülizeAŒoˇt‹
(&
√wAºayAŒoˇt‹
, 
ªsu…
);

113 
	`£tGlobÆMem‹yRï‹tAŒoˇt‹s
();

115 i‡(
ã°
.
	`gëGroup
(Ë!
cuºítTe°Group_
) {

116 
f‹m©ãr_
->
	`ªp‹t_ã°group_°¨t
(&
ªsu…
, 
ã°
);

117 
cuºítTe°Group_
 = 
ã°
.
	`gëGroup
();

120 
f‹m©ãr_
->
	`ªp‹t_ã°_°¨t
(&
ªsu…
, 
ã°
);

121 
	}
}

123 
	gMem‹yRï‹ãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

125 i‡(
f‹m©ãr_
 =
NULL
) ;

127 
	`ªmoveGlobÆMem‹yRï‹tAŒoˇt‹s
();

128 
f‹m©ãr_
->
	`ªp‹t_ã°_íd
(&
ªsu…
, 
ã°
);

130 i‡(
ã°
.
	`gëNext
()->
	`gëGroup
(Ë!
cuºítTe°Group_
)

131 
f‹m©ãr_
->
	`ªp‹t_ã°group_íd
(&
ªsu…
, 
ã°
);

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	gMockA˘uÆFun˘i⁄CÆl
::
	$MockA˘uÆFun˘i⁄CÆl
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ÆlEx≥˘©i⁄s
)

35 : 
	`ªp‹ãr_
(
ªp‹ãr
), 
	`°©e_
(
CALL_SUCCEED
), 
	`_fulfûÀdEx≥˘©i⁄
(
NULL
), 
	$ÆlEx≥˘©i⁄s_
(
ÆlEx≥˘©i⁄s
)

37 
unfulfûÀdEx≥˘©i⁄s_
.
	`addUnfûfûÀdEx≥˘©i⁄s
(
ÆlEx≥˘©i⁄s
);

38 
	}
}

40 
	gMockA˘uÆFun˘i⁄CÆl
::~
	$MockA˘uÆFun˘i⁄CÆl
()

42 
	}
}

44 
MockA˘uÆFun˘i⁄CÆl
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

46 
ªp‹ãr_
 = 
ªp‹ãr
;

47 
	}
}

50 
Uã°
* 
	gMockA˘uÆFun˘i⁄CÆl
::
	$gëTe°
() const

52  
ªp‹ãr_
->
	`gëTe°ToFaû
();

53 
	}
}

55 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

57 
	`£tSèã
(
CALL_FAILED
);

58 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

59 
	}
}

61 
	gMockA˘uÆFun˘i⁄CÆl
::
	$fö«lizeCÆlWhíFulfûÀd
()

63 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasFulfûÀdEx≥˘©i⁄s
()) {

64 
_fulfûÀdEx≥˘©i⁄
 = 
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄
();

65 
	`ˇŒHasSuc˚eded
();

67 
	}
}

69 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ˇŒHasSuc˚eded
()

71 
	`£tSèã
(
CALL_SUCCEED
);

72 
unfulfûÀdEx≥˘©i⁄s_
.
	`ª£tEx≥˘©i⁄s
();

73 
	}
}

75 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

77 
	`£tName
(
«me
);

78 
	`£tSèã
(
CALL_IN_PROGESS
);

80 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(
«me
);

81 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

82 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
«me
, 
ÆlEx≥˘©i⁄s_
);

83 
	`ÁûTe°
(
Áûuª
);

84  *
this
;

87 
unfulfûÀdEx≥˘©i⁄s_
.
	`ˇŒWasMade
();

89 
	`fö«lizeCÆlWhíFulfûÀd
();

91  *
this
;

92 
	}
}

94 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkA˘uÆP¨amëî
(c⁄° 
MockNamedVÆue
& 
a˘uÆP¨amëî
)

96 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
a˘uÆP¨amëî
);

98 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

99 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
a˘uÆP¨amëî
, 
ÆlEx≥˘©i⁄s_
);

100 
	`ÁûTe°
(
Áûuª
);

104 
unfulfûÀdEx≥˘©i⁄s_
.
	`∑ømëîWasPas£d
(
a˘uÆP¨amëî
.
	`gëName
());

105 
	`fö«lizeCÆlWhíFulfûÀd
();

106 
	}
}

108 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

110 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

111 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

112 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

113  *
this
;

114 
	}
}

116 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

118 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

119 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

120 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

121  *
this
;

122 
	}
}

124 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

126 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

127 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

128 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

129  *
this
;

130 
	}
}

132 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

134 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

135 
a˘uÆP¨amëî
.
	`£tVÆue
(
vÆue
);

136 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

137  *
this
;

138 
	}
}

140 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

142 i‡(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
Ë=
NULL
) {

143 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
ty≥
);

144 
	`ÁûTe°
(
Áûuª
);

145  *
this
;

147 
MockNamedVÆue
 
	`a˘uÆP¨amëî
(
«me
);

148 
a˘uÆP¨amëî
.
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

149 
a˘uÆP¨amëî
.
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

150 
	`checkA˘uÆP¨amëî
(
a˘uÆP¨amëî
);

151  *
this
;

152 
	}
}

154 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$isFulfûÀd
() const

156  
°©e_
 =
CALL_SUCCEED
;

157 
	}
}

159 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasFaûed
() const

161  
°©e_
 =
CALL_FAILED
;

162 
	}
}

164 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkEx≥˘©i⁄s
()

166 i‡(
°©e_
 !
CALL_IN_PROGESS
) ;

168 i‡(! 
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
())

169 
	`FAIL
("Actual call is inÖrogress. CheckingÉxpectations. ButÇo unfulfilledÉxpectations. Cannot happen.")

171 
_fulfûÀdEx≥˘©i⁄
 = 
unfulfûÀdEx≥˘©i⁄s_
.
	`ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
();

172 i‡(
_fulfûÀdEx≥˘©i⁄
) {

173 
	`ˇŒHasSuc˚eded
();

177 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
()) {

178 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

179 
	`ÁûTe°
(
Áûuª
);

182 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
ÆlEx≥˘©i⁄s_
);

183 
	`ÁûTe°
(
Áûuª
);

185 
	}
}

187 c⁄° * 
	gMockA˘uÆFun˘i⁄CÆl
::
	$°rögFromSèã
(
A˘uÆCÆlSèã
 
°©e
)

189 
°©e
) {

190 
CALL_IN_PROGESS
:  "InÖrogress";

191 
CALL_FAILED
:  "Failed";

192 
CALL_SUCCEED
:  "Succeed";

196 
	}
}

198 
	gMockA˘uÆFun˘i⁄CÆl
::
	$checkSèãC⁄si°ícy
(
A˘uÆCÆlSèã
 
ﬁdSèã
, A˘uÆCÆlSèã 
√wSèã
)

200 i‡(
ﬁdSèã
 =
√wSèã
)

201 
	`FAIL
(
	`SåögFromF‹m©
("Sèã ch™gêtÿthêßmê°©e: %s.", 
	`°rögFromSèã
(
√wSèã
)).
	`asCh¨Såög
());

202 i‡(
ﬁdSèã
 =
CALL_FAILED
)

203 
	`FAIL
("State wasálready failed. Cannot change stateágain.");

204 
	}
}

206 
	gMockA˘uÆFun˘i⁄CÆl
::
	$£tSèã
(
A˘uÆCÆlSèã
 
°©e
)

208 
	`checkSèãC⁄si°ícy
(
°©e_
, 
°©e
);

209 
°©e_
 = 
°©e
;

210 
	}
}

212 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

214 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

215  *
this
;

216 
	}
}

218 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(const *)

220 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

221  *
this
;

222 
	}
}

224 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
()

226 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

227  *
this
;

228 
	}
}

230 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(*)

232 
	`FAIL
("andReturnValue cannot be called onán ActualFunctionCall. UseÑeturnValue insteadÅo getÅhe value.");

233  *
this
;

234 
	}
}

236 
MockNamedVÆue
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

238 
	`checkEx≥˘©i⁄s
();

239 i‡(
_fulfûÀdEx≥˘©i⁄
)

240  
_fulfûÀdEx≥˘©i⁄
->
	`ªtu∫VÆue
();

241  
	`MockNamedVÆue
("noÑeturn value");

242 
	}
}

244 
boﬁ
 
	gMockA˘uÆFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

246  ! 
	`ªtu∫VÆue
().
	`gëName
().
	`isEm±y
();

247 
	}
}

249 
	gMockFun˘i⁄CÆl
& 
	gMockA˘uÆFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

251 
unfulfûÀdEx≥˘©i⁄s_
.
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(
obje˘På
);

253 i‡(
unfulfûÀdEx≥˘©i⁄s_
.
	`isEm±y
()) {

254 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
	`gëTe°
(), 
	`gëName
(), 
obje˘På
, 
ÆlEx≥˘©i⁄s_
);

255 
	`ÁûTe°
(
Áûuª
);

256  *
this
;

259 
unfulfûÀdEx≥˘©i⁄s_
.
	`wasPas£dToObje˘
();

261 
	`fö«lizeCÆlWhíFulfûÀd
();

262  *
this
;

263 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

33  
∑ømëî
.
	`toSåög
();

34 
	}
}

36 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$MockEx≥˘edFun˘i⁄CÆl
()

37 : 
	`ign‹eOthîP¨amëîs_
(
Ál£
), 
	`∑ømëîsWîeIgn‹ed_
(Ál£), 
	`wasCÆlMade_
(
åue
), 
	`ªtu∫VÆue_
(""), 
	`obje˘På_
(
NULL
), 
	$wasPas£dToObje˘_
(
åue
)

39 
∑ømëîs_
 = 
√w
 
	`MockNamedVÆueLi°
();

40 
	}
}

42 
	gMockEx≥˘edFun˘i⁄CÆl
::~
	$MockEx≥˘edFun˘i⁄CÆl
()

44 
∑ømëîs_
->
	`˛ór
();

45 
dñëe
 
∑ømëîs_
;

46 
	}
}

48 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

50 
	`£tName
(
«me
);

51 
wasCÆlMade_
 = 
Ál£
;

52  *
this
;

53 
	}
}

55 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

57 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

58 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

59 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

60  *
this
;

61 
	}
}

63 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

65 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

66 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

67 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

68  *
this
;

69 
	}
}

71 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

73 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

74 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

75 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

76  *
this
;

77 
	}
}

79 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

81 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

82 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

83 
√wP¨amëî
->
	`£tVÆue
(
vÆue
);

84  *
this
;

85 
	}
}

87 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

89 
MockNamedVÆue
* 
√wP¨amëî
 = 
√w
 
	`MockEx≥˘edFun˘i⁄P¨amëî
(
«me
);

90 
∑ømëîs_
->
	`add
(
√wP¨amëî
);

91 
√wP¨amëî
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

92 
√wP¨amëî
->
	`£tCom∑øt‹
(
	`gëCom∑øt‹F‹Ty≥
(
ty≥
));

93  *
this
;

94 
	}
}

96 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîTy≥
(c⁄° 
Sim∂eSåög
& 
«me
)

98 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

99  (
p
Ë?Ö->
	`gëTy≥
() : "";

100 
	}
}

102 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëîWôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

104 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

105  
p
 !
NULL
;

106 
	}
}

108 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

110 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

111  (
p
Ë? *∞: 
	`MockNamedVÆue
("");

112 
	}
}

114 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eP¨amëîsFulfûÀd
()

116 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

117 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
())

118  
Ál£
;

119  
åue
;

120 
	}
}

122 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$¨eIgn‹edP¨amëîsFulfûÀd
()

124 i‡(
ign‹eOthîP¨amëîs_
)

125  
∑ømëîsWîeIgn‹ed_
;

126  
åue
;

127 
	}
}

129 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ign‹eOthîP¨amëîs
()

131 
ign‹eOthîP¨amëîs_
 = 
åue
;

132  *
this
;

133 
	}
}

135 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀd
()

137  
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
(Ë&& 
	`¨eIgn‹edP¨amëîsFulfûÀd
();

138 
	}
}

140 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$isFulfûÀdWôhoutIgn‹edP¨amëîs
()

142  
wasCÆlMade_
 && 
	`¨eP¨amëîsFulfûÀd
(Ë&& 
wasPas£dToObje˘_
;

143 
	}
}

146 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒWasMade
()

148 
wasCÆlMade_
 = 
åue
;

149 
	}
}

151 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîsWîeIgn‹ed
()

153 
∑ømëîsWîeIgn‹ed_
 = 
åue
;

154 
	}
}

157 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$wasPas£dToObje˘
()

159 
wasPas£dToObje˘_
 = 
åue
;

160 
	}
}

162 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ª£tEx≥˘©i⁄
()

164 
wasCÆlMade_
 = 
Ál£
;

165 
wasPas£dToObje˘_
 = (
obje˘På_
 =
NULL
);

166 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
())

167 
	`ôem
(
p
)->
	`£tFulfûÀd
(
Ál£
);

168 
	}
}

170 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
«me
)

172 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

173 i‡(
p
->
	`gëName
(Ë=
«me
)

174 
	`ôem
(
p
)->
	`£tFulfûÀd
(
åue
);

176 
	}
}

178 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$gëP¨amëîVÆueSåög
(c⁄° 
Sim∂eSåög
& 
«me
)

180 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
«me
);

181  (
p
Ë? 
	`SåögFrom
(*p) : "failed";

182 
	}
}

184 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

186 
MockNamedVÆue
 * 
p
 = 
∑ømëîs_
->
	`gëVÆueByName
(
∑ømëî
.
	`gëName
());

187  (
p
Ë?Ö->
	`equÆs
(
∑ømëî
Ë: 
ign‹eOthîP¨amëîs_
;

188 
	}
}

190 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ˇŒToSåög
()

192 
Sim∂eSåög
 
°r
;

193 i‡(
obje˘På_
)

194 
°r
 = 
	`SåögFromF‹m©
("(obje˘áddªss: %p)::", 
obje˘På_
);

196 
°r
 +
	`gëName
();

197 
°r
 += " -> ";

198 i‡(
∑ømëîs_
->
	`begö
(Ë=
NULL
) {

199 
°r
 +(
ign‹eOthîP¨amëîs_
) ? "allÖarameters ignored" : "noÖarameters";

200  
°r
;

203 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

204 
°r
 +
	`SåögFromF‹m©
("%†%s: <%s>", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCh¨Såög(), 
	`gëP¨amëîVÆueSåög
(p->getName()).asCharString());

205 i‡(
p
->
	`√xt
()Ë
°r
 += ", ";

207 i‡(
ign‹eOthîP¨amëîs_
)

208 
°r
 += ", otherÖarametersáre ignored";

209  
°r
;

210 
	}
}

212 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$missögP¨amëîsToSåög
()

214 
Sim∂eSåög
 
°r
;

215 
MockNamedVÆueLi°Node
* 
p
 = 
∑ømëîs_
->
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

216 i‡(! 
	`ôem
(
p
)->
	`isFulfûÀd
()) {

217 i‡(
°r
 != "") str += ", ";

218 
°r
 +
	`SåögFromF‹m©
("%†%s", 
p
->
	`gëTy≥
().
	`asCh¨Såög
(),Ö->
	`gëName
().asCharString());

221  
°r
;

222 
	}
}

224 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsTo
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

226  
fun˘i⁄Name
 =
	`gëName
();

227 
	}
}

229 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªœãsToObje˘
(*
obje˘På
) const

231  
obje˘På_
 =
obje˘På
;

232 
	}
}

234 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
* 
MockEx≥˘edFun˘i⁄CÆl
::
	$ôem
(
MockNamedVÆueLi°Node
* 
node
)

236  (
MockEx≥˘edFun˘i⁄P¨amëî
*Ë
node
->
	`ôem
();

237 
	}
}

239 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$MockEx≥˘edFun˘i⁄P¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
)

240 : 
	`MockNamedVÆue
(
«me
), 
	$fulfûÀd_
(
Ál£
)

242 
	}
}

244 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$£tFulfûÀd
(
boﬁ
 
b
)

246 
fulfûÀd_
 = 
b
;

247 
	}
}

249 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
MockEx≥˘edFun˘i⁄P¨amëî
::
	$isFulfûÀd
() const

251  
fulfûÀd_
;

252 
	}
}

254 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

256 
ªtu∫VÆue_
.
	`£tName
("returnValue");

257 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

258  *
this
;

259 
	}
}

261 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

263 
ªtu∫VÆue_
.
	`£tName
("returnValue");

264 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

265  *
this
;

266 
	}
}

268 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(
vÆue
)

270 
ªtu∫VÆue_
.
	`£tName
("returnValue");

271 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

272  *
this
;

273 
	}
}

275 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$™dRëu∫VÆue
(* 
vÆue
)

277 
ªtu∫VÆue_
.
	`£tName
("returnValue");

278 
ªtu∫VÆue_
.
	`£tVÆue
(
vÆue
);

279  *
this
;

280 
	}
}

282 
	gMockFun˘i⁄CÆl
& 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$⁄Obje˘
(* 
obje˘På
)

284 
wasPas£dToObje˘_
 = 
Ál£
;

285 
obje˘På_
 = 
obje˘På
;

286  *
this
;

287 
	}
}

289 
boﬁ
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$hasRëu∫VÆue
()

291  ! 
ªtu∫VÆue_
.
	`gëName
().
	`isEm±y
();

292 
	}
}

294 
MockNamedVÆue
 
	gMockEx≥˘edFun˘i⁄CÆl
::
	$ªtu∫VÆue
()

296  
ªtu∫VÆue_
;

297 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$MockEx≥˘edFun˘i⁄sLi°
(Ë: 
	$hód_
(
NULL
)

34 
	}
}

36 
MockEx≥˘edFun˘i⁄sLi°
::~
	$MockEx≥˘edFun˘i⁄sLi°
()

38 
hód_
) {

39 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

40 
dñëe
 
hód_
;

41 
hód_
 = 
√xt
;

43 
	}
}

45 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$size
() const

47 
cou¡
 = 0;

48 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

49 
cou¡
++;

50  
cou¡
;

51 
	}
}

53 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$isEm±y
() const

55  
	`size
() == 0;

56 
	}
}

59 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfEx≥˘©i⁄sF‹
(c⁄° 
Sim∂eSåög
& 
«me
) const

61 
cou¡
 = 0;

62 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

63 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
)Ë
cou¡
++;

64  
cou¡
;

66 
	}
}

68 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$amou¡OfUnfulfûÀdEx≥˘©i⁄s
() const

70 
cou¡
 = 0;

71 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

72 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()Ë
cou¡
++;

73  
cou¡
;

74 
	}
}

76 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasFulfûÀdEx≥˘©i⁄s
() const

78  (
	`size
(Ë- 
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
()) != 0;

79 
	}
}

81 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfuŒfûÀdEx≥˘©i⁄s
() const

83  
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
() != 0;

84 
	}
}

86 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasEx≥˘©i⁄WôhName
(c⁄° 
Sim∂eSåög
& 
«me
) const

88 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

89 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

90  
åue
;

91  
Ál£
;

92 
	}
}

94 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘edCÆl
(
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
)

96 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√wCÆl
 = 
√w
 
	`MockEx≥˘edFun˘i⁄sLi°Node
(
ˇŒ
);

98 i‡(
hód_
 =
NULL
)

99 
hód_
 = 
√wCÆl
;

101 
MockEx≥˘edFun˘i⁄sLi°Node
* 
œ°CÆl
 = 
hód_
;

102 
œ°CÆl
->
√xt_
)ÜastCall =ÜastCall->next_;

103 
œ°CÆl
->
√xt_
 = 
√wCÆl
;

105 
	}
}

107 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addUnfûfûÀdEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

109 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

110 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

111 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

112 
	}
}

114 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

116 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

117 i‡(
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

118 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

119 
	}
}

121 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$addEx≥˘©i⁄s
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
li°
)

123 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
li°
.
hód_
;Ö;Ö =Ö->
√xt_
)

124 
	`addEx≥˘edCÆl
(
p
->
ex≥˘edCÆl_
);

125 
	}
}

127 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

129 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

130 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsTo
(
«me
))

131 
p
->
ex≥˘edCÆl_
 = 
NULL
;

133 
	`¥u√Em±yNodeFromLi°
();

134 
	}
}

136 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
()

138 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

139 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
())

140 
p
->
ex≥˘edCÆl_
 = 
NULL
;

142 
	`¥u√Em±yNodeFromLi°
();

143 
	}
}

145 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
)

147 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

148 
	`⁄lyKìpEx≥˘©i⁄sRñ©edTo
(
«me
);

149 
	}
}

151 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(c⁄° 
Sim∂eSåög
& 
«me
)

153 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

154 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëîWôhName
(
«me
))

155 
p
->
ex≥˘edCÆl_
 = 
NULL
;

156 
	`¥u√Em±yNodeFromLi°
();

157 
	}
}

159 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

161 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

162 i‡(! 
p
->
ex≥˘edCÆl_
->
	`hasP¨amëî
(
∑ømëî
))

163 
p
->
ex≥˘edCÆl_
 = 
NULL
;

164 
	`¥u√Em±yNodeFromLi°
();

165 
	}
}

167 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

169 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

170 i‡(! 
p
->
ex≥˘edCÆl_
->
	`ªœãsToObje˘
(
obje˘På
))

171 
p
->
ex≥˘edCÆl_
 = 
NULL
;

172 
	`¥u√Em±yNodeFromLi°
();

173 
	}
}

176 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(c⁄° 
MockNamedVÆue
& 
∑ømëî
)

178 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

179 
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

180 
	}
}

182 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$⁄lyKìpUnfulfûÀdEx≥˘©i⁄sOnObje˘
(* 
obje˘På
)

184 
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄s
();

185 
	`⁄lyKìpEx≥˘©i⁄sOnObje˘
(
obje˘På
);

186 
	}
}

188 
MockEx≥˘edFun˘i⁄CÆl
* 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄
()

190 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

191 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

192 
MockEx≥˘edFun˘i⁄CÆl
* 
fulfûÀdCÆl
 = 
p
->
ex≥˘edCÆl_
;

193 
p
->
ex≥˘edCÆl_
 = 
NULL
;

194 
	`¥u√Em±yNodeFromLi°
();

195  
fulfûÀdCÆl
;

198  
NULL
;

199 
	}
}

201 
MockEx≥˘edFun˘i⁄CÆl
* 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ªmoveO√FulfûÀdEx≥˘©i⁄WôhIgn‹edP¨amëîs
()

203 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

204 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀdWôhoutIgn‹edP¨amëîs
()) {

205 
MockEx≥˘edFun˘i⁄CÆl
* 
fulfûÀdCÆl
 = 
p
->
ex≥˘edCÆl_
;

206 
p
->
ex≥˘edCÆl_
->
	`∑ømëîsWîeIgn‹ed
();

207 
p
->
ex≥˘edCÆl_
 = 
NULL
;

208 
	`¥u√Em±yNodeFromLi°
();

209  
fulfûÀdCÆl
;

212  
NULL
;

213 
	}
}

216 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$¥u√Em±yNodeFromLi°
()

218 
MockEx≥˘edFun˘i⁄sLi°Node
* 
cuºít
 = 
hód_
;

219 
MockEx≥˘edFun˘i⁄sLi°Node
* 
¥evious
 = 
NULL
;

220 
MockEx≥˘edFun˘i⁄sLi°Node
* 
toBeDñëed
 = 
NULL
;

222 
cuºít
) {

223 i‡(
cuºít
->
ex≥˘edCÆl_
 =
NULL
) {

224 
toBeDñëed
 = 
cuºít
;

225 i‡(
¥evious
 =
NULL
)

226 
hód_
 = 
cuºít
 = cuºít->
√xt_
;

228 
cuºít
 = 
¥evious
->
√xt_
 = current->next_;

229 
dñëe
 
toBeDñëed
;

232 
¥evious
 = 
cuºít
;

233 
cuºít
 = cuºít->
√xt_
;

236 
	}
}

238 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
()

240 
hód_
) {

241 
MockEx≥˘edFun˘i⁄sLi°Node
* 
√xt
 = 
hód_
->
√xt_
;

242 
dñëe
 
hód_
->
ex≥˘edCÆl_
;

243 
dñëe
 
hód_
;

244 
hód_
 = 
√xt
;

246 
	}
}

248 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ª£tEx≥˘©i⁄s
()

250 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

251 
p
->
ex≥˘edCÆl_
->
	`ª£tEx≥˘©i⁄
();

252 
	}
}

254 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$ˇŒWasMade
()

256 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

257 
p
->
ex≥˘edCÆl_
->
	`ˇŒWasMade
();

258 
	}
}

260 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$wasPas£dToObje˘
()

262 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

263 
p
->
ex≥˘edCÆl_
->
	`wasPas£dToObje˘
();

264 
	}
}

267 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$∑ømëîWasPas£d
(c⁄° 
Sim∂eSåög
& 
∑ømëîName
)

269 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

270 
p
->
ex≥˘edCÆl_
->
	`∑ømëîWasPas£d
(
∑ømëîName
);

271 
	}
}

273 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
, 
boﬁ
 
wasFulfûÀd
) const

275 
Sim∂eSåög
 
°r
;

276 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

277 i‡(
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
(Ë=
wasFulfûÀd
) {

278 i‡(
°r
 != "") str += "\n";

279 
°r
 +
löePªfix
;

280 
°r
 +
p
->
ex≥˘edCÆl_
->
	`ˇŒToSåög
();

283 i‡(
°r
 == "") {

284 
°r
 +
löePªfix
;

285 
°r
 += "<none>";

287  
°r
;

289 
	}
}

291 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$unfulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

293  
	`fun˘i⁄sToSåög
(
löePªfix
, 
Ál£
);

294 
	}
}

296 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$fulfûÀdFun˘i⁄sToSåög
(c⁄° 
Sim∂eSåög
& 
löePªfix
) const

298  
	`fun˘i⁄sToSåög
(
löePªfix
, 
åue
);

299 
	}
}

301 
Sim∂eSåög
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$missögP¨amëîsToSåög
() const

303 
Sim∂eSåög
 
°r
;

304 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
) {

305 i‡(! 
p
->
ex≥˘edCÆl_
->
	`isFulfûÀd
()) {

306 i‡(
°r
 != "") str += "\n";

307 
°r
 +
p
->
ex≥˘edCÆl_
->
	`missögP¨amëîsToSåög
();

311 i‡(
°r
 == "")

312 
°r
 = "<none>";

313  
°r
;

314 
	}
}

316 
boﬁ
 
	gMockEx≥˘edFun˘i⁄sLi°
::
	$hasUnfulfûÀdEx≥˘©i⁄sBeˇu£OfMissögP¨amëîs
() const

318 
MockEx≥˘edFun˘i⁄sLi°Node
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

319 i‡(! 
p
->
ex≥˘edCÆl_
->
	`¨eP¨amëîsFulfûÀd
())

320  
åue
;

321  
Ál£
;

322 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

33 
	gMockFaûuªRï‹ãr
::
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

35 
	`gëTe°ToFaû
()->
	`gëTe°Resu…
()->
	`addFaûuª
(
Áûuª
);

36 i‡(
¸ashOnFaûuª_
)

37 
	`UT_CRASH
();

39 
	`gëTe°ToFaû
()->
	`exôCuºítTe°
();

40 
	}
}

42 
Uã°
* 
	gMockFaûuªRï‹ãr
::
	$gëTe°ToFaû
()

44  
Uã°
::
	`gëCuºít
();

45 
	}
}

47 
	gMockFaûuª
::
	$MockFaûuª
(
Uã°
* 
ã°
Ë: 
	`Te°Faûuª
(test, "Test failed with MockFailure withoutánÉrror! Something went seriously wrong.")

49 
	}
}

51 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹y
(c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

53 
mesßge_
 += "\tEXPECTED callsÅhat did NOT happen:\n";

54 
mesßge_
 +
ex≥˘©i⁄s
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

55 
mesßge_
 += "\n\tACTUAL callsÅhat did happen:\n";

56 
mesßge_
 +
ex≥˘©i⁄s
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

57 
	}
}

59 
	gMockFaûuª
::
	$addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
)

61 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

62 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
«me
, 
ex≥˘©i⁄s
);

64 
mesßge_
 += "\tEXPECTED callsÅhat DID NOT happenÑelatedÅo function: ";

65 
mesßge_
 +
«me
;

66 
mesßge_
 += "\n";

68 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`unfulfûÀdFun˘i⁄sToSåög
("\t\t");

70 
mesßge_
 += "\n\tACTUAL callsÅhat DID happenÑelatedÅo function: ";

71 
mesßge_
 +
«me
;

72 
mesßge_
 += "\n";

74 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`fulfûÀdFun˘i⁄sToSåög
("\t\t");

75 
	}
}

78 
	gMockEx≥˘edCÆlsDid¡H≠≥nFaûuª
::
	$MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

80 
mesßge_
 = "Mock Failure: Expected call didÇot happen.\n";

81 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

82 
	}
}

84 
	gMockU√x≥˘edCÆlH≠≥√dFaûuª
::
	$MockU√x≥˘edCÆlH≠≥√dFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
«me
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

86 
amou¡OfEx≥˘©i⁄s
 = 
ex≥˘©i⁄s
.
	`amou¡OfEx≥˘©i⁄sF‹
(
«me
);

87 i‡(
amou¡OfEx≥˘©i⁄s
)

88 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (%dthËˇŒÅÿfun˘i⁄: ", 
amou¡OfEx≥˘©i⁄s
+1);

90 
mesßge_
 = "Mock Failure: Unexpected callÅo function: ";

91 
mesßge_
 +
«me
;

92 
mesßge_
 += "\n";

93 
	`addEx≥˘©i⁄sAndCÆlHi°‹y
(
ex≥˘©i⁄s
);

94 
	}
}

96 
	gMockU√x≥˘edP¨amëîFaûuª
::
	$MockU√x≥˘edP¨amëîFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockNamedVÆue
& 
∑ømëî
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

98 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
;

99 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

100 
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
(
∑ømëî
.
	`gëName
());

102 i‡(
ex≥˘©i⁄sF‹Fun˘i⁄WôhP¨amëîName
.
	`isEm±y
()) {

103 
mesßge_
 = "Mock Failure: UnexpectedÖarameterÇameÅo function \"";

104 
mesßge_
 +
fun˘i⁄Name
;

105 
mesßge_
 += "\": ";

106 
mesßge_
 +
∑ømëî
.
	`gëName
();

109 
mesßge_
 = "Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"";

110 
mesßge_
 +
∑ømëî
.
	`gëName
();

111 
mesßge_
 += "\"Åo function \"";

112 
mesßge_
 +
fun˘i⁄Name
;

113 
mesßge_
 += "\": <";

114 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

115 
mesßge_
 += ">";

118 
mesßge_
 += "\n";

119 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

121 
mesßge_
 += "\n\tACTUAL unexpectedÖarameterÖassedÅo function: ";

122 
mesßge_
 +
fun˘i⁄Name
;

123 
mesßge_
 += "\n";

125 
mesßge_
 += "\t\t";

126 
mesßge_
 +
∑ømëî
.
	`gëTy≥
();

127 
mesßge_
 += " ";

128 
mesßge_
 +
∑ømëî
.
	`gëName
();

129 
mesßge_
 += ": <";

130 
mesßge_
 +
	`SåögFrom
(
∑ømëî
);

131 
mesßge_
 += ">";

132 
	}
}

134 
	gMockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
::
	$MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

136 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sF‹Fun˘i⁄
;

137 
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`addEx≥˘©i⁄sRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

139 
mesßge_
 = "Mock Failure: ExpectedÖarameter for function \"";

140 
mesßge_
 +
fun˘i⁄Name
;

141 
mesßge_
 += "\" didÇot happen.\n";

143 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

145 
mesßge_
 += "\n\tMISSINGÖarametersÅhat didn't happen:\n";

146 
mesßge_
 += "\t\t";

147 
mesßge_
 +
ex≥˘©i⁄sF‹Fun˘i⁄
.
	`missögP¨amëîsToSåög
();

148 
	}
}

150 
	gMockNoWayToCom∑ªCu°omTy≥Faûuª
::
	$MockNoWayToCom∑ªCu°omTy≥Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
ty≥Name
Ë: 
	$MockFaûuª
(
ã°
)

152 
mesßge_
 = 
	`SåögFromF‹m©
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <%s>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
ty≥Name
.
	`asCh¨Såög
());

153 
	}
}

155 
	gMockU√x≥˘edObje˘Faûuª
::
	$MockU√x≥˘edObje˘Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, * 
a˘uÆ
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

157 
mesßge_
 = 
	`SåögFromF‹m©
 ("MockFailure: Function called oná unexpected object: %s\n"

158 "\tA˘uÆ obje˘ f‹ cÆ»ha†addªss: <%p>\n", 
fun˘i⁄Name
.
	`asCh¨Såög
(),
a˘uÆ
);

159 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

160 
	}
}

162 
	gMockEx≥˘edObje˘Did¡H≠≥nFaûuª
::
	$MockEx≥˘edObje˘Did¡H≠≥nFaûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
, c⁄° 
MockEx≥˘edFun˘i⁄sLi°
& 
ex≥˘©i⁄s
Ë: 
	$MockFaûuª
(
ã°
)

164 
mesßge_
 = 
	`SåögFromF‹m©
("Mock Faûuª: Ex≥˘ed cÆ»⁄ obje˘ f‹ fun˘i⁄ \"%s\" buàô didÇŸ h≠≥n.\n", 
fun˘i⁄Name
.
	`asCh¨Såög
());

165 
	`addEx≥˘©i⁄sAndCÆlHi°‹yRñ©edTo
(
fun˘i⁄Name
, 
ex≥˘©i⁄s
);

166 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockNamedVÆue.h
"

32 
	gMockFun˘i⁄CÆl
::
	$MockFun˘i⁄CÆl
(Ë: 
	$com∑øt‹Rïosô‹y_
(
NULL
)

34 
	}
}

36 
MockFun˘i⁄CÆl
::~
	$MockFun˘i⁄CÆl
()

38 
	}
}

40 
MockFun˘i⁄CÆl
::
	$£tCom∑øt‹Rïosô‹y
(
MockNamedVÆueCom∑øt‹Rïosô‹y
* 
ªposô‹y
)

42 
com∑øt‹Rïosô‹y_
 = 
ªposô‹y
;

43 
	}
}

45 
	gMockFun˘i⁄CÆl
::
	$£tName
(c⁄° 
Sim∂eSåög
& 
«me
)

47 
fun˘i⁄Name_
 = 
«me
;

48 
	}
}

50 
Sim∂eSåög
 
	gMockFun˘i⁄CÆl
::
	$gëName
() const

52  
fun˘i⁄Name_
;

53 
	}
}

55 
MockNamedVÆueCom∑øt‹
* 
	gMockFun˘i⁄CÆl
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
ty≥
) const

57 i‡(
com∑øt‹Rïosô‹y_
)

58  
com∑øt‹Rïosô‹y_
->
	`gëCom∑øt‹F‹Ty≥
(
ty≥
);

59  
NULL
;

60 
	}
}

62 
	sMockFun˘i⁄CÆlComposôeNode


64 
MockFun˘i⁄CÆlComposôeNode
(
MockFun˘i⁄CÆl
& 
fun˘i⁄CÆl
, MockFun˘i⁄CÆlComposôeNode* 
√xt
Ë: 
√xt_
“ext), 
ˇŒ_
(functionCall){}

66 
MockFun˘i⁄CÆlComposôeNode
* 
	m√xt_
;

67 
	mMockFun˘i⁄CÆl
& 
	mˇŒ_
;

70 
	gMockFun˘i⁄CÆlComposôe
::
	$MockFun˘i⁄CÆlComposôe
(Ë: 
	$hód_
(
NULL
)

72 
	}
}

74 
MockFun˘i⁄CÆlComposôe
::~
	$MockFun˘i⁄CÆlComposôe
()

77 
	}
}

79 
MockFun˘i⁄CÆlComposôe
::
	$add
(
MockFun˘i⁄CÆl
& 
ˇŒ
)

81 
hód_
 = 
√w
 
	`MockFun˘i⁄CÆlComposôeNode
(
ˇŒ
, head_);

82 
	}
}

84 
	gMockFun˘i⁄CÆlComposôe
::
	$˛ór
()

86 
hód_
) {

87 
MockFun˘i⁄CÆlComposôeNode
* 
√xt
 = 
hód_
->
√xt_
;

88 
dñëe
 
hód_
;

89 
hód_
 = 
√xt
;

91 
	}
}

93 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

95 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

96 
node
->
ˇŒ_
.
	`wôhName
(
«me
);

97  *
this
;

98 
	}
}

100 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

102 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

103 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

104  *
this
;

105 
	}
}

107 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

109 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

110 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

111  *
this
;

113 
	}
}

115 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

117 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

118 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

119  *
this
;

120 
	}
}

122 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

124 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

125 
node
->
ˇŒ_
.
	`wôhP¨amëî
(
«me
, 
vÆue
);

126  *
this
;

127 
	}
}

129 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

131 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

132 
node
->
ˇŒ_
.
	`wôhP¨amëîOfTy≥
(
ty≥Name
, 
«me
, 
vÆue
);

133  *
this
;

135 
	}
}

137 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$ign‹eOthîP¨amëîs
()

139 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

140 
node
->
ˇŒ_
.
	`ign‹eOthîP¨amëîs
();

141  *
this
;

142 
	}
}

144 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

146 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

147 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

148  *
this
;

149 
	}
}

151 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
MockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(
vÆue
)

153 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

154 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

155  *
this
;

156 
	}
}

158 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(c⁄° * 
vÆue
)

160 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

161 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

162  *
this
;

163 
	}
}

165 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$™dRëu∫VÆue
(* 
vÆue
)

167 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

168 
node
->
ˇŒ_
.
	`™dRëu∫VÆue
(
vÆue
);

169  *
this
;

170 
	}
}

172 
boﬁ
 
	gMockFun˘i⁄CÆlComposôe
::
	$hasRëu∫VÆue
()

174  
hód_
->
ˇŒ_
.
	`hasRëu∫VÆue
();

175 
	}
}

177 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlComposôe
::
	$ªtu∫VÆue
()

179  
hód_
->
ˇŒ_
.
	`ªtu∫VÆue
();

180 
	}
}

182 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlComposôe
::
	$⁄Obje˘
(* 
obje˘
)

184 
MockFun˘i⁄CÆlComposôeNode
* 
node
 = 
hód_
;Çodê!
NULL
;Çodênode->
√xt_
)

185 
node
->
ˇŒ_
.
	`⁄Obje˘
(
obje˘
);

186  *
this
;

187 
	}
}

190 
	gMockFun˘i⁄CÆlTø˚
::
	$MockFun˘i⁄CÆlTø˚
()

192 
	}
}

194 
MockFun˘i⁄CÆlTø˚
::~
	$MockFun˘i⁄CÆlTø˚
()

196 
	}
}

198 
MockFun˘i⁄CÆl
& 
MockFun˘i⁄CÆlTø˚
::
	$wôhName
(c⁄° 
Sim∂eSåög
& 
«me
)

200 
åa˚Buf„r_
 += "\nFunctionÇame: ";

201 
åa˚Buf„r_
 +
«me
;

202  *
this
;

203 
	}
}

205 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

207 
åa˚Buf„r_
 += " ";

208 
åa˚Buf„r_
 +
«me
;

209 
åa˚Buf„r_
 += ":";

210 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

211  *
this
;

212 
	}
}

214 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

216 
åa˚Buf„r_
 += " ";

217 
åa˚Buf„r_
 +
«me
;

218 
åa˚Buf„r_
 += ":";

219 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

220  *
this
;

221 
	}
}

223 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

225 
åa˚Buf„r_
 += " ";

226 
åa˚Buf„r_
 +
«me
;

227 
åa˚Buf„r_
 += ":";

228 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

229  *
this
;

230 
	}
}

232 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëî
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

234 
åa˚Buf„r_
 += " ";

235 
åa˚Buf„r_
 +
«me
;

236 
åa˚Buf„r_
 += ":";

237 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

238  *
this
;

239 
	}
}

241 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$wôhP¨amëîOfTy≥
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, c⁄° Sim∂eSåög& 
«me
, * 
vÆue
)

243 
åa˚Buf„r_
 += " ";

244 
åa˚Buf„r_
 +
ty≥Name
;

245 
åa˚Buf„r_
 += " ";

246 
åa˚Buf„r_
 +
«me
;

247 
åa˚Buf„r_
 += ":";

248 
åa˚Buf„r_
 +
	`SåögFrom
(
vÆue
);

249  *
this
;

250 
	}
}

252 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$ign‹eOthîP¨amëîs
()

254  *
this
;

255 
	}
}

257 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

259  *
this
;

260 
	}
}

262 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
()

264  *
this
;

265 
	}
}

267 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(const *)

269  *
this
;

270 
	}
}

272 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$™dRëu∫VÆue
(*)

274  *
this
;

275 
	}
}

277 
boﬁ
 
	gMockFun˘i⁄CÆlTø˚
::
	$hasRëu∫VÆue
()

279  
Ál£
;

280 
	}
}

282 
MockNamedVÆue
 
	gMockFun˘i⁄CÆlTø˚
::
	$ªtu∫VÆue
()

284  
	`MockNamedVÆue
("");

285 
	}
}

287 
	gMockFun˘i⁄CÆl
& 
	gMockFun˘i⁄CÆlTø˚
::
	$⁄Obje˘
(* 
obje˘På
)

289 
åa˚Buf„r_
 +
	`SåögFrom
(
obje˘På
);

290  *
this
;

291 
	}
}

293 
	gMockFun˘i⁄CÆlTø˚
::
	$˛ór
()

295 
åa˚Buf„r_
 = "";

296 
	}
}

298 c⁄° * 
	gMockFun˘i⁄CÆlTø˚
::
	$gëTø˚Ouçut
()

300  
åa˚Buf„r_
.
	`asCh¨Såög
();

301 
	}
}

303 
	gMockFun˘i⁄CÆlTø˚
& MockFun˘i⁄CÆlTø˚::
	$ö°™˚
()

305 
MockFun˘i⁄CÆlTø˚
 
ˇŒ
;

306  
ˇŒ
;

307 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockNamedValue.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockNamedVÆue.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gMockNamedVÆue
::
	$MockNamedVÆue
(c⁄° 
Sim∂eSåög
& 
«me
Ë: 
	`«me_
“ame), 
	`ty≥_
("öt"), 
	$com∑øt‹_
(
NULL
)

35 
vÆue_
.
ötVÆue_
 = 0;

36 
	}
}

38 
	gMockNamedVÆue
::~
	$MockNamedVÆue
()

40 
	}
}

42 
MockNamedVÆue
::
	$£tVÆue
(
vÆue
)

44 
ty≥_
 = "int";

45 
vÆue_
.
ötVÆue_
 = 
vÆue
;

46 
	}
}

48 
	gMockNamedVÆue
::
	$£tVÆue
(
vÆue
)

50 
ty≥_
 = "double";

51 
vÆue_
.
doubÀVÆue_
 = 
vÆue
;

52 
	}
}

54 
	gMockNamedVÆue
::
	$£tVÆue
(* 
vÆue
)

56 
ty≥_
 = "void*";

57 
vÆue_
.
poöãrVÆue_
 = 
vÆue
;

58 
	}
}

60 
	gMockNamedVÆue
::
	$£tVÆue
(c⁄° * 
vÆue
)

62 
ty≥_
 = "char*";

63 
vÆue_
.
°rögVÆue_
 = 
vÆue
;

64 
	}
}

66 
	gMockNamedVÆue
::
	$£tObje˘Poöãr
(c⁄° 
Sim∂eSåög
& 
ty≥
, * 
obje˘På
)

68 
ty≥_
 = 
ty≥
;

69 
vÆue_
.
obje˘PoöãrVÆue_
 = 
obje˘På
;

70 
	}
}

72 
	gMockNamedVÆue
::
	$£tName
(c⁄° * 
«me
)

74 
«me_
 = 
«me
;

75 
	}
}

77 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëName
() const

79  
«me_
;

80 
	}
}

82 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$gëTy≥
() const

84  
ty≥_
;

85 
	}
}

87 
	gMockNamedVÆue
::
	$gëI¡VÆue
() const

89 
	`STRCMP_EQUAL
("öt", 
ty≥_
.
	`asCh¨Såög
());

90  
vÆue_
.
ötVÆue_
;

91 
	}
}

93 
	gMockNamedVÆue
::
	$gëDoubÀVÆue
() const

95 
	`STRCMP_EQUAL
("doubÀ", 
ty≥_
.
	`asCh¨Såög
());

96  
vÆue_
.
doubÀVÆue_
;

97 
	}
}

99 c⁄° * 
	gMockNamedVÆue
::
	$gëSåögVÆue
() const

101 
	`STRCMP_EQUAL
("ch¨*", 
ty≥_
.
	`asCh¨Såög
());

102  
vÆue_
.
°rögVÆue_
;

103 
	}
}

105 * 
	gMockNamedVÆue
::
	$gëPoöãrVÆue
() const

107 
	`STRCMP_EQUAL
("void*", 
ty≥_
.
	`asCh¨Såög
());

108  
vÆue_
.
poöãrVÆue_
;

109 
	}
}

111 * 
	gMockNamedVÆue
::
	$gëObje˘Poöãr
() const

113  
vÆue_
.
obje˘PoöãrVÆue_
;

114 
	}
}

116 
	gMockNamedVÆue
::
	$£tCom∑øt‹
(
MockNamedVÆueCom∑øt‹
* 
com∑øt‹
)

118 
com∑øt‹_
 = 
com∑øt‹
;

119 
	}
}

121 
boﬁ
 
	gMockNamedVÆue
::
	$equÆs
(c⁄° 
MockNamedVÆue
& 
p
) const

123 i‡(
ty≥_
 !
p
.ty≥_Ë 
Ál£
;

125 i‡(
ty≥_
 == "int")

126  
vÆue_
.
ötVÆue_
 =
p
.value_.intValue_;

127 i‡(
ty≥_
 == "char*")

128  
	`Sim∂eSåög
(
vÆue_
.
°rögVÆue_
Ë=Sim∂eSåög(
p
.value_.stringValue_);

129 i‡(
ty≥_
 == "void*")

130  
vÆue_
.
poöãrVÆue_
 =
p
.value_.pointerValue_;

131 i‡(
ty≥_
 == "double")

132  (
	`doubÀs_equÆ
(
vÆue_
.
doubÀVÆue_
, 
p
.value_.doubleValue_, 0.005));

134 i‡(
com∑øt‹_
)

135  
com∑øt‹_
->
	`isEquÆ
(
vÆue_
.
obje˘PoöãrVÆue_
, 
p
.value_.objectPointerValue_);

137  
Ál£
;

138 
	}
}

140 
Sim∂eSåög
 
	gMockNamedVÆue
::
	$toSåög
() const

142 i‡(
ty≥_
 == "int")

143  
	`SåögFrom
(
vÆue_
.
ötVÆue_
);

144 i‡(
ty≥_
 == "char*")

145  
vÆue_
.
°rögVÆue_
;

146 i‡(
ty≥_
 == "void*")

147  
	`SåögFrom
(
vÆue_
.
poöãrVÆue_
);

148 i‡(
ty≥_
 == "double")

149  
	`SåögFrom
(
vÆue_
.
doubÀVÆue_
);

151 i‡(
com∑øt‹_
)

152  
com∑øt‹_
->
	`vÆueToSåög
(
vÆue_
.
obje˘PoöãrVÆue_
);

154  
	`SåögFromF‹m©
("Nÿcom∑øt‹ found f‹Åy≥: \"%s\"", 
ty≥_
.
	`asCh¨Såög
());

156 
	}
}

158 
	gMockNamedVÆueLi°Node
::
	$£tNext
(
MockNamedVÆueLi°Node
* 
node
)

160 
√xt_
 = 
node
;

161 
	}
}

163 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°Node
::
	$√xt
()

165  
√xt_
;

166 
	}
}

168 
MockNamedVÆue
* 
	gMockNamedVÆueLi°Node
::
	$ôem
()

170  
d©a_
;

171 
	}
}

173 
	gMockNamedVÆueLi°Node
::
	$de°roy
()

175 
dñëe
 
d©a_
;

176 
	}
}

178 
	gMockNamedVÆueLi°Node
::
	$MockNamedVÆueLi°Node
(
MockNamedVÆue
* 
√wVÆue
)

179 : 
	`d©a_
(
√wVÆue
), 
	$√xt_
(
NULL
)

181 
	}
}

183 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëName
() const

185  
d©a_
->
	`gëName
();

186 
	}
}

188 
Sim∂eSåög
 
	gMockNamedVÆueLi°Node
::
	$gëTy≥
() const

190  
d©a_
->
	`gëTy≥
();

191 
	}
}

193 
	gMockNamedVÆueLi°
::
	$MockNamedVÆueLi°
(Ë: 
	$hód_
(
NULL
)

195 
	}
}

197 
MockNamedVÆueLi°
::
	$˛ór
()

199 
hód_
) {

200 
MockNamedVÆueLi°Node
* 
n
 = 
hód_
->
	`√xt
();

201 
hód_
->
	`de°roy
();

202 
dñëe
 
hód_
;

203 
hód_
 = 
n
;

205 
	}
}

207 
	gMockNamedVÆueLi°
::
	$add
(
MockNamedVÆue
* 
√wVÆue
)

209 
MockNamedVÆueLi°Node
* 
√wNode
 = 
√w
 
	`MockNamedVÆueLi°Node
(
√wVÆue
);

210 i‡(
hód_
 =
NULL
)

211 
hód_
 = 
√wNode
;

213 
MockNamedVÆueLi°Node
* 
œ°Node
 = 
hód_
;

214 
œ°Node
->
	`√xt
())ÜastNode =ÜastNode->next();

215 
œ°Node
->
	`£tNext
(
√wNode
);

217 
	}
}

219 
MockNamedVÆue
* 
	gMockNamedVÆueLi°
::
	$gëVÆueByName
(c⁄° 
Sim∂eSåög
& 
«me
)

221 
MockNamedVÆueLi°Node
 * 
p
 = 
hód_
;Ö;Ö =Ö->
	`√xt
())

222 i‡(
p
->
	`gëName
(Ë=
«me
)

223  
p
->
	`ôem
();

224  
NULL
;

225 
	}
}

227 
MockNamedVÆueLi°Node
* 
	gMockNamedVÆueLi°
::
	$begö
()

229  
hód_
;

230 
	}
}

232 
	sMockNamedVÆueCom∑øt‹Rïosô‹yNode


234 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
, MockNamedVÆueCom∑øt‹Rïosô‹yNode* 
√xt
)

235 : 
«me_
(
«me
), 
com∑øt‹_
(
com∑øt‹
), 
√xt_
(
√xt
) {};

236 
Sim∂eSåög
 
	m«me_
;

237 
	mMockNamedVÆueCom∑øt‹
& 
	mcom∑øt‹_
;

238 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
	m√xt_
;

241 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$MockNamedVÆueCom∑øt‹Rïosô‹y
(Ë: 
	$hód_
(
NULL
)

244 
	}
}

246 
MockNamedVÆueCom∑øt‹Rïosô‹y
::~
	$MockNamedVÆueCom∑øt‹Rïosô‹y
()

248 
	`˛ór
();

249 
	}
}

251 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$˛ór
()

253 
hód_
) {

254 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
√xt
 = 
hód_
->
√xt_
;

255 
dñëe
 
hód_
;

256 
hód_
 = 
√xt
;

258 
	}
}

260 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

262 
hód_
 = 
√w
 
	`MockNamedVÆueCom∑øt‹Rïosô‹yNode
(
«me
, 
com∑øt‹
, head_);

263 
	}
}

265 
MockNamedVÆueCom∑øt‹
* 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$gëCom∑øt‹F‹Ty≥
(c⁄° 
Sim∂eSåög
& 
«me
)

267 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
hód_
;Ö;Ö =Ö->
√xt_
)

268 i‡(
p
->
«me_
 =
«me
Ë &p->
com∑øt‹_
;

269  
NULL
;;

270 
	}
}

272 
	gMockNamedVÆueCom∑øt‹Rïosô‹y
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

274 
MockNamedVÆueCom∑øt‹Rïosô‹yNode
* 
p
 = 
ªposô‹y
.
hód_
;Ö;Ö =Ö->
√xt_
)

275 
	`ö°ÆlCom∑øt‹
(
p
->
«me_
,Ö->
com∑øt‹_
);

276 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

34 
	#MOCK_SUPPORT_SCOPE_PREFIX
 "!!!$$$MockögSuµ‹tSc›e$$$!!!"

	)

36 
MockSuµ‹t
 
	gglobÆ_mock
;

38 
	gMockSuµ‹t
& 
	$mock
(c⁄° 
Sim∂eSåög
& 
mockName
)

40 i‡(
mockName
 != "")

41  *
globÆ_mock
.
	`gëMockSuµ‹tSc›e
(
mockName
);

42  
globÆ_mock
;

43 
	}
}

45 
	gMockSuµ‹t
::
	$MockSuµ‹t
()

46 : 
	`ªp‹ãr_
(&
deÁu…Rï‹ãr_
), 
	`ign‹eOthîCÆls_
(
Ál£
), 
	`íabÀd_
(
åue
), 
	`œ°A˘uÆFun˘i⁄CÆl_
(
NULL
), 
	$åacög_
(
Ál£
)

48 
	}
}

50 
	gMockSuµ‹t
::~
	$MockSuµ‹t
()

52 
	}
}

54 
MockSuµ‹t
::
	$¸ashOnFaûuª
()

56 
ªp‹ãr_
->
	`¸ashOnFaûuª
();

57 
	}
}

59 
	gMockSuµ‹t
::
	$£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãr
* 
ªp‹ãr
)

61 
ªp‹ãr_
 = (
ªp‹ãr
 !
NULL
Ë?Ñï‹ã∏: &
deÁu…Rï‹ãr_
;

63 i‡(
œ°A˘uÆFun˘i⁄CÆl_
)

64 
œ°A˘uÆFun˘i⁄CÆl_
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

66 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

67 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

68 
	}
}

70 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
ty≥Name
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

72 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

74 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

75 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹
(
ty≥Name
, 
com∑øt‹
);

76 
	}
}

78 
	gMockSuµ‹t
::
	$ö°ÆlCom∑øt‹s
(c⁄° 
MockNamedVÆueCom∑øt‹Rïosô‹y
& 
ªposô‹y
)

80 
com∑øt‹Rïosô‹y_
.
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

82 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

83 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ö°ÆlCom∑øt‹s
(
ªposô‹y
);

84 
	}
}

86 
	gMockSuµ‹t
::
	$ªmoveAŒCom∑øt‹s
()

88 
com∑øt‹Rïosô‹y_
.
	`˛ór
();

89 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

90 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ªmoveAŒCom∑øt‹s
();

91 
	}
}

93 
	gMockSuµ‹t
::
	$˛ór
()

95 
dñëe
 
œ°A˘uÆFun˘i⁄CÆl_
;

96 
œ°A˘uÆFun˘i⁄CÆl_
 = 
NULL
;

98 
åacög_
 = 
Ál£
;

99 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`˛ór
();

101 
ex≥˘©i⁄s_
.
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

102 
composôeCÆls_
.
	`˛ór
();

103 
ign‹eOthîCÆls_
 = 
Ál£
;

104 
íabÀd_
 = 
åue
;

106 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
()) {

107 
MockSuµ‹t
* 
suµ‹t
 = 
	`gëMockSuµ‹t
(
p
);

108 i‡(
suµ‹t
) {

109 
suµ‹t
->
	`˛ór
();

110 
dñëe
 
suµ‹t
;

113 
d©a_
.
	`˛ór
();

114 
	}
}

116 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘O√CÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

118 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

120 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
 = 
√w
 MockExpectedFunctionCall;

121 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

122 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

123 
ex≥˘©i⁄s_
.
	`addEx≥˘edCÆl
(
ˇŒ
);

124  *
ˇŒ
;

125 
	}
}

127 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$ex≥˘NCÆls
(
amou¡
, c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

129 
composôeCÆls_
.
	`˛ór
();

131 
i
 = 0; i < 
amou¡
; i++)

132 
composôeCÆls_
.
	`add
(
	`ex≥˘O√CÆl
(
fun˘i⁄Name
));

133  
composôeCÆls_
;

134 
	}
}

137 
MockA˘uÆFun˘i⁄CÆl
* 
	gMockSuµ‹t
::
	$¸óãA˘uÆFun˘i⁄CÆl
()

139 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ë
dñëe
ÜastActualFunctionCall_;

141 
œ°A˘uÆFun˘i⁄CÆl_
 = 
√w
 
	`MockA˘uÆFun˘i⁄CÆl
(
ªp‹ãr_
, 
ex≥˘©i⁄s_
);

142  
œ°A˘uÆFun˘i⁄CÆl_
;

143 
	}
}

145 
	gMockFun˘i⁄CÆl
& 
	gMockSuµ‹t
::
	$a˘uÆCÆl
(c⁄° 
Sim∂eSåög
& 
fun˘i⁄Name
)

147 i‡(!
íabÀd_
Ë 
MockIgn‹edCÆl
::
	`ö°™˚
();

148 i‡(
åacög_
Ë 
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`wôhName
(
fun˘i⁄Name
);

150 i‡(
œ°A˘uÆFun˘i⁄CÆl_
Ëœ°A˘uÆFun˘i⁄CÆl_->
	`checkEx≥˘©i⁄s
();

152 i‡(!
ex≥˘©i⁄s_
.
	`hasEx≥˘©i⁄WôhName
(
fun˘i⁄Name
Ë&& 
ign‹eOthîCÆls_
) {

153  
MockIgn‹edCÆl
::
	`ö°™˚
();

156 
MockA˘uÆFun˘i⁄CÆl
* 
ˇŒ
 = 
	`¸óãA˘uÆFun˘i⁄CÆl
();

157 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
com∑øt‹Rïosô‹y_
);

158 
ˇŒ
->
	`wôhName
(
fun˘i⁄Name
);

159  *
ˇŒ
;

160 
	}
}

162 
	gMockSuµ‹t
::
	$ign‹eOthîCÆls
()

164 
ign‹eOthîCÆls_
 = 
åue
;

166 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

167 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`ign‹eOthîCÆls
();

168 
	}
}

170 
	gMockSuµ‹t
::
	$dißbÀ
()

172 
íabÀd_
 = 
Ál£
;

174 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

175 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`dißbÀ
();

176 
	}
}

178 
	gMockSuµ‹t
::
	$íabÀ
()

180 
íabÀd_
 = 
åue
;

182 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

183 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`íabÀ
();

184 
	}
}

186 
	gMockSuµ‹t
::
	$åacög
(
boﬁ
 
íabÀd
)

188 
åacög_
 = 
íabÀd
;

190 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

191 i‡(
	`gëMockSuµ‹t
(
p
)ËgëMockSuµ‹t’)->
	`åacög
(
íabÀd
);

192 
	}
}

194 c⁄° * 
	gMockSuµ‹t
::
	$gëTø˚Ouçut
()

196  
MockFun˘i⁄CÆlTø˚
::
	`ö°™˚
().
	`gëTø˚Ouçut
();

197 
	}
}

199 
boﬁ
 
	gMockSuµ‹t
::
	$ex≥˘edCÆlsLe·
()

201 
ˇŒsLe·
 = 
ex≥˘©i⁄s_
.
	`hasUnfuŒfûÀdEx≥˘©i⁄s
();

203 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

204 i‡(
	`gëMockSuµ‹t
(
p
)Ë
ˇŒsLe·
 +gëMockSuµ‹t’)->
	`ex≥˘edCÆlsLe·
();

206  
ˇŒsLe·
;

207 
	}
}

209 
boﬁ
 
	gMockSuµ‹t
::
	$wasLa°CÆlFulfûÀd
()

211 i‡(
œ°A˘uÆFun˘i⁄CÆl_
 && !œ°A˘uÆFun˘i⁄CÆl_->
	`isFulfûÀd
())

212  
Ál£
;

214 
MockNamedVÆueLi°Node
* 
p
 = 
d©a_
.
	`begö
();Ö;Ö =Ö->
	`√xt
())

215 i‡(
	`gëMockSuµ‹t
(
p
Ë&& !gëMockSuµ‹t’)->
	`wasLa°CÆlFulfûÀd
())

216  
Ál£
;

218  
åue
;

219 
	}
}

221 
	gMockSuµ‹t
::
	$ÁûTe°WôhF‹U√x≥˘edCÆls
()

223 
MockEx≥˘edFun˘i⁄sLi°
 
ex≥˘©i⁄sLi°
;

224 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
ex≥˘©i⁄s_
);

226 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

227 if(
	`gëMockSuµ‹t
(
p
))

228 
ex≥˘©i⁄sLi°
.
	`addEx≥˘©i⁄s
(
	`gëMockSuµ‹t
(
p
)->
ex≥˘©i⁄s_
);

230 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
ªp‹ãr_
->
	`gëTe°ToFaû
(), 
ex≥˘©i⁄sLi°
);

231 
	`˛ór
();

232 
ªp‹ãr_
->
	`ÁûTe°
(
Áûuª
);

233 
	}
}

235 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄sOfLa°CÆl
()

237 if(
œ°A˘uÆFun˘i⁄CÆl_
)

238 
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

240 
MockNamedVÆueLi°Node
 *
p
 = 
d©a_
.
	`begö
();p;∞p->
	`√xt
())

241 if(
	`gëMockSuµ‹t
(
p
Ë&& gëMockSuµ‹t’)->
œ°A˘uÆFun˘i⁄CÆl_
)

242 
	`gëMockSuµ‹t
(
p
)->
œ°A˘uÆFun˘i⁄CÆl_
->
	`checkEx≥˘©i⁄s
();

243 
	}
}

245 
	gMockSuµ‹t
::
	$checkEx≥˘©i⁄s
()

247 i‡(!
	`wasLa°CÆlFulfûÀd
())

248 
	`checkEx≥˘©i⁄sOfLa°CÆl
();

249 i‡(
	`ex≥˘edCÆlsLe·
())

250 
	`ÁûTe°WôhF‹U√x≥˘edCÆls
();

251 
	}
}

253 
boﬁ
 
	gMockSuµ‹t
::
	$hasD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

255  
d©a_
.
	`gëVÆueByName
(
«me
Ë!
NULL
;

256 
	}
}

258 
MockNamedVÆue
* 
	gMockSuµ‹t
::
	$¸óãAndSt‹eD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

260 
MockNamedVÆue
* 
√wD©a
 = 
√w
 
	`MockNamedVÆue
(
«me
);

261 
d©a_
.
	`add
(
√wD©a
);

262  
√wD©a
;

263 
	}
}

265 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

267 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

268 
√wD©a
->
	`£tVÆue
(
vÆue
);

269 
	}
}

271 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° * 
vÆue
)

273 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

274 
√wD©a
->
	`£tVÆue
(
vÆue
);

275 
	}
}

277 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, 
vÆue
)

279 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

280 
√wD©a
->
	`£tVÆue
(
vÆue
);

281 
	}
}

283 
	gMockSuµ‹t
::
	$£tD©a
(c⁄° 
Sim∂eSåög
& 
«me
, * 
vÆue
)

285 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

286 
√wD©a
->
	`£tVÆue
(
vÆue
);

287 
	}
}

289 
	gMockSuµ‹t
::
	$£tD©aObje˘
(c⁄° 
Sim∂eSåög
& 
«me
, c⁄° Sim∂eSåög& 
ty≥
, * 
vÆue
)

291 
MockNamedVÆue
* 
√wD©a
 = 
	`¸óãAndSt‹eD©a
(
«me
);

292 
√wD©a
->
	`£tObje˘Poöãr
(
ty≥
, 
vÆue
);

293 
	}
}

295 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$gëD©a
(c⁄° 
Sim∂eSåög
& 
«me
)

297 
MockNamedVÆue
* 
vÆue
 = 
d©a_
.
	`gëVÆueByName
(
«me
);

298 i‡(
vÆue
 =
NULL
)

299  
	`MockNamedVÆue
("");

300  *
vÆue
;

301 
	}
}

303 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹tSc›e
(c⁄° 
Sim∂eSåög
& 
«me
)

305 
Sim∂eSåög
 
mockögSuµ‹tName
 = 
MOCK_SUPPORT_SCOPE_PREFIX
;

306 
mockögSuµ‹tName
 +
«me
;

308 i‡(
	`hasD©a
(
mockögSuµ‹tName
)) {

309 
	`STRCMP_EQUAL
("MockSuµ‹t", 
	`gëD©a
(
mockögSuµ‹tName
).
	`gëTy≥
().
	`asCh¨Såög
());

310  (
MockSuµ‹t
*Ë
	`gëD©a
(
mockögSuµ‹tName
).
	`gëObje˘Poöãr
();

313 
MockSuµ‹t
 *
√wMock
 = 
√w
 MockSupport;

315 
√wMock
->
	`£tMockFaûuªRï‹ãr
(
ªp‹ãr_
);

316 i‡(
ign‹eOthîCÆls_
Ë
√wMock
->
	`ign‹eOthîCÆls
();

317 i‡(!
íabÀd_
Ë
√wMock
->
	`dißbÀ
();

318 
√wMock
->
	`åacög
(
åacög_
);

319 
√wMock
->
	`ö°ÆlCom∑øt‹s
(
com∑øt‹Rïosô‹y_
);

321 
	`£tD©aObje˘
(
mockögSuµ‹tName
, "MockSuµ‹t", 
√wMock
);

322  
√wMock
;

323 
	}
}

325 
MockSuµ‹t
* 
	gMockSuµ‹t
::
	$gëMockSuµ‹t
(
MockNamedVÆueLi°Node
* 
node
)

327 i‡(
node
->
	`gëTy≥
(Ë="MockSuµ‹t" &&Çode->
	`gëName
().
	`c⁄èös
(
MOCK_SUPPORT_SCOPE_PREFIX
))

328  (
MockSuµ‹t
*Ë
node
->
	`ôem
()->
	`gëObje˘Poöãr
();

329  
NULL
;

330 
	}
}

332 
MockNamedVÆue
 
	gMockSuµ‹t
::
	$ªtu∫VÆue
()

334 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`ªtu∫VÆue
();

335  
	`MockNamedVÆue
("");

336 
	}
}

338 
	gMockSuµ‹t
::
	$ötRëu∫VÆue
()

340  
	`ªtu∫VÆue
().
	`gëI¡VÆue
();

341 
	}
}

343 c⁄° * 
	gMockSuµ‹t
::
	$°rögRëu∫VÆue
()

345  
	`ªtu∫VÆue
().
	`gëSåögVÆue
();

346 
	}
}

348 
	gMockSuµ‹t
::
	$doubÀRëu∫VÆue
()

350  
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
();

351 
	}
}

353 * 
	gMockSuµ‹t
::
	$poöãrRëu∫VÆue
()

355  
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
();

356 
	}
}

358 
boﬁ
 
	gMockSuµ‹t
::
	$hasRëu∫VÆue
()

360 i‡(
œ°A˘uÆFun˘i⁄CÆl_
ËÜa°A˘uÆFun˘i⁄CÆl_->
	`hasRëu∫VÆue
();

361  
Ál£
;

362 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupportPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

32 ˛as†
	cMockSuµ‹tPlugöRï‹ãr
 : 
public
 
MockFaûuªRï‹ãr


34 
Uã°
& 
ã°_
;

35 
	mTe°Resu…
& 
	mªsu…_
;

36 
	mpublic
:

37 
	$MockSuµ‹tPlugöRï‹ãr
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

38 : 
	`ã°_
(
ã°
), 
	$ªsu…_
(
ªsu…
)

42 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

44 
ªsu…_
.
	`addFaûuª
(
Áûuª
);

45 
	}
}

47 
vútuÆ
 
Uã°
* 
	$gëTe°ToFaû
()

49  &
ã°_
;

50 
	}
}

53 
	gMockSuµ‹tPlugö
::
	$MockSuµ‹tPlugö
(c⁄° 
Sim∂eSåög
& 
«me
)

54 : 
	$Te°Plugö
(
«me
)

56 
	}
}

58 
MockSuµ‹tPlugö
::~
	$MockSuµ‹tPlugö
()

60 
ªposô‹y_
.
	`˛ór
();

61 
	}
}

63 
	gMockSuµ‹tPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

65 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªposô‹y_
);

66 
	}
}

68 
	gMockSuµ‹tPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

70 
MockSuµ‹tPlugöRï‹ãr
 
	`ªp‹ãr
(
ã°
, 
ªsu…
);

71 
	`mock
().
	`£tMockFaûuªRï‹ãr
(&
ªp‹ãr
);

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	`mock
().
	`˛ór
();

74 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

75 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

76 
	}
}

78 
	gMockSuµ‹tPlugö
::
	$ö°ÆlCom∑øt‹
(c⁄° 
Sim∂eSåög
& 
«me
, 
MockNamedVÆueCom∑øt‹
& 
com∑øt‹
)

80 
ªposô‹y_
.
	`ö°ÆlCom∑øt‹
(
«me
, 
com∑øt‹
);

81 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupport_c.cpp

28 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

32 
	~<°rög.h
>

34 
MockSuµ‹t
* 
cuºítMockSuµ‹t
 = 
NULL
;

35 
MockFun˘i⁄CÆl
* 
	gcuºítCÆl
 = 
NULL
;

37 ˛as†
	cMockCFun˘i⁄Com∑øt‹Node
 : 
public
 
MockNamedVÆueCom∑øt‹


39 
public
:

40 
	$MockCFun˘i⁄Com∑øt‹Node
(
MockCFun˘i⁄Com∑øt‹Node
* 
√xt
, 
MockTy≥EquÆFun˘i⁄_c
 
equÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
toSåög
)

41 : 
	`√xt_
(
√xt
), 
	`equÆ_
(
equÆ
), 
	$toSåög_
(
toSåög
) {}

42 
vútuÆ
 ~
	$MockCFun˘i⁄Com∑øt‹Node
(Ë{
	}
};

44 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

46  (
boﬁ
Ë
	`equÆ_
(
obje˘1
, 
obje˘2
);

47 
	}
}

48 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

50  
	`Sim∂eSåög
(
	`toSåög_
(
obje˘
));

51 
	}
}

53 
MockCFun˘i⁄Com∑øt‹Node
* 
	g√xt_
;

54 
MockTy≥EquÆFun˘i⁄_c
 
	gequÆ_
;

55 
MockTy≥VÆueToSåögFun˘i⁄_c
 
	gtoSåög_
;

58 
MockCFun˘i⁄Com∑øt‹Node
* 
	gcom∑øt‹Li°_
 = 
NULL
;

62 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
);

63 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
);

64 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
);

65 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
);

66 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

67 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
);

68 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
);

69 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
);

71 
checkEx≥˘©i⁄s_c
();

72 
ex≥˘edCÆlsLe·_c
();

73 
˛ór_c
();

75 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨amëîs_c
(c⁄° * 
«me
, 
vÆue
);

76 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
);

77 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
);

78 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
);

79 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
);

80 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
);

81 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
);

82 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
);

83 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
);

84 
MockVÆue_c
 
ªtu∫VÆue_c
();

87 
ö°ÆlCom∑øt‹_c
 (c⁄° * 
ty≥Name
, 
MockTy≥EquÆFun˘i⁄_c
 
isEquÆ
, 
MockTy≥VÆueToSåögFun˘i⁄_c
 
vÆueToSåög
)

89 
com∑øt‹Li°_
 = 
√w
 
MockCFun˘i⁄Com∑øt‹Node
(com∑øt‹Li°_, 
isEquÆ
, 
vÆueToSåög
);

90 
cuºítMockSuµ‹t
->
ö°ÆlCom∑øt‹
(
ty≥Name
, *
com∑øt‹Li°_
);

93 
ªmoveAŒCom∑øt‹s_c
()

95 
com∑øt‹Li°_
) {

96 
MockCFun˘i⁄Com∑øt‹Node
 *
√xt
 = 
com∑øt‹Li°_
->
√xt_
;

97 
dñëe
 
com∑øt‹Li°_
;

98 
com∑øt‹Li°_
 = 
√xt
;

100 
cuºítMockSuµ‹t
->
ªmoveAŒCom∑øt‹s
();

103 
MockFun˘i⁄CÆl_c
 
gFun˘i⁄CÆl
 = {

104 
wôhI¡P¨amëîs_c
,

105 
wôhDoubÀP¨amëîs_c
,

106 
wôhSåögP¨amëîs_c
,

107 
wôhPoöãrP¨amëîs_c
,

108 
wôhP¨amëîOfTy≥_c
,

109 
™dRëu∫I¡VÆue_c
,

110 
™dRëu∫DoubÀVÆue_c
,

111 
™dRëu∫SåögVÆue_c
,

112 
™dRëu∫PoöãrVÆue_c
,

113 
ªtu∫VÆue_c


116 
MockSuµ‹t_c
 
gMockSuµ‹t
 = {

117 
ex≥˘O√CÆl_c
,

118 
a˘uÆCÆl_c
,

119 
ªtu∫VÆue_c
,

120 
£tI¡D©a_c
,

121 
£tDoubÀD©a_c
,

122 
£tSåögD©a_c
,

123 
£tPoöãrD©a_c
,

124 
£tD©aObje˘_c
,

125 
gëD©a_c
,

126 
checkEx≥˘©i⁄s_c
,

127 
ex≥˘edCÆlsLe·_c
,

128 
˛ór_c
,

129 
ö°ÆlCom∑øt‹_c
,

130 
ªmoveAŒCom∑øt‹s_c


133 
MockFun˘i⁄CÆl_c
* 
wôhI¡P¨amëîs_c
(c⁄° * 
«me
, 
vÆue
)

135 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

136  &
gFun˘i⁄CÆl
;

139 
MockFun˘i⁄CÆl_c
* 
wôhDoubÀP¨amëîs_c
(c⁄° * 
«me
, 
vÆue
)

141 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

142  &
gFun˘i⁄CÆl
;

145 
MockFun˘i⁄CÆl_c
* 
wôhSåögP¨amëîs_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

147 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

148  &
gFun˘i⁄CÆl
;

151 
MockFun˘i⁄CÆl_c
* 
wôhPoöãrP¨amëîs_c
(c⁄° * 
«me
, * 
vÆue
)

153 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëî
(
«me
, 
vÆue
);

154  &
gFun˘i⁄CÆl
;

157 
MockFun˘i⁄CÆl_c
* 
wôhP¨amëîOfTy≥_c
(c⁄° * 
ty≥
, c⁄° * 
«me
, * 
vÆue
)

159 
cuºítCÆl
 = &cuºítCÆl->
wôhP¨amëîOfTy≥
(
ty≥
, 
«me
, 
vÆue
);

160  &
gFun˘i⁄CÆl
;

163 
MockFun˘i⁄CÆl_c
* 
™dRëu∫I¡VÆue_c
(
vÆue
)

165 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

166  &
gFun˘i⁄CÆl
;

169 
MockFun˘i⁄CÆl_c
* 
™dRëu∫DoubÀVÆue_c
(
vÆue
)

171 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

172  &
gFun˘i⁄CÆl
;

175 
MockFun˘i⁄CÆl_c
* 
™dRëu∫SåögVÆue_c
(c⁄° * 
vÆue
)

177 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

178  &
gFun˘i⁄CÆl
;

181 
MockFun˘i⁄CÆl_c
* 
™dRëu∫PoöãrVÆue_c
(* 
vÆue
)

183 
cuºítCÆl
 = &cuºítCÆl->
™dRëu∫VÆue
(
vÆue
);

184  &
gFun˘i⁄CÆl
;

187 
MockVÆue_c
 
gëMockVÆueCFromNamedVÆue
(c⁄° 
MockNamedVÆue
& 
«medVÆue
)

189 
MockVÆue_c
 
ªtu∫VÆue
;

190 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "int") == 0) {

191 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_INTEGER
;

192 
ªtu∫VÆue
.
vÆue
.
ötVÆue
 = 
«medVÆue
.
gëI¡VÆue
();

194 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "double") == 0) {

195 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_DOUBLE
;

196 
ªtu∫VÆue
.
vÆue
.
doubÀVÆue
 = 
«medVÆue
.
gëDoubÀVÆue
();

198 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "char*") == 0) {

199 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_STRING
;

200 
ªtu∫VÆue
.
vÆue
.
°rögVÆue
 = 
«medVÆue
.
gëSåögVÆue
();

202 i‡(
°rcmp
(
«medVÆue
.
gëTy≥
().
asCh¨Såög
(), "void*") == 0) {

203 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_POINTER
;

204 
ªtu∫VÆue
.
vÆue
.
poöãrVÆue
 = 
«medVÆue
.
gëPoöãrVÆue
();

207 
ªtu∫VÆue
.
ty≥
 = 
MOCKVALUETYPE_OBJECT
;

208 
ªtu∫VÆue
.
vÆue
.
obje˘VÆue
 = 
«medVÆue
.
gëObje˘Poöãr
();

210  
ªtu∫VÆue
;

213 
MockVÆue_c
 
ªtu∫VÆue_c
()

215  
gëMockVÆueCFromNamedVÆue
(
cuºítCÆl
->
ªtu∫VÆue
());

218 
MockFun˘i⁄CÆl_c
* 
ex≥˘O√CÆl_c
(c⁄° * 
«me
)

220 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
ex≥˘O√CÆl
(
«me
);

221  &
gFun˘i⁄CÆl
;

224 
MockFun˘i⁄CÆl_c
* 
a˘uÆCÆl_c
(c⁄° * 
«me
)

226 
cuºítCÆl
 = &
cuºítMockSuµ‹t
->
a˘uÆCÆl
(
«me
);

227  &
gFun˘i⁄CÆl
;

230 
£tI¡D©a_c
(c⁄° * 
«me
, 
vÆue
)

232  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

235 
£tDoubÀD©a_c
(c⁄° * 
«me
, 
vÆue
)

237  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

240 
£tSåögD©a_c
(c⁄° * 
«me
, c⁄° * 
vÆue
)

242  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

245 
£tPoöãrD©a_c
(c⁄° * 
«me
, * 
vÆue
)

247  
cuºítMockSuµ‹t
->
£tD©a
(
«me
, 
vÆue
);

250 
£tD©aObje˘_c
(c⁄° * 
«me
, c⁄° * 
ty≥
, * 
vÆue
)

252  
cuºítMockSuµ‹t
->
£tD©aObje˘
(
«me
, 
ty≥
, 
vÆue
);

255 
MockVÆue_c
 
gëD©a_c
(c⁄° * 
«me
)

257  
gëMockVÆueCFromNamedVÆue
(
cuºítMockSuµ‹t
->
gëD©a
(
«me
));

260 
checkEx≥˘©i⁄s_c
()

262 
cuºítMockSuµ‹t
->
checkEx≥˘©i⁄s
();

265 
ex≥˘edCÆlsLe·_c
()

267  
cuºítMockSuµ‹t
->
ex≥˘edCÆlsLe·
();

270 
˛ór_c
()

272 
cuºítMockSuµ‹t
->
˛ór
();

275 
MockSuµ‹t_c
* 
mock_c
()

277 
cuºítMockSuµ‹t
 = &
mock
();

278  &
gMockSuµ‹t
;

281 
MockSuµ‹t_c
* 
mock_sc›e_c
(c⁄° * 
sc›e
)

283 
cuºítMockSuµ‹t
 = &
mock
(
sc›e
);

284  &
gMockSuµ‹t
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\OrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/OrdîedTe°.h
"

32 
OrdîedTe°
* 
	gOrdîedTe°
::
_‹dîedTe°sHód
 = 0;

34 
	gOrdîedTe°
::
	$OrdîedTe°
() :

35 
	$_√xtOrdîedTe°
(0)

37 
	}
}

39 
OrdîedTe°
::~
	$OrdîedTe°
()

41 
	}
}

43 
OrdîedTe°
::
	$gëLevñ
()

45  
_Àvñ
;

46 
	}
}

48 
	gOrdîedTe°
::
	$£tLevñ
(
Àvñ
)

50 
_Àvñ
 = 
Àvñ
;

51 
	}
}

53 
	gOrdîedTe°
::
	$£tOrdîedTe°Hód
(
OrdîedTe°
* 
ã°
)

55 
_‹dîedTe°sHód
 = 
ã°
;

56 
	}
}

58 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëOrdîedTe°Hód
()

60  
_‹dîedTe°sHód
;

61 
	}
}

63 
boﬁ
 
	gOrdîedTe°
::
	$fú°OrdîedTe°
()

65  (
	`gëOrdîedTe°Hód
() == 0);

66 
	}
}

68 
OrdîedTe°
* 
	gOrdîedTe°
::
	$addOrdîedTe°
(
OrdîedTe°
* 
ã°
)

70 
Uã°
::
	`addTe°
(
ã°
);

71 
_√xtOrdîedTe°
 = 
ã°
;

72  
this
;

73 
	}
}

75 
	gOrdîedTe°
::
	$addOrdîedTe°ToHód
(
OrdîedTe°
* 
ã°
)

77 
Te°Regi°ry
 *
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

79 i‡(
ªg
->
	`gëFú°Te°
()->
	`isNuŒ
(Ë|| 
	`gëOrdîedTe°Hód
()

80 =
ªg
->
	`gëFú°Te°
()Ëªg->
	`addTe°
(
ã°
);

81 
ªg
->
	`gëTe°WôhNext
(
	`gëOrdîedTe°Hód
())->
	`addTe°
(
ã°
);

83 
ã°
->
_√xtOrdîedTe°
 = 
	`gëOrdîedTe°Hód
();

84 
	`£tOrdîedTe°Hód
(
ã°
);

85 
	}
}

87 
OrdîedTe°
* 
	gOrdîedTe°
::
	$gëNextOrdîedTe°
()

89  
_√xtOrdîedTe°
;

90 
	}
}

92 
	gOrdîedTe°In°ÆÀr
::
	$OrdîedTe°In°ÆÀr
(
OrdîedTe°
* 
ã°
,

93 c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

94 
löeNumbî
, 
Àvñ
)

96 
ã°
->
	`£tTe°Name
(
ã°Name
);

97 
ã°
->
	`£tGroupName
(
groupName
);

98 
ã°
->
	`£tFûeName
(
fûeName
);

99 
ã°
->
	`£tLöeNumbî
(
löeNumbî
);

100 
ã°
->
	`£tLevñ
(
Àvñ
);

102 i‡(
OrdîedTe°
::
	`fú°OrdîedTe°
()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(
ã°
);

103 
	`addOrdîedTe°InOrdî
(
ã°
);

104 
	}
}

106 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdî
(
OrdîedTe°
* 
ã°
)

108 i‡(
ã°
->
	`gëLevñ
(Ë< 
OrdîedTe°
::
	`gëOrdîedTe°Hód
()->gëLevñ()ËOrdîedTe°::
	`addOrdîedTe°ToHód
(

109 
ã°
);

110 
	`addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(
ã°
);

111 
	}
}

113 
	gOrdîedTe°In°ÆÀr
::
	$addOrdîedTe°InOrdîNŸAtHódPosôi⁄
(

114 
OrdîedTe°
* 
ã°
)

116 
OrdîedTe°
* 
cuºít
 = OrdîedTe°::
	`gëOrdîedTe°Hód
();

117 
cuºít
->
	`gëNextOrdîedTe°
()) {

119 i‡(
cuºít
->
	`gëNextOrdîedTe°
()->
	`gëLevñ
(Ë> 
ã°
->getLevel()) {

120 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

121 
cuºít
->
	`addOrdîedTe°
(
ã°
);

124 
cuºít
 = cuºít->
	`gëNextOrdîedTe°
();

126 
ã°
->
	`addOrdîedTe°
(
cuºít
->
	`gëNextOrdîedTe°
());

127 
cuºít
->
	`addOrdîedTe°
(
ã°
);

128 
	}
}

130 
	gOrdîedTe°In°ÆÀr
::~
	$OrdîedTe°In°ÆÀr
()

132 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineArguments.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gComm™dLöeArgumíts
::
	$Comm™dLöeArgumíts
(
ac
, c⁄° ** 
av
,

33 
Te°Plugö
* 
∂ugö
) :

34 
	`ac
(
ac
), 
	`av
(
av
), 
	`∂ugö_
(
∂ugö
), 
	`vîbo£_
(
Ál£
), 
	`ª≥©_
(1), 
	`groupFûãr_
(

35 ""), 
	`«meFûãr_
(""), 
	$ouçutTy≥_
(
OUTPUT_ECLIPSE
)

37 
	}
}

39 
	gComm™dLöeArgumíts
::~
	$Comm™dLöeArgumíts
()

41 
	}
}

43 
boﬁ
 
Comm™dLöeArgumíts
::
	$∑r£
()

45 
boﬁ
 
c‹ª˘P¨amëîs
 = 
åue
;

46 
i
 = 1; i < 
ac
; i++) {

47 
Sim∂eSåög
 
¨gumít
 = 
av
[
i
];

48 i‡(
¨gumít
 ="-v"Ë
vîbo£_
 = 
åue
;

49 i‡(
¨gumít
.
	`°¨tsWôh
("-r")Ë
	`SëRïótCou¡
(
ac
, 
av
, 
i
);

50 i‡(
¨gumít
.
	`°¨tsWôh
("-g")Ë
	`SëGroupFûãr
(
ac
, 
av
, 
i
);

51 i‡(
¨gumít
.
	`°¨tsWôh
("-n")Ë
	`SëNameFûãr
(
ac
, 
av
, 
i
);

52 i‡(
¨gumít
.
	`°¨tsWôh
("-o")Ë
c‹ª˘P¨amëîs
 = 
	`SëOuçutTy≥
(

53 
ac
, 
av
, 
i
);

54 i‡(
¨gumít
.
	`°¨tsWôh
("-p")Ë
c‹ª˘P¨amëîs


55 
∂ugö_
->
	`∑r£Argumíts
(
ac
, 
av
, 
i
);

56 
c‹ª˘P¨amëîs
 = 
Ál£
;

58 i‡(
c‹ª˘P¨amëîs
 =
Ál£
) {

59  
Ál£
;

62  
åue
;

63 
	}
}

65 c⁄° * 
	gComm™dLöeArgumíts
::
	$ußge
() const

68 
	}
}

70 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isVîbo£
() const

72  
vîbo£_
;

73 
	}
}

75 
	gComm™dLöeArgumíts
::
	$gëRïótCou¡
() const

77  
ª≥©_
;

78 
	}
}

80 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëGroupFûãr
() const

82  
groupFûãr_
;

83 
	}
}

85 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëNameFûãr
() const

87  
«meFûãr_
;

88 
	}
}

90 
	gComm™dLöeArgumíts
::
	$SëRïótCou¡
(
ac
, c⁄° ** 
av
, & 
i
)

92 
ª≥©_
 = 0;

94 
Sim∂eSåög
 
	`ª≥©P¨amëî
(
av
[
i
]);

95 i‡(
ª≥©P¨amëî
.
	`size
(Ë> 2Ë
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
] + 2);

96 i‡(
i
 + 1 < 
ac
) {

97 
ª≥©_
 = 
	`Pœtf‹mS≥cificAtoI
(
av
[
i
 + 1]);

98 i‡(
ª≥©_
 !0Ë
i
++;

101 i‡(0 =
ª≥©_
)Ñepeat_ = 2;

103 
	}
}

105 
Sim∂eSåög
 
	gComm™dLöeArgumíts
::
	$gëP¨amëîFõld
(
ac
, c⁄° ** 
av
,

106 & 
i
)

108 
Sim∂eSåög
 
	`∑ømëî
(
av
[
i
]);

109 i‡(
∑ømëî
.
	`size
(Ë> 2Ë 
av
[
i
] + 2;

110 i‡(
i
 + 1 < 
ac
Ë 
av
[++i];

112 
	}
}

114 
	gComm™dLöeArgumíts
::
	$SëGroupFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

116 
Sim∂eSåög
 
gf
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

117 
groupFûãr_
 = 
gf
;

118 
	}
}

120 
	gComm™dLöeArgumíts
::
	$SëNameFûãr
(
ac
, c⁄° ** 
av
, & 
i
)

122 
«meFûãr_
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

123 
	}
}

125 
boﬁ
 
	gComm™dLöeArgumíts
::
	$SëOuçutTy≥
(
ac
, c⁄° ** 
av
, & 
i
)

127 
Sim∂eSåög
 
ouçutTy≥
 = 
	`gëP¨amëîFõld
(
ac
, 
av
, 
i
);

128 i‡(
ouçutTy≥
.
	`size
(Ë=0Ë 
Ál£
;

130 i‡(
ouçutTy≥
 == "normal" || outputType == "eclipse") {

131 
ouçutTy≥_
 = 
OUTPUT_ECLIPSE
;

132  
åue
;

134 i‡(
ouçutTy≥
 == "junit") {

135 
ouçutTy≥_
 = 
OUTPUT_JUNIT
;

136  
åue
;

138  
Ál£
;

139 
	}
}

141 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isE˛ù£Ouçut
() const

143  
ouçutTy≥_
 =
OUTPUT_ECLIPSE
;

144 
	}
}

146 
boﬁ
 
	gComm™dLöeArgumíts
::
	$isJUnôOuçut
() const

148  
ouçutTy≥_
 =
OUTPUT_JUNIT
;

149 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineTestRunner.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/JUnôTe°Ouçut.h
"

32 
	~"CµUTe°/Te°Regi°ry.h
"

34 
	gComm™dLöeTe°Ru¬î
::
	$Comm™dLöeTe°Ru¬î
(
ac
, c⁄° ** 
av
,

35 
Te°Ouçut
* 
ouçut
) :

36 
	`¨gc
(
ac
), 
	`¨gv
(
av
), 
	`ouçut_
(
ouçut
), 
	$jUnôOuçut
(
√w
 
JUnôTe°Ouçut
)

38 
	}
}

40 
	gComm™dLöeTe°Ru¬î
::~
	$Comm™dLöeTe°Ru¬î
()

42 
dñëe
 
¨gumíts
;

43 
dñëe
 
jUnôOuçut
;

44 
	}
}

46 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, ** 
av
)

48  
	`RunAŒTe°s
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
));

49 
	}
}

51 
	gComm™dLöeTe°Ru¬î
::
	$RunAŒTe°s
(
ac
, c⁄° ** 
av
)

53 
ªsu…
 = 0;

54 
C⁄sﬁeTe°Ouçut
 
ouçut
;

56 
Mem‹yLókW¨nögPlugö
 
	`memLókW¨n
(
DEF_PLUGIN_MEM_LEAK
);

58 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
memLókW¨n
);

61 
Comm™dLöeTe°Ru¬î
 
	`ru¬î
(
ac
, 
av
, &
ouçut
);

62 
ªsu…
 = 
ru¬î
.
	`runAŒTe°sMaö
();

65 i‡(
ªsu…
 == 0) {

66 
ouçut
 << 
memLókW¨n
.
	`FöÆRï‹t
(0);

68  
ªsu…
;

69 
	}
}

71 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°sMaö
()

73 
ã°Resu…
 = 0;

75 
SëPoöãrPlugö
 
	`pPlugö
(
DEF_PLUGIN_SET_POINTER
);

76 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
pPlugö
);

78 i‡(!
	`∑r£Argumíts
(
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`gëFú°Plugö
()))  1;

80 
ã°Resu…
 = 
	`runAŒTe°s
();

82 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`˛ónup
();

83  
ã°Resu…
;

84 
	}
}

86 
	gComm™dLöeTe°Ru¬î
::
	$öôülizeTe°Run
()

88 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`groupFûãr
(
¨gumíts
->
	`gëGroupFûãr
());

89 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`«meFûãr
(
¨gumíts
->
	`gëNameFûãr
());

90 i‡(
¨gumíts
->
	`isVîbo£
()Ë
ouçut_
->
	`vîbo£
();

91 
	}
}

93 
	gComm™dLöeTe°Ru¬î
::
	$runAŒTe°s
()

95 
	`öôülizeTe°Run
();

96 
lo›Cou¡
 = 0;

97 
ÁûuªCou¡
 = 0;

98 
ª≥©_
 = 
¨gumíts
->
	`gëRïótCou¡
();

100 
lo›Cou¡
++ < 
ª≥©_
) {

101 
ouçut_
->
	`¥ötTe°Run
(
lo›Cou¡
, 
ª≥©_
);

102 
Te°Resu…
 
	`å
(*
ouçut_
);

103 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`runAŒTe°s
(
å
);

104 
ÁûuªCou¡
 +
å
.
	`gëFaûuªCou¡
();

107  
ÁûuªCou¡
;

108 
	}
}

110 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$∑r£Argumíts
(
Te°Plugö
* 
∂ugö
)

112 
¨gumíts
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
, 
∂ugö
);

113 i‡(
¨gumíts
->
	`∑r£
()) {

114 i‡(
¨gumíts
->
	`isJUnôOuçut
()) {

115 
ouçut_
 = 
jUnôOuçut
;

117  
åue
;

120 
ouçut_
->
	`¥öt
(
¨gumíts
->
	`ußge
());

121  
Ál£
;

123 
	}
}

125 
boﬁ
 
	gComm™dLöeTe°Ru¬î
::
	$isVîbo£
()

127  
¨gumíts
->
	`isVîbo£
();

128 
	}
}

130 
	gComm™dLöeTe°Ru¬î
::
	$gëRïótCou¡
()

132  
¨gumíts
->
	`gëRïótCou¡
();

133 
	}
}

135 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëGroupFûãr
()

137  
¨gumíts
->
	`gëGroupFûãr
();

138 
	}
}

140 
Sim∂eSåög
 
	gComm™dLöeTe°Ru¬î
::
	$gëNameFûãr
()

142  
¨gumíts
->
	`gëNameFûãr
();

143 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\JUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	sJUnôTe°Ca£Resu…Node


36 
JUnôTe°Ca£Resu…Node
() :

37 
execTime_
(0), 
Áûuª_
(0), 
√xt_
(0)

41 
Sim∂eSåög
 
	m«me_
;

42 
	mexecTime_
;

43 
Faûuª
* 
	mÁûuª_
;

44 
JUnôTe°Ca£Resu…Node
* 
	m√xt_
;

47 
	sJUnôTe°GroupResu…


49 
JUnôTe°GroupResu…
() :

50 
ã°Cou¡_
(0), 
ÁûuªCou¡_
(0), 
groupExecTime_
(0), 
hód_
(0), 
èû_
(0)

54 
	mã°Cou¡_
;

55 
	mÁûuªCou¡_
;

56 
	m°¨tTime_
;

57 
	mgroupExecTime_
;

58 
Sim∂eSåög
 
	mgroup_
;

59 
JUnôTe°Ca£Resu…Node
* 
	mhód_
;

60 
JUnôTe°Ca£Resu…Node
* 
	mèû_
;

63 
	sJUnôTe°OuçutIm∂


65 
JUnôTe°GroupResu…
 
	mªsu…s_
;

66 
Pœtf‹mS≥cificFûe
 
	mfûe_
;

69 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

70 
	$im∂_
(
√w
 
JUnôTe°OuçutIm∂
)

72 
	}
}

74 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

76 
	`ª£tTe°GroupResu…
();

77 
dñëe
 
im∂_
;

78 
	}
}

80 
	gJUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

82 
im∂_
->
ªsu…s_
.
ã°Cou¡_
 = 0;

83 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
 = 0;

84 
im∂_
->
ªsu…s_
.
group_
 = "";

85 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

86 
cur
) {

87 
JUnôTe°Ca£Resu…Node
* 
tmp
 = 
cur
->
√xt_
;

89 i‡(
cur
->
Áûuª_
Ë
dñëe
 cur->failure_;

90 
dñëe
 
cur
;

91 
cur
 = 
tmp
;

93 
im∂_
->
ªsu…s_
.
hód_
 = 0;

94 
im∂_
->
ªsu…s_
.
èû_
 = 0;

95 
	}
}

97 
	gJUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

99 
	}
}

101 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

103 
	}
}

105 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

107 
im∂_
->
ªsu…s_
.
èû_
->
execTime_


108 
ªsu…
.
	`gëCuºítTe°TŸÆExecuti⁄Time
();

109 
	}
}

111 
	gJUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

113 
	}
}

115 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

117 
im∂_
->
ªsu…s_
.
groupExecTime_
 = 
ªsu…
.
	`gëCuºítGroupTŸÆExecuti⁄Time
();

118 
	`wrôeTe°GroupToFûe
();

119 
	`ª£tTe°GroupResu…
();

120 
	}
}

122 
	gJUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

124 
im∂_
->
ªsu…s_
.
ã°Cou¡_
++;

125 
im∂_
->
ªsu…s_
.
group_
 = 
ã°
.
	`gëGroup
();

126 
im∂_
->
ªsu…s_
.
°¨tTime_
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

128 i‡(
im∂_
->
ªsu…s_
.
èû_
 == 0) {

129 
im∂_
->
ªsu…s_
.
hód_
 = im∂_->ªsu…s_.
èû_


130 
√w
 
JUnôTe°Ca£Resu…Node
;

133 
im∂_
->
ªsu…s_
.
èû_
->
√xt_
 = 
√w
 
JUnôTe°Ca£Resu…Node
;

134 
im∂_
->
ªsu…s_
.
èû_
 = im∂_->ªsu…s_.èû_->
√xt_
;

136 
im∂_
->
ªsu…s_
.
èû_
->
«me_
 = 
ã°
.
	`gëName
();

137 
	}
}

139 
Sim∂eSåög
 
	$¸óãFûeName
(c⁄° 
Sim∂eSåög
& 
group
)

141 
Sim∂eSåög
 
fûeName
 = "cpputest_";

142 
fûeName
 +
group
;

143 
fûeName
 += ".xml";

144  
fûeName
;

145 
	}
}

147 
	gJUnôTe°Ouçut
::
	$wrôeXmlHódî
()

149 
	`wrôeToFûe
("<?xml version=\"1.0\"Éncoding=\"UTF-8\" ?>\n");

150 
	}
}

152 
	gJUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

154 
Sim∂eSåög


155 
buf
 =

156 
	`SåögFromF‹m©
(

158 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
,

159 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

160 
im∂_
->
ªsu…s_
.
ã°Cou¡_
,

161 (Ë(
im∂_
->
ªsu…s_
.
groupExecTime_
 / 1000), () (impl_->results_.groupExecTime_ % 1000),

162 
	`GëPœtf‹mS≥cificTimeSåög
());

163 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

164 
	}
}

166 
	gJUnôTe°Ouçut
::
	$wrôePr›îtõs
()

168 
	`wrôeToFûe
("<properties>\n");

169 
	`wrôeToFûe
("</properties>\n");

170 
	}
}

172 
	gJUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

174 
JUnôTe°Ca£Resu…Node
* 
cur
 = 
im∂_
->
ªsu…s_
.
hód_
;

175 
cur
) {

176 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

178 
im∂_
->
ªsu…s_
.
group_
.
	`asCh¨Såög
(),

179 
cur
->
«me_
.
	`asCh¨Såög
(), (Ë(cur->
execTime_
 / 1000), ()(cur->execTime_ % 1000));

180 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

182 i‡(
cur
->
Áûuª_
) {

183 
	`wrôeFaûuª
(
cur
);

185 
	`wrôeToFûe
("</testcase>\n");

186 
cur
 = cur->
√xt_
;

188 
	}
}

190 
	gJUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

192 
Sim∂eSåög
 
mesßge
 = 
node
->
Áûuª_
->
	`gëMesßge
().
	`asCh¨Såög
();

193 
mesßge
.
	`ª∂a˚
('"', '\'');

194 
mesßge
.
	`ª∂a˚
('<', '[');

195 
mesßge
.
	`ª∂a˚
('>', ']');

196 
mesßge
.
	`ª∂a˚
("\n", "{newline}");

197 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
(

199 
node
->
Áûuª_
->
	`gëFûeName
().
	`asCh¨Såög
(),

200 
node
->
Áûuª_
->
	`gëLöeNumbî
(), 
mesßge
.
	`asCh¨Såög
());

201 
	`wrôeToFûe
(
buf
.
	`asCh¨Såög
());

202 
	`wrôeToFûe
("</failure>\n");

203 
	}
}

205 
	gJUnôTe°Ouçut
::
	$wrôeFûeEndög
()

207 
	`wrôeToFûe
("<system-out></system-out>\n");

208 
	`wrôeToFûe
("<system-err></system-err>\n");

209 
	`wrôeToFûe
("</testsuite>");

210 
	}
}

212 
	gJUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

214 
	`›íFûeF‹Wrôe
(
	`¸óãFûeName
(
im∂_
->
ªsu…s_
.
group_
));

215 
	`wrôeXmlHódî
();

216 
	`wrôeTe°SuôeSummîy
();

217 
	`wrôePr›îtõs
();

218 
	`wrôeTe°Ca£s
();

219 
	`wrôeFûeEndög
();

220 
	`˛o£Fûe
();

221 
	}
}

223 
	gJUnôTe°Ouçut
::
	$vîbo£
()

225 
	}
}

227 
JUnôTe°Ouçut
::
	$¥öt
(const *)

229 
	}
}

231 
JUnôTe°Ouçut
::
	$¥öt
()

233 
	}
}

235 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

237 i‡(
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 == 0) {

238 
im∂_
->
ªsu…s_
.
ÁûuªCou¡_
++;

239 
im∂_
->
ªsu…s_
.
èû_
->
Áûuª_
 = 
√w
 
	`Faûuª
(
Áûuª
);

241 
	}
}

243 
	gJUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

245 
	}
}

247 
	gJUnôTe°Ouçut
::
	$Êush
()

249 
	}
}

251 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

253 
im∂_
->
fûe_
 = 
	`Pœtf‹mS≥cificFO≥n
(
fûeName
.
	`asCh¨Såög
(), "w");

254 
	}
}

256 
	gJUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

258 
	`Pœtf‹mS≥cificFPuts
(
buf„r
.
	`asCh¨Såög
(), 
im∂_
->
fûe_
);

259 
	}
}

261 
	gJUnôTe°Ouçut
::
	$˛o£Fûe
()

263 
	`Pœtf‹mS≥cificFClo£
(
im∂_
->
fûe_
);

264 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$checkedMÆloc
(
size_t
 
size
)

34 * 
mem
 = (*Ë
	`Pœtf‹mS≥cificMÆloc
(
size
);

35 i‡(
mem
 =0)
	`FAIL
("mallocÑeturnedÇulÖointer");

36  
mem
;

37 
	}
}

39 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAŒoˇt‹
 = 0;

40 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítNewAºayAŒoˇt‹
 = 0;

41 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
cuºítMÆlocAŒoˇt‹
 = 0;

43 
	gMem‹yLókAŒoˇt‹
::
	$isOfEquÆTy≥
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

45  
	`Pœtf‹mS≥cificSåCmp
(
this
->
	`«me
(), 
Æloˇt‹
->name()) == 0;

46 
	}
}

48 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

50 
cuºítNewAŒoˇt‹
 = 
Æloˇt‹
;

51 
	}
}

53 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAŒoˇt‹
()

55 i‡(
cuºítNewAŒoˇt‹
 == 0)

56 
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

57  
cuºítNewAŒoˇt‹
;

58 
	}
}

60 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAŒoˇt‹ToDeÁu…
()

62 
cuºítNewAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

63 
	}
}

65 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

67 
cuºítNewAºayAŒoˇt‹
 = 
Æloˇt‹
;

68 
	}
}

70 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítNewAºayAŒoˇt‹
()

72 i‡(
cuºítNewAºayAŒoˇt‹
 == 0)

73 
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

74  
cuºítNewAºayAŒoˇt‹
;

75 
	}
}

77 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítNewAºayAŒoˇt‹ToDeÁu…
()

79 
cuºítNewAºayAŒoˇt‹
 = 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

80 
	}
}

82 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

84 
cuºítMÆlocAŒoˇt‹
 = 
Æloˇt‹
;

85 
	}
}

87 
Mem‹yLókAŒoˇt‹
* 
	gMem‹yLókAŒoˇt‹
::
	$gëCuºítMÆlocAŒoˇt‹
()

89 i‡(
cuºítMÆlocAŒoˇt‹
 == 0)

90 
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

91  
cuºítMÆlocAŒoˇt‹
;

92 
	}
}

94 
	gMem‹yLókAŒoˇt‹
::
	$£tCuºítMÆlocAŒoˇt‹ToDeÁu…
()

96 
cuºítMÆlocAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

97 
	}
}

100 * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

102  
	`checkedMÆloc
(
size
);

103 
	}
}

105 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

107 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

108 
	}
}

110 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$«me
()

113 
	}
}

115 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$Æloc_«me
()

118 
	}
}

120 c⁄° * 
	gSènd¨dMÆlocAŒoˇt‹
::
	$‰ì_«me
()

123 
	}
}

125 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dMÆlocAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

127 
Sènd¨dMÆlocAŒoˇt‹
 
Æloˇt‹
;

128  &
Æloˇt‹
;

129 
	}
}

131 * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

133  
	`checkedMÆloc
(
size
);

134 
	}
}

136 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

138 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

139 
	}
}

141 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$«me
()

144 
	}
}

146 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$Æloc_«me
()

149 
	}
}

151 c⁄° * 
	gSènd¨dNewAŒoˇt‹
::
	$‰ì_«me
()

154 
	}
}

156 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

158 
Sènd¨dNewAŒoˇt‹
 
Æloˇt‹
;

159  &
Æloˇt‹
;

160 
	}
}

162 * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

164  
	`checkedMÆloc
(
size
);

165 
	}
}

167 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

169 
	`Pœtf‹mS≥cificFªe
(
mem‹y
);

170 
	}
}

172 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$«me
()

175 
	}
}

177 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$Æloc_«me
()

180 
	}
}

182 c⁄° * 
	gSènd¨dNewAºayAŒoˇt‹
::
	$‰ì_«me
()

185 
	}
}

187 
Mem‹yLókAŒoˇt‹
* 
	gSènd¨dNewAºayAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

189 
Sènd¨dNewAºayAŒoˇt‹
 
Æloˇt‹
;

190  &
Æloˇt‹
;

191 
	}
}

192 * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_mem‹y
(
size_t
 
size
)

195 
	}
}

197 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_mem‹y
(* 
mem‹y
)

199 
	}
}

201 c⁄° * 
NuŒUnknownAŒoˇt‹
::
	$«me
()

204 
	}
}

206 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$Æloc_«me
()

209 
	}
}

211 c⁄° * 
	gNuŒUnknownAŒoˇt‹
::
	$‰ì_«me
()

214 
	}
}

216 
Mem‹yLókAŒoˇt‹
* 
	gNuŒUnknownAŒoˇt‹
::
	$deÁu…AŒoˇt‹
()

218 
NuŒUnknownAŒoˇt‹
 
Æloˇt‹
;

219  &
Æloˇt‹
;

220 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakDetector.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	#UNKNOWN
 ((*)("<unknown>"))

	)

34 
	gSim∂eSåögBuf„r
::
	$Sim∂eSåögBuf„r
() :

35 
	$posôi⁄s_fûÀd
(0)

37 
	}
}

40 
	gSim∂eSåögBuf„r
::
	$˛ór
()

42 
posôi⁄s_fûÀd
 = 0;

43 
buf„r
[0] = '\0';

44 
	}
}

46 
	gSim∂eSåögBuf„r
::
	$add
(c⁄° * 
f‹m©
, ...)

48 
cou¡
 = 0;

49 
va_li°
 
¨gumíts
;

50 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

51 
cou¡
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf„r
 + 
posôi⁄s_fûÀd
,

52 
SIMPLE_STRING_BUFFER_LEN
 - 
posôi⁄s_fûÀd
, 
f‹m©
, 
¨gumíts
);

53 i‡(
cou¡
 > 0Ë
posôi⁄s_fûÀd
 += count;

54 
	`va_íd
(
¨gumíts
);

55 
	}
}

57 * 
	gSim∂eSåögBuf„r
::
	$toSåög
()

59  
buf„r
;

60 
	}
}

64 
	gMem‹yLókDëe˘‹Li°
::
	$öôNode
(
Mem‹yLókDëe˘‹Node
* 
node
,

65 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
, * 
mem‹y
,

66 
MemLókPîiod
 
≥riod
, c⁄° * 
fûe
, 
löe
)

68 i‡(
node
) {

69 
node
->
size
 = size;

70 
node
->
mem‹y
 = memory;

71 
node
->
≥riod
 =Öeriod;

72 
node
->
fûe
 = file;

73 
node
->
löe
 =Üine;

74 
node
->
Æloˇt‹
 =állocator;

76 
	}
}

78 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$isInPîiod
(
Mem‹yLókDëe˘‹Node
* 
node
,

79 
MemLókPîiod
 
≥riod
)

81  
≥riod
 =
mem_Àak_≥riod_Æl
 || 
node
->period ==Öeriod

82 || (
node
->
≥riod
 !
mem_Àak_≥riod_dißbÀd
 &&Öeriod

83 =
mem_Àak_≥riod_íabÀd
);

84 
	}
}

86 
	gMem‹yLókDëe˘‹Li°
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

88 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód
;

89 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

91 
cur
) {

92 i‡(
	`isInPîiod
(
cur
, 
≥riod
)) {

93 i‡(
¥ev
) {

94 
¥ev
->
√xt
 = 
cur
->next;

95 
cur
 = 
¥ev
;

98 
hód
 = 
cur
->
√xt
;

99 
cur
 = 
hód
;

103 
¥ev
 = 
cur
;

104 
cur
 = cur->
√xt
;

106 
	}
}

108 
	gMem‹yLókDëe˘‹Li°
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

110 
node
->
√xt
 = 
hód
;

111 
hód
 = 
node
;

112 
	}
}

114 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$ªmoveNode
(* 
mem‹y
)

116 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
hód
;

117 
Mem‹yLókDëe˘‹Node
* 
¥ev
 = 0;

118 
cur
) {

119 i‡(
cur
->
mem‹y
 == memory) {

120 i‡(
¥ev
) {

121 
¥ev
->
√xt
 = 
cur
->next;

122  
cur
;

125 
hód
 = 
cur
->
√xt
;

126  
cur
;

129 
¥ev
 = 
cur
;

130 
cur
 = cur->
√xt
;

133 
	}
}

135 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëLókFrom
(

136 
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

138 
Mem‹yLókDëe˘‹Node
* 
cur
 = 
node
; cur; cu∏cur->
√xt
)

139 i‡(
	`isInPîiod
(
cur
, 
≥riod
))  cur;

141 
	}
}

143 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëFú°Lók
(

144 
MemLókPîiod
 
≥riod
)

146  
	`gëLókFrom
(
hód
, 
≥riod
);

147 
	}
}

149 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹Li°
::
	$gëNextLók
(

150 
Mem‹yLókDëe˘‹Node
* 
node
, 
MemLókPîiod
 
≥riod
)

152  
	`gëLókFrom
(
node
->
√xt
, 
≥riod
);

153 
	}
}

155 
	gMem‹yLókDëe˘‹Li°
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

157 
tŸÆ_Àaks
 = 0;

158 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód
;Çode;Çodênode->
√xt
) {

159 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë
tŸÆ_Àaks
++;

161  
tŸÆ_Àaks
;

162 
	}
}

164 
boﬁ
 
	gMem‹yLókDëe˘‹Li°
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

166 
Mem‹yLókDëe˘‹Node
* 
node
 = 
hód
;Çode;Çodênode->
√xt
)

167 i‡(
	`isInPîiod
(
node
, 
≥riod
)Ë 
åue
;

168  
Ál£
;

169 
	}
}

173 
	gMem‹yLókDëe˘‹TabÀ
::
	$hash
(* 
mem‹y
)

175  ((
size_t
Ë
mem‹y
Ë% 
hash_¥ime
;

176 
	}
}

178 
	gMem‹yLókDëe˘‹TabÀ
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

180 
i
 = 0; i < 
hash_¥ime
; i++)

181 
èbÀ
[
i
].
	`˛órAŒAccou¡ög
(
≥riod
);

182 
	}
}

184 
	gMem‹yLókDëe˘‹TabÀ
::
	$addNewNode
(
Mem‹yLókDëe˘‹Node
* 
node
)

186 
èbÀ
[
	`hash
(
node
->
mem‹y
)].
	`addNewNode
(node);

187 
	}
}

189 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$ªmoveNode
(* 
mem‹y
)

191  
èbÀ
[
	`hash
(
mem‹y
)].
	`ªmoveNode
(memory);

192 
	}
}

194 
boﬁ
 
	gMem‹yLókDëe˘‹TabÀ
::
	$hasLóks
(
MemLókPîiod
 
≥riod
)

196 
i
 = 0; i < 
hash_¥ime
; i++)

197 i‡(
èbÀ
[
i
].
	`hasLóks
(
≥riod
)Ë 
åue
;

198  
Ál£
;

199 
	}
}

201 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëTŸÆLóks
(
MemLókPîiod
 
≥riod
)

203 
tŸÆ_Àaks
 = 0;

204 
i
 = 0; i < 
hash_¥ime
; i++)

205 
tŸÆ_Àaks
 +
èbÀ
[
i
].
	`gëTŸÆLóks
(
≥riod
);

206  
tŸÆ_Àaks
;

207 
	}
}

209 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëFú°Lók
(

210 
MemLókPîiod
 
≥riod
)

212 
i
 = 0; i < 
hash_¥ime
; i++) {

213 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ
[
i
].
	`gëFú°Lók
(
≥riod
);

214 i‡(
node
) Çode;

217 
	}
}

219 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹TabÀ
::
	$gëNextLók
(

220 
Mem‹yLókDëe˘‹Node
* 
Àak
, 
MemLókPîiod
 
≥riod
)

222 
i
 = 
	`hash
(
Àak
->
mem‹y
);

223 
Mem‹yLókDëe˘‹Node
* 
node
 = 
èbÀ
[
i
].
	`gëNextLók
(
Àak
, 
≥riod
);

224 i‡(
node
) Çode;

226 ++
i
; i < 
hash_¥ime
; i++) {

227 
node
 = 
èbÀ
[
i
].
	`gëFú°Lók
(
≥riod
);

228 i‡(
node
) Çode;

231 
	}
}

235 
	gMem‹yLókDëe˘‹
::
	$Mem‹yLókDëe˘‹
()

237 
	}
}

239 
Mem‹yLókDëe˘‹
::
	$öô
(
Mem‹yLókFaûuª
* 
ªp‹t
)

241 
doAŒoˇti⁄Ty≥Checkög
 = 
åue
;

242 
cuºít_≥riod
 = 
mem_Àak_≥riod_dißbÀd
;

243 
ªp‹ãr
 = 
ªp‹t
;

244 
ouçut_buf„r
 = 
	`Sim∂eSåögBuf„r
();

245 
mem‹yTabÀ
 = 
	`Mem‹yLókDëe˘‹TabÀ
();

246 
	}
}

248 
	gMem‹yLókDëe˘‹
::
	$˛órAŒAccou¡ög
(
MemLókPîiod
 
≥riod
)

250 
mem‹yTabÀ
.
	`˛órAŒAccou¡ög
(
≥riod
);

251 
	}
}

253 
	gMem‹yLókDëe˘‹
::
	$°¨tCheckög
()

255 
ouçut_buf„r
.
	`˛ór
();

256 
cuºít_≥riod
 = 
mem_Àak_≥riod_checkög
;

257 
	}
}

259 
	gMem‹yLókDëe˘‹
::
	$°›Checkög
()

261 
cuºít_≥riod
 = 
mem_Àak_≥riod_íabÀd
;

262 
	}
}

264 
	gMem‹yLókDëe˘‹
::
	$íabÀ
()

266 
cuºít_≥riod
 = 
mem_Àak_≥riod_íabÀd
;

267 
	}
}

269 
	gMem‹yLókDëe˘‹
::
	$dißbÀ
()

271 
cuºít_≥riod
 = 
mem_Àak_≥riod_dißbÀd
;

272 
	}
}

274 
	gMem‹yLókDëe˘‹
::
	$dißbÀAŒoˇti⁄Ty≥Checkög
()

276 
doAŒoˇti⁄Ty≥Checkög
 = 
Ál£
;

277 
	}
}

279 
	gMem‹yLókDëe˘‹
::
	$íabÀAŒoˇti⁄Ty≥Checkög
()

281 
doAŒoˇti⁄Ty≥Checkög
 = 
åue
;

282 
	}
}

284 
	gMem‹yLókDëe˘‹
::
	$ªp‹tFaûuª
(c⁄° * 
mesßge
,

285 c⁄° * 
ÆlocFûe
, 
ÆlocLöe
, 
size_t
 
ÆlocSize
,

286 
Mem‹yLókAŒoˇt‹
* 
ÆlocAŒoˇt‹
, c⁄° * 
‰ìFûe
,

287 
‰ìLöe
, 
Mem‹yLókAŒoˇt‹
* 
‰ìAŒoˇt‹
)

289 
ouçut_buf„r
.
	`add
(
mesßge
);

290 
ouçut_buf„r
.
	`add
(
MEM_LEAK_ALLOC_LOCATION
, 
ÆlocFûe
, 
ÆlocLöe
, 
ÆlocSize
,

291 
ÆlocAŒoˇt‹
->
	`Æloc_«me
());

292 
ouçut_buf„r
.
	`add
(
MEM_LEAK_DEALLOC_LOCATION
, 
‰ìFûe
, 
‰ìLöe
,

293 
‰ìAŒoˇt‹
->
	`‰ì_«me
());

294 
ªp‹ãr
->
	`Áû
(
ouçut_buf„r
.
	`toSåög
());

295 
	}
}

297 
	$ˇlcuœãI¡Alig√dSize
(
size_t
 
size
)

299  ((Ë- (
size
 % ())) + size;

300 
	}
}

302 
Mem‹yLókDëe˘‹Node
* 
	gMem‹yLókDëe˘‹
::
	$gëNodeFromMem‹yPoöãr
(

303 * 
mem‹y
, 
size_t
 
mem‹y_size
)

305  (
Mem‹yLókDëe˘‹Node
*Ë(
mem‹y
 + 
	`ˇlcuœãI¡Alig√dSize
(

306 
mem‹y_size
 + 
mem‹y_c‹ru±i⁄_buf„r_size
));

307 
	}
}

309 * 
	gMem‹yLókDëe˘‹
::
	$ÆloˇãMem‹yAndExåaInfo
(

310 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
 
size
)

312  
Æloˇt‹
->
	`Æloc_mem‹y
(
	`ˇlcuœãI¡Alig√dSize
(
size


313 + 
mem‹y_c‹ru±i⁄_buf„r_size
) + memory_corruption_buffer_size

314 + (
Mem‹yLókDëe˘‹Node
));

315 
	}
}

317 * 
	gMem‹yLókDëe˘‹
::
	$ªÆloˇãMem‹yAndExåaInfo
(* 
mem‹y
,

318 
size_t
 
size
)

320  (*Ë
	`Pœtf‹mS≥cificRóŒoc
(
mem‹y
, 
	`ˇlcuœãI¡Alig√dSize
(
size


321 + 
mem‹y_c‹ru±i⁄_buf„r_size
Ë+ (
Mem‹yLókDëe˘‹Node
));

322 
	}
}

324 
	gMem‹yLókDëe˘‹
::
	$addMem‹yC‹ru±i⁄Inf‹m©i⁄
(* 
mem‹y
,

325 
size_t
 
size
)

327 
mem‹y
[
size
] = 'B';

328 
mem‹y
[
size
 + 1] = 'A';

329 
mem‹y
[
size
 + 2] = 'S';

330 
	}
}

332 
	gMem‹yLókDëe˘‹
::
	$checkF‹AŒocMism©chOrC‹ru±i⁄
(

333 
Mem‹yLókDëe˘‹Node
* 
node
, c⁄° * 
fûe
, 
löe
,

334 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

336 i‡(
node
->
Æloˇt‹
 !Æloˇt‹ && 
doAŒoˇti⁄Ty≥Checkög
) {

337 i‡(!
Æloˇt‹
->
	`isOfEquÆTy≥
(
node
->Æloˇt‹)Ë
	`ªp‹tFaûuª
(

338 
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
, 
node
->
fûe
,Çode->
löe
,

339 
node
->
size
,Çode->
Æloˇt‹
, 
fûe
, 
löe
,állocator);

341 i‡(
node
->
mem‹y
[node->
size
] != 'B' ||Çode->memory[node->size + 1]

342 !'A' || 
node
->
mem‹y
[node->
size
 + 2] !'S'Ë
	`ªp‹tFaûuª
(

343 
MEM_LEAK_MEMORY_CORRUPTION
, 
node
->
fûe
,Çode->
löe
,Çode->
size
,

344 
node
->
Æloˇt‹
, 
fûe
, 
löe
,állocator);

345 
	}
}

347 
	gMem‹yLókDëe˘‹
::
	$addMem‹yLókInfoAndC‹ru±i⁄Info
(* 
mem‹y
,

348 
size_t
 
size
, c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

350 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
mem‹y
, 
size
);

351 i‡(
mem‹y
) {

352 
Mem‹yLókDëe˘‹Node
* 
node
 = 
	`gëNodeFromMem‹yPoöãr
(
mem‹y
, 
size
);

353 
Mem‹yLókDëe˘‹Li°
::
	`öôNode
(
node
, 
Æloˇt‹
, 
size
, 
mem‹y
,

354 
cuºít_≥riod
, 
fûe
, 
löe
);

355 
mem‹yTabÀ
.
	`addNewNode
(
node
);

357 
	}
}

359 
boﬁ
 
	gMem‹yLókDëe˘‹
::
	$ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(* 
mem‹y
,

360 c⁄° * 
fûe
, 
löe
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
)

362 
Mem‹yLókDëe˘‹Node
* 
node
 = 
mem‹yTabÀ
.
	`ªmoveNode
(
mem‹y
);

363 i‡(
node
) {

364 
	`checkF‹AŒocMism©chOrC‹ru±i⁄
(
node
, 
fûe
, 
löe
, 
Æloˇt‹
);

365  
åue
;

367 
	`ªp‹tFaûuª
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
, "<unknown>", 0, 0,

368 
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
fûe
, 
löe
, 
Æloˇt‹
);

369  
Ál£
;

370 
	}
}

372 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

373 
size_t
 
size
)

375  
	`ÆlocMem‹y
(
Æloˇt‹
, 
size
, 
UNKNOWN
, 0);

376 
	}
}

378 * 
	gMem‹yLókDëe˘‹
::
	$ÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

379 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

381 * 
mem
 = 
	`ÆloˇãMem‹yAndExåaInfo
(
Æloˇt‹
, 
size
);

382 i‡(
mem
)

383 
	`addMem‹yLókInfoAndC‹ru±i⁄Info
(
mem
, 
size
, 
fûe
, 
löe
, 
Æloˇt‹
);

384  
mem
;

385 
	}
}

387 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

388 * 
mem‹y
, c⁄° * 
fûe
, 
löe
)

390 i‡(
mem‹y
 == 0) ;

392 i‡(
	`ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
((*Ë
mem‹y
, 
fûe
, 
löe
,

393 
Æloˇt‹
)ËÆloˇt‹->
	`‰ì_mem‹y
((*Ë
mem‹y
);

394 
	}
}

396 
	gMem‹yLókDëe˘‹
::
	$dóŒocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

397 * 
mem‹y
)

399 
	`dóŒocMem‹y
(
Æloˇt‹
, (*Ë
mem‹y
, 
UNKNOWN
, 0);

400 
	}
}

402 * 
	gMem‹yLókDëe˘‹
::
	$ªÆlocMem‹y
(
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
,

403 * 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

405 i‡(
mem‹y
Ë
	`ªmoveMem‹yLókInfoAndCheckC‹ru±i⁄
(mem‹y, 
fûe
, 
löe
,

406 
Æloˇt‹
);

408 * 
mem
 = 
	`ªÆloˇãMem‹yAndExåaInfo
(
mem‹y
, 
size
);

409 
	`addMem‹yC‹ru±i⁄Inf‹m©i⁄
(
mem
, 
size
);

410 
	`addMem‹yLókInfoAndC‹ru±i⁄Info
(
mem
, 
size
, 
fûe
, 
löe
, 
Æloˇt‹
);

411  
mem
;

412 
	}
}

414 
	gMem‹yLókDëe˘‹
::
	$C⁄°ru˘Mem‹yLókRï‹t
(
MemLókPîiod
 
≥riod
)

416 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ
.
	`gëFú°Lók
(
≥riod
);

417 
tŸÆ_Àaks
 = 0;

418 
ouçut_buf„r
.
	`add
(
MEM_LEAK_HEADER
);

420 
Àak
) {

421 
ouçut_buf„r
.
	`add
(
MEM_LEAK_LEAK
, 
Àak
->
size
,Üók->
fûe
,Üók->
löe
,

422 
Àak
->
Æloˇt‹
->
	`Æloc_«me
(),Üók->
mem‹y
);

423 
tŸÆ_Àaks
++;

424 
Àak
 = 
mem‹yTabÀ
.
	`gëNextLók
÷ók, 
≥riod
);

426 
ouçut_buf„r
.
	`add
("%†%d", 
MEM_LEAK_FOOTER
, 
tŸÆ_Àaks
);

427 
	}
}

429 c⁄° * 
	gMem‹yLókDëe˘‹
::
	$ªp‹t
(
MemLókPîiod
 
≥riod
)

431 i‡(!
mem‹yTabÀ
.
	`hasLóks
(
≥riod
)Ë 
MEM_LEAK_NONE
;

433 
ouçut_buf„r
.
	`˛ór
();

434 
	`C⁄°ru˘Mem‹yLókRï‹t
(
≥riod
);

436  
ouçut_buf„r
.
	`toSåög
();

437 
	}
}

439 
	gMem‹yLókDëe˘‹
::
	$m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
()

441 
Mem‹yLókDëe˘‹Node
* 
Àak
 = 
mem‹yTabÀ
.
	`gëFú°Lók
(

442 
mem_Àak_≥riod_checkög
);

443 
Àak
) {

444 i‡(
Àak
->
≥riod
 =
mem_Àak_≥riod_checkög
)Üeak->period

445 
mem_Àak_≥riod_íabÀd
;

446 
Àak
 = 
mem‹yTabÀ
.
	`gëNextLók
÷ók, 
mem_Àak_≥riod_checkög
);

448 
	}
}

450 
	gMem‹yLókDëe˘‹
::
	$tŸÆMem‹yLóks
(
MemLókPîiod
 
≥riod
)

452  
mem‹yTabÀ
.
	`gëTŸÆLóks
(
≥riod
);

453 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

30 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

31 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 ˛as†
	cMem‹yLókW¨nögRï‹ãr
: 
public
 
Mem‹yLókFaûuª


36 
public
:

37 
vútuÆ
 ~
	$Mem‹yLókW¨nögRï‹ãr
()

41 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

43 
	`FAIL
(
Áû_°rög
);

44 
	}
}

47 
Mem‹yLókW¨nögRï‹ãr
* 
	gglobÆRï‹ãr
 = 0;

48 
Mem‹yLókDëe˘‹
* 
	gglobÆDëe˘‹
 = 0;

50 
	$de°royDëe˘‹
()

52 
	`Pœtf‹mS≥cificFªe
(
globÆDëe˘‹
);

53 
globÆRï‹ãr
->~
	`Mem‹yLókW¨nögRï‹ãr
();

54 
	`Pœtf‹mS≥cificFªe
(
globÆRï‹ãr
);

55 
globÆRï‹ãr
 = 0;

56 
globÆDëe˘‹
 = 0;

57 
	}
}

59 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëGlobÆDëe˘‹
()

61 i‡(
globÆDëe˘‹
 == 0) {

66 
Mem‹yLókW¨nögRï‹ãr
 
ªp‹ãr
;

67 
globÆRï‹ãr
 = (
Mem‹yLókW¨nögRï‹ãr
*Ë
	`Pœtf‹mS≥cificMÆloc
(

68 (
Mem‹yLókW¨nögRï‹ãr
));

69 
	`Pœtf‹mS≥cificMemCpy
(
globÆRï‹ãr
, &
ªp‹ãr
,

70 (
Mem‹yLókW¨nögRï‹ãr
));

72 
globÆDëe˘‹
 = (
Mem‹yLókDëe˘‹
*Ë
	`Pœtf‹mS≥cificMÆloc
(

73 (
Mem‹yLókDëe˘‹
));

74 i‡(
globÆDëe˘‹
 =0)
	`FAIL
("operatorÇew(size, bool)ÇotÉnough memory");

75 
globÆDëe˘‹
->
	`öô
(
globÆRï‹ãr
);

76 
	`Pœtf‹mS≥cificAtExô
(
de°royDëe˘‹
);

78  
globÆDëe˘‹
;

79 
	}
}

81 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
fú°Plugö
 = 0;

83 
Mem‹yLókW¨nögPlugö
* 
	gMem‹yLókW¨nögPlugö
::
	$gëFú°Plugö
()

85  
fú°Plugö
;

86 
	}
}

88 
Mem‹yLókDëe˘‹
* 
	gMem‹yLókW¨nögPlugö
::
	$gëMem‹yLókDëe˘‹
()

90  
memLókDëe˘‹
;

91 
	}
}

93 
	gMem‹yLókW¨nögPlugö
::
	$ign‹eAŒLóksInTe°
()

95 
ign‹eAŒW¨nögs
 = 
åue
;

96 
	}
}

98 
	gMem‹yLókW¨nögPlugö
::
	$ex≥˘LóksInTe°
(
n
)

100 
ex≥˘edLóks
 = 
n
;

101 
	}
}

103 
	gMem‹yLókW¨nögPlugö
::
	$Mem‹yLókW¨nögPlugö
(c⁄° 
Sim∂eSåög
& 
«me
,

104 
Mem‹yLókDëe˘‹
* 
loˇlDëe˘‹
) :

105 
	`Te°Plugö
(
«me
), 
	`ign‹eAŒW¨nögs
(
Ál£
), 
	$ex≥˘edLóks
(0)

107 i‡(
fú°Plugö
 =0Ëfú°Plugö = 
this
;

109 i‡(
loˇlDëe˘‹
Ë
memLókDëe˘‹
 =ÜocalDetector;

110 
memLókDëe˘‹
 = 
	`gëGlobÆDëe˘‹
();

112 
memLókDëe˘‹
->
	`íabÀ
();

113 
	}
}

115 
	gMem‹yLókW¨nögPlugö
::~
	$Mem‹yLókW¨nögPlugö
()

117 i‡(
this
 =
fú°Plugö
) firstPlugin = 0;

118 
	}
}

120 
	gMem‹yLókW¨nögPlugö
::
	$¥eTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

122 
memLókDëe˘‹
->
	`°¨tCheckög
();

123 
ÁûuªCou¡
 = 
ªsu…
.
	`gëFaûuªCou¡
();

124 
	}
}

126 
	gMem‹yLókW¨nögPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

128 
memLókDëe˘‹
->
	`°›Checkög
();

129 
Àaks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

131 i‡(!
ign‹eAŒW¨nögs
 && 
ex≥˘edLóks
 !
Àaks
 && 
ÁûuªCou¡


132 =
ªsu…
.
	`gëFaûuªCou¡
()) {

133 
Faûuª
 
	`f
(&
ã°
, 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

134 
ªsu…
.
	`addFaûuª
(
f
);

136 
memLókDëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

137 
ign‹eAŒW¨nögs
 = 
Ál£
;

138 
ex≥˘edLóks
 = 0;

139 
	}
}

141 c⁄° * 
	gMem‹yLókW¨nögPlugö
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

143 
Àaks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
);

144 i‡(
Àaks
 !
toBeDñëedLóks
Ë 
memLókDëe˘‹
->
	`ªp‹t
(

145 
mem_Àak_≥riod_íabÀd
);

147 
	}
}

149 #i‡
UT_NEW_OVERRIDES_ENABLED


150 #unde‡
√w


152 * 
›î©‹
 
	$√w
(
size_t
 
size
)

154  
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(

155 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
);

156 
	}
}

158 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

160  
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`ÆlocMem‹y
(

161 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

162 
	}
}

164 
›î©‹
 
	$dñëe
(* 
mem
, c⁄° * 
fûe
, 
löe
)

166 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(

167 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

168 
	}
}

170 
›î©‹
 
	$dñëe
(* 
mem
)

172 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
()->
	`dóŒocMem‹y
(

173 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
(), (*Ë
mem
);

174 
	}
}

176 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

178  
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

179 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
);

182 * 
›î©‹
 
	g√w
 [](
size_t
 
	gsize
, c⁄° * 
	gfûe
, 
	glöe
)

184  
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

185 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), 
size
, (*Ë
fûe
, 
löe
);

188 
›î©‹
 
	gdñëe
[](* 
	gmem
, c⁄° * 
	gfûe
, 
	glöe
)

190 
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

191 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

194 
›î©‹
 
	gdñëe
[](* 
	gmem
)

196 
	gMem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

197 
Mem‹yLókAŒoˇt‹
::
gëCuºítNewAºayAŒoˇt‹
(), (*Ë
mem
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Faûuª.h
"

39 
	gJUnôTe°Ouçut
::
	$JUnôTe°Ouçut
() :

40 
	$im∂_
(0)

42 
	}
}

44 
JUnôTe°Ouçut
::~
	$JUnôTe°Ouçut
()

46 
	}
}

48 
JUnôTe°Ouçut
::
	$ª£tTe°GroupResu…
()

50 
	}
}

52 
JUnôTe°Ouçut
::
	$¥ötTe°sSèπed
()

54 
	}
}

56 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

58 
	}
}

60 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªsu…
)

62 
	}
}

64 
JUnôTe°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

66 
	}
}

68 
JUnôTe°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

70 
	}
}

72 
JUnôTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

74 
	}
}

76 
JUnôTe°Ouçut
::
	$wrôeXmlHódî
()

78 
	}
}

80 
JUnôTe°Ouçut
::
	$wrôeTe°SuôeSummîy
()

82 
	}
}

84 
JUnôTe°Ouçut
::
	$wrôePr›îtõs
()

86 
	}
}

88 
JUnôTe°Ouçut
::
	$wrôeTe°Ca£s
()

90 
	}
}

92 
JUnôTe°Ouçut
::
	$wrôeFaûuª
(
JUnôTe°Ca£Resu…Node
* 
node
)

94 
	}
}

96 
JUnôTe°Ouçut
::
	$wrôeFûeEndög
()

98 
	}
}

100 
JUnôTe°Ouçut
::
	$wrôeTe°GroupToFûe
()

102 
	}
}

104 
JUnôTe°Ouçut
::
	$vîbo£
()

106 
	}
}

108 
JUnôTe°Ouçut
::
	$¥öt
(const *)

110 
	}
}

112 
JUnôTe°Ouçut
::
	$¥öt
()

114 
	}
}

116 
JUnôTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

118 
	}
}

120 
JUnôTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

122 
	}
}

124 
	gJUnôTe°Ouçut
::
	$Êush
()

126 
	}
}

128 
JUnôTe°Ouçut
::
	$›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
fûeName
)

130 
	}
}

132 
JUnôTe°Ouçut
::
	$wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf„r
)

134 
	}
}

136 
JUnôTe°Ouçut
::
	$˛o£Fûe
()

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\SimpleString.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 * 
	$ÆlocSåög
(
size
)

34  
√w
 [
size
];

35 
	}
}

37 
	$dóŒocSåög
(* 
°r
)

39 
dñëe
[] 
°r
;

40 
	}
}

41 * 
	$gëEm±rySåög
()

43 * 
em±y
 = 
√w
 [1];

44 
em±y
[0] = '\0';

45  
em±y
;

46 
	}
}

47 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
ŸhîBuf„r
)

49 i‡(
ŸhîBuf„r
 == 0) {

50 
buf„r
 = 
	`gëEm±rySåög
();

53 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
ŸhîBuf„r
) + 1;

54 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

55 
	`Pœtf‹mS≥cificSåCpy
(
buf„r
, 
ŸhîBuf„r
);

57 
	}
}

59 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° *
Ÿhî
, 
ª≥©Cou¡
)

61 
Àn
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
Ë* 
ª≥©Cou¡
 + 1;

62 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

63 * 
√xt
 = 
buf„r
;

64 
i
 = 0; i < 
ª≥©Cou¡
; i++) {

65 
	`Pœtf‹mS≥cificSåCpy
(
√xt
, 
Ÿhî
);

66 
√xt
 +
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
);

68 *
√xt
 = 0;

70 
	}
}

71 
	gSim∂eSåög
::
	$Sim∂eSåög
(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

73 
Àn
 = 
Ÿhî
.
	`size
() + 1;

74 
buf„r
 = 
	`ÆlocSåög
(
Àn
);

75 
	`Pœtf‹mS≥cificSåCpy
(
buf„r
, 
Ÿhî
.buffer);

76 
	}
}

78 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
=(c⁄° 
Sim∂eSåög
& 
Ÿhî
)

80 i‡(
this
 !&
Ÿhî
) {

81 
dóŒocSåög
(
buf„r
);

82 
	gÀn
 = 
Ÿhî
.
size
() + 1;

83 
	gbuf„r
 = 
ÆlocSåög
(
Àn
);

84 
Pœtf‹mS≥cificSåCpy
(
buf„r
, 
Ÿhî
.buffer);

86  *
	gthis
;

89 
boﬁ
 
	gSim∂eSåög
::
	$c⁄èös
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

93 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
Ë=0Ë 
åue
;

94 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r
Ë=0Ë 
Ál£
;

95  
	`Pœtf‹mS≥cificSåSå
(
buf„r
, 
Ÿhî
.buffer) != 0;

96 
	}
}

98 
boﬁ
 
	gSim∂eSåög
::
	$°¨tsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

100 i‡(
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
Ë=0Ë 
åue
;

101 i‡(
	`Pœtf‹mS≥cificSåLí
(
buf„r
Ë=0Ë 
Ál£
;

102  
	`Pœtf‹mS≥cificSåSå
(
buf„r
, 
Ÿhî
.buffer) == buffer;

103 
	}
}

105 
boﬁ
 
	gSim∂eSåög
::
	$ídsWôh
(c⁄° 
Sim∂eSåög
& 
Ÿhî
) const

107 
buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
buf„r
);

108 
Ÿhî_buf„r_Àngth
 = 
	`Pœtf‹mS≥cificSåLí
(
Ÿhî
.
buf„r
);

109 i‡(
Ÿhî_buf„r_Àngth
 =0Ë 
åue
;

110 i‡(
buf„r_Àngth
 =0Ë 
Ál£
;

111 i‡(
buf„r_Àngth
 < 
Ÿhî_buf„r_Àngth
Ë 
Ál£
;

112  
	`Pœtf‹mS≥cificSåCmp
(
buf„r
 + 
buf„r_Àngth
 - 
Ÿhî_buf„r_Àngth
,

113 
Ÿhî
.
buf„r
) == 0;

114 
	}
}

116 
	gSim∂eSåög
::
	$cou¡
(c⁄° 
Sim∂eSåög
& 
sub°r
) const

118 
num
 = 0;

119 * 
°r
 = 
buf„r
;

120 (
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
sub°r
.
buf„r
))) {

121 
num
++;

122 
°r
++;

124  
num
;

125 
	}
}

127 
	gSim∂eSåög
::
	$•lô
(c⁄° 
Sim∂eSåög
& 
•lô
, 
Sim∂eSåögCﬁÀ˘i⁄
& 
cﬁ
) const

129 
num
 = 
	`cou¡
(
•lô
);

130 
exåaEndTokí
 = (
	`ídsWôh
(
•lô
)) ? 0 : 1;

131 
cﬁ
.
	`Æloˇã
(
num
 + 
exåaEndTokí
);

133 * 
°r
 = 
buf„r
;

134 * 
¥ev
;

135 
i
 = 0; i < 
num
; ++i) {

136 
¥ev
 = 
°r
;

137 
°r
 = 
	`Pœtf‹mS≥cificSåSå
(°r, 
•lô
.
buf„r
) + 1;

138 
Àn
 = 
°r
 - 
¥ev
;

139 * 
sub
 = 
	`ÆlocSåög
(
Àn
 + 1);

140 
	`Pœtf‹mS≥cificSåNCpy
(
sub
, 
¥ev
, 
Àn
);

141 
sub
[
Àn
] = '\0';

142 
cﬁ
[
i
] = 
sub
;

143 
	`dóŒocSåög
(
sub
);

145 i‡(
exåaEndTokí
) {

146 
cﬁ
[
num
] = 
°r
;

148 
	}
}

150 
	gSim∂eSåög
::
	$ª∂a˚
(
to
, 
wôh
)

152 
s
 = 
	`size
();

153 
i
 = 0; i < 
s
; i++) {

154 i‡(
buf„r
[
i
] =
to
Ëbuf„r[i] = 
wôh
;

156 
	}
}

158 
	gSim∂eSåög
::
	$ª∂a˚
(c⁄° * 
to
, c⁄° * 
wôh
)

160 
c
 = 
	`cou¡
(
to
);

161 
Àn
 = 
	`size
();

162 
tﬁí
 = 
	`Pœtf‹mS≥cificSåLí
(
to
);

163 
wôhÀn
 = 
	`Pœtf‹mS≥cificSåLí
(
wôh
);

165 
√wsize
 = 
Àn
 + (
wôhÀn
 * 
c
Ë- (
tﬁí
 * c) + 1;

167 i‡(
√wsize
) {

168 * 
√wbuf
 = 
	`ÆlocSåög
(
√wsize
);

169 
i
 = 0, 
j
 = 0; i < 
Àn
;) {

170 i‡(
	`Pœtf‹mS≥cificSåNCmp
(&
buf„r
[
i
], 
to
, 
tﬁí
) == 0) {

171 
	`Pœtf‹mS≥cificSåNCpy
(&
√wbuf
[
j
], 
wôh
, 
wôhÀn
);

172 
j
 +
wôhÀn
;

173 
i
 +
tﬁí
;

176 
√wbuf
[
j
] = 
buf„r
[
i
];

177 
j
++;

178 
i
++;

181 
	`dóŒocSåög
(
buf„r
);

182 
buf„r
 = 
√wbuf
;

183 
buf„r
[
√wsize
 - 1] = '\0';

186 
buf„r
 = 
	`gëEm±rySåög
();

187 
buf„r
[0] = '\0';

189 
	}
}

191 c⁄° *
	gSim∂eSåög
::
	$asCh¨Såög
() const

193  
buf„r
;

194 
	}
}

196 
	gSim∂eSåög
::
	$size
() const

198  
	`Pœtf‹mS≥cificSåLí
(
buf„r
);

199 
	}
}

201 
	gSim∂eSåög
::~
	$Sim∂eSåög
()

203 
	`dóŒocSåög
(
buf„r
);

204 
	}
}

206 
boﬁ
 
	g›î©‹
==(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

208  0 =
Pœtf‹mS≥cificSåCmp
(
À·
.
asCh¨Såög
(),

209 
right
.
asCh¨Såög
());

212 
boﬁ
 
	g›î©‹
!=(c⁄° 
Sim∂eSåög
& 
À·
, c⁄° 
	gSim∂eSåög
& 
	gright
)

214  !(
	gÀ·
 =
right
);

217 
Sim∂eSåög
 
	gSim∂eSåög
::
›î©‹
+(c⁄° Sim∂eSåög& 
rhs
)

219 
Sim∂eSåög
 
t
(
buf„r
);

220 
	gt
 +
rhs
.
buf„r
;

221  
	gt
;

224 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° 
Sim∂eSåög
& 
rhs
)

226  
›î©‹
+=(
rhs
.
buf„r
);

229 
	gSim∂eSåög
& Sim∂eSåög::
›î©‹
+=(c⁄° * 
rhs
)

231 
Àn
 = 
this
->
size
(Ë+ 
Pœtf‹mS≥cificSåLí
(
rhs
) + 1;

232 * 
	gtbuf„r
 = 
ÆlocSåög
(
Àn
);

233 
Pœtf‹mS≥cificSåCpy
(
tbuf„r
, 
this
->
buf„r
);

234 
Pœtf‹mS≥cificSåC©
(
tbuf„r
, 
rhs
);

235 
dóŒocSåög
(
buf„r
);

236 
	gbuf„r
 = 
tbuf„r
;

237  *
	gthis
;

240 
Sim∂eSåög
 
	$SåögFrom
(
boﬁ
 
vÆue
)

242  
	`Sim∂eSåög
(
	`SåögFromF‹m©
("%s", 
vÆue
 ? "true" : "false"));

243 
	}
}

245 
Sim∂eSåög
 
	$SåögFrom
(c⁄° *
vÆue
)

247  
	`Sim∂eSåög
(
vÆue
);

248 
	}
}

250 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

252  
	`SåögFromF‹m©
("%d", 
vÆue
);

253 
	}
}

255 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

257  
	`SåögFromF‹m©
("%ld", 
vÆue
);

258 
	}
}

260 
Sim∂eSåög
 
	$SåögFrom
(* 
vÆue
)

262  
	`Sim∂eSåög
("0x"Ë+ 
	`HexSåögFrom
((Ë
vÆue
);

263 
	}
}

265 
Sim∂eSåög
 
	$HexSåögFrom
(
vÆue
)

267  
	`SåögFromF‹m©
("%lx", 
vÆue
);

268 
	}
}

270 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
, 
¥ecisi⁄
)

272 
Sim∂eSåög
 
f‹m©
 = 
	`SåögFromF‹m©
("%%.%df", 
¥ecisi⁄
);

273  
	`SåögFromF‹m©
(
f‹m©
.
	`asCh¨Såög
(), 
vÆue
);

274 
	}
}

276 
Sim∂eSåög
 
	$SåögFrom
(
vÆue
)

278  
	`SåögFromF‹m©
("%c", 
vÆue
);

279 
	}
}

281 
Sim∂eSåög
 
	$SåögFrom
(c⁄° 
Sim∂eSåög
& 
vÆue
)

283  
	`Sim∂eSåög
(
vÆue
);

284 
	}
}

286 
Sim∂eSåög
 
	$SåögFromF‹m©
(c⁄° * 
f‹m©
, ...)

288 
Sim∂eSåög
 
ªsu…Såög
;

289 
va_li°
 
¨gumíts
;

290 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

292 
ªsu…Såög
 = 
	`VSåögFromF‹m©
(
f‹m©
, 
¨gumíts
);

293 
	`va_íd
(
¨gumíts
);

294  
ªsu…Såög
;

295 
	}
}

298 #i‚de‡
va_c›y


299 
	#va_c›y
(
c›y
, 
‹igöÆ
Ëc›y = origöÆ;

	)

302 
Sim∂eSåög
 
	$VSåögFromF‹m©
(c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

304 
va_li°
 
¨gsC›y
;

305 
	`va_c›y
(
¨gsC›y
, 
¨gs
);

308 
sizeOfdeÁu…Buf„r
 = 100

310 
deÁu…Buf„r
[
sizeOfdeÁu…Buf„r
];

311 
Sim∂eSåög
 
ªsu…Såög
;

313 
size
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
deÁu…Buf„r
, 
sizeOfdeÁu…Buf„r
,

314 
f‹m©
, 
¨gs
);

315 i‡(
size
 < 
sizeOfdeÁu…Buf„r
) {

316 
ªsu…Såög
 = 
	`Sim∂eSåög
(
deÁu…Buf„r
);

319 * 
√wBuf„r
 = 
√w
 [
size
 + 1];

320 
	`Pœtf‹mS≥cificVSN¥ötf
(
√wBuf„r
, 
size
 + 1, 
f‹m©
, 
¨gsC›y
);

321 
ªsu…Såög
 = 
	`Sim∂eSåög
(
√wBuf„r
);

323 
dñëe
[] 
√wBuf„r
;

325  
ªsu…Såög
;

326 
	}
}

328 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Sim∂eSåögCﬁÀ˘i⁄
()

330 
cﬁÀ˘i⁄
 = 0;

331 
_size
 = 0;

332 
	}
}

334 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$Æloˇã
(
size
)

336 i‡(
cﬁÀ˘i⁄
Ë
dñëe
[] collection;

338 
_size
 = 
size
;

339 
cﬁÀ˘i⁄
 = 
√w
 
Sim∂eSåög
[
_size
];

340 
	}
}

342 
	gSim∂eSåögCﬁÀ˘i⁄
::~
	$Sim∂eSåögCﬁÀ˘i⁄
()

344 
dñëe
[] (
cﬁÀ˘i⁄
);

345 
	}
}

347 
	gSim∂eSåögCﬁÀ˘i⁄
::
	$size
() const

349  
_size
;

350 
	}
}

352 
	gSim∂eSåög
& 
	gSim∂eSåögCﬁÀ˘i⁄
::
›î©‹
[](
ödex
)

354 i‡(
ödex
 >
_size
) {

355 
em±y
 = "";

356  
	gem±y
;

359  
	gcﬁÀ˘i⁄
[
ödex
];

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Faûuª.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	~<°dlib.h
>

34 
Sim∂eSåög
 
	$ªmoveAŒPröèbÀCh¨a˘îsFrom
(c⁄° 
Sim∂eSåög
& 
°r
)

36 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

37 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

38 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

40 
size_t
 
i
 = 0; i < 
buf„rSize
-1; i++)

41 i‡(
buf„r
[
i
] != '\t' && buffer[i] != '\n')

42 
buf„r
[
i
] = ' ';

44 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

45 
	`‰ì
(
buf„r
);

46  
ªsu…
;

47 
	}
}

49 
Sim∂eSåög
 
	$addM¨kîToSåög
(c⁄° 
Sim∂eSåög
& 
°r
, 
m¨kîPos
)

51 
size_t
 
buf„rSize
 = 
°r
.
	`size
()+1;

52 * 
buf„r
 = (*Ë
	`mÆloc
(
buf„rSize
);

53 
°r
.
	`c›yToBuf„r
(
buf„r
, 
buf„rSize
);

55 
buf„r
[
m¨kîPos
] = '^';

57 
Sim∂eSåög
 
	`ªsu…
(
buf„r
);

58 
	`‰ì
(
buf„r
);

59  
ªsu…
;

61 
	}
}

63 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

64 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNumbî
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	$mesßge_
(
theMesßge
)

66 
	}
}

68 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° 
Sim∂eSåög
& 
theMesßge
) :

69 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
—e°->
	`gëFûe
()), 
	`löeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`ã°FûeName_
—e°->gëFûe()), 
	`ã°LöeNumbî_
—e°->gëLöeNumbî()), 
	$mesßge_
(
theMesßge
)

71 
	}
}

73 
	gTe°Faûuª
::
	$Te°Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNum
) :

74 
	`ã°Name_
(
ã°
->
	`gëF‹m©ãdName
()), 
	`fûeName_
(
fûeName
), 
	`löeNumbî_
(
löeNum
), 
	`ã°FûeName_
—e°->
	`gëFûe
()), 
	`ã°LöeNumbî_
—e°->
	`gëLöeNumbî
()), 
	`mesßge_
("no message")

76 
	}
}

78 
	gTe°Faûuª
::
	$Te°Faûuª
(c⁄° 
Te°Faûuª
& 
f
) :

79 
	`ã°Name_
(
f
.
ã°Name_
), 
	`fûeName_
(f.
fûeName_
), 
	`löeNumbî_
(f.
löeNumbî_
), 
	`ã°FûeName_
(f.
ã°FûeName_
), 
	`ã°LöeNumbî_
(f.
ã°LöeNumbî_
), 
	$mesßge_
(
f
.
mesßge_
)

81 
	}
}

84 
	gTe°Faûuª
::~
	$Te°Faûuª
()

86 
	}
}

88 
Sim∂eSåög
 
Te°Faûuª
::
	$gëFûeName
() const

90  
fûeName_
;

91 
	}
}

93 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°FûeName
() const

95  
ã°FûeName_
;

96 
	}
}

98 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëTe°Name
() const

100  
ã°Name_
;

101 
	}
}

103 
	gTe°Faûuª
::
	$gëFaûuªLöeNumbî
() const

105  
löeNumbî_
;

106 
	}
}

108 
	gTe°Faûuª
::
	$gëTe°LöeNumbî
() const

110  
ã°LöeNumbî_
;

111 
	}
}

113 
Sim∂eSåög
 
	gTe°Faûuª
::
	$gëMesßge
() const

115  
mesßge_
;

116 
	}
}

118 
boﬁ
 
	gTe°Faûuª
::
	$isOutsideTe°Fûe
() const

120  
ã°FûeName_
 !
fûeName_
;

121 
	}
}

123 
boﬁ
 
	gTe°Faûuª
::
	$isInHñ≥rFun˘i⁄
() const

125  
löeNumbî_
 < 
ã°LöeNumbî_
;

126 
	}
}

128 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãButWasSåög
(c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

130 c⁄° * 
f‹m©
 = "expected <%s>\n\tbut was <%s>";

131  
	`SåögFromF‹m©
(
f‹m©
, 
ex≥˘ed
.
	`asCh¨Såög
(), 
a˘uÆ
.asCharString());

132 
	}
}

134 
Sim∂eSåög
 
	gTe°Faûuª
::
	$¸óãDif„ªn˚AtPosSåög
(c⁄° 
Sim∂eSåög
& 
a˘uÆ
, 
posôi⁄
)

136 
Sim∂eSåög
 
ªsu…
;

137 c⁄° 
exåaCh¨a˘îsWödow
 = 20;

138 c⁄° 
hÆfOfExåaCh¨a˘îsWödow
 = 
exåaCh¨a˘îsWödow
 / 2;

140 
Sim∂eSåög
 
	`∑ddögF‹PªvítögOutOfBounds
 (" ", 
hÆfOfExåaCh¨a˘îsWödow
);

141 
Sim∂eSåög
 
a˘uÆSåög
 = 
∑ddögF‹PªvítögOutOfBounds
 + 
a˘uÆ
 +ÖaddingForPreventingOutOfBounds;

142 
Sim∂eSåög
 
dif„ª¡Såög
 = 
	`SåögFromF‹m©
("dif„ªn˚ sèπ†©Öosôi⁄ %dát: <", 
posôi⁄
);

144 
ªsu…
 += "\n";

145 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s>\n", 
dif„ª¡Såög
.
	`asCh¨Såög
(), 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
exåaCh¨a˘îsWödow
).asCharString());

147 
Sim∂eSåög
 
m¨kSåög
 = 
a˘uÆSåög
.
	`subSåög
(
posôi⁄
, 
hÆfOfExåaCh¨a˘îsWödow
+1);

148 
m¨kSåög
 = 
	`ªmoveAŒPröèbÀCh¨a˘îsFrom
(markString);

149 
m¨kSåög
 = 
	`addM¨kîToSåög
(m¨kSåög, 
hÆfOfExåaCh¨a˘îsWödow
);

151 
ªsu…
 +
	`SåögFromF‹m©
("\t%s%s", 
	`Sim∂eSåög
(" ", 
dif„ª¡Såög
.
	`size
()).
	`asCh¨Såög
(), 
m¨kSåög
.asCharString());

152  
ªsu…
;

153 
	}
}

155 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
) :

156 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

158 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrNuŒ
(
ex≥˘ed
), SåögFromOrNuŒ(
a˘uÆ
));

159 
	}
}

161 
	gEquÆsFaûuª
::
	$EquÆsFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
)

162 : 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

164 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

165 
	}
}

167 
Sim∂eSåög
 
	$SåögFromOrN™
(
d
)

169 i‡(
	`Pœtf‹mS≥cificIsN™
(
d
))

171  
	`SåögFrom
(
d
);

172 
	}
}

174 
	gDoubÀsEquÆFaûuª
::
	$DoubÀsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

176 
mesßge_
 = 
	`¸óãButWasSåög
(
	`SåögFromOrN™
(
ex≥˘ed
), SåögFromOrN™(
a˘uÆ
));

177 
mesßge_
 += "Åhreshold used was <";

178 
mesßge_
 +
	`SåögFromOrN™
(
thªshﬁd
);

179 
mesßge_
 += ">";

181 i‡(
	`Pœtf‹mS≥cificIsN™
(
ex≥˘ed
Ë|| Pœtf‹mS≥cificIsN™(
a˘uÆ
Ë|| Pœtf‹mS≥cificIsN™(
thªshﬁd
))

182 
mesßge_
 += "\n\tCannot make comparisons with Nan";

183 
	}
}

185 
	gCheckEquÆFaûuª
::
	$CheckEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

187 
ÁûSèπ
;

188 
ÁûSèπ
 = 0; 
a˘uÆ
.
	`asCh¨Såög
()[ÁûSèπ] =
ex≥˘ed
.asCharString()[failStart]; failStart++)

190 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

191 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

193 
	}
}

195 
	gC⁄èösFaûuª
::
	$C⁄èösFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
ex≥˘ed
, c⁄° Sim∂eSåög& 
a˘uÆ
) :

196 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

198 c⁄° * 
f‹m©
 = "actual <%s>\n\tdidÇot contain <%s>";

199 
mesßge_
 = 
	`SåögFromF‹m©
(
f‹m©
, 
a˘uÆ
.
	`asCh¨Såög
(), 
ex≥˘ed
.asCharString());

200 
	}
}

202 
	gCheckFaûuª
::
	$CheckFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
c⁄dôi⁄Såög
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

204 
mesßge_
 = "CHECK(";

205 
mesßge_
 +
c⁄dôi⁄Såög
;

206 
mesßge_
 += ") failed";

207 
	}
}

209 
	gFaûFaûuª
::
	$FaûFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° 
Sim∂eSåög
& 
mesßge
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

211 
mesßge_
 = 
mesßge
;

212 
	}
}

214 
	gL⁄gsEquÆFaûuª
::
	$L⁄gsEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, 
ex≥˘ed
, 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

216 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

217 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

218 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

219 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

221 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

222 
Sim∂eSåög
::
	`∑dSåögsToSameLígth
(
aHex
, 
eHex
, '0');

224 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

225 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

226 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘edRï‹ãd
, 
a˘uÆRï‹ãd
);

227 
	}
}

230 
	gSåögEquÆFaûuª
::
	$SåögEquÆFaûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

232 
ÁûSèπ
;

233 
ÁûSèπ
 = 0; 
a˘uÆ
[ÁûSèπ] =
ex≥˘ed
[failStart]; failStart++)

235 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

236 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

237 
	}
}

239 
	gSåögEquÆNoCa£Faûuª
::
	$SåögEquÆNoCa£Faûuª
(
Uã°
* 
ã°
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
Ë: 
	$Te°Faûuª
(
ã°
, 
fûeName
, 
löeNumbî
)

241 
ÁûSèπ
;

242 
ÁûSèπ
 = 0; 
	`Pœtf‹mS≥cificToLowî
(
a˘uÆ
[ÁûSèπ]Ë=Pœtf‹mS≥cificToLowî(
ex≥˘ed
[failStart]); failStart++)

244 
mesßge_
 = 
	`¸óãButWasSåög
(
ex≥˘ed
, 
a˘uÆ
);

245 
mesßge_
 +
	`¸óãDif„ªn˚AtPosSåög
(
a˘uÆ
, 
ÁûSèπ
);

246 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestHarness_c.cpp

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

36 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

41 
	~"CµUTe°/Te°H¨√ss_c.h
"

43 
CHECK_EQUAL_C_INT_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
,

44 
löeNumbî
)

46 
CHECK_EQUAL_LOCATION
(()
ex≥˘ed
, ()
a˘uÆ
, 
fûeName
, 
löeNumbî
);

49 
CHECK_EQUAL_C_REAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

50 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

52 
DOUBLES_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
thªshﬁd
, 
fûeName
, 
löeNumbî
);

55 
CHECK_EQUAL_C_CHAR_LOCATION
(
ex≥˘ed
, 
a˘uÆ
,

56 c⁄° * 
fûeName
, 
löeNumbî
)

58 
CHECK_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

61 
CHECK_EQUAL_C_STRING_LOCATION
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

62 c⁄° * 
fûeName
, 
löeNumbî
)

64 
STRCMP_EQUAL_LOCATION
(
ex≥˘ed
, 
a˘uÆ
, 
fûeName
, 
löeNumbî
);

67 
FAIL_TEXT_C_LOCATION
(c⁄° * 
ãxt
, c⁄° * 
fûeName
,

68 
löeNumbî
)

70 
FAIL_LOCATION
(
ãxt
, 
fûeName
, 
löeNumbî
);

73 
FAIL_C_LOCATION
(c⁄° * 
fûeName
, 
löeNumbî
)

75 
FAIL_LOCATION
("", 
fûeName
, 
löeNumbî
);

78 
CHECK_C_LOCATION
(
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

79 c⁄° * 
fûeName
, 
löeNumbî
)

81 
CHECK_LOCATION
(((
c⁄dôi⁄
Ë=0 ? 
Ál£
 : 
åue
), 
c⁄dôi⁄Såög
, 
fûeName
, 
löeNumbî
);

84 
˝puã°_mÆloc_£t_out_of_mem‹y
()

86 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹
(
NuŒUnknownAŒoˇt‹
::
deÁu…AŒoˇt‹
());

89 
˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
()

91 
Mem‹yLókAŒoˇt‹
::
£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

94 * 
˝puã°_mÆloc
(
size_t
 
size
)

96  
˝puã°_mÆloc_loˇti⁄
(
size
, "<unknown>", 0);

99 * 
˝puã°_ˇŒoc
(
size_t
 
num
, size_à
size
)

101  
˝puã°_ˇŒoc_loˇti⁄
(
num
, 
size
, "<unknown>", 0);

104 * 
˝puã°_ªÆloc
(* 
±r
, 
size_t
 
size
)

106  
˝puã°_ªÆloc_loˇti⁄
(
±r
, 
size
, "<unknown>", 0);

109 
˝puã°_‰ì
(* 
buf„r
)

111 
˝puã°_‰ì_loˇti⁄
(
buf„r
, "<unknown>", 0);

114 * 
˝puã°_mÆloc_loˇti⁄
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

116  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ÆlocMem‹y
(

117 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), 
size
, 
fûe
, 
löe
);

120 * 
˝puã°_ˇŒoc_loˇti⁄
(
size_t
 
num
, size_à
size
, c⁄° * 
fûe
,

121 
löe
)

123  
˝puã°_mÆloc_loˇti⁄
(
num
 * 
size
, 
fûe
, 
löe
);

126 * 
˝puã°_ªÆloc_loˇti⁄
(* 
mem‹y
, 
size_t
 
size
, c⁄° * 
fûe
,

127 
löe
)

129  
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
ªÆlocMem‹y
(

130 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
mem‹y
, 
size
, 
fûe
, 
löe
);

133 
˝puã°_‰ì_loˇti⁄
(* 
buf„r
, c⁄° * 
fûe
, 
löe
)

135 
Mem‹yLókW¨nögPlugö
::
gëGlobÆDëe˘‹
()->
dóŒocMem‹y
(

136 
Mem‹yLókAŒoˇt‹
::
gëCuºítMÆlocAŒoˇt‹
(), (*Ë
buf„r
, 
fûe
, 
löe
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestOutput.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	gTe°Ouçut
::
	$Te°Ouçut
() :

33 
	`dŸCou¡_
(0), 
	`vîbo£_
(
Ál£
), 
	`¥ogªssIndiˇti⁄
(".")

35 
	}
}

37 
	gTe°Ouçut
::~
	$Te°Ouçut
()

39 
	}
}

41 
Te°Ouçut
::
	$vîbo£
()

43 
vîbo£_
 = 
åue
;

44 
	}
}

46 
	gTe°Ouçut
::
	$¥öt
(
n
)

48 
	`¥öt
(
	`SåögFrom
(
n
).
	`asCh¨Såög
());

49 
	}
}

51 
	gTe°Ouçut
::
	$¥ötDoubÀ
(
d
)

53 
	`¥öt
(
	`SåögFrom
(
d
, 3).
	`asCh¨Såög
());

54 
	}
}

56 
	gTe°Ouçut
::
	$¥ötHex
(
n
)

58 
	`¥öt
(
	`HexSåögFrom
(
n
).
	`asCh¨Såög
());

59 
	}
}

61 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, c⁄° * 
	gs
)

63 
	gp
.
¥öt
(
s
);

64  
	gp
;

67 
	gTe°Ouçut
& 
	g›î©‹
<<(Te°Ouçut& 
	gp
, 
	gi
)

69 
	gp
.
¥öt
(
i
);

70  
	gp
;

73 
	gTe°Ouçut
::
	$¥ötCuºítTe°Sèπed
(c⁄° 
Uã°
& 
ã°
)

75 i‡(
vîbo£_
Ë
	`¥öt
(
ã°
.
	`gëF‹m©ãdName
().
	`asCh¨Såög
());

76 
	}
}

78 
	gTe°Ouçut
::
	$¥ötCuºítTe°Ended
(c⁄° 
Te°Resu…
& 
ªs
)

80 i‡(
vîbo£_
) {

81 
	`¥öt
(" - ");

82 
	`¥öt
(
ªs
.
	`gëCuºítTe°TŸÆExecuti⁄Time
());

83 
	`¥öt
(" ms\n");

86 
	`¥ötProgªssIndiˇt‹
();

88 
	}
}

90 
	gTe°Ouçut
::
	$¥ötProgªssIndiˇt‹
()

92 
	`¥öt
(
¥ogªssIndiˇti⁄
);

93 i‡(++
dŸCou¡_
 % 50 =0Ë
	`¥öt
("\n");

94 
	}
}

96 
	gTe°Ouçut
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

98 
¥ogªssIndiˇti⁄
 = 
ödiˇt‹
;

99 
	}
}

101 
	gTe°Ouçut
::
	$¥ötTe°sSèπed
()

103 
	}
}

105 
Te°Ouçut
::
	$¥ötCuºítGroupSèπed
(c⁄° 
Uã°
& 
ã°
)

107 
	}
}

109 
Te°Ouçut
::
	$¥ötCuºítGroupEnded
(c⁄° 
Te°Resu…
& 
ªs
)

111 
	}
}

113 
Te°Ouçut
::
	$Êush
()

115 
	}
}

117 
Te°Ouçut
::
	$¥ötTe°sEnded
(c⁄° 
Te°Resu…
& 
ªsu…
)

119 i‡(
ªsu…
.
	`gëFaûuªCou¡
() > 0) {

120 
	`¥öt
("\nErrors (");

121 
	`¥öt
(
ªsu…
.
	`gëFaûuªCou¡
());

122 
	`¥öt
(" failures, ");

125 
	`¥öt
("\nOK (");

127 
	`¥öt
(
ªsu…
.
	`gëTe°Cou¡
());

128 
	`¥öt
("Åests, ");

129 
	`¥öt
(
ªsu…
.
	`gëRunCou¡
());

130 
	`¥öt
("Ñan, ");

131 
	`¥öt
(
ªsu…
.
	`gëCheckCou¡
());

132 
	`¥öt
(" checks, ");

133 
	`¥öt
(
ªsu…
.
	`gëIgn‹edCou¡
());

134 
	`¥öt
(" ignored, ");

135 
	`¥öt
(
ªsu…
.
	`gëFûãªdOutCou¡
());

136 
	`¥öt
(" filtered out, ");

137 
	`¥öt
(
ªsu…
.
	`gëTŸÆExecuti⁄Time
());

138 
	`¥öt
(" ms)\n\n");

139 
	}
}

141 
	gTe°Ouçut
::
	$¥ötTe°Run
(
numbî
, 
tŸÆ
)

143 i‡(
tŸÆ
 > 1) {

144 
	`¥öt
("TestÑun ");

145 
	`¥öt
(
numbî
);

146 
	`¥öt
(" of ");

147 
	`¥öt
(
tŸÆ
);

148 
	`¥öt
("\n");

150 
	}
}

152 
	gTe°Ouçut
::
	$¥öt
(c⁄° 
Faûuª
& 
Áûuª
)

154 
	`¥öt
("\n");

155 
	`¥öt
(
Áûuª
.
	`gëFûeName
().
	`asCh¨Såög
());

156 
	`¥öt
(":");

157 
	`¥öt
(
Áûuª
.
	`gëLöeNumbî
());

158 
	`¥öt
(":");

159 
	`¥öt
("Érror: ");

160 
	`¥öt
("Failure in ");

161 
	`¥öt
(
Áûuª
.
	`gëTe°Name
().
	`asCh¨Såög
());

162 
	`¥öt
("\n");

163 
	`¥öt
("\t");

164 
	`¥öt
(
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

165 
	`¥öt
("\n\n");

166 
	}
}

168 
	gC⁄sﬁeTe°Ouçut
::
	$¥öt
(c⁄° * 
s
)

170 *
s
) {

171 i‡('\n' =*
s
Ë
	`Pœtf‹mS≥cificPutch¨
('\r');

172 
	`Pœtf‹mS≥cificPutch¨
(*
s
);

173 
s
++;

175 
	`Êush
();

176 
	}
}

178 
	gC⁄sﬁeTe°Ouçut
::
	$Êush
()

180 
	`Pœtf‹mS≥cificFlush
();;

181 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Plugö.h
"

31 
	gTe°Plugö
::
	$Te°Plugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

32 
	`√xt_
(
NuŒTe°Plugö
::
	`ö°™˚
()), 
	`«me_
(
«me
), 
	$íabÀd_
(
åue
)

34 
	}
}

36 
	gTe°Plugö
::
	$Te°Plugö
(
Te°Plugö
* 
√xt
) :

37 
	`√xt_
(
√xt
), 
	`«me_
("null")

39 
	}
}

41 
	gTe°Plugö
::~
	$Te°Plugö
()

43 
	}
}

45 
Te°Plugö
* Te°Plugö::
	$addPlugö
(
Te°Plugö
* 
∂ugö
)

47 
√xt_
 = 
∂ugö
;

48  
this
;

49 
	}
}

51 
	gTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

53 i‡(
íabÀd_
Ë
	`¥eTe°A˘i⁄
(
ã°
, 
ªsu…
);

54 
√xt_
->
	`runAŒPªTe°A˘i⁄
(
ã°
, 
ªsu…
);

55 
	}
}

57 
	gTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

59 
√xt_
 ->
	`runAŒPo°Te°A˘i⁄
(
ã°
, 
ªsu…
);

60 i‡(
íabÀd_
Ë
	`po°Te°A˘i⁄
(
ã°
, 
ªsu…
);

61 
	}
}

63 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, ** 
av
, 
ödex
)

65  
	`∑r£AŒArgumíts
(
ac
, 
c⁄°_ˇ°
<c⁄° **> (
av
), 
ödex
);

66 
	}
}

68 
boﬁ
 
	gTe°Plugö
::
	$∑r£AŒArgumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

70 i‡(
	`∑r£Argumíts
(
ac
, 
av
, 
ödex
)Ë 
åue
;

71 i‡(
√xt_
ËÇext_->
	`∑r£AŒArgumíts
(
ac
, 
av
, 
ödex
);

72  
Ál£
;

73 
	}
}

75 c⁄° 
	gSim∂eSåög
& 
	gTe°Plugö
::
	$gëName
()

77  
«me_
;

78 
	}
}

80 
Te°Plugö
* 
	gTe°Plugö
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

82 i‡(
«me
 =
«me_
Ë 
this
;

83 i‡(
√xt_
ËÇext_->
	`gëPlugöByName
(
«me
);

84  (
√xt_
);

85 
	}
}

87 
Te°Plugö
* 
	gTe°Plugö
::
	$gëNext
()

89  
√xt_
;

90 
	}
}

91 
Te°Plugö
* 
	gTe°Plugö
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

93 
Te°Plugö
* 
ªmoved
 = 0;

94 i‡(
√xt_
 &&Çext_->
	`gëName
(Ë=
«me
) {

95 
ªmoved
 = 
√xt_
;

96 
√xt_
 =Çext_->next_;

98  
ªmoved
;

99 
	}
}

101 
	gTe°Plugö
::
	$dißbÀ
()

103 
íabÀd_
 = 
Ál£
;

104 
	}
}

106 
	gTe°Plugö
::
	$íabÀ
()

108 
íabÀd_
 = 
åue
;

109 
	}
}

111 
boﬁ
 
	gTe°Plugö
::
	$isE«bÀd
()

113  
íabÀd_
;

114 
	}
}

116 
	s˝puã°_∑ú


118 **
	m‹ig
;

119 *
	m‹ig_vÆue
;

124 
	gödex
;

125 
˝puã°_∑ú
 
	g£éi°
[
SëPoöãrPlugö
::
MAX_SET
];

127 
	gSëPoöãrPlugö
::
	$SëPoöãrPlugö
(c⁄° 
Sim∂eSåög
& 
«me_
) :

128 
	$Te°Plugö
(
«me_
)

130 
ödex
 = 0;

131 
	}
}

133 
	gSëPoöãrPlugö
::~
	$SëPoöãrPlugö
()

135 
	}
}

137 
	$CµUTe°St‹e
(**
fun˘i⁄
, *
vÆue
)

139 i‡(
ödex
 >
SëPoöãrPlugö
::
MAX_SET
) {

140 
	`FAIL
("MaximumÇumber of functionÖointers installed!");

142 
£éi°
[
ödex
].
‹ig_vÆue
 = 
vÆue
;

143 
£éi°
[
ödex
].
‹ig
 = 
fun˘i⁄
;

144 
ödex
++;

145 
	}
}

147 
	gSëPoöãrPlugö
::
	$po°Te°A˘i⁄
(
Uã°
& 
ã°
, 
Te°Resu…
& 
ªsu…
)

149 
i
 = 
ödex
 - 1; i >= 0; i--)

150 *((**Ë
£éi°
[
i
].
‹ig
Ë£éi°[i].
‹ig_vÆue
;

151 
ödex
 = 0;

152 
	}
}

156 
	gNuŒTe°Plugö
::
	$NuŒTe°Plugö
() :

157 
	$Te°Plugö
(0)

159 
	}
}

161 
NuŒTe°Plugö
* NuŒTe°Plugö::
	$ö°™˚
()

163 
NuŒTe°Plugö
 
_ö°™˚
;

164  &
_ö°™˚
;

165 
	}
}

167 
	gNuŒTe°Plugö
::
	$runAŒPªTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

169 
	}
}

171 
	gNuŒTe°Plugö
::
	$runAŒPo°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

173 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestRegistry.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	gTe°Regi°ry
::
	$Te°Regi°ry
() :

32 
	`ã°s
(&
NuŒTe°
::
	`ö°™˚
()), 
	`«meFûãr_
(0), 
	`groupFûãr_
(0),

33 
	`fú°Plugö_
(
NuŒTe°Plugö
::
	$ö°™˚
())

35 
	}
}

37 
Te°Regi°ry
::~
	$Te°Regi°ry
()

39 
	`˛ónup
();

40 
	}
}

42 
	gTe°Regi°ry
::
	$˛ónup
()

44 
dñëe
 
«meFûãr_
;

45 
dñëe
 
groupFûãr_
;

46 
«meFûãr_
 = 0;

47 
groupFûãr_
 = 0;

48 
	}
}

50 
	gTe°Regi°ry
::
	$addTe°
(
Uã°
 *
ã°
)

52 
ã°s
 = 
ã°
->
	`addTe°
(tests);

53 
	}
}

55 
	gTe°Regi°ry
::
	$runAŒTe°s
(
Te°Resu…
& 
ªsu…
)

57 
boﬁ
 
groupSèπ
 = 
åue
;

59 
ªsu…
.
	`ã°sSèπed
();

60 
Uã°
 *
ã°
 = 
ã°s
; !ã°->
	`isNuŒ
();Åe° =Åe°->
	`gëNext
()) {

62 i‡(
groupSèπ
) {

63 
ªsu…
.
	`cuºítGroupSèπed
(
ã°
);

64 
groupSèπ
 = 
Ál£
;

67 
ªsu…
.
	`£tProgªssIndiˇt‹
(
ã°
->
	`gëProgªssIndiˇt‹
());

68 
ªsu…
.
	`cou¡Te°
();

69 i‡(
	`ã°ShouldRun
(
ã°
, 
ªsu…
)) {

70 
ªsu…
.
	`cuºítTe°Sèπed
(
ã°
);

71 
ã°
->
	`runO√Te°WôhPlugös
(
fú°Plugö_
, 
ªsu…
);

72 
ªsu…
.
	`cuºítTe°Ended
(
ã°
);

75 i‡(
	`ídOfGroup
(
ã°
)) {

76 
groupSèπ
 = 
åue
;

77 
ªsu…
.
	`cuºítGroupEnded
(
ã°
);

80 
ªsu…
.
	`ã°sEnded
();

81 
	}
}

83 
boﬁ
 
	gTe°Regi°ry
::
	$ídOfGroup
(
Uã°
* 
ã°
)

85  (
ã°
->
	`isNuŒ
(Ë||Åe°->
	`gëGroup
(Ë!ã°->
	`gëNext
()->getGroup());

86 
	}
}

88 
	gTe°Regi°ry
::
	$cou¡Te°s
()

90  
ã°s
->
	`cou¡Te°s
();

91 
	}
}

93 
Te°Regi°ry
* 
	gTe°Regi°ry
::
cuºítRegi°ry_
 = 0;

95 
Te°Regi°ry
* 
	gTe°Regi°ry
::
	$gëCuºítRegi°ry
()

97 
Te°Regi°ry
 
ªgi°ry
;

98  (
cuºítRegi°ry_
 =0Ë? &
ªgi°ry
 : currentRegistry_;

99 
	}
}

101 
	gTe°Regi°ry
::
	$£tCuºítRegi°ry
(
Te°Regi°ry
* 
ªgi°ry
)

103 
cuºítRegi°ry_
 = 
ªgi°ry
;

104 
	}
}

106 
	gTe°Regi°ry
::
	$unDoLa°AddTe°
()

108 
ã°s
 =Åe°s->
	`gëNext
();

110 
	}
}

112 
	gTe°Regi°ry
::
	$«meFûãr
(
Sim∂eSåög
 
f
)

114 
dñëe
 
«meFûãr_
;

115 
«meFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

116 
	}
}

118 
	gTe°Regi°ry
::
	$groupFûãr
(
Sim∂eSåög
 
f
)

120 
dñëe
 
groupFûãr_
;

121 
groupFûãr_
 = 
√w
 
	`Sim∂eSåög
(
f
);

122 
	}
}

124 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëGroupFûãr
()

126  *
groupFûãr_
;

127 
	}
}

129 
Sim∂eSåög
 
	gTe°Regi°ry
::
	$gëNameFûãr
()

131  *
«meFûãr_
;

132 
	}
}

134 
boﬁ
 
	gTe°Regi°ry
::
	$ã°ShouldRun
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

136 i‡(
groupFûãr_
 =0ËgroupFûãr_ = 
√w
 
	`Sim∂eSåög
();

137 i‡(
«meFûãr_
 =0Ë«meFûãr_ = 
√w
 
	`Sim∂eSåög
();

138 i‡(
ã°
->
	`shouldRun
(*
groupFûãr_
, *
«meFûãr_
)Ë 
åue
;

140 
ªsu…
.
	`cou¡FûãªdOut
();

141  
Ál£
;

143 
	}
}

145 
	gTe°Regi°ry
::
	$ª£tPlugös
()

147 
fú°Plugö_
 = 
NuŒTe°Plugö
::
	`ö°™˚
();

148 
	}
}

150 
	gTe°Regi°ry
::
	$ö°ÆlPlugö
(
Te°Plugö
* 
∂ugö
)

152 
fú°Plugö_
 = 
∂ugö
->
	`addPlugö
(firstPlugin_);

153 
	}
}

155 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëFú°Plugö
()

157  
fú°Plugö_
;

158 
	}
}

160 
Te°Plugö
* 
	gTe°Regi°ry
::
	$gëPlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

162  
fú°Plugö_
->
	`gëPlugöByName
(
«me
);

163 
	}
}

165 
	gTe°Regi°ry
::
	$ªmovePlugöByName
(c⁄° 
Sim∂eSåög
& 
«me
)

167 i‡(
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
) == firstPlugin_) firstPlugin_

168 
fú°Plugö_
->
	`gëNext
();

169 i‡(
fú°Plugö_
->
	`gëName
(Ë=
«me
Ëfú°Plugö_ = fú°Plugö_->
	`gëNext
();

170 
fú°Plugö_
->
	`ªmovePlugöByName
(
«me
);

171 
	}
}

173 
Uã°
* 
	gTe°Regi°ry
::
	$gëFú°Te°
()

175  
ã°s
;

176 
	}
}

178 
Uã°
* 
	gTe°Regi°ry
::
	$gëLa°Te°
()

180 
Uã°
* 
cuºít
 = 
ã°s
;

181 !
cuºít
->
	`gëNext
()->
	`isNuŒ
())

182 
cuºít
 = cuºít->
	`gëNext
();

183  
cuºít
;

184 
	}
}

186 
Uã°
* 
	gTe°Regi°ry
::
	$gëTe°WôhNext
(
Uã°
* 
ã°
)

188 
Uã°
* 
cuºít
 = 
ã°s
;

189 !
cuºít
->
	`gëNext
()->
	`isNuŒ
(Ë&& cuºít->gëNext(Ë!
ã°
)

190 
cuºít
 = cuºít->
	`gëNext
();

191  
cuºít
;

192 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestResult.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Resu….h
"

30 
	~"CµUTe°/Faûuª.h
"

31 
	~"CµUTe°/Te°Ouçut.h
"

32 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

34 
	gTe°Resu…
::
	$Te°Resu…
(
Te°Ouçut
& 
p
) :

35 
	`ouçut
(
p
), 
	`ã°Cou¡
(0), 
	`runCou¡
(0), 
	`checkCou¡
(0), 
	`ÁûuªCou¡
(0),

36 
	`fûãªdOutCou¡
(0), 
	`ign‹edCou¡
(0), 
	`tŸÆExecuti⁄Time
(0),

37 
	`timeSèπed
(0), 
	`cuºítTe°TimeSèπed
(0),

38 
	`cuºítTe°TŸÆExecuti⁄Time
(0), 
	`cuºítGroupTimeSèπed
(0),

39 
	$cuºítGroupTŸÆExecuti⁄Time
(0)

41 
	}
}

43 
	gTe°Resu…
::
	$£tProgªssIndiˇt‹
(c⁄° * 
ödiˇt‹
)

45 
ouçut
.
	`£tProgªssIndiˇt‹
(
ödiˇt‹
);

46 
	}
}

48 
	gTe°Resu…
::~
	$Te°Resu…
()

50 
	}
}

52 
Te°Resu…
::
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

54 
ouçut
.
	`¥ötCuºítGroupSèπed
(*
ã°
);

55 
cuºítGroupTimeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

56 
	}
}

58 
	gTe°Resu…
::
	$cuºítGroupEnded
(
Uã°
* 
ã°
)

60 
cuºítGroupTŸÆExecuti⁄Time
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
()

61 - 
cuºítGroupTimeSèπed
;

62 
ouçut
.
	`¥ötCuºítGroupEnded
(*
this
);

63 
	}
}

65 
	gTe°Resu…
::
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

67 
ouçut
.
	`¥ötCuºítTe°Sèπed
(*
ã°
);

68 
cuºítTe°TimeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

69 
	}
}

71 
	gTe°Resu…
::
	$¥öt
(c⁄° * 
ãxt
)

73 
ouçut
.
	`¥öt
(
ãxt
);

74 
	}
}

76 
	gTe°Resu…
::
	$cuºítTe°Ended
(
Uã°
* 
ã°
)

78 
cuºítTe°TŸÆExecuti⁄Time
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
()

79 - 
cuºítTe°TimeSèπed
;

80 
ouçut
.
	`¥ötCuºítTe°Ended
(*
this
);

82 
	}
}

84 
	gTe°Resu…
::
	$addFaûuª
(c⁄° 
Faûuª
& 
Áûuª
)

86 
ouçut
.
	`¥öt
(
Áûuª
);

87 
ÁûuªCou¡
++;

88 
	}
}

90 
	gTe°Resu…
::
	$cou¡Te°
()

92 
ã°Cou¡
++;

93 
	}
}

95 
	gTe°Resu…
::
	$cou¡Run
()

97 
runCou¡
++;

98 
	}
}

100 
	gTe°Resu…
::
	$cou¡Check
()

102 
checkCou¡
++;

103 
	}
}

105 
	gTe°Resu…
::
	$cou¡FûãªdOut
()

107 
fûãªdOutCou¡
++;

108 
	}
}

110 
	gTe°Resu…
::
	$cou¡Ign‹ed
()

112 
ign‹edCou¡
++;

113 
	}
}

115 
	gTe°Resu…
::
	$ã°sSèπed
()

117 
timeSèπed
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

118 
ouçut
.
	`¥ötTe°sSèπed
();

119 
	}
}

121 
	gTe°Resu…
::
	$ã°sEnded
()

123 
timeEnded
 = 
	`GëPœtf‹mS≥cificTimeInMûlis
();

124 
tŸÆExecuti⁄Time
 = 
timeEnded
 - 
timeSèπed
;

125 
ouçut
.
	`¥ötTe°sEnded
(*
this
);

126 
	}
}

128 
	gTe°Resu…
::
	$gëTŸÆExecuti⁄Time
() const

130  
tŸÆExecuti⁄Time
;

131 
	}
}

133 
	gTe°Resu…
::
	$£tTŸÆExecuti⁄Time
(
exTime
)

135 
tŸÆExecuti⁄Time
 = 
exTime
;

136 
	}
}

138 
	gTe°Resu…
::
	$gëCuºítTe°TŸÆExecuti⁄Time
() const

140  
cuºítTe°TŸÆExecuti⁄Time
;

141 
	}
}

143 
	gTe°Resu…
::
	$gëCuºítGroupTŸÆExecuti⁄Time
() const

145  
cuºítGroupTŸÆExecuti⁄Time
;

146 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Utest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
Te°Resu…
* 
	gUã°
::
ã°Resu…_
 = 0;

33 
Uã°
* 
	gUã°
::
cuºítTe°_
 = 0;

35 
	gUã°
::
	$Uã°
() :

36 
	`group_
("UndeföedTe°Group"), 
	`«me_
("UndefinedTest"),

37 
	`fûe_
("UndeföedFûe"), 
	`löeNumbî_
(0),

38 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

40 
	}
}

42 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

43 
löeNumbî
) :

44 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
),

45 
	`löeNumbî_
(
löeNumbî
), 
	`√xt_
(&
NuŒTe°
::
	$ö°™˚
())

47 
	}
}

49 
Uã°
::
	$Uã°
(c⁄° * 
groupName
, c⁄° * 
ã°Name
, c⁄° * 
fûeName
,

50 
löeNumbî
, 
Uã°
* 
√xtTe°
) :

51 
	`group_
(
groupName
), 
	`«me_
(
ã°Name
), 
	`fûe_
(
fûeName
),

52 
	`löeNumbî_
(
löeNumbî
), 
	$√xt_
(
√xtTe°
)

54 
	}
}

56 
	gUã°
::~
	$Uã°
()

58 
	}
}

60 
Uã°
::
	$runO√Te°WôhPlugös
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

62 
	`execuãPœtf‹mS≥cificRunO√Te°
(
∂ugö
, 
ªsu…
);

63 
	}
}

65 
	gUã°
::
	$runO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

67 
∂ugö
->
	`runAŒPªTe°A˘i⁄
(*
this
, 
ªsu…
);

68 
	`run
(
ªsu…
);

69 
∂ugö
->
	`runAŒPo°Te°A˘i⁄
(*
this
, 
ªsu…
);

70 
	}
}

72 
	gUã°
::
	$run
(
Te°Resu…
& 
ªsu…
)

75 
Uã°
* 
ßvedTe°
 = 
cuºítTe°_
;

76 
Te°Resu…
* 
ßvedResu…
 = 
ã°Resu…_
;

78 
ªsu…
.
	`cou¡Run
();

79 
ã°Resu…_
 = &
ªsu…
;

80 
cuºítTe°_
 = 
this
;

82 i‡(
	`execuãPœtf‹mS≥cificSëup
()) {

83 
	`execuãPœtf‹mS≥cificTe°Body
();

85 
	`execuãPœtf‹mS≥cificTórdown
();

88 
cuºítTe°_
 = 
ßvedTe°
;

89 
ã°Resu…_
 = 
ßvedResu…
;

90 
	}
}

92 
	gUã°
::
	$exôCuºítTe°
()

94 
	`execuãPœtf‹mS≥cificExôCuºítTe°
();

95 
	}
}

97 
Uã°
 *
	gUã°
::
	$gëNext
() const

99  
√xt_
;

100 
	}
}

102 
Uã°
* 
	gUã°
::
	$addTe°
(
Uã°
 *
ã°
)

104 
√xt_
 = 
ã°
;

105  
this
;

106 
	}
}

108 
	gUã°
::
	$cou¡Te°s
()

110  
√xt_
->
	`cou¡Te°s
() + 1;

111 
	}
}

113 
boﬁ
 
	gUã°
::
	$isNuŒ
() const

115  
Ál£
;

116 
	}
}

118 
Sim∂eSåög
 
	gUã°
::
	$gëMa¸oName
() const

121 
	}
}

123 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëName
() const

125  
	`Sim∂eSåög
(
«me_
);

126 
	}
}

128 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëGroup
() const

130  
	`Sim∂eSåög
(
group_
);

131 
	}
}

133 
Sim∂eSåög
 
	gUã°
::
	$gëF‹m©ãdName
() const

135 
Sim∂eSåög
 
	`f‹m©ãdName
(
	`gëMa¸oName
());

136 
f‹m©ãdName
 += "(";

137 
f‹m©ãdName
 +
group_
;

138 
f‹m©ãdName
 += ", ";

139 
f‹m©ãdName
 +
«me_
;

140 
f‹m©ãdName
 += ")";

142  
f‹m©ãdName
;

143 
	}
}

145 c⁄° * 
	gUã°
::
	$gëProgªssIndiˇt‹
() const

148 
	}
}

150 
	gUã°
::
	$£tFûeName
(c⁄° * 
fûeName
)

152 
fûe_
 = 
fûeName
;

153 
	}
}

155 
	gUã°
::
	$£tLöeNumbî
(
löeNumbî
)

157 
löeNumbî_
 = 
löeNumbî
;

158 
	}
}

160 
	gUã°
::
	$£tGroupName
(c⁄° * 
groupName
)

162 
group_
 = 
groupName
;

163 
	}
}

165 
	gUã°
::
	$£tTe°Name
(c⁄° * 
ã°Name
)

167 
«me_
 = 
ã°Name
;

168 
	}
}

170 c⁄° 
Sim∂eSåög
 
	gUã°
::
	$gëFûe
() const

172  
	`Sim∂eSåög
(
fûe_
);

173 
	}
}

175 
	gUã°
::
	$gëLöeNumbî
() const

177  
löeNumbî_
;

178 
	}
}

180 
	gUã°
::
	$£tup
()

182 
	}
}

184 
Uã°
::
	$ã¨down
()

186 
	}
}

188 
boﬁ
 
Uã°
::
	$shouldRun
(c⁄° 
Sim∂eSåög
& 
groupFûãr
,

189 c⁄° 
Sim∂eSåög
& 
«meFûãr
) const

191 
Sim∂eSåög
 
	`group
(
group_
);

192 
Sim∂eSåög
 
	`«me
(
«me_
);

193 i‡(
group
.
	`c⁄èös
(
groupFûãr
Ë&& 
«me
.c⁄èös(
«meFûãr
)Ë 
åue
;

195  
Ál£
;

196 
	}
}

198 
boﬁ
 
	gUã°
::
	$as£πTrue
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
c⁄dôi⁄Såög
,

199 c⁄° * 
fûeName
, 
löeNumbî
)

201 
ã°Resu…_
->
	`cou¡Check
();

202 i‡(!(
c⁄dôi⁄
)) {

203 
Sim∂eSåög
 
	`mesßge
("CHECK(");

204 
mesßge
 +
c⁄dôi⁄Såög
;

205 
mesßge
 += ") failed";

206 
Faûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
mesßge
);

207 
ã°Resu…_
->
	`addFaûuª
(
_f
);

208  
Ál£
;

210  
åue
;

211 
	}
}

213 
boﬁ
 
	gUã°
::
	$as£πC°rEquÆ
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

214 c⁄° * 
fûeName
, 
löeNumbî
)

216 
ã°Resu…_
->
	`cou¡Check
();

217 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 =0Ë 
åue
;

218 i‡(
a˘uÆ
 == 0) {

219 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

220 
	`SåögFrom
("(null)"));

221 
ã°Resu…_
->
	`addFaûuª
(
_f
);

222  
Ál£
;

224 i‡(
ex≥˘ed
 == 0) {

225 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
("(null)"),

226 
	`SåögFrom
(
a˘uÆ
));

227 
ã°Resu…_
->
	`addFaûuª
(
_f
);

228  
Ál£
;

230 i‡(
	`Pœtf‹mS≥cificSåCmp
(
ex≥˘ed
, 
a˘uÆ
) != 0) {

231 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

232 
	`SåögFrom
(
a˘uÆ
));

233 
ã°Resu…_
->
	`addFaûuª
(
_f
);

234  
Ál£
;

236  
åue
;

237 
	}
}

239 
boﬁ
 
	gUã°
::
	$as£πC°rC⁄èös
(c⁄° * 
ex≥˘ed
, c⁄° * 
a˘uÆ
,

240 c⁄° * 
fûeName
, 
löeNumbî
)

242 
ã°Resu…_
->
	`cou¡Check
();

243 i‡(
a˘uÆ
 =0 && 
ex≥˘ed
 =0Ë 
åue
;

244 i‡(
a˘uÆ
 == 0) {

245 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

246 
	`SåögFrom
("(null)"));

247 
ã°Resu…_
->
	`addFaûuª
(
_f
);

248  
Ál£
;

250 i‡(
ex≥˘ed
 == 0) {

251 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
("(null)"),

252 
	`SåögFrom
(
a˘uÆ
));

253 
ã°Resu…_
->
	`addFaûuª
(
_f
);

254  
Ál£
;

256 i‡(!
	`Sim∂eSåög
(
a˘uÆ
).
	`c⁄èös
(
ex≥˘ed
)) {

257 
C⁄èösFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

258 
	`SåögFrom
(
a˘uÆ
));

259 
ã°Resu…_
->
	`addFaûuª
(
_f
);

260  
Ál£
;

262  
åue
;

263 
	}
}

265 
	$PadSåögsToSameLígth
(
Sim∂eSåög
& 
aDecimÆ
, Sim∂eSåög& 
eDecimÆ
,

266 
∑dCh¨a˘î
)

268 
∑d
[2];

269 
∑d
[0] = 
∑dCh¨a˘î
;

270 
∑d
[1] = 0;

271 i‡(
aDecimÆ
.
	`size
(Ë> 
eDecimÆ
.size()ËeDecimÆ = 
	`Sim∂eSåög
(
∑d
,

272 
aDecimÆ
.
	`size
(Ë- 
eDecimÆ
.size()) +ÉDecimal;

273 
aDecimÆ
 = 
	`Sim∂eSåög
(
∑d
, 
eDecimÆ
.
	`size
() -áDecimal.size())

274 + 
aDecimÆ
;

275 
	}
}

277 
boﬁ
 
	gUã°
::
	$as£πL⁄gsEquÆ
(
ex≥˘ed
, 
a˘uÆ
, c⁄° * 
fûeName
,

278 
löeNumbî
)

280 
ã°Resu…_
->
	`cou¡Check
();

281 i‡(
ex≥˘ed
 !
a˘uÆ
) {

282 
Sim∂eSåög
 
aDecimÆ
 = 
	`SåögFrom
(
a˘uÆ
);

283 
Sim∂eSåög
 
aHex
 = 
	`HexSåögFrom
(
a˘uÆ
);

284 
Sim∂eSåög
 
eDecimÆ
 = 
	`SåögFrom
(
ex≥˘ed
);

285 
Sim∂eSåög
 
eHex
 = 
	`HexSåögFrom
(
ex≥˘ed
);

287 
	`PadSåögsToSameLígth
(
aDecimÆ
, 
eDecimÆ
, ' ');

288 
	`PadSåögsToSameLígth
(
aHex
, 
eHex
, '0');

290 
Sim∂eSåög
 
a˘uÆRï‹ãd
 = 
aDecimÆ
 + " 0x" + 
aHex
;

291 
Sim∂eSåög
 
ex≥˘edRï‹ãd
 = 
eDecimÆ
 + " 0x" + 
eHex
;

293 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
ex≥˘edRï‹ãd
,

294 
a˘uÆRï‹ãd
);

295 
ã°Resu…_
->
	`addFaûuª
(
_f
);

296  
Ál£
;

298  
åue
;

299 
	}
}

301 
boﬁ
 
	gUã°
::
	$as£πPoöãrsEquÆ
(* 
ex≥˘ed
, * 
a˘uÆ
,

302 c⁄° * 
fûeName
, 
löeNumbî
)

304 
ã°Resu…_
->
	`cou¡Check
();

305 i‡(
ex≥˘ed
 !
a˘uÆ
) {

306 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

307 
	`SåögFrom
(
a˘uÆ
));

308 
ã°Resu…_
->
	`addFaûuª
(
_f
);

309  
Ál£
;

311  
åue
;

312 
	}
}

314 
boﬁ
 
	gUã°
::
	$as£πDoubÀsEquÆ
(
ex≥˘ed
, 
a˘uÆ
,

315 
thªshﬁd
, c⁄° * 
fûeName
, 
löeNumbî
)

317 
ã°Resu…_
->
	`cou¡Check
();

318 i‡(
	`Pœtf‹mS≥cificFabs
(
ex≥˘ed
 - 
a˘uÆ
Ë> 
thªshﬁd
) {

319 
EquÆsFaûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
	`SåögFrom
(
ex≥˘ed
),

320 
	`SåögFrom
(
a˘uÆ
));

321 
ã°Resu…_
->
	`addFaûuª
(
_f
);

322  
Ál£
;

324  
åue
;

325 
	}
}

327 
	gUã°
::
	$Áû
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

329 
Faûuª
 
	`_f
(
this
, 
fûeName
, 
löeNumbî
, 
ãxt
);

330 
ã°Resu…_
->
	`addFaûuª
(
_f
);

331 
	}
}

333 
	gUã°
::
	$¥öt
(c⁄° *
ãxt
, c⁄° * 
fûeName
, 
löeNumbî
)

335 
Sim∂eSåög
 
°rögToPröt
 = "\n";

336 
°rögToPröt
 +
fûeName
;

337 
°rögToPröt
 += ":";

338 
°rögToPröt
 +
	`SåögFrom
(
löeNumbî
);

339 
°rögToPröt
 += " ";

340 
°rögToPröt
 +
ãxt
;

341 
ã°Resu…_
->
	`¥öt
(
°rögToPröt
.
	`asCh¨Såög
());

342 
	}
}

344 
	gUã°
::
	$¥öt
(c⁄° 
Sim∂eSåög
& 
ãxt
, c⁄° * 
fûeName
,

345 
löeNumbî
)

347 
	`¥öt
(
ãxt
.
	`asCh¨Såög
(), 
fûeName
, 
löeNumbî
);

348 
	}
}

350 
Te°Resu…
* 
	gUã°
::
	$gëTe°Resu…
()

352  
ã°Resu…_
;

353 
	}
}

355 
Uã°
* 
	gUã°
::
	$gëCuºít
()

357  
cuºítTe°_
;

358 
	}
}

363 
	gNuŒTe°
::
	$NuŒTe°
() :

364 
	`Uã°
("NullGroup", "NullName", "NullFile", -1, 0)

366 
	}
}

368 
	gNuŒTe°
::~
	$NuŒTe°
()

370 
	}
}

372 
NuŒTe°
& NuŒTe°::
	$ö°™˚
()

374 
NuŒTe°
 
_ö°™˚
;

375  
_ö°™˚
;

376 
	}
}

378 
	gNuŒTe°
::
	$cou¡Te°s
()

381 
	}
}

383 
Uã°
* 
	gNuŒTe°
::
	$gëNext
() const

385  &
	`ö°™˚
();

386 
	}
}

388 
boﬁ
 
	gNuŒTe°
::
	$isNuŒ
() const

390  
åue
;

391 
	}
}

395 
	gTe°In°ÆÀr
::
	$Te°In°ÆÀr
(
Uã°
* 
t
, c⁄° * 
groupName
,

396 c⁄° * 
ã°Name
, c⁄° * 
fûeName
, 
löeNumbî
)

398 
t
->
	`£tGroupName
(
groupName
);

399 
t
->
	`£tTe°Name
(
ã°Name
);

400 
t
->
	`£tFûeName
(
fûeName
);

401 
t
->
	`£tLöeNumbî
(
löeNumbî
);

402 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`addTe°
(
t
);

403 
	}
}

405 
	gTe°In°ÆÀr
::~
	$Te°In°ÆÀr
()

407 
	}
}

409 
Te°In°ÆÀr
::
	$unDo
()

411 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`unDoLa°AddTe°
();

412 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp

28 
	~<°dlib.h
>

29 
	~"CµUTe°/Te°H¨√ss.h
"

30 #unde‡
mÆloc


31 #unde‡
‰ì


32 #unde‡
ˇŒoc


33 #unde‡
ªÆloc


35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~<sys/time.h
>

37 
	~<time.h
>

38 
	~<°dio.h
>

39 
	~<°d¨g.h
>

40 
	~<£tjmp.h
>

41 
	~<°rög.h
>

42 
	~<m©h.h
>

44 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

46 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

47 
	gjmp_buf_ödex
 = 0;

49 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

51 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

52 
jmp_buf_ödex
++;

53 
	`£tup
();

54 
jmp_buf_ödex
--;

55  
åue
;

57  
Ál£
;

58 
	}
}

60 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

63 
jmp_buf_ödex
++;

64 
	`ã°Body
();

65 
jmp_buf_ödex
--;

67 
	}
}

69 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

71 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

72 
jmp_buf_ödex
++;

73 
	`ã¨down
();

74 
jmp_buf_ödex
--;

76 
	}
}

78 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

80 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

81 
jmp_buf_ödex
++;

82 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

83 
jmp_buf_ödex
--;

85 
	}
}

87 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

89 
jmp_buf_ödex
--;

90 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

91 
	}
}

95 
	$TimeInMûlisIm∂emíèti⁄
()

97 
timevÆ
 
tv
;

98 
timez⁄e
 
tz
;

99 
	`gëtimeofday
(&
tv
, &
tz
);

100  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

101 
	}
}

103 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

105 
	$GëPœtf‹mS≥cificTimeInMûlis
()

107  
	`timeInMûlisFp
();

108 
	}
}

110 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

112 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

113 
	}
}

117 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

119 
time_t
 
tm
 = 
	`time
(
NULL
);

120  
	`˘ime
(&
tm
);

121 
	}
}

123 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

125 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

127  
	`timeSåögFp
();

128 
	}
}

130 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

132 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

135 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

137  
	`©oi
(
°r
);

138 
	}
}

140 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

142  
	`°æí
(
°r
);

143 
	}
}

145 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

147  
	`°rˇt
(
s1
, 
s2
);

148 
	}
}

150 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

152  
	`°r˝y
(
s1
, 
s2
);

153 
	}
}

155 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

157  
	`°∫˝y
(
s1
, 
s2
, 
size
);

158 
	}
}

160 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

162  
	`°rcmp
(
s1
, 
s2
);

163 
	}
}

165 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

167  
	`°∫cmp
(
s1
, 
s2
, 
size
);

168 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  (*Ë
	`°r°r
(
s1
, 
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

181  
	`f›í
(
fûíame
, 
Êag
);

182 
	}
}

184 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

186 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

187 
	}
}

189 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

191 
	`f˛o£
((
FILE
*)
fûe
);

192 
	}
}

194 
	$Pœtf‹mS≥cificFlush
()

196 
	`fÊush
(
°dout
);

197 
	}
}

199 
	$Pœtf‹mS≥cificPutch¨
(
c
)

201  
	`putch¨
(
c
);

202 
	}
}

204 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

206  
	`mÆloc
(
size
);

207 
	}
}

209 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

211  
	`ªÆloc
(
mem‹y
, 
size
);

212 
	}
}

214 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

216 
	`‰ì
(
mem‹y
);

217 
	}
}

219 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

221  
	`mem˝y
(
s1
, 
s2
, 
size
);

222 
	}
}

224 
Pœtf‹mS≥cificAtExô
((*
func
) ())

226  
	`©exô
(
func
);

227 
	}
}

229 
	$Pœtf‹mS≥cificFabs
(
d
)

231  
	`Ábs
(
d
);

232 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Iar\UtestPlatform.cpp

29 
	~<time.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<£tjmp.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~"CµUTe°/Te°H¨√ss.h
"

37 #unde‡
mÆloc


38 #unde‡
ˇŒoc


39 #unde‡
ªÆloc


40 #unde‡
‰ì


41 
	~"CµUTe°/Te°Regi°ry.h
"

42 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

44 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

45 
	gjmp_buf_ödex
 = 0;

47 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

49 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

50 
jmp_buf_ödex
++;

51 
	`£tup
();

52 
jmp_buf_ödex
--;

53  
åue
;

55  
Ál£
;

56 
	}
}

58 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

60 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

61 
jmp_buf_ödex
++;

62 
	`ã°Body
();

63 
jmp_buf_ödex
--;

65 
	}
}

67 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

69 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

70 
jmp_buf_ödex
++;

71 
	`ã¨down
();

72 
jmp_buf_ödex
--;

74 
	}
}

76 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

78 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

79 
jmp_buf_ödex
++;

80 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

81 
jmp_buf_ödex
--;

83 
	}
}

85 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

87 
jmp_buf_ödex
--;

88 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

89 
	}
}

93 
	$TimeInMûlisIm∂emíèti⁄
()

95 
˛ock_t
 
t
 = 
	`˛ock
();

97 
t
 =Å * 10;

100 
	}
}

102 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

104 
	$GëPœtf‹mS≥cificTimeInMûlis
()

106  
	`timeInMûlisFp
();

107 
	}
}

109 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

111 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

112 
	}
}

116 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

118 
time_t
 
tm
 = 
	`time
(
NULL
);

119  
	`˘ime
(&
tm
);

120 
	}
}

122 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

124 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

126  
	`timeSåögFp
();

127 
	}
}

129 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

131 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

134 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

136  
	`©oi
(
°r
);

137 
	}
}

139 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

141  
	`°æí
(
°r
);

142 
	}
}

144 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

146  
	`°rˇt
(
s1
, 
s2
);

147 
	}
}

149 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

151  
	`°r˝y
(
s1
, 
s2
);

152 
	}
}

154 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

156  
	`°∫˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

161  
	`°rcmp
(
s1
, 
s2
);

162 
	}
}

164 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

166  
	`°∫cmp
(
s1
, 
s2
, 
size
);

167 
	}
}

169 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

171  
	`°r°r
((*)
s1
, (*)
s2
);

172 
	}
}

174 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

176  
	`v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

177 
	}
}

179 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

182 
	}
}

184 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

186 
	}
}

188 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

190 
	}
}

192 
	$Pœtf‹mS≥cificFlush
()

194 
	}
}

196 
	$Pœtf‹mS≥cificPutch¨
(
c
)

198  
	`putch¨
(
c
);

199 
	}
}

201 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

203  
	`mÆloc
(
size
);

204 
	}
}

206 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

208  
	`ªÆloc
(
mem‹y
, 
size
);

209 
	}
}

211 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

213 
	`‰ì
(
mem‹y
);

214 
	}
}

216 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

218  
	`mem˝y
(
s1
, 
s2
, 
size
);

219 
	}
}

221 
Pœtf‹mS≥cificAtExô
((*
func
) ())

223  
	`©exô
(
func
);

224 
	}
}

226 
	$Pœtf‹mS≥cificFabs
(
d
)

228  
	`Ábs
(
d
);

229 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp

28 
	~"CµUTe°/Mem‹yLókW¨nög.h
"

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

34 
	gÆloˇãdBlocks
 = 0;

35 
	gÆloˇãdAºays
 = 0;

36 
	gfú°InôülBlocks
 = 0;

37 
	gfú°InôülAºays
 = 0;

38 
boﬁ
 
	gªp‹ãrRegi°îed
 = 
Ál£
;

40 ˛as†
	cMem‹yLókW¨nögD©a


42 
	mpublic
:

43 
Mem‹yLókW¨nögD©a
();

45 
	möôülBlocksU£d
;

46 
	möôülAºaysU£d
;

48 
	mblockUßgeCheckPoöt
;

49 
	m¨øyUßgeCheckPoöt
;

50 
	mex≥˘Cou¡
;

51 
	mmesßge
[100];

54 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

56 
_im∂
 = (
Mem‹yLókW¨nögD©a
*Ë
	`mÆloc
((MemoryLeakWarningData));

57 
_im∂
->
öôülBlocksU£d
 = 0;

58 
_im∂
->
öôülAºaysU£d
 = 0;

60 
_im∂
->
blockUßgeCheckPoöt
 = 0;

61 
_im∂
->
¨øyUßgeCheckPoöt
 = 0;

62 
_im∂
->
ex≥˘Cou¡
 = 0;

63 
_im∂
->
mesßge
[0] = '\0';

64 
	}
}

66 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

68 
	`‰ì
(
_im∂
);

69 
	}
}

72 
ªp‹tMem‹yBÆœn˚
();

75 
	$ªp‹tMem‹yBÆœn˚
()

77 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
fú°InôülBlocks
;

78 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
fú°InôülAºays
;

79 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

81 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

82 
	`¥ötf
("NoÜeaks but someárrays were deleted without []\n");

85 i‡(
blockBÆ™˚
 > 0)

86 
	`¥ötf
("Mem‹yÜók! %d block†nŸ dñëed\n", 
blockBÆ™˚
);

87 i‡(
¨øyBÆ™˚
 > 0)

88 
	`¥ötf
("Mem‹yÜók! %dáºay†nŸ dñëed\n", 
¨øyBÆ™˚
);

89 i‡(
blockBÆ™˚
 < 0)

90 
	`¥ötf
("M‹êblock†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
blockBÆ™˚
);

91 i‡(
¨øyBÆ™˚
 < 0)

92 
	`¥ötf
("M‹ê¨øy†dñëedÅh™Çewed! %dÉxå®dñëes\n", 
¨øyBÆ™˚
);

94 
	`¥ötf
("NOTE - some memoryÜeaksáppearÅo beállocated staticsÅhatáreÇotÑeleased\n"

100 
	}
}

103 
Mem‹yLókW¨nög
* Mem‹yLókW¨nög::
_œã°
 = 
NULL
;

105 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

107 
_œã°
 = 
this
;

108 
	`Cª©eD©a
();

109 
	}
}

111 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

113 
	`De°royD©a
();

114 
	}
}

116 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

118  
_œã°
;

119 
	}
}

121 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

123 
_œã°
 = 
œã°
;

124 
	}
}

126 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

128 
_im∂
->
öôülBlocksU£d
 = 
ÆloˇãdBlocks
;

129 
_im∂
->
öôülAºaysU£d
 = 
ÆloˇãdAºays
;

131 i‡(!
ªp‹ãrRegi°îed
) {

132 
fú°InôülBlocks
 = 
ÆloˇãdBlocks
;

133 
fú°InôülAºays
 = 
ÆloˇãdAºays
;

134 
ªp‹ãrRegi°îed
 = 
åue
;

137 
	}
}

139 c⁄° * 
	gMem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

141 i‡(
_im∂
->
öôülBlocksU£d
 !(
ÆloˇãdBlocks
-
toBeDñëedLóks
)

142 || 
_im∂
->
öôülAºaysU£d
 !
ÆloˇãdAºays
 )

144 
	`¥ötf
("initial blocks=%d,állocated blocks=%d\ninitialárrays=%d,állocatedárrays=%d\n",

145 
_im∂
->
öôülBlocksU£d
, 
ÆloˇãdBlocks
, _im∂->
öôülAºaysU£d
, 
ÆloˇãdAºays
);

151 
	}
}

153 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

155 
_im∂
->
blockUßgeCheckPoöt
 = 
ÆloˇãdBlocks
;

156 
_im∂
->
¨øyUßgeCheckPoöt
 = 
ÆloˇãdAºays
;

157 
	}
}

159 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

161 
¨øyBÆ™˚
 = 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
;

162 
blockBÆ™˚
 = 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
;

164 i‡(
_im∂
->
ex≥˘Cou¡
 !0 && 
blockBÆ™˚
 + 
¨øyBÆ™˚
 == _impl->expectCount)

165  
Ál£
;

166 i‡(
blockBÆ™˚
 =0 && 
¨øyBÆ™˚
 == 0)

167  
Ál£
;

168 i‡(
blockBÆ™˚
 + 
¨øyBÆ™˚
 == 0)

169 
	`•rötf
(
_im∂
->
mesßge
, "NoÜeaks but someárrays were deleted without []\n");

172 
nch¨s
 = 0;

173 i‡(
_im∂
->
blockUßgeCheckPoöt
 !
ÆloˇãdBlocks
)

174 
nch¨s
 = 
	`•rötf
(
_im∂
->
mesßge
, "thisÅestÜeaks %d blocks",

175 
ÆloˇãdBlocks
 - 
_im∂
->
blockUßgeCheckPoöt
);

177 i‡(
_im∂
->
¨øyUßgeCheckPoöt
 !
ÆloˇãdAºays
)

178 
	`•rötf
(
_im∂
->
mesßge
 + 
nch¨s
, "thisÅestÜeaks %dárrays",

179 
ÆloˇãdAºays
 - 
_im∂
->
¨øyUßgeCheckPoöt
);

181  
åue
;

182 
	}
}

184 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

186  
_im∂
->
mesßge
;

187 
	}
}

189 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

191 
_im∂
->
ex≥˘Cou¡
 = 
n
;

192 
	}
}

196 * 
›î©‹
 
	$√w
(
size_t
 
size
)

198 
ÆloˇãdBlocks
++;

199  
	`mÆloc
(
size
);

200 
	}
}

202 
›î©‹
 
	$dñëe
(* 
mem
)

204 
ÆloˇãdBlocks
--;

205 
	`‰ì
(
mem
);

206 
	}
}

208 * 
›î©‹
 
	g√w
[](
size_t
 
	gsize
)

210 
	gÆloˇãdAºays
++;

211  
mÆloc
(
size
);

214 
›î©‹
 
	gdñëe
[](* 
	gmem
)

216 
	gÆloˇãdAºays
--;

217 
‰ì
(
mem
);

220 * 
›î©‹
 
	$√w
(
size_t
 
size
, c⁄° * 
fûe
, 
löe
)

222 
ÆloˇãdBlocks
++;

223  
	`mÆloc
(
size
);

225 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 
	~"CµUTe°/Te°Resu….h
"

4 
	~<time.h
>

5 
	~<sys/time.h
>

7 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

9 
	`ã°Body
();

10 
	}
}

15 
	$TimeInMûlisIm∂emíèti⁄
()

17 
timevÆ
 
tv
;

18 
timez⁄e
 
tz
;

19 ::
	`gëtimeofday
(&
tv
, &
tz
);

20  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

21 
	}
}

23 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

25 
	$GëPœtf‹mS≥cificTimeInMûlis
()

27  
	`timeInMûlisFp
();

28 
	}
}

30 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

32 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

33 
	}
}

37 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
()

39 
time_t
 
tm
 = 
	`time
(
NULL
);

40  
	`˘ime
(&
tm
);

41 
	}
}

43 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

45 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
()

47  
	`timeSåögFp
();

48 
	}
}

50 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ())

52 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

53 
	}
}

56 
	~<£tjmp.h
>

58 
jmp_buf
 
	gã°_exô_jmp_buf
;

60 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

62 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
))

63 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

64 
	}
}

66 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

68 
	`l⁄gjmp
(
ã°_exô_jmp_buf
, 1);

69 
	}
}

71 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

73 
	}
}

75 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp

28 
	~"Mem‹yLókW¨nög.h
"

30 
	~<e32ba£.h
>

32 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
_œã°
 = 
NULL
;

35 ˛as†
	cMem‹yLókW¨nögD©a
 : 
public
 
CBa£
 {

36 
public
:

37 
TI¡
 
iInôülAŒocCñls
;

38 
TI¡
 
	miEx≥˘edLóks
;

39 
TI¡
 
	miInôülThªadH™dÀCou¡
;

40 
TI¡
 
	miInôülPro˚ssH™dÀCou¡
;

43 
	gMem‹yLókW¨nög
::
	$Mem‹yLókW¨nög
()

45 
_œã°
 = 
this
;

46 
	`Cª©eD©a
();

47 
	}
}

49 
	gMem‹yLókW¨nög
::~
	$Mem‹yLókW¨nög
()

51 
	`De°royD©a
();

52 
	}
}

54 
	gMem‹yLókW¨nög
::
	$E«bÀ
()

56 
	}
}

58 c⁄° * 
Mem‹yLókW¨nög
::
	$FöÆRï‹t
(
toBeDñëedLóks
)

60 
TI¡
 
	`˚ŒDif„ªn˚
(
U£r
::
	`Cou¡AŒocCñls
(Ë- 
_im∂
->
iInôülAŒocCñls
);

61 if–
˚ŒDif„ªn˚
 !
toBeDñëedLóks
 ) {

65 
TI¡
 
¥o˚ssH™dÀs
;

66 
TI¡
 
thªadH™dÀs
;

67 
	`RThªad
().
	`H™dÀCou¡
(
¥o˚ssH™dÀs
, 
thªadH™dÀs
);

69 if(
_im∂
->
iInôülPro˚ssH™dÀCou¡
 !
¥o˚ssH™dÀs
 ||

70 
_im∂
->
iInôülThªadH™dÀCou¡
 !
thªadH™dÀs
) {

75 
	}
}

77 
	gMem‹yLókW¨nög
::
	$CheckPoötUßge
()

79 
_im∂
->
iInôülAŒocCñls
 = 
U£r
::
	`Cou¡AŒocCñls
();

80 
	`RThªad
().
	`H™dÀCou¡
(
_im∂
->
iInôülPro˚ssH™dÀCou¡
, _im∂->
iInôülThªadH™dÀCou¡
);

81 
	}
}

83 
boﬁ
 
	gMem‹yLókW¨nög
::
	$UßgeIsNŸBÆ™˚d
()

85 
TI¡
 
	`ÆloˇãdCñls
(
U£r
::
	`Cou¡AŒocCñls
());

86 if(
_im∂
->
iEx≥˘edLóks
 != 0) {

87 
TI¡
 
	`dif„ªn˚
(
	`Abs
(
_im∂
->
iInôülAŒocCñls
 - 
ÆloˇãdCñls
));

88  
dif„ªn˚
 !
_im∂
->
iEx≥˘edLóks
;

90  
ÆloˇãdCñls
 !
_im∂
->
iInôülAŒocCñls
;

91 
	}
}

93 c⁄° * 
	gMem‹yLókW¨nög
::
	$Mesßge
()

96 
	}
}

98 
	gMem‹yLókW¨nög
::
	$Ex≥˘Lóks
(
n
)

100 
_im∂
->
iEx≥˘edLóks
 = 
n
;

101 
	}
}

104 
	gMem‹yLókW¨nög
::
	$Cª©eD©a
()

106 
_im∂
 = 
	`√w
(
ELóve
Ë
	`Mem‹yLókW¨nögD©a
();

107 
	}
}

109 
	gMem‹yLókW¨nög
::
	$De°royD©a
()

111 
dñëe
 
_im∂
;

112 
_im∂
 = 
NULL
;

113 
	}
}

115 
Mem‹yLókW¨nög
* 
	gMem‹yLókW¨nög
::
	$GëL©e°
()

117  
_œã°
;

118 
	}
}

120 
	gMem‹yLókW¨nög
::
	$SëL©e°
(
Mem‹yLókW¨nög
* 
œã°
)

122 
_œã°
 = 
œã°
;

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~<e32def.h
>

30 
	~<e32°d.h
>

31 
	~<sys/time.h
>

32 
	~<°dio.h
>

33 
	~<°d¨g.h
>

34 
	~<°rög.h
>

35 
	~<m©h.h
>

36 
	~<°dlib.h
>

37 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

39 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

41 
TI¡
 
	`îr
(
KEºN⁄e
);

42 
	`TRAP
(
îr
, 
	`ã°Body
());

43 if(
îr
 !
KEºN⁄e
) {

44 
Uã°
::
	`gëCuºít
()->
	`Áû
("Leave inÅest method", "", 0);

46 
	}
}

48 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
() {

49 
U£r
::
	`Lóve
(
KEºN⁄e
);

50 
	}
}

52 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
() {

53 
	`£tup
();

54  
åue
;

55 
	}
}

57 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
) {

58 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

59 
	}
}

61 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
() {

62 
	`ã¨down
();

63 
	}
}

65 
	$TimeInMûlisIm∂emíèti⁄
() {

66 
timevÆ
 
tv
;

67 
timez⁄e
 
tz
;

68 ::
	`gëtimeofday
(&
tv
, &
tz
);

69  (
tv
.
tv_£c
 * 1000Ë+ ()—v.
tv_u£c
 * 0.001);

70 
	}
}

72 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

74 
	$GëPœtf‹mS≥cificTimeInMûlis
() {

75  
	`timeInMûlisFp
();

76 
	}
}

78 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ()) {

79 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

80 
	}
}

84 
Sim∂eSåög
 
	$TimeSåögIm∂emíèti⁄
() {

85 
time_t
 
tm
 = 
	`time
(
NULL
);

86  
	`˘ime
(&
tm
);

87 
	}
}

89 
Sim∂eSåög
 (*
timeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

91 
Sim∂eSåög
 
	$GëPœtf‹mS≥cificTimeSåög
() {

92  
	`timeSåögFp
();

93 
	}
}

95 
SëPœtf‹mS≥cificTimeSåögMëhod
(
	$Sim∂eSåög
 (*
∂©f‹mMëhod
) ()) {

96 
timeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

97 
	}
}

99 
	$Pœtf‹mS≥cificVSN¥ötf
(* 
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
) {

100  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
¨gs
);

101 
	}
}

103 
	$Pœtf‹mS≥cificFlush
() {

104 
	`fÊush
(
°dout
);

105 
	}
}

107 
	$Pœtf‹mS≥cificPutch¨
(
c
) {

108  
	`putch¨
(
c
);

109 
	}
}

111 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
) {

112  
	`°r˝y
(
s1
, 
s2
);

113 
	}
}

115 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
s
) {

116  
	`°æí
(
s
);

117 
	}
}

119 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
) {

120  
	`°r°r
(
s1
, 
s2
);

121 
	}
}

123 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

124  
	`°rcmp
(
s1
, 
s2
);

125 
	}
}

127 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
) {

128  
	`°∫˝y
(
s1
, 
s2
, 
size
);

129 
	}
}

131 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
) {

132  
	`°∫cmp
(
s1
, 
s2
, 
size
);

133 
	}
}

135 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
) {

136  
	`°rˇt
(
s1
, 
s2
);

137 
	}
}

139 
	$Pœtf‹mS≥cificFabs
(
d
) {

140  
	`Ábs
(
d
);

141 
	}
}

143 * 
	$Pœtf‹mS≥cificMÆloc
(
size
) {

144  
	`mÆloc
(
size
);

145 
	}
}

147 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
) {

148  
	`ªÆloc
(
mem‹y
, 
size
);

149 
	}
}

151 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
) {

152 
	`‰ì
(
mem‹y
);

153 
	}
}

155 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
) {

156  
	`mem˝y
(
s1
, 
s2
, 
size
);

157 
	}
}

159 
Pœtf‹mS≥cificAtExô
((*
func
) ()) {

160  
	`©exô
(
func
);

161 
	}
}

163 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
) {

164  
	`f›í
(
fûíame
, 
Êag
);

165 
	}
}

167 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
) {

168 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

169 
	}
}

171 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
) {

172 
	`f˛o£
((
FILE
*)
fûe
);

173 
	}
}

175 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
) {

176  
	`©oi
(
°r
);

177 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp

1 
	~<°dlib.h
>

2 
	~"CµUTe°/Te°H¨√ss.h
"

3 #unde‡
mÆloc


4 #unde‡
‰ì


5 #unde‡
ˇŒoc


6 #unde‡
ªÆloc


8 
	~"CµUTe°/Te°Regi°ry.h
"

9 
	~<°dio.h
>

10 
	~<°d¨g.h
>

11 
	~<£tjmp.h
>

12 
	~<°rög.h
>

13 
	~<m©h.h
>

14 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

16 
	~<wödows.h
>

17 
	~<mmsy°em.h
>

21 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

22 
	gjmp_buf_ödex
 = 0;

24 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

26 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

27 
jmp_buf_ödex
++;

28 
	`£tup
();

29 
jmp_buf_ödex
--;

30  
åue
;

32  
Ál£
;

33 
	}
}

35 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

37 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

38 
jmp_buf_ödex
++;

39 
	`ã°Body
();

40 
jmp_buf_ödex
--;

42 
	}
}

44 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

46 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

47 
jmp_buf_ödex
++;

48 
	`ã¨down
();

49 
jmp_buf_ödex
--;

51 
	}
}

53 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

55 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

56 
jmp_buf_ödex
++;

57 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

58 
jmp_buf_ödex
--;

60 
	}
}

62 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

64 
jmp_buf_ödex
--;

65 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

66 
	}
}

72 
	$TimeInMûlisIm∂emíèti⁄
()

74  
	`timeGëTime
()/1000;

75 
	}
}

77 (*
	gtimeInMûlisFp
Ë(Ë
TimeInMûlisIm∂emíèti⁄
;

79 
	$GëPœtf‹mS≥cificTimeInMûlis
()

81  
	`timeInMûlisFp
();

82 
	}
}

84 
SëPœtf‹mS≥cificTimeInMûlisMëhod
((*
∂©f‹mS≥cific
) ())

86 
timeInMûlisFp
 = (
∂©f‹mS≥cific
 =0Ë? 
TimeInMûlisIm∂emíèti⁄
 :ÖlatformSpecific;

87 
	}
}

91 c⁄° * 
	$TimeSåögIm∂emíèti⁄
()

94 
	}
}

96 c⁄° * (*
	gtimeSåögFp
Ë(Ë
TimeSåögIm∂emíèti⁄
;

98 c⁄° * 
	$GëPœtf‹mS≥cificTimeSåög
()

100  
	`timeSåögFp
();

101 
	}
}

103 
SëPœtf‹mS≥cificTimeSåögMëhod
(c⁄° * (*
∂©f‹mMëhod
) ())

105 
	gtimeSåögFp
 = (
∂©f‹mMëhod
 =0Ë? 
TimeSåögIm∂emíèti⁄
 :ÖlatformMethod;

111 
	$Pœtf‹mS≥cificAtoI
(c⁄° *
°r
)

113  
	`©oi
(
°r
);

114 
	}
}

116 
	$Pœtf‹mS≥cificSåLí
(c⁄° * 
°r
)

118  
	`°æí
(
°r
);

119 
	}
}

121 * 
	$Pœtf‹mS≥cificSåC©
(* 
s1
, c⁄° * 
s2
)

123  
	`°rˇt
(
s1
, 
s2
);

124 
	}
}

126 * 
	$Pœtf‹mS≥cificSåCpy
(* 
s1
, c⁄° * 
s2
)

128  
	`°r˝y
(
s1
, 
s2
);

129 
	}
}

131 * 
	$Pœtf‹mS≥cificSåNCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

133  
	`°∫˝y
(
s1
, 
s2
, 
size
);

134 
	}
}

136 
	$Pœtf‹mS≥cificSåCmp
(c⁄° * 
s1
, c⁄° * 
s2
)

138  
	`°rcmp
(
s1
, 
s2
);

139 
	}
}

141 
	$Pœtf‹mS≥cificSåNCmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
size
)

143  
	`°∫cmp
(
s1
, 
s2
, 
size
);

144 
	}
}

145 * 
	$Pœtf‹mS≥cificSåSå
(c⁄° * 
s1
, c⁄° * 
s2
)

147  (*Ë
	`°r°r
(
s1
, 
s2
);

148 
	}
}

150 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, 
va_li°
 
¨gs
)

152 * 
buf
 = 0;

153 
sizeGuess
 = 
size
;

155 
ªsu…
 = 
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, 
¨gs
);

156 
°r
[
size
-1] = 0;

157 
ªsu…
 == -1)

159 i‡(
buf
 != 0)

160 
	`‰ì
(
buf
);

161 
sizeGuess
 += 10;

162 
buf
 = (*)
	`mÆloc
(
sizeGuess
);

163 
ªsu…
 = 
	`_v¢¥ötf
–
buf
, 
sizeGuess
, 
f‹m©
, 
¨gs
);

166 i‡(
buf
 != 0)

167 
	`‰ì
(
buf
);

168  
ªsu…
;

170 
	}
}

172 
Pœtf‹mS≥cificFûe
 
	$Pœtf‹mS≥cificFO≥n
(c⁄° * 
fûíame
, c⁄° * 
Êag
)

174  
	`f›í
(
fûíame
, 
Êag
);

175 
	}
}

177 
	$Pœtf‹mS≥cificFPuts
(c⁄° * 
°r
, 
Pœtf‹mS≥cificFûe
 
fûe
)

179 
	`Âuts
(
°r
, (
FILE
*)
fûe
);

180 
	}
}

182 
	$Pœtf‹mS≥cificFClo£
(
Pœtf‹mS≥cificFûe
 
fûe
)

184 
	`f˛o£
((
FILE
*)
fûe
);

185 
	}
}

187 
	$Pœtf‹mS≥cificFlush
()

189 
	`fÊush
(
°dout
);

190 
	}
}

192 
	$Pœtf‹mS≥cificPutch¨
(
c
)

194  
	`putch¨
(
c
);

195 
	}
}

197 * 
	$Pœtf‹mS≥cificMÆloc
(
size
)

199  
	`mÆloc
(
size
);

200 
	}
}

202 * 
	$Pœtf‹mS≥cificRóŒoc
 (* 
mem‹y
, 
size
)

204  
	`ªÆloc
(
mem‹y
, 
size
);

205 
	}
}

207 
	$Pœtf‹mS≥cificFªe
(* 
mem‹y
)

209 
	`‰ì
(
mem‹y
);

210 
	}
}

212 * 
	$Pœtf‹mS≥cificMemCpy
(* 
s1
, c⁄° * 
s2
, 
size
)

214  
	`mem˝y
(
s1
, 
s2
, 
size
);

215 
	}
}

217 
Pœtf‹mS≥cificAtExô
((*
func
) ())

219  
	`©exô
(
func
);

220 
	}
}

222 
	$Pœtf‹mS≥cificFabs
(
d
)

224  
	`Ábs
(
d
);

225 
	}
}

235 
	gTe°Regi°ry
::
	$∂©f‹mS≥cificRunO√Te°
(
Uã°
* 
ã°
, 
Te°Resu…
& 
ªsu…
)

237 
åy
 {

238 
	`runO√Te°
(
ã°
, 
ªsu…
) ;

240 
	`ˇtch
 () {

244 
	}
}

246 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

248 
	`ã°Body
();

249 
	}
}

251 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

253 
	`throw
(1);

254 
	}
}

258 
	$Pœtf‹mS≥cificVSN¥ötf
(*
°r
, 
size
, c⁄° * 
f‹m©
, * 
¨gs
)

260  
	`_v¢¥ötf
–
°r
, 
size
, 
f‹m©
, (
va_li°
Ë
¨gs
);

261 
	}
}

266 
	~<£tjmp.h
>

268 
jmp_buf
 
	gã°_exô_jmp_buf
[10];

269 
	gjmp_buf_ödex
 = 0;

271 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

273 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

274 
jmp_buf_ödex
++;

275 
	`£tup
();

276 
jmp_buf_ödex
--;

277  
åue
;

279  
Ál£
;

280 
	}
}

282 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

284 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

285 
jmp_buf_ödex
++;

286 
	`ã°Body
();

287 
jmp_buf_ödex
--;

289 
	}
}

291 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

293 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

294 
jmp_buf_ödex
++;

295 
	`ã¨down
();

296 
jmp_buf_ödex
--;

298 
	}
}

300 
	gUã°
::
	$execuãPœtf‹mS≥cificRunO√Te°
(
Te°Plugö
* 
∂ugö
, 
Te°Resu…
& 
ªsu…
)

302 i‡(0 =
	`£tjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
])) {

303 
jmp_buf_ödex
++;

304 
	`runO√Te°
(
∂ugö
, 
ªsu…
);

305 
jmp_buf_ödex
--;

307 
	}
}

310 
	gUã°
::
	$execuãPœtf‹mS≥cificExôCuºítTe°
()

312 
jmp_buf_ödex
--;

313 
	`l⁄gjmp
(
ã°_exô_jmp_buf
[
jmp_buf_ödex
], 1);

314 
	}
}

330 
boﬁ
 
	gUã°
::
	$execuãPœtf‹mS≥cificSëup
()

332 
åy
 {

333 
	`£tup
();

335 
	`ˇtch
 () {

336  
Ál£
;

338  
åue
;

339 
	}
}

341 
	gUã°
::
	$execuãPœtf‹mS≥cificTe°Body
()

343 
åy
 {

344 
	`ã°Body
();

346 
	`ˇtch
 () {

349 
	}
}

351 
	gUã°
::
	$execuãPœtf‹mS≥cificTórdown
()

353 
åy
 {

354 
	`ã¨down
();

356 
	`ˇtch
 () {

359 
	}
}

361 
	$Pœtf‹mS≥cificExôCuºítTe°Im∂
()

363 
	`throw
(1);

364 
	}
}

367 (*
	gPœtf‹mS≥cificExôCuºítTe°
)(Ë
Pœtf‹mS≥cificExôCuºítTe°Im∂
;

369 
	$FakePœtf‹mS≥cificExôCuºítTe°
()

371 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	$maö
(
ac
, c⁄° ** 
av
)

32  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

33 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.h

29 
IMPORT_TEST_GROUP
–
Uã°
);

30 
IMPORT_TEST_GROUP
–
Faûuª
);

31 
IMPORT_TEST_GROUP
–
Te°Ouçut
);

32 
IMPORT_TEST_GROUP
–
Sim∂eSåög
);

33 
IMPORT_TEST_GROUP
–
Te°In°ÆÀr
);

34 
IMPORT_TEST_GROUP
–
NuŒTe°
);

35 
IMPORT_TEST_GROUP
–
Mem‹yLókW¨nögTe°
);

36 
IMPORT_TEST_GROUP
–
Te°H¨√ss_c
);

37 
IMPORT_TEST_GROUP
–
Comm™dLöeTe°Ru¬î
);

38 
IMPORT_TEST_GROUP
–
JUnôOuçutTe°
);

39 
IMPORT_TEST_GROUP
–
Mem‹yLókDëe˘‹Te°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCFile.c

1 
	~<°dlib.h
>

2 
	~"AŒoˇti⁄InCFûe.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

7 * 
	$mÆlocAŒoˇti⁄
()

9  
	`mÆloc
(10UL);

10 
	}
}

12 
	$‰ìAŒoˇti⁄
(* 
mem‹y
)

14 
	`‰ì
(
mem‹y
);

15 
	}
}

17 #unde‡
‰ì


19 
	$‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
)

21 
	`‰ì
(
mem‹y
);

22 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCFile.h

1 #i‚de‡
ALLOCATIONINCFILE_H


2 
	#ALLOCATIONINCFILE_H


	)

4 * 
mÆlocAŒoˇti⁄
();

5 
‰ìAŒoˇti⁄
(* 
mem‹y
);

6 
‰ìAŒoˇti⁄WôhoutMa¸o
(* 
mem‹y
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCppFile.cpp

4 #unde‡
√w


5 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

7 * 
	$√wAŒoˇti⁄
()

9  
√w
 ;

10 
	}
}

12 * 
	$√wAºayAŒoˇti⁄
()

14  
√w
 [100];

15 
	}
}

17 #unde‡
√w


19 * 
	$√wAŒoˇti⁄WôhoutMa¸o
()

21  
√w
 ;

22 
	}
}

24 * 
	$√wAºayAŒoˇti⁄WôhoutMa¸o
()

26  
√w
 [100];

27 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCppFile.h

1 #i‚de‡
ALLOCATIONINCPPFILE_H


2 
	#ALLOCATIONINCPPFILE_H


	)

4 * 
√wAŒoˇti⁄
();

5 * 
√wAºayAŒoˇti⁄
();

7 * 
√wAŒoˇti⁄WôhoutMa¸o
();

8 * 
√wAºayAŒoˇti⁄WôhoutMa¸o
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineArgumentsTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeArgumíts.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

32 ˛as†
	cO±i⁄sPlugö
: 
public
 
Te°Plugö


34 
public
:

35 
	$O±i⁄sPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

36 
	$Te°Plugö
(
«me
)

40 ~
	$O±i⁄sPlugö
()

42 
	}
}

44 
boﬁ
 
	$∑r£Argumíts
(
ac
, c⁄° ** 
av
, 
ödex
)

46  
åue
;

47 
	}
}

51 
	$TEST_GROUP
(
Comm™dLöeArgumíts
)

52 { 
Comm™dLöeArgumíts
* 
¨gs
;

53 
O±i⁄sPlugö
* 
∂ugö
;

55 
	`£tup
()

57 
∂ugö
 = 
√w
 
	`O±i⁄sPlugö
("options");

59 
	`ã¨down
()

61 
dñëe
 
¨gs
;

62 
dñëe
 
∂ugö
;

65 
boﬁ
 
	`√wArgumítP¨£r
(
¨gc
, c⁄° ** 
¨gv
)

67 
¨gs
 = 
√w
 
	`Comm™dLöeArgumíts
(
¨gc
, 
¨gv
, 
∂ugö
);

68  
¨gs
->
	`∑r£
();

70 
	}
};

72 
	$TEST
(
Comm™dLöeArgumíts
, 
Cª©e
)

74 
	}
}

76 
	$TEST
(
Comm™dLöeArgumíts
, 
vîbo£SëMu…ùÀP¨amëîs
)

78 c⁄° * 
¨gv
[] = { "tests.exe", "-v" };

79 
	`CHECK
(
	`√wArgumítP¨£r
(2, 
¨gv
));

80 
	`CHECK
(
¨gs
->
	`isVîbo£
());

81 
	}
}

83 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©Së
)

85 
¨gc
 = 2;

86 c⁄° * 
¨gv
[] = { "tests.exe", "-r3" };

87 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

88 
	`LONGS_EQUAL
(3, 
¨gs
->
	`gëRïótCou¡
());

89 
	}
}

91 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDif„ª¡P¨amëî
)

93 
¨gc
 = 3;

94 c⁄° * 
¨gv
[] = { "tests.exe", "-r", "4" };

95 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

96 
	`LONGS_EQUAL
(4, 
¨gs
->
	`gëRïótCou¡
());

97 
	}
}

99 
	$TEST
(
Comm™dLöeArgumíts
, 
ª≥©SëDeÁu…sToTwo
)

101 
¨gc
 = 2;

102 c⁄° * 
¨gv
[] = { "tests.exe", "-r" };

103 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

104 
	`LONGS_EQUAL
(2, 
¨gs
->
	`gëRïótCou¡
());

105 
	}
}

107 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãr
)

109 
¨gc
 = 3;

110 c⁄° * 
¨gv
[] = { "tests.exe", "-g", "group" };

111 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

112 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

113 
	}
}

115 
	$TEST
(
Comm™dLöeArgumíts
, 
£tGroupFûãrSameP¨amëî
)

117 
¨gc
 = 2;

118 c⁄° * 
¨gv
[] = { "tests.exe", "-ggroup" };

119 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

120 
	`STRCMP_EQUAL
("group", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

121 
	}
}

123 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãr
)

125 
¨gc
 = 3;

126 c⁄° * 
¨gv
[] = { "tests.exe", "-n", "name" };

127 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

128 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

129 
	}
}

131 
	$TEST
(
Comm™dLöeArgumíts
, 
£tNameFûãrSameP¨amëî
)

133 
¨gc
 = 2;

134 c⁄° * 
¨gv
[] = { "tests.exe", "-nname" };

135 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

136 
	`STRCMP_EQUAL
("«me", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

137 
	}
}

139 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçut
)

141 
¨gc
 = 2;

142 c⁄° * 
¨gv
[] = { "tests.exe", "-onormal" };

143 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

144 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

145 
	}
}

147 
	$TEST
(
Comm™dLöeArgumíts
, 
£tE˛sùeOuçut
)

149 
¨gc
 = 2;

150 c⁄° * 
¨gv
[] = { "tests.exe", "-oeclipse" };

151 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

152 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

153 
	}
}

155 
	$TEST
(
Comm™dLöeArgumíts
, 
£tN‹mÆOuçutDif„ª¡P¨amëî
)

157 
¨gc
 = 3;

158 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "normal" };

159 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

160 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

161 
	}
}

163 
	$TEST
(
Comm™dLöeArgumíts
, 
£tJUnôOuçutDif„ª¡P¨amëî
)

165 
¨gc
 = 3;

166 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "junit" };

167 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

168 
	`CHECK
(
¨gs
->
	`isJUnôOuçut
());

169 
	}
}

171 
	$TEST
(
Comm™dLöeArgumíts
, 
£tOuçutToG¨bage
)

173 
¨gc
 = 3;

174 c⁄° * 
¨gv
[] = { "tests.exe", "-o", "garbage" };

175 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

176 
	}
}

178 
	$TEST
(
Comm™dLöeArgumíts
, 
weúdP¨am©îsPrötsUßgeAndRëu∫sFÆ£
)

180 
¨gc
 = 2;

181 c⁄° * 
¨gv
[] = { "tests.exe", "-SomethingWeird" };

182 
	`CHECK
(!
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

183 
	`STRCMP_EQUAL
("usage [-v] [-r#] [-g groupName] [-nÅestName] [-o{normal, junit}]\n",

184 
¨gs
->
	`ußge
());

185 
	}
}

187 
	$TEST
(
Comm™dLöeArgumíts
, 
∂ugöKnowsO±i⁄
)

189 
¨gc
 = 2;

190 c⁄° * 
¨gv
[] = { "tests.exe", "-pPluginOption" };

191 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(
∂ugö
);

192 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

193 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ªmovePlugöByName
("options");

194 
	}
}

196 
	$TEST
(
Comm™dLöeArgumíts
, 
checkDeÁu…Argumíts
)

198 
¨gc
 = 1;

199 c⁄° * 
¨gv
[] = { "tests.exe" };

200 
	`CHECK
(
	`√wArgumítP¨£r
(
¨gc
, 
¨gv
));

201 
	`CHECK
(!
¨gs
->
	`isVîbo£
());

202 
	`LONGS_EQUAL
(1, 
¨gs
->
	`gëRïótCou¡
());

203 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëGroupFûãr
().
	`asCh¨Såög
());

204 
	`STRCMP_EQUAL
("", 
¨gs
->
	`gëNameFûãr
().
	`asCh¨Såög
());

205 
	`CHECK
(
¨gs
->
	`isE˛ù£Ouçut
());

206 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineTestRunnerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Te°Plugö.h
"

34 
	$TEST_GROUP
(
Comm™dLöeTe°Ru¬î
)

36 
	`£tup
()

39 
	`ã¨down
()

42 
	}
};

44 
	$IGNORE_TEST
(
Comm™dLöeTe°Ru¬î
, 
HmmmmWh©ToWrôe
)

47 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\AllTests.cpp

28 
	~"CµUTe°/Comm™dLöeTe°Ru¬î.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

33 
	$maö
(
ac
, c⁄° ** 
av
)

35 
Mem‹yRï‹ãrPlugö
 
∂ugö
;

36 
MockSuµ‹tPlugö
 
mockPlugö
;

37 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
∂ugö
);

38 
Te°Regi°ry
::
	`gëCuºítRegi°ry
()->
	`ö°ÆlPlugö
(&
mockPlugö
);

39  
Comm™dLöeTe°Ru¬î
::
	`RunAŒTe°s
(
ac
, 
av
);

40 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\AllTests.h

29 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/CodeMem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
CodeMem‹yRï‹tF‹m©ãr
)

38 
Mem‹yLókAŒoˇt‹
* 
cAŒoˇt‹
;

39 
Mem‹yLókAŒoˇt‹
* 
√wAŒoˇt‹
;

40 
Mem‹yLókAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

41 * 
mem‹y01
;

42 * 
mem‹y02
;

44 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

45 
Te°Resu…
* 
ã°Resu…
;

46 
CodeMem‹yRï‹tF‹m©ãr
* 
f‹m©ãr
;

48 
	`£tup
()

50 
cAŒoˇt‹
 = 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

51 
√wAŒoˇt‹
 = 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

52 
√wAºayAŒoˇt‹

Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
();

53 
mem‹y01
 = (*) 0x01;

54 
mem‹y02
 = (*) 0x02;

56 
f‹m©ãr
 = 
√w
 
	`CodeMem‹yRï‹tF‹m©ãr
(
cAŒoˇt‹
);

57 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

60 
	`ã¨down
()

62 
dñëe
 
ã°Resu…
;

63 
dñëe
 
f‹m©ãr
;

65 
	}
};

68 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

70 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

71 
	`TESTOUPUT_EQUAL
("\tvoid* file_9_1 = malloc(10);\n");

72 
	}
}

74 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

76 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 9);

77 
ã°Ouçut
.
	`Êush
();

78 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "boo", 6);

79 
	`TESTOUPUT_EQUAL
("\tfree(file_9_1); /*át boo:6 */\n");

80 
	}
}

82 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
twoMÆlocAndTwoFªe
)

84 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 2);

85 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "boo", 4);

86 
ã°Ouçut
.
	`Êush
();

87 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y01
, "foo", 6);

88 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 
mem‹y02
, "bar", 8);

89 
	`TESTOUPUT_CONTAINS
("\tfree(file_2_1); /*át foo:6 */\n");

90 
	`TESTOUPUT_CONTAINS
("\tfree(boo_4_1); /*át bar:8 */\n");

91 
	}
}

93 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöSœh£s
)

95 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "dir/file", 2);

96 
	`TESTOUPUT_CONTAINS
("\tvoid* file_2");

97 
	}
}

99 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
v¨übÀNamesShouldNŸC⁄èöDŸButU£Undîsc‹e
)

101 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "foo.cpp", 2);

102 
	`TESTOUPUT_CONTAINS
("foo_cpp");

103 
	}
}

105 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayAŒoˇt‹Gíî©esNewAºayCode
)

107 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

108 
	`TESTOUPUT_CONTAINS
("char* file_8_1 =Çew char[10]; /* usingÇew [] */");

109 
	}
}

111 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
√wAºayGíî©esNewCode
)

113 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 6, 
mem‹y01
, "file", 4);

114 
	`TESTOUPUT_CONTAINS
("new char[6]; /* usingÇew */");

115 
	}
}

117 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAŒoˇt‹Gíî©esDñëeCode
)

119 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

120 
ã°Ouçut
.
	`Êush
();

121 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
mem‹y01
, "boo", 4);

122 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using deleteát boo:4 */");

123 
	}
}

125 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
DñëeNuŒW‹ksFöe
)

127 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 
NULL
, "boo", 4);

128 
	`TESTOUPUT_CONTAINS
("delete [] NULL; /* using deleteát boo:4 */");

129 
	}
}

131 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
NewAºayAŒoˇt‹Gíî©esDñëeAºayCode
)

133 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

134 
ã°Ouçut
.
	`Êush
();

135 
f‹m©ãr
->
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
√wAºayAŒoˇt‹
, 
mem‹y01
, "boo", 4);

136 
	`TESTOUPUT_CONTAINS
("delete [] file_8_1; /* using delete []át boo:4 */");

137 
	}
}

139 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögMÆlocOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

141 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

142 
ã°Ouçut
.
	`Êush
();

143 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
cAŒoˇt‹
, 10, 
mem‹y02
, "file", 8);

144 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

145 
	}
}

147 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eTheSameV¨übÀTwi˚
)

149 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

150 
ã°Ouçut
.
	`Êush
();

151 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

152 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("2"));

153 
	}
}

155 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Æloˇti⁄UsögNewcOnTheSameLöeD€¢tGíî©eV¨übÀTwi˚Ex˚±WhíInANewTe°
)

157 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

158 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, *
this
);

159 
ã°Ouçut
.
	`Êush
();

160 
f‹m©ãr
->
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
√wAŒoˇt‹
, 10, 
mem‹y01
, "file", 8);

161 
	`CHECK
(
ã°Ouçut
.
	`gëOuçut
().
	`c⁄èös
("char*"));

162 
	}
}

164 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°SèπGíî©esTESTcode
)

166 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

167 
f‹m©ãr
->
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

168 
	`TESTOUPUT_EQUAL
("*/\nTEST(groupName_memoryReport,ÅestName)\n{ /*át fileName:1 */\n");

169 
	}
}

171 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
ã°EndGíî©esTESTcode
)

173 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

174 
f‹m©ãr
->
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

175 
	`TESTOUPUT_EQUAL
("}/*");

176 
	}
}

178 
	$TEST
(
CodeMem‹yRï‹tF‹m©ãr
, 
Te°GroupGíî©esTe°GroupCode
)

180 
Uã°
 
	`ã°
("groupName", "testName", "fileName", 1);

181 
f‹m©ãr
->
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

182 
	`TESTOUPUT_EQUAL
("*/TEST_GROUP(groupName_memoryReport)\n{\n};\n/*");

183 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	$TEST_GROUP
(
Mem‹yRï‹tAŒoˇt‹
)

35 
	}
};

37 
	$TEST
(
Mem‹yRï‹tAŒoˇt‹
, 
Fun˘i⁄sAªF‹w¨dedF‹MÆlocAŒoˇt‹
)

39 
Mem‹yRï‹tAŒoˇt‹
 
Æloˇt‹
;

40 
Æloˇt‹
.
	`£tRólAŒoˇt‹
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

42 
	`CHECK
(
Sènd¨dMÆlocAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆloˇãMem‹yLókNodeSï¨©ñy
(Ë=
Æloˇt‹
.allocateMemoryLeakNodeSeparately());

44 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹tAŒoˇt‹.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

33 
	#TESTOUPUT_EQUAL
(
a
Ë
	`STRCMP_EQUAL_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

34 
	#TESTOUPUT_CONTAINS
(
a
Ë
	`STRCMP_CONTAINS_LOCATION
◊, 
ã°Ouçut
.
	`gëOuçut
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
);

	)

36 
	$TEST_GROUP
(
N‹mÆMem‹yRï‹tF‹m©ãr
)

38 * 
mem‹y01
;

40 
SåögBuf„rTe°Ouçut
 
ã°Ouçut
;

41 
Te°Resu…
* 
ã°Resu…
;

42 
N‹mÆMem‹yRï‹tF‹m©ãr
 
f‹m©ãr
;

44 
	`£tup
()

46 
mem‹y01
 = (*) 0x01;

47 
ã°Resu…
 = 
√w
 
	`Te°Resu…
(
ã°Ouçut
);

50 
	`ã¨down
()

52 
dñëe
 
ã°Resu…
;

54 
	}
};

57 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
mÆlocCª©esAnMÆlocCÆl
)

59 
f‹m©ãr
.
	`ªp‹t_Æloc_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 10, 
mem‹y01
, "file", 9);

60 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tAŒoˇti⁄ usög mÆlo¯o‡size: 10Öoöãr: %∞© fûe:9\n", 
mem‹y01
).
	`asCh¨Såög
());

61 
	}
}

63 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
‰ìCª©esAnFªeCÆl
)

65 
f‹m©ãr
.
	`ªp‹t_‰ì_mem‹y
(
ã°Resu…
, 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem‹y01
, "boo", 6);

66 
	`TESTOUPUT_EQUAL
(
	`SåögFromF‹m©
("\tDóŒoˇti⁄ usög fªêo‡poöãr: %∞© boo:6\n", 
mem‹y01
).
	`asCh¨Såög
());

67 
	}
}

69 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Sèπs
)

71 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

72 
f‹m©ãr
.
	`ªp‹t_ã°_°¨t
(
ã°Resu…
, 
ã°
);

73 
	`TESTOUPUT_EQUAL
("TEST(groupName, TestName)\n");

74 
	}
}

76 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°Ends
)

78 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

79 
f‹m©ãr
.
	`ªp‹t_ã°_íd
(
ã°Resu…
, 
ã°
);

80 
	`TESTOUPUT_EQUAL
("ENDTEST(groupName, TestName)\n");

81 
	}
}

83 
	$TEST
(
N‹mÆMem‹yRï‹tF‹m©ãr
, 
ã°GroupSèπs
)

85 
Uã°
 
	`ã°
("groupName", "TestName", "file", 1);

86 
f‹m©ãr
.
	`ªp‹t_ã°group_°¨t
(
ã°Resu…
, 
ã°
);

87 
	`TESTOUPUT_EQUAL
("------------------------------TEST GROUP(groupName)-----------------------------\n");

88 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°Ext/Mem‹yRï‹ãrPlugö.h
"

31 
	~"CµUTe°Ext/Mem‹yRï‹tF‹m©ãr.h
"

32 
	~"CµUTe°Ext/MockSuµ‹t.h
"

33 
	~"CµUTe°Ext/MockNamedVÆue.h
"

35 
Mem‹yLókAŒoˇt‹
* 
	g¥eviousNewAŒoˇt‹
;

37 ˛as†
	cTemp‹¨yDeÁu…NewAŒoˇt‹


39 
Mem‹yLókAŒoˇt‹
* 
	m√wAŒoˇt‹
;

40 
	mpublic
:

41 
	$Temp‹¨yDeÁu…NewAŒoˇt‹
(
Mem‹yLókAŒoˇt‹
* 
ﬁdAŒoˇt‹
)

43 
√wAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

44 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
ﬁdAŒoˇt‹
);

46 ~
	$Temp‹¨yDeÁu…NewAŒoˇt‹
()

48 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
√wAŒoˇt‹
);

49 
	}
}

52 ˛as†
	cMockMem‹yRï‹tF‹m©ãr
 : 
public
 
Mem‹yRï‹tF‹m©ãr


54 
public
:

55 
vútuÆ
 
	$ªp‹t_ã°group_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

57 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

58 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

61 
vútuÆ
 
	$ªp‹t_ã°group_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

63 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

64 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

65 
	}
}

67 
vútuÆ
 
	$ªp‹t_ã°_°¨t
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

69 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

70 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

71 
	}
}

73 
vútuÆ
 
	$ªp‹t_ã°_íd
(
Te°Resu…
* 
ªsu…
, 
Uã°
& 
ã°
)

75 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

76 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
ã°
);

77 
	}
}

79 
vútuÆ
 
	$ªp‹t_Æloc_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, 
size_t
, * , const * , )

81 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

82 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

83 
	}
}

85 
vútuÆ
 
	$ªp‹t_‰ì_mem‹y
(
Te°Resu…
* 
ªsu…
, 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
, * , const * , )

87 
Temp‹¨yDeÁu…NewAŒoˇt‹
 
	`ãmpAŒoc
(
¥eviousNewAŒoˇt‹
);

88 
	`mock
("f‹m©ãr").
	`a˘uÆCÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Æloˇt‹
);

89 
	}
}

92 
MockMem‹yRï‹tF‹m©ãr
 
	gf‹m©ãrF‹PlugöTe°
;

94 ˛as†
	cMem‹yRï‹ãrPlugöUndîTe°
 : 
public
 
Mem‹yRï‹ãrPlugö


96 
public
:

97 
Mem‹yRï‹tF‹m©ãr
* 
	$¸óãMem‹yF‹m©ãr
(c⁄° 
Sim∂eSåög
& 
ty≥
)

99 
	`mock
("ªp‹ãr").
	`a˘uÆCÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
this
).
	`wôhP¨amëî
("ty≥", 
ty≥
.
	`asCh¨Såög
());

100  
√w
 
MockMem‹yRï‹tF‹m©ãr
;

102 
	}
};

104 ˛as†
	cMem‹yLókAŒoˇt‹Com∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


106 
public
:

107 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

109  ((
Mem‹yLókAŒoˇt‹
*)
obje˘1
)->
	`«me
(Ë=((Mem‹yLókAŒoˇt‹*)
obje˘2
)->name();

111 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

113  ((
Mem‹yLókAŒoˇt‹
*)
obje˘
)->
	`«me
();

114 
	}
}

118 
	$TEST_GROUP
(
Mem‹yRï‹ãrPlugö
)

120 
Mem‹yRï‹ãrPlugöUndîTe°
* 
ªp‹ãr
;

121 
SåögBuf„rTe°Ouçut
 
ouçut
;

122 
Mem‹yLókAŒoˇt‹Com∑øt‹
 
memLókAŒoˇt‹Com∑øt‹
;

124 
Te°Resu…
* 
ªsu…
;

125 
Uã°
* 
ã°
;

127 
	`£tup
()

129 
¥eviousNewAŒoˇt‹
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
();

130 
ªsu…
 = 
√w
 
	`Te°Resu…
(
ouçut
);

131 
ã°
 = 
√w
 
	`Uã°
("groupname", "testname", "filename", 1);

132 
ªp‹ãr
 = 
√w
 
Mem‹yRï‹ãrPlugöUndîTe°
;

134 
	`mock
("f‹m©ãr").
	`ö°ÆlCom∑øt‹
("Mem‹yLókAŒoˇt‹", 
memLókAŒoˇt‹Com∑øt‹
);

136 
	`mock
("ªp‹ãr").
	`dißbÀ
();

137 c⁄° *
cmd_löe
[] = {"-pmemoryreport=normal"};

138 
ªp‹ãr
->
	`∑r£Argumíts
(1, 
cmd_löe
, 0);

139 
	`mock
("ªp‹ãr").
	`íabÀ
();

143 
	`ã¨down
()

145 
dñëe
 
ªp‹ãr
;

146 
dñëe
 
ã°
;

147 
dñëe
 
ªsu…
;

149 
	}
};

151 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
offRï‹tsNŸhög
)

153 
Mem‹yRï‹ãrPlugöUndîTe°
 
‰eshRï‹ãr
;

154 
‰eshRï‹ãr
.
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

155 * 
mem‹y
 = 
√w
 ;

156 
dñëe
 
mem‹y
;

157 
‰eshRï‹ãr
.
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

158 
	}
}

160 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mónögÀssArgumítsAªIgn‹ed
)

162 c⁄° *
cmd_löe
[] = {"-nothing", "-pnotmemoryreport=normal", "alsomeaningless", "-pmemoryreportnonsensebutnotus"};

163 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1Ë=
Ál£
);

164 
	}
}

166 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
comm™dLöeP¨amëîTu∫sOnN‹mÆLoggög
)

168 
	`mock
("ªp‹ãr").
	`ex≥˘O√CÆl
("¸óãMem‹yF‹m©ãr").
	`⁄Obje˘
(
ªp‹ãr
).
	`wôhP¨amëî
("type", "normal");

170 c⁄° *
cmd_löe
[] = {"-nothing", "-pmemoryreport=normal", "alsomeaningless" };

171 
	`CHECK
(
ªp‹ãr
->
	`∑r£Argumíts
(3, 
cmd_löe
, 1));

172 
	}
}

174 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eTe°A˘i⁄Rï‹tsTe°
)

176 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

177 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

178 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

179 
	}
}

181 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°Te°A˘i⁄Rï‹tsTe°
)

183 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

184 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);;

186 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

187 
	}
}

189 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAŒoˇti⁄sAªRï‹ãdTe°
)

191 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

192 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

193 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

195 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

196 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

197 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

198 
	}
}

200 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
whíUsögO∆yMÆlocAŒoˇt‹NoOthîOfTheAŒoˇt‹sAªU£d
)

202 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

203 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

204 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

205 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

207 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

208 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

209 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

210 
	}
}

212 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
√wAºayAŒoˇti⁄sAªRï‹ãdTe°
)

214 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

215 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

216 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

218 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

219 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

220 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

221 
	}
}

223 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
mÆlocAŒoˇti⁄sAªRï‹ãdTe°
)

225 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_Æloc_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

226 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_‰ì_mem‹y").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).
	`wôhP¨amëîOfTy≥
("Mem‹yLókAŒoˇt‹", "Æloˇt‹", 
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
());

227 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

229 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

230 *
mem‹y
 = 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`ÆlocMem‹yLókNode
(100);

231 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
()->
	`‰ì_mem‹y
(
mem‹y
, "unknown", 1);

232 
	}
}

234 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
°¨tOfANewTe°WûlRï‹tTheTe°GroupSèπ
)

236 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

237 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

238 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

239 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_°¨t").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

240 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", 
ã°
);

241 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

243 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

244 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

245 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

246 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

247 
	}
}

249 ˛as†
	cUã°F‹Mem‹yRï‹tögPlugögTe°
 : 
public
 
Uã°


251 
public
:

252 
	$Uã°F‹Mem‹yRï‹tögPlugögTe°
(c⁄° * 
grou≤ame
, 
Uã°
* 
ã°
Ë: 
	`Uã°
(groupname, "testname", "filename", 1,Åest)

256 
	}
};

258 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
ídOÁTe°GroupWûlRï‹tSo
)

260 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fouπhTe°
("dif„ª¡GroupName", 
NULL
);

261 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`thúdTe°
("dif„ª¡GroupName", &
fouπhTe°
);

262 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`£c⁄dTe°
("grou≤ame", &
thúdTe°
);

263 
Uã°F‹Mem‹yRï‹tögPlugögTe°
 
	`fú°Te°
("grou≤ame", &
£c⁄dTe°
);

265 
	`mock
("f‹m©ãr").
	`ex≥˘O√CÆl
("ªp‹t_ã°group_íd").
	`wôhP¨amëî
("ªsu…", 
ªsu…
).wôhP¨amëî("ã°", &
£c⁄dTe°
);

266 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

268 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
fú°Te°
, *
ªsu…
);

269 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
fú°Te°
, *
ªsu…
);

270 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

271 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
£c⁄dTe°
, *
ªsu…
);

272 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(
thúdTe°
, *
ªsu…
);

273 
ªp‹ãr
->
	`po°Te°A˘i⁄
(
thúdTe°
, *
ªsu…
);

274 
	}
}

276 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
¥eA˘i⁄Rïœ˚sAŒoˇt‹s
)

278 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

280 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

281 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

282 
	`CHECK
(
Æloˇt‹
 !
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

283 
	}
}

285 
	$TEST
(
Mem‹yRï‹ãrPlugö
, 
po°A˘i⁄Re°‹esAŒoˇt‹s
)

287 
	`mock
("f‹m©ãr").
	`ign‹eOthîCÆls
();

289 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
 = Mem‹yLókAŒoˇt‹::
	`gëCuºítMÆlocAŒoˇt‹
();

290 
ªp‹ãr
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

291 
ªp‹ãr
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

292 
	`CHECK
(
Æloˇt‹
 =
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

293 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockA˘uÆFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"CµUTe°Ext/MockFaûuª.h
"

33 
	~"Te°MockFaûuª.h
"

35 
	$TEST_GROUP
(
MockA˘uÆFun˘i⁄CÆl
)

37 
MockEx≥˘edFun˘i⁄sLi°
* 
em±yLi°
;

38 
MockEx≥˘edFun˘i⁄sLi°
* 
li°
;

39 
MockFaûuªRï‹ãr
* 
ªp‹ãr
;

41 
	`£tup
()

43 
em±yLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

45 
ªp‹ãr
 = 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
();

48 
	`ã¨down
()

50 
	`CHECK_NO_MOCK_FAILURE
();

51 
dñëe
 
em±yLi°
;

52 
dñëe
 
li°
;

54 
	}
};

56 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edCÆl
)

58 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
em±yLi°
);

59 
a˘uÆCÆl
.
	`wôhName
("unexpected");

61 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "u√x≥˘ed", *
li°
);

62 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

63 
	}
}

65 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
unEx≥˘edP¨amëîName
)

67 
MockEx≥˘edFun˘i⁄CÆl
 
ˇŒ1
;

68 
ˇŒ1
.
	`wôhName
("func");

69 
li°
->
	`addEx≥˘edCÆl
(&
ˇŒ1
);

71 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl
(
ªp‹ãr
, *
li°
);

72 
a˘uÆCÆl
.
	`wôhName
("func").
	`wôhP¨amëî
("integer", 1);

74 
MockNamedVÆue
 
	`∑ømëî
("integer");

75 
∑ømëî
.
	`£tVÆue
(1);

77 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", 
∑ømëî
, *
li°
);

78 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

79 
	}
}

81 
	$TEST
(
MockA˘uÆFun˘i⁄CÆl
, 
mu…ùÀSameFun˘i⁄sEx≥˘ögAndH≠≥nGøduÆly
)

83 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

84 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
 = 
√w
 
	`MockEx≥˘edFun˘i⁄CÆl
();

85 
ˇŒ1
->
	`wôhName
("func");

86 
ˇŒ2
->
	`wôhName
("func");

87 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

88 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

90 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl1
(
ªp‹ãr
, *
li°
);

91 
MockA˘uÆFun˘i⁄CÆl
 
	`a˘uÆCÆl2
(
ªp‹ãr
, *
li°
);

93 
	`LONGS_EQUAL
(2, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

94 
a˘uÆCÆl1
.
	`wôhName
("func");

95 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

96 
a˘uÆCÆl2
.
	`wôhName
("func");

97 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfUnfulfûÀdEx≥˘©i⁄s
());

99 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

100 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

30 
	~"CµUTe°Ext/MockFaûuª.h
"

31 
	~"Te°MockFaûuª.h
"

33 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆl


35 
	mpublic
:

36 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
(
vÆ
Ë: 
	$vÆue
(
vÆ
) {};

37 
vÆue
;

38 
	}
};

41 ˛as†
	cTy≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


43 
public
:

44 
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
() {}

45 
vútuÆ
 ~
	$Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
(Ë{
	}
};

47 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

49  ((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘1
)->
vÆue
 =((Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl*)
obje˘2
)->value;

50 
	}
}

51 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

53  
	`SåögFrom
(((
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
*)
obje˘
)->
vÆue
);

54 
	}
}

58 
	$TEST_GROUP
(
MockNamedVÆueCom∑øt‹Rïosô‹y
)

60 
	`ã¨down
()

62 
	`CHECK_NO_MOCK_FAILURE
();

64 
	}
};

66 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
gëCom∑øt‹F‹N⁄Exi°ögName
)

68 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

69 
	`POINTERS_EQUAL
(
NULL
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

70 
	}
}

72 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlCom∑øt‹
)

74 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

75 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

76 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥Name", 
com∑øt‹
);

77 
	`POINTERS_EQUAL
(&
com∑øt‹
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("typeName"));

78 
	}
}

80 
	$TEST
(
MockNamedVÆueCom∑øt‹Rïosô‹y
, 
ö°ÆlMu…ùÀCom∑øt‹
)

82 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹1
, 
com∑øt‹2
, 
com∑øt‹3
;

83 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

84 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥1", 
com∑øt‹1
);

85 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥2", 
com∑øt‹2
);

86 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥3", 
com∑øt‹3
);

87 
	`POINTERS_EQUAL
(&
com∑øt‹3
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type3"));

88 
	`POINTERS_EQUAL
(&
com∑øt‹2
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type2"));

89 
	`POINTERS_EQUAL
(&
com∑øt‹1
, 
ªposô‹y
.
	`gëCom∑øt‹F‹Ty≥
("type1"));

90 
	}
}

92 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄CÆl
)

94 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ
;

95 
	`£tup
 ()

97 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

99 
	`ã¨down
()

101 
dñëe
 
ˇŒ
;

102 
	`CHECK_NO_MOCK_FAILURE
();

104 
	}
};

106 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhoutP¨amëîSëOrNŸFound
)

108 
	`STRCMP_EQUAL
("", 
ˇŒ
->
	`gëP¨amëîTy≥
("n⁄exi°ög").
	`asCh¨Såög
());

109 
	`LONGS_EQUAL
(0, 
ˇŒ
->
	`gëP¨amëî
("n⁄exi°ög").
	`gëI¡VÆue
());

110 
	`CHECK
(!
ˇŒ
->
	`hasP¨amëîWôhName
("nonexisting"));

111 
	}
}

113 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhI¡egîP¨amëî
)

115 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

116 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

117 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

118 
	`CHECK
(
ˇŒ
->
	`hasP¨amëîWôhName
("integer"));

119 
	}
}

121 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhDoubÀP¨amëî
)

123 
ˇŒ
->
	`wôhP¨amëî
("double", 1.2);

124 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

125 
	`DOUBLES_EQUAL
(1.2, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhSåögP¨amëî
)

130 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

131 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

132 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

133 
	}
}

135 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhPoöãrP¨amëî
)

137 * 
±r
 = (*) 0x123;

138 
ˇŒ
->
	`wôhP¨amëî
("poöãr", 
±r
);

139 
	`STRCMP_EQUAL
("void*", 
ˇŒ
->
	`gëP¨amëîTy≥
("poöãr").
	`asCh¨Såög
());

140 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("poöãr").
	`gëPoöãrVÆue
());

141 
	}
}

143 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëî
)

145 * 
±r
 = (*) 0x123;

146 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("˛ass", "obje˘", 
±r
);

147 
	`POINTERS_EQUAL
(
±r
, 
ˇŒ
->
	`gëP¨amëî
("obje˘").
	`gëObje˘Poöãr
());

148 
	`STRCMP_EQUAL
("˛ass", 
ˇŒ
->
	`gëP¨amëîTy≥
("obje˘").
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîU√quÆCom∑ris⁄
)

153 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`u√quÆTy≥
(2);

154 
MockNamedVÆue
 
	`∑ømëî
 ("name");

155 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
u√quÆTy≥
);

156 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

157 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutRïosô‹y
)

162 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

163 
MockNamedVÆue
 
	`∑ømëî
 ("name");

164 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

165 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

166 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

167 
	}
}

169 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄ButFaûsWôhoutCom∑øt‹
)

171 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

172 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

174 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

175 
MockNamedVÆue
 
	`∑ømëî
 ("name");

176 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

177 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

178 
	`CHECK
 (!
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

179 
	}
}

181 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhObje˘P¨amëîEquÆCom∑ris⁄
)

183 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

184 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

185 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

187 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1), 
	`equÆTy≥
(1);

188 
MockNamedVÆue
 
	`∑ømëî
 ("name");

189 
∑ømëî
.
	`£tObje˘Poöãr
("ty≥", &
equÆTy≥
);

191 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

192 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

193 
	`CHECK
 (
ˇŒ
->
	`hasP¨amëî
(
∑ømëî
));

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥
)

198 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆlCom∑øt‹
 
com∑øt‹
;

199 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

200 
ªposô‹y
.
	`ö°ÆlCom∑øt‹
("ty≥", 
com∑øt‹
);

202 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

203 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

204 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

205 
	`POINTERS_EQUAL
(&
ty≥
, 
ˇŒ
->
	`gëP¨amëî
("«me").
	`gëObje˘Poöãr
());

206 
	`STRCMP_EQUAL
("1", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

207 
	}
}

209 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutRïosô‹y
)

211 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

212 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

213 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

214 
	}
}

216 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
gëP¨amëîVÆueOfObje˘Ty≥WôhoutCom∑øt‹
)

218 
Ty≥F‹Te°ögEx≥˘edFun˘i⁄CÆl
 
	`ty≥
(1);

219 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªposô‹y
;

220 
ˇŒ
->
	`£tCom∑øt‹Rïosô‹y
(&
ªposô‹y
);

221 
ˇŒ
->
	`wôhP¨amëîOfTy≥
("ty≥", "«me", &
ty≥
);

222 
	`STRCMP_EQUAL
("Nÿcom∑øt‹ found f‹Åy≥: \"ty≥\"", 
ˇŒ
->
	`gëP¨amëîVÆueSåög
("«me").
	`asCh¨Såög
());

223 
	}
}

226 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhTwoI¡egîP¨amëî
)

228 
ˇŒ
->
	`wôhP¨amëî
("integer1", 1);

229 
ˇŒ
->
	`wôhP¨amëî
("integer2", 2);

230 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî1").
	`asCh¨Såög
());

231 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî2").
	`asCh¨Såög
());

232 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî1").
	`gëI¡VÆue
());

233 
	`LONGS_EQUAL
(2, 
ˇŒ
->
	`gëP¨amëî
("öãgî2").
	`gëI¡VÆue
());

234 
	}
}

236 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒWôhThªeDif„ª¡P¨amëî
)

238 
ˇŒ
->
	`wôhP¨amëî
("integer", 1);

239 
ˇŒ
->
	`wôhP¨amëî
("string", "hello world");

240 
ˇŒ
->
	`wôhP¨amëî
("double", 0.12);

241 
	`STRCMP_EQUAL
("öt", 
ˇŒ
->
	`gëP¨amëîTy≥
("öãgî").
	`asCh¨Såög
());

242 
	`STRCMP_EQUAL
("ch¨*", 
ˇŒ
->
	`gëP¨amëîTy≥
("°rög").
	`asCh¨Såög
());

243 
	`STRCMP_EQUAL
("doubÀ", 
ˇŒ
->
	`gëP¨amëîTy≥
("doubÀ").
	`asCh¨Såög
());

244 
	`LONGS_EQUAL
(1, 
ˇŒ
->
	`gëP¨amëî
("öãgî").
	`gëI¡VÆue
());

245 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
ˇŒ
->
	`gëP¨amëî
("°rög").
	`gëSåögVÆue
());

246 
	`DOUBLES_EQUAL
(0.12, 
ˇŒ
->
	`gëP¨amëî
("doubÀ").
	`gëDoubÀVÆue
(), 0.05);

247 
	}
}

249 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhoutANameItsFulfûÀd
)

251 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

252 
	}
}

254 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
wôhANameItsNŸFulfûÀd
)

256 
ˇŒ
->
	`wôhName
("name");

257 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

258 
	}
}

260 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
a·îSëtögCÆlFulfûÀdItsFulFûÀd
)

262 
ˇŒ
->
	`wôhName
("name");

263 
ˇŒ
->
	`ˇŒWasMade
();

264 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

265 
	}
}

267 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸWôhP¨amëîIsNŸFulFûÀd
)

269 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

270 
ˇŒ
->
	`ˇŒWasMade
();

271 
	`CHECK
(!
ˇŒ
->
	`isFulfûÀd
());

272 
	}
}

274 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedAndP¨amëîsAªFulfûÀd
)

276 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1);

277 
ˇŒ
->
	`ˇŒWasMade
();

278 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

279 
	`CHECK
(
ˇŒ
->
	`isFulfûÀd
());

280 
	}
}

282 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
ˇŒedButNŸAŒP¨amëîsAªFulfûÀd
)

284 
ˇŒ
->
	`wôhName
("«me").
	`wôhP¨amëî
("para", 1).withParameter("two", 2);

285 
ˇŒ
->
	`ˇŒWasMade
();

286 
ˇŒ
->
	`∑ømëîWasPas£d
("para");

287 
	`CHECK
(! 
ˇŒ
->
	`isFulfûÀd
());

288 
	}
}

290 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹NoP¨amëîs
)

292 
ˇŒ
->
	`wôhName
("name");

293 
	`STRCMP_EQUAL
("«mê->Çÿ∑ømëîs", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

294 
	}
}

296 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Ign‹edP¨amëîs
)

298 
ˇŒ
->
	`wôhName
("name");

299 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

300 
	`STRCMP_EQUAL
("«mê->áŒÖ¨amëî†ign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

301 
	}
}

303 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹Mu…ùÀP¨amëîs
)

305 
ˇŒ
->
	`wôhName
("name");

306 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

307 
ˇŒ
->
	`wôhP¨amëî
("integer", 10);

308 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, i¡ i¡egî: <10>", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

309 
	}
}

311 
	$TEST
(
MockEx≥˘edFun˘i⁄CÆl
, 
toSåögF‹P¨amëîAndIgn‹ed
)

313 
ˇŒ
->
	`wôhName
("name");

314 
ˇŒ
->
	`wôhP¨amëî
("string", "value");

315 
ˇŒ
->
	`ign‹eOthîP¨amëîs
();

316 
	`STRCMP_EQUAL
("«mê-> ch¨* såög: <vÆue>, othîÖ¨amëî†¨êign‹ed", 
ˇŒ
->
	`ˇŒToSåög
().
	`asCh¨Såög
());

317 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockEx≥˘edFun˘i⁄sLi°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 * 
li°
;

37 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

38 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ4
;

41 
	`£tup
()

43 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

45 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

46 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ4
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ1
->
	`wôhName
("foo");

49 
ˇŒ2
->
	`wôhName
("bar");

50 
ˇŒ3
->
	`wôhName
("boo");

52 
	`ã¨down
()

54 
dñëe
 
ˇŒ1
;

55 
dñëe
 
ˇŒ2
;

56 
dñëe
 
ˇŒ3
;

57 
dñëe
 
ˇŒ4
;

58 
dñëe
 
li°
;

59 
	`CHECK_NO_MOCK_FAILURE
();

61 
	}
};

63 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
em±yLi°
)

65 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

66 
	`CHECK
(! 
li°
->
	`hasFulfûÀdEx≥˘©i⁄s
());

67 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

68 
	}
}

70 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addögCÆls
)

72 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

73 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

74 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

75 
	}
}

77 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

79 
ˇŒ1
->
	`ˇŒWasMade
();

80 
ˇŒ2
->
	`ˇŒWasMade
();

81 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

82 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

83 
	`CHECK
(! 
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

84 
	}
}

86 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
li°WôhUnFulfûÀdEx≥˘©i⁄HasNoUnfûlfûÀdO√s
)

88 
ˇŒ1
->
	`ˇŒWasMade
();

89 
ˇŒ3
->
	`ˇŒWasMade
();

90 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

91 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

92 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

93 
	`CHECK
(
li°
->
	`hasUnfuŒfûÀdEx≥˘©i⁄s
());

94 
	}
}

96 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
)

98 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

99 
li°
->
	`addEx≥˘edCÆl
(
√w
 
MockEx≥˘edFun˘i⁄CÆl
);

100 
li°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

101 
	}
}

103 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
)

105 
ˇŒ1
->
	`wôhName
("relate");

106 
ˇŒ2
->
	`wôhName
("unrelate");

107 
ˇŒ3
->
	`wôhName
("relate");

108 
ˇŒ3
->
	`ˇŒWasMade
();

109 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

110 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

111 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

112 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("relate");

113 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

114 
	}
}

116 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToTheWﬁeLi°
)

118 
ˇŒ1
->
	`wôhName
("relate");

119 
ˇŒ2
->
	`wôhName
("relate");

120 
ˇŒ3
->
	`wôhName
("relate");

121 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

122 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

123 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

124 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

125 
	`LONGS_EQUAL
(0, 
li°
->
	`size
());

126 
	}
}

128 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToFú°O√
)

130 
ˇŒ1
->
	`wôhName
("relate");

131 
ˇŒ2
->
	`wôhName
("unrelate");

132 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

133 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

134 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

135 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

136 
	}
}

138 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ªmoveAŒEx≥˘©i⁄sEx˚±ThisTh©Rñ©eToLa°O√
)

140 
ˇŒ1
->
	`wôhName
("unrelate");

141 
ˇŒ2
->
	`wôhName
("relate");

142 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

143 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

144 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sRñ©edTo
("unrelate");

145 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

146 
	}
}

148 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
)

150 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

151 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

152 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

153 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

154 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

155 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

156 
li°
->
	`⁄lyKìpEx≥˘©i⁄sWôhP¨amëîName
("diffname");

157 
	`LONGS_EQUAL
(2, 
li°
->
	`size
());

158 
	}
}

160 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
)

162 
MockNamedVÆue
 
	`∑ømëî
("diffname");

163 
∑ømëî
.
	`£tVÆue
(1);

164 
ˇŒ1
->
	`wôhName
("func").
	`wôhP¨amëî
("param", 1);

165 
ˇŒ2
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

166 
ˇŒ3
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 1);

167 
ˇŒ4
->
	`wôhName
("func").
	`wôhP¨amëî
("diffname", 2);

168 
ˇŒ3
->
	`ˇŒWasMade
();

169 
ˇŒ3
->
	`∑ømëîWasPas£d
("diffname");

170 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

171 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

172 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

173 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ4
);

174 
li°
->
	`⁄lyKìpUnfulfûÀdEx≥˘©i⁄sWôhP¨amëî
(
∑ømëî
);

175 
	`LONGS_EQUAL
(1, 
li°
->
	`size
());

176 
	}
}

178 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sWôhEm±yLi°
)

180 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

181 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

182 
	`LONGS_EQUAL
(0, 
√wLi°
.
	`size
());

183 
	}
}

185 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
addUnfûfûÀdEx≥˘©i⁄sMu…ùÀUnfulfûÀdEx≥˘©i⁄s
)

187 
ˇŒ2
->
	`ˇŒWasMade
();

188 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

189 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

190 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

191 
MockEx≥˘edFun˘i⁄sLi°
 
√wLi°
;

192 
√wLi°
.
	`addUnfûfûÀdEx≥˘©i⁄s
(*
li°
);

193 
	`LONGS_EQUAL
(2, 
√wLi°
.
	`size
());

194 
	}
}

196 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹
)

198 
ˇŒ1
->
	`wôhName
("foo");

199 
ˇŒ2
->
	`wôhName
("bar");

200 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

201 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

202 
	`LONGS_EQUAL
(1, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

203 
	}
}

205 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
amou¡OfEx≥˘©i⁄sF‹HasN⁄e
)

207 
ˇŒ1
->
	`wôhName
("foo");

208 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

209 
	`LONGS_EQUAL
(0, 
li°
->
	`amou¡OfEx≥˘©i⁄sF‹
("bar"));

210 
	}
}

212 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
ˇŒToSåög
)

214 
ˇŒ1
->
	`wôhName
("foo");

215 
ˇŒ2
->
	`wôhName
("bar");

216 
ˇŒ3
->
	`wôhName
("blah");

217 
ˇŒ3
->
	`ˇŒWasMade
();

219 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

220 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

221 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

223 
Sim∂eSåög
 
ex≥˘edSåög
;

224 
ex≥˘edSåög
 = 
	`SåögFromF‹m©
("%s\n%s", 
ˇŒ1
->
	`ˇŒToSåög
().
	`asCh¨Såög
(), 
ˇŒ2
->callToString().asCharString());

225 
	`STRCMP_EQUAL
(
ex≥˘edSåög
.
	`asCh¨Såög
(), 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().asCharString());

226 
	}
}

228 
	$TEST
(
MockEx≥˘edFun˘i⁄sLi°
, 
toSåögOnEm±yLi°
)

230 
	`STRCMP_EQUAL
("<n⁄e>", 
li°
->
	`unfulfûÀdFun˘i⁄sToSåög
().
	`asCh¨Såög
());

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockFailure.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockFaûuª.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄sLi°.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockFaûuªTe°
)

36 
MockFaûuªRï‹ãr
 
ªp‹ãr
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
li°
;

39 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ1
;

40 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ2
;

41 
MockEx≥˘edFun˘i⁄CÆl
* 
ˇŒ3
;

43 
	`£tup
 ()

45 
li°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

46 
ˇŒ1
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

47 
ˇŒ2
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

48 
ˇŒ3
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

50 
	`ã¨down
 ()

52 
dñëe
 
li°
;

53 
dñëe
 
ˇŒ1
;

54 
dñëe
 
ˇŒ2
;

55 
dñëe
 
ˇŒ3
;

56 
	`CHECK_NO_MOCK_FAILURE
();

58 
	`addAŒToLi°
()

60 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

61 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ2
);

62 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ3
);

64 
	}
};

66 
	$TEST
(
MockFaûuªTe°
, 
noEº‹FaûuªSomëhögG⁄eWr⁄g
)

68 
MockFaûuª
 
	`Áûuª
(
this
);

69 
	`STRCMP_EQUAL
("Te° faûed wôh MockFaûuª wôhouà™Éº‹! Somëhög wíà£riou¶y wr⁄g.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

70 
	}
}

72 
	$TEST
(
MockFaûuªTe°
, 
u√x≥˘edCÆlH≠≥√d
)

74 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "foob¨", *
li°
);

75 
	`STRCMP_EQUAL
("Mock Failure: Unexpected callÅo function: foobar\n"

79 "\t\t<n⁄e>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
MockFaûuªTe°
, 
ex≥˘edCÆlDidNŸH≠≥n
)

84 
ˇŒ1
->
	`wôhName
("foobar");

85 
ˇŒ2
->
	`wôhName
("w‹ld").
	`wôhP¨amëî
("boo", 2).withParameter("hello", "world");

86 
ˇŒ3
->
	`wôhName
("haphaphap");

87 
ˇŒ3
->
	`ˇŒWasMade
();

88 
	`addAŒToLi°
();

90 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, *
li°
);

91 
	`STRCMP_EQUAL
("Mock Failure: Expected call didÇot happen.\n"

96 "\t\th≠h≠h≠ ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

97 
	}
}

99 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edAddôi⁄ÆCÆlFaûuª
)

101 
ˇŒ1
->
	`wôhName
("bar");

102 
ˇŒ1
->
	`ˇŒWasMade
();

103 
li°
->
	`addEx≥˘edCÆl
(
ˇŒ1
);

105 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`Áûuª
(
this
, "b¨", *
li°
);

106 
	`STRCMP_CONTAINS
("Mock Faûuª: U√x≥˘edáddôi⁄Æ (2thËˇŒÅÿfun˘i⁄: b¨\n\tEXPECTED", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

107 
	}
}

109 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîFaûuª
)

111 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

112 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

113 
ˇŒ3
->
	`wôhName
("unrelated");

114 
	`addAŒToLi°
();

116 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("bar");

117 
a˘uÆP¨amëî
.
	`£tVÆue
(2);

119 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

120 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameterÇameÅo function \"foo\": bar\n"

127 "\t\töàb¨: <2>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

128 
	}
}

130 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edP¨amëîVÆueFaûuª
)

132 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 2);

133 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("boo", 10);

134 
ˇŒ3
->
	`wôhName
("unrelated");

135 
	`addAŒToLi°
();

137 
MockNamedVÆue
 
	`a˘uÆP¨amëî
("boo");

138 
a˘uÆP¨amëî
.
	`£tVÆue
(20);

140 
MockU√x≥˘edP¨amëîFaûuª
 
	`Áûuª
(
this
, "foo", 
a˘uÆP¨amëî
, *
li°
);

141 
	`STRCMP_EQUAL
("Mock Failure: UnexpectedÖarameter valueÅoÖarameter \"boo\"Åo function \"foo\": <20>\n"

148 "\t\töàboo: <20>", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

149 
	}
}

151 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
)

153 
ˇŒ1
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 2).withParameter("boo", "str");

154 
ˇŒ2
->
	`wôhName
("foo").
	`wôhP¨amëî
("bar", 10).withParameter("boo", "bleh");

155 
ˇŒ2
->
	`ˇŒWasMade
();

156 
ˇŒ2
->
	`∑ømëîWasPas£d
("bar");

157 
ˇŒ2
->
	`∑ømëîWasPas£d
("boo");

158 
ˇŒ3
->
	`wôhName
("unrelated");

159 
	`addAŒToLi°
();

161 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

162 
	`STRCMP_EQUAL
("Mock Failure: ExpectedÖarameter for function \"foo\" didÇot happen.\n"

168 "\t\töàb¨, ch¨* boo", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

169 
	}
}

171 
	$TEST
(
MockFaûuªTe°
, 
MockNoWayToCom∑ªCu°omTy≥Faûuª
)

173 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
this
, "myType");

174 
	`STRCMP_EQUAL
("MockFaûuª: NÿwayÅÿcom∑ªÅy≥ <myTy≥>. PÀa£ in°Æ»®P¨amëîTy≥Com∑øt‹.", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

175 
	}
}

177 
	$TEST
(
MockFaûuªTe°
, 
MockU√x≥˘edObje˘Faûuª
)

179 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

180 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

181 
ˇŒ2
->
	`ˇŒWasMade
();

182 
ˇŒ2
->
	`wasPas£dToObje˘
();

183 
ˇŒ3
->
	`wôhName
("unrelated");

184 
	`addAŒToLi°
();

186 
MockU√x≥˘edObje˘Faûuª
 
	`Áûuª
(
this
, "foo", (*)0x1, *
li°
);

187 
	`STRCMP_EQUAL
("MockFailure: Function called oná unexpected object: foo\n"

192 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

193 
	}
}

195 
	$TEST
(
MockFaûuªTe°
, 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
)

197 
ˇŒ1
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x02);

198 
ˇŒ2
->
	`wôhName
("foo").
	`⁄Obje˘
((*) 0x03);

199 
ˇŒ2
->
	`ˇŒWasMade
();

200 
ˇŒ2
->
	`wasPas£dToObje˘
();

201 
ˇŒ3
->
	`wôhName
("unrelated");

202 
	`addAŒToLi°
();

204 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`Áûuª
(
this
, "foo", *
li°
);

205 
	`STRCMP_EQUAL
("Mock Failure: Expected call on object for function \"foo\" but it didÇot happen.\n"

209 "\t\t(obje˘áddªss: 0x3)::foÿ->Çÿ∑ømëîs", 
Áûuª
.
	`gëMesßge
().
	`asCh¨Såög
());

210 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockFailure.h

29 #i‚de‡
D_Te°MockFaûuª_h


30 
	#D_Te°MockFaûuª_h


	)

32 
	#CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
Ë
	`CHECK_EXPECTED_MOCK_FAILURE_LOCATION
”x≥˘edFaûuª, 
__FILE__
, 
__LINE__
)

	)

33 
	#CHECK_NO_MOCK_FAILURE
(Ë
	`CHECK_NO_MOCK_FAILURE_LOCATION
(
__FILE__
, 
__LINE__
)

	)

35 ˛as†
	cMockFaûuªRï‹ãrF‹Te°
 : 
public
 
MockFaûuªRï‹ãr


37 
public
:

39 
Sim∂eSåög
 
mockFaûuªSåög
;

40 
vútuÆ
 
	$ÁûTe°
(c⁄° 
MockFaûuª
& 
Áûuª
)

42 
mockFaûuªSåög
 = 
Áûuª
.
	`gëMesßge
();

44 
MockFaûuªRï‹ãrF‹Te°
* 
	$gëRï‹ãr
()

46 
MockFaûuªRï‹ãrF‹Te°
 
ªp‹ãr
;

47  &
ªp‹ãr
;

48 
	}
}

51 
ölöe
 
Uã°
* 
	$mockFaûuªTe°
()

53  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
	`gëTe°ToFaû
();

54 
	}
}

56 
ölöe
 
Sim∂eSåög
 
	$mockFaûuªSåög
()

58  
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
;

59 
	}
}

61 
ölöe
 
	$CHECK_EXPECTED_MOCK_FAILURE_LOCATION
(c⁄° 
MockFaûuª
& 
ex≥˘edFaûuª
, c⁄° * 
fûe
, 
löe
)

63 
Sim∂eSåög
 
ex≥˘edFaûuªSåög
 = 
ex≥˘edFaûuª
.
	`gëMesßge
();

64 
Sim∂eSåög
 
a˘uÆFaûuªSåög
 = 
	`mockFaûuªSåög
();

65 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

66 i‡(
ex≥˘edFaûuªSåög
 !
a˘uÆFaûuªSåög
)

68 
Sim∂eSåög
 
îr‹
 = "MockFailuresáre different.\n";

69 
îr‹
 += "Expected MockFailure:\n\t";

70 
îr‹
 +
ex≥˘edFaûuªSåög
;

71 
îr‹
 += "\nActual MockFailure:\n\t";

72 
îr‹
 +
a˘uÆFaûuªSåög
;

73 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

75 
	}
}

77 
ölöe
 
	$CHECK_NO_MOCK_FAILURE_LOCATION
(c⁄° * 
fûe
, 
löe
)

79 i‡(
	`mockFaûuªSåög
() != "") {

80 
Sim∂eSåög
 
îr‹
 = "Unexpected mock failure:\n";

81 
îr‹
 +
	`mockFaûuªSåög
();

82 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

83 
	`FAIL_LOCATION
(
îr‹
.
	`asCh¨Såög
(), 
fûe
, 
löe
);

86 
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
()->
mockFaûuªSåög
 = "";

87 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockPlugin.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

28 
	~"CµUTe°/Te°Ouçut.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockSuµ‹tPlugö.h
"

31 
	~"Te°MockFaûuª.h
"

33 
	$TEST_GROUP
(
MockPlugö
)

35 
Uã°
 *
ã°
;

36 
SåögBuf„rTe°Ouçut
 *
ouçut
;

37 
Te°Resu…
 *
ªsu…
;

38 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

39 
MockEx≥˘edFun˘i⁄CÆl
 *
ˇŒ
;

41 
MockSuµ‹tPlugö
 *
∂ugö
;

43 
	`£tup
()

45 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

47 
ã°
 = 
√w
 
	`Uã°
("group", "name", "file", 1);

48 
ouçut
 = 
√w
 
SåögBuf„rTe°Ouçut
;

49 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

50 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

51 
ˇŒ
 = 
√w
 
MockEx≥˘edFun˘i⁄CÆl
;

52 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
ˇŒ
);

53 
∂ugö
 = 
√w
 
MockSuµ‹tPlugö
;;

56 
	`ã¨down
()

58 
dñëe
 
ã°
;

59 
dñëe
 
ouçut
;

60 
dñëe
 
ªsu…
;

61 
dñëe
 
ex≥˘©i⁄sLi°
;

62 
dñëe
 
ˇŒ
;

63 
dñëe
 
∂ugö
;

65 
	`CHECK_NO_MOCK_FAILURE
();

66 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

68 
	}
};

70 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sAndCÀ¨AtEnd
)

72 
ˇŒ
->
	`wôhName
("foobar");

73 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, *
ex≥˘©i⁄sLi°
);

75 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

77 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

79 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

80 
	`LONGS_EQUAL
(0, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

82 
	}
}

84 
	$TEST
(
MockPlugö
, 
checkEx≥˘©i⁄sW‹ksAlsoWôhHõøchiˇlObje˘s
)

86 
ˇŒ
->
	`wôhName
("foob¨").
	`⁄Obje˘
((*) 1);

87 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
ã°
, "foob¨", *
ex≥˘©i⁄sLi°
);

89 
	`mock
("dif„ª¡Sc›e").
	`ex≥˘O√CÆl
("foob¨").
	`⁄Obje˘
((*) 1);

90 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

92 
∂ugö
->
	`po°Te°A˘i⁄
(*
ã°
, *
ªsu…
);

94 
	`STRCMP_CONTAINS
(
ex≥˘edFaûuª
.
	`gëMesßge
().
	`asCh¨Såög
(), 
ouçut
->
	`gëOuçut
().asCharString())

95 
	}
}

97 ˛as†
	cDummyCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


99 
public
:

100 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

102  
obje˘1
 =
obje˘2
;

104 
Sim∂eSåög
 
	$vÆueToSåög
(*)

107 
	}
}

111 
	$TEST
(
MockPlugö
, 
ö°ÆlCom∑øt‹Rec‹dsTheCom∑øt‹ButNŸIn°ÆlsItYë
)

113 
DummyCom∑øt‹
 
com∑øt‹
;

114 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

115 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

116 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

118 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`Áûuª
(
ã°
, "myType");

119 
	`CHECK_EXPECTED_MOCK_FAILURE
(
Áûuª
);

120 
	}
}

122 
	$TEST
(
MockPlugö
, 
¥eTe°A˘i⁄WûlE«bÀMu…ùÀCom∑øt‹sToTheGlobÆMockSuµ‹tS∑˚
)

124 
DummyCom∑øt‹
 
com∑øt‹
;

125 
DummyCom∑øt‹
 
com∑øt‹2
;

126 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myTy≥", 
com∑øt‹
);

127 
∂ugö
->
	`ö°ÆlCom∑øt‹
("myOthîTy≥", 
com∑øt‹2
);

129 
∂ugö
->
	`¥eTe°A˘i⁄
(*
ã°
, *
ªsu…
);

130 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

131 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

132 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myTy≥", "«me", &
com∑øt‹
);

133 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëîOfTy≥
("myOthîTy≥", "«me", &
com∑øt‹
);

135 
	`mock
().
	`checkEx≥˘©i⁄s
();

136 
	`CHECK_NO_MOCK_FAILURE
();

137 
	`LONGS_EQUAL
(0, 
ªsu…
->
	`gëFaûuªCou¡
());

138 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°Ext/MockSuµ‹t.h
"

30 
	~"CµUTe°Ext/MockEx≥˘edFun˘i⁄CÆl.h
"

31 
	~"CµUTe°Ext/MockFaûuª.h
"

32 
	~"Te°MockFaûuª.h
"

34 
	$TEST_GROUP
(
MockSuµ‹tTe°
)

36 
MockEx≥˘edFun˘i⁄sLi°
 *
ex≥˘©i⁄sLi°
;

38 
	`£tup
()

40 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
MockFaûuªRï‹ãrF‹Te°
::
	`gëRï‹ãr
());

41 
ex≥˘©i⁄sLi°
 = 
√w
 
MockEx≥˘edFun˘i⁄sLi°
;

44 
	`ã¨down
()

46 
	`mock
().
	`checkEx≥˘©i⁄s
();

47 
	`CHECK_NO_MOCK_FAILURE
();

48 
ex≥˘©i⁄sLi°
->
	`dñëeAŒEx≥˘©i⁄sAndCÀ¨Li°
();

49 
dñëe
 
ex≥˘©i⁄sLi°
;

52 
MockEx≥˘edFun˘i⁄CÆl
* 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
(c⁄° 
Sim∂eSåög
& 
«me
)

54 
MockEx≥˘edFun˘i⁄CÆl
* 
√wCÆl
 = 
√w
 MockExpectedFunctionCall;

55 
√wCÆl
->
	`wôhName
(
«me
);

56 
ex≥˘©i⁄sLi°
->
	`addEx≥˘edCÆl
(
√wCÆl
);

57  
√wCÆl
;

59 
	`mock
().
	`£tMockFaûuªRï‹ãr
(
NULL
);

61 
	}
};

63 
	$TEST
(
MockSuµ‹tTe°
, 
˛ór
)

65 
	`mock
().
	`ex≥˘O√CÆl
("func");

66 
	`mock
().
	`˛ór
();

67 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

68 
	}
}

70 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sD€¢tFaû
)

72 
	`mock
().
	`checkEx≥˘©i⁄s
();

73 
	}
}

75 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sCÀ¨sTheEx≥˘©i⁄s
)

77 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

78 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

80 
	`mock
().
	`ex≥˘O√CÆl
("foobar");

81 
	`mock
().
	`checkEx≥˘©i⁄s
();

83 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

84 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

85 
	}
}

87 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlTh©H≠≥ns
)

89 
	`mock
().
	`ex≥˘O√CÆl
("func");

90 
	`mock
().
	`a˘uÆCÆl
("func");

91 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

92 
	}
}

94 
	$TEST
(
MockSuµ‹tTe°
, 
ex˚±ACÆlIn˚a£sEx≥˘edCÆlsLe·
)

96 
	`mock
().
	`ex≥˘O√CÆl
("func");

97 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

98 
	`mock
().
	`˛ór
();

99 
	}
}

101 
	$TEST
(
MockSuµ‹tTe°
, 
u√x≥˘edCÆlH≠≥√d
)

103 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "func", *
ex≥˘©i⁄sLi°
);

105 
	`mock
().
	`a˘uÆCÆl
("func");

107 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

108 
	}
}

110 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsEx˚±F‹TheEx≥˘edO√
)

112 
	`mock
().
	`ex≥˘O√CÆl
("foo");

113 
	`mock
().
	`ign‹eOthîCÆls
();

114 
	`mock
().
	`a˘uÆCÆl
("b¨").
	`wôhP¨amëî
("foo", 1);;

116 
	`CHECK_NO_MOCK_FAILURE
();

118 
	`mock
().
	`˛ór
();

119 
	}
}

121 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsD€¢tIgn‹eMu…ùÀCÆlsOfTheSameFun˘i⁄
)

123 
	`mock
().
	`ex≥˘O√CÆl
("foo");

124 
	`mock
().
	`ign‹eOthîCÆls
();

125 
	`mock
().
	`a˘uÆCÆl
("bar");

126 
	`mock
().
	`a˘uÆCÆl
("foo");

127 
	`mock
().
	`a˘uÆCÆl
("foo");

129 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

130 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

131 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

132 
	}
}

134 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîStûlFaûsIfEx≥˘edO√Did¡H≠≥n
)

136 
	`mock
().
	`ex≥˘O√CÆl
("foo");

137 
	`mock
().
	`ign‹eOthîCÆls
();

138 
	`mock
().
	`checkEx≥˘©i⁄s
();

140 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo");

142 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

143 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

144 
	}
}

146 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsTh©H≠≥n
)

148 
	`mock
().
	`ex≥˘O√CÆl
("foo");

149 
	`mock
().
	`ex≥˘O√CÆl
("foo");

150 
	`mock
().
	`a˘uÆCÆl
("foo");

151 
	`mock
().
	`a˘uÆCÆl
("foo");

152 
	`mock
().
	`checkEx≥˘©i⁄s
();

153 
	`CHECK_NO_MOCK_FAILURE
();

154 
	}
}

156 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√CÆlHowevîMu…ùÀH≠≥√d
)

158 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

159 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`ˇŒWasMade
();

160 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

162 
	`mock
().
	`ex≥˘O√CÆl
("foo");

163 
	`mock
().
	`ex≥˘O√CÆl
("foo");

164 
	`mock
().
	`a˘uÆCÆl
("foo");

165 
	`mock
().
	`a˘uÆCÆl
("foo");

166 
	`mock
().
	`a˘uÆCÆl
("foo");

168 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

169 
	}
}

171 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndVÆue
)

173 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

174 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

175 
	`mock
().
	`checkEx≥˘©i⁄s
();

176 
	`CHECK_NO_MOCK_FAILURE
();

177 
	}
}

179 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√DoubÀP¨amëîAndVÆue
)

181 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

182 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 1.0);

183 
	`mock
().
	`checkEx≥˘©i⁄s
();

184 
	`CHECK_NO_MOCK_FAILURE
();

185 
	}
}

187 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆue
)

189 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

190 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

191 
	`mock
().
	`checkEx≥˘©i⁄s
();

192 
	`CHECK_NO_MOCK_FAILURE
();

193 
	}
}

195 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√PoöãrP¨amëîAndVÆue
)

197 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

198 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", (*) 0x01);

199 
	`mock
().
	`checkEx≥˘©i⁄s
();

200 
	`CHECK_NO_MOCK_FAILURE
();

201 
	}
}

203 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√SåögP¨amëîAndVÆueFaûs
)

205 
MockNamedVÆue
 
	`∑ømëî
("parameter");

206 
∑ømëî
.
	`£tVÆue
("different");

207 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", "string");

208 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

210 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", "string");

211 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "different");

213 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

214 
	}
}

216 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToP¨amëîName
)

218 
MockNamedVÆue
 
	`∑ømëî
("different");

219 
∑ømëî
.
	`£tVÆue
(10);

220 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

221 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

223 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

224 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("different", 10);

226 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

227 
	}
}

229 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToVÆue
)

231 
MockNamedVÆue
 
	`∑ømëî
("parameter");

232 
∑ømëî
.
	`£tVÆue
(8);

233 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

234 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

236 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

237 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", 8);

239 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

240 
	}
}

242 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘O√I¡egîP¨amëîAndFaûsDueToTy≥s
)

244 
MockNamedVÆue
 
	`∑ømëî
("parameter");

245 
∑ømëî
.
	`£tVÆue
("heh");

246 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("parameter", 10);

247 
MockU√x≥˘edP¨amëîFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", 
∑ømëî
, *
ex≥˘©i⁄sLi°
);

249 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("parameter", 10);

250 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("parameter", "heh");

252 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

253 
	}
}

255 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

257 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

258 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 2);

259 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 2);

260 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

261 
	`mock
().
	`checkEx≥˘©i⁄s
();

262 
	`CHECK_NO_MOCK_FAILURE
();

263 
	}
}

265 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhMu…ùÀDif„ª¡P¨amëîsTh©H≠≥nOutOfOrdî
)

267 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

268 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

270 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 20);

271 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

272 
	`mock
().
	`checkEx≥˘©i⁄s
();

273 
	`CHECK_NO_MOCK_FAILURE
();

274 
	}
}

276 
	$TEST
(
MockSuµ‹tTe°
, 
twi˚CÆÀdWôhSameP¨amëîs
)

278 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

279 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

280 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

281 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

282 
	`mock
().
	`checkEx≥˘©i⁄s
();

283 
	`CHECK_NO_MOCK_FAILURE
();

284 
	}
}

286 
	$TEST
(
MockSuµ‹tTe°
, 
ˇŒedWôhoutP¨amëîs
)

288 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

289 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

291 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

292 
	`mock
().
	`a˘uÆCÆl
("foo");

293 
	`mock
().
	`checkEx≥˘©i⁄s
();

295 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

297 
	}
}

299 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîs
)

301 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

302 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).withParameter("p2", 2);

303 
	`mock
().
	`checkEx≥˘©i⁄s
();

304 
	`CHECK_NO_MOCK_FAILURE
();

305 
	}
}

307 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButStûlPassAŒ
)

309 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

310 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);

311 
	`mock
().
	`checkEx≥˘©i⁄s
();

312 
	`CHECK_NO_MOCK_FAILURE
();

313 
	}
}

315 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsButEx≥˘edP¨amëîDid¡H≠≥n
)

317 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

318 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

320 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
();

321 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

322 
	`mock
().
	`checkEx≥˘©i⁄s
();

323 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

324 
	}
}

326 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîP¨amëîsMu…ùÀCÆls
)

328 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

329 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
();

330 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

331 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

332 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p2", 2).withParameter("p3", 3).withParameter("p4", 4);

334 
	`mock
().
	`checkEx≥˘©i⁄s
();

335 
	`CHECK_NO_MOCK_FAILURE
();

336 
	}
}

338 
	$TEST
(
MockSuµ‹tTe°
, 
√wCÆlSèπsWhûeNŸAŒP¨amëîsWîePas£d
)

340 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foo")->
	`wôhP¨amëî
("p1", 1);

341 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foo", *
ex≥˘©i⁄sLi°
);

343 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1);

344 
	`mock
().
	`a˘uÆCÆl
("foo");

345 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1);;

347 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

348 
	}
}

350 
	$TEST
(
MockSuµ‹tTe°
, 
thªeEx≥˘edAndA˘uÆ
)

352 
	`mock
().
	`ex≥˘O√CÆl
("function1");

353 
	`mock
().
	`ex≥˘O√CÆl
("function2");

354 
	`mock
().
	`ex≥˘O√CÆl
("function3");

355 
	`mock
().
	`a˘uÆCÆl
("function1");

356 
	`mock
().
	`a˘uÆCÆl
("function2");

357 
	`mock
().
	`a˘uÆCÆl
("function3");

358 
	`mock
().
	`checkEx≥˘©i⁄s
();

359 
	`CHECK_NO_MOCK_FAILURE
();

360 
	}
}

362 ˛as†
	cMyTy≥F‹Te°ög


364 
	mpublic
:

365 
	$MyTy≥F‹Te°ög
(
vÆ
Ë: 
	$vÆue
(
vÆ
){};

366 
vÆue
;

367 
	}
};

369 ˛as†
	cMyTy≥F‹Te°ögCom∑øt‹
 : 
public
 
MockNamedVÆueCom∑øt‹


371 
public
:

372 
vútuÆ
 
boﬁ
 
	$isEquÆ
(* 
obje˘1
, * 
obje˘2
)

374  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

376 
vútuÆ
 
Sim∂eSåög
 
	$vÆueToSåög
(* 
obje˘
)

378  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

379 
	}
}

383 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîFaûsWhíNŸHavögACom∑ris⁄Rïosô‹y
)

385 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

386 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

387 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

389 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

390 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

391 
	}
}

393 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘P¨amëîSuc˚eds
)

395 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

396 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

397 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

398 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

399 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

400 
	`mock
().
	`checkEx≥˘©i⁄s
();

401 
	`CHECK_NO_MOCK_FAILURE
();

402 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

403 
	}
}

405 
boﬁ
 
	$myTy≥IsEquÆ
(* 
obje˘1
, * 
obje˘2
)

407  ((
MyTy≥F‹Te°ög
*)
obje˘1
)->
vÆue
 =((MyTy≥F‹Te°ög*)
obje˘2
)->value;

408 
	}
}

410 
Sim∂eSåög
 
	$myTy≥VÆueToSåög
(* 
obje˘
)

412  
	`SåögFrom
(((
MyTy≥F‹Te°ög
*)
obje˘
)->
vÆue
);

413 
	}
}

415 
	$TEST
(
MockSuµ‹tTe°
, 
cu°omObje˘WôhFun˘i⁄Com∑øt‹
)

417 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

418 
MockFun˘i⁄Com∑øt‹
 
	`com∑øt‹
(
myTy≥IsEquÆ
, 
myTy≥VÆueToSåög
);

419 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

420 
	`mock
().
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

421 
	`mock
().
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

422 
	`mock
().
	`checkEx≥˘©i⁄s
();

423 
	`CHECK_NO_MOCK_FAILURE
();

424 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

425 
	}
}

427 
	$TEST
(
MockSuµ‹tTe°
, 
dißbÀE«bÀ
)

429 
	`mock
().
	`dißbÀ
();

430 
	`mock
().
	`ex≥˘O√CÆl
("function");

431 
	`mock
().
	`a˘uÆCÆl
("differenFunction");

432 
	`CHECK
(! 
	`mock
().
	`ex≥˘edCÆlsLe·
());

433 
	`mock
().
	`íabÀ
();

434 
	`mock
().
	`ex≥˘O√CÆl
("function");

435 
	`CHECK
(
	`mock
().
	`ex≥˘edCÆlsLe·
());

436 
	`mock
().
	`a˘uÆCÆl
("function");

437 
	`CHECK_NO_MOCK_FAILURE
();

438 
	}
}

440 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aF‹I¡egîVÆues
)

442 
	`mock
().
	`£tD©a
("data", 10);

443 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

444 
	}
}

446 
	$TEST
(
MockSuµ‹tTe°
, 
hasD©aBìnSë
)

448 
	`CHECK
(!
	`mock
().
	`hasD©a
("data"));

449 
	`mock
().
	`£tD©a
("data", 10);

450 
	`CHECK
(
	`mock
().
	`hasD©a
("data"));

451 
	}
}

453 
	$TEST
(
MockSuµ‹tTe°
, 
unöôülizedD©a
)

455 
	`LONGS_EQUAL
(0, 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëI¡VÆue
());

456 
	`STRCMP_EQUAL
("öt", 
	`mock
().
	`gëD©a
("n⁄exi°ög").
	`gëTy≥
().
	`asCh¨Såög
());

457 
	}
}

459 
	$TEST
(
MockSuµ‹tTe°
, 
£tMu…ùÀD©a
)

461 
	`mock
().
	`£tD©a
("data", 1);

462 
	`mock
().
	`£tD©a
("data2", 10);

463 
	`LONGS_EQUAL
(1, 
	`mock
().
	`gëD©a
("d©a").
	`gëI¡VÆue
());

464 
	`LONGS_EQUAL
(10, 
	`mock
().
	`gëD©a
("d©a2").
	`gëI¡VÆue
());

465 
	}
}

467 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aSåög
)

469 
	`mock
().
	`£tD©a
("data", "string");

470 
	`STRCMP_EQUAL
("°rög", 
	`mock
().
	`gëD©a
("d©a").
	`gëSåögVÆue
());

471 
	}
}

473 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aDoubÀ
)

475 
	`mock
().
	`£tD©a
("data", 1.0);

476 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`gëD©a
("d©a").
	`gëDoubÀVÆue
(), 0.05);

477 
	}
}

479 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aPoöãr
)

481 * 
±r
 = (*) 0x001;

482 
	`mock
().
	`£tD©a
("d©a", 
±r
);

483 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëPoöãrVÆue
());

484 
	}
}

486 
	$TEST
(
MockSuµ‹tTe°
, 
£tD©aObje˘
)

488 * 
±r
 = (*) 0x001;

489 
	`mock
().
	`£tD©aObje˘
("d©a", "ty≥", 
±r
);

490 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`gëD©a
("d©a").
	`gëObje˘Poöãr
());

491 
	`STRCMP_EQUAL
("ty≥", 
	`mock
().
	`gëD©a
("d©a").
	`gëTy≥
().
	`asCh¨Såög
());

492 
	}
}

494 
	$TEST
(
MockSuµ‹tTe°
, 
gëMockSuµ‹tSc›e
)

496 
MockSuµ‹t
* 
mock1
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("name");

497 
MockSuµ‹t
* 
mock2
 = 
	`mock
().
	`gëMockSuµ‹tSc›e
("differentName");

498 
	`CHECK
(!
	`mock
().
	`hasD©a
("name"));

499 
	`CHECK
(
mock1
 !
mock2
);

500 
	`POINTERS_EQUAL
(
mock1
, 
	`mock
().
	`gëMockSuµ‹tSc›e
("name"));

501 
	`CHECK
(
mock1
 !&
	`mock
());

502 
	}
}

504 
	$TEST
(
MockSuµ‹tTe°
, 
usögTwoMockSuµ‹tsByName
)

506 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

507 
	`LONGS_EQUAL
(0, 
	`mock
("Ÿhî").
	`ex≥˘edCÆlsLe·
());

508 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

509 
	`mock
("fú°").
	`˛ór
();

510 
	}
}

512 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒy
)

514 
	`mock
("first");

516 
	`mock
().
	`dißbÀ
();

517 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

518 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

520 
	`mock
().
	`íabÀ
();

521 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

522 
	`LONGS_EQUAL
(1, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

524 
	`mock
("fú°").
	`˛ór
();

525 
	}
}

527 
	$TEST
(
MockSuµ‹tTe°
, 
E«bÀDißbÀW‹kHõørchiˇŒyWhíSuµ‹tIsDy«miˇŒyCª©ed
)

529 
	`mock
().
	`dißbÀ
();

530 
	`mock
("fú°").
	`ex≥˘O√CÆl
("boo");

531 
	`LONGS_EQUAL
(0, 
	`mock
("fú°").
	`ex≥˘edCÆlsLe·
());

533 
	`mock
().
	`íabÀ
();

534 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("boo");

535 
	`LONGS_EQUAL
(1, 
	`mock
("£c⁄d").
	`ex≥˘edCÆlsLe·
());

537 
	`mock
().
	`˛ór
();

538 
	}
}

540 
	$TEST
(
MockSuµ‹tTe°
, 
Ex≥˘edCÆlsLe·W‹ksHõørchiˇŒy
)

542 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

543 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ex≥˘edCÆlsLe·
());

544 
	`mock
().
	`˛ór
();

545 
	}
}

547 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒy
)

549 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foobar");

550 
	`mock
("£c⁄d").
	`ex≥˘O√CÆl
("helloworld");

552 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foobar");

553 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("helloworld");

554 
MockEx≥˘edCÆlsDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), *
ex≥˘©i⁄sLi°
);

556 
	`mock
().
	`checkEx≥˘©i⁄s
();

557 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

558 
	}
}

560 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒy
)

562 
	`mock
("first");

563 
	`mock
().
	`ign‹eOthîCÆls
();

564 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

565 
	`CHECK_NO_MOCK_FAILURE
();

566 
	}
}

568 
	$TEST
(
MockSuµ‹tTe°
, 
ign‹eOthîCÆlsW‹ksHõørchiˇŒyWhíDy«miˇŒyCª©ed
)

570 
	`mock
().
	`ign‹eOthîCÆls
();

571 
	`mock
("fú°").
	`a˘uÆCÆl
("boo");

572 
	`CHECK_NO_MOCK_FAILURE
();

573 
	}
}

575 
	$TEST
(
MockSuµ‹tTe°
, 
checkEx≥˘©i⁄sW‹ksHõørchiˇŒyF‹La°CÆlNŸFöished
)

577 
	`mock
("fú°").
	`ex≥˘O√CÆl
("foob¨").
	`wôhP¨amëî
("boo", 1);

578 
	`mock
("fú°").
	`a˘uÆCÆl
("foobar");

580 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("foob¨")->
	`wôhP¨amëî
("boo", 1);

581 
MockEx≥˘edP¨amëîDid¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

583 
	`mock
().
	`checkEx≥˘©i⁄s
();

584 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

585 
	}
}

587 
	$TEST
(
MockSuµ‹tTe°
, 
ªp‹ãrIsInhîôedInHõørchiˇlMocks
)

589 
	`mock
("dif„ª¡Sc›e").
	`a˘uÆCÆl
("foobar");

591 
MockU√x≥˘edCÆlH≠≥√dFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "foob¨", *
ex≥˘©i⁄sLi°
);

592 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

593 
	}
}

595 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹W‹ksHõørchiˇlOnBŸhExi°ögAndDy«miˇŒyCª©edMockSuµ‹ts
)

597 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

598 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

600 
	`mock
("existing");

601 
	`mock
().
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

602 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

603 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

604 
	`mock
("dy«mic").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

605 
	`mock
("dy«mic").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

607 
	`mock
().
	`checkEx≥˘©i⁄s
();

608 
	`CHECK_NO_MOCK_FAILURE
();

609 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

610 
	}
}

612 
	$TEST
(
MockSuµ‹tTe°
, 
ö°ÆlCom∑øt‹sW‹ksHõørchiˇl
)

614 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

615 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

616 
MockNamedVÆueCom∑øt‹Rïosô‹y
 
ªpos
;

617 
ªpos
.
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

619 
	`mock
("existing");

620 
	`mock
().
	`ö°ÆlCom∑øt‹s
(
ªpos
);

621 
	`mock
("exi°ög").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

622 
	`mock
("exi°ög").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

624 
	`mock
().
	`checkEx≥˘©i⁄s
();

625 
	`CHECK_NO_MOCK_FAILURE
();

626 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

627 
	}
}

629 
	$TEST
(
MockSuµ‹tTe°
, 
ªmoveCom∑øt‹sW‹ksHõøchiˇŒy
)

631 
MyTy≥F‹Te°ög
 
	`obje˘
(1);

632 
MyTy≥F‹Te°ögCom∑øt‹
 
com∑øt‹
;

634 
	`mock
("sc›e").
	`ö°ÆlCom∑øt‹
("MyTy≥F‹Te°ög", 
com∑øt‹
);

635 
	`mock
().
	`ªmoveAŒCom∑øt‹s
();

636 
	`mock
("sc›e").
	`ex≥˘O√CÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

637 
	`mock
("sc›e").
	`a˘uÆCÆl
("fun˘i⁄").
	`wôhP¨amëîOfTy≥
("MyTy≥F‹Te°ög", "∑ømëîName", &
obje˘
);

639 
MockNoWayToCom∑ªCu°omTy≥Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "MyTypeForTesting");

640 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

641 
	}
}

643 
	$TEST
(
MockSuµ‹tTe°
, 
hasRëu∫VÆue
)

645 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

646 
	`mock
().
	`ex≥˘O√CÆl
("foo");

647 
	`CHECK
(!
	`mock
().
	`a˘uÆCÆl
("foo").
	`hasRëu∫VÆue
());

648 
	`CHECK
(!
	`mock
().
	`hasRëu∫VÆue
());

650 
	`mock
().
	`ex≥˘O√CÆl
("foo2").
	`™dRëu∫VÆue
(1);

651 
	`CHECK
(
	`mock
().
	`a˘uÆCÆl
("foo2").
	`hasRëu∫VÆue
());

652 
	`CHECK
(
	`mock
().
	`hasRëu∫VÆue
());

653 
	}
}

655 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆue
)

657 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

658 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

659 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

660 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ötRëu∫VÆue
());

661 
	}
}

663 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆueSësDif„ª¡VÆues
)

665 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1);

666 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(2);

668 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

669 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

670 
	`LONGS_EQUAL
(2, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

671 
	`LONGS_EQUAL
(2, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

673 
	}
}

675 
	$TEST
(
MockSuµ‹tTe°
, 
I¡egîRëu∫VÆueSësDif„ª¡VÆuesWhûeP¨amëîsAªIgn‹ed
)

677 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
().
	`™dRëu∫VÆue
(1);

678 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ign‹eOthîP¨amëîs
().
	`™dRëu∫VÆue
(2);

680 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

681 
	`LONGS_EQUAL
(1, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

682 
	`LONGS_EQUAL
(2, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

683 
	`LONGS_EQUAL
(2, 
	`mock
().
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

684 
	}
}

686 
	$TEST
(
MockSuµ‹tTe°
, 
M©chögRëu∫VÆueOnWhûeSig«tuª
)

688 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`™dRëu∫VÆue
(1);

689 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 2).
	`™dRëu∫VÆue
(2);

690 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`wôhP¨amëî
("p1", 3).
	`™dRëu∫VÆue
(3);

691 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`ign‹eOthîP¨amëîs
().
	`™dRëu∫VÆue
(4);

693 
	`LONGS_EQUAL
(3, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 3).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

694 
	`LONGS_EQUAL
(4, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 4).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

695 
	`LONGS_EQUAL
(1, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 1).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

696 
	`LONGS_EQUAL
(2, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("p1", 2).
	`ªtu∫VÆue
().
	`gëI¡VÆue
());

697 
	}
}

699 
	$TEST
(
MockSuµ‹tTe°
, 
SåögRëu∫VÆue
)

701 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
("hello world");

702 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëSåögVÆue
());

703 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock
().
	`°rögRëu∫VÆue
());

704 
	}
}

706 
	$TEST
(
MockSuµ‹tTe°
, 
DoubÀRëu∫VÆue
)

708 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(1.0);

709 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëDoubÀVÆue
(), 0.05);

710 
	`DOUBLES_EQUAL
(1.0, 
	`mock
().
	`doubÀRëu∫VÆue
(), 0.05);

711 
	}
}

713 
	$TEST
(
MockSuµ‹tTe°
, 
PoöãrRëu∫VÆue
)

715 * 
±r
 = (*) 0x001;

716 
	`mock
().
	`ex≥˘O√CÆl
("foo").
	`™dRëu∫VÆue
(
±r
);

717 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`a˘uÆCÆl
("foo").
	`ªtu∫VÆue
().
	`gëPoöãrVÆue
());

718 
	`POINTERS_EQUAL
(
±r
, 
	`mock
().
	`poöãrRëu∫VÆue
());

719 
	}
}

721 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘
)

723 * 
obje˘På
 = (*) 0x001;

724 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

725 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

726 
	}
}

728 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Faûs
)

730 * 
obje˘På
 = (*) 0x001;

731 * 
obje˘På2
 = (*) 0x002;

732 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

734 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

735 
	`mock
().
	`a˘uÆCÆl
("boo").
	`⁄Obje˘
(
obje˘På2
);

737 
MockU√x≥˘edObje˘Faûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", 
obje˘På2
, *
ex≥˘©i⁄sLi°
);

738 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

739 
	}
}

741 
	$TEST
(
MockSuµ‹tTe°
, 
OnObje˘Ex≥˘edButNŸCÆÀd
)

743 * 
obje˘På
 = (*) 0x001;

744 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

745 
	`addFun˘i⁄ToEx≥˘©i⁄sLi°
("boo")->
	`⁄Obje˘
(
obje˘På
);

747 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

748 
	`mock
().
	`ex≥˘O√CÆl
("boo").
	`⁄Obje˘
(
obje˘På
);

749 
	`mock
().
	`a˘uÆCÆl
("boo");

750 
	`mock
().
	`a˘uÆCÆl
("boo");

752 
MockEx≥˘edObje˘Did¡H≠≥nFaûuª
 
	`ex≥˘edFaûuª
(
	`mockFaûuªTe°
(), "boo", *
ex≥˘©i⁄sLi°
);

753 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

754 
	`mock
().
	`checkEx≥˘©i⁄s
();

755 
	`CHECK_EXPECTED_MOCK_FAILURE
(
ex≥˘edFaûuª
);

756 
	}
}

758 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆls
)

760 
	`mock
().
	`ex≥˘NCÆls
(2, "boo");

761 
	`mock
().
	`a˘uÆCÆl
("boo");

762 
	`mock
().
	`a˘uÆCÆl
("boo");

763 
	`mock
().
	`checkEx≥˘©i⁄s
();

764 
	`CHECK_NO_MOCK_FAILURE
();

765 
	}
}

767 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀCÆlsWôhP¨amëîs
)

769 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

770 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

771 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

772 
	`mock
().
	`checkEx≥˘©i⁄s
();

773 
	`CHECK_NO_MOCK_FAILURE
();

774 
	}
}

776 
	$TEST
(
MockSuµ‹tTe°
, 
ex≥˘Mu…ùÀMu…ùÀCÆlsWôhP¨amëîs
)

778 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

779 
	`mock
().
	`ex≥˘NCÆls
(2, "boo").
	`wôhP¨amëî
("doubÀ", 1.0).
	`ign‹eOthîP¨amëîs
();

780 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

781 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

782 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

783 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

784 
	`mock
().
	`checkEx≥˘©i⁄s
();

785 
	`CHECK_NO_MOCK_FAILURE
();

786 
	}
}

788 
	$TEST
(
MockSuµ‹tTe°
, 
åacög
)

790 
	`mock
().
	`åacög
(
åue
);

792 
	`mock
().
	`a˘uÆCÆl
("boo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

793 
	`mock
("sc›e").
	`a˘uÆCÆl
("foo").
	`wôhP¨amëî
("double", 1.0).withParameter("int", 1).withParameter("string", "string");

794 
	`mock
().
	`checkEx≥˘©i⁄s
();

796 
	`STRCMP_CONTAINS
("boo", 
	`mock
().
	`gëTø˚Ouçut
());

797 
	`STRCMP_CONTAINS
("foo", 
	`mock
().
	`gëTø˚Ouçut
());

798 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_c.cpp

27 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	~"CµUTe°/Te°H¨√ss_c.h
"

31 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

32 
	~"Te°MockSuµ‹t_cCFûe.h
"

35 
	$TEST_GROUP
(
MockSuµ‹t_c
)

37 
	}
};

39 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆO√CÆl
)

41 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

42 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

43 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

44 
	}
}

46 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîs
)

48 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨amëîs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

49 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

50 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨amëîs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

51 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

52 
	}
}

54 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

56  
obje˘1
 =
obje˘2
;

58 
	}
}

60 * 
ty≥NameVÆueToSåög
(* 
	$PUNUSED
(
obje˘
))

63 
	}
}

65 
	$TEST
(
MockSuµ‹t_c
, 
ex≥˘AndA˘uÆP¨amëîsOnObje˘
)

67 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

68 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

69 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

70 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

71 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

72 
	}
}

74 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫I¡VÆue
)

76 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

77 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
ötVÆue
);

78 
	`LONGS_EQUAL
(
MOCKVALUETYPE_INTEGER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

79 
	}
}

81 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫DoubÀVÆue
)

83 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫DoubÀVÆue
(1.0);

84 
	`DOUBLES_EQUAL
(1.0, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
doubÀVÆue
, 0.005);

85 
	`LONGS_EQUAL
(
MOCKVALUETYPE_DOUBLE
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

86 
	}
}

88 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫SåögVÆue
)

90 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫SåögVÆue
("hello world");

91 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
°rögVÆue
);

92 
	`LONGS_EQUAL
(
MOCKVALUETYPE_STRING
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

93 
	}
}

95 
	$TEST
(
MockSuµ‹t_c
, 
ªtu∫PoöãrVÆue
)

97 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫PoöãrVÆue
((*) 10);

98 
	`POINTERS_EQUAL
((*Ë10, 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
().
vÆue
.
poöãrVÆue
);

99 
	`LONGS_EQUAL
(
MOCKVALUETYPE_POINTER
, 
	`mock_c
()->
	`ªtu∫VÆue
().
ty≥
);

100 
	}
}

102 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tWôhSc›e
)

104 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

105 
	`LONGS_EQUAL
(0, 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
());

106 
	`LONGS_EQUAL
(1, 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
());

107 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

108 
	}
}

110 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëI¡D©a
)

112 
	`mock_c
()->
	`£tI¡D©a
("integer", 10);

113 
	`LONGS_EQUAL
(10, 
	`mock_c
()->
	`gëD©a
("öãgî").
vÆue
.
ötVÆue
);

114 
	}
}

116 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëDoubÀD©a
)

118 
	`mock_c
()->
	`£tDoubÀD©a
("double", 1.0);

119 
	`DOUBLES_EQUAL
(1.00, 
	`mock_c
()->
	`gëD©a
("doubÀ").
vÆue
.
doubÀVÆue
, 0.05);

120 
	}
}

122 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëSåögD©a
)

124 
	`mock_c
()->
	`£tSåögD©a
("string", "hello world");

125 
	`STRCMP_EQUAL
("hñlÿw‹ld", 
	`mock_c
()->
	`gëD©a
("°rög").
vÆue
.
°rögVÆue
);

126 
	}
}

128 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëPoöãrD©a
)

130 
	`mock_c
()->
	`£tPoöãrD©a
("pointer", (*) 1);

131 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("poöãr").
vÆue
.
poöãrVÆue
);

132 
	}
}

134 
	$TEST
(
MockSuµ‹t_c
, 
MockSuµ‹tSëD©aObje˘
)

136 
	`mock_c
()->
	`£tD©aObje˘
("name", "type", (*) 1);

137 
	`POINTERS_EQUAL
((*Ë1, 
	`mock_c
()->
	`gëD©a
("«me").
vÆue
.
obje˘VÆue
);

138 
	}
}

140 
	$TEST
(
MockSuµ‹t_c
, 
W‹ksInCFûe
)

142 
	`Æl_mock_suµ‹t_c_ˇŒs
();

143 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.c

28 
	~"CµUTe°Ext/MockSuµ‹t_c.h
"

30 
	$ty≥NameIsEquÆ
(* 
obje˘1
, * 
obje˘2
)

32  
obje˘1
 =
obje˘2
;

34 
	}
}

36 * 
	$ty≥NameVÆueToSåög
(* 
obje˘
)

38  (*Ë
obje˘
;

39 
	}
}

41 
	$Æl_mock_suµ‹t_c_ˇŒs
()

43 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo");

44 
	`mock_c
()->
	`a˘uÆCÆl
("boo");

45 
	`mock_c
()->
	`checkEx≥˘©i⁄s
();

47 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhI¡P¨amëîs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

48 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

49 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhI¡P¨amëîs
("öãgî", 1)->
	`wôhDoubÀP¨amëîs
("doube", 1.0)->

50 
	`wôhSåögP¨amëîs
("°rög", "°rög")->
	`wôhPoöãrP¨amëîs
("pointer", (*) 1);

52 
	`mock_c
()->
	`ö°ÆlCom∑øt‹
("ty≥Name", 
ty≥NameIsEquÆ
, 
ty≥NameVÆueToSåög
);

53 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

54 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`wôhP¨amëîOfTy≥
("typeName", "name", (*) 1);

55 
	`mock_c
()->
	`˛ór
();

56 
	`mock_c
()->
	`ªmoveAŒCom∑øt‹s
();

58 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo")->
	`™dRëu∫I¡VÆue
(10);

59 
	`mock_c
()->
	`a˘uÆCÆl
("boo")->
	`ªtu∫VÆue
();

60 
	`mock_c
()->
	`ªtu∫VÆue
();

61 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo2")->
	`™dRëu∫DoubÀVÆue
(1.0);

62 
	`mock_c
()->
	`a˘uÆCÆl
("boo2")->
	`ªtu∫VÆue
();

63 
	`mock_c
()->
	`ªtu∫VÆue
();

65 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo3")->
	`™dRëu∫SåögVÆue
("hello world");

66 
	`mock_c
()->
	`a˘uÆCÆl
("boo3")->
	`ªtu∫VÆue
();

67 
	`mock_c
()->
	`ªtu∫VÆue
();

69 
	`mock_c
()->
	`ex≥˘O√CÆl
("boo4")->
	`™dRëu∫PoöãrVÆue
((*) 10);

70 
	`mock_c
()->
	`a˘uÆCÆl
("boo4")->
	`ªtu∫VÆue
();

71 
	`mock_c
()->
	`ªtu∫VÆue
();

73 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘O√CÆl
("boo");

74 
	`mock_sc›e_c
("Ÿhî")->
	`ex≥˘edCÆlsLe·
();

75 
	`mock_sc›e_c
("sc›e")->
	`ex≥˘edCÆlsLe·
();

76 
	`mock_sc›e_c
("sc›e")->
	`a˘uÆCÆl
("boo");

77 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.h

28 #i‚de‡
__Te°MockSuµ‹tc_CFûe__h


29 
	#__Te°MockSuµ‹tc_CFûe__h


	)

31 
Æl_mock_suµ‹t_c_ˇŒs
();

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°Ext/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

36 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
OrdîedTe°
 
‹dîedTe°
;

39 
OrdîedTe°
 
‹dîedTe°2
;

40 
OrdîedTe°
 
‹dîedTe°3
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

43 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

45 
OrdîedTe°
* 
‹dîedTe°Cache
;

46 
	`£tup
()

48 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

49 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

51 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

52 
fixtuª
->
ªgi°ry_
->
	`unDoLa°AddTe°
();

55 
	`ã¨down
()

57 
dñëe
 
fixtuª
;

58 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

61 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

63 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

66 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

68 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

71 
Uã°
* 
	`fú°Te°
()

73  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
();

76 
Uã°
* 
	`£c⁄dTe°
()

78  
fixtuª
->
ªgi°ry_
->
	`gëFú°Te°
()->
	`gëNext
();

80 
	}
};

82 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

84 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10, 5);

85 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

87 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

88 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

89 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

90 
	}
}

92 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

94 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

95 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

96 
	}
}

98 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

100 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

101 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

102 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

103 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

104 
	}
}

106 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

109 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

110 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

111 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

112 
	}
}

114 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

117 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

118 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

119 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

120 
	}
}

122 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

124 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

125 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

126 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

127 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

128 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

129 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

131 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

132 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

134 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

135 
	}
}

137 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

141 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

143 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

144 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

145 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

147 
	}
}

148 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

150 
	}
};

152 
	gã°Numbî
 = 0;

154 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

156 
	`CHECK
(
ã°Numbî
 == 0);

157 
ã°Numbî
++;

158 
	}
}

160 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

162 
	`CHECK
(
ã°Numbî
 == 2);

163 
ã°Numbî
++;

164 
	}
}

166 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

168 
	`CHECK
(
ã°Numbî
 == 1);

169 
ã°Numbî
++;

170 
	}
}

172 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

174 
	`CHECK
(
ã°Numbî
 == 4);

175 
ã°Numbî
++;

176 
	}
}

178 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

180 
	`CHECK
(
ã°Numbî
 == 3);

181 
ã°Numbî
++;

182 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\AllTests.h

29 
IMPORT_TEST_GROUP
–
Sim∂eSåögExãnsi⁄s
);

30 
IMPORT_TEST_GROUP
–
Te°OrdîedTe°
);

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp

28 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögExãnsi⁄s.h
"

29 
	~"CµUTe°/Te°H¨√ss.h
"

31 
	$TEST_GROUP
(
Sim∂eSåögExãnsi⁄s
)

33 
	}
};

35 
usög
 
«me•a˚
 
	g°d
;

37 
	$TEST
(
Sim∂eSåögExãnsi⁄s
, 
‰omStdSåög
)

39 
°rög
 
	`s
("hello");

40 
Sim∂eSåög
 
	`s1
(
	`SåögFrom
(
s
));

42 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

43 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Exãnsi⁄s/Sim∂eSåögFromStdöt.h
"

31 
	~<°döt.h
>

33 
	$TEST_GROUP
(
Sim∂eSåögFromStdöt
)

35 
	}
};

37 
usög
 
«me•a˚
 
	g°d
;

40 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt64_t
)

48 
uöt64_t
 
i
 = 10;

49 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

50 
	`CHECK_EQUAL
("uöt64_ànŸ suµ‹ãd", 
ªsu…
);

52 
	}
}

54 
	$TEST
(
Sim∂eSåögFromStdöt
, 
I¡64_t
)

67 
	}
}

69 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt32_t
)

71 
uöt32_t
 
i
 = 0xffffffff;

73 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

74 
	`CHECK_EQUAL
("4294967295 (0xffffffff)", 
ªsu…
);

75 
	}
}

77 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt16_t
)

79 
uöt16_t
 
i
 = 0xffff;

81 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

82 
	`CHECK_EQUAL
("65535 (0xffff)", 
ªsu…
);

83 
	}
}

85 
	$TEST
(
Sim∂eSåögFromStdöt
, 
Uöt8_t
)

87 
uöt8_t
 
i
 = 0xff;

89 
Sim∂eSåög
 
ªsu…
 = 
	`SåögFrom
(
i
);

90 
	`CHECK_EQUAL
("255 (0xff)", 
ªsu…
);

91 
	}
}

93 
	$IGNORE_TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt64_t
)

97 
	}
}

99 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt32_t
)

101 
uöt32_t
 
i
 = 0xffffffff;

102 
	`CHECK_EQUAL
(
i
, i);

103 
	}
}

105 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt16_t
)

107 
uöt16_t
 
i
 = 0xffff;

108 
	`CHECK_EQUAL
(
i
, i);

109 
	}
}

111 
	$TEST
(
Sim∂eSåögFromStdöt
, 
CHECK_EQUAL_Uöt8_t
)

113 
uöt8_t
 
i
 = 0xff;

114 
	`CHECK_EQUAL
(
i
, i);

115 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\TestOrderedTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

32 
	~"CµUTe°/Exãnsi⁄s/OrdîedTe°.h
"

34 
	$TEST_GROUP
(
Te°OrdîedTe°
)

35 { 
Te°Te°ögFixtuª
* 
fixtuª
;

37 
OrdîedTe°
 
‹dîedTe°
;

38 
OrdîedTe°
 
‹dîedTe°2
;

39 
OrdîedTe°
 
‹dîedTe°3
;

40 
ExecFun˘i⁄Te°
 
n‹mÆTe°
;

41 
ExecFun˘i⁄Te°
 
n‹mÆTe°2
;

42 
ExecFun˘i⁄Te°
 
n‹mÆTe°3
;

44 
OrdîedTe°
* 
‹dîedTe°Cache
;

45 
	`£tup
()

47 
‹dîedTe°Cache
 = 
OrdîedTe°
::
	`gëOrdîedTe°Hód
();

48 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(0);

50 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

51 
fixtuª
->
ªgi°ry
->
	`unDoLa°AddTe°
();

53 
	`ã¨down
()

55 
dñëe
 
fixtuª
;

56 
OrdîedTe°
::
	`£tOrdîedTe°Hód
(
‹dîedTe°Cache
);

59 
	`In°ÆlOrdîedTe°
(
OrdîedTe°
* 
ã°
, 
Àvñ
)

61 
	`OrdîedTe°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
, 
Àvñ
);

64 
	`In°ÆlN‹mÆTe°
(
Uã°
* 
ã°
)

66 
	`Te°In°ÆÀr
(
ã°
, "ã°group", "ã°«me", 
__FILE__
, 
__LINE__
);

69 
Uã°
* 
	`fú°Te°
()

71  
fixtuª
->
ªgi°ry
->
	`gëFú°Te°
();

74 
Uã°
* 
	`£c⁄dTe°
()

76  
fixtuª
->
ªgi°ry
->
	`gëFú°Te°
()->
	`gëNext
();

78 
	}
};

80 
	$TEST
(
Te°OrdîedTe°
, 
Te°In°ÆÀrSësFõlds
)

82 
	`OrdîedTe°In°ÆÀr
(&
‹dîedTe°
, "testgroup", "testname", "this.cpp", 10,

84 
	`STRCMP_EQUAL
("ã°group", 
‹dîedTe°
.
	`gëGroup
().
	`asCh¨Såög
());

85 
	`STRCMP_EQUAL
("ã°«me", 
‹dîedTe°
.
	`gëName
().
	`asCh¨Såög
());

86 
	`STRCMP_EQUAL
("this.˝p", 
‹dîedTe°
.
	`gëFûe
().
	`asCh¨Såög
());

87 
	`LONGS_EQUAL
(10, 
‹dîedTe°
.
	`gëLöeNumbî
());

88 
	`LONGS_EQUAL
(5, 
‹dîedTe°
.
	`gëLevñ
());

89 
	}
}

91 
	$TEST
(
Te°OrdîedTe°
, 
In°ÆlO√Text
)

93 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

94 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°
);

95 
	}
}

97 
	$TEST
(
Te°OrdîedTe°
, 
OrdîedTe°sAªLa°
)

99 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

100 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

101 
	`CHECK
(
	`fú°Te°
(Ë=&
n‹mÆTe°
);

102 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

103 
	}
}

105 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInRevî£Ordî
)

107 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

108 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

109 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

110 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

111 
	}
}

113 
	$TEST
(
Te°OrdîedTe°
, 
TwoTe°sAddedInOrdî
)

115 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

116 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

117 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

118 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°
);

119 
	}
}

121 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s
)

123 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°
);

124 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 3);

125 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°2
);

126 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 5);

127 
	`In°ÆlN‹mÆTe°
(&
n‹mÆTe°3
);

128 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 7);

130 
Uã°
 * 
fú°OrdîedTe°
 = 
	`fú°Te°
()->
	`gëNext
()->getNext()->getNext();

131 
	`CHECK
(
fú°OrdîedTe°
 =&
‹dîedTe°2
);

132 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
(Ë=&
‹dîedTe°
);

133 
	`CHECK
(
fú°OrdîedTe°
->
	`gëNext
()->gëNext(Ë=&
‹dîedTe°3
);

134 
	}
}

136 
	$TEST
(
Te°OrdîedTe°
, 
Mu…ùÀOrdîedTe°s2
)

138 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°
, 3);

139 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°2
, 1);

140 
	`In°ÆlOrdîedTe°
(&
‹dîedTe°3
, 2);

142 
	`CHECK
(
	`fú°Te°
(Ë=&
‹dîedTe°2
);

143 
	`CHECK
(
	`£c⁄dTe°
(Ë=&
‹dîedTe°3
);

144 
	`CHECK
(
	`£c⁄dTe°
()->
	`gëNext
(Ë=&
‹dîedTe°
);

146 
	}
}

147 
	$TEST_GROUP_BASE
(
Te°OrdîedTe°Ma¸os
, 
OrdîedTe°
)

148 {
	}
};

150 
	gã°Numbî
 = 0;

152 
	$TEST
(
Te°OrdîedTe°Ma¸os
, 
N‹mÆTe°
)

154 
	`CHECK
(
ã°Numbî
 == 0);

155 
ã°Numbî
++;

156 
	}
}

158 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°2
, 2)

160 
	`CHECK
(
ã°Numbî
 == 2);

161 
ã°Numbî
++;

162 
	}
}

164 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°1
, 1)

166 
	`CHECK
(
ã°Numbî
 == 1);

167 
ã°Numbî
++;

168 
	}
}

170 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°4
, 4)

172 
	`CHECK
(
ã°Numbî
 == 4);

173 
ã°Numbî
++;

174 
	}
}

176 
	$TEST_ORDERED
(
Te°OrdîedTe°Ma¸os
, 
Te°3
, 3)

178 
	`CHECK
(
ã°Numbî
 == 3);

179 
ã°Numbî
++;

180 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\JUnitOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/JUnôTe°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 c⁄° * 
	gtheTime
 = "1978-10-03T00:00:00";

37 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

39  
mûlisTime
;

40 
	}
}

42 c⁄° * 
	$MockGëPœtf‹mS≥cificTimeSåög
()

44  
theTime
;

45 
	}
}

47 
	$TEST_GROUP
(
JUnôOuçutTe°
)

48 { cœs†
	cMockJUnôTe°Ouçut
: 
public
 
JUnôTe°Ouçut


50 
public
:

53 
ã°GroupSize
 = 10

57 
deÁu…Size
 = 7

60 
fûesO≥√d
;

61 
fûeBÆ™˚
;

63 
Sim∂eSåög
 
fûeName
;

64 
Sim∂eSåög
 
buf„r
;

66 
Te°Resu…
* 
ªs
;

67 
	sTe°D©a


69 
	`Te°D©a
() :

70 
	`t°_
(0), 
	`ã°Name_
(0), 
	`Áûuª_
(0)

74 
Uã°
* 
t°_
;

75 
Sim∂eSåög
* 
ã°Name_
;

76 
Faûuª
* 
Áûuª_
;

79 
	sTe°GroupD©a


81 
	`Te°GroupD©a
() :

82 
	`numbîTe°s_
(0), 
	`tŸÆFaûuªs_
(0), 
	`«me_
(""), 
	`ã°D©a_
(0)

87 
numbîTe°s_
;

88 
tŸÆFaûuªs_
;

89 
Sim∂eSåög
 
«me_
;

91 
Te°D©a
* 
ã°D©a_
;

94 
Te°GroupD©a
 
ã°GroupD©a_
[
ã°GroupSize
];

96 
Te°GroupD©a
& 
	`cuºítGroup
()

98  
ã°GroupD©a_
[
fûesO≥√d
 - 1];

101 
	`ª£tXmlFûe
()

103 
buf„r
 = "";

106 
	`MockJUnôTe°Ouçut
() :

107 
	`fûesO≥√d
(0), 
	`fûeBÆ™˚
(0), 
	`ªs
(0)

109 
i
 = 0; i < 
ã°GroupSize
; i++) {

110 
ã°GroupD©a_
[
i
].
numbîTe°s_
 = 0;

111 
ã°GroupD©a_
[
i
].
tŸÆFaûuªs_
 = 0;

116 
	`£tResu…
(
Te°Resu…
* 
ã°Res
)

118 
ªs
 = 
ã°Res
;

121 
vútuÆ
 ~
	`MockJUnôTe°Ouçut
()

123 
i
 = 0; i < 
ã°GroupSize
; i++) {

124 
j
 = 0; j < 
ã°GroupD©a_
[
i
].
numbîTe°s_
; j++) {

125 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
t°_
;

126 
dñëe
 
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
ã°Name_
;

127 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
[
j
].
Áûuª_
Ë
dñëe
ÅestGroupData_[i].testData_[j].failure_;

129 i‡(
ã°GroupD©a_
[
i
].
ã°D©a_
Ë
dñëe
[]ÅestGroupData_[i].testData_;

132 
	`LONGS_EQUAL
(0, 
fûeBÆ™˚
);

135 
	`wrôeToFûe
(c⁄° 
Sim∂eSåög
& 
buf
)

137 
buf„r
 +
buf
;

140 
	`›íFûeF‹Wrôe
(c⁄° 
Sim∂eSåög
& 
ö_FûeName
)

142 
fûesO≥√d
++;

143 
fûeBÆ™˚
++;

144 
fûeName
 = 
ö_FûeName
;

147 
	`˛o£Fûe
()

149 
	`CHECK_XML_FILE
();

150 
	`ª£tXmlFûe
();

151 
fûeBÆ™˚
--;

154 
	`¸óãTe°sInGroup
(
ödex
, 
amou¡
, c⁄° * 
group
,

155 c⁄° * 
ba£«me
)

157 
ã°GroupD©a_
[
ödex
].
«me_
 = 
group
;

158 
ã°GroupD©a_
[
ödex
].
numbîTe°s_
 = 
amou¡
;

160 
ã°GroupD©a_
[
ödex
].
ã°D©a_
 = 
√w
 
Te°D©a
[
amou¡
];

161 
i
 = 0; i < 
amou¡
; i++) {

162 
Te°D©a
& 
ã°D©a
 = 
ã°GroupD©a_
[
ödex
].
ã°D©a_
[
i
];

163 
ã°D©a
.
ã°Name_
 = 
√w
 
	`Sim∂eSåög
(
ba£«me
);

164 *
ã°D©a
.
ã°Name_
 +
	`SåögFrom
(()
i
);

165 
ã°D©a
.
t°_
 = 
√w
 
	`Uã°
(
group
,Åe°D©a.
ã°Name_
->
	`asCh¨Såög
(), "file", 1);

168 
	`runTe°s
()

170 
ªs
->
	`ã°sSèπed
();

171 
i
 = 0; i < 
ã°GroupSize
; i++) {

172 
Te°GroupD©a
& 
d©a
 = 
ã°GroupD©a_
[
i
];

173 i‡(
d©a
.
numbîTe°s_
 == 0) ;

175 
mûlisTime
 = 0;

176 
ªs
->
	`cuºítGroupSèπed
(
d©a
.
ã°D©a_
[0].
t°_
);

177 
i
 = 0; i < 
d©a
.
numbîTe°s_
; i++) {

178 
Te°D©a
& 
ã°D©a
 = 
d©a
.
ã°D©a_
[
i
];

180 
mûlisTime
 = 0;

181 
ªs
->
	`cuºítTe°Sèπed
(
ã°D©a
.
t°_
);

182 i‡(
ã°D©a
.
Áûuª_
)

183 
	`¥öt
(*
ã°D©a
.
Áûuª_
);

184 
mûlisTime
 = 10;

185 
ªs
->
	`cuºítTe°Ended
(
ã°D©a
.
t°_
);

187 
mûlisTime
 = 50;

188 
ªs
->
	`cuºítGroupEnded
(
d©a
.
ã°D©a_
[0].
t°_
);

190 
ªs
->
	`ã°sEnded
();

193 
	`£tFaûuª
(
groupIndex
, 
ã°Index
, c⁄° * 
fûeName
, 
löeNumbî
, c⁄° * 
mesßge
)

195 
Te°D©a
& 
d©a
 = 
ã°GroupD©a_
[
groupIndex
].
ã°D©a_
[
ã°Index
];

196 
d©a
.
Áûuª_
 = 
√w
 
	`Faûuª
(d©a.
t°_
, 
fûeName
, 
löeNumbî
, 
mesßge
);

197 
ã°GroupD©a_
[
groupIndex
].
tŸÆFaûuªs_
++;

200 
	`CHECK_HAS_XML_HEADER
(
Sim∂eSåög
 
°rög
)

202 
	`STRCMP_EQUAL
("<?xm»vîsi⁄=\"1.0\"Éncodög=\"UTF-8\" ?>\n", 
°rög
.
	`asCh¨Såög
());

205 
	`CHECK_TEST_SUITE_START
(
Sim∂eSåög
 
ouçut
)

207 
Te°GroupD©a
& 
group
 = 
	`cuºítGroup
();

208 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<testsuiteÉrrors=\"0\" failures=\"%d\" hostname=\"localhost\"Çame=\"%s\"Åests=\"%d\"Åime=\"0.050\"Åimestamp=\"%s\">\n",

209 
group
.
tŸÆFaûuªs_
, group.
«me_
.
	`asCh¨Såög
(), group.
numbîTe°s_
, 
theTime
);

210 
	`CHECK_EQUAL
(
buf
, 
ouçut
);

213 
	`CHECK_XML_FILE
()

215 
tŸÆSize
 = 
	`cuºítGroup
().
numbîTe°s_
+ 
deÁu…Size
 + (cuºítGroup().
tŸÆFaûuªs_
 * 2);

216 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

217 
buf„r
.
	`•lô
("\n", 
cﬁ
);

218 
	`CHECK
(
cﬁ
.
	`size
(Ë>
tŸÆSize
);

219 
	`CHECK_HAS_XML_HEADER
(
cﬁ
[0]);

220 
	`CHECK_TEST_SUITE_START
(
cﬁ
[1]);

221 
	`CHECK_PROPERTIES_START
(
cﬁ
[2]);

222 
	`CHECK_PROPERTIES_END
(
cﬁ
[3]);

223 
	`CHECK_TESTS
(&
cﬁ
[4]);

224 
	`CHECK_SYSTEM_OUT
(
cﬁ
[cﬁ.
	`size
()-3]);

225 
	`CHECK_SYSTEM_ERR
(
cﬁ
[cﬁ.
	`size
()-2]);

226 
	`CHECK_TEST_SUITE_END
(
cﬁ
[cﬁ.
	`size
()-1]);

229 
	`CHECK_PROPERTIES_START
(c⁄° 
Sim∂eSåög
& 
ouçut
)

231 
	`STRCMP_EQUAL
("<¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

234 
	`CHECK_PROPERTIES_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

236 
	`STRCMP_EQUAL
("</¥›îtõs>\n", 
ouçut
.
	`asCh¨Såög
());

239 
	`CHECK_SYSTEM_OUT
(c⁄° 
Sim∂eSåög
& 
ouçut
)

241 
	`STRCMP_EQUAL
("<sy°em-out></sy°em-out>\n", 
ouçut
.
	`asCh¨Såög
());

244 
	`CHECK_SYSTEM_ERR
(c⁄° 
Sim∂eSåög
& 
ouçut
)

246 
	`STRCMP_EQUAL
("<sy°em-îr></sy°em-îr>\n", 
ouçut
.
	`asCh¨Såög
());

249 
	`CHECK_TEST_SUITE_END
(c⁄° 
Sim∂eSåög
& 
ouçut
)

251 
	`STRCMP_EQUAL
("</ã°suôe>", 
ouçut
.
	`asCh¨Såög
());

253 
	`CHECK_TESTS
(
Sim∂eSåög
* 
¨r
)

255 
ödex
 = 0, 
curTe°
 = 0; curTe° < 
	`cuºítGroup
().
numbîTe°s_
; curTest++, index++) {

256 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
 ("<testcase classname=\"%s\"Çame=\"%s\"Åime=\"0.010\">\n",

257 
	`cuºítGroup
().
«me_
.
	`asCh¨Såög
(), cuºítGroup().
ã°D©a_
[
curTe°
].
t°_
->
	`gëName
().asCharString());

258 
	`CHECK_EQUAL
(
buf
, 
¨r
[
ödex
]);

259 i‡(
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
) {

260 
	`CHECK_FAILURE
(
¨r
, 
ödex
, 
curTe°
);

262 
buf
 = "</testcase>\n";

263 
	`CHECK_EQUAL
(
buf
, 
¨r
[++
ödex
]);

267 
	`CHECK_FAILURE
(
Sim∂eSåög
* 
¨r
, & 
i
, 
curTe°
)

269 
Faûuª
& 
f
 = *
	`cuºítGroup
().
ã°D©a_
[
curTe°
].
Áûuª_
;

270 
i
++;

271 
Sim∂eSåög
 
mesßge
 = 
f
.
	`gëMesßge
().
	`asCh¨Såög
();

272 
mesßge
.
	`ª∂a˚
('"','\'');

273 
mesßge
.
	`ª∂a˚
('<','[');

274 
mesßge
.
	`ª∂a˚
('>',']');

275 
mesßge
.
	`ª∂a˚
("\n","{newline}");

276 
Sim∂eSåög
 
buf
 = 
	`SåögFromF‹m©
("<Áûuª mesßge=\"%s:%d: %s\"Åy≥=\"As£πi⁄FaûedEº‹\">\n", 
f
.
	`gëFûeName
().
	`asCh¨Såög
(), f.
	`gëLöeNumbî
(), 
mesßge
.asCharString());

277 
	`CHECK_EQUAL
(
buf
, 
¨r
[
i
]);

278 
i
++;

279 
	`STRCMP_EQUAL
("</Áûuª>\n", 
¨r
[
i
].
	`asCh¨Såög
());

281 
	}
};

283 
MockJUnôTe°Ouçut
 * 
	gouçut
;

284 
Te°Resu…
 *
	gªs
;

286 
	$£tup
()

288 
ouçut
 = 
√w
 
	`MockJUnôTe°Ouçut
();

289 
ªs
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

290 
ouçut
->
	`£tResu…
(
ªs
);

291 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

292 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(
MockGëPœtf‹mS≥cificTimeSåög
);

293 
	}
}

294 
	$ã¨down
()

296 
dñëe
 
ouçut
;

297 
dñëe
 
ªs
;

298 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

299 
	`SëPœtf‹mS≥cificTimeSåögMëhod
(0);

300 
	}
}

302 
	$runTe°s
()

304 
ouçut
->
	`¥ötTe°sSèπed
();

305 
ouçut
->
	`runTe°s
();

306 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

307 
	}
}

310 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupAŒPass
)

312 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "group", "name");

313 
	`runTe°s
();

314 
	`STRCMP_EQUAL
("˝puã°_group.xml", 
ouçut
->
fûeName
.
	`asCh¨Såög
());

315 
	`LONGS_EQUAL
(1, 
ouçut
->
fûesO≥√d
);

316 
	}
}

318 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAŒPass
)

320 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group", "name");

321 
	`runTe°s
();

322 
	}
}

324 
	$TEST
(
JUnôOuçutTe°
, 
mu…ùÀTe°sInTwoGroupAŒPass
)

326 
ouçut
->
	`¸óãTe°sInGroup
(0, 3, "group", "name");

327 
ouçut
->
	`¸óãTe°sInGroup
(1, 8, "secondGroup", "secondName");

328 
	`runTe°s
();

329 
	`LONGS_EQUAL
(2, 
ouçut
->
fûesO≥√d
);

330 
	}
}

332 
	$TEST
(
JUnôOuçutTe°
, 
⁄eTe°InO√GroupFaûed
)

334 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

335 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test <\"just\"> failed");

336 
	`runTe°s
();

337 
	}
}

339 
	$TEST
(
JUnôOuçutTe°
, 
fiveTe°sInO√GroupAndThªeFaû
)

341 
ouçut
->
	`¥ötTe°sSèπed
();

342 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "failedGroup", "failedName");

343 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

344 
ouçut
->
	`£tFaûuª
(0, 1, "file", 5, "Also failed");

345 
ouçut
->
	`£tFaûuª
(0, 4, "file", 8, "And failedágain");

346 
	`runTe°s
();

347 
	}
}

349 
	$TEST
(
JUnôOuçutTe°
, 
fourGroupsAndSomePassAndSomeFaû
)

351 
ouçut
->
	`¥ötTe°sSèπed
();

352 
ouçut
->
	`¸óãTe°sInGroup
(0, 5, "group1", "firstName");

353 
ouçut
->
	`¸óãTe°sInGroup
(1, 50, "group2", "secondName");

354 
ouçut
->
	`¸óãTe°sInGroup
(2, 3, "group3", "thirdName");

355 
ouçut
->
	`¸óãTe°sInGroup
(3, 5, "group4", "fourthName");

357 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test just failed");

358 
ouçut
->
	`¥ötTe°sEnded
(*
ªs
);

359 
	`runTe°s
();

360 
	}
}

362 
	$TEST
(
JUnôOuçutTe°
, 
mesßgeWôhNewLöe
)

364 
ouçut
->
	`¸óãTe°sInGroup
(0, 1, "failedGroup", "failedName");

365 
ouçut
->
	`£tFaûuª
(0, 0, "file", 1, "Test \n failed");

366 
	`runTe°s
();

367 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakAllocatorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Mem‹yLókAŒoˇt‹Te°
)

33 { 
Mem‹yLókAŒoˇt‹
* 
Æloˇt‹
;

35 
	`ã¨down
()

37 i‡(
Æloˇt‹
Ë
dñëe
állocator;

39 
	}
};

41 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAŒoˇt‹
)

43 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

44 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
Æloˇt‹
);

45 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

46 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

47 
	`POINTERS_EQUAL
(
Sènd¨dNewAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAŒoˇt‹
());

48 
	}
}

50 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítNewAºayAŒoˇt‹
)

52 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

53 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
Æloˇt‹
);

54 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

55 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

56 
	`POINTERS_EQUAL
(
Sènd¨dNewAºayAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítNewAºayAŒoˇt‹
());

57 
	}
}

59 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
SëCuºítMÆlocAŒoˇt‹
)

61 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

62 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹
(
Æloˇt‹
);

63 
	`POINTERS_EQUAL
(
Æloˇt‹
, 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

64 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítMÆlocAŒoˇt‹ToDeÁu…
();

65 
	`POINTERS_EQUAL
(
Sènd¨dMÆlocAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
Mem‹yLókAŒoˇt‹
::
	`gëCuºítMÆlocAŒoˇt‹
());

66 
	}
}

69 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocAŒoˇti⁄
)

71 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

72 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

73 
	}
}

75 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
MÆlocNames
)

77 
Æloˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

78 
	`STRCMP_EQUAL
("Sènd¨d MÆlo¯AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

79 
	`STRCMP_EQUAL
("mÆloc", 
Æloˇt‹
->
	`Æloc_«me
());

80 
	`STRCMP_EQUAL
("‰ì", 
Æloˇt‹
->
	`‰ì_«me
());

81 
	}
}

83 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAŒoˇti⁄
)

85 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

86 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

87 
	}
}

89 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewNames
)

91 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

92 
	`STRCMP_EQUAL
("Sènd¨d New AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

93 
	`STRCMP_EQUAL
("√w", 
Æloˇt‹
->
	`Æloc_«me
());

94 
	`STRCMP_EQUAL
("dñëe", 
Æloˇt‹
->
	`‰ì_«me
());

95 
	}
}

97 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayAŒoˇti⁄
)

99 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

100 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

101 
	}
}

103 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NewAºayNames
)

105 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

106 
	`STRCMP_EQUAL
("Sènd¨d New [] AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

107 
	`STRCMP_EQUAL
("√w []", 
Æloˇt‹
->
	`Æloc_«me
());

108 
	`STRCMP_EQUAL
("dñëê[]", 
Æloˇt‹
->
	`‰ì_«me
());

109 
	}
}

111 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownAŒoˇti⁄
)

113 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

114 
Æloˇt‹
->
	`‰ì_mem‹y
◊Œoˇt‹->
	`Æloc_mem‹y
(100));

115 
	}
}

117 
	$TEST
(
Mem‹yLókAŒoˇt‹Te°
, 
NuŒUnknownNames
)

119 
Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

120 
	`STRCMP_EQUAL
("NuŒ AŒoˇt‹", 
Æloˇt‹
->
	`«me
());

121 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`Æloc_«me
());

122 
	`STRCMP_EQUAL
("unknown", 
Æloˇt‹
->
	`‰ì_«me
());

123 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakDetectorTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

30 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 ˛as†
	cMem‹yLókFaûuªF‹Te°
: 
public
 
Mem‹yLókFaûuª


35 
public
:

36 
vútuÆ
 ~
	$Mem‹yLókFaûuªF‹Te°
()

40 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

42 *
mesßge
 = 
Áû_°rög
;

43 
	}
}

45 
Sim∂eSåög
 *
	gmesßge
;

48 
	$TEST_GROUP
(
Mem‹yLókDëe˘‹Te°
)

50 
Mem‹yLókDëe˘‹
* 
dëe˘‹
;

51 
Mem‹yLókFaûuªF‹Te°
 *
ªp‹ãr
;

52 
Sènd¨dMÆlocAŒoˇt‹
* 
mÆlocAŒoˇt‹
;

53 
Sènd¨dNewAŒoˇt‹
* 
√wAŒoˇt‹
;

54 
Sènd¨dNewAºayAŒoˇt‹
* 
√wAºayAŒoˇt‹
;

56 
	`£tup
()

58 
dëe˘‹
 = 
√w
 
Mem‹yLókDëe˘‹
;

59 
ªp‹ãr
 = 
√w
 
Mem‹yLókFaûuªF‹Te°
;

60 
mÆlocAŒoˇt‹
 = 
√w
 
Sènd¨dMÆlocAŒoˇt‹
;

61 
√wAŒoˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

62 
√wAºayAŒoˇt‹
 = 
√w
 
Sènd¨dNewAºayAŒoˇt‹
;

63 
dëe˘‹
->
	`öô
(
ªp‹ãr
);

64 
dëe˘‹
->
	`íabÀ
();

65 
dëe˘‹
->
	`°¨tCheckög
();

66 
ªp‹ãr
->
mesßge
 = 
√w
 
	`Sim∂eSåög
();

68 
	`ã¨down
()

70 
dñëe
 
ªp‹ãr
->
mesßge
;

71 
dñëe
 
dëe˘‹
;

72 
dñëe
 
ªp‹ãr
;

73 
dñëe
 
mÆlocAŒoˇt‹
;

74 
dñëe
 
√wAŒoˇt‹
;

75 
dñëe
 
√wAºayAŒoˇt‹
;

77 
	}
};

79 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√Lók
)

81 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 3);

82 
dëe˘‹
->
	`°›Checkög
();

83 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

84 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

85 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 3"));

86 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

87 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

88 
	`Pœtf‹mS≥cificFªe
(
mem
);

89 
	}
}

91 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókOutsideCheckögPîiod
)

93 
dëe˘‹
->
	`°›Checkög
();

94 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

95 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
);

96 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_HEADER
));

97 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

98 
	`CHECK
(
ouçut
.
	`c⁄èös
("new"));

99 
	`CHECK
(
ouçut
.
	`c⁄èös
(
MEM_LEAK_FOOTER
));

100 
	`Pœtf‹mS≥cificFªe
(
mem
);

101 
	}
}

103 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
NoLóksWh©s€vî
)

105 
dëe˘‹
->
	`°›Checkög
();

106 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

107 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_Æl
));

108 
	}
}

110 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoLóksUsögO≥øt‹New
)

112 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

113 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

114 
dëe˘‹
->
	`°›Checkög
();

115 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

116 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

117 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 8"));

118 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

119 
	`Pœtf‹mS≥cificFªe
(
mem
);

120 
	`Pœtf‹mS≥cificFªe
(
mem2
);

121 
	}
}

123 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocButNoLók
)

125 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

126 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

127 
dëe˘‹
->
	`°›Checkög
();

128 
	`STRCMP_EQUAL
(
MEM_LEAK_NONE
, 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

129 
	}
}

131 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√Lók
)

133 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

134 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

135 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

136 
dëe˘‹
->
	`°›Checkög
();

137 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

138 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

139 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 12"));

140 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 4"));

141 
	`Pœtf‹mS≥cificFªe
(
mem2
);

142 
	}
}

144 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
TwoAŒocO√FªeO√LókRevî£Ordî
)

146 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

147 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 12);

148 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem2
);

149 
dëe˘‹
->
	`°›Checkög
();

150 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

151 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

152 
	`CHECK
(!
ouçut
.
	`c⁄èös
("size: 12"));

153 
	`CHECK
(
ouçut
.
	`c⁄èös
("size: 4"));

154 
	`Pœtf‹mS≥cificFªe
(
mem
);

155 
	}
}

157 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
DñëeN⁄AloˇãdMem‹y
)

159 
a
;

160 * 
∑
 = &
a
;

161 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
∑
, "FREE.c", 100);

162 
dëe˘‹
->
	`°›Checkög
();

163 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_DEALLOC_NON_ALLOCATED
));

164 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: <unknown>Üine: 0 size: 0Åype: unknown"));

165 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

166 
	}
}

168 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiod
)

170 
dëe˘‹
->
	`°›Checkög
();

171 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

172 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

173 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

174 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 
mem
);

175 
	}
}

177 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
Ign‹eMem‹yAŒoˇãdOutsideCheckögPîiodCom∂iˇãdCa£
)

179 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

180 
dëe˘‹
->
	`°›Checkög
();

182 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 8);

183 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

184 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

185 
	`Pœtf‹mS≥cificFªe
(
mem
);

186 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

187 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

189 
dëe˘‹
->
	`°¨tCheckög
();

190 * 
mem3
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4);

191 
dëe˘‹
->
	`°›Checkög
();

192 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

193 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

195 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_checkög
);

196 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

197 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

199 
dëe˘‹
->
	`˛órAŒAccou¡ög
(
mem_Àak_≥riod_Æl
);

200 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

201 
	`Pœtf‹mS≥cificFªe
(
mem2
);

202 
	`Pœtf‹mS≥cificFªe
(
mem3
);

203 
	}
}

205 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√LókUsögO≥øt‹NewWôhFûeLöe
)

207 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAŒoˇt‹
, 4, "file.cpp", 1234);

208 
dëe˘‹
->
	`°›Checkög
();

209 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

210 
	`CHECK
(
ouçut
.
	`c⁄èös
("file.cpp"));

211 
	`CHECK
(
ouçut
.
	`c⁄èös
("1234"));

212 
	`Pœtf‹mS≥cificFªe
(
mem
);

213 
	}
}

215 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªeUsögAºayNew
)

217 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 10, "file.cpp", 1234);

218 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 12);

219 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

220 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

221 
	`CHECK
(
ouçut
.
	`c⁄èös
("new []"));

222 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
);

223 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem2
);

224 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

225 
dëe˘‹
->
	`°›Checkög
();

226 
	}
}

228 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√AŒocAndFªe
)

230 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

231 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 12);

232 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

233 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

234 
	`CHECK
(
ouçut
.
	`c⁄èös
("malloc"));

235 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

236 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
, "file.c", 5678);

237 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

238 
dëe˘‹
->
	`°›Checkög
();

239 
	}
}

241 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
O√RóŒoc
)

243 * 
mem1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "file.cpp", 1234);

245 * 
mem2
 = 
dëe˘‹
->
	`ªÆlocMem‹y
(
mÆlocAŒoˇt‹
, 
mem1
, 1000,

248 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

249 
Sim∂eSåög
 
ouçut
 = 
dëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
);

250 
	`CHECK
(
ouçut
.
	`c⁄èös
("other.cpp"));

252 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem2
);

253 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

254 
dëe˘‹
->
	`°›Checkög
();

255 
	}
}

257 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocAndFªeWôhDif„ªn˚In°™˚sOfTheSameAŒoˇt‹Ty≥
)

259 
Sènd¨dNewAºayAŒoˇt‹
 
√wAºayAŒoˇt‹Two
;

260 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

261 
dëe˘‹
->
	`dóŒocMem‹y
(&
√wAºayAŒoˇt‹Two
, 
mem
, "FREE.c", 100);

262 
dëe˘‹
->
	`°›Checkög
();

263 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

264 
	}
}

266 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥
)

268 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

269 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

270 
dëe˘‹
->
	`°›Checkög
();

271 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_ALLOC_DEALLOC_MISMATCH
));

272 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 100Åype:Çew []"));

273 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

274 
	}
}

276 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
AŒocO√Ty≥FªeAnŸhîTy≥WôhCheckögDißbÀd
)

278 
dëe˘‹
->
	`dißbÀAŒoˇti⁄Ty≥Checkög
();

279 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100, "ALLOC.c", 10);

280 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAºayAŒoˇt‹
, 
mem
, "FREE.c", 100);

281 
dëe˘‹
->
	`°›Checkög
();

282 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

283 
dëe˘‹
->
	`íabÀAŒoˇti⁄Ty≥Checkög
();

284 
	}
}

286 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
M¨kCheckögPîiodLóksAsN⁄CheckögPîiod
)

288 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

289 * 
mem2
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
√wAºayAŒoˇt‹
, 100);

290 
dëe˘‹
->
	`°›Checkög
();

291 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

292 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

293 
dëe˘‹
->
	`m¨kCheckögPîiodLóksAsN⁄CheckögPîiod
();

294 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

295 
	`LONGS_EQUAL
(2, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

296 
	`Pœtf‹mS≥cificFªe
(
mem
);

297 
	`Pœtf‹mS≥cificFªe
(
mem2
);

298 
	}
}

300 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
mem‹yC‹ru±i⁄
)

302 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 10, "ALLOC.c", 10);

303 
mem
[10] = 'O';

304 
mem
[11] = 'H';

305 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
, "FREE.c", 100);

306 
dëe˘‹
->
	`°›Checkög
();

307 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(
MEM_LEAK_MEMORY_CORRUPTION
));

308 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
("állocatedát file: ALLOC.cÜine: 10 size: 10Åype: malloc"));

309 
	`CHECK
(
ªp‹ãr
->
mesßge
->
	`c⁄èös
(" deallocatedát file: FREE.cÜine: 100Åype: free"));

310 
	}
}

312 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ß„lyDñëeNULL
)

314 
dëe˘‹
->
	`dóŒocMem‹y
(
√wAŒoˇt‹
, 0);

315 
	`STRCMP_EQUAL
("", 
ªp‹ãr
->
mesßge
->
	`asCh¨Såög
());

316 
	}
}

318 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodDißbÀd
)

320 
dëe˘‹
->
	`dißbÀ
();

321 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

322 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

323 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

324 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

325 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

326 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

327 
	}
}

329 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodE«bÀd
)

331 
dëe˘‹
->
	`íabÀ
();

332 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

333 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

334 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

335 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

336 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

337 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

338 
	}
}

340 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
≥riodCheckög
)

342 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
mÆlocAŒoˇt‹
, 2);

343 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_Æl
));

344 
	`LONGS_EQUAL
(0, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_dißbÀd
));

345 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_íabÀd
));

346 
	`LONGS_EQUAL
(1, 
dëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

347 
dëe˘‹
->
	`dóŒocMem‹y
(
mÆlocAŒoˇt‹
, 
mem
);

348 
	}
}

350 
	$TEST
(
Mem‹yLókDëe˘‹Te°
, 
ÆloˇãWôhANuŒAŒoˇt‹Cau£sNoProbÀms
)

352 * 
mem
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 2);

353 
dëe˘‹
->
	`dóŒocMem‹y
(
NuŒUnknownAŒoˇt‹
::
	`deÁu…AŒoˇt‹
(), 
mem
);

354 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

3 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

4 
	~"CµUTe°/Te°Ouçut.h
"

5 
	~"CµUTe°/Te°Regi°ry.h
"

6 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

8 
	~"AŒoˇti⁄InCµFûe.h
"

11 
	~"AŒoˇti⁄InCFûe.h
"

14 
	$TEST_GROUP
(
BasicBehavi‹
)

17 
	}
};

19 
	$TEST
(
BasicBehavi‹
, 
C™DñëeNuŒPoöãrs
)

21 
	`dñëe
 (*Ë
NULL
;

22 
dñëe
 [] (*Ë
NULL
;

23 
	}
}

25 
	$TEST_GROUP
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
)

27 
Mem‹yLókDëe˘‹
* 
memLókDëe˘‹
;

28 
	`£tup
()

30 
memLókDëe˘‹
 = 
Mem‹yLókW¨nögPlugö
::
	`gëGlobÆDëe˘‹
();

33 
	}
};

36 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveMÆlocByTemp‹¨lySwôchögOffMÆloc
)

38 
memLóks
 = 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
);

39 #i‡
CPPUTEST_USE_MALLOC_MACROS


40 #unde‡
mÆloc


41 #unde‡
‰ì


43 * 
mem‹y
 = 
	`mÆloc
(10);

44 
	`LONGS_EQUAL
(
memLóks
, 
memLókDëe˘‹
->
	`tŸÆMem‹yLóks
(
mem_Àak_≥riod_checkög
));

45 
	`‰ì
 (
mem‹y
);

46 #i‡
CPPUTEST_USE_MALLOC_MACROS


47 
	~"CµUTe°/Mem‹yLókDëe˘‹MÆlocMa¸os.h
"

49 
	}
}

52 ˛as†
	cNewDummyCœss


54 
	mpublic
:

57 #i‡
CPPUTEST_USE_NEW_MACROS


58 #unde‡
√w


60 * 
›î©‹
 
	$√w
 (
size_t
 
size
, 
addôi⁄Æ
)

61 #i‡
CPPUTEST_USE_NEW_MACROS


62 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

65  
	`mÆloc
(
size
 * 
addôi⁄Æ
);

67 
	}
};

70 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
U£N©iveNewByTemp‹¨lySwôchögOffNew
)

72 #i‡
CPPUTEST_USE_NEW_MACROS


73 #unde‡
√w


74 #unde‡
dñëe


76 * 
mem‹y
 = 
√w
 [10];

77 
dñëe
 [] 
mem‹y
;

78 #i‡
CPPUTEST_USE_NEW_MACROS


79 
	~"CµUTe°/Mem‹yLókDëe˘‹NewMa¸os.h
"

81 
	}
}

84 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


86 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

88 * 
Àak
 = 
	`√wAŒoˇti⁄
();

89 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

90 
dñëe
 
Àak
;

91 
	}
}

93 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayMa¸oOvîlﬂdVüIn˛udeFûeW‹ks
)

95 * 
Àak
 = 
	`√wAºayAŒoˇti⁄
();

96 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCµFûe.˝p", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

97 
dñëe
[] 
Àak
;

98 
	}
}

100 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocOvîrideW‹ks
)

102 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

103 
	`STRCMP_NOCASE_CONTAINS
("AŒoˇti⁄InCFûe.c", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

104 
	`‰ìAŒoˇti⁄
(
Àak
);

105 
	}
}

107 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
MÆlocWôhButFªeWôhoutLókDëe˘i⁄D€¢tCøsh
)

109 * 
Àak
 = 
	`mÆlocAŒoˇti⁄
();

110 
	`‰ìAŒoˇti⁄WôhoutMa¸o
(
Àak
);

111 
	`STRCMP_CONTAINS
("Mem‹yÜókÑï‹t†abouàmÆlo¯™d fªêˇ¿bêˇu£d", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

112 
memLókDëe˘‹
->
	`ªmoveMem‹yLókInf‹m©i⁄WôhoutCheckögOrDóŒoˇtög
(
Àak
);

113 
	}
}

115 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewOvîlﬂdögWôhoutMa¸oW‹ks
)

117 * 
Àak
 = 
	`√wAŒoˇti⁄WôhoutMa¸o
();

118 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

119 
dñëe
 
Àak
;

120 
	}
}

122 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
O≥øt‹NewAºayOvîlﬂdögWôhoutMa¸oW‹ks
)

124 * 
Àak
 = 
	`√wAºayAŒoˇti⁄WôhoutMa¸o
();

125 
	`STRCMP_CONTAINS
("unknown", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

126 
dñëe
[] 
Àak
;

127 
	}
}

131 
	$TEST
(
Mem‹yLókOvîridesToBeU£dInProdu˘i⁄Code
, 
Mem‹yOvîridesAªDißbÀd
)

133 * 
Àak
 = 
	`√wAŒoˇti⁄
();

134 
	`STRCMP_EQUAL
("Nÿmem‹yÜók†wîêdëe˘ed.", 
memLókDëe˘‹
->
	`ªp‹t
(
mem_Àak_≥riod_checkög
));

135 
dñëe
 
Àak
;

136 
	}
}

140 
	$TEST_GROUP
(
OutOfMem‹yTe°sF‹O≥øt‹New
)

142 
Mem‹yLókAŒoˇt‹
* 
no_mem‹y_Æloˇt‹
;

143 
	`£tup
()

145 
no_mem‹y_Æloˇt‹
 = 
√w
 
NuŒUnknownAŒoˇt‹
;

146 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

147 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹
(
no_mem‹y_Æloˇt‹
);

149 
	`ã¨down
()

151 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAŒoˇt‹ToDeÁu…
();

152 
Mem‹yLókAŒoˇt‹
::
	`£tCuºítNewAºayAŒoˇt‹ToDeÁu…
();

153 
dñëe
 
no_mem‹y_Æloˇt‹
;

155 
	}
};

157 #i‡
CPPUTEST_USE_MEM_LEAK_DETECTION


159 #i‡
CPPUTEST_USE_STD_CPP_LIB


161 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

163 
åy
 {

164 
√w
 ;

165 
	`FAIL
("Should haveÅhrownánÉxception!")

167 
	`ˇtch
 (
°d
::
bad_Æloc
) {

169 
	}
}

171 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNew
)

173 
åy
 {

174 
√w
 [10];

175 
	`FAIL
("Should haveÅhrownánÉxception!")

177 
	`ˇtch
 (
°d
::
bad_Æloc
) {

179 
	}
}

183 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒ
)

185 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

186 
	}
}

188 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒ
)

190 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

191 
	}
}

195 #unde‡
√w


197 #i‡
CPPUTEST_USE_STD_CPP_LIB


199 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

201 
åy
 {

202 
√w
 ;

203 
	`FAIL
("Should haveÅhrownánÉxception!")

205 
	`ˇtch
 (
°d
::
bad_Æloc
) {

207 
	}
}

209 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹ThrowsAnEx˚±i⁄WhíUsögStdCµNewWôhoutOvîride
)

211 
åy
 {

212 
√w
 [10];

213 
	`FAIL
("Should haveÅhrownánÉxception!")

215 
	`ˇtch
 (
°d
::
bad_Æloc
) {

217 
	}
}

220 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

222 
	`POINTERS_EQUAL
(
NULL
, 
√w
 );

223 
	}
}

225 
	$TEST
(
OutOfMem‹yTe°sF‹O≥øt‹New
, 
FaûögNewAºayO≥øt‹Rëu∫sNuŒWôhoutOvîride
)

227 
	`POINTERS_EQUAL
(
NULL
, 
√w
 [10]);

228 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakWarningTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Mem‹yLókW¨nögPlugö.h
"

32 
	~"CµUTe°/Mem‹yLókDëe˘‹.h
"

33 
	~"CµUTe°/Mem‹yLókAŒoˇt‹.h
"

34 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

36 * 
	gÀak1
;

37 * 
	gÀak2
;

39 ˛as†
	cDummyRï‹ãr
: 
public
 
Mem‹yLókFaûuª


41 
public
:

42 
vútuÆ
 ~
	$DummyRï‹ãr
()

46 
vútuÆ
 
	$Áû
(* 
Áû_°rög
)

48 
	}
}

52 
Mem‹yLókDëe˘‹
* 
	gdëe˘‹
;

53 
Mem‹yLókW¨nögPlugö
* 
	gmemPlugö
;

54 
DummyRï‹ãr
 
	gdummy
;

55 
Mem‹yLókAŒoˇt‹
* 
	gÆloˇt‹
;

57 
	$TEST_GROUP
(
Mem‹yLókW¨nögTe°
)

58 { 
Te°Te°ögFixtuª
* 
fixtuª
;

59 
	`£tup
()

61 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

62 
dëe˘‹
 = 
√w
 
	`Mem‹yLókDëe˘‹
();

63 
Æloˇt‹
 = 
√w
 
Sènd¨dNewAŒoˇt‹
;

64 
dëe˘‹
->
	`öô
(&
dummy
);

65 
memPlugö
 = 
√w
 
	`Mem‹yLókW¨nögPlugö
("Te°Mem‹yLókW¨nögPlugö", 
dëe˘‹
);

66 
fixtuª
->
ªgi°ry
->
	`ö°ÆlPlugö
(
memPlugö
);

67 
memPlugö
->
	`íabÀ
();

69 
Àak1
 = 0;

70 
Àak2
 = 0;

72 
	`ã¨down
()

74 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak1
);

75 
dëe˘‹
->
	`dóŒocMem‹y
(
Æloˇt‹
, 
Àak2
);

77 
dñëe
 
fixtuª
;

78 
dñëe
 
memPlugö
;

79 
dñëe
 
dëe˘‹
;

80 
dñëe
 
Æloˇt‹
;

82 
	}
};

84 
	$_ã°TwoLóks
()

86 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

88 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

89 
	}
}

91 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
TwoLóks
)

93 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°TwoLóks
);

94 
fixtuª
->
	`runAŒTe°s
();

95 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

96 
fixtuª
->
	`as£πPrötC⁄èös
("TotalÇumber ofÜeaks: 2");

97 
	}
}

99 
	$_ã°Ign‹e2
()

101 
memPlugö
->
	`ex≥˘LóksInTe°
(2);

102 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

103 
Àak2
 = (*Ë
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 4);

104 
	}
}

106 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
Ign‹e2
)

108 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ã°Ign‹e2
);

109 
fixtuª
->
	`runAŒTe°s
();

110 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

111 
	}
}

113 
	$_ÁûAndLókMem‹y
()

115 
Àak1
 = 
dëe˘‹
->
	`ÆlocMem‹y
(
Æloˇt‹
, 10);

116 
	`FAIL
("");

117 
	}
}

119 
	$TEST
(
Mem‹yLókW¨nögTe°
, 
FaûögTe°D€sNŸRï‹tMem‹yLóks
)

121 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûAndLókMem‹y
);

122 
fixtuª
->
	`runAŒTe°s
();

123 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

124 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\NullTestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

30 
	$TEST_GROUP
(
NuŒTe°
)

31 { 
NuŒTe°
* 
nuŒTe°
;

33 
	`TEST_SETUP
()

35 
nuŒTe°
 = 
√w
 
	`NuŒTe°
();

37 
	`TEST_TEARDOWN
()

39 
dñëe
 
nuŒTe°
;

41 
	}
};

43 
	$TEST
(
NuŒTe°
, 
Cª©e
)

45 
	}
}

47 
	$TEST
(
NuŒTe°
, 
In°™˚AlwaysTheSame
)

49 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

50 
	`CHECK
(&
_ö°™˚
 =&
NuŒTe°
::
	`ö°™˚
());

51 
	}
}

53 
	$TEST
(
NuŒTe°
, 
NuŒTe°sD⁄tCou¡
)

55 
NuŒTe°
& 
_ö°™˚
 = NuŒTe°::
	`ö°™˚
();

56 
	`CHECK
(
_ö°™˚
.
	`cou¡Te°s
() == 0);

57 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\PluginTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

34 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

36 
	g£quí˚Numbî
;

38 ˛as†
	cDummyPlugö
: 
public
 
Te°Plugö


40 
public
:

41 
	$DummyPlugö
(c⁄° 
Sim∂eSåög
& 
«me
) :

42 
	`Te°Plugö
(
«me
), 
	`¥eA˘i⁄
(0), 
	$po°A˘i⁄
(0)

46 
vútuÆ
 ~
	$DummyPlugö
()

48 
	}
}

51 
vútuÆ
 
	$¥eTe°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

53 
¥eA˘i⁄
++;

54 
¥eA˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

55 
	}
}

57 
vútuÆ
 
	$po°Te°A˘i⁄
(
Uã°
&, 
Te°Resu…
&)

59 
po°A˘i⁄
++;

60 
po°A˘i⁄Sequí˚
 = 
£quí˚Numbî
++;

61 
	}
}

64 
	g¥eA˘i⁄
;

65 
	g¥eA˘i⁄Sequí˚
;

66 
	gpo°A˘i⁄
;

67 
	gpo°A˘i⁄Sequí˚
;

70 
	$TEST_GROUP
(
PlugöTe°
)

72 
DummyPlugö
* 
fú°Plugö
;

73 
DummyPlugö
* 
£c⁄dPlugö
;

74 
Te°Te°ögFixtuª
 *
gíFixtuª
;

75 
Te°Regi°ry
 *
ªgi°ry
;

76 
	`£tup
()

78 
fú°Plugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN
);

79 
£c⁄dPlugö
 = 
√w
 
	`DummyPlugö
(
GENERIC_PLUGIN2
);

80 
gíFixtuª
 = 
√w
 
Te°Te°ögFixtuª
;

81 
ªgi°ry
 = 
gíFixtuª
->registry;

82 
ªgi°ry
->
	`ö°ÆlPlugö
(
fú°Plugö
);

83 
£quí˚Numbî
 = 1;

86 
	`ã¨down
()

88 
dñëe
 
fú°Plugö
;

89 
dñëe
 
£c⁄dPlugö
;

90 
dñëe
 
gíFixtuª
;

92 
	}
};

94 
	#GENERIC_PLUGIN
 "GíîicPlugö"

	)

95 
	#GENERIC_PLUGIN2
 "GíîicPlugö2"

	)

97 
	$TEST
(
PlugöTe°
, 
PlugöHasName
)

99 
	`CHECK_EQUAL
(
GENERIC_PLUGIN
, 
fú°Plugö
->
	`gëName
());

100 
	}
}

102 
	$TEST
(
PlugöTe°
, 
In°ÆlPlugö
)

104 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëFú°Plugö
());

105 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

106 
	}
}

108 
	$TEST
(
PlugöTe°
, 
In°ÆlMu…ùÀPlugös
)

110 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

111 
	`CHECK_EQUAL
(
fú°Plugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN
));

112 
	`CHECK_EQUAL
(
£c⁄dPlugö
, 
ªgi°ry
->
	`gëPlugöByName
(
GENERIC_PLUGIN2
));

113 
	`CHECK_EQUAL
(0, 
ªgi°ry
->
	`gëPlugöByName
("I doÇotÉxist"));

114 
	}
}

116 
	$TEST
(
PlugöTe°
, 
A˘i⁄sAŒRun
)

118 
gíFixtuª
->
	`runAŒTe°s
();

119 
gíFixtuª
->
	`runAŒTe°s
();

120 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

121 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
po°A˘i⁄
);

122 
	}
}

124 
	$TEST
(
PlugöTe°
, 
Sequí˚
)

126 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

127 
gíFixtuª
->
	`runAŒTe°s
();

128 
	`CHECK_EQUAL
(1, 
£c⁄dPlugö
->
¥eA˘i⁄Sequí˚
);

129 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄Sequí˚
);

130 
	`CHECK_EQUAL
(3, 
fú°Plugö
->
po°A˘i⁄Sequí˚
);

131 
	`CHECK_EQUAL
(4, 
£c⁄dPlugö
->
po°A˘i⁄Sequí˚
);

132 
	}
}

134 
	$TEST
(
PlugöTe°
, 
DißbÀsPlugösD⁄tRun
)

136 
ªgi°ry
->
	`ö°ÆlPlugö
(
£c⁄dPlugö
);

137 
£c⁄dPlugö
->
	`dißbÀ
();

138 
gíFixtuª
->
	`runAŒTe°s
();

139 
	`CHECK
(!
£c⁄dPlugö
->
	`isE«bÀd
());

140 
£c⁄dPlugö
->
	`íabÀ
();

141 
gíFixtuª
->
	`runAŒTe°s
();

142 
	`CHECK_EQUAL
(2, 
fú°Plugö
->
¥eA˘i⁄
);

143 
	`CHECK_EQUAL
(1, 
£c⁄dPlugö
->
¥eA˘i⁄
);

144 
	`CHECK
(
£c⁄dPlugö
->
	`isE«bÀd
());

145 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SetPluginTest.cpp

1 
	~"CµUTe°/Te°H¨√ss.h
"

2 
	~"CµUTe°/Te°Regi°ry.h
"

3 
	~"CµUTe°/Te°Ouçut.h
"

4 
	~"CµUTe°/Te°Plugö.h
"

6 
	$‹ig_func1
()

8 
	}
}

10 
	$°ub_func1
()

12 
	}
}

14 
	$‹ig_func2
()

16 
	}
}

18 
	$°ub_func2
()

20 
	}
}

23 (*
	gÂ1
)();

24 (*
	gÂ2
)();

26 
	$TEST_GROUP
(
SëPoöãrPlugöTe°
)

27 { 
SëPoöãrPlugö
* 
∂ugö
;

28 
Te°Regi°ry
* 
myRegi°ry
;

29 
SåögBuf„rTe°Ouçut
* 
ouçut
;

30 
Te°Resu…
* 
ªsu…
;

32 
	`£tup
()

34 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

35 
∂ugö
 = 
√w
 
	`SëPoöãrPlugö
("TestSetPlugin");

36 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

37 
myRegi°ry
->
	`ö°ÆlPlugö
(
∂ugö
);

38 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

39 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
ouçut
);

42 
	`ã¨down
()

44 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

45 
dñëe
 
myRegi°ry
;

46 
dñëe
 
∂ugö
;

47 
dñëe
 
ouçut
;

48 
dñëe
 
ªsu…
;

50 
	}
};

52 ˛as†
	cFun˘i⁄PoöãrUã°
: 
public
 
Uã°


54 
public
:

55 
	$£tup
()

57 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

58 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

59 
	`UT_PTR_SET
(
Â2
, 
°ub_func2
);

61 
	$ã°Body
()

63 
	`CHECK
(
Â1
 =
°ub_func1
);

64 
	`CHECK
(
Â2
 =
°ub_func2
);

65 
	}
}

68 
	$TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTwoFun˘i⁄Poöãr
)

70 
Fun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`Fun˘i⁄PoöãrUã°
();

73 
Â1
 = 
‹ig_func1
;

74 
Â2
 = 
‹ig_func2
;

75 
myRegi°ry
->
	`addTe°
(
t°
);

76 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

77 
	`CHECK
(
Â1
 =
‹ig_func1
);

78 
	`CHECK
(
Â2
 =
‹ig_func2
);

79 
	`LONGS_EQUAL
(0, 
ªsu…
->
	`gëFaûuªCou¡
());

80 
dñëe
 
t°
;

81 
	}
}

83 ˛as†
	cMaxFun˘i⁄PoöãrUã°
: 
public
 
Uã°


85 
public
:

86 
numOfFpSës
;

87 
	$MaxFun˘i⁄PoöãrUã°
(
num
) :

88 
	$numOfFpSës
(
num
)

93 
	$£tup
()

95 
i
 = 0; i < 
numOfFpSës
; ++i)

96 
	`UT_PTR_SET
(
Â1
, 
°ub_func1
);

97 
	}
}

100 
	$IGNORE_TEST
(
SëPoöãrPlugöTe°
, 
ö°ÆlTooMuchFun˘i⁄Poöãr
)

102 
MaxFun˘i⁄PoöãrUã°
 *
t°
 = 
√w
 
	`MaxFun˘i⁄PoöãrUã°
(

103 
SëPoöãrPlugö
::
MAX_SET
 + 1);

104 
myRegi°ry
->
	`addTe°
(
t°
);

106 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

108 
	`LONGS_EQUAL
(1, 
ªsu…
->
	`gëFaûuªCou¡
());

109 
dñëe
 
t°
;

110 
	}
}

112 
	g‹ig_doubÀ
 = 3.0;

113 * 
	g‹ig_doubÀ_±r
 = &
‹ig_doubÀ
;

114 
	g°ub_doubÀ
 = 4.0;

116 ˛as†
	cSëDoubÀPoöãrUã°
: 
public
 
Uã°


118 
public
:

119 
	$£tup
()

121 
	`UT_PTR_SET
(
‹ig_doubÀ_±r
, &
°ub_doubÀ
);

123 
	$ã°Body
()

125 
	`CHECK
(
‹ig_doubÀ_±r
 =&
°ub_doubÀ
);

126 
	}
}

129 
	$TEST
(
SëPoöãrPlugöTe°
, 
doubÀPoöãr
)

131 
SëDoubÀPoöãrUã°
 *
doubÀt°
 = 
√w
 
	`SëDoubÀPoöãrUã°
();

132 
myRegi°ry
->
	`addTe°
(
doubÀt°
);

133 
	`CHECK
(
‹ig_doubÀ_±r
 =&
‹ig_doubÀ
);

134 
dñëe
 
doubÀt°
;

135 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SimpleStringTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Sim∂eSåög.h
"

30 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

32 
	$TEST_GROUP
(
Sim∂eSåög
)

35 
	}
};

37 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚
)

39 
Sim∂eSåög
 
	`ex≥˘ed
("hellohello");

40 
Sim∂eSåög
 
	`a˘uÆ
("hello", 2);

42 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

43 
	}
}

45 
	$TEST
(
Sim∂eSåög
, 
Cª©eSequí˚OfZîo
)

47 
Sim∂eSåög
 
	`ex≥˘ed
("");

48 
Sim∂eSåög
 
	`a˘uÆ
("hello", 0);

50 
	`CHECK_EQUAL
(
ex≥˘ed
, 
a˘uÆ
);

51 
	}
}

53 
	$TEST
(
Sim∂eSåög
, 
C›y
)

55 
Sim∂eSåög
 
	`s1
("hello");

56 
Sim∂eSåög
 
	`s2
(
s1
);

58 
	`CHECK_EQUAL
(
s1
, 
s2
);

59 
	}
}

61 
	$TEST
(
Sim∂eSåög
, 
Assignmít
)

63 
Sim∂eSåög
 
	`s1
("hello");

64 
Sim∂eSåög
 
	`s2
("goodbye");

66 
s2
 = 
s1
;

68 
	`CHECK_EQUAL
(
s1
, 
s2
);

69 
	}
}

71 
	$TEST
(
Sim∂eSåög
, 
EquÆôy
)

73 
Sim∂eSåög
 
	`s1
("hello");

74 
Sim∂eSåög
 
	`s2
("hello");

76 
	`CHECK
(
s1
 =
s2
);

77 
	}
}

79 
	$TEST
(
Sim∂eSåög
, 
InEquÆôy
)

81 
Sim∂eSåög
 
	`s1
("hello");

82 
Sim∂eSåög
 
	`s2
("goodbye");

84 
	`CHECK
(
s1
 !
s2
);

85 
	}
}

87 
	$TEST
(
Sim∂eSåög
, 
asCh¨Såög
)

89 
Sim∂eSåög
 
	`s1
("hello");

91 
	`STRCMP_EQUAL
("hñlo", 
s1
.
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Sim∂eSåög
, 
Size
)

96 
Sim∂eSåög
 
	`s1
("hello!");

98 
	`LONGS_EQUAL
(6, 
s1
.
	`size
());

99 
	}
}

101 
	$TEST
(
Sim∂eSåög
, 
Addôi⁄
)

103 
Sim∂eSåög
 
	`s1
("hello!");

104 
Sim∂eSåög
 
	`s2
("goodbye!");

105 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

106 
Sim∂eSåög
 
s4
;

107 
s4
 = 
s1
 + 
s2
;

109 
	`CHECK_EQUAL
(
s3
, 
s4
);

110 
	}
}

112 
	$TEST
(
Sim∂eSåög
, 
C⁄ˇã«ti⁄
)

114 
Sim∂eSåög
 
	`s1
("hello!");

115 
Sim∂eSåög
 
	`s2
("goodbye!");

116 
Sim∂eSåög
 
	`s3
("hello!goodbye!");

117 
Sim∂eSåög
 
s4
;

118 
s4
 +
s1
;

119 
s4
 +
s2
;

121 
	`CHECK_EQUAL
(
s3
, 
s4
);

123 
Sim∂eSåög
 
	`s5
("hello!goodbye!hello!goodbye!");

124 
s4
 += s4;

126 
	`CHECK_EQUAL
(
s5
, 
s4
);

127 
	}
}

129 
	$TEST
(
Sim∂eSåög
, 
C⁄èös
)

131 
Sim∂eSåög
 
	`s
("hello!");

132 
Sim∂eSåög
 
	`em±y
("");

133 
Sim∂eSåög
 
	`begönög
("hello");

134 
Sim∂eSåög
 
	`íd
("lo!");

135 
Sim∂eSåög
 
	`mid
("l");

136 
Sim∂eSåög
 
	`nŸP¨tOfSåög
("xxxx");

138 
	`CHECK
(
s
.
	`c⁄èös
(
em±y
));

139 
	`CHECK
(
s
.
	`c⁄èös
(
begönög
));

140 
	`CHECK
(
s
.
	`c⁄èös
(
íd
));

141 
	`CHECK
(
s
.
	`c⁄èös
(
mid
));

142 
	`CHECK
(!
s
.
	`c⁄èös
(
nŸP¨tOfSåög
));

144 
	`CHECK
(
em±y
.
	`c⁄èös
(empty));

145 
	`CHECK
(!
em±y
.
	`c⁄èös
(
s
));

146 
	}
}

148 
	$TEST
(
Sim∂eSåög
, 
°¨tsWôh
)

150 
Sim∂eSåög
 
	`hi
("Hi you!");

151 
Sim∂eSåög
 
	`∑π
("Hi");

152 
Sim∂eSåög
 
	`diff
("Hrrm Hi you! ffdsfd");

153 
	`CHECK
(
hi
.
	`°¨tsWôh
(
∑π
));

154 
	`CHECK
(!
∑π
.
	`°¨tsWôh
(
hi
));

155 
	`CHECK
(!
diff
.
	`°¨tsWôh
(
hi
));

156 
	}
}

158 
	$TEST
(
Sim∂eSåög
, 
•lô
)

160 
Sim∂eSåög
 
	`hi
("hello\nworld\nhow\ndo\nyou\ndo\n\n");

162 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

163 
hi
.
	`•lô
("\n", 
cﬁÀ˘i⁄
);

165 
	`LONGS_EQUAL
(7, 
cﬁÀ˘i⁄
.
	`size
());

166 
	`STRCMP_EQUAL
("hñlo\n", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

167 
	`STRCMP_EQUAL
("w‹ld\n", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

168 
	`STRCMP_EQUAL
("how\n", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

169 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[3].
	`asCh¨Såög
());

170 
	`STRCMP_EQUAL
("you\n", 
cﬁÀ˘i⁄
[4].
	`asCh¨Såög
());

171 
	`STRCMP_EQUAL
("do\n", 
cﬁÀ˘i⁄
[5].
	`asCh¨Såög
());

172 
	`STRCMP_EQUAL
("\n", 
cﬁÀ˘i⁄
[6].
	`asCh¨Såög
());

173 
	}
}

175 
	$TEST
(
Sim∂eSåög
, 
•lôNoTokíOnTheEnd
)

177 
Sim∂eSåög
 
	`°rög
("Bah Yah oops");

178 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁÀ˘i⁄
;

180 
°rög
.
	`•lô
(" ", 
cﬁÀ˘i⁄
);

181 
	`LONGS_EQUAL
(3, 
cﬁÀ˘i⁄
.
	`size
());

182 
	`STRCMP_EQUAL
("Bah ", 
cﬁÀ˘i⁄
[0].
	`asCh¨Såög
());

183 
	`STRCMP_EQUAL
("Yah ", 
cﬁÀ˘i⁄
[1].
	`asCh¨Såög
());

184 
	`STRCMP_EQUAL
("o›s", 
cﬁÀ˘i⁄
[2].
	`asCh¨Såög
());

185 
	}
}

187 
	$TEST
(
Sim∂eSåög
, 
cou¡
)

189 
Sim∂eSåög
 
	`°r
("ha ha ha ha");

190 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

191 
	}
}

193 
	$TEST
(
Sim∂eSåög
, 
cou¡Togëhî
)

195 
Sim∂eSåög
 
	`°r
("hahahaha");

196 
	`LONGS_EQUAL
(4, 
°r
.
	`cou¡
("ha"));

197 
	}
}

199 
	$TEST
(
Sim∂eSåög
, 
ídsWôh
)

201 
Sim∂eSåög
 
	`°r
("Hello World");

202 
	`CHECK
(
°r
.
	`ídsWôh
("World"));

203 
	`CHECK
(!
°r
.
	`ídsWôh
("Worl"));

204 
	`CHECK
(!
°r
.
	`ídsWôh
("Hello"));

205 
Sim∂eSåög
 
	`°r2
("ah");

206 
	`CHECK
(
°r2
.
	`ídsWôh
("ah"));

207 
	`CHECK
(!
°r2
.
	`ídsWôh
("baah"));

208 
Sim∂eSåög
 
	`°r3
("");

209 
	`CHECK
(!
°r3
.
	`ídsWôh
("baah"));

211 
Sim∂eSåög
 
	`°r4
("ha ha ha ha");

212 
	`CHECK
(
°r4
.
	`ídsWôh
("ha"));

213 
	}
}

215 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚Ch¨WôhCh¨
)

217 
Sim∂eSåög
 
	`°r
("abcabcabca");

218 
°r
.
	`ª∂a˚
('a', 'b');

219 
	`STRCMP_EQUAL
("bbcbbcbbcb", 
°r
.
	`asCh¨Såög
());

220 
	}
}

222 
	$TEST
(
Sim∂eSåög
, 
ª∂a˚SåögWôhSåög
)

224 
Sim∂eSåög
 
	`°r
("boo baa boo baa boo");

225 
°r
.
	`ª∂a˚
("boo", "boohoo");

226 
	`STRCMP_EQUAL
("boohoÿbØ boohoÿbØ boohoo", 
°r
.
	`asCh¨Såög
());

227 
	}
}

229 
	$TEST
(
Sim∂eSåög
, 
C⁄èösNuŒ
)

231 
Sim∂eSåög
 
	`s
(0);

232 
	`CHECK
(!
s
.
	`c⁄èös
("something"));

233 
	}
}

235 
	$TEST
(
Sim∂eSåög
, 
Ch¨a˘îs
)

237 
Sim∂eSåög
 
	`s
(
	`SåögFrom
('a'));

238 
Sim∂eSåög
 
	`s2
(
	`SåögFrom
('a'));

239 
	`CHECK
(
s
 =
s2
);

240 
	}
}

242 
	$TEST
(
Sim∂eSåög
, 
DoubÀs
)

244 
Sim∂eSåög
 
	`s
(
	`SåögFrom
(1.2));

245 
	`STRCMP_EQUAL
("1.200000", 
s
.
	`asCh¨Såög
());

246 
s
 = 
	`SåögFrom
(1.2, 2);

247 
	`STRCMP_EQUAL
("1.20", 
s
.
	`asCh¨Såög
());

248 
	}
}

250 
	$TEST
(
Sim∂eSåög
, 
HexSåögs
)

252 
Sim∂eSåög
 
h1
 = 
	`HexSåögFrom
(0xffff);

253 
	`STRCMP_EQUAL
("ffff", 
h1
.
	`asCh¨Såög
());

254 
	}
}

256 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©
)

258 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s %s! %d", "Hello", "World", 2009);

259 
	`STRCMP_EQUAL
("HñlÿW‹ld! 2009", 
h1
.
	`asCh¨Såög
());

260 
	}
}

262 
	$TEST
(
Sim∂eSåög
, 
SåögFromF‹m©L¨ge
)

264 c⁄° * 
s
 =

266 
Sim∂eSåög
 
h1
 = 
	`SåögFromF‹m©
("%s%s%s%s%s%s%s%s%s%s", 
s
, s, s, s,

267 
s
, s, s, s, s, s);

268 
	`LONGS_EQUAL
(10, 
h1
.
	`cou¡
(
s
));

269 
	}
}

271 
	$WøµedUpVSNPrötf
(* 
buf
, 
n
, c⁄° * 
f‹m©
, ...)

273 
va_li°
 
¨gumíts
;

274 
	`va_°¨t
(
¨gumíts
, 
f‹m©
);

276 
ªsu…
 = 
	`Pœtf‹mS≥cificVSN¥ötf
(
buf
, 
n
, 
f‹m©
, 
¨gumíts
);

277 
	`va_íd
(
¨gumíts
);

278  
ªsu…
;

279 
	}
}

281 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_fôs
)

283 
buf
[10];

285 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345");

286 
	`STRCMP_EQUAL
("12345", 
buf
);

287 
	`LONGS_EQUAL
(5, 
cou¡
);

288 
	}
}

290 
	$TEST
(
Sim∂eSåög
, 
Pœtf‹mS≥cificS¥ötf_d€sNŸFô
)

292 
buf
[10];

294 
cou¡
 = 
	`WøµedUpVSNPrötf
(
buf
, (buf), "%s", "12345678901");

295 
	`STRCMP_EQUAL
("123456789", 
buf
);

296 
	`LONGS_EQUAL
(11, 
cou¡
);

297 
	}
}

299 
	$TEST
(
Sim∂eSåög
, 
NuŒP¨amëîs2
)

301 
Sim∂eSåög
* 
¨r
 = 
√w
 SimpleString[100];

302 
dñëe
[] 
¨r
;

303 
	}
}

305 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄Mu…ùÀAŒoˇãNoLóksMem‹y
)

307 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

308 
cﬁ
.
	`Æloˇã
(5);

309 
cﬁ
.
	`Æloˇã
(5);

311 
	}
}

313 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄RódOutOfBoundsRëu∫sEm±ySåög
)

315 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

316 
cﬁ
.
	`Æloˇã
(3);

317 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

318 
	}
}

320 
	$TEST
(
Sim∂eSåög
, 
CﬁÀ˘i⁄WrôögToEm±ySåög
)

322 
Sim∂eSåögCﬁÀ˘i⁄
 
cﬁ
;

323 
cﬁ
.
	`Æloˇã
(3);

324 
cﬁ
[3] = 
	`Sim∂eSåög
("HAH");

325 
	`STRCMP_EQUAL
("", 
cﬁ
[3].
	`asCh¨Såög
());

326 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestFailureTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

31 
	g«me•a˚


33 c⁄° 
	gÁûLöeNumbî
 = 2;

34 c⁄° * 
	gÁûFûeName
 = "fail.cpp";

37 
	gzîo
 = 0.0;

38 c⁄° 
	g«n
 = 
zîo
 / zero;

40 
	$TEST_GROUP
(
Te°Faûuª
)

42 
Uã°
* 
ã°
;

43 
SåögBuf„rTe°Ouçut
* 
¥öãr
;

45 
	`£tup
()

47 
ã°
 = 
√w
 
	`NuŒTe°
(
ÁûFûeName
, 
ÁûLöeNumbî
-1);

48 
¥öãr
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

50 
	`ã¨down
()

52 
dñëe
 
ã°
;

53 
dñëe
 
¥öãr
;

56 
	}
};

57 
	#FAILURE_EQUAL
(
a
, 
b
Ë
	`STRCMP_EQUAL_LOCATION
◊, b.
	`gëMesßge
().
	`asCh¨Såög
(), 
__FILE__
, 
__LINE__
)

	)

59 
	$TEST
(
Te°Faûuª
, 
Cª©eFaûuª
)

61 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

62 
Te°Faûuª
 
	`f2
(
ã°
, "the failure message");

63 
Te°Faûuª
 
	`f3
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
);

64 
	}
}

66 
	$TEST
(
Te°Faûuª
, 
GëTe°FûeAndLöeFromFaûuª
)

68 
Te°Faûuª
 
	`f1
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "the failure message");

69 
	`STRCMP_EQUAL
(
ÁûFûeName
, 
f1
.
	`gëTe°FûeName
().
	`asCh¨Såög
());

70 
	`LONGS_EQUAL
(1, 
f1
.
	`gëTe°LöeNumbî
());

71 
	}
}

73 
	$TEST
(
Te°Faûuª
, 
Cª©ePassögEquÆsFaûuª
)

75 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

76 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <a˘uÆ>", 
f
);

77 
	}
}

79 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsA˘uÆ
)

81 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ex≥˘ed", 
NULL
);

82 
	`FAILURE_EQUAL
("ex≥˘ed <ex≥˘ed>\n\tbuàwa† <“uŒ)>", 
f
);

83 
	}
}

85 
	$TEST
(
Te°Faûuª
, 
EquÆsFaûuªWôhNuŒAsEx≥˘ed
)

87 
EquÆsFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
NULL
, "actual");

88 
	`FAILURE_EQUAL
("ex≥˘ed <“uŒ)>\n\tbuàwa† <a˘uÆ>", 
f
);

89 
	}
}

91 
	$TEST
(
Te°Faûuª
, 
CheckEquÆFaûuª
)

93 
CheckEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "expected", "actual");

94 
	`FAILURE_EQUAL
("expected <expected>\n"

97 "\à ^", 
f
);

98 
	}
}

100 
	$TEST
(
Te°Faûuª
, 
CheckFaûuª
)

102 
CheckFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

103 
	`FAILURE_EQUAL
("CHECK(chkËÁûed", 
f
);

104 
	}
}

106 
	$TEST
(
Te°Faûuª
, 
FaûFaûuª
)

108 
FaûFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "chk");

109 
	`FAILURE_EQUAL
("chk", 
f
);

110 
	}
}

112 
	$TEST
(
Te°Faûuª
, 
L⁄gsEquÆFaûuª
)

114 
L⁄gsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1, 2);

115 
	`FAILURE_EQUAL
("ex≥˘ed <1 0x1>\n\tbuàwa† <2 0x2>", 
f
);

116 
	}
}

118 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuª
)

120 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "abd");

121 
	`FAILURE_EQUAL
("expected <abc>\n"

124 "\à ^", 
f
);

125 
	}
}

127 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheEnd
)

129 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "abc", "ab");

130 
	`FAILURE_EQUAL
("expected <abc>\n"

133 "\à ^", 
f
);

134 
	}
}

136 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªNewV¨ü¡AtTheEnd
)

138 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "EndOfALongerString", "EndOfALongerStrinG");

139 
	`FAILURE_EQUAL
("expected <EndOfALongerString>\n"

142 "\à ^", 
f
);

143 
	}
}

145 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªWôhNewLöesAndTabs
)

147 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
,

151 
	`FAILURE_EQUAL
("expected <StringWith\t\nDifferentString>\n"

154 "\à \t\n^", 
f
);

155 
	}
}

157 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªInTheMiddÀ
)

159 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aa", "ab");

160 
	`FAILURE_EQUAL
("expected <aa>\n"

163 "\à ^", 
f
);

164 
	}
}

167 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆFaûuªAtTheBegönög
)

169 
SåögEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "aaa", "bbb");

170 
	`FAILURE_EQUAL
("expected <aaa>\n"

173 "\à ^", 
f
);

174 
	}
}

176 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª
)

178 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ABC", "abd");

179 
	`FAILURE_EQUAL
("expected <ABC>\n"

182 "\à ^", 
f
);

183 
	}
}

185 
	$TEST
(
Te°Faûuª
, 
SåögsEquÆNoCa£Faûuª2
)

187 
SåögEquÆNoCa£Faûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, "ac", "AB");

188 
	`FAILURE_EQUAL
("expected <ac>\n"

191 "\à ^", 
f
);

192 
	}
}

194 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆN‹mÆ
)

196 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 3.0);

197 
	`FAILURE_EQUAL
("expected <1.000000>\n"

198 "\tbuàwa† <2.000000>Åhªshﬁd u£d wa†<3.000000>", 
f
);

199 
	}
}

201 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆEx≥˘edIsNaN
)

203 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 
«n
, 2.0, 3.0);

204 
	`FAILURE_EQUAL
("expected <Nan - NotáÇumber>\n"

206 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

207 
	}
}

209 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆA˘uÆIsNaN
)

211 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 
«n
, 3.0);

212 
	`FAILURE_EQUAL
("expected <1.000000>\n"

214 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

215 
	}
}

217 
	$TEST
(
Te°Faûuª
, 
DoubÀsEquÆThªshﬁdIsNaN
)

219 
DoubÀsEquÆFaûuª
 
	`f
(
ã°
, 
ÁûFûeName
, 
ÁûLöeNumbî
, 1.0, 2.0, 
«n
);

220 
	`FAILURE_EQUAL
("expected <1.000000>\n"

222 "\tC™nŸ makêcom∑ris⁄†wôh N™", 
f
);

223 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTest.cpp

30 
	#_WCHART


	)

31 
	~"CµUTe°/Te°H¨√ss_c.h
"

34 
	~"CµUTe°/Te°H¨√ss.h
"

35 
	~"CµUTe°/Te°Regi°ry.h
"

36 
	~"CµUTe°/Te°Ouçut.h
"

37 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

38 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

40 
	$TEST_GROUP
(
Te°H¨√ss_c
)

42 
Te°Te°ögFixtuª
* 
fixtuª
;

43 
	`TEST_SETUP
()

45 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

47 
	`TEST_TEARDOWN
()

49 
dñëe
 
fixtuª
;

51 
	}
};

53 
	$_ÁûI¡Mëhod
()

55 
	`CHECK_EQUAL_C_INT
(1, 2);

56 
	}
}

58 
	$TEST
(
Te°H¨√ss_c
, 
checkI¡
)

60 
	`CHECK_EQUAL_C_INT
(2, 2);

61 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûI¡Mëhod
);

62 
fixtuª
->
	`runAŒTe°s
();

63 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1>\n but was <2>");

64 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

65 
	}
}

67 
	$_ÁûRólMëhod
()

69 
	`CHECK_EQUAL_C_REAL
(1.0, 2.0, 0.5);

70 
	}
}

72 
	$TEST
(
Te°H¨√ss_c
, 
checkRól
)

74 
	`CHECK_EQUAL_C_REAL
(1.0, 1.1, 0.5);

75 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûRólMëhod
);

76 
fixtuª
->
	`runAŒTe°s
();

77 
fixtuª
->
	`as£πPrötC⁄èös
("expected <1.000000>\n but was <2.000000>");

78 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

79 
	}
}

81 
	$_ÁûCh¨Mëhod
()

83 
	`CHECK_EQUAL_C_CHAR
('a', 'c');

84 
	}
}

86 
	$TEST
(
Te°H¨√ss_c
, 
checkCh¨
)

88 
	`CHECK_EQUAL_C_CHAR
('a', 'a');

89 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûCh¨Mëhod
);

90 
fixtuª
->
	`runAŒTe°s
();

91 
fixtuª
->
	`as£πPrötC⁄èös
("expected <a>\n but was <c>");

92 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

93 
	}
}

95 
	$_ÁûSåögMëhod
()

97 
	`CHECK_EQUAL_C_STRING
("Hello", "World");

98 
	}
}

100 
	$TEST
(
Te°H¨√ss_c
, 
checkSåög
)

102 
	`CHECK_EQUAL_C_STRING
("Hello", "Hello");

103 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûSåögMëhod
);

104 
fixtuª
->
	`runAŒTe°s
();

105 
fixtuª
->
	`as£πPrötC⁄èös
("expected <Hello>\n but was <World>");

106 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

107 
	}
}

109 
	$_ÁûTextMëhod
()

111 
	`FAIL_TEXT_C
("Booo");

112 
	}
}

114 
	$TEST
(
Te°H¨√ss_c
, 
checkFaûText
)

116 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûTextMëhod
);

117 
fixtuª
->
	`runAŒTe°s
();

118 
fixtuª
->
	`as£πPrötC⁄èös
("Booo");

119 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

120 
	}
}

122 
	$_ÁûMëhod
()

124 
	`FAIL_C
();

125 
	}
}

127 
	$TEST
(
Te°H¨√ss_c
, 
checkFaû
)

129 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

130 
fixtuª
->
	`runAŒTe°s
();

131 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

132 
fixtuª
->
	`as£πPrötC⁄èös
("arness_c");

133 
	}
}

135 
	$_CheckMëhod
()

137 
	`CHECK_C
(
Ál£
);

138 
	}
}

140 
	$TEST
(
Te°H¨√ss_c
, 
checkCheck
)

142 
	`CHECK_C
(
åue
);

143 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_CheckMëhod
);

144 
fixtuª
->
	`runAŒTe°s
();

145 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

146 
	}
}

148 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_mÆloc_out_of_mem‹y
)

150 
	`˝puã°_mÆloc_£t_out_of_mem‹y
();

151 
	`CHECK
(0 =
	`˝puã°_mÆloc
(100));

153 
	`˝puã°_mÆloc_£t_nŸ_out_of_mem‹y
();

154 * 
mem
 = 
	`˝puã°_mÆloc
(100);

155 
	`CHECK
(0 !
mem
);

156 
	`˝puã°_‰ì
(
mem
);

157 
	}
}

159 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ˇŒoc
)

161 * 
mem
 = 
	`˝puã°_ˇŒoc
(10, 10);

162 
	`CHECK
(0 !
mem
);

163 
	`˝puã°_‰ì
(
mem
);

164 
	}
}

166 
	$TEST
(
Te°H¨√ss_c
, 
˝puã°_ªÆloc_œrgî
)

168 c⁄° * 
numbî_°rög
 = "123456789";

170 * 
mem1
 = (*Ë
	`˝puã°_mÆloc
(10);

172 
	`Pœtf‹mS≥cificSåCpy
(
mem1
, 
numbî_°rög
);

173 
	`CHECK
(
mem1
 != 0);

175 * 
mem2
 = (*Ë
	`˝puã°_ªÆloc
(
mem1
, 1000);

177 
	`CHECK
(
mem2
 != 0);

178 
	`STRCMP_EQUAL
(
numbî_°rög
, 
mem2
)

180 
	`˝puã°_‰ì
(
mem2
);

181 
	}
}

183 
	$TEST
(
Te°H¨√ss_c
, 
ma¸os
)

185 * 
mem1
 = 
	`mÆloc
(10);

186 * 
mem2
 = 
	`ˇŒoc
(10, 20);

187 * 
mem3
 = 
	`ªÆloc
(
mem2
, 100);

188 
	`‰ì
(
mem1
);

189 
	`‰ì
(
mem3
);

190 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTestCFile.c

2 
	~"CµUTe°/Te°H¨√ss_c.h
"

4 
fun˘i⁄WôhUnu£dP¨amëî
(* 
	$PUNUSED
(
u∆essP¨am©î
))

7 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestInstallerTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

35 
NuŒTe°
 
	gnuŒTe°
;

37 
	$TEST_GROUP
(
Te°In°ÆÀr
)

38 { 
Te°In°ÆÀr
* 
ã°In°ÆÀr
;

39 
Te°Regi°ry
* 
myRegi°ry
;

40 
	`£tup
()

42 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

43 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

44 
ã°In°ÆÀr
 = 
√w
 
	`Te°In°ÆÀr
(&
nuŒTe°
, "TestInstaller",

45 "ã°", 
__FILE__
, 
__LINE__
);

47 
	`ã¨down
()

49 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

50 
ã°In°ÆÀr
->
	`unDo
();

51 
dñëe
 
ã°In°ÆÀr
;

52 
dñëe
 
myRegi°ry
;

54 
	}
};

56 
	$TEST
(
Te°In°ÆÀr
, 
Cª©e
)

58 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestOutputTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Resu….h
"

31 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

33 
	gmûlisTime
;

35 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

37  
mûlisTime
;

38 
	}
}

40 
	$TEST_GROUP
(
Te°Ouçut
)

42 
Te°Ouçut
* 
¥öãr
;

43 
SåögBuf„rTe°Ouçut
* 
mock
;

44 
Uã°
* 
t°
;

45 
Faûuª
 *
f
;

46 
Te°Resu…
* 
ªsu…
;

48 
	`TEST_SETUP
()

50 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

51 
¥öãr
 = 
mock
;

52 
t°
 = 
√w
 
	`Uã°
("group", "test", "file", 1);

53 
f
 = 
√w
 
	`Faûuª
(
t°
, "failfile", 2, "message");

54 
ªsu…
 = 
√w
 
	`Te°Resu…
(*
mock
);

55 
ªsu…
->
	`£tTŸÆExecuti⁄Time
(10);

56 
mûlisTime
 = 0;

57 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

59 
	`TEST_TEARDOWN
()

61 
dñëe
 
¥öãr
;

62 
dñëe
 
t°
;

63 
dñëe
 
f
;

64 
dñëe
 
ªsu…
;

65 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

67 
	}
};

69 
	$TEST
(
Te°Ouçut
, 
PrötC⁄°Ch¨Sèr
)

71 
¥öãr
->
	`¥öt
("hello");

72 
¥öãr
->
	`¥öt
("hello\n");

73 
	`STRCMP_EQUAL
("hñlohñlo\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

74 
	}
}

76 
	$TEST
(
Te°Ouçut
, 
PrötL⁄g
)

78 
¥öãr
->
	`¥öt
(1234);

79 
	`STRCMP_EQUAL
("1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

80 
	}
}

82 
	$TEST
(
Te°Ouçut
, 
PrötDoubÀ
)

84 
¥öãr
->
	`¥ötDoubÀ
(12.34);

85 
	`STRCMP_EQUAL
("12.340", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

86 
	}
}

88 
	$TEST
(
Te°Ouçut
, 
SåómO≥øt‹s
)

90 *
¥öãr
 << "n=" << 1234;

91 
	`STRCMP_EQUAL
("n=1234", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

92 
	}
}

94 
	$TEST
(
Te°Ouçut
, 
PrötTe°Ended
)

96 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

97 
	`STRCMP_EQUAL
(".", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

98 
	}
}

100 
	$TEST
(
Te°Ouçut
, 
PrötTe°ALŸ
)

102 
i
 = 0; i < 60; ++i) {

103 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

105 
	`STRCMP_EQUAL
("..................................................\n..........", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

106 
	}
}

108 
	$TEST
(
Te°Ouçut
, 
SëProgªssIndiˇt‹
)

110 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

111 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

112 
ªsu…
->
	`£tProgªssIndiˇt‹
("!");

113 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

114 
ªsu…
->
	`£tProgªssIndiˇt‹
(".");

115 
¥öãr
->
	`¥ötCuºítTe°Ended
(*
ªsu…
);

117 
	`STRCMP_EQUAL
(".!.", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

118 
	}
}

120 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Sèπed
)

122 
mock
->
	`vîbo£
();

123 
¥öãr
->
	`¥ötCuºítTe°Sèπed
(*
t°
);

124 
	`STRCMP_EQUAL
("TEST(group,Åe°)", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

125 
	}
}

127 
	$TEST
(
Te°Ouçut
, 
PrötTe°Vîbo£Ended
)

129 
mock
->
	`vîbo£
();

130 
ªsu…
->
	`cuºítTe°Sèπed
(
t°
);

131 
mûlisTime
 = 5;

132 
ªsu…
->
	`cuºítTe°Ended
(
t°
);

133 
	`STRCMP_EQUAL
("TEST(group,Åe°Ë- 5 ms\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

134 
	}
}

136 
	$TEST
(
Te°Ouçut
, 
PrötTe°Run
)

138 
¥öãr
->
	`¥ötTe°Run
(2, 3);

139 
	`STRCMP_EQUAL
("Te°Ñu¿2 o‡3\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

140 
	}
}

142 
	$TEST
(
Te°Ouçut
, 
PrötTe°RunO∆yO√
)

144 
¥öãr
->
	`¥ötTe°Run
(1, 1);

145 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

146 
	}
}

148 
	$TEST
(
Te°Ouçut
, 
PrötFaûuª
)

150 
¥öãr
->
	`¥öt
(*
f
);

151 
	`STRCMP_EQUAL
("\nÁûfûe:2:Éº‹: Faûuª i¿TEST(group,Åe°)\n\tmesßge\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

152 
	}
}

154 
	$TEST
(
Te°Ouçut
, 
PrötTe°Sèπs
)

156 
¥öãr
->
	`¥ötTe°sSèπed
();

157 
	`STRCMP_EQUAL
("", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

158 
	}
}

160 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEnded
)

162 
ªsu…
->
	`cou¡Te°
();

163 
ªsu…
->
	`cou¡Check
();

164 
ªsu…
->
	`cou¡Ign‹ed
();

165 
ªsu…
->
	`cou¡Ign‹ed
();

166 
ªsu…
->
	`cou¡Run
();

167 
ªsu…
->
	`cou¡Run
();

168 
ªsu…
->
	`cou¡Run
();

169 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

170 
	`STRCMP_EQUAL
("\nOK (1Åe°s, 3Ñ™, 1 checks, 2 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

171 
	}
}

173 
	$TEST
(
Te°Ouçut
, 
¥ötTe°sEndedWôhFaûuªs
)

175 
ªsu…
->
	`addFaûuª
(*
f
);

176 
¥öãr
->
	`Êush
();

177 
¥öãr
->
	`¥ötTe°sEnded
(*
ªsu…
);

178 
	`STRCMP_EQUAL
("\nEº‹†(1 faûuªs, 0Åe°s, 0Ñ™, 0 checks, 0 ign‹ed, 0 fûãªd out, 10 ms)\n\n", 
mock
->
	`gëOuçut
().
	`asCh¨Såög
());

179 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestRegistryTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Regi°ry.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	g«me•a˚


34 
°ub
()

37 c⁄° 
	gã°LöeNumbî
 = 1;

40 ˛as†
	cMockTe°
: 
public
 
Uã°


42 
public
:

43 
MockTe°
(c⁄° * 
group
 = "Group") :

44 
Uã°
(
group
, "Name", "Fûe", 
ã°LöeNumbî
), 
	$hasRun_
(
Ál£
)

47 
	$ã°Body
()

49 
hasRun_
 = 
åue
;

50 
	}
}

52 
boﬁ
 
	ghasRun_
;

55 ˛as†
	cMockTe°Resu…
: 
public
 
Te°Resu…


57 
public
:

59 
cou¡Te°sSèπed
;

60 
	mcou¡Te°sEnded
;

61 
	mcou¡CuºítTe°Sèπed
;

62 
	mcou¡CuºítTe°Ended
;

63 
	mcou¡CuºítGroupSèπed
;

64 
	mcou¡CuºítGroupEnded
;

66 
	$MockTe°Resu…
(
Te°Ouçut
& 
p
) :

67 
	$Te°Resu…
(
p
)

69 
	`ª£tCou¡
();

72 
vútuÆ
 ~
	$MockTe°Resu…
()

74 
	}
}

77 
	$ª£tCou¡
()

79 
cou¡Te°sSèπed
 = 0;

80 
cou¡Te°sEnded
 = 0;

81 
cou¡CuºítTe°Sèπed
 = 0;

82 
cou¡CuºítTe°Ended
 = 0;

83 
cou¡CuºítGroupSèπed
 = 0;

84 
cou¡CuºítGroupEnded
 = 0;

85 
	}
}

87 
vútuÆ
 
	$ã°sSèπed
()

89 
cou¡Te°sSèπed
++;

90 
	}
}

91 
vútuÆ
 
	$ã°sEnded
()

93 
cou¡Te°sEnded
++;

94 
	}
}

95 
vútuÆ
 
	$cuºítTe°Sèπed
(
Uã°
* 
ã°
)

97 
cou¡CuºítTe°Sèπed
++;

98 
	}
}

99 
vútuÆ
 
	$cuºítTe°Ended
(
Uã°
* 
ã°
)

101 
cou¡CuºítTe°Ended
++;

102 
	}
}

103 
vútuÆ
 
	$cuºítGroupSèπed
(
Uã°
* 
ã°
)

105 
cou¡CuºítGroupSèπed
++;

106 
	}
}

107 
vútuÆ
 
	$cuºítGroupEnded
(
Uã°
* 
ã°
)

109 
cou¡CuºítGroupEnded
++;

110 
	}
}

114 
	$TEST_GROUP
(
Te°Regi°ry
)

116 
Te°Regi°ry
* 
myRegi°ry
;

117 
SåögBuf„rTe°Ouçut
* 
ouçut
;

118 
MockTe°
* 
ã°1
;

119 
MockTe°
* 
ã°2
;

120 
MockTe°
* 
ã°3
;

121 
Te°Resu…
 *
ªsu…
;

122 
MockTe°Resu…
 *
mockResu…
;

123 
	`TEST_SETUP
()

125 
ouçut
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

126 
mockResu…
 = 
√w
 
	`MockTe°Resu…
(*
ouçut
);

127 
ªsu…
 = 
mockResu…
;

128 
ã°1
 = 
√w
 
	`MockTe°
();

129 
ã°2
 = 
√w
 
	`MockTe°
();

130 
ã°3
 = 
√w
 
	`MockTe°
("group2");

131 
myRegi°ry
 = 
√w
 
	`Te°Regi°ry
();

132 
myRegi°ry
->
	`£tCuºítRegi°ry
(myRegistry);

135 
	`TEST_TEARDOWN
()

137 
myRegi°ry
->
	`£tCuºítRegi°ry
(0);

138 
dñëe
 
myRegi°ry
;

139 
dñëe
 
ã°1
;

140 
dñëe
 
ã°2
;

141 
dñëe
 
ã°3
;

142 
dñëe
 
ªsu…
;

143 
dñëe
 
ouçut
;

145 
	}
};

147 
	$TEST
(
Te°Regi°ry
, 
ªgi°ryMyRegi°ryAndRe£t
)

149 
	`CHECK
(
myRegi°ry
->
	`gëCuºítRegi°ry
() == myRegistry);

150 
	}
}

152 
	$TEST
(
Te°Regi°ry
, 
em±yRegi°ryIsEm±y
)

154 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

155 
	}
}

157 
	$TEST
(
Te°Regi°ry
, 
addO√Te°IsNŸEm±y
)

159 
myRegi°ry
->
	`addTe°
(
ã°1
);

160 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

161 
	}
}

163 
	$TEST
(
Te°Regi°ry
, 
addO√TwoTe°s
)

165 
myRegi°ry
->
	`addTe°
(
ã°1
);

166 
myRegi°ry
->
	`addTe°
(
ã°2
);

167 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

168 
	}
}

170 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°s
)

172 
myRegi°ry
->
	`addTe°
(
ã°1
);

173 
myRegi°ry
->
	`addTe°
(
ã°2
);

174 
	`CHECK
(!
ã°1
->
hasRun_
);

175 
	`CHECK
(!
ã°2
->
hasRun_
);

176 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

177 
	`CHECK
(
ã°1
->
hasRun_
);

178 
	`CHECK
(
ã°2
->
hasRun_
);

179 
	}
}

181 
	$TEST
(
Te°Regi°ry
, 
runTwoTe°sCheckResu…Fun˘i⁄sCÆÀd
)

183 
myRegi°ry
->
	`addTe°
(
ã°1
);

184 
myRegi°ry
->
	`addTe°
(
ã°2
);

185 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

186 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sSèπed
);

187 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡Te°sEnded
);

188 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupSèπed
);

189 
	`LONGS_EQUAL
(1, 
mockResu…
->
cou¡CuºítGroupEnded
);

190 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

191 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítTe°Ended
);

192 
	}
}

194 
	$TEST
(
Te°Regi°ry
, 
runThªeTe°ßndTwoGroupsCheckResu…Fun˘i⁄sCÆÀd
)

196 
myRegi°ry
->
	`addTe°
(
ã°1
);

197 
myRegi°ry
->
	`addTe°
(
ã°2
);

198 
myRegi°ry
->
	`addTe°
(
ã°3
);

199 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

200 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupSèπed
);

201 
	`LONGS_EQUAL
(2, 
mockResu…
->
cou¡CuºítGroupEnded
);

202 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Sèπed
);

203 
	`LONGS_EQUAL
(3, 
mockResu…
->
cou¡CuºítTe°Ended
);

204 
	}
}

206 
	$TEST
(
Te°Regi°ry
, 
unDoTe°
)

208 
myRegi°ry
->
	`addTe°
(
ã°1
);

209 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

210 
myRegi°ry
->
	`unDoLa°AddTe°
();

211 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

212 
	}
}

214 
	$TEST
(
Te°Regi°ry
, 
unDoButNoTe°
)

216 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

217 
myRegi°ry
->
	`unDoLa°AddTe°
();

218 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 0);

219 
	}
}

221 
	$TEST
(
Te°Regi°ry
, 
ªÆlyUndoLa°Te°
)

223 
myRegi°ry
->
	`addTe°
(
ã°1
);

224 
myRegi°ry
->
	`addTe°
(
ã°2
);

225 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 2);

226 
myRegi°ry
->
	`unDoLa°AddTe°
();

227 
	`CHECK
(
myRegi°ry
->
	`cou¡Te°s
() == 1);

228 
myRegi°ry
->
	`runAŒTe°s
(*
ªsu…
);

229 
	`CHECK
(
ã°1
->
hasRun_
);

230 
	`CHECK
(!
ã°2
->
hasRun_
);

231 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestResultTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Pœtf‹mS≥cificFun˘i⁄s.h
"

30 
	~"CµUTe°/Te°Ouçut.h
"

32 
	$MockGëPœtf‹mS≥cificTimeInMûlis
()

35 
	}
}

37 
	$TEST_GROUP
(
Te°Resu…
)

39 
Te°Ouçut
* 
¥öãr
;

40 
SåögBuf„rTe°Ouçut
* 
mock
;

42 
Te°Resu…
* 
ªs
;

44 
	`TEST_SETUP
()

46 
mock
 = 
√w
 
	`SåögBuf„rTe°Ouçut
();

47 
¥öãr
 = 
mock
;

48 
ªs
 = 
√w
 
	`Te°Resu…
(*
¥öãr
);

49 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(
MockGëPœtf‹mS≥cificTimeInMûlis
);

51 
	`TEST_TEARDOWN
()

53 
	`SëPœtf‹mS≥cificTimeInMûlisMëhod
(0);

54 
dñëe
 
¥öãr
;

55 
dñëe
 
ªs
;

57 
	}
};

59 
	$TEST
(
Te°Resu…
, 
Te°EndedWûlPrötResu…sAndExecuti⁄Time
)

61 
ªs
->
	`ã°sEnded
();

62 
	`CHECK
(
mock
->
	`gëOuçut
().
	`c⁄èös
("10 ms"));

63 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\UtestTest.cpp

28 
	~"CµUTe°/Te°H¨√ss.h
"

29 
	~"CµUTe°/Te°Ouçut.h
"

30 
	~"CµUTe°/Te°Regi°ry.h
"

31 
	~"CµUTe°/Te°Te°ögFixtuª.h
"

33 
boﬁ
 
	ga·îCheck
;

35 
	$TEST_GROUP
(
Uã°
)

37 
Te°Te°ögFixtuª
* 
fixtuª
;

38 
	`£tup
()

40 
fixtuª
 = 
√w
 
	`Te°Te°ögFixtuª
();

41 
a·îCheck
 = 
Ál£
;

43 
	`ã¨down
()

45 
dñëe
 
fixtuª
;

48 
	`ã°FaûuªWôh
((*
mëhod
)())

50 
fixtuª
->
	`£tTe°Fun˘i⁄
(
mëhod
);

51 
fixtuª
->
	`runAŒTe°s
();

52 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

53 
	`CHECK
(!
a·îCheck
);

56 
	}
};

58 
	$_∑ssMëhod
()

60 
	`CHECK
(
åue
);

61 
a·îCheck
 = 
åue
;

62 
	}
}

64 
	$_∑ssPröt
()

66 
	`UT_PRINT
("Hello World!");

67 
	}
}

69 
	$_∑ssPrötF
()

71 
	`UT_PRINT
(
	`SåögFromF‹m©
("Hello %s %d", "World!", 2009));

72 
	}
}

74 
	$_ÁûMëhod
()

76 
	`FAIL
("ThisÅest fails");

77 
a·îCheck
 = 
åue
;

78 
	}
}

80 
	$_ÁûMëhodFAIL_TEST
()

82 
	`FAIL_TEST
("ThisÅest fails");

83 
a·îCheck
 = 
åue
;

84 
	}
}

86 
	$_ÁûMëhodCHECK
()

88 
	`CHECK
(
Ál£
);

89 
a·îCheck
 = 
åue
;

90 
	}
}

92 
	$_ÁûMëhodCHECK_EQUAL
()

94 
	`CHECK_EQUAL
(1, 2);

95 
a·îCheck
 = 
åue
;

96 
	}
}

98 
	$_ÁûMëhodSTRCMP_EQUAL
()

100 
	`STRCMP_EQUAL
("a", "b");

101 
a·îCheck
 = 
åue
;

102 
	}
}

104 
	$_ÁûMëhodSTRCMP_CONTAINS
()

106 
	`STRCMP_CONTAINS
("hello", "world");

107 
a·îCheck
 = 
åue
;

108 
	}
}

110 
	$_ÁûMëhodLONGS_EQUAL
()

112 
	`LONGS_EQUAL
(1, 0xff);

113 
a·îCheck
 = 
åue
;

114 
	}
}

115 
	$_ÁûMëhodBYTES_EQUAL
()

117 
	`BYTES_EQUAL
('a', 'b');

118 
a·îCheck
 = 
åue
;

119 
	}
}

121 
	$_ÁûMëhodPOINTERS_EQUAL
()

123 
	`POINTERS_EQUAL
((*)0xa5a5, (*)0xf0f0);

124 
a·îCheck
 = 
åue
;

125 
	}
}

127 
	$_ÁûMëhodDOUBLES_EQUAL
()

129 
	`DOUBLES_EQUAL
(0.12, 44.1, 0.3);

130 
a·îCheck
 = 
åue
;

131 
	}
}

133 
	$TEST
(
Uã°
, 
FaûuªPrötsSomëhög
)

135 
	`ã°FaûuªWôh
(
_ÁûMëhod
);

136 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

137 
fixtuª
->
	`as£πPrötC⁄èös
("ThisÅest fails");

138 
	}
}

140 
	$TEST
(
Uã°
, 
FaûuªWôhFaûTe°
)

142 
	`ã°FaûuªWôh
(
_ÁûMëhodFAIL_TEST
);

143 
	}
}

145 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹L⁄gI¡s
)

147 
	`ã°FaûuªWôh
(
_ÁûMëhodLONGS_EQUAL
);

148 
fixtuª
->
	`as£πPrötC⁄èös
("expected < 1 0x01>");

149 
fixtuª
->
	`as£πPrötC⁄èös
("but was <255 0xff>");

150 
	}
}

152 
	$TEST
(
Uã°
, 
FaûuªPrötHexOuçutF‹Poöãrs
)

154 
	`ã°FaûuªWôh
(
_ÁûMëhodPOINTERS_EQUAL
);

155 
fixtuª
->
	`as£πPrötC⁄èös
("expected <0xa5a5>");

156 
fixtuª
->
	`as£πPrötC⁄èös
("but was <0xf0f0>");

157 
	}
}

159 
	$TEST
(
Uã°
, 
FaûuªWôhDOUBLES_EQUAL
)

161 
	`ã°FaûuªWôh
(
_ÁûMëhodDOUBLES_EQUAL
);

162 
	}
}

164 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK
)

166 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK
);

167 
	}
}

169 
	$TEST
(
Uã°
, 
FaûuªWôhCHECK_EQUAL
)

171 
	`ã°FaûuªWôh
(
_ÁûMëhodCHECK_EQUAL
);

172 
	}
}

174 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_EQUAL
)

176 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_EQUAL
);

177 
	}
}

179 
	$TEST
(
Uã°
, 
FaûuªWôhSTRCMP_CONTAINS
)

181 
	`ã°FaûuªWôh
(
_ÁûMëhodSTRCMP_CONTAINS
);

182 
	}
}

184 
	$TEST
(
Uã°
, 
FaûuªWôhBYTES_EQUAL
)

186 
	`ã°FaûuªWôh
(
_ÁûMëhodBYTES_EQUAL
);

187 
	}
}

189 
	$TEST
(
Uã°
, 
Suc˚ssPrötsNŸhög
)

191 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

192 
fixtuª
->
	`runAŒTe°s
();

193 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

194 
fixtuª
->
	`as£πPrötC⁄èös
(".\nOK (1Åests");

195 
	`CHECK
(
a·îCheck
);

196 
	}
}

198 
	$TEST
(
Uã°
, 
PrötPrötsWh©evîPrötPröts
)

200 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPröt
);

201 
fixtuª
->
	`runAŒTe°s
();

202 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

203 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World!");

204 
fixtuª
->
	`as£πPrötC⁄èös
(
__FILE__
);

205 
	}
}

207 
	$TEST
(
Uã°
, 
PrötPrötsPrötf
)

209 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssPrötF
);

210 
fixtuª
->
	`runAŒTe°s
();

211 
	`LONGS_EQUAL
(0, 
fixtuª
->
	`gëFaûuªCou¡
());

212 
fixtuª
->
	`as£πPrötC⁄èös
("Hello World! 2009");

213 
	}
}

215 
	$TEST
(
Uã°
, 
ÆlMa¸os
)

217 
	`CHECK
(0 == 0);

218 
	`LONGS_EQUAL
(1,1);

219 
	`BYTES_EQUAL
(0xab,0xab);

220 
	`CHECK_EQUAL
(100,100);

221 
	`STRCMP_EQUAL
("THIS", "THIS");

222 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

223 
	`POINTERS_EQUAL
(
this
,Åhis);

224 
	}
}

226 
	$fun˘i⁄Th©Rëu∫sAVÆue
()

228 
	`CHECK
(0 == 0);

229 
	`LONGS_EQUAL
(1,1);

230 
	`BYTES_EQUAL
(0xab,0xab);

231 
	`CHECK_EQUAL
(100,100);

232 
	`STRCMP_EQUAL
("THIS", "THIS");

233 
	`DOUBLES_EQUAL
(1.0, 1.0, .01);

234 
	`POINTERS_EQUAL
(0, 0);

236 
	}
}

238 
	$TEST
(
Uã°
, 
ÆlMa¸osFromFun˘i⁄Th©Rëu∫sAVÆue
)

240 
	`fun˘i⁄Th©Rëu∫sAVÆue
();

241 
	}
}

243 
	$TEST
(
Uã°
, 
As£πsA˘LikeSèãmíts
)

245 i‡(
fixtuª
 !0)
	`CHECK
(
åue
)

246 
	`CHECK
(
Ál£
)

248 i‡(
fixtuª
 != 0)

249 
	`CHECK_EQUAL
(
åue
,Årue)

251 
	`CHECK_EQUAL
(
Ál£
, false)

253 i‡(
fixtuª
 != 0)

254 
	`STRCMP_EQUAL
("", "")

256 
	`STRCMP_EQUAL
("", " ")

258 i‡(
fixtuª
 != 0)

259 
	`STRCMP_CONTAINS
("con", "contains")

261 
	`STRCMP_CONTAINS
("hello", "world")

263 i‡(
fixtuª
 != 0)

264 
	`LONGS_EQUAL
(1, 1)

266 
	`LONGS_EQUAL
(1, 0)

268 i‡(
fixtuª
 != 0)

269 
	`DOUBLES_EQUAL
(1, 1, 0.01)

271 
	`DOUBLES_EQUAL
(1, 0, 0.01)

273 i‡(
Ál£
)

274 
	`FAIL
("")

278 i‡(
åue
)

281 
	`FAIL
("")

283 
	}
}

285 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Suµ‹tsAŒMa¸os
)

287 
	`CHECK
(
åue
);

288 
	`CHECK_EQUAL
(
åue
,Årue);

289 
	`STRCMP_EQUAL
("", "");

290 
	`LONGS_EQUAL
(1, 1);

291 
	`DOUBLES_EQUAL
(1, 1, 0.01);

292 
	`FAIL
("");

293 
	}
}

295 
	$IGNORE_TEST
(
Uã°
, 
Ign‹eTe°Ac˚ssögFixtuª
)

297 
	`CHECK
(
fixtuª
 != 0);

298 
	}
}

300 
	$TEST
(
Uã°
, 
Ma¸osU£dInSëup
)

302 
	`IGNORE_ALL_LEAKS_IN_TEST
();

303 
fixtuª
->
	`£tSëup
(
_ÁûMëhod
);

304 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

305 
fixtuª
->
	`runAŒTe°s
();

306 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

307 
	}
}

309 
	$TEST
(
Uã°
, 
Ma¸osU£dInTórDown
)

311 
	`IGNORE_ALL_LEAKS_IN_TEST
();

312 
fixtuª
->
	`£tTórdown
(
_ÁûMëhod
);

313 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_∑ssMëhod
);

314 
fixtuª
->
	`runAŒTe°s
();

315 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

316 
	}
}

318 
	gã¨downCÆÀd
 = 0;

320 
	$_ã¨downMëhod
()

322 
ã¨downCÆÀd
++;

323 
	}
}

325 
	$TEST
(
Uã°
, 
TórdownCÆÀdA·îTe°Faûuª
)

327 
	`IGNORE_ALL_LEAKS_IN_TEST
();

328 
fixtuª
->
	`£tTórdown
(
_ã¨downMëhod
);

329 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

330 
fixtuª
->
	`runAŒTe°s
();

331 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

332 
	`LONGS_EQUAL
(1, 
ã¨downCÆÀd
);

333 
	}
}

335 
	g°›A·îFaûuª
 = 0;

336 
	$_°›A·îFaûuªMëhod
()

338 
	`FAIL
("fail");

339 
°›A·îFaûuª
++;

340 
	}
}

342 
	$TEST
(
Uã°
, 
Te°St›sA·îTe°Faûuª
)

344 
	`IGNORE_ALL_LEAKS_IN_TEST
();

345 
°›A·îFaûuª
 = 0;

346 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_°›A·îFaûuªMëhod
);

347 
fixtuª
->
	`runAŒTe°s
();

348 
	`LONGS_EQUAL
(1, 
fixtuª
->
	`gëFaûuªCou¡
());

349 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

350 
	}
}

352 
	$TEST
(
Uã°
, 
Te°St›sA·îSëupFaûuª
)

354 
°›A·îFaûuª
 = 0;

355 
fixtuª
->
	`£tSëup
(
_°›A·îFaûuªMëhod
);

356 
fixtuª
->
	`£tTórdown
(
_°›A·îFaûuªMëhod
);

357 
fixtuª
->
	`£tTe°Fun˘i⁄
(
_ÁûMëhod
);

358 
fixtuª
->
	`runAŒTe°s
();

359 
	`LONGS_EQUAL
(2, 
fixtuª
->
	`gëFaûuªCou¡
());

360 
	`LONGS_EQUAL
(0, 
°›A·îFaûuª
);

361 
	}
}

363 
	$TEST_BASE
(
MyOwnTe°
){

364 
	`MyOwnTe°
(Ë: 
	`öTe°
(
Ál£
) {}

365 
boﬁ
 
öTe°
;

367 
	`£tup
()

369 
	`CHECK
(!
öTe°
);

370 
öTe°
 = 
åue
;

372 
	`ã¨down
()

374 
	`CHECK
(
öTe°
);

375 
öTe°
 = 
Ál£
;

377 
	}
};

379 
	$TEST_GROUP_BASE
(
Uã°MyOwn
, 
MyOwnTe°
)

381 
	}
};

383 
	$TEST
(
Uã°MyOwn
, 
ã°
)

385 
	`CHECK
(
öTe°
);

386 
	}
}

388 ˛as†
	cNuŒP¨amëîTe°
: 
public
 
Uã°


392 
	$TEST
(
Uã°MyOwn
, 
NuŒP¨amëîs
)

394 
NuŒP¨amëîTe°
 
nuŒTe°
;

395 
Te°Regi°ry
* 
ªg
 = Te°Regi°ry::
	`gëCuºítRegi°ry
();

396 
nuŒTe°
.
	`shouldRun
(
ªg
->
	`gëGroupFûãr
(),Ñeg->
	`gëNameFûãr
());

397 
	}
}

	@C:\work\workspace\EmbeddedTddWorkshop\src\main.cpp

1 
	~<WProgøm.h
>

2 
	~<m©h.h
>

5 
	~"../Ch‹dedKeybﬂrd/ö˛ude/¥ess_buâ⁄.h
"

6 
	~"../Ch‹dedKeybﬂrd/ö˛ude/deboun˚.h
"

9 
ÀdPö
 = 13;

10 
	gbuâ⁄Pö
 = 5;

12 
	$£tup
() {

13 
	`pöMode
(
buâ⁄Pö
, 
INPUT
);

14 
	`pöMode
(
ÀdPö
, 
OUTPUT
);

15 
	}
}

17 
	$maö
() {

18 
	`öô
();

19 
	`£tup
();

20 
	`°¨t
();

21 
	}
}

	@
1
.
0
240
19702
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\HardwareSerial.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\Print.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WConstants.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WInterrupts.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WMath.cpp
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\WProgram.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\binary.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\pins_arduino.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_analog.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_digital.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_private.h
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_pulse.c
C:\work\workspace\EmbeddedTddWorkshop\ArduinoCore\wiring_shift.c
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Bounce.h
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\main.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\Release\testpoint.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\bounce1.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\main.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint.cpp~
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp
C:\work\workspace\EmbeddedTddWorkshop\Blinky\testpoint_inner.cpp~
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\include\debounce.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\include\press_button.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\debounce.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\press_button.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\src\util\imp.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_debouncing.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard\tests\test_press_button.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\keyevent.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\keyevent.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\realtime.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\src\realtime.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\keyevent.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\keyevent.h
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\test_keyevent.cpp
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\time.c
C:\work\workspace\EmbeddedTddWorkshop\ChordedKeyboard_old\tests\time.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\AllTests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBuffer.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\CircularBufferTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcher.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcher.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\EventDispatcherTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\ExamplesNewOverrides.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\HelloTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockDocumentationTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\MockPrinter.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\Printer.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\PrinterTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\examples\ApplicationLib\hello.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\CodeMemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReportAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReportFormatter.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MemoryReporterPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockActualFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockExpectedFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockExpectedFunctionsList.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockFunctionCall.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockNamedValue.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupport.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupportPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\MockSupport_c.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTestExt\OrderedTest.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineArguments.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\CommandLineTestRunner.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\JUnitTestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakAllocator.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetector.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetectorMallocMacros.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakDetectorNewMacros.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\MemoryLeakWarningPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\PlatformSpecificFunctions.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\SimpleString.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestFailure.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestHarness_c.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestOutput.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestPlugin.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestRegistry.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestResult.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\TestTestingFixture.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\Utest.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\UtestMacros.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\CppUTest\VirtualCall.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Gcc\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\StarterKit\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\Symbian\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\Platform.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\include\Platforms\VisualCpp\stdint.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\CppUnitTemplates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\UnityTemplates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriver.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCIoDriverTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstance.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCMultipleInstanceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCPolymorphic.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ClassNameTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\FunctionNameCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceCTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\InterfaceTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassName.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\MockClassNameC.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\include\util\ProjectBuildTime.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\src\util\ProjectBuildTime.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\scripts\templates\ProjectTemplate\tests\util\ProjectBuildTimeTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\CodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockNamedValue.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupportPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\MockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTestExt\OrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineArguments.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\CommandLineTestRunner.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\JUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakDetector.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\MemoryLeakWarningPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Nulls\NullJUnitTestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\SimpleString.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestHarness_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestOutput.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestRegistry.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\TestResult.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\CppUTest\Utest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Gcc\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Iar\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\StarterMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\StarterKit\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\SymbianMemoryLeakWarning.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\Symbian\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\src\Platforms\VisualCpp\UtestPlatform.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCFile.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCFile.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCppFile.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\AllocationInCppFile.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineArgumentsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CommandLineTestRunnerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\AllTests.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestCodeMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReportAllocator.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReportFormatter.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMemoryReporterPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockActualFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionCall.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockExpectedFunctionsList.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockFailure.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockFailure.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockPlugin.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_c.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestMockSupport_cCFile.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\CppUTestExt\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\AllTests.h
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringExtensionsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\SimpleStringFromStdintTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\Extensions\TestOrderedTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\JUnitOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakAllocatorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakDetectorTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakOperatorOverloadsTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\MemoryLeakWarningTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\NullTestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\PluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SetPluginTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\SimpleStringTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestFailureTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestHarness_cTestCFile.c
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestInstallerTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestOutputTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestRegistryTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\TestResultTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\CppUTest\tests\UtestTest.cpp
C:\work\workspace\EmbeddedTddWorkshop\src\main.cpp
